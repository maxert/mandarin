!function(e,t){"object"==typeof module&&"object"==typeof module.exports?module.exports=e.document?t(e,!0):function(e){if(!e.document)throw new Error("jQuery requires a window with a document");return t(e)}:t(e)}("undefined"!=typeof window?window:this,function(S,e){var t=[],C=S.document,u=t.slice,m=t.concat,a=t.push,o=t.indexOf,n={},i=n.toString,h=n.hasOwnProperty,g={},r="2.2.4",T=function(e,t){return new T.fn.init(e,t)},s=/^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g,l=/^-ms-/,c=/-([\da-z])/gi,d=function(e,t){return t.toUpperCase()};function p(e){var t=!!e&&"length"in e&&e.length,n=T.type(e);return"function"!==n&&!T.isWindow(e)&&("array"===n||0===t||"number"==typeof t&&0<t&&t-1 in e)}T.fn=T.prototype={jquery:r,constructor:T,selector:"",length:0,toArray:function(){return u.call(this)},get:function(e){return null!=e?e<0?this[e+this.length]:this[e]:u.call(this)},pushStack:function(e){var t=T.merge(this.constructor(),e);return t.prevObject=this,t.context=this.context,t},each:function(e){return T.each(this,e)},map:function(n){return this.pushStack(T.map(this,function(e,t){return n.call(e,t,e)}))},slice:function(){return this.pushStack(u.apply(this,arguments))},first:function(){return this.eq(0)},last:function(){return this.eq(-1)},eq:function(e){var t=this.length,n=+e+(e<0?t:0);return this.pushStack(0<=n&&n<t?[this[n]]:[])},end:function(){return this.prevObject||this.constructor()},push:a,sort:t.sort,splice:t.splice},T.extend=T.fn.extend=function(){var e,t,n,i,o,r,s=arguments[0]||{},a=1,l=arguments.length,c=!1;for("boolean"==typeof s&&(c=s,s=arguments[a]||{},a++),"object"==typeof s||T.isFunction(s)||(s={}),a===l&&(s=this,a--);a<l;a++)if(null!=(e=arguments[a]))for(t in e)n=s[t],s!==(i=e[t])&&(c&&i&&(T.isPlainObject(i)||(o=T.isArray(i)))?(r=o?(o=!1,n&&T.isArray(n)?n:[]):n&&T.isPlainObject(n)?n:{},s[t]=T.extend(c,r,i)):void 0!==i&&(s[t]=i));return s},T.extend({expando:"jQuery"+(r+Math.random()).replace(/\D/g,""),isReady:!0,error:function(e){throw new Error(e)},noop:function(){},isFunction:function(e){return"function"===T.type(e)},isArray:Array.isArray,isWindow:function(e){return null!=e&&e===e.window},isNumeric:function(e){var t=e&&e.toString();return!T.isArray(e)&&0<=t-parseFloat(t)+1},isPlainObject:function(e){var t;if("object"!==T.type(e)||e.nodeType||T.isWindow(e))return!1;if(e.constructor&&!h.call(e,"constructor")&&!h.call(e.constructor.prototype||{},"isPrototypeOf"))return!1;for(t in e);return void 0===t||h.call(e,t)},isEmptyObject:function(e){var t;for(t in e)return!1;return!0},type:function(e){return null==e?e+"":"object"==typeof e||"function"==typeof e?n[i.call(e)]||"object":typeof e},globalEval:function(e){var t,n=eval;(e=T.trim(e))&&(1===e.indexOf("use strict")?((t=C.createElement("script")).text=e,C.head.appendChild(t).parentNode.removeChild(t)):n(e))},camelCase:function(e){return e.replace(l,"ms-").replace(c,d)},nodeName:function(e,t){return e.nodeName&&e.nodeName.toLowerCase()===t.toLowerCase()},each:function(e,t){var n,i=0;if(p(e))for(n=e.length;i<n&&!1!==t.call(e[i],i,e[i]);i++);else for(i in e)if(!1===t.call(e[i],i,e[i]))break;return e},trim:function(e){return null==e?"":(e+"").replace(s,"")},makeArray:function(e,t){var n=t||[];return null!=e&&(p(Object(e))?T.merge(n,"string"==typeof e?[e]:e):a.call(n,e)),n},inArray:function(e,t,n){return null==t?-1:o.call(t,e,n)},merge:function(e,t){for(var n=+t.length,i=0,o=e.length;i<n;i++)e[o++]=t[i];return e.length=o,e},grep:function(e,t,n){for(var i=[],o=0,r=e.length,s=!n;o<r;o++)!t(e[o],o)!==s&&i.push(e[o]);return i},map:function(e,t,n){var i,o,r=0,s=[];if(p(e))for(i=e.length;r<i;r++)null!=(o=t(e[r],r,n))&&s.push(o);else for(r in e)null!=(o=t(e[r],r,n))&&s.push(o);return m.apply([],s)},guid:1,proxy:function(e,t){var n,i,o;if("string"==typeof t&&(n=e[t],t=e,e=n),T.isFunction(e))return i=u.call(arguments,2),(o=function(){return e.apply(t||this,i.concat(u.call(arguments)))}).guid=e.guid=e.guid||T.guid++,o},now:Date.now,support:g}),"function"==typeof Symbol&&(T.fn[Symbol.iterator]=t[Symbol.iterator]),T.each("Boolean Number String Function Array Date RegExp Object Error Symbol".split(" "),function(e,t){n["[object "+t+"]"]=t.toLowerCase()});var f=function(n){var e,h,b,r,o,m,d,g,x,l,c,w,S,s,C,v,a,u,y,T="sizzle"+1*new Date,k=n.document,E=0,i=0,p=oe(),f=oe(),A=oe(),P=function(e,t){return e===t&&(c=!0),0},N={}.hasOwnProperty,t=[],L=t.pop,_=t.push,D=t.push,$=t.slice,O=function(e,t){for(var n=0,i=e.length;n<i;n++)if(e[n]===t)return n;return-1},M="checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped",j="[\\x20\\t\\r\\n\\f]",H="(?:\\\\.|[\\w-]|[^\\x00-\\xa0])+",F="\\["+j+"*("+H+")(?:"+j+"*([*^$|!~]?=)"+j+"*(?:'((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\"|("+H+"))|)"+j+"*\\]",q=":("+H+")(?:\\((('((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\")|((?:\\\\.|[^\\\\()[\\]]|"+F+")*)|.*)\\)|)",I=new RegExp(j+"+","g"),R=new RegExp("^"+j+"+|((?:^|[^\\\\])(?:\\\\.)*)"+j+"+$","g"),B=new RegExp("^"+j+"*,"+j+"*"),z=new RegExp("^"+j+"*([>+~]|"+j+")"+j+"*"),U=new RegExp("="+j+"*([^\\]'\"]*?)"+j+"*\\]","g"),W=new RegExp(q),V=new RegExp("^"+H+"$"),G={ID:new RegExp("^#("+H+")"),CLASS:new RegExp("^\\.("+H+")"),TAG:new RegExp("^("+H+"|[*])"),ATTR:new RegExp("^"+F),PSEUDO:new RegExp("^"+q),CHILD:new RegExp("^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\("+j+"*(even|odd|(([+-]|)(\\d*)n|)"+j+"*(?:([+-]|)"+j+"*(\\d+)|))"+j+"*\\)|)","i"),bool:new RegExp("^(?:"+M+")$","i"),needsContext:new RegExp("^"+j+"*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\("+j+"*((?:-\\d)?\\d*)"+j+"*\\)|)(?=[^-]|$)","i")},X=/^(?:input|select|textarea|button)$/i,K=/^h\d$/i,Y=/^[^{]+\{\s*\[native \w/,Q=/^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/,J=/[+~]/,Z=/'|\\/g,ee=new RegExp("\\\\([\\da-f]{1,6}"+j+"?|("+j+")|.)","ig"),te=function(e,t,n){var i="0x"+t-65536;return i!=i||n?t:i<0?String.fromCharCode(i+65536):String.fromCharCode(i>>10|55296,1023&i|56320)},ne=function(){w()};try{D.apply(t=$.call(k.childNodes),k.childNodes),t[k.childNodes.length].nodeType}catch(e){D={apply:t.length?function(e,t){_.apply(e,$.call(t))}:function(e,t){for(var n=e.length,i=0;e[n++]=t[i++];);e.length=n-1}}}function ie(e,t,n,i){var o,r,s,a,l,c,u,d,p=t&&t.ownerDocument,f=t?t.nodeType:9;if(n=n||[],"string"!=typeof e||!e||1!==f&&9!==f&&11!==f)return n;if(!i&&((t?t.ownerDocument||t:k)!==S&&w(t),t=t||S,C)){if(11!==f&&(c=Q.exec(e)))if(o=c[1]){if(9===f){if(!(s=t.getElementById(o)))return n;if(s.id===o)return n.push(s),n}else if(p&&(s=p.getElementById(o))&&y(t,s)&&s.id===o)return n.push(s),n}else{if(c[2])return D.apply(n,t.getElementsByTagName(e)),n;if((o=c[3])&&h.getElementsByClassName&&t.getElementsByClassName)return D.apply(n,t.getElementsByClassName(o)),n}if(h.qsa&&!A[e+" "]&&(!v||!v.test(e))){if(1!==f)p=t,d=e;else if("object"!==t.nodeName.toLowerCase()){for((a=t.getAttribute("id"))?a=a.replace(Z,"\\$&"):t.setAttribute("id",a=T),r=(u=m(e)).length,l=V.test(a)?"#"+a:"[id='"+a+"']";r--;)u[r]=l+" "+he(u[r]);d=u.join(","),p=J.test(e)&&pe(t.parentNode)||t}if(d)try{return D.apply(n,p.querySelectorAll(d)),n}catch(e){}finally{a===T&&t.removeAttribute("id")}}}return g(e.replace(R,"$1"),t,n,i)}function oe(){var i=[];return function e(t,n){return i.push(t+" ")>b.cacheLength&&delete e[i.shift()],e[t+" "]=n}}function re(e){return e[T]=!0,e}function se(e){var t=S.createElement("div");try{return!!e(t)}catch(e){return!1}finally{t.parentNode&&t.parentNode.removeChild(t),t=null}}function ae(e,t){for(var n=e.split("|"),i=n.length;i--;)b.attrHandle[n[i]]=t}function le(e,t){var n=t&&e,i=n&&1===e.nodeType&&1===t.nodeType&&(~t.sourceIndex||1<<31)-(~e.sourceIndex||1<<31);if(i)return i;if(n)for(;n=n.nextSibling;)if(n===t)return-1;return e?1:-1}function ce(t){return function(e){return"input"===e.nodeName.toLowerCase()&&e.type===t}}function ue(n){return function(e){var t=e.nodeName.toLowerCase();return("input"===t||"button"===t)&&e.type===n}}function de(s){return re(function(r){return r=+r,re(function(e,t){for(var n,i=s([],e.length,r),o=i.length;o--;)e[n=i[o]]&&(e[n]=!(t[n]=e[n]))})})}function pe(e){return e&&void 0!==e.getElementsByTagName&&e}for(e in h=ie.support={},o=ie.isXML=function(e){var t=e&&(e.ownerDocument||e).documentElement;return!!t&&"HTML"!==t.nodeName},w=ie.setDocument=function(e){var t,n,i=e?e.ownerDocument||e:k;return i!==S&&9===i.nodeType&&i.documentElement&&(s=(S=i).documentElement,C=!o(S),(n=S.defaultView)&&n.top!==n&&(n.addEventListener?n.addEventListener("unload",ne,!1):n.attachEvent&&n.attachEvent("onunload",ne)),h.attributes=se(function(e){return e.className="i",!e.getAttribute("className")}),h.getElementsByTagName=se(function(e){return e.appendChild(S.createComment("")),!e.getElementsByTagName("*").length}),h.getElementsByClassName=Y.test(S.getElementsByClassName),h.getById=se(function(e){return s.appendChild(e).id=T,!S.getElementsByName||!S.getElementsByName(T).length}),h.getById?(b.find.ID=function(e,t){if(void 0!==t.getElementById&&C){var n=t.getElementById(e);return n?[n]:[]}},b.filter.ID=function(e){var t=e.replace(ee,te);return function(e){return e.getAttribute("id")===t}}):(delete b.find.ID,b.filter.ID=function(e){var n=e.replace(ee,te);return function(e){var t=void 0!==e.getAttributeNode&&e.getAttributeNode("id");return t&&t.value===n}}),b.find.TAG=h.getElementsByTagName?function(e,t){return void 0!==t.getElementsByTagName?t.getElementsByTagName(e):h.qsa?t.querySelectorAll(e):void 0}:function(e,t){var n,i=[],o=0,r=t.getElementsByTagName(e);if("*"!==e)return r;for(;n=r[o++];)1===n.nodeType&&i.push(n);return i},b.find.CLASS=h.getElementsByClassName&&function(e,t){if(void 0!==t.getElementsByClassName&&C)return t.getElementsByClassName(e)},a=[],v=[],(h.qsa=Y.test(S.querySelectorAll))&&(se(function(e){s.appendChild(e).innerHTML="<a id='"+T+"'></a><select id='"+T+"-\r\\' msallowcapture=''><option selected=''></option></select>",e.querySelectorAll("[msallowcapture^='']").length&&v.push("[*^$]="+j+"*(?:''|\"\")"),e.querySelectorAll("[selected]").length||v.push("\\["+j+"*(?:value|"+M+")"),e.querySelectorAll("[id~="+T+"-]").length||v.push("~="),e.querySelectorAll(":checked").length||v.push(":checked"),e.querySelectorAll("a#"+T+"+*").length||v.push(".#.+[+~]")}),se(function(e){var t=S.createElement("input");t.setAttribute("type","hidden"),e.appendChild(t).setAttribute("name","D"),e.querySelectorAll("[name=d]").length&&v.push("name"+j+"*[*^$|!~]?="),e.querySelectorAll(":enabled").length||v.push(":enabled",":disabled"),e.querySelectorAll("*,:x"),v.push(",.*:")})),(h.matchesSelector=Y.test(u=s.matches||s.webkitMatchesSelector||s.mozMatchesSelector||s.oMatchesSelector||s.msMatchesSelector))&&se(function(e){h.disconnectedMatch=u.call(e,"div"),u.call(e,"[s!='']:x"),a.push("!=",q)}),v=v.length&&new RegExp(v.join("|")),a=a.length&&new RegExp(a.join("|")),t=Y.test(s.compareDocumentPosition),y=t||Y.test(s.contains)?function(e,t){var n=9===e.nodeType?e.documentElement:e,i=t&&t.parentNode;return e===i||!(!i||1!==i.nodeType||!(n.contains?n.contains(i):e.compareDocumentPosition&&16&e.compareDocumentPosition(i)))}:function(e,t){if(t)for(;t=t.parentNode;)if(t===e)return!0;return!1},P=t?function(e,t){if(e===t)return c=!0,0;var n=!e.compareDocumentPosition-!t.compareDocumentPosition;return n||(1&(n=(e.ownerDocument||e)===(t.ownerDocument||t)?e.compareDocumentPosition(t):1)||!h.sortDetached&&t.compareDocumentPosition(e)===n?e===S||e.ownerDocument===k&&y(k,e)?-1:t===S||t.ownerDocument===k&&y(k,t)?1:l?O(l,e)-O(l,t):0:4&n?-1:1)}:function(e,t){if(e===t)return c=!0,0;var n,i=0,o=e.parentNode,r=t.parentNode,s=[e],a=[t];if(!o||!r)return e===S?-1:t===S?1:o?-1:r?1:l?O(l,e)-O(l,t):0;if(o===r)return le(e,t);for(n=e;n=n.parentNode;)s.unshift(n);for(n=t;n=n.parentNode;)a.unshift(n);for(;s[i]===a[i];)i++;return i?le(s[i],a[i]):s[i]===k?-1:a[i]===k?1:0}),S},ie.matches=function(e,t){return ie(e,null,null,t)},ie.matchesSelector=function(e,t){if((e.ownerDocument||e)!==S&&w(e),t=t.replace(U,"='$1']"),h.matchesSelector&&C&&!A[t+" "]&&(!a||!a.test(t))&&(!v||!v.test(t)))try{var n=u.call(e,t);if(n||h.disconnectedMatch||e.document&&11!==e.document.nodeType)return n}catch(e){}return 0<ie(t,S,null,[e]).length},ie.contains=function(e,t){return(e.ownerDocument||e)!==S&&w(e),y(e,t)},ie.attr=function(e,t){(e.ownerDocument||e)!==S&&w(e);var n=b.attrHandle[t.toLowerCase()],i=n&&N.call(b.attrHandle,t.toLowerCase())?n(e,t,!C):void 0;return void 0!==i?i:h.attributes||!C?e.getAttribute(t):(i=e.getAttributeNode(t))&&i.specified?i.value:null},ie.error=function(e){throw new Error("Syntax error, unrecognized expression: "+e)},ie.uniqueSort=function(e){var t,n=[],i=0,o=0;if(c=!h.detectDuplicates,l=!h.sortStable&&e.slice(0),e.sort(P),c){for(;t=e[o++];)t===e[o]&&(i=n.push(o));for(;i--;)e.splice(n[i],1)}return l=null,e},r=ie.getText=function(e){var t,n="",i=0,o=e.nodeType;if(o){if(1===o||9===o||11===o){if("string"==typeof e.textContent)return e.textContent;for(e=e.firstChild;e;e=e.nextSibling)n+=r(e)}else if(3===o||4===o)return e.nodeValue}else for(;t=e[i++];)n+=r(t);return n},(b=ie.selectors={cacheLength:50,createPseudo:re,match:G,attrHandle:{},find:{},relative:{">":{dir:"parentNode",first:!0}," ":{dir:"parentNode"},"+":{dir:"previousSibling",first:!0},"~":{dir:"previousSibling"}},preFilter:{ATTR:function(e){return e[1]=e[1].replace(ee,te),e[3]=(e[3]||e[4]||e[5]||"").replace(ee,te),"~="===e[2]&&(e[3]=" "+e[3]+" "),e.slice(0,4)},CHILD:function(e){return e[1]=e[1].toLowerCase(),"nth"===e[1].slice(0,3)?(e[3]||ie.error(e[0]),e[4]=+(e[4]?e[5]+(e[6]||1):2*("even"===e[3]||"odd"===e[3])),e[5]=+(e[7]+e[8]||"odd"===e[3])):e[3]&&ie.error(e[0]),e},PSEUDO:function(e){var t,n=!e[6]&&e[2];return G.CHILD.test(e[0])?null:(e[3]?e[2]=e[4]||e[5]||"":n&&W.test(n)&&(t=m(n,!0))&&(t=n.indexOf(")",n.length-t)-n.length)&&(e[0]=e[0].slice(0,t),e[2]=n.slice(0,t)),e.slice(0,3))}},filter:{TAG:function(e){var t=e.replace(ee,te).toLowerCase();return"*"===e?function(){return!0}:function(e){return e.nodeName&&e.nodeName.toLowerCase()===t}},CLASS:function(e){var t=p[e+" "];return t||(t=new RegExp("(^|"+j+")"+e+"("+j+"|$)"))&&p(e,function(e){return t.test("string"==typeof e.className&&e.className||void 0!==e.getAttribute&&e.getAttribute("class")||"")})},ATTR:function(n,i,o){return function(e){var t=ie.attr(e,n);return null==t?"!="===i:!i||(t+="","="===i?t===o:"!="===i?t!==o:"^="===i?o&&0===t.indexOf(o):"*="===i?o&&-1<t.indexOf(o):"$="===i?o&&t.slice(-o.length)===o:"~="===i?-1<(" "+t.replace(I," ")+" ").indexOf(o):"|="===i&&(t===o||t.slice(0,o.length+1)===o+"-"))}},CHILD:function(h,e,t,m,g){var v="nth"!==h.slice(0,3),y="last"!==h.slice(-4),k="of-type"===e;return 1===m&&0===g?function(e){return!!e.parentNode}:function(e,t,n){var i,o,r,s,a,l,c=v!==y?"nextSibling":"previousSibling",u=e.parentNode,d=k&&e.nodeName.toLowerCase(),p=!n&&!k,f=!1;if(u){if(v){for(;c;){for(s=e;s=s[c];)if(k?s.nodeName.toLowerCase()===d:1===s.nodeType)return!1;l=c="only"===h&&!l&&"nextSibling"}return!0}if(l=[y?u.firstChild:u.lastChild],y&&p){for(f=(a=(i=(o=(r=(s=u)[T]||(s[T]={}))[s.uniqueID]||(r[s.uniqueID]={}))[h]||[])[0]===E&&i[1])&&i[2],s=a&&u.childNodes[a];s=++a&&s&&s[c]||(f=a=0)||l.pop();)if(1===s.nodeType&&++f&&s===e){o[h]=[E,a,f];break}}else if(p&&(f=a=(i=(o=(r=(s=e)[T]||(s[T]={}))[s.uniqueID]||(r[s.uniqueID]={}))[h]||[])[0]===E&&i[1]),!1===f)for(;(s=++a&&s&&s[c]||(f=a=0)||l.pop())&&((k?s.nodeName.toLowerCase()!==d:1!==s.nodeType)||!++f||(p&&((o=(r=s[T]||(s[T]={}))[s.uniqueID]||(r[s.uniqueID]={}))[h]=[E,f]),s!==e)););return(f-=g)===m||f%m==0&&0<=f/m}}},PSEUDO:function(e,r){var t,s=b.pseudos[e]||b.setFilters[e.toLowerCase()]||ie.error("unsupported pseudo: "+e);return s[T]?s(r):1<s.length?(t=[e,e,"",r],b.setFilters.hasOwnProperty(e.toLowerCase())?re(function(e,t){for(var n,i=s(e,r),o=i.length;o--;)e[n=O(e,i[o])]=!(t[n]=i[o])}):function(e){return s(e,0,t)}):s}},pseudos:{not:re(function(e){var i=[],o=[],a=d(e.replace(R,"$1"));return a[T]?re(function(e,t,n,i){for(var o,r=a(e,null,i,[]),s=e.length;s--;)(o=r[s])&&(e[s]=!(t[s]=o))}):function(e,t,n){return i[0]=e,a(i,null,n,o),i[0]=null,!o.pop()}}),has:re(function(t){return function(e){return 0<ie(t,e).length}}),contains:re(function(t){return t=t.replace(ee,te),function(e){return-1<(e.textContent||e.innerText||r(e)).indexOf(t)}}),lang:re(function(n){return V.test(n||"")||ie.error("unsupported lang: "+n),n=n.replace(ee,te).toLowerCase(),function(e){var t;do{if(t=C?e.lang:e.getAttribute("xml:lang")||e.getAttribute("lang"))return(t=t.toLowerCase())===n||0===t.indexOf(n+"-")}while((e=e.parentNode)&&1===e.nodeType);return!1}}),target:function(e){var t=n.location&&n.location.hash;return t&&t.slice(1)===e.id},root:function(e){return e===s},focus:function(e){return e===S.activeElement&&(!S.hasFocus||S.hasFocus())&&!!(e.type||e.href||~e.tabIndex)},enabled:function(e){return!1===e.disabled},disabled:function(e){return!0===e.disabled},checked:function(e){var t=e.nodeName.toLowerCase();return"input"===t&&!!e.checked||"option"===t&&!!e.selected},selected:function(e){return e.parentNode&&e.parentNode.selectedIndex,!0===e.selected},empty:function(e){for(e=e.firstChild;e;e=e.nextSibling)if(e.nodeType<6)return!1;return!0},parent:function(e){return!b.pseudos.empty(e)},header:function(e){return K.test(e.nodeName)},input:function(e){return X.test(e.nodeName)},button:function(e){var t=e.nodeName.toLowerCase();return"input"===t&&"button"===e.type||"button"===t},text:function(e){var t;return"input"===e.nodeName.toLowerCase()&&"text"===e.type&&(null==(t=e.getAttribute("type"))||"text"===t.toLowerCase())},first:de(function(){return[0]}),last:de(function(e,t){return[t-1]}),eq:de(function(e,t,n){return[n<0?n+t:n]}),even:de(function(e,t){for(var n=0;n<t;n+=2)e.push(n);return e}),odd:de(function(e,t){for(var n=1;n<t;n+=2)e.push(n);return e}),lt:de(function(e,t,n){for(var i=n<0?n+t:n;0<=--i;)e.push(i);return e}),gt:de(function(e,t,n){for(var i=n<0?n+t:n;++i<t;)e.push(i);return e})}}).pseudos.nth=b.pseudos.eq,{radio:!0,checkbox:!0,file:!0,password:!0,image:!0})b.pseudos[e]=ce(e);for(e in{submit:!0,reset:!0})b.pseudos[e]=ue(e);function fe(){}function he(e){for(var t=0,n=e.length,i="";t<n;t++)i+=e[t].value;return i}function me(a,e,t){var l=e.dir,c=t&&"parentNode"===l,u=i++;return e.first?function(e,t,n){for(;e=e[l];)if(1===e.nodeType||c)return a(e,t,n)}:function(e,t,n){var i,o,r,s=[E,u];if(n){for(;e=e[l];)if((1===e.nodeType||c)&&a(e,t,n))return!0}else for(;e=e[l];)if(1===e.nodeType||c){if((i=(o=(r=e[T]||(e[T]={}))[e.uniqueID]||(r[e.uniqueID]={}))[l])&&i[0]===E&&i[1]===u)return s[2]=i[2];if((o[l]=s)[2]=a(e,t,n))return!0}}}function ge(o){return 1<o.length?function(e,t,n){for(var i=o.length;i--;)if(!o[i](e,t,n))return!1;return!0}:o[0]}function ve(e,t,n,i,o){for(var r,s=[],a=0,l=e.length,c=null!=t;a<l;a++)(r=e[a])&&(n&&!n(r,i,o)||(s.push(r),c&&t.push(a)));return s}function ye(f,h,m,g,v,e){return g&&!g[T]&&(g=ye(g)),v&&!v[T]&&(v=ye(v,e)),re(function(e,t,n,i){var o,r,s,a=[],l=[],c=t.length,u=e||function(e,t,n){for(var i=0,o=t.length;i<o;i++)ie(e,t[i],n);return n}(h||"*",n.nodeType?[n]:n,[]),d=!f||!e&&h?u:ve(u,a,f,n,i),p=m?v||(e?f:c||g)?[]:t:d;if(m&&m(d,p,n,i),g)for(o=ve(p,l),g(o,[],n,i),r=o.length;r--;)(s=o[r])&&(p[l[r]]=!(d[l[r]]=s));if(e){if(v||f){if(v){for(o=[],r=p.length;r--;)(s=p[r])&&o.push(d[r]=s);v(null,p=[],o,i)}for(r=p.length;r--;)(s=p[r])&&-1<(o=v?O(e,s):a[r])&&(e[o]=!(t[o]=s))}}else p=ve(p===t?p.splice(c,p.length):p),v?v(null,t,p,i):D.apply(t,p)})}function ke(e){for(var o,t,n,i=e.length,r=b.relative[e[0].type],s=r||b.relative[" "],a=r?1:0,l=me(function(e){return e===o},s,!0),c=me(function(e){return-1<O(o,e)},s,!0),u=[function(e,t,n){var i=!r&&(n||t!==x)||((o=t).nodeType?l(e,t,n):c(e,t,n));return o=null,i}];a<i;a++)if(t=b.relative[e[a].type])u=[me(ge(u),t)];else{if((t=b.filter[e[a].type].apply(null,e[a].matches))[T]){for(n=++a;n<i&&!b.relative[e[n].type];n++);return ye(1<a&&ge(u),1<a&&he(e.slice(0,a-1).concat({value:" "===e[a-2].type?"*":""})).replace(R,"$1"),t,a<n&&ke(e.slice(a,n)),n<i&&ke(e=e.slice(n)),n<i&&he(e))}u.push(t)}return ge(u)}return fe.prototype=b.filters=b.pseudos,b.setFilters=new fe,m=ie.tokenize=function(e,t){var n,i,o,r,s,a,l,c=f[e+" "];if(c)return t?0:c.slice(0);for(s=e,a=[],l=b.preFilter;s;){for(r in n&&!(i=B.exec(s))||(i&&(s=s.slice(i[0].length)||s),a.push(o=[])),n=!1,(i=z.exec(s))&&(n=i.shift(),o.push({value:n,type:i[0].replace(R," ")}),s=s.slice(n.length)),b.filter)!(i=G[r].exec(s))||l[r]&&!(i=l[r](i))||(n=i.shift(),o.push({value:n,type:r,matches:i}),s=s.slice(n.length));if(!n)break}return t?s.length:s?ie.error(e):f(e,a).slice(0)},d=ie.compile=function(e,t){var n,g,v,y,k,i,o=[],r=[],s=A[e+" "];if(!s){for(t||(t=m(e)),n=t.length;n--;)(s=ke(t[n]))[T]?o.push(s):r.push(s);(s=A(e,(g=r,y=0<(v=o).length,k=0<g.length,i=function(e,t,n,i,o){var r,s,a,l=0,c="0",u=e&&[],d=[],p=x,f=e||k&&b.find.TAG("*",o),h=E+=null==p?1:Math.random()||.1,m=f.length;for(o&&(x=t===S||t||o);c!==m&&null!=(r=f[c]);c++){if(k&&r){for(s=0,t||r.ownerDocument===S||(w(r),n=!C);a=g[s++];)if(a(r,t||S,n)){i.push(r);break}o&&(E=h)}y&&((r=!a&&r)&&l--,e&&u.push(r))}if(l+=c,y&&c!==l){for(s=0;a=v[s++];)a(u,d,t,n);if(e){if(0<l)for(;c--;)u[c]||d[c]||(d[c]=L.call(i));d=ve(d)}D.apply(i,d),o&&!e&&0<d.length&&1<l+v.length&&ie.uniqueSort(i)}return o&&(E=h,x=p),u},y?re(i):i))).selector=e}return s},g=ie.select=function(e,t,n,i){var o,r,s,a,l,c="function"==typeof e&&e,u=!i&&m(e=c.selector||e);if(n=n||[],1===u.length){if(2<(r=u[0]=u[0].slice(0)).length&&"ID"===(s=r[0]).type&&h.getById&&9===t.nodeType&&C&&b.relative[r[1].type]){if(!(t=(b.find.ID(s.matches[0].replace(ee,te),t)||[])[0]))return n;c&&(t=t.parentNode),e=e.slice(r.shift().value.length)}for(o=G.needsContext.test(e)?0:r.length;o--&&(s=r[o],!b.relative[a=s.type]);)if((l=b.find[a])&&(i=l(s.matches[0].replace(ee,te),J.test(r[0].type)&&pe(t.parentNode)||t))){if(r.splice(o,1),!(e=i.length&&he(r)))return D.apply(n,i),n;break}}return(c||d(e,u))(i,t,!C,n,!t||J.test(e)&&pe(t.parentNode)||t),n},h.sortStable=T.split("").sort(P).join("")===T,h.detectDuplicates=!!c,w(),h.sortDetached=se(function(e){return 1&e.compareDocumentPosition(S.createElement("div"))}),se(function(e){return e.innerHTML="<a href='#'></a>","#"===e.firstChild.getAttribute("href")})||ae("type|href|height|width",function(e,t,n){if(!n)return e.getAttribute(t,"type"===t.toLowerCase()?1:2)}),h.attributes&&se(function(e){return e.innerHTML="<input/>",e.firstChild.setAttribute("value",""),""===e.firstChild.getAttribute("value")})||ae("value",function(e,t,n){if(!n&&"input"===e.nodeName.toLowerCase())return e.defaultValue}),se(function(e){return null==e.getAttribute("disabled")})||ae(M,function(e,t,n){var i;if(!n)return!0===e[t]?t.toLowerCase():(i=e.getAttributeNode(t))&&i.specified?i.value:null}),ie}(S);T.find=f,T.expr=f.selectors,T.expr[":"]=T.expr.pseudos,T.uniqueSort=T.unique=f.uniqueSort,T.text=f.getText,T.isXMLDoc=f.isXML,T.contains=f.contains;var v=function(e,t,n){for(var i=[],o=void 0!==n;(e=e[t])&&9!==e.nodeType;)if(1===e.nodeType){if(o&&T(e).is(n))break;i.push(e)}return i},y=function(e,t){for(var n=[];e;e=e.nextSibling)1===e.nodeType&&e!==t&&n.push(e);return n},k=T.expr.match.needsContext,b=/^<([\w-]+)\s*\/?>(?:<\/\1>|)$/,x=/^.[^:#\[\.,]*$/;function w(e,n,i){if(T.isFunction(n))return T.grep(e,function(e,t){return!!n.call(e,t,e)!==i});if(n.nodeType)return T.grep(e,function(e){return e===n!==i});if("string"==typeof n){if(x.test(n))return T.filter(n,e,i);n=T.filter(n,e)}return T.grep(e,function(e){return-1<o.call(n,e)!==i})}T.filter=function(e,t,n){var i=t[0];return n&&(e=":not("+e+")"),1===t.length&&1===i.nodeType?T.find.matchesSelector(i,e)?[i]:[]:T.find.matches(e,T.grep(t,function(e){return 1===e.nodeType}))},T.fn.extend({find:function(e){var t,n=this.length,i=[],o=this;if("string"!=typeof e)return this.pushStack(T(e).filter(function(){for(t=0;t<n;t++)if(T.contains(o[t],this))return!0}));for(t=0;t<n;t++)T.find(e,o[t],i);return(i=this.pushStack(1<n?T.unique(i):i)).selector=this.selector?this.selector+" "+e:e,i},filter:function(e){return this.pushStack(w(this,e||[],!1))},not:function(e){return this.pushStack(w(this,e||[],!0))},is:function(e){return!!w(this,"string"==typeof e&&k.test(e)?T(e):e||[],!1).length}});var E,A=/^(?:\s*(<[\w\W]+>)[^>]*|#([\w-]*))$/;(T.fn.init=function(e,t,n){var i,o;if(!e)return this;if(n=n||E,"string"!=typeof e)return e.nodeType?(this.context=this[0]=e,this.length=1,this):T.isFunction(e)?void 0!==n.ready?n.ready(e):e(T):(void 0!==e.selector&&(this.selector=e.selector,this.context=e.context),T.makeArray(e,this));if(!(i="<"===e[0]&&">"===e[e.length-1]&&3<=e.length?[null,e,null]:A.exec(e))||!i[1]&&t)return!t||t.jquery?(t||n).find(e):this.constructor(t).find(e);if(i[1]){if(t=t instanceof T?t[0]:t,T.merge(this,T.parseHTML(i[1],t&&t.nodeType?t.ownerDocument||t:C,!0)),b.test(i[1])&&T.isPlainObject(t))for(i in t)T.isFunction(this[i])?this[i](t[i]):this.attr(i,t[i]);return this}return(o=C.getElementById(i[2]))&&o.parentNode&&(this.length=1,this[0]=o),this.context=C,this.selector=e,this}).prototype=T.fn,E=T(C);var P=/^(?:parents|prev(?:Until|All))/,N={children:!0,contents:!0,next:!0,prev:!0};function L(e,t){for(;(e=e[t])&&1!==e.nodeType;);return e}T.fn.extend({has:function(e){var t=T(e,this),n=t.length;return this.filter(function(){for(var e=0;e<n;e++)if(T.contains(this,t[e]))return!0})},closest:function(e,t){for(var n,i=0,o=this.length,r=[],s=k.test(e)||"string"!=typeof e?T(e,t||this.context):0;i<o;i++)for(n=this[i];n&&n!==t;n=n.parentNode)if(n.nodeType<11&&(s?-1<s.index(n):1===n.nodeType&&T.find.matchesSelector(n,e))){r.push(n);break}return this.pushStack(1<r.length?T.uniqueSort(r):r)},index:function(e){return e?"string"==typeof e?o.call(T(e),this[0]):o.call(this,e.jquery?e[0]:e):this[0]&&this[0].parentNode?this.first().prevAll().length:-1},add:function(e,t){return this.pushStack(T.uniqueSort(T.merge(this.get(),T(e,t))))},addBack:function(e){return this.add(null==e?this.prevObject:this.prevObject.filter(e))}}),T.each({parent:function(e){var t=e.parentNode;return t&&11!==t.nodeType?t:null},parents:function(e){return v(e,"parentNode")},parentsUntil:function(e,t,n){return v(e,"parentNode",n)},next:function(e){return L(e,"nextSibling")},prev:function(e){return L(e,"previousSibling")},nextAll:function(e){return v(e,"nextSibling")},prevAll:function(e){return v(e,"previousSibling")},nextUntil:function(e,t,n){return v(e,"nextSibling",n)},prevUntil:function(e,t,n){return v(e,"previousSibling",n)},siblings:function(e){return y((e.parentNode||{}).firstChild,e)},children:function(e){return y(e.firstChild)},contents:function(e){return e.contentDocument||T.merge([],e.childNodes)}},function(i,o){T.fn[i]=function(e,t){var n=T.map(this,o,e);return"Until"!==i.slice(-5)&&(t=e),t&&"string"==typeof t&&(n=T.filter(t,n)),1<this.length&&(N[i]||T.uniqueSort(n),P.test(i)&&n.reverse()),this.pushStack(n)}});var _,D=/\S+/g;function $(){C.removeEventListener("DOMContentLoaded",$),S.removeEventListener("load",$),T.ready()}T.Callbacks=function(i){var e,n;i="string"==typeof i?(e=i,n={},T.each(e.match(D)||[],function(e,t){n[t]=!0}),n):T.extend({},i);var o,t,r,s,a=[],l=[],c=-1,u=function(){for(s=i.once,r=o=!0;l.length;c=-1)for(t=l.shift();++c<a.length;)!1===a[c].apply(t[0],t[1])&&i.stopOnFalse&&(c=a.length,t=!1);i.memory||(t=!1),o=!1,s&&(a=t?[]:"")},d={add:function(){return a&&(t&&!o&&(c=a.length-1,l.push(t)),function n(e){T.each(e,function(e,t){T.isFunction(t)?i.unique&&d.has(t)||a.push(t):t&&t.length&&"string"!==T.type(t)&&n(t)})}(arguments),t&&!o&&u()),this},remove:function(){return T.each(arguments,function(e,t){for(var n;-1<(n=T.inArray(t,a,n));)a.splice(n,1),n<=c&&c--}),this},has:function(e){return e?-1<T.inArray(e,a):0<a.length},empty:function(){return a&&(a=[]),this},disable:function(){return s=l=[],a=t="",this},disabled:function(){return!a},lock:function(){return s=l=[],t||(a=t=""),this},locked:function(){return!!s},fireWith:function(e,t){return s||(t=[e,(t=t||[]).slice?t.slice():t],l.push(t),o||u()),this},fire:function(){return d.fireWith(this,arguments),this},fired:function(){return!!r}};return d},T.extend({Deferred:function(e){var r=[["resolve","done",T.Callbacks("once memory"),"resolved"],["reject","fail",T.Callbacks("once memory"),"rejected"],["notify","progress",T.Callbacks("memory")]],o="pending",s={state:function(){return o},always:function(){return a.done(arguments).fail(arguments),this},then:function(){var o=arguments;return T.Deferred(function(i){T.each(r,function(e,t){var n=T.isFunction(o[e])&&o[e];a[t[1]](function(){var e=n&&n.apply(this,arguments);e&&T.isFunction(e.promise)?e.promise().progress(i.notify).done(i.resolve).fail(i.reject):i[t[0]+"With"](this===s?i.promise():this,n?[e]:arguments)})}),o=null}).promise()},promise:function(e){return null!=e?T.extend(e,s):s}},a={};return s.pipe=s.then,T.each(r,function(e,t){var n=t[2],i=t[3];s[t[1]]=n.add,i&&n.add(function(){o=i},r[1^e][2].disable,r[2][2].lock),a[t[0]]=function(){return a[t[0]+"With"](this===a?s:this,arguments),this},a[t[0]+"With"]=n.fireWith}),s.promise(a),e&&e.call(a,a),a},when:function(e){var o,t,n,i=0,r=u.call(arguments),s=r.length,a=1!==s||e&&T.isFunction(e.promise)?s:0,l=1===a?e:T.Deferred(),c=function(t,n,i){return function(e){n[t]=this,i[t]=1<arguments.length?u.call(arguments):e,i===o?l.notifyWith(n,i):--a||l.resolveWith(n,i)}};if(1<s)for(o=new Array(s),t=new Array(s),n=new Array(s);i<s;i++)r[i]&&T.isFunction(r[i].promise)?r[i].promise().progress(c(i,t,o)).done(c(i,n,r)).fail(l.reject):--a;return a||l.resolveWith(n,r),l.promise()}}),T.fn.ready=function(e){return T.ready.promise().done(e),this},T.extend({isReady:!1,readyWait:1,holdReady:function(e){e?T.readyWait++:T.ready(!0)},ready:function(e){(!0===e?--T.readyWait:T.isReady)||(T.isReady=!0)!==e&&0<--T.readyWait||(_.resolveWith(C,[T]),T.fn.triggerHandler&&(T(C).triggerHandler("ready"),T(C).off("ready")))}}),T.ready.promise=function(e){return _||(_=T.Deferred(),"complete"===C.readyState||"loading"!==C.readyState&&!C.documentElement.doScroll?S.setTimeout(T.ready):(C.addEventListener("DOMContentLoaded",$),S.addEventListener("load",$))),_.promise(e)},T.ready.promise();var O=function(e,t,n,i,o,r,s){var a=0,l=e.length,c=null==n;if("object"===T.type(n))for(a in o=!0,n)O(e,t,a,n[a],!0,r,s);else if(void 0!==i&&(o=!0,T.isFunction(i)||(s=!0),c&&(t=s?(t.call(e,i),null):(c=t,function(e,t,n){return c.call(T(e),n)})),t))for(;a<l;a++)t(e[a],n,s?i:i.call(e[a],a,t(e[a],n)));return o?e:c?t.call(e):l?t(e[0],n):r},M=function(e){return 1===e.nodeType||9===e.nodeType||!+e.nodeType};function j(){this.expando=T.expando+j.uid++}j.uid=1,j.prototype={register:function(e,t){var n=t||{};return e.nodeType?e[this.expando]=n:Object.defineProperty(e,this.expando,{value:n,writable:!0,configurable:!0}),e[this.expando]},cache:function(e){if(!M(e))return{};var t=e[this.expando];return t||(t={},M(e)&&(e.nodeType?e[this.expando]=t:Object.defineProperty(e,this.expando,{value:t,configurable:!0}))),t},set:function(e,t,n){var i,o=this.cache(e);if("string"==typeof t)o[t]=n;else for(i in t)o[i]=t[i];return o},get:function(e,t){return void 0===t?this.cache(e):e[this.expando]&&e[this.expando][t]},access:function(e,t,n){var i;return void 0===t||t&&"string"==typeof t&&void 0===n?void 0!==(i=this.get(e,t))?i:this.get(e,T.camelCase(t)):(this.set(e,t,n),void 0!==n?n:t)},remove:function(e,t){var n,i,o,r=e[this.expando];if(void 0!==r){if(void 0===t)this.register(e);else{n=(i=T.isArray(t)?t.concat(t.map(T.camelCase)):(o=T.camelCase(t),t in r?[t,o]:(i=o)in r?[i]:i.match(D)||[])).length;for(;n--;)delete r[i[n]]}(void 0===t||T.isEmptyObject(r))&&(e.nodeType?e[this.expando]=void 0:delete e[this.expando])}},hasData:function(e){var t=e[this.expando];return void 0!==t&&!T.isEmptyObject(t)}};var H=new j,F=new j,q=/^(?:\{[\w\W]*\}|\[[\w\W]*\])$/,I=/[A-Z]/g;function R(e,t,n){var i;if(void 0===n&&1===e.nodeType)if(i="data-"+t.replace(I,"-$&").toLowerCase(),"string"==typeof(n=e.getAttribute(i))){try{n="true"===n||"false"!==n&&("null"===n?null:+n+""===n?+n:q.test(n)?T.parseJSON(n):n)}catch(e){}F.set(e,t,n)}else n=void 0;return n}T.extend({hasData:function(e){return F.hasData(e)||H.hasData(e)},data:function(e,t,n){return F.access(e,t,n)},removeData:function(e,t){F.remove(e,t)},_data:function(e,t,n){return H.access(e,t,n)},_removeData:function(e,t){H.remove(e,t)}}),T.fn.extend({data:function(i,e){var t,n,o,r=this[0],s=r&&r.attributes;if(void 0!==i)return"object"==typeof i?this.each(function(){F.set(this,i)}):O(this,function(t){var e,n;if(r&&void 0===t)return void 0!==(e=F.get(r,i)||F.get(r,i.replace(I,"-$&").toLowerCase()))?e:(n=T.camelCase(i),void 0!==(e=F.get(r,n))?e:void 0!==(e=R(r,n,void 0))?e:void 0);n=T.camelCase(i),this.each(function(){var e=F.get(this,n);F.set(this,n,t),-1<i.indexOf("-")&&void 0!==e&&F.set(this,i,t)})},null,e,1<arguments.length,null,!0);if(this.length&&(o=F.get(r),1===r.nodeType&&!H.get(r,"hasDataAttrs"))){for(t=s.length;t--;)s[t]&&0===(n=s[t].name).indexOf("data-")&&(n=T.camelCase(n.slice(5)),R(r,n,o[n]));H.set(r,"hasDataAttrs",!0)}return o},removeData:function(e){return this.each(function(){F.remove(this,e)})}}),T.extend({queue:function(e,t,n){var i;if(e)return t=(t||"fx")+"queue",i=H.get(e,t),n&&(!i||T.isArray(n)?i=H.access(e,t,T.makeArray(n)):i.push(n)),i||[]},dequeue:function(e,t){t=t||"fx";var n=T.queue(e,t),i=n.length,o=n.shift(),r=T._queueHooks(e,t);"inprogress"===o&&(o=n.shift(),i--),o&&("fx"===t&&n.unshift("inprogress"),delete r.stop,o.call(e,function(){T.dequeue(e,t)},r)),!i&&r&&r.empty.fire()},_queueHooks:function(e,t){var n=t+"queueHooks";return H.get(e,n)||H.access(e,n,{empty:T.Callbacks("once memory").add(function(){H.remove(e,[t+"queue",n])})})}}),T.fn.extend({queue:function(t,n){var e=2;return"string"!=typeof t&&(n=t,t="fx",e--),arguments.length<e?T.queue(this[0],t):void 0===n?this:this.each(function(){var e=T.queue(this,t,n);T._queueHooks(this,t),"fx"===t&&"inprogress"!==e[0]&&T.dequeue(this,t)})},dequeue:function(e){return this.each(function(){T.dequeue(this,e)})},clearQueue:function(e){return this.queue(e||"fx",[])},promise:function(e,t){var n,i=1,o=T.Deferred(),r=this,s=this.length,a=function(){--i||o.resolveWith(r,[r])};for("string"!=typeof e&&(t=e,e=void 0),e=e||"fx";s--;)(n=H.get(r[s],e+"queueHooks"))&&n.empty&&(i++,n.empty.add(a));return a(),o.promise(t)}});var B=/[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/.source,z=new RegExp("^(?:([+-])=|)("+B+")([a-z%]*)$","i"),U=["Top","Right","Bottom","Left"],W=function(e,t){return e=t||e,"none"===T.css(e,"display")||!T.contains(e.ownerDocument,e)};function V(e,t,n,i){var o,r=1,s=20,a=i?function(){return i.cur()}:function(){return T.css(e,t,"")},l=a(),c=n&&n[3]||(T.cssNumber[t]?"":"px"),u=(T.cssNumber[t]||"px"!==c&&+l)&&z.exec(T.css(e,t));if(u&&u[3]!==c)for(c=c||u[3],n=n||[],u=+l||1;u/=r=r||".5",T.style(e,t,u+c),r!==(r=a()/l)&&1!==r&&--s;);return n&&(u=+u||+l||0,o=n[1]?u+(n[1]+1)*n[2]:+n[2],i&&(i.unit=c,i.start=u,i.end=o)),o}var G=/^(?:checkbox|radio)$/i,X=/<([\w:-]+)/,K=/^$|\/(?:java|ecma)script/i,Y={option:[1,"<select multiple='multiple'>","</select>"],thead:[1,"<table>","</table>"],col:[2,"<table><colgroup>","</colgroup></table>"],tr:[2,"<table><tbody>","</tbody></table>"],td:[3,"<table><tbody><tr>","</tr></tbody></table>"],_default:[0,"",""]};function Q(e,t){var n=void 0!==e.getElementsByTagName?e.getElementsByTagName(t||"*"):void 0!==e.querySelectorAll?e.querySelectorAll(t||"*"):[];return void 0===t||t&&T.nodeName(e,t)?T.merge([e],n):n}function J(e,t){for(var n=0,i=e.length;n<i;n++)H.set(e[n],"globalEval",!t||H.get(t[n],"globalEval"))}Y.optgroup=Y.option,Y.tbody=Y.tfoot=Y.colgroup=Y.caption=Y.thead,Y.th=Y.td;var Z,ee,te=/<|&#?\w+;/;function ne(e,t,n,i,o){for(var r,s,a,l,c,u,d=t.createDocumentFragment(),p=[],f=0,h=e.length;f<h;f++)if((r=e[f])||0===r)if("object"===T.type(r))T.merge(p,r.nodeType?[r]:r);else if(te.test(r)){for(s=s||d.appendChild(t.createElement("div")),a=(X.exec(r)||["",""])[1].toLowerCase(),l=Y[a]||Y._default,s.innerHTML=l[1]+T.htmlPrefilter(r)+l[2],u=l[0];u--;)s=s.lastChild;T.merge(p,s.childNodes),(s=d.firstChild).textContent=""}else p.push(t.createTextNode(r));for(d.textContent="",f=0;r=p[f++];)if(i&&-1<T.inArray(r,i))o&&o.push(r);else if(c=T.contains(r.ownerDocument,r),s=Q(d.appendChild(r),"script"),c&&J(s),n)for(u=0;r=s[u++];)K.test(r.type||"")&&n.push(r);return d}Z=C.createDocumentFragment().appendChild(C.createElement("div")),(ee=C.createElement("input")).setAttribute("type","radio"),ee.setAttribute("checked","checked"),ee.setAttribute("name","t"),Z.appendChild(ee),g.checkClone=Z.cloneNode(!0).cloneNode(!0).lastChild.checked,Z.innerHTML="<textarea>x</textarea>",g.noCloneChecked=!!Z.cloneNode(!0).lastChild.defaultValue;var ie=/^key/,oe=/^(?:mouse|pointer|contextmenu|drag|drop)|click/,re=/^([^.]*)(?:\.(.+)|)/;function se(){return!0}function ae(){return!1}function le(){try{return C.activeElement}catch(e){}}function ce(e,t,n,i,o,r){var s,a;if("object"==typeof t){for(a in"string"!=typeof n&&(i=i||n,n=void 0),t)ce(e,a,n,i,t[a],r);return e}if(null==i&&null==o?(o=n,i=n=void 0):null==o&&("string"==typeof n?(o=i,i=void 0):(o=i,i=n,n=void 0)),!1===o)o=ae;else if(!o)return e;return 1===r&&(s=o,(o=function(e){return T().off(e),s.apply(this,arguments)}).guid=s.guid||(s.guid=T.guid++)),e.each(function(){T.event.add(this,t,o,i,n)})}T.event={global:{},add:function(t,e,n,i,o){var r,s,a,l,c,u,d,p,f,h,m,g=H.get(t);if(g)for(n.handler&&(n=(r=n).handler,o=r.selector),n.guid||(n.guid=T.guid++),(l=g.events)||(l=g.events={}),(s=g.handle)||(s=g.handle=function(e){return void 0!==T&&T.event.triggered!==e.type?T.event.dispatch.apply(t,arguments):void 0}),c=(e=(e||"").match(D)||[""]).length;c--;)f=m=(a=re.exec(e[c])||[])[1],h=(a[2]||"").split(".").sort(),f&&(d=T.event.special[f]||{},f=(o?d.delegateType:d.bindType)||f,d=T.event.special[f]||{},u=T.extend({type:f,origType:m,data:i,handler:n,guid:n.guid,selector:o,needsContext:o&&T.expr.match.needsContext.test(o),namespace:h.join(".")},r),(p=l[f])||((p=l[f]=[]).delegateCount=0,d.setup&&!1!==d.setup.call(t,i,h,s)||t.addEventListener&&t.addEventListener(f,s)),d.add&&(d.add.call(t,u),u.handler.guid||(u.handler.guid=n.guid)),o?p.splice(p.delegateCount++,0,u):p.push(u),T.event.global[f]=!0)},remove:function(e,t,n,i,o){var r,s,a,l,c,u,d,p,f,h,m,g=H.hasData(e)&&H.get(e);if(g&&(l=g.events)){for(c=(t=(t||"").match(D)||[""]).length;c--;)if(f=m=(a=re.exec(t[c])||[])[1],h=(a[2]||"").split(".").sort(),f){for(d=T.event.special[f]||{},p=l[f=(i?d.delegateType:d.bindType)||f]||[],a=a[2]&&new RegExp("(^|\\.)"+h.join("\\.(?:.*\\.|)")+"(\\.|$)"),s=r=p.length;r--;)u=p[r],!o&&m!==u.origType||n&&n.guid!==u.guid||a&&!a.test(u.namespace)||i&&i!==u.selector&&("**"!==i||!u.selector)||(p.splice(r,1),u.selector&&p.delegateCount--,d.remove&&d.remove.call(e,u));s&&!p.length&&(d.teardown&&!1!==d.teardown.call(e,h,g.handle)||T.removeEvent(e,f,g.handle),delete l[f])}else for(f in l)T.event.remove(e,f+t[c],n,i,!0);T.isEmptyObject(l)&&H.remove(e,"handle events")}},dispatch:function(e){e=T.event.fix(e);var t,n,i,o,r,s,a=u.call(arguments),l=(H.get(this,"events")||{})[e.type]||[],c=T.event.special[e.type]||{};if((a[0]=e).delegateTarget=this,!c.preDispatch||!1!==c.preDispatch.call(this,e)){for(s=T.event.handlers.call(this,e,l),t=0;(o=s[t++])&&!e.isPropagationStopped();)for(e.currentTarget=o.elem,n=0;(r=o.handlers[n++])&&!e.isImmediatePropagationStopped();)e.rnamespace&&!e.rnamespace.test(r.namespace)||(e.handleObj=r,e.data=r.data,void 0!==(i=((T.event.special[r.origType]||{}).handle||r.handler).apply(o.elem,a))&&!1===(e.result=i)&&(e.preventDefault(),e.stopPropagation()));return c.postDispatch&&c.postDispatch.call(this,e),e.result}},handlers:function(e,t){var n,i,o,r,s=[],a=t.delegateCount,l=e.target;if(a&&l.nodeType&&("click"!==e.type||isNaN(e.button)||e.button<1))for(;l!==this;l=l.parentNode||this)if(1===l.nodeType&&(!0!==l.disabled||"click"!==e.type)){for(i=[],n=0;n<a;n++)void 0===i[o=(r=t[n]).selector+" "]&&(i[o]=r.needsContext?-1<T(o,this).index(l):T.find(o,this,null,[l]).length),i[o]&&i.push(r);i.length&&s.push({elem:l,handlers:i})}return a<t.length&&s.push({elem:this,handlers:t.slice(a)}),s},props:"altKey bubbles cancelable ctrlKey currentTarget detail eventPhase metaKey relatedTarget shiftKey target timeStamp view which".split(" "),fixHooks:{},keyHooks:{props:"char charCode key keyCode".split(" "),filter:function(e,t){return null==e.which&&(e.which=null!=t.charCode?t.charCode:t.keyCode),e}},mouseHooks:{props:"button buttons clientX clientY offsetX offsetY pageX pageY screenX screenY toElement".split(" "),filter:function(e,t){var n,i,o,r=t.button;return null==e.pageX&&null!=t.clientX&&(i=(n=e.target.ownerDocument||C).documentElement,o=n.body,e.pageX=t.clientX+(i&&i.scrollLeft||o&&o.scrollLeft||0)-(i&&i.clientLeft||o&&o.clientLeft||0),e.pageY=t.clientY+(i&&i.scrollTop||o&&o.scrollTop||0)-(i&&i.clientTop||o&&o.clientTop||0)),e.which||void 0===r||(e.which=1&r?1:2&r?3:4&r?2:0),e}},fix:function(e){if(e[T.expando])return e;var t,n,i,o=e.type,r=e,s=this.fixHooks[o];for(s||(this.fixHooks[o]=s=oe.test(o)?this.mouseHooks:ie.test(o)?this.keyHooks:{}),i=s.props?this.props.concat(s.props):this.props,e=new T.Event(r),t=i.length;t--;)e[n=i[t]]=r[n];return e.target||(e.target=C),3===e.target.nodeType&&(e.target=e.target.parentNode),s.filter?s.filter(e,r):e},special:{load:{noBubble:!0},focus:{trigger:function(){if(this!==le()&&this.focus)return this.focus(),!1},delegateType:"focusin"},blur:{trigger:function(){if(this===le()&&this.blur)return this.blur(),!1},delegateType:"focusout"},click:{trigger:function(){if("checkbox"===this.type&&this.click&&T.nodeName(this,"input"))return this.click(),!1},_default:function(e){return T.nodeName(e.target,"a")}},beforeunload:{postDispatch:function(e){void 0!==e.result&&e.originalEvent&&(e.originalEvent.returnValue=e.result)}}}},T.removeEvent=function(e,t,n){e.removeEventListener&&e.removeEventListener(t,n)},T.Event=function(e,t){if(!(this instanceof T.Event))return new T.Event(e,t);e&&e.type?(this.originalEvent=e,this.type=e.type,this.isDefaultPrevented=e.defaultPrevented||void 0===e.defaultPrevented&&!1===e.returnValue?se:ae):this.type=e,t&&T.extend(this,t),this.timeStamp=e&&e.timeStamp||T.now(),this[T.expando]=!0},T.Event.prototype={constructor:T.Event,isDefaultPrevented:ae,isPropagationStopped:ae,isImmediatePropagationStopped:ae,isSimulated:!1,preventDefault:function(){var e=this.originalEvent;this.isDefaultPrevented=se,e&&!this.isSimulated&&e.preventDefault()},stopPropagation:function(){var e=this.originalEvent;this.isPropagationStopped=se,e&&!this.isSimulated&&e.stopPropagation()},stopImmediatePropagation:function(){var e=this.originalEvent;this.isImmediatePropagationStopped=se,e&&!this.isSimulated&&e.stopImmediatePropagation(),this.stopPropagation()}},T.each({mouseenter:"mouseover",mouseleave:"mouseout",pointerenter:"pointerover",pointerleave:"pointerout"},function(e,o){T.event.special[e]={delegateType:o,bindType:o,handle:function(e){var t,n=e.relatedTarget,i=e.handleObj;return n&&(n===this||T.contains(this,n))||(e.type=i.origType,t=i.handler.apply(this,arguments),e.type=o),t}}}),T.fn.extend({on:function(e,t,n,i){return ce(this,e,t,n,i)},one:function(e,t,n,i){return ce(this,e,t,n,i,1)},off:function(e,t,n){var i,o;if(e&&e.preventDefault&&e.handleObj)return i=e.handleObj,T(e.delegateTarget).off(i.namespace?i.origType+"."+i.namespace:i.origType,i.selector,i.handler),this;if("object"!=typeof e)return!1!==t&&"function"!=typeof t||(n=t,t=void 0),!1===n&&(n=ae),this.each(function(){T.event.remove(this,e,n,t)});for(o in e)this.off(o,t,e[o]);return this}});var ue=/<(?!area|br|col|embed|hr|img|input|link|meta|param)(([\w:-]+)[^>]*)\/>/gi,de=/<script|<style|<link/i,pe=/checked\s*(?:[^=]|=\s*.checked.)/i,fe=/^true\/(.*)/,he=/^\s*<!(?:\[CDATA\[|--)|(?:\]\]|--)>\s*$/g;function me(e,t){return T.nodeName(e,"table")&&T.nodeName(11!==t.nodeType?t:t.firstChild,"tr")?e.getElementsByTagName("tbody")[0]||e.appendChild(e.ownerDocument.createElement("tbody")):e}function ge(e){return e.type=(null!==e.getAttribute("type"))+"/"+e.type,e}function ve(e){var t=fe.exec(e.type);return t?e.type=t[1]:e.removeAttribute("type"),e}function ye(e,t){var n,i,o,r,s,a,l,c;if(1===t.nodeType){if(H.hasData(e)&&(r=H.access(e),s=H.set(t,r),c=r.events))for(o in delete s.handle,s.events={},c)for(n=0,i=c[o].length;n<i;n++)T.event.add(t,o,c[o][n]);F.hasData(e)&&(a=F.access(e),l=T.extend({},a),F.set(t,l))}}function ke(n,i,o,r){i=m.apply([],i);var e,t,s,a,l,c,u=0,d=n.length,p=d-1,f=i[0],h=T.isFunction(f);if(h||1<d&&"string"==typeof f&&!g.checkClone&&pe.test(f))return n.each(function(e){var t=n.eq(e);h&&(i[0]=f.call(this,e,t.html())),ke(t,i,o,r)});if(d&&(t=(e=ne(i,n[0].ownerDocument,!1,n,r)).firstChild,1===e.childNodes.length&&(e=t),t||r)){for(a=(s=T.map(Q(e,"script"),ge)).length;u<d;u++)l=e,u!==p&&(l=T.clone(l,!0,!0),a&&T.merge(s,Q(l,"script"))),o.call(n[u],l,u);if(a)for(c=s[s.length-1].ownerDocument,T.map(s,ve),u=0;u<a;u++)l=s[u],K.test(l.type||"")&&!H.access(l,"globalEval")&&T.contains(c,l)&&(l.src?T._evalUrl&&T._evalUrl(l.src):T.globalEval(l.textContent.replace(he,"")))}return n}function be(e,t,n){for(var i,o=t?T.filter(t,e):e,r=0;null!=(i=o[r]);r++)n||1!==i.nodeType||T.cleanData(Q(i)),i.parentNode&&(n&&T.contains(i.ownerDocument,i)&&J(Q(i,"script")),i.parentNode.removeChild(i));return e}T.extend({htmlPrefilter:function(e){return e.replace(ue,"<$1></$2>")},clone:function(e,t,n){var i,o,r,s,a,l,c,u=e.cloneNode(!0),d=T.contains(e.ownerDocument,e);if(!(g.noCloneChecked||1!==e.nodeType&&11!==e.nodeType||T.isXMLDoc(e)))for(s=Q(u),i=0,o=(r=Q(e)).length;i<o;i++)a=r[i],l=s[i],void 0,"input"===(c=l.nodeName.toLowerCase())&&G.test(a.type)?l.checked=a.checked:"input"!==c&&"textarea"!==c||(l.defaultValue=a.defaultValue);if(t)if(n)for(r=r||Q(e),s=s||Q(u),i=0,o=r.length;i<o;i++)ye(r[i],s[i]);else ye(e,u);return 0<(s=Q(u,"script")).length&&J(s,!d&&Q(e,"script")),u},cleanData:function(e){for(var t,n,i,o=T.event.special,r=0;void 0!==(n=e[r]);r++)if(M(n)){if(t=n[H.expando]){if(t.events)for(i in t.events)o[i]?T.event.remove(n,i):T.removeEvent(n,i,t.handle);n[H.expando]=void 0}n[F.expando]&&(n[F.expando]=void 0)}}}),T.fn.extend({domManip:ke,detach:function(e){return be(this,e,!0)},remove:function(e){return be(this,e)},text:function(e){return O(this,function(e){return void 0===e?T.text(this):this.empty().each(function(){1!==this.nodeType&&11!==this.nodeType&&9!==this.nodeType||(this.textContent=e)})},null,e,arguments.length)},append:function(){return ke(this,arguments,function(e){1!==this.nodeType&&11!==this.nodeType&&9!==this.nodeType||me(this,e).appendChild(e)})},prepend:function(){return ke(this,arguments,function(e){if(1===this.nodeType||11===this.nodeType||9===this.nodeType){var t=me(this,e);t.insertBefore(e,t.firstChild)}})},before:function(){return ke(this,arguments,function(e){this.parentNode&&this.parentNode.insertBefore(e,this)})},after:function(){return ke(this,arguments,function(e){this.parentNode&&this.parentNode.insertBefore(e,this.nextSibling)})},empty:function(){for(var e,t=0;null!=(e=this[t]);t++)1===e.nodeType&&(T.cleanData(Q(e,!1)),e.textContent="");return this},clone:function(e,t){return e=null!=e&&e,t=null==t?e:t,this.map(function(){return T.clone(this,e,t)})},html:function(e){return O(this,function(e){var t=this[0]||{},n=0,i=this.length;if(void 0===e&&1===t.nodeType)return t.innerHTML;if("string"==typeof e&&!de.test(e)&&!Y[(X.exec(e)||["",""])[1].toLowerCase()]){e=T.htmlPrefilter(e);try{for(;n<i;n++)1===(t=this[n]||{}).nodeType&&(T.cleanData(Q(t,!1)),t.innerHTML=e);t=0}catch(e){}}t&&this.empty().append(e)},null,e,arguments.length)},replaceWith:function(){var n=[];return ke(this,arguments,function(e){var t=this.parentNode;T.inArray(this,n)<0&&(T.cleanData(Q(this)),t&&t.replaceChild(e,this))},n)}}),T.each({appendTo:"append",prependTo:"prepend",insertBefore:"before",insertAfter:"after",replaceAll:"replaceWith"},function(e,s){T.fn[e]=function(e){for(var t,n=[],i=T(e),o=i.length-1,r=0;r<=o;r++)t=r===o?this:this.clone(!0),T(i[r])[s](t),a.apply(n,t.get());return this.pushStack(n)}});var xe,we={HTML:"block",BODY:"block"};function Se(e,t){var n=T(t.createElement(e)).appendTo(t.body),i=T.css(n[0],"display");return n.detach(),i}function Ce(e){var t=C,n=we[e];return n||("none"!==(n=Se(e,t))&&n||((t=(xe=(xe||T("<iframe frameborder='0' width='0' height='0'/>")).appendTo(t.documentElement))[0].contentDocument).write(),t.close(),n=Se(e,t),xe.detach()),we[e]=n),n}var Te=/^margin/,Ee=new RegExp("^("+B+")(?!px)[a-z%]+$","i"),Ae=function(e){var t=e.ownerDocument.defaultView;return t&&t.opener||(t=S),t.getComputedStyle(e)},Pe=function(e,t,n,i){var o,r,s={};for(r in t)s[r]=e.style[r],e.style[r]=t[r];for(r in o=n.apply(e,i||[]),t)e.style[r]=s[r];return o},Ne=C.documentElement;function Le(e,t,n){var i,o,r,s,a=e.style;return""!==(s=(n=n||Ae(e))?n.getPropertyValue(t)||n[t]:void 0)&&void 0!==s||T.contains(e.ownerDocument,e)||(s=T.style(e,t)),n&&!g.pixelMarginRight()&&Ee.test(s)&&Te.test(t)&&(i=a.width,o=a.minWidth,r=a.maxWidth,a.minWidth=a.maxWidth=a.width=s,s=n.width,a.width=i,a.minWidth=o,a.maxWidth=r),void 0!==s?s+"":s}function _e(e,t){return{get:function(){if(!e())return(this.get=t).apply(this,arguments);delete this.get}}}!function(){var t,n,i,o,r=C.createElement("div"),s=C.createElement("div");function e(){s.style.cssText="-webkit-box-sizing:border-box;-moz-box-sizing:border-box;box-sizing:border-box;position:relative;display:block;margin:auto;border:1px;padding:1px;top:1%;width:50%",s.innerHTML="",Ne.appendChild(r);var e=S.getComputedStyle(s);t="1%"!==e.top,o="2px"===e.marginLeft,n="4px"===e.width,s.style.marginRight="50%",i="4px"===e.marginRight,Ne.removeChild(r)}s.style&&(s.style.backgroundClip="content-box",s.cloneNode(!0).style.backgroundClip="",g.clearCloneStyle="content-box"===s.style.backgroundClip,r.style.cssText="border:0;width:8px;height:0;top:0;left:-9999px;padding:0;margin-top:1px;position:absolute",r.appendChild(s),T.extend(g,{pixelPosition:function(){return e(),t},boxSizingReliable:function(){return null==n&&e(),n},pixelMarginRight:function(){return null==n&&e(),i},reliableMarginLeft:function(){return null==n&&e(),o},reliableMarginRight:function(){var e,t=s.appendChild(C.createElement("div"));return t.style.cssText=s.style.cssText="-webkit-box-sizing:content-box;box-sizing:content-box;display:block;margin:0;border:0;padding:0",t.style.marginRight=t.style.width="0",s.style.width="1px",Ne.appendChild(r),e=!parseFloat(S.getComputedStyle(t).marginRight),Ne.removeChild(r),s.removeChild(t),e}}))}();var De=/^(none|table(?!-c[ea]).+)/,$e={position:"absolute",visibility:"hidden",display:"block"},Oe={letterSpacing:"0",fontWeight:"400"},Me=["Webkit","O","Moz","ms"],je=C.createElement("div").style;function He(e){if(e in je)return e;for(var t=e[0].toUpperCase()+e.slice(1),n=Me.length;n--;)if((e=Me[n]+t)in je)return e}function Fe(e,t,n){var i=z.exec(t);return i?Math.max(0,i[2]-(n||0))+(i[3]||"px"):t}function qe(e,t,n,i,o){for(var r=n===(i?"border":"content")?4:"width"===t?1:0,s=0;r<4;r+=2)"margin"===n&&(s+=T.css(e,n+U[r],!0,o)),i?("content"===n&&(s-=T.css(e,"padding"+U[r],!0,o)),"margin"!==n&&(s-=T.css(e,"border"+U[r]+"Width",!0,o))):(s+=T.css(e,"padding"+U[r],!0,o),"padding"!==n&&(s+=T.css(e,"border"+U[r]+"Width",!0,o)));return s}function Ie(e,t,n){var i=!0,o="width"===t?e.offsetWidth:e.offsetHeight,r=Ae(e),s="border-box"===T.css(e,"boxSizing",!1,r);if(o<=0||null==o){if(((o=Le(e,t,r))<0||null==o)&&(o=e.style[t]),Ee.test(o))return o;i=s&&(g.boxSizingReliable()||o===e.style[t]),o=parseFloat(o)||0}return o+qe(e,t,n||(s?"border":"content"),i,r)+"px"}function Re(e,t){for(var n,i,o,r=[],s=0,a=e.length;s<a;s++)(i=e[s]).style&&(r[s]=H.get(i,"olddisplay"),n=i.style.display,t?(r[s]||"none"!==n||(i.style.display=""),""===i.style.display&&W(i)&&(r[s]=H.access(i,"olddisplay",Ce(i.nodeName)))):(o=W(i),"none"===n&&o||H.set(i,"olddisplay",o?n:T.css(i,"display"))));for(s=0;s<a;s++)(i=e[s]).style&&(t&&"none"!==i.style.display&&""!==i.style.display||(i.style.display=t?r[s]||"":"none"));return e}function Be(e,t,n,i,o){return new Be.prototype.init(e,t,n,i,o)}T.extend({cssHooks:{opacity:{get:function(e,t){if(t){var n=Le(e,"opacity");return""===n?"1":n}}}},cssNumber:{animationIterationCount:!0,columnCount:!0,fillOpacity:!0,flexGrow:!0,flexShrink:!0,fontWeight:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,widows:!0,zIndex:!0,zoom:!0},cssProps:{float:"cssFloat"},style:function(e,t,n,i){if(e&&3!==e.nodeType&&8!==e.nodeType&&e.style){var o,r,s,a=T.camelCase(t),l=e.style;if(t=T.cssProps[a]||(T.cssProps[a]=He(a)||a),s=T.cssHooks[t]||T.cssHooks[a],void 0===n)return s&&"get"in s&&void 0!==(o=s.get(e,!1,i))?o:l[t];"string"===(r=typeof n)&&(o=z.exec(n))&&o[1]&&(n=V(e,t,o),r="number"),null!=n&&n==n&&("number"===r&&(n+=o&&o[3]||(T.cssNumber[a]?"":"px")),g.clearCloneStyle||""!==n||0!==t.indexOf("background")||(l[t]="inherit"),s&&"set"in s&&void 0===(n=s.set(e,n,i))||(l[t]=n))}},css:function(e,t,n,i){var o,r,s,a=T.camelCase(t);return t=T.cssProps[a]||(T.cssProps[a]=He(a)||a),(s=T.cssHooks[t]||T.cssHooks[a])&&"get"in s&&(o=s.get(e,!0,n)),void 0===o&&(o=Le(e,t,i)),"normal"===o&&t in Oe&&(o=Oe[t]),""===n||n?(r=parseFloat(o),!0===n||isFinite(r)?r||0:o):o}}),T.each(["height","width"],function(e,s){T.cssHooks[s]={get:function(e,t,n){if(t)return De.test(T.css(e,"display"))&&0===e.offsetWidth?Pe(e,$e,function(){return Ie(e,s,n)}):Ie(e,s,n)},set:function(e,t,n){var i,o=n&&Ae(e),r=n&&qe(e,s,n,"border-box"===T.css(e,"boxSizing",!1,o),o);return r&&(i=z.exec(t))&&"px"!==(i[3]||"px")&&(e.style[s]=t,t=T.css(e,s)),Fe(0,t,r)}}}),T.cssHooks.marginLeft=_e(g.reliableMarginLeft,function(e,t){if(t)return(parseFloat(Le(e,"marginLeft"))||e.getBoundingClientRect().left-Pe(e,{marginLeft:0},function(){return e.getBoundingClientRect().left}))+"px"}),T.cssHooks.marginRight=_e(g.reliableMarginRight,function(e,t){if(t)return Pe(e,{display:"inline-block"},Le,[e,"marginRight"])}),T.each({margin:"",padding:"",border:"Width"},function(o,r){T.cssHooks[o+r]={expand:function(e){for(var t=0,n={},i="string"==typeof e?e.split(" "):[e];t<4;t++)n[o+U[t]+r]=i[t]||i[t-2]||i[0];return n}},Te.test(o)||(T.cssHooks[o+r].set=Fe)}),T.fn.extend({css:function(e,t){return O(this,function(e,t,n){var i,o,r={},s=0;if(T.isArray(t)){for(i=Ae(e),o=t.length;s<o;s++)r[t[s]]=T.css(e,t[s],!1,i);return r}return void 0!==n?T.style(e,t,n):T.css(e,t)},e,t,1<arguments.length)},show:function(){return Re(this,!0)},hide:function(){return Re(this)},toggle:function(e){return"boolean"==typeof e?e?this.show():this.hide():this.each(function(){W(this)?T(this).show():T(this).hide()})}}),((T.Tween=Be).prototype={constructor:Be,init:function(e,t,n,i,o,r){this.elem=e,this.prop=n,this.easing=o||T.easing._default,this.options=t,this.start=this.now=this.cur(),this.end=i,this.unit=r||(T.cssNumber[n]?"":"px")},cur:function(){var e=Be.propHooks[this.prop];return e&&e.get?e.get(this):Be.propHooks._default.get(this)},run:function(e){var t,n=Be.propHooks[this.prop];return this.options.duration?this.pos=t=T.easing[this.easing](e,this.options.duration*e,0,1,this.options.duration):this.pos=t=e,this.now=(this.end-this.start)*t+this.start,this.options.step&&this.options.step.call(this.elem,this.now,this),n&&n.set?n.set(this):Be.propHooks._default.set(this),this}}).init.prototype=Be.prototype,(Be.propHooks={_default:{get:function(e){var t;return 1!==e.elem.nodeType||null!=e.elem[e.prop]&&null==e.elem.style[e.prop]?e.elem[e.prop]:(t=T.css(e.elem,e.prop,""))&&"auto"!==t?t:0},set:function(e){T.fx.step[e.prop]?T.fx.step[e.prop](e):1!==e.elem.nodeType||null==e.elem.style[T.cssProps[e.prop]]&&!T.cssHooks[e.prop]?e.elem[e.prop]=e.now:T.style(e.elem,e.prop,e.now+e.unit)}}}).scrollTop=Be.propHooks.scrollLeft={set:function(e){e.elem.nodeType&&e.elem.parentNode&&(e.elem[e.prop]=e.now)}},T.easing={linear:function(e){return e},swing:function(e){return.5-Math.cos(e*Math.PI)/2},_default:"swing"},T.fx=Be.prototype.init,T.fx.step={};var ze,Ue,We,Ve,Ge,Xe=/^(?:toggle|show|hide)$/,Ke=/queueHooks$/;function Ye(){return S.setTimeout(function(){ze=void 0}),ze=T.now()}function Qe(e,t){var n,i=0,o={height:e};for(t=t?1:0;i<4;i+=2-t)o["margin"+(n=U[i])]=o["padding"+n]=e;return t&&(o.opacity=o.width=e),o}function Je(e,t,n){for(var i,o=(Ze.tweeners[t]||[]).concat(Ze.tweeners["*"]),r=0,s=o.length;r<s;r++)if(i=o[r].call(n,t,e))return i}function Ze(r,e,t){var n,s,i=0,o=Ze.prefilters.length,a=T.Deferred().always(function(){delete l.elem}),l=function(){if(s)return!1;for(var e=ze||Ye(),t=Math.max(0,c.startTime+c.duration-e),n=1-(t/c.duration||0),i=0,o=c.tweens.length;i<o;i++)c.tweens[i].run(n);return a.notifyWith(r,[c,n,t]),n<1&&o?t:(a.resolveWith(r,[c]),!1)},c=a.promise({elem:r,props:T.extend({},e),opts:T.extend(!0,{specialEasing:{},easing:T.easing._default},t),originalProperties:e,originalOptions:t,startTime:ze||Ye(),duration:t.duration,tweens:[],createTween:function(e,t){var n=T.Tween(r,c.opts,e,t,c.opts.specialEasing[e]||c.opts.easing);return c.tweens.push(n),n},stop:function(e){var t=0,n=e?c.tweens.length:0;if(s)return this;for(s=!0;t<n;t++)c.tweens[t].run(1);return e?(a.notifyWith(r,[c,1,0]),a.resolveWith(r,[c,e])):a.rejectWith(r,[c,e]),this}}),u=c.props;for(!function(e,t){var n,i,o,r,s;for(n in e)if(o=t[i=T.camelCase(n)],r=e[n],T.isArray(r)&&(o=r[1],r=e[n]=r[0]),n!==i&&(e[i]=r,delete e[n]),(s=T.cssHooks[i])&&"expand"in s)for(n in r=s.expand(r),delete e[i],r)n in e||(e[n]=r[n],t[n]=o);else t[i]=o}(u,c.opts.specialEasing);i<o;i++)if(n=Ze.prefilters[i].call(c,r,u,c.opts))return T.isFunction(n.stop)&&(T._queueHooks(c.elem,c.opts.queue).stop=T.proxy(n.stop,n)),n;return T.map(u,Je,c),T.isFunction(c.opts.start)&&c.opts.start.call(r,c),T.fx.timer(T.extend(l,{elem:r,anim:c,queue:c.opts.queue})),c.progress(c.opts.progress).done(c.opts.done,c.opts.complete).fail(c.opts.fail).always(c.opts.always)}T.Animation=T.extend(Ze,{tweeners:{"*":[function(e,t){var n=this.createTween(e,t);return V(n.elem,e,z.exec(t),n),n}]},tweener:function(e,t){for(var n,i=0,o=(e=T.isFunction(e)?(t=e,["*"]):e.match(D)).length;i<o;i++)n=e[i],Ze.tweeners[n]=Ze.tweeners[n]||[],Ze.tweeners[n].unshift(t)},prefilters:[function(t,e,n){var i,o,r,s,a,l,c,u=this,d={},p=t.style,f=t.nodeType&&W(t),h=H.get(t,"fxshow");for(i in n.queue||(null==(a=T._queueHooks(t,"fx")).unqueued&&(a.unqueued=0,l=a.empty.fire,a.empty.fire=function(){a.unqueued||l()}),a.unqueued++,u.always(function(){u.always(function(){a.unqueued--,T.queue(t,"fx").length||a.empty.fire()})})),1===t.nodeType&&("height"in e||"width"in e)&&(n.overflow=[p.overflow,p.overflowX,p.overflowY],"inline"===("none"===(c=T.css(t,"display"))?H.get(t,"olddisplay")||Ce(t.nodeName):c)&&"none"===T.css(t,"float")&&(p.display="inline-block")),n.overflow&&(p.overflow="hidden",u.always(function(){p.overflow=n.overflow[0],p.overflowX=n.overflow[1],p.overflowY=n.overflow[2]})),e)if(o=e[i],Xe.exec(o)){if(delete e[i],r=r||"toggle"===o,o===(f?"hide":"show")){if("show"!==o||!h||void 0===h[i])continue;f=!0}d[i]=h&&h[i]||T.style(t,i)}else c=void 0;if(T.isEmptyObject(d))"inline"===("none"===c?Ce(t.nodeName):c)&&(p.display=c);else for(i in h?"hidden"in h&&(f=h.hidden):h=H.access(t,"fxshow",{}),r&&(h.hidden=!f),f?T(t).show():u.done(function(){T(t).hide()}),u.done(function(){var e;for(e in H.remove(t,"fxshow"),d)T.style(t,e,d[e])}),d)s=Je(f?h[i]:0,i,u),i in h||(h[i]=s.start,f&&(s.end=s.start,s.start="width"===i||"height"===i?1:0))}],prefilter:function(e,t){t?Ze.prefilters.unshift(e):Ze.prefilters.push(e)}}),T.speed=function(e,t,n){var i=e&&"object"==typeof e?T.extend({},e):{complete:n||!n&&t||T.isFunction(e)&&e,duration:e,easing:n&&t||t&&!T.isFunction(t)&&t};return i.duration=T.fx.off?0:"number"==typeof i.duration?i.duration:i.duration in T.fx.speeds?T.fx.speeds[i.duration]:T.fx.speeds._default,null!=i.queue&&!0!==i.queue||(i.queue="fx"),i.old=i.complete,i.complete=function(){T.isFunction(i.old)&&i.old.call(this),i.queue&&T.dequeue(this,i.queue)},i},T.fn.extend({fadeTo:function(e,t,n,i){return this.filter(W).css("opacity",0).show().end().animate({opacity:t},e,n,i)},animate:function(t,e,n,i){var o=T.isEmptyObject(t),r=T.speed(e,n,i),s=function(){var e=Ze(this,T.extend({},t),r);(o||H.get(this,"finish"))&&e.stop(!0)};return s.finish=s,o||!1===r.queue?this.each(s):this.queue(r.queue,s)},stop:function(o,e,r){var s=function(e){var t=e.stop;delete e.stop,t(r)};return"string"!=typeof o&&(r=e,e=o,o=void 0),e&&!1!==o&&this.queue(o||"fx",[]),this.each(function(){var e=!0,t=null!=o&&o+"queueHooks",n=T.timers,i=H.get(this);if(t)i[t]&&i[t].stop&&s(i[t]);else for(t in i)i[t]&&i[t].stop&&Ke.test(t)&&s(i[t]);for(t=n.length;t--;)n[t].elem!==this||null!=o&&n[t].queue!==o||(n[t].anim.stop(r),e=!1,n.splice(t,1));!e&&r||T.dequeue(this,o)})},finish:function(s){return!1!==s&&(s=s||"fx"),this.each(function(){var e,t=H.get(this),n=t[s+"queue"],i=t[s+"queueHooks"],o=T.timers,r=n?n.length:0;for(t.finish=!0,T.queue(this,s,[]),i&&i.stop&&i.stop.call(this,!0),e=o.length;e--;)o[e].elem===this&&o[e].queue===s&&(o[e].anim.stop(!0),o.splice(e,1));for(e=0;e<r;e++)n[e]&&n[e].finish&&n[e].finish.call(this);delete t.finish})}}),T.each(["toggle","show","hide"],function(e,i){var o=T.fn[i];T.fn[i]=function(e,t,n){return null==e||"boolean"==typeof e?o.apply(this,arguments):this.animate(Qe(i,!0),e,t,n)}}),T.each({slideDown:Qe("show"),slideUp:Qe("hide"),slideToggle:Qe("toggle"),fadeIn:{opacity:"show"},fadeOut:{opacity:"hide"},fadeToggle:{opacity:"toggle"}},function(e,i){T.fn[e]=function(e,t,n){return this.animate(i,e,t,n)}}),T.timers=[],T.fx.tick=function(){var e,t=0,n=T.timers;for(ze=T.now();t<n.length;t++)(e=n[t])()||n[t]!==e||n.splice(t--,1);n.length||T.fx.stop(),ze=void 0},T.fx.timer=function(e){T.timers.push(e),e()?T.fx.start():T.timers.pop()},T.fx.interval=13,T.fx.start=function(){Ue||(Ue=S.setInterval(T.fx.tick,T.fx.interval))},T.fx.stop=function(){S.clearInterval(Ue),Ue=null},T.fx.speeds={slow:600,fast:200,_default:400},T.fn.delay=function(i,e){return i=T.fx&&T.fx.speeds[i]||i,e=e||"fx",this.queue(e,function(e,t){var n=S.setTimeout(e,i);t.stop=function(){S.clearTimeout(n)}})},We=C.createElement("input"),Ve=C.createElement("select"),Ge=Ve.appendChild(C.createElement("option")),We.type="checkbox",g.checkOn=""!==We.value,g.optSelected=Ge.selected,Ve.disabled=!0,g.optDisabled=!Ge.disabled,(We=C.createElement("input")).value="t",We.type="radio",g.radioValue="t"===We.value;var et,tt=T.expr.attrHandle;T.fn.extend({attr:function(e,t){return O(this,T.attr,e,t,1<arguments.length)},removeAttr:function(e){return this.each(function(){T.removeAttr(this,e)})}}),T.extend({attr:function(e,t,n){var i,o,r=e.nodeType;if(3!==r&&8!==r&&2!==r)return void 0===e.getAttribute?T.prop(e,t,n):(1===r&&T.isXMLDoc(e)||(t=t.toLowerCase(),o=T.attrHooks[t]||(T.expr.match.bool.test(t)?et:void 0)),void 0!==n?null===n?void T.removeAttr(e,t):o&&"set"in o&&void 0!==(i=o.set(e,n,t))?i:(e.setAttribute(t,n+""),n):o&&"get"in o&&null!==(i=o.get(e,t))?i:null==(i=T.find.attr(e,t))?void 0:i)},attrHooks:{type:{set:function(e,t){if(!g.radioValue&&"radio"===t&&T.nodeName(e,"input")){var n=e.value;return e.setAttribute("type",t),n&&(e.value=n),t}}}},removeAttr:function(e,t){var n,i,o=0,r=t&&t.match(D);if(r&&1===e.nodeType)for(;n=r[o++];)i=T.propFix[n]||n,T.expr.match.bool.test(n)&&(e[i]=!1),e.removeAttribute(n)}}),et={set:function(e,t,n){return!1===t?T.removeAttr(e,n):e.setAttribute(n,n),n}},T.each(T.expr.match.bool.source.match(/\w+/g),function(e,t){var r=tt[t]||T.find.attr;tt[t]=function(e,t,n){var i,o;return n||(o=tt[t],tt[t]=i,i=null!=r(e,t,n)?t.toLowerCase():null,tt[t]=o),i}});var nt=/^(?:input|select|textarea|button)$/i,it=/^(?:a|area)$/i;T.fn.extend({prop:function(e,t){return O(this,T.prop,e,t,1<arguments.length)},removeProp:function(e){return this.each(function(){delete this[T.propFix[e]||e]})}}),T.extend({prop:function(e,t,n){var i,o,r=e.nodeType;if(3!==r&&8!==r&&2!==r)return 1===r&&T.isXMLDoc(e)||(t=T.propFix[t]||t,o=T.propHooks[t]),void 0!==n?o&&"set"in o&&void 0!==(i=o.set(e,n,t))?i:e[t]=n:o&&"get"in o&&null!==(i=o.get(e,t))?i:e[t]},propHooks:{tabIndex:{get:function(e){var t=T.find.attr(e,"tabindex");return t?parseInt(t,10):nt.test(e.nodeName)||it.test(e.nodeName)&&e.href?0:-1}}},propFix:{for:"htmlFor",class:"className"}}),g.optSelected||(T.propHooks.selected={get:function(e){var t=e.parentNode;return t&&t.parentNode&&t.parentNode.selectedIndex,null},set:function(e){var t=e.parentNode;t&&(t.selectedIndex,t.parentNode&&t.parentNode.selectedIndex)}}),T.each(["tabIndex","readOnly","maxLength","cellSpacing","cellPadding","rowSpan","colSpan","useMap","frameBorder","contentEditable"],function(){T.propFix[this.toLowerCase()]=this});var ot=/[\t\r\n\f]/g;function rt(e){return e.getAttribute&&e.getAttribute("class")||""}T.fn.extend({addClass:function(t){var e,n,i,o,r,s,a,l=0;if(T.isFunction(t))return this.each(function(e){T(this).addClass(t.call(this,e,rt(this)))});if("string"==typeof t&&t)for(e=t.match(D)||[];n=this[l++];)if(o=rt(n),i=1===n.nodeType&&(" "+o+" ").replace(ot," ")){for(s=0;r=e[s++];)i.indexOf(" "+r+" ")<0&&(i+=r+" ");o!==(a=T.trim(i))&&n.setAttribute("class",a)}return this},removeClass:function(t){var e,n,i,o,r,s,a,l=0;if(T.isFunction(t))return this.each(function(e){T(this).removeClass(t.call(this,e,rt(this)))});if(!arguments.length)return this.attr("class","");if("string"==typeof t&&t)for(e=t.match(D)||[];n=this[l++];)if(o=rt(n),i=1===n.nodeType&&(" "+o+" ").replace(ot," ")){for(s=0;r=e[s++];)for(;-1<i.indexOf(" "+r+" ");)i=i.replace(" "+r+" "," ");o!==(a=T.trim(i))&&n.setAttribute("class",a)}return this},toggleClass:function(o,t){var r=typeof o;return"boolean"==typeof t&&"string"===r?t?this.addClass(o):this.removeClass(o):T.isFunction(o)?this.each(function(e){T(this).toggleClass(o.call(this,e,rt(this),t),t)}):this.each(function(){var e,t,n,i;if("string"===r)for(t=0,n=T(this),i=o.match(D)||[];e=i[t++];)n.hasClass(e)?n.removeClass(e):n.addClass(e);else void 0!==o&&"boolean"!==r||((e=rt(this))&&H.set(this,"__className__",e),this.setAttribute&&this.setAttribute("class",e||!1===o?"":H.get(this,"__className__")||""))})},hasClass:function(e){var t,n,i=0;for(t=" "+e+" ";n=this[i++];)if(1===n.nodeType&&-1<(" "+rt(n)+" ").replace(ot," ").indexOf(t))return!0;return!1}});var st=/\r/g,at=/[\x20\t\r\n\f]+/g;T.fn.extend({val:function(n){var i,e,o,t=this[0];return arguments.length?(o=T.isFunction(n),this.each(function(e){var t;1===this.nodeType&&(null==(t=o?n.call(this,e,T(this).val()):n)?t="":"number"==typeof t?t+="":T.isArray(t)&&(t=T.map(t,function(e){return null==e?"":e+""})),(i=T.valHooks[this.type]||T.valHooks[this.nodeName.toLowerCase()])&&"set"in i&&void 0!==i.set(this,t,"value")||(this.value=t))})):t?(i=T.valHooks[t.type]||T.valHooks[t.nodeName.toLowerCase()])&&"get"in i&&void 0!==(e=i.get(t,"value"))?e:"string"==typeof(e=t.value)?e.replace(st,""):null==e?"":e:void 0}}),T.extend({valHooks:{option:{get:function(e){var t=T.find.attr(e,"value");return null!=t?t:T.trim(T.text(e)).replace(at," ")}},select:{get:function(e){for(var t,n,i=e.options,o=e.selectedIndex,r="select-one"===e.type||o<0,s=r?null:[],a=r?o+1:i.length,l=o<0?a:r?o:0;l<a;l++)if(((n=i[l]).selected||l===o)&&(g.optDisabled?!n.disabled:null===n.getAttribute("disabled"))&&(!n.parentNode.disabled||!T.nodeName(n.parentNode,"optgroup"))){if(t=T(n).val(),r)return t;s.push(t)}return s},set:function(e,t){for(var n,i,o=e.options,r=T.makeArray(t),s=o.length;s--;)((i=o[s]).selected=-1<T.inArray(T.valHooks.option.get(i),r))&&(n=!0);return n||(e.selectedIndex=-1),r}}}}),T.each(["radio","checkbox"],function(){T.valHooks[this]={set:function(e,t){if(T.isArray(t))return e.checked=-1<T.inArray(T(e).val(),t)}},g.checkOn||(T.valHooks[this].get=function(e){return null===e.getAttribute("value")?"on":e.value})});var lt=/^(?:focusinfocus|focusoutblur)$/;T.extend(T.event,{trigger:function(e,t,n,i){var o,r,s,a,l,c,u,d=[n||C],p=h.call(e,"type")?e.type:e,f=h.call(e,"namespace")?e.namespace.split("."):[];if(r=s=n=n||C,3!==n.nodeType&&8!==n.nodeType&&!lt.test(p+T.event.triggered)&&(-1<p.indexOf(".")&&(p=(f=p.split(".")).shift(),f.sort()),l=p.indexOf(":")<0&&"on"+p,(e=e[T.expando]?e:new T.Event(p,"object"==typeof e&&e)).isTrigger=i?2:3,e.namespace=f.join("."),e.rnamespace=e.namespace?new RegExp("(^|\\.)"+f.join("\\.(?:.*\\.|)")+"(\\.|$)"):null,e.result=void 0,e.target||(e.target=n),t=null==t?[e]:T.makeArray(t,[e]),u=T.event.special[p]||{},i||!u.trigger||!1!==u.trigger.apply(n,t))){if(!i&&!u.noBubble&&!T.isWindow(n)){for(a=u.delegateType||p,lt.test(a+p)||(r=r.parentNode);r;r=r.parentNode)d.push(r),s=r;s===(n.ownerDocument||C)&&d.push(s.defaultView||s.parentWindow||S)}for(o=0;(r=d[o++])&&!e.isPropagationStopped();)e.type=1<o?a:u.bindType||p,(c=(H.get(r,"events")||{})[e.type]&&H.get(r,"handle"))&&c.apply(r,t),(c=l&&r[l])&&c.apply&&M(r)&&(e.result=c.apply(r,t),!1===e.result&&e.preventDefault());return e.type=p,i||e.isDefaultPrevented()||u._default&&!1!==u._default.apply(d.pop(),t)||!M(n)||l&&T.isFunction(n[p])&&!T.isWindow(n)&&((s=n[l])&&(n[l]=null),n[T.event.triggered=p](),T.event.triggered=void 0,s&&(n[l]=s)),e.result}},simulate:function(e,t,n){var i=T.extend(new T.Event,n,{type:e,isSimulated:!0});T.event.trigger(i,null,t)}}),T.fn.extend({trigger:function(e,t){return this.each(function(){T.event.trigger(e,t,this)})},triggerHandler:function(e,t){var n=this[0];if(n)return T.event.trigger(e,t,n,!0)}}),T.each("blur focus focusin focusout load resize scroll unload click dblclick mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave change select submit keydown keypress keyup error contextmenu".split(" "),function(e,n){T.fn[n]=function(e,t){return 0<arguments.length?this.on(n,null,e,t):this.trigger(n)}}),T.fn.extend({hover:function(e,t){return this.mouseenter(e).mouseleave(t||e)}}),g.focusin="onfocusin"in S,g.focusin||T.each({focus:"focusin",blur:"focusout"},function(n,i){var o=function(e){T.event.simulate(i,e.target,T.event.fix(e))};T.event.special[i]={setup:function(){var e=this.ownerDocument||this,t=H.access(e,i);t||e.addEventListener(n,o,!0),H.access(e,i,(t||0)+1)},teardown:function(){var e=this.ownerDocument||this,t=H.access(e,i)-1;t?H.access(e,i,t):(e.removeEventListener(n,o,!0),H.remove(e,i))}}});var ct=S.location,ut=T.now(),dt=/\?/;T.parseJSON=function(e){return JSON.parse(e+"")},T.parseXML=function(e){var t;if(!e||"string"!=typeof e)return null;try{t=(new S.DOMParser).parseFromString(e,"text/xml")}catch(e){t=void 0}return t&&!t.getElementsByTagName("parsererror").length||T.error("Invalid XML: "+e),t};var pt=/#.*$/,ft=/([?&])_=[^&]*/,ht=/^(.*?):[ \t]*([^\r\n]*)$/gm,mt=/^(?:GET|HEAD)$/,gt=/^\/\//,vt={},yt={},kt="*/".concat("*"),bt=C.createElement("a");function xt(r){return function(e,t){"string"!=typeof e&&(t=e,e="*");var n,i=0,o=e.toLowerCase().match(D)||[];if(T.isFunction(t))for(;n=o[i++];)"+"===n[0]?(n=n.slice(1)||"*",(r[n]=r[n]||[]).unshift(t)):(r[n]=r[n]||[]).push(t)}}function wt(t,o,r,s){var a={},l=t===yt;function c(e){var i;return a[e]=!0,T.each(t[e]||[],function(e,t){var n=t(o,r,s);return"string"!=typeof n||l||a[n]?l?!(i=n):void 0:(o.dataTypes.unshift(n),c(n),!1)}),i}return c(o.dataTypes[0])||!a["*"]&&c("*")}function St(e,t){var n,i,o=T.ajaxSettings.flatOptions||{};for(n in t)void 0!==t[n]&&((o[n]?e:i||(i={}))[n]=t[n]);return i&&T.extend(!0,e,i),e}bt.href=ct.href,T.extend({active:0,lastModified:{},etag:{},ajaxSettings:{url:ct.href,type:"GET",isLocal:/^(?:about|app|app-storage|.+-extension|file|res|widget):$/.test(ct.protocol),global:!0,processData:!0,async:!0,contentType:"application/x-www-form-urlencoded; charset=UTF-8",accepts:{"*":kt,text:"text/plain",html:"text/html",xml:"application/xml, text/xml",json:"application/json, text/javascript"},contents:{xml:/\bxml\b/,html:/\bhtml/,json:/\bjson\b/},responseFields:{xml:"responseXML",text:"responseText",json:"responseJSON"},converters:{"* text":String,"text html":!0,"text json":T.parseJSON,"text xml":T.parseXML},flatOptions:{url:!0,context:!0}},ajaxSetup:function(e,t){return t?St(St(e,T.ajaxSettings),t):St(T.ajaxSettings,e)},ajaxPrefilter:xt(vt),ajaxTransport:xt(yt),ajax:function(e,t){"object"==typeof e&&(t=e,e=void 0),t=t||{};var u,d,p,n,f,i,h,o,m=T.ajaxSetup({},t),g=m.context||m,v=m.context&&(g.nodeType||g.jquery)?T(g):T.event,y=T.Deferred(),k=T.Callbacks("once memory"),b=m.statusCode||{},r={},s={},x=0,a="canceled",w={readyState:0,getResponseHeader:function(e){var t;if(2===x){if(!n)for(n={};t=ht.exec(p);)n[t[1].toLowerCase()]=t[2];t=n[e.toLowerCase()]}return null==t?null:t},getAllResponseHeaders:function(){return 2===x?p:null},setRequestHeader:function(e,t){var n=e.toLowerCase();return x||(e=s[n]=s[n]||e,r[e]=t),this},overrideMimeType:function(e){return x||(m.mimeType=e),this},statusCode:function(e){var t;if(e)if(x<2)for(t in e)b[t]=[b[t],e[t]];else w.always(e[w.status]);return this},abort:function(e){var t=e||a;return u&&u.abort(t),l(0,t),this}};if(y.promise(w).complete=k.add,w.success=w.done,w.error=w.fail,m.url=((e||m.url||ct.href)+"").replace(pt,"").replace(gt,ct.protocol+"//"),m.type=t.method||t.type||m.method||m.type,m.dataTypes=T.trim(m.dataType||"*").toLowerCase().match(D)||[""],null==m.crossDomain){i=C.createElement("a");try{i.href=m.url,i.href=i.href,m.crossDomain=bt.protocol+"//"+bt.host!=i.protocol+"//"+i.host}catch(e){m.crossDomain=!0}}if(m.data&&m.processData&&"string"!=typeof m.data&&(m.data=T.param(m.data,m.traditional)),wt(vt,m,t,w),2===x)return w;for(o in(h=T.event&&m.global)&&0==T.active++&&T.event.trigger("ajaxStart"),m.type=m.type.toUpperCase(),m.hasContent=!mt.test(m.type),d=m.url,m.hasContent||(m.data&&(d=m.url+=(dt.test(d)?"&":"?")+m.data,delete m.data),!1===m.cache&&(m.url=ft.test(d)?d.replace(ft,"$1_="+ut++):d+(dt.test(d)?"&":"?")+"_="+ut++)),m.ifModified&&(T.lastModified[d]&&w.setRequestHeader("If-Modified-Since",T.lastModified[d]),T.etag[d]&&w.setRequestHeader("If-None-Match",T.etag[d])),(m.data&&m.hasContent&&!1!==m.contentType||t.contentType)&&w.setRequestHeader("Content-Type",m.contentType),w.setRequestHeader("Accept",m.dataTypes[0]&&m.accepts[m.dataTypes[0]]?m.accepts[m.dataTypes[0]]+("*"!==m.dataTypes[0]?", "+kt+"; q=0.01":""):m.accepts["*"]),m.headers)w.setRequestHeader(o,m.headers[o]);if(m.beforeSend&&(!1===m.beforeSend.call(g,w,m)||2===x))return w.abort();for(o in a="abort",{success:1,error:1,complete:1})w[o](m[o]);if(u=wt(yt,m,t,w)){if(w.readyState=1,h&&v.trigger("ajaxSend",[w,m]),2===x)return w;m.async&&0<m.timeout&&(f=S.setTimeout(function(){w.abort("timeout")},m.timeout));try{x=1,u.send(r,l)}catch(e){if(!(x<2))throw e;l(-1,e)}}else l(-1,"No Transport");function l(e,t,n,i){var o,r,s,a,l,c=t;2!==x&&(x=2,f&&S.clearTimeout(f),u=void 0,p=i||"",w.readyState=0<e?4:0,o=200<=e&&e<300||304===e,n&&(a=function(e,t,n){for(var i,o,r,s,a=e.contents,l=e.dataTypes;"*"===l[0];)l.shift(),void 0===i&&(i=e.mimeType||t.getResponseHeader("Content-Type"));if(i)for(o in a)if(a[o]&&a[o].test(i)){l.unshift(o);break}if(l[0]in n)r=l[0];else{for(o in n){if(!l[0]||e.converters[o+" "+l[0]]){r=o;break}s||(s=o)}r=r||s}if(r)return r!==l[0]&&l.unshift(r),n[r]}(m,w,n)),a=function(e,t,n,i){var o,r,s,a,l,c={},u=e.dataTypes.slice();if(u[1])for(s in e.converters)c[s.toLowerCase()]=e.converters[s];for(r=u.shift();r;)if(e.responseFields[r]&&(n[e.responseFields[r]]=t),!l&&i&&e.dataFilter&&(t=e.dataFilter(t,e.dataType)),l=r,r=u.shift())if("*"===r)r=l;else if("*"!==l&&l!==r){if(!(s=c[l+" "+r]||c["* "+r]))for(o in c)if((a=o.split(" "))[1]===r&&(s=c[l+" "+a[0]]||c["* "+a[0]])){!0===s?s=c[o]:!0!==c[o]&&(r=a[0],u.unshift(a[1]));break}if(!0!==s)if(s&&e.throws)t=s(t);else try{t=s(t)}catch(e){return{state:"parsererror",error:s?e:"No conversion from "+l+" to "+r}}}return{state:"success",data:t}}(m,a,w,o),o?(m.ifModified&&((l=w.getResponseHeader("Last-Modified"))&&(T.lastModified[d]=l),(l=w.getResponseHeader("etag"))&&(T.etag[d]=l)),204===e||"HEAD"===m.type?c="nocontent":304===e?c="notmodified":(c=a.state,r=a.data,o=!(s=a.error))):(s=c,!e&&c||(c="error",e<0&&(e=0))),w.status=e,w.statusText=(t||c)+"",o?y.resolveWith(g,[r,c,w]):y.rejectWith(g,[w,c,s]),w.statusCode(b),b=void 0,h&&v.trigger(o?"ajaxSuccess":"ajaxError",[w,m,o?r:s]),k.fireWith(g,[w,c]),h&&(v.trigger("ajaxComplete",[w,m]),--T.active||T.event.trigger("ajaxStop")))}return w},getJSON:function(e,t,n){return T.get(e,t,n,"json")},getScript:function(e,t){return T.get(e,void 0,t,"script")}}),T.each(["get","post"],function(e,o){T[o]=function(e,t,n,i){return T.isFunction(t)&&(i=i||n,n=t,t=void 0),T.ajax(T.extend({url:e,type:o,dataType:i,data:t,success:n},T.isPlainObject(e)&&e))}}),T._evalUrl=function(e){return T.ajax({url:e,type:"GET",dataType:"script",async:!1,global:!1,throws:!0})},T.fn.extend({wrapAll:function(t){var e;return T.isFunction(t)?this.each(function(e){T(this).wrapAll(t.call(this,e))}):(this[0]&&(e=T(t,this[0].ownerDocument).eq(0).clone(!0),this[0].parentNode&&e.insertBefore(this[0]),e.map(function(){for(var e=this;e.firstElementChild;)e=e.firstElementChild;return e}).append(this)),this)},wrapInner:function(n){return T.isFunction(n)?this.each(function(e){T(this).wrapInner(n.call(this,e))}):this.each(function(){var e=T(this),t=e.contents();t.length?t.wrapAll(n):e.append(n)})},wrap:function(t){var n=T.isFunction(t);return this.each(function(e){T(this).wrapAll(n?t.call(this,e):t)})},unwrap:function(){return this.parent().each(function(){T.nodeName(this,"body")||T(this).replaceWith(this.childNodes)}).end()}}),T.expr.filters.hidden=function(e){return!T.expr.filters.visible(e)},T.expr.filters.visible=function(e){return 0<e.offsetWidth||0<e.offsetHeight||0<e.getClientRects().length};var Ct=/%20/g,Tt=/\[\]$/,Et=/\r?\n/g,At=/^(?:submit|button|image|reset|file)$/i,Pt=/^(?:input|select|textarea|keygen)/i;function Nt(n,e,i,o){var t;if(T.isArray(e))T.each(e,function(e,t){i||Tt.test(n)?o(n,t):Nt(n+"["+("object"==typeof t&&null!=t?e:"")+"]",t,i,o)});else if(i||"object"!==T.type(e))o(n,e);else for(t in e)Nt(n+"["+t+"]",e[t],i,o)}T.param=function(e,t){var n,i=[],o=function(e,t){t=T.isFunction(t)?t():null==t?"":t,i[i.length]=encodeURIComponent(e)+"="+encodeURIComponent(t)};if(void 0===t&&(t=T.ajaxSettings&&T.ajaxSettings.traditional),T.isArray(e)||e.jquery&&!T.isPlainObject(e))T.each(e,function(){o(this.name,this.value)});else for(n in e)Nt(n,e[n],t,o);return i.join("&").replace(Ct,"+")},T.fn.extend({serialize:function(){return T.param(this.serializeArray())},serializeArray:function(){return this.map(function(){var e=T.prop(this,"elements");return e?T.makeArray(e):this}).filter(function(){var e=this.type;return this.name&&!T(this).is(":disabled")&&Pt.test(this.nodeName)&&!At.test(e)&&(this.checked||!G.test(e))}).map(function(e,t){var n=T(this).val();return null==n?null:T.isArray(n)?T.map(n,function(e){return{name:t.name,value:e.replace(Et,"\r\n")}}):{name:t.name,value:n.replace(Et,"\r\n")}}).get()}}),T.ajaxSettings.xhr=function(){try{return new S.XMLHttpRequest}catch(e){}};var Lt={0:200,1223:204},_t=T.ajaxSettings.xhr();g.cors=!!_t&&"withCredentials"in _t,g.ajax=_t=!!_t,T.ajaxTransport(function(o){var r,s;if(g.cors||_t&&!o.crossDomain)return{send:function(e,t){var n,i=o.xhr();if(i.open(o.type,o.url,o.async,o.username,o.password),o.xhrFields)for(n in o.xhrFields)i[n]=o.xhrFields[n];for(n in o.mimeType&&i.overrideMimeType&&i.overrideMimeType(o.mimeType),o.crossDomain||e["X-Requested-With"]||(e["X-Requested-With"]="XMLHttpRequest"),e)i.setRequestHeader(n,e[n]);r=function(e){return function(){r&&(r=s=i.onload=i.onerror=i.onabort=i.onreadystatechange=null,"abort"===e?i.abort():"error"===e?"number"!=typeof i.status?t(0,"error"):t(i.status,i.statusText):t(Lt[i.status]||i.status,i.statusText,"text"!==(i.responseType||"text")||"string"!=typeof i.responseText?{binary:i.response}:{text:i.responseText},i.getAllResponseHeaders()))}},i.onload=r(),s=i.onerror=r("error"),void 0!==i.onabort?i.onabort=s:i.onreadystatechange=function(){4===i.readyState&&S.setTimeout(function(){r&&s()})},r=r("abort");try{i.send(o.hasContent&&o.data||null)}catch(e){if(r)throw e}},abort:function(){r&&r()}}}),T.ajaxSetup({accepts:{script:"text/javascript, application/javascript, application/ecmascript, application/x-ecmascript"},contents:{script:/\b(?:java|ecma)script\b/},converters:{"text script":function(e){return T.globalEval(e),e}}}),T.ajaxPrefilter("script",function(e){void 0===e.cache&&(e.cache=!1),e.crossDomain&&(e.type="GET")}),T.ajaxTransport("script",function(n){var i,o;if(n.crossDomain)return{send:function(e,t){i=T("<script>").prop({charset:n.scriptCharset,src:n.url}).on("load error",o=function(e){i.remove(),o=null,e&&t("error"===e.type?404:200,e.type)}),C.head.appendChild(i[0])},abort:function(){o&&o()}}});var Dt=[],$t=/(=)\?(?=&|$)|\?\?/;T.ajaxSetup({jsonp:"callback",jsonpCallback:function(){var e=Dt.pop()||T.expando+"_"+ut++;return this[e]=!0,e}}),T.ajaxPrefilter("json jsonp",function(e,t,n){var i,o,r,s=!1!==e.jsonp&&($t.test(e.url)?"url":"string"==typeof e.data&&0===(e.contentType||"").indexOf("application/x-www-form-urlencoded")&&$t.test(e.data)&&"data");if(s||"jsonp"===e.dataTypes[0])return i=e.jsonpCallback=T.isFunction(e.jsonpCallback)?e.jsonpCallback():e.jsonpCallback,s?e[s]=e[s].replace($t,"$1"+i):!1!==e.jsonp&&(e.url+=(dt.test(e.url)?"&":"?")+e.jsonp+"="+i),e.converters["script json"]=function(){return r||T.error(i+" was not called"),r[0]},e.dataTypes[0]="json",o=S[i],S[i]=function(){r=arguments},n.always(function(){void 0===o?T(S).removeProp(i):S[i]=o,e[i]&&(e.jsonpCallback=t.jsonpCallback,Dt.push(i)),r&&T.isFunction(o)&&o(r[0]),r=o=void 0}),"script"}),T.parseHTML=function(e,t,n){if(!e||"string"!=typeof e)return null;"boolean"==typeof t&&(n=t,t=!1),t=t||C;var i=b.exec(e),o=!n&&[];return i?[t.createElement(i[1])]:(i=ne([e],t,o),o&&o.length&&T(o).remove(),T.merge([],i.childNodes))};var Ot=T.fn.load;function Mt(e){return T.isWindow(e)?e:9===e.nodeType&&e.defaultView}T.fn.load=function(e,t,n){if("string"!=typeof e&&Ot)return Ot.apply(this,arguments);var i,o,r,s=this,a=e.indexOf(" ");return-1<a&&(i=T.trim(e.slice(a)),e=e.slice(0,a)),T.isFunction(t)?(n=t,t=void 0):t&&"object"==typeof t&&(o="POST"),0<s.length&&T.ajax({url:e,type:o||"GET",dataType:"html",data:t}).done(function(e){r=arguments,s.html(i?T("<div>").append(T.parseHTML(e)).find(i):e)}).always(n&&function(e,t){s.each(function(){n.apply(this,r||[e.responseText,t,e])})}),this},T.each(["ajaxStart","ajaxStop","ajaxComplete","ajaxError","ajaxSuccess","ajaxSend"],function(e,t){T.fn[t]=function(e){return this.on(t,e)}}),T.expr.filters.animated=function(t){return T.grep(T.timers,function(e){return t===e.elem}).length},T.offset={setOffset:function(e,t,n){var i,o,r,s,a,l,c=T.css(e,"position"),u=T(e),d={};"static"===c&&(e.style.position="relative"),a=u.offset(),r=T.css(e,"top"),l=T.css(e,"left"),o=("absolute"===c||"fixed"===c)&&-1<(r+l).indexOf("auto")?(s=(i=u.position()).top,i.left):(s=parseFloat(r)||0,parseFloat(l)||0),T.isFunction(t)&&(t=t.call(e,n,T.extend({},a))),null!=t.top&&(d.top=t.top-a.top+s),null!=t.left&&(d.left=t.left-a.left+o),"using"in t?t.using.call(e,d):u.css(d)}},T.fn.extend({offset:function(t){if(arguments.length)return void 0===t?this:this.each(function(e){T.offset.setOffset(this,t,e)});var e,n,i=this[0],o={top:0,left:0},r=i&&i.ownerDocument;return r?(e=r.documentElement,T.contains(e,i)?(o=i.getBoundingClientRect(),n=Mt(r),{top:o.top+n.pageYOffset-e.clientTop,left:o.left+n.pageXOffset-e.clientLeft}):o):void 0},position:function(){if(this[0]){var e,t,n=this[0],i={top:0,left:0};return"fixed"===T.css(n,"position")?t=n.getBoundingClientRect():(e=this.offsetParent(),t=this.offset(),T.nodeName(e[0],"html")||(i=e.offset()),i.top+=T.css(e[0],"borderTopWidth",!0),i.left+=T.css(e[0],"borderLeftWidth",!0)),{top:t.top-i.top-T.css(n,"marginTop",!0),left:t.left-i.left-T.css(n,"marginLeft",!0)}}},offsetParent:function(){return this.map(function(){for(var e=this.offsetParent;e&&"static"===T.css(e,"position");)e=e.offsetParent;return e||Ne})}}),T.each({scrollLeft:"pageXOffset",scrollTop:"pageYOffset"},function(t,o){var r="pageYOffset"===o;T.fn[t]=function(e){return O(this,function(e,t,n){var i=Mt(e);if(void 0===n)return i?i[o]:e[t];i?i.scrollTo(r?i.pageXOffset:n,r?n:i.pageYOffset):e[t]=n},t,e,arguments.length)}}),T.each(["top","left"],function(e,n){T.cssHooks[n]=_e(g.pixelPosition,function(e,t){if(t)return t=Le(e,n),Ee.test(t)?T(e).position()[n]+"px":t})}),T.each({Height:"height",Width:"width"},function(r,s){T.each({padding:"inner"+r,content:s,"":"outer"+r},function(i,e){T.fn[e]=function(e,t){var n=arguments.length&&(i||"boolean"!=typeof e),o=i||(!0===e||!0===t?"margin":"border");return O(this,function(e,t,n){var i;return T.isWindow(e)?e.document.documentElement["client"+r]:9===e.nodeType?(i=e.documentElement,Math.max(e.body["scroll"+r],i["scroll"+r],e.body["offset"+r],i["offset"+r],i["client"+r])):void 0===n?T.css(e,t,o):T.style(e,t,n,o)},s,n?e:void 0,n,null)}})}),T.fn.extend({bind:function(e,t,n){return this.on(e,null,t,n)},unbind:function(e,t){return this.off(e,null,t)},delegate:function(e,t,n,i){return this.on(t,e,n,i)},undelegate:function(e,t,n){return 1===arguments.length?this.off(e,"**"):this.off(t,e||"**",n)},size:function(){return this.length}}),T.fn.andSelf=T.fn.addBack,"function"==typeof define&&define.amd&&define("jquery",[],function(){return T});var jt=S.jQuery,Ht=S.$;return T.noConflict=function(e){return S.$===T&&(S.$=Ht),e&&S.jQuery===T&&(S.jQuery=jt),T},e||(S.jQuery=S.$=T),T}),function(e){"function"==typeof define&&define.amd?define([],e):"object"==typeof exports?module.exports=e():window.wNumb=e()}(function(){"use strict";var r=["decimals","thousand","mark","prefix","suffix","encoder","decoder","negativeBefore","negative","edit","undo"];function b(e){return e.split("").reverse().join("")}function m(e,t){return e.substring(0,t.length)===t}function s(e,t,n){if((e[t]||e[n])&&e[t]===e[n])throw new Error(t)}function x(e){return"number"==typeof e&&isFinite(e)}function n(e,t,n,i,o,r,s,a,l,c,u,d){var p,f,h,m,g,v=d,y="",k="";return r&&(d=r(d)),!!x(d)&&(!1!==e&&0===parseFloat(d.toFixed(e))&&(d=0),d<0&&(p=!0,d=Math.abs(d)),!1!==e&&(g=e,m=(m=d).toString().split("e"),d=(+((m=(m=Math.round(+(m[0]+"e"+(m[1]?+m[1]+g:g)))).toString().split("e"))[0]+"e"+(m[1]?+m[1]-g:-g))).toFixed(g)),-1!==(d=d.toString()).indexOf(".")?(h=(f=d.split("."))[0],n&&(y=n+f[1])):h=d,t&&(h=b((h=b(h).match(/.{1,3}/g)).join(b(t)))),p&&a&&(k+=a),i&&(k+=i),p&&l&&(k+=l),k+=h,k+=y,o&&(k+=o),c&&(k=c(k,v)),k)}function i(e,t,n,i,o,r,s,a,l,c,u,d){var p,f,h="";return u&&(d=u(d)),!(!d||"string"!=typeof d)&&(a&&m(d,a)&&(d=d.replace(a,""),p=!0),i&&m(d,i)&&(d=d.replace(i,"")),l&&m(d,l)&&(d=d.replace(l,""),p=!0),o&&(f=o,d.slice(-1*f.length)===f)&&(d=d.slice(0,-1*o.length)),t&&(d=d.split(t).join("")),n&&(d=d.replace(n,".")),p&&(h+="-"),""!==(h=(h+=d).replace(/[^0-9\.\-.]/g,""))&&(h=Number(h),s&&(h=s(h)),!!x(h)&&h))}function o(e,t,n){var i,o=[];for(i=0;i<r.length;i+=1)o.push(e[r[i]]);return o.push(n),t.apply("",o)}return function e(t){if(!(this instanceof e))return new e(t);"object"==typeof t&&(t=function(e){var t,n,i,o={};for(void 0===e.suffix&&(e.suffix=e.postfix),t=0;t<r.length;t+=1)if(void 0===(i=e[n=r[t]]))"negative"!==n||o.negativeBefore?"mark"===n&&"."!==o.thousand?o[n]=".":o[n]=!1:o[n]="-";else if("decimals"===n){if(!(0<=i&&i<8))throw new Error(n);o[n]=i}else if("encoder"===n||"decoder"===n||"edit"===n||"undo"===n){if("function"!=typeof i)throw new Error(n);o[n]=i}else{if("string"!=typeof i)throw new Error(n);o[n]=i}return s(o,"mark","thousand"),s(o,"prefix","negative"),s(o,"prefix","negativeBefore"),o}(t),this.to=function(e){return o(t,n,e)},this.from=function(e){return o(t,i,e)})}}),function(e){"function"==typeof define&&define.amd?define([],e):"object"==typeof exports?module.exports=e():window.noUiSlider=e()}(function(){"use strict";var Q="12.1.0";function a(e){return null!=e}function J(e){e.preventDefault()}function o(e){return"number"==typeof e&&!isNaN(e)&&isFinite(e)}function Z(e,t,n){0<n&&(ne(e,t),setTimeout(function(){ie(e,t)},n))}function ee(e){return Math.max(Math.min(e,100),0)}function te(e){return Array.isArray(e)?e:[e]}function t(e){var t=(e=String(e)).split(".");return 1<t.length?t[1].length:0}function ne(e,t){e.classList?e.classList.add(t):e.className+=" "+t}function ie(e,t){e.classList?e.classList.remove(t):e.className=e.className.replace(new RegExp("(^|\\b)"+t.split(" ").join("|")+"(\\b|$)","gi")," ")}function oe(e){var t=void 0!==window.pageXOffset,n="CSS1Compat"===(e.compatMode||"");return{x:t?window.pageXOffset:n?e.documentElement.scrollLeft:e.body.scrollLeft,y:t?window.pageYOffset:n?e.documentElement.scrollTop:e.body.scrollTop}}function u(e,t){return 100/(t-e)}function d(e,t){return 100*t/(e[1]-e[0])}function p(e,t){for(var n=1;e>=t[n];)n+=1;return n}function r(e,t,n){var i;if("number"==typeof t&&(t=[t]),!Array.isArray(t))throw new Error("noUiSlider ("+Q+"): 'range' contains invalid value.");if(!o(i="min"===e?0:"max"===e?100:parseFloat(e))||!o(t[0]))throw new Error("noUiSlider ("+Q+"): 'range' value isn't numeric.");n.xPct.push(i),n.xVal.push(t[0]),i?n.xSteps.push(!isNaN(t[1])&&t[1]):isNaN(t[1])||(n.xSteps[0]=t[1]),n.xHighestCompleteStep.push(0)}function s(e,t,n){if(!t)return!0;n.xSteps[e]=d([n.xVal[e],n.xVal[e+1]],t)/u(n.xPct[e],n.xPct[e+1]);var i=(n.xVal[e+1]-n.xVal[e])/n.xNumSteps[e],o=Math.ceil(Number(i.toFixed(3))-1),r=n.xVal[e]+n.xNumSteps[e]*o;n.xHighestCompleteStep[e]=r}function n(e,t,n){var i;this.xPct=[],this.xVal=[],this.xSteps=[n||!1],this.xNumSteps=[!1],this.xHighestCompleteStep=[],this.snap=t;var o=[];for(i in e)e.hasOwnProperty(i)&&o.push([e[i],i]);for(o.length&&"object"==typeof o[0][0]?o.sort(function(e,t){return e[0][0]-t[0][0]}):o.sort(function(e,t){return e[0]-t[0]}),i=0;i<o.length;i++)r(o[i][1],o[i][0],this);for(this.xNumSteps=this.xSteps.slice(0),i=0;i<this.xNumSteps.length;i++)s(i,this.xNumSteps[i],this)}n.prototype.getMargin=function(e){var t=this.xNumSteps[0];if(t&&e/t%1!=0)throw new Error("noUiSlider ("+Q+"): 'limit', 'margin' and 'padding' must be divisible by step.");return 2===this.xPct.length&&d(this.xVal,e)},n.prototype.toStepping=function(e){return function(e,t,n){if(n>=e.slice(-1)[0])return 100;var i,o,r=p(n,e),s=e[r-1],a=e[r],l=t[r-1],c=t[r];return l+(o=n,d(i=[s,a],i[0]<0?o+Math.abs(i[0]):o-i[0])/u(l,c))}(this.xVal,this.xPct,e)},n.prototype.fromStepping=function(e){return function(e,t,n){if(100<=n)return e.slice(-1)[0];var i,o=p(n,t),r=e[o-1],s=e[o],a=t[o-1];return i=[r,s],(n-a)*u(a,t[o])*(i[1]-i[0])/100+i[0]}(this.xVal,this.xPct,e)},n.prototype.getStep=function(e){return function(e,t,n,i){if(100===i)return i;var o,r,s=p(i,e),a=e[s-1],l=e[s];return n?(l-a)/2<i-a?l:a:t[s-1]?e[s-1]+(o=i-e[s-1],r=t[s-1],Math.round(o/r)*r):i}(this.xPct,this.xSteps,this.snap,e)},n.prototype.getNearbySteps=function(e){var t=p(e,this.xPct);return{stepBefore:{startValue:this.xVal[t-2],step:this.xNumSteps[t-2],highestStep:this.xHighestCompleteStep[t-2]},thisStep:{startValue:this.xVal[t-1],step:this.xNumSteps[t-1],highestStep:this.xHighestCompleteStep[t-1]},stepAfter:{startValue:this.xVal[t],step:this.xNumSteps[t],highestStep:this.xHighestCompleteStep[t]}}},n.prototype.countStepDecimals=function(){var e=this.xNumSteps.map(t);return Math.max.apply(null,e)},n.prototype.convert=function(e){return this.getStep(this.toStepping(e))};var l={to:function(e){return void 0!==e&&e.toFixed(2)},from:Number};function i(e){if("object"==typeof(t=e)&&"function"==typeof t.to&&"function"==typeof t.from)return!0;var t;throw new Error("noUiSlider ("+Q+"): 'format' requires 'to' and 'from' methods.")}function c(e,t){if(!o(t))throw new Error("noUiSlider ("+Q+"): 'step' is not numeric.");e.singleStep=t}function f(e,t){if("object"!=typeof t||Array.isArray(t))throw new Error("noUiSlider ("+Q+"): 'range' is not an object.");if(void 0===t.min||void 0===t.max)throw new Error("noUiSlider ("+Q+"): Missing 'min' or 'max' in 'range'.");if(t.min===t.max)throw new Error("noUiSlider ("+Q+"): 'range' 'min' and 'max' cannot be equal.");e.spectrum=new n(t,e.snap,e.singleStep)}function h(e,t){if(t=te(t),!Array.isArray(t)||!t.length)throw new Error("noUiSlider ("+Q+"): 'start' option is incorrect.");e.handles=t.length,e.start=t}function m(e,t){if("boolean"!=typeof(e.snap=t))throw new Error("noUiSlider ("+Q+"): 'snap' option must be a boolean.")}function g(e,t){if("boolean"!=typeof(e.animate=t))throw new Error("noUiSlider ("+Q+"): 'animate' option must be a boolean.")}function v(e,t){if("number"!=typeof(e.animationDuration=t))throw new Error("noUiSlider ("+Q+"): 'animationDuration' option must be a number.")}function y(e,t){var n,i=[!1];if("lower"===t?t=[!0,!1]:"upper"===t&&(t=[!1,!0]),!0===t||!1===t){for(n=1;n<e.handles;n++)i.push(t);i.push(!1)}else{if(!Array.isArray(t)||!t.length||t.length!==e.handles+1)throw new Error("noUiSlider ("+Q+"): 'connect' option doesn't match handle count.");i=t}e.connect=i}function k(e,t){switch(t){case"horizontal":e.ort=0;break;case"vertical":e.ort=1;break;default:throw new Error("noUiSlider ("+Q+"): 'orientation' option is invalid.")}}function b(e,t){if(!o(t))throw new Error("noUiSlider ("+Q+"): 'margin' option must be numeric.");if(0!==t&&(e.margin=e.spectrum.getMargin(t),!e.margin))throw new Error("noUiSlider ("+Q+"): 'margin' option is only supported on linear sliders.")}function x(e,t){if(!o(t))throw new Error("noUiSlider ("+Q+"): 'limit' option must be numeric.");if(e.limit=e.spectrum.getMargin(t),!e.limit||e.handles<2)throw new Error("noUiSlider ("+Q+"): 'limit' option is only supported on linear sliders with 2 or more handles.")}function w(e,t){if(!o(t)&&!Array.isArray(t))throw new Error("noUiSlider ("+Q+"): 'padding' option must be numeric or array of exactly 2 numbers.");if(Array.isArray(t)&&2!==t.length&&!o(t[0])&&!o(t[1]))throw new Error("noUiSlider ("+Q+"): 'padding' option must be numeric or array of exactly 2 numbers.");if(0!==t){if(Array.isArray(t)||(t=[t,t]),!(e.padding=[e.spectrum.getMargin(t[0]),e.spectrum.getMargin(t[1])])===e.padding[0]||!1===e.padding[1])throw new Error("noUiSlider ("+Q+"): 'padding' option is only supported on linear sliders.");if(e.padding[0]<0||e.padding[1]<0)throw new Error("noUiSlider ("+Q+"): 'padding' option must be a positive number(s).");if(100<=e.padding[0]+e.padding[1])throw new Error("noUiSlider ("+Q+"): 'padding' option must not exceed 100% of the range.")}}function S(e,t){switch(t){case"ltr":e.dir=0;break;case"rtl":e.dir=1;break;default:throw new Error("noUiSlider ("+Q+"): 'direction' option was not recognized.")}}function C(e,t){if("string"!=typeof t)throw new Error("noUiSlider ("+Q+"): 'behaviour' must be a string containing options.");var n=0<=t.indexOf("tap"),i=0<=t.indexOf("drag"),o=0<=t.indexOf("fixed"),r=0<=t.indexOf("snap"),s=0<=t.indexOf("hover"),a=0<=t.indexOf("unconstrained");if(o){if(2!==e.handles)throw new Error("noUiSlider ("+Q+"): 'fixed' behaviour must be used with 2 handles");b(e,e.start[1]-e.start[0])}if(a&&(e.margin||e.limit))throw new Error("noUiSlider ("+Q+"): 'unconstrained' behaviour cannot be used with margin or limit");e.events={tap:n||r,drag:i,fixed:o,snap:r,hover:s,unconstrained:a}}function T(e,t){if(!1!==t)if(!0===t){e.tooltips=[];for(var n=0;n<e.handles;n++)e.tooltips.push(!0)}else{if(e.tooltips=te(t),e.tooltips.length!==e.handles)throw new Error("noUiSlider ("+Q+"): must pass a formatter for all handles.");e.tooltips.forEach(function(e){if("boolean"!=typeof e&&("object"!=typeof e||"function"!=typeof e.to))throw new Error("noUiSlider ("+Q+"): 'tooltips' must be passed a formatter or 'false'.")})}}function E(e,t){i(e.ariaFormat=t)}function A(e,t){i(e.format=t)}function P(e,t){if("boolean"!=typeof(e.keyboardSupport=t))throw new Error("noUiSlider ("+Q+"): 'keyboardSupport' option must be a boolean.")}function N(e,t){e.documentElement=t}function L(e,t){if("string"!=typeof t&&!1!==t)throw new Error("noUiSlider ("+Q+"): 'cssPrefix' must be a string or `false`.");e.cssPrefix=t}function _(e,t){if("object"!=typeof t)throw new Error("noUiSlider ("+Q+"): 'cssClasses' must be an object.");if("string"==typeof e.cssPrefix)for(var n in e.cssClasses={},t)t.hasOwnProperty(n)&&(e.cssClasses[n]=e.cssPrefix+t[n]);else e.cssClasses=t}function re(t){var n={margin:0,limit:0,padding:0,animate:!0,animationDuration:300,ariaFormat:l,format:l},i={step:{r:!1,t:c},start:{r:!0,t:h},connect:{r:!0,t:y},direction:{r:!0,t:S},snap:{r:!1,t:m},animate:{r:!1,t:g},animationDuration:{r:!1,t:v},range:{r:!0,t:f},orientation:{r:!1,t:k},margin:{r:!1,t:b},limit:{r:!1,t:x},padding:{r:!1,t:w},behaviour:{r:!0,t:C},ariaFormat:{r:!1,t:E},format:{r:!1,t:A},tooltips:{r:!1,t:T},keyboardSupport:{r:!0,t:P},documentElement:{r:!1,t:N},cssPrefix:{r:!0,t:L},cssClasses:{r:!0,t:_}},o={connect:!1,direction:"ltr",behaviour:"tap",orientation:"horizontal",keyboardSupport:!0,cssPrefix:"noUi-",cssClasses:{target:"target",base:"base",origin:"origin",handle:"handle",handleLower:"handle-lower",handleUpper:"handle-upper",horizontal:"horizontal",vertical:"vertical",background:"background",connect:"connect",connects:"connects",ltr:"ltr",rtl:"rtl",draggable:"draggable",drag:"state-drag",tap:"state-tap",active:"active",tooltip:"tooltip",pips:"pips",pipsHorizontal:"pips-horizontal",pipsVertical:"pips-vertical",marker:"marker",markerHorizontal:"marker-horizontal",markerVertical:"marker-vertical",markerNormal:"marker-normal",markerLarge:"marker-large",markerSub:"marker-sub",value:"value",valueHorizontal:"value-horizontal",valueVertical:"value-vertical",valueNormal:"value-normal",valueLarge:"value-large",valueSub:"value-sub"}};t.format&&!t.ariaFormat&&(t.ariaFormat=t.format),Object.keys(i).forEach(function(e){if(!a(t[e])&&void 0===o[e]){if(i[e].r)throw new Error("noUiSlider ("+Q+"): '"+e+"' is required.");return!0}i[e].t(n,a(t[e])?t[e]:o[e])}),n.pips=t.pips;var e=document.createElement("div"),r=void 0!==e.style.msTransform,s=void 0!==e.style.transform;return n.transformRule=s?"transform":r?"msTransform":"webkitTransform",n.style=[["left","top"],["right","bottom"]][n.dir][n.ort],n}function D(e,p,r){var l,c,a,s,u,t,d,o,f=window.navigator.pointerEnabled?{start:"pointerdown",move:"pointermove",end:"pointerup"}:window.navigator.msPointerEnabled?{start:"MSPointerDown",move:"MSPointerMove",end:"MSPointerUp"}:{start:"mousedown touchstart",move:"mousemove touchmove",end:"mouseup touchend"},h=window.CSS&&CSS.supports&&CSS.supports("touch-action","none")&&function(){var e=!1;try{var t=Object.defineProperty({},"passive",{get:function(){e=!0}});window.addEventListener("test",null,t)}catch(e){}return e}(),w=e,m=[],g=[],v=0,S=p.spectrum,y=[],k={},C=e.ownerDocument,b=p.documentElement||C.documentElement,x=C.body,T=-1,E=0,A=1,P=2,N="rtl"===C.dir||1===p.ort?0:100;function L(e,t){var n=C.createElement("div");return t&&ne(n,t),e.appendChild(n),n}function _(e,t){return!!t&&L(e,p.cssClasses.connect)}function D(){var e;u&&((e=u).parentElement.removeChild(e),u=null)}function $(e){D();var m,g,v,y,t,n,k,b,x,i=e.mode,o=e.density||1,r=e.filter||!1,s=function(e,t,n){if("range"===e||"steps"===e)return S.xVal;if("count"===e){if(t<2)throw new Error("noUiSlider ("+Q+"): 'values' (>= 2) required for mode 'count'.");var i=t-1,o=100/i;for(t=[];i--;)t[i]=i*o;t.push(100),e="positions"}return"positions"===e?t.map(function(e){return S.fromStepping(n?S.getStep(e):e)}):"values"===e?n?t.map(function(e){return S.fromStepping(S.getStep(S.toStepping(e)))}):t:void 0}(i,e.values||!1,e.stepped||!1),a=(m=o,g=i,v=s,y={},t=S.xVal[0],n=S.xVal[S.xVal.length-1],b=k=!1,x=0,(v=v.slice().sort(function(e,t){return e-t}).filter(function(e){return!this[e]&&(this[e]=!0)},{}))[0]!==t&&(v.unshift(t),k=!0),v[v.length-1]!==n&&(v.push(n),b=!0),v.forEach(function(e,t){var n,i,o,r,s,a,l,c,u,d,p=e,f=v[t+1],h="steps"===g;if(h&&(n=S.xNumSteps[t]),n||(n=f-p),!1!==p&&void 0!==f)for(n=Math.max(n,1e-7),i=p;i<=f;i=(i+n).toFixed(7)/1){for(c=(s=(r=S.toStepping(i))-x)/m,d=s/(u=Math.round(c)),o=1;o<=u;o+=1)y[(a=x+o*d).toFixed(5)]=[S.fromStepping(a),0];l=-1<v.indexOf(i)?A:h?P:E,!t&&k&&(l=0),i===f&&b||(y[r.toFixed(5)]=[i,l]),x=r}}),y),l=e.format||{to:Math.round};return u=w.appendChild(function(t,o,r){var s=C.createElement("div"),a=[];a[E]=p.cssClasses.valueNormal,a[A]=p.cssClasses.valueLarge,a[P]=p.cssClasses.valueSub;var l=[];l[E]=p.cssClasses.markerNormal,l[A]=p.cssClasses.markerLarge,l[P]=p.cssClasses.markerSub;var c=[p.cssClasses.valueHorizontal,p.cssClasses.valueVertical],u=[p.cssClasses.markerHorizontal,p.cssClasses.markerVertical];function d(e,t){var n=t===p.cssClasses.value,i=n?a:l;return t+" "+(n?c:u)[p.ort]+" "+i[e]}return ne(s,p.cssClasses.pips),ne(s,0===p.ort?p.cssClasses.pipsHorizontal:p.cssClasses.pipsVertical),Object.keys(t).forEach(function(e){!function(e,t,n){if((n=o?o(t,n):n)!==T){var i=L(s,!1);i.className=d(n,p.cssClasses.marker),i.style[p.style]=e+"%",E<n&&((i=L(s,!1)).className=d(n,p.cssClasses.value),i.setAttribute("data-value",t),i.style[p.style]=e+"%",i.innerHTML=r.to(t))}}(e,t[e][0],t[e][1])}),s}(a,r,l))}function O(){var e=l.getBoundingClientRect(),t="offset"+["Width","Height"][p.ort];return 0===p.ort?e.width||l[t]:e.height||l[t]}function M(i,o,r,s){var t=function(e){return!!(e=function(e,t,n){var i,o,r=0===e.type.indexOf("touch"),s=0===e.type.indexOf("mouse"),a=0===e.type.indexOf("pointer");if(0===e.type.indexOf("MSPointer")&&(a=!0),r){var l=function(e){return e.target===n||n.contains(e.target)};if("touchstart"===e.type){var c=Array.prototype.filter.call(e.touches,l);if(1<c.length)return!1;i=c[0].pageX,o=c[0].pageY}else{var u=Array.prototype.find.call(e.changedTouches,l);if(!u)return!1;i=u.pageX,o=u.pageY}}return t=t||oe(C),(s||a)&&(i=e.clientX+t.x,o=e.clientY+t.y),e.pageOffset=t,e.points=[i,o],e.cursor=s||a,e}(e,s.pageOffset,s.target||o))&&!(w.hasAttribute("disabled")&&!s.doNotReject)&&(t=w,n=p.cssClasses.tap,!((t.classList?t.classList.contains(n):new RegExp("\\b"+n+"\\b").test(t.className))&&!s.doNotReject)&&!(i===f.start&&void 0!==e.buttons&&1<e.buttons)&&(!s.hover||!e.buttons)&&(h||e.preventDefault(),e.calcPoint=e.points[p.ort],void r(e,s)));var t,n},n=[];return i.split(" ").forEach(function(e){o.addEventListener(e,t,!!h&&{passive:!0}),n.push([e,t])}),n}function j(e){var t,n,i,o,r,s,a=100*(e-(t=l,n=p.ort,i=t.getBoundingClientRect(),r=(o=t.ownerDocument).documentElement,s=oe(o),/webkit.*Chrome.*Mobile/i.test(navigator.userAgent)&&(s.x=0),n?i.top+s.y-r.clientTop:i.left+s.x-r.clientLeft))/O();return a=ee(a),p.dir?100-a:a}function H(e,t){"mouseout"===e.type&&"HTML"===e.target.nodeName&&null===e.relatedTarget&&q(e,t)}function F(e,t){if(-1===navigator.appVersion.indexOf("MSIE 9")&&0===e.buttons&&0!==t.buttonsProperty)return q(e,t);var n=(p.dir?-1:1)*(e.calcPoint-t.startCalcPoint);i(0<n,100*n/t.baseSize,t.locations,t.handleNumbers)}function q(e,t){t.handle&&(ie(t.handle,p.cssClasses.active),v-=1),t.listeners.forEach(function(e){b.removeEventListener(e[0],e[1])}),0===v&&(ie(w,p.cssClasses.drag),V(),e.cursor&&(x.style.cursor="",x.removeEventListener("selectstart",J))),t.handleNumbers.forEach(function(e){R("change",e),R("set",e),R("end",e)})}function I(e,t){var n;if(1===t.handleNumbers.length){var i=c[t.handleNumbers[0]];if(i.hasAttribute("disabled"))return!1;n=i.children[0],v+=1,ne(n,p.cssClasses.active)}e.stopPropagation();var o=[],r=M(f.move,b,F,{target:e.target,handle:n,listeners:o,startCalcPoint:e.calcPoint,baseSize:O(),pageOffset:e.pageOffset,handleNumbers:t.handleNumbers,buttonsProperty:e.buttons,locations:m.slice()}),s=M(f.end,b,q,{target:e.target,handle:n,listeners:o,doNotReject:!0,handleNumbers:t.handleNumbers}),a=M("mouseout",b,H,{target:e.target,handle:n,listeners:o,doNotReject:!0,handleNumbers:t.handleNumbers});o.push.apply(o,r.concat(s,a)),e.cursor&&(x.style.cursor=getComputedStyle(e.target).cursor,1<c.length&&ne(w,p.cssClasses.drag),x.addEventListener("selectstart",J,!1)),t.handleNumbers.forEach(function(e){R("start",e)})}function n(e,t){k[e]=k[e]||[],k[e].push(t),"update"===e.split(".")[0]&&c.forEach(function(e,t){R("update",t)})}function R(n,i,o){Object.keys(k).forEach(function(e){var t=e.split(".")[0];n===t&&k[e].forEach(function(e){e.call(s,y.map(p.format.to),i,y.slice(),o||!1,m.slice())})})}function B(e){return e+"%"}function z(e,t,n,i,o,r){return 1<c.length&&!p.events.unconstrained&&(i&&0<t&&(n=Math.max(n,e[t-1]+p.margin)),o&&t<c.length-1&&(n=Math.min(n,e[t+1]-p.margin))),1<c.length&&p.limit&&(i&&0<t&&(n=Math.min(n,e[t-1]+p.limit)),o&&t<c.length-1&&(n=Math.max(n,e[t+1]-p.limit))),p.padding&&(0===t&&(n=Math.max(n,p.padding[0])),t===c.length-1&&(n=Math.min(n,100-p.padding[1]))),!((n=ee(n=S.getStep(n)))===e[t]&&!r)&&n}function U(e,t){var n=p.ort;return(n?t:e)+", "+(n?e:t)}function i(e,i,n,t){var o=n.slice(),r=[!e,e],s=[e,!e];t=t.slice(),e&&t.reverse(),1<t.length?t.forEach(function(e,t){var n=z(o,e,o[e]+i,r[t],s[t],!1);!1===n?i=0:(i=n-o[e],o[e]=n)}):r=s=[!0];var a=!1;t.forEach(function(e,t){a=G(e,n[e]+i,r[t],s[t])||a}),a&&t.forEach(function(e){R("update",e),R("slide",e)})}function W(e,t){return p.dir?100-e-t:e}function V(){g.forEach(function(e){var t=50<m[e]?-1:1,n=3+(c.length+t*e);c[e].style.zIndex=n})}function G(e,t,n,i){return!1!==(t=z(m,e,t,n,i,!1))&&(function(e,t){m[e]=t,y[e]=S.fromStepping(t);var n="translate("+U(B(W(t,0)-N),"0")+")";c[e].style[p.transformRule]=n,X(e),X(e+1)}(e,t),!0)}function X(e){if(a[e]){var t=0,n=100;0!==e&&(t=m[e-1]),e!==a.length-1&&(n=m[e]);var i=n-t,o="translate("+U(B(W(t,i)),"0")+")",r="scale("+U(i/100,"1")+")";a[e].style[p.transformRule]=o+" "+r}}function K(e,t){var i=te(e),n=void 0===m[0];t=void 0===t||!!t,p.animate&&!n&&Z(w,p.cssClasses.tap,p.animationDuration),g.forEach(function(e){var t,n;G(e,null===(t=i[n=e])||!1===t||void 0===t?m[n]:("number"==typeof t&&(t=String(t)),t=p.format.from(t),!1===(t=S.toStepping(t))||isNaN(t)?m[n]:t),!0,!1)}),g.forEach(function(e){G(e,m[e],!0,!0)}),V(),g.forEach(function(e){R("update",e),null!==i[e]&&t&&R("set",e)})}function Y(){var e=y.map(p.format.to);return 1===e.length?e[0]:e}return ne(t=w,p.cssClasses.target),0===p.dir?ne(t,p.cssClasses.ltr):ne(t,p.cssClasses.rtl),0===p.ort?ne(t,p.cssClasses.horizontal):ne(t,p.cssClasses.vertical),l=L(t,p.cssClasses.base),function(e,t){var n,i,o,r=L(t,p.cssClasses.connects);c=[],(a=[]).push(_(r,e[0]));for(var s=0;s<p.handles;s++)c.push((n=s,o=void 0,(o=L(i=L(t,p.cssClasses.origin),p.cssClasses.handle)).setAttribute("data-handle",n),p.keyboardSupport&&o.setAttribute("tabindex","0"),o.setAttribute("role","slider"),o.setAttribute("aria-orientation",p.ort?"vertical":"horizontal"),0===n?ne(o,p.cssClasses.handleLower):n===p.handles-1&&ne(o,p.cssClasses.handleUpper),i)),g[s]=s,a.push(_(r,e[s+1]))}(p.connect,l),(d=p.events).fixed||c.forEach(function(e,t){M(f.start,e.children[0],I,{handleNumbers:[t]})}),d.tap&&M(f.start,l,function(e){e.stopPropagation();var i,o,r,t=j(e.calcPoint),n=(i=t,r=!(o=100),c.forEach(function(e,t){if(!e.hasAttribute("disabled")){var n=Math.abs(m[t]-i);(n<o||100===n&&100===o)&&(r=t,o=n)}}),r);if(!1===n)return!1;p.events.snap||Z(w,p.cssClasses.tap,p.animationDuration),G(n,t,!0,!0),V(),R("slide",n,!0),R("update",n,!0),R("change",n,!0),R("set",n,!0),p.events.snap&&I(e,{handleNumbers:[n]})},{}),d.hover&&M(f.move,l,function(e){var t=j(e.calcPoint),n=S.getStep(t),i=S.fromStepping(n);Object.keys(k).forEach(function(e){"hover"===e.split(".")[0]&&k[e].forEach(function(e){e.call(s,i)})})},{hover:!0}),d.drag&&a.forEach(function(e,t){if(!1!==e&&0!==t&&t!==a.length-1){var n=c[t-1],i=c[t],o=[e];ne(e,p.cssClasses.draggable),d.fixed&&(o.push(n.children[0]),o.push(i.children[0])),o.forEach(function(e){M(f.start,e,I,{handles:[n,i],handleNumbers:[t-1,t]})})}}),K(p.start),s={destroy:function(){for(var e in p.cssClasses)p.cssClasses.hasOwnProperty(e)&&ie(w,p.cssClasses[e]);for(;w.firstChild;)w.removeChild(w.firstChild);delete w.noUiSlider},steps:function(){return m.map(function(e,t){var n=S.getNearbySteps(e),i=y[t],o=n.thisStep.step,r=null;!1!==o&&i+o>n.stepAfter.startValue&&(o=n.stepAfter.startValue-i),r=i>n.thisStep.startValue?n.thisStep.step:!1!==n.stepBefore.step&&i-n.stepBefore.highestStep,100===e?o=null:0===e&&(r=null);var s=S.countStepDecimals();return null!==o&&!1!==o&&(o=Number(o.toFixed(s))),null!==r&&!1!==r&&(r=Number(r.toFixed(s))),[r,o]})},on:n,off:function(e){var i=e&&e.split(".")[0],o=i&&e.substring(i.length);Object.keys(k).forEach(function(e){var t=e.split(".")[0],n=e.substring(t.length);i&&i!==t||o&&o!==n||delete k[e]})},get:Y,set:K,setHandle:function(e,t,n){var i=[];if(!(0<=(e=Number(e))&&e<g.length))throw new Error("noUiSlider ("+Q+"): invalid handle number, got: "+e);for(var o=0;o<g.length;o++)i[o]=null;i[e]=t,K(i,n)},reset:function(e){K(p.start,e)},__moveHandles:function(e,t,n){i(e,t,m,n)},options:r,updateOptions:function(t,e){var n=Y(),i=["margin","limit","padding","range","animate","snap","step","format"];i.forEach(function(e){void 0!==t[e]&&(r[e]=t[e])});var o=re(r);i.forEach(function(e){void 0!==t[e]&&(p[e]=o[e])}),S=o.spectrum,p.margin=o.margin,p.limit=o.limit,p.padding=o.padding,p.pips&&$(p.pips),m=[],K(t.start||n,e)},target:w,removePips:D,pips:$},p.pips&&$(p.pips),p.tooltips&&(o=c.map(function(e,t){return!!p.tooltips[t]&&L(e.firstChild,p.cssClasses.tooltip)}),n("update",function(e,t,n){if(o[t]){var i=e[t];!0!==p.tooltips[t]&&(i=p.tooltips[t].to(n[t])),o[t].innerHTML=i}})),n("update",function(e,t,s,n,a){g.forEach(function(e){var t=c[e],n=z(m,e,0,!0,!0,!0),i=z(m,e,100,!0,!0,!0),o=a[e],r=p.ariaFormat.to(s[e]);n=S.fromStepping(n).toFixed(1),i=S.fromStepping(i).toFixed(1),o=S.fromStepping(o).toFixed(1),t.children[0].setAttribute("aria-valuemin",n),t.children[0].setAttribute("aria-valuemax",i),t.children[0].setAttribute("aria-valuenow",o),t.children[0].setAttribute("aria-valuetext",r)})}),s}return{__spectrum:n,version:Q,create:function(e,t){if(!e||!e.nodeName)throw new Error("noUiSlider ("+Q+"): create requires a single element, got: "+e);if(e.noUiSlider)throw new Error("noUiSlider ("+Q+"): Slider was already initialized.");var n=D(e,re(t),t);return e.noUiSlider=n}}}),function(i){"use strict";i.fn.exists=function(){return 0!==this.length};var n=function(e,t){for(var n in this.options={source:void 0,start:void 0,end:void 0,keyControl:!0,content:void 0,theme:{container:e,content:".slick-content",currentNo:".current-no",totalNo:".total",next:".next",prev:".prev"}},this.options)this.options.hasOwnProperty(n)&&"theme"!==n&&(this.options[n]=void 0!==t[n]?t[n]:this.options[n]);if(void 0!==t.theme)for(var i in this.options.theme)this.options.theme.hasOwnProperty(i)&&(this.options.theme[i]=void 0!==t.theme[i]?t.theme[i]:this.options.theme[i]);this.options.content=this.options.theme.container+" "+this.options.theme.content,this.state={current:this.options.start-1,start:this.options.start,end:this.options.end,slide:{current:0,difference:this.options.start-1,total:this.options.end-this.options.start+1,maxHit:0}},this.init.apply(this)},e=n.prototype;e.hooks={next:function(){var e=this;if(e.state.slide.current<e.state.slide.total){var t=++e.state.slide.current+e.state.slide.difference;e.hooks.setSlide.apply(this,[t])}},prev:function(){if(1<this.state.slide.current){var e=--this.state.slide.current+this.state.slide.difference;this.hooks.setSlide.apply(this,[e])}},setSlide:function(e){var t=this,n=t.hooks.slideStatus.apply(t,[e]);return t.state.slide.current=e-t.state.slide.difference,1===t.state.slide.current&&i(t.options.theme.container).animate({opacity:"1"},500),i(t.options.theme.container+" .skip"+t.options.theme.currentNo).is(":input")?i(t.options.theme.container+" "+t.options.theme.currentNo).val(t.state.slide.current):(i(t.options.theme.container+" .skip").val(t.state.slide.current),i(t.options.theme.container+" "+t.options.theme.currentNo).html(t.state.slide.current)),1===n?(i(t.options.content+" img.current").removeClass("current").addClass("cached-slide").hide(),i(t.options.content+" img[data-slide="+e+"]").removeClass("cached-slide").addClass("current").show(),t.state.current=e,i(t.options.theme.container+" .length").width(100*t.state.slide.current/t.state.slide.total+"%"),void t.hooks.getSlide.apply(t,[e+1])):void(2===n?t.hooks.slideSwitch.apply(this,[e]):0===n&&(i(t.options.content+" img.loading").off("load.slideSwitch").remove(),t.hooks.getSlide.apply(t,[e]),t.hooks.slideSwitch.apply(this,[e])))},getSlide:function(e){var t=this;0===t.hooks.slideStatus.apply(this,[e])&&e<=t.state.end&&(i(t.options.content).append('<img src="'+t.hooks.imagePath.apply(t,[e])+'" data-slide='+e+' class="loading">'),i(t.options.content+" img.loading").hide(),i(t.options.content+" img.loading").load(function(){i(this).removeClass("loading").addClass("cached-slide")}))},slideSwitch:function(e){var t=this;i(t.options.content+" img[data-slide="+e+"]").on("load.slideSwitch",function(){i(t.options.content+" img.current").removeClass("current").addClass("cached-slide").hide(),i(this).removeClass("cached-slide").addClass("current").show(),t.state.current=e,i(t.options.theme.container+" .length").width(100*(e+1)/t.state.slide.total+"%"),t.hooks.getSlide.apply(t,[e+1])})},slideStatus:function(e){var t=this.options.content+" img[data-slide="+e+"]";return i(t).exists()?i(t).hasClass("loading")?2:1:0},imagePath:function(e){var t=this.options.source.split("*");return t[0]+e+t[1]},skip:function(e){if(i.isNumeric(e)){var t=this,n=parseInt(e)+t.state.slide.difference;t.hooks.getSlide.apply(t,[n]),t.hooks.setSlide.apply(t,[n])}}},e.init=function(){var t=this;i(t.options.theme.container).css("opacity","0"),"string"==typeof t.options.source&&t.hooks.next.apply(t),i(t.options.theme.container+" "+t.options.theme.next).click(function(e){e.preventDefault(),t.hooks.next.apply(t)}),i(t.options.theme.container+" "+t.options.theme.prev).click(function(e){e.preventDefault(),t.hooks.prev.apply(t)}),i(t.options.theme.container+" "+t.options.theme.totalNo).html(t.state.end-t.state.start+1),t.options.keyControl&&i(document).keyup(function(e){39!==e.keyCode||i("input:focus").exists()||t.hooks.next.apply(t),37!==e.keyCode||i("input:focus").exists()||t.hooks.prev.apply(t)}),i(t.options.theme.container+" .skip").keypress(function(e){13===e.keyCode&&(t.hooks.skip.apply(t,[i(this).val()]),i(this).blur())})},(window.Slick=n).next=function(e){e.constructor===n&&e.hooks.next.apply(e)},n.prev=function(e){e.constructor===n&&e.hooks.prev.apply(e)},n.skip=function(e,t){e.constructor===n&&e.hooks.skip.apply(e,[t])}}(jQuery,window),function(r){r.fn.niceSelect=function(e){function i(e){e.after(r("<div></div>").addClass("nice-select").addClass(e.attr("class")||"").addClass(e.attr("disabled")?"disabled":"").attr("tabindex",e.attr("disabled")?null:"0").html('<span class="current"></span><ul class="list"></ul>'));var i=e.next(),t=e.find("option"),n=e.find("option:selected");i.find(".current").html(n.data("display")||n.text()),t.each(function(e){var t=r(this),n=t.data("display");i.find("ul").append(r("<li></li>").attr("data-value",t.val()).attr("data-display",n||null).addClass("option"+(t.is(":selected")?" selected":"")+(t.is(":disabled")?" disabled":"")).html(t.text()))})}if("string"==typeof e)return"update"==e?this.each(function(){var e=r(this),t=r(this).next(".nice-select"),n=t.hasClass("open");t.length&&(t.remove(),i(e),n&&e.next().trigger("click"))}):"destroy"==e?(this.each(function(){var e=r(this),t=r(this).next(".nice-select");t.length&&(t.remove(),e.css("display",""))}),0==r(".nice-select").length&&r(document).off(".nice_select")):console.log('Method "'+e+'" does not exist.'),this;this.hide(),this.each(function(){var e=r(this);e.next().hasClass("nice-select")||i(e)}),r(document).off(".nice_select"),r(document).on("click.nice_select",".nice-select",function(e){var t=r(this);r(".nice-select").not(t).removeClass("open"),t.toggleClass("open"),t.hasClass("open")?(t.find(".option"),t.find(".focus").removeClass("focus"),t.find(".selected").addClass("focus")):t.focus()}),r(document).on("click.nice_select",function(e){0===r(e.target).closest(".nice-select").length&&r(".nice-select").removeClass("open").find(".option")}),r(document).on("click.nice_select",".nice-select .option:not(.disabled)",function(e){var t=r(this),n=t.closest(".nice-select");n.find(".selected").removeClass("selected"),t.addClass("selected");var i=t.data("display")||t.text();n.find(".current").text(i),n.prev("select").val(t.data("value")).trigger("change")}),r(document).on("keydown.nice_select",".nice-select",function(e){var t=r(this),n=r(t.find(".focus")||t.find(".list .option.selected"));if(32==e.keyCode||13==e.keyCode)return t.hasClass("open")?n.trigger("click"):t.trigger("click"),!1;if(40==e.keyCode){if(t.hasClass("open")){var i=n.nextAll(".option:not(.disabled)").first();0<i.length&&(t.find(".focus").removeClass("focus"),i.addClass("focus"))}else t.trigger("click");return!1}if(38==e.keyCode){if(t.hasClass("open")){var o=n.prevAll(".option:not(.disabled)").first();0<o.length&&(t.find(".focus").removeClass("focus"),o.addClass("focus"))}else t.trigger("click");return!1}if(27==e.keyCode)t.hasClass("open")&&t.trigger("click");else if(9==e.keyCode&&t.hasClass("open"))return!1});var t=document.createElement("a").style;return t.cssText="pointer-events:auto","auto"!==t.pointerEvents&&r("html").addClass("no-csspointerevents"),this}}(jQuery),function(n){var i={};function o(e){if(i[e])return i[e].exports;var t=i[e]={i:e,l:!1,exports:{}};return n[e].call(t.exports,t,t.exports,o),t.l=!0,t.exports}o.m=n,o.c=i,o.d=function(e,t,n){o.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:n})},o.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},o.t=function(t,e){if(1&e&&(t=o(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var n=Object.create(null);if(o.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var i in t)o.d(n,i,function(e){return t[e]}.bind(null,i));return n},o.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return o.d(t,"a",t),t},o.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},o.p="",o(o.s=0)}([function(e,t,n){"use strict";n(1),n(6),n(7);var i=s(n(2)),o=s(n(3)),r=s(n(4));function s(e){return e&&e.__esModule?e:{default:e}}o.default===r.default&&n(8),window.Inputmask=i.default},function(e,t,n){"use strict";var i,o,r;"function"==typeof Symbol&&Symbol.iterator;o=[n(2)],void 0===(r="function"==typeof(i=function(e){return e.extendDefinitions({A:{validator:"[A-Za-zА-яЁёÀ-ÿµ]",casing:"upper"},"&":{validator:"[0-9A-Za-zА-яЁёÀ-ÿµ]",casing:"upper"},"#":{validator:"[0-9A-Fa-f]",casing:"upper"}}),e.extendAliases({cssunit:{regex:"[+-]?[0-9]+\\.?([0-9]+)?(px|em|rem|ex|%|in|cm|mm|pt|pc)"},url:{regex:"(https?|ftp)//.*",autoUnmask:!1},ip:{mask:"i[i[i]].i[i[i]].i[i[i]].i[i[i]]",definitions:{i:{validator:function(e,t,n,i,o){return e=-1<n-1&&"."!==t.buffer[n-1]?(e=t.buffer[n-1]+e,-1<n-2&&"."!==t.buffer[n-2]?t.buffer[n-2]+e:"0"+e):"00"+e,new RegExp("25[0-5]|2[0-4][0-9]|[01][0-9][0-9]").test(e)}}},onUnMask:function(e,t,n){return e},inputmode:"numeric"},email:{mask:"*{1,64}[.*{1,64}][.*{1,64}][.*{1,63}]@-{1,63}.-{1,63}[.-{1,63}][.-{1,63}]",greedy:!1,casing:"lower",onBeforePaste:function(e,t){return(e=e.toLowerCase()).replace("mailto:","")},definitions:{"*":{validator:"[0-9１-９A-Za-zА-яЁёÀ-ÿµ!#$%&'*+/=?^_`{|}~-]"},"-":{validator:"[0-9A-Za-z-]"}},onUnMask:function(e,t,n){return e},inputmode:"email"},mac:{mask:"##:##:##:##:##:##"},vin:{mask:"V{13}9{4}",definitions:{V:{validator:"[A-HJ-NPR-Za-hj-npr-z\\d]",casing:"upper"}},clearIncomplete:!0,autoUnmask:!0}}),e})?i.apply(t,o):i)||(e.exports=r)},function(e,t,n){"use strict";var i,o,r,fe="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e};o=[n(3),n(5)],void 0===(r="function"==typeof(i=function(ne,ie,oe){var re=ie.document,e=navigator.userAgent,se=0<e.indexOf("MSIE ")||0<e.indexOf("Trident/"),ae=de("touchstart"),le=/iemobile/i.test(e),ce=/iphone/i.test(e)&&!le;function ue(e,t,n){if(!(this instanceof ue))return new ue(e,t,n);this.el=oe,this.events={},this.maskset=oe,!(this.refreshValue=!1)!==n&&(ne.isPlainObject(e)?t=e:(t=t||{},e&&(t.alias=e)),this.opts=ne.extend(!0,{},this.defaults,t),this.noMasksCache=t&&t.definitions!==oe,this.userOptions=t||{},this.isRTL=this.opts.numericInput,u(this.opts.alias,t,this.opts))}function u(e,t,n){var i=ue.prototype.aliases[e];return i?(i.alias&&u(i.alias,oe,n),ne.extend(!0,n,i),ne.extend(!0,n,t),!0):(null===n.mask&&(n.mask=e),!1)}function r(n,a){function e(e,t,n){var i=!1;if(null!==e&&""!==e||(i=null!==n.regex,e=i?(e=n.regex).replace(/^(\^)(.*)(\$)$/,"$2"):(i=!0,".*")),1===e.length&&!1===n.greedy&&0!==n.repeat&&(n.placeholder=""),0<n.repeat||"*"===n.repeat||"+"===n.repeat){var o="*"===n.repeat?0:"+"===n.repeat?1:n.repeat;e=n.groupmarker[0]+e+n.groupmarker[1]+n.quantifiermarker[0]+o+","+n.repeat+n.quantifiermarker[1]}var r,s=i?"regex_"+n.regex:n.numericInput?e.split("").reverse().join(""):e;return ue.prototype.masksCache[s]===oe||!0===a?(r={mask:e,maskToken:ue.prototype.analyseMask(e,i,n),validPositions:{},_buffer:oe,buffer:oe,tests:{},excludes:{},metadata:t,maskLength:oe,jitOffset:{}},!0!==a&&(ue.prototype.masksCache[s]=r,r=ne.extend(!0,{},ue.prototype.masksCache[s]))):r=ne.extend(!0,{},ue.prototype.masksCache[s]),r}if(ne.isFunction(n.mask)&&(n.mask=n.mask(n)),ne.isArray(n.mask)){if(1<n.mask.length){if(null===n.keepStatic){n.keepStatic="auto";for(var t=0;t<n.mask.length;t++)if(n.mask[t].charAt(0)!==n.mask[0].charAt(0)){n.keepStatic=!0;break}}var i=n.groupmarker[0];return ne.each(n.isRTL?n.mask.reverse():n.mask,function(e,t){1<i.length&&(i+=n.groupmarker[1]+n.alternatormarker+n.groupmarker[0]),t.mask===oe||ne.isFunction(t.mask)?i+=t:i+=t.mask}),e(i+=n.groupmarker[1],n.mask,n)}n.mask=n.mask.pop()}return n.mask&&n.mask.mask!==oe&&!ne.isFunction(n.mask.mask)?e(n.mask.mask,n.mask,n):e(n.mask,n.mask,n)}function de(e){var t=re.createElement("input"),n="on"+e,i=n in t;return i||(t.setAttribute(n,"return;"),i="function"==typeof t[n]),t=null,i}function pe(e,t,z){t=t||this.maskset,z=z||this.opts;var m,r,g,f,s,c=this,u=this.el,v=this.isRTL,a=!1,d=!1,y=!1,n=!1;function h(e,t,n,i,o){var r=z.greedy;o&&(z.greedy=!1),t=t||0;var s,a,l,c=[],u=0;S();do{if(!0===e&&U().validPositions[u])l=o&&!0===U().validPositions[u].match.optionality&&U().validPositions[u+1]===oe&&(!0===U().validPositions[u].generatedInput||U().validPositions[u].input==z.skipOptionalPartCharacter&&0<u)?k(u,E(u,s,u-1)):U().validPositions[u],a=l.match,s=l.locator.slice(),c.push(!0===n?l.input:!1===n?a.nativeDef:q(u,a));else{l=b(u,s,u-1),a=l.match,s=l.locator.slice();var d=!0!==i&&(!1!==z.jitMasking?z.jitMasking:a.jit);(!1===d||d===oe||"number"==typeof d&&isFinite(d)&&u<d)&&c.push(!1===n?a.nativeDef:q(u,a))}"auto"===z.keepStatic&&a.newBlockMarker&&null!==a.fn&&(z.keepStatic=u-1),u++}while((g===oe||u<g)&&(null!==a.fn||""!==a.def)||u<t);return""===c[c.length-1]&&c.pop(),!1===n&&U().maskLength!==oe||(U().maskLength=u-1),z.greedy=r,c}function U(){return t}function w(e){var t=U();t.buffer=oe,!0!==e&&(t.validPositions={},t.p=0)}function S(e,t,n){var i=-1,o=-1,r=n||U().validPositions;for(var s in e===oe&&(e=-1),r){var a=parseInt(s);r[a]&&(t||!0!==r[a].generatedInput)&&(a<=e&&(i=a),e<=a&&(o=a))}return-1===i||i==e?o:-1==o?i:e-i<o-e?i:o}function C(e){var t=e.locator[e.alternation];return"string"==typeof t&&0<t.length&&(t=t.split(",")[0]),t!==oe?t.toString():""}function p(e,t){var n=(e.alternation!=oe?e.mloc[C(e)]:e.locator).join("");if(""!==n)for(;n.length<t;)n+="0";return n}function k(e,t){for(var n,i,o,r=T(e=0<e?e-1:0),s=p(r),a=0;a<t.length;a++){var l=t[a];n=p(l,s.length);var c=Math.abs(n-s);(i===oe||""!==n&&c<i||o&&!z.greedy&&o.match.optionality&&"master"===o.match.newBlockMarker&&(!l.match.optionality||!l.match.newBlockMarker)||o&&o.match.optionalQuantifier&&!l.match.optionalQuantifier)&&(i=c,o=l)}return o}function b(e,t,n){return U().validPositions[e]||k(e,E(e,t?t.slice():t,n))}function T(e,t){return U().validPositions[e]?U().validPositions[e]:(t||E(e))[0]}function x(e,t){for(var n=!1,i=E(e),o=0;o<i.length;o++)if(i[o].match&&i[o].match.def===t){n=!0;break}return n}function E(j,e,t){var H,n,i,o,r=U().maskToken,F=e?t:0,s=e?e.slice():[0],q=[],I=!1,R=e?e.join(""):"";function B($,O,e,t){function M(e,t,n){function r(n,i){var o=0===ne.inArray(n,i.matches);return o||ne.each(i.matches,function(e,t){if(!0===t.isQuantifier?o=r(n,i.matches[e-1]):t.hasOwnProperty("matches")&&(o=r(n,t)),o)return!1}),o}function i(e,o,r){var s,a;if((U().tests[e]||U().validPositions[e])&&ne.each(U().tests[e]||[U().validPositions[e]],function(e,t){if(t.mloc[o])return s=t,!1;var n=r!==oe?r:t.alternation,i=t.locator[n]!==oe?t.locator[n].toString().indexOf(o):-1;(a===oe||i<a)&&-1!==i&&(s=t,a=i)}),s){var t=s.locator[s.alternation],n=s.mloc[o]||s.mloc[t]||s.locator;return n.slice((r!==oe?r:s.alternation)+1)}return r!==oe?i(e,o):oe}function o(e,t){function n(e){for(var t,n,i=[],o=0,r=e.length;o<r;o++)if("-"===e.charAt(o))for(n=e.charCodeAt(o+1);++t<n;)i.push(String.fromCharCode(t));else t=e.charCodeAt(o),i.push(e.charAt(o));return i.join("")}return z.regex&&null!==e.match.fn&&null!==t.match.fn?-1!==n(t.match.def.replace(/[\[\]]/g,"")).indexOf(n(e.match.def.replace(/[\[\]]/g,""))):e.match.def===t.match.nativeDef}function s(e,t){if(t===oe||e.alternation===t.alternation&&-1===e.locator[e.alternation].toString().indexOf(t.locator[t.alternation])){e.mloc=e.mloc||{};var n=e.locator[e.alternation];if(n!==oe){if("string"==typeof n&&(n=n.split(",")[0]),e.mloc[n]===oe&&(e.mloc[n]=e.locator.slice()),t!==oe){for(var i in t.mloc)"string"==typeof i&&(i=i.split(",")[0]),e.mloc[i]===oe&&(e.mloc[i]=t.mloc[i]);e.locator[e.alternation]=Object.keys(e.mloc).join(",")}return!0}e.alternation=oe}return!1}if(500<F&&n!==oe)throw"Inputmask: There is probably an error in your mask definition or in the code. Create an issue on github with an example of the mask you are using. "+U().mask;if(F===j&&e.matches===oe)return q.push({match:e,locator:t.reverse(),cd:R,mloc:{}}),!0;if(e.matches!==oe){if(e.isGroup&&n!==e){if(e=M($.matches[ne.inArray(e,$.matches)+1],t,n))return!0}else if(e.isOptional){var a=e;if(e=B(e,O,t,n)){if(ne.each(q,function(e,t){t.match.optionality=!0}),H=q[q.length-1].match,n!==oe||!r(H,a))return!0;I=!0,F=j}}else if(e.isAlternator){var l,c=e,u=[],d=q.slice(),p=t.length,f=0<O.length?O.shift():-1;if(-1===f||"string"==typeof f){var h,m=F,g=O.slice(),v=[];if("string"==typeof f)v=f.split(",");else for(h=0;h<c.matches.length;h++)v.push(h.toString());if(U().excludes[j]){for(var y=v.slice(),k=0,b=U().excludes[j].length;k<b;k++)v.splice(v.indexOf(U().excludes[j][k].toString()),1);0===v.length&&(U().excludes[j]=oe,v=y)}(!0===z.keepStatic||isFinite(parseInt(z.keepStatic))&&m>=z.keepStatic)&&(v=v.slice(0,1));for(var x=!1,w=0;w<v.length;w++){h=parseInt(v[w]),q=[],O="string"==typeof f&&i(F,h,p)||g.slice(),c.matches[h]&&M(c.matches[h],[h].concat(t),n)?e=!0:0===w&&(x=!0),l=q.slice(),F=m,q=[];for(var S=0;S<l.length;S++){var C=l[S],T=!1;C.match.jit=C.match.jit||x,C.alternation=C.alternation||p,s(C);for(var E=0;E<u.length;E++){var A=u[E];if("string"!=typeof f||C.alternation!==oe&&-1!==ne.inArray(C.locator[C.alternation].toString(),v)){if(C.match.nativeDef===A.match.nativeDef){T=!0,s(A,C);break}if(o(C,A)){s(C,A)&&(T=!0,u.splice(u.indexOf(A),0,C));break}if(o(A,C)){s(A,C);break}if(D=A,void 0,!(!((_=_=C).locator.slice(_.alternation).join("")==D.locator.slice(D.alternation).join(""))||null!==_.match.fn||null===D.match.fn)&&D.match.fn.test(_.match.def,U(),j,!1,z,!1)){s(C,A)&&(T=!0,u.splice(u.indexOf(A),0,C));break}}}T||u.push(C)}}q=d.concat(u),F=j,I=0<q.length,e=0<u.length,O=g.slice()}else e=M(c.matches[f]||$.matches[f],[f].concat(t),n);if(e)return!0}else if(e.isQuantifier&&n!==$.matches[ne.inArray(e,$.matches)-1])for(var P=e,N=0<O.length?O.shift():0;N<(isNaN(P.quantifier.max)?N+1:P.quantifier.max)&&F<=j;N++){var L=$.matches[ne.inArray(P,$.matches)-1];if(e=M(L,[N].concat(t),L)){if((H=q[q.length-1].match).optionalQuantifier=N>=P.quantifier.min,H.jit=(N||1)*L.matches.indexOf(H)>=P.quantifier.jit,H.optionalQuantifier&&r(H,L)){I=!0,F=j;break}return H.jit&&(U().jitOffset[j]=L.matches.indexOf(H)),!0}}else if(e=B(e,O,t,n))return!0}else F++;var _,D}for(var n=0<O.length?O.shift():0;n<$.matches.length;n++)if(!0!==$.matches[n].isQuantifier){var i=M($.matches[n],[n].concat(e),t);if(i&&F===j)return i;if(j<F)break}}if(-1<j){if(e===oe){for(var a,l=j-1;(a=U().validPositions[l]||U().tests[l])===oe&&-1<l;)l--;a!==oe&&-1<l&&(n=l,i=a,o=[],ne.isArray(i)||(i=[i]),0<i.length&&(i[0].alternation===oe?0===(o=k(n,i.slice()).locator.slice()).length&&(o=i[0].locator.slice()):ne.each(i,function(e,t){if(""!==t.def)if(0===o.length)o=t.locator.slice();else for(var n=0;n<o.length;n++)t.locator[n]&&-1===o[n].toString().indexOf(t.locator[n])&&(o[n]+=","+t.locator[n])})),R=(s=o).join(""),F=l)}if(U().tests[j]&&U().tests[j][0].cd===R)return U().tests[j];for(var c=s.shift();c<r.length;c++){var u=B(r[c],s,[c]);if(u&&F===j||j<F)break}}return(0===q.length||I)&&q.push({match:{fn:null,optionality:!1,casing:null,def:"",placeholder:""},locator:[],mloc:{},cd:R}),e!==oe&&U().tests[j]?ne.extend(!0,[],q):(U().tests[j]=ne.extend(!0,[],q),U().tests[j])}function A(){return U()._buffer===oe&&(U()._buffer=h(!1,1),U().buffer===oe&&(U().buffer=U()._buffer.slice())),U()._buffer}function P(e){return U().buffer!==oe&&!0!==e||(U().buffer=h(!0,S(),!0),U()._buffer===oe&&(U()._buffer=U().buffer.slice())),U().buffer}function N(e,t,n){var i,o;if(!0===e)w(),e=0,t=n.length;else for(i=e;i<t;i++)delete U().validPositions[i];for(i=o=e;i<t;i++)if(w(!0),n[i]!==z.skipOptionalPartCharacter){var r=D(o,n[i],!0,!0);!1!==r&&(w(!0),o=r.caret!==oe?r.caret:r.pos+1)}}function L(e,t,n){for(var i,o=z.greedy?t:t.slice(0,1),r=!1,s=n!==oe?n.split(","):[],a=0;a<s.length;a++)-1!==(i=e.indexOf(s[a]))&&e.splice(i,1);for(var l=0;l<e.length;l++)if(-1!==ne.inArray(e[l],o)){r=!0;break}return r}function _(e,t,n,i,o){var r,s,a,l,c,u,d,p=ne.extend(!0,{},U().validPositions),f=!1,h=o!==oe?o:S();if(-1===h&&o===oe)l=T(r=0),s=l.alternation;else for(;0<=h;h--)if((a=U().validPositions[h])&&a.alternation!==oe){if(l&&l.locator[a.alternation]!==a.locator[a.alternation])break;r=h,s=U().validPositions[r].alternation,l=a}if(s!==oe){d=parseInt(r),U().excludes[d]=U().excludes[d]||[],!0!==e&&U().excludes[d].push(C(l));var m=[],g=0;for(c=d;c<S(oe,!0)+1;c++)(u=U().validPositions[c])&&!0!==u.generatedInput?m.push(u.input):c<e&&g++,delete U().validPositions[c];for(;U().excludes[d]&&U().excludes[d].length<10;){var v=-1*g,y=m.slice();for(U().tests[d]=oe,w(!0),f=!0;0<y.length;){var k=y.shift();if(!(f=D(S(oe,!0)+1,k,!1,i,!0)))break}if(f&&t!==oe){var b=S(e)+1;for(c=d;c<S()+1;c++)((u=U().validPositions[c])===oe||null==u.match.fn)&&c<e+v&&v++;f=D(b<(e+=v)?b:e,t,n,i,!0)}if(f)break;if(w(),l=T(d),U().validPositions=ne.extend(!0,{},p),!U().excludes[d]){f=_(e,t,n,i,d-1);break}var x=C(l);if(-1!==U().excludes[d].indexOf(x)){f=_(e,t,n,i,d-1);break}for(U().excludes[d].push(x),c=d;c<S(oe,!0)+1;c++)delete U().validPositions[c]}}return U().excludes[d]=oe,f}function D(c,e,t,u,n,i){function d(e){return v?1<e.begin-e.end||e.begin-e.end==1:1<e.end-e.begin||e.end-e.begin==1}t=!0===t;var o=c;function r(r,s,a){var l=!1;return ne.each(E(r),function(e,t){var n=t.match;if(P(!0),!1!==(l=null!=n.fn?n.fn.test(s,U(),r,a,z,d(c)):(s===n.def||s===z.skipOptionalPartCharacter)&&""!==n.def&&{c:q(r,n,!0)||n.def,pos:r})){var i=l.c!==oe?l.c:s,o=r;return i=i===z.skipOptionalPartCharacter&&null===n.fn?q(r,n,!0)||n.def:i,l.remove!==oe&&(ne.isArray(l.remove)||(l.remove=[l.remove]),ne.each(l.remove.sort(function(e,t){return t-e}),function(e,t){O({begin:t,end:t+1})})),l.insert!==oe&&(ne.isArray(l.insert)||(l.insert=[l.insert]),ne.each(l.insert.sort(function(e,t){return e-t}),function(e,t){D(t.pos,t.c,!0,u)})),!0!==l&&l.pos!==oe&&l.pos!==r&&(o=l.pos),!0!==l&&l.pos===oe&&l.c===oe||O(c,ne.extend({},t,{input:function(e,t,n){switch(z.casing||t.casing){case"upper":e=e.toUpperCase();break;case"lower":e=e.toLowerCase();break;case"title":var i=U().validPositions[n-1];e=0===n||i&&i.input===String.fromCharCode(ue.keyCode.SPACE)?e.toUpperCase():e.toLowerCase();break;default:if(ne.isFunction(z.casing)){var o=Array.prototype.slice.call(arguments);o.push(U().validPositions),e=z.casing.apply(this,o)}}return e}(i,n,o)}),u,o)||(l=!1),!1}}),l}c.begin!==oe&&(o=v?c.end:c.begin);var s=!0,a=ne.extend(!0,{},U().validPositions);if(ne.isFunction(z.preValidation)&&!t&&!0!==u&&!0!==i&&(s=z.preValidation(P(),o,e,d(c),z,U())),!0===s){if($(oe,o,!0),(g===oe||o<g)&&(s=r(o,e,t),(!t||!0===u)&&!1===s&&!0!==i)){var l=U().validPositions[o];if(!l||null!==l.match.fn||l.match.def!==e&&e!==z.skipOptionalPartCharacter){if((z.insertMode||U().validPositions[j(o)]===oe)&&(!M(o,!0)||U().jitOffset[o]))if(U().jitOffset[o]&&U().validPositions[j(o)]===oe)!1!==(s=D(o+U().jitOffset[o],e,t))&&(s.caret=o);else for(var p=o+1,f=j(o);p<=f;p++)if(!1!==(s=r(p,e,t))){s=$(o,s.pos!==oe?s.pos:p)||s,o=p;break}}else s={caret:j(o)}}!1!==s||!1===z.keepStatic||null!=z.regex&&!X(P())||t||!0===n||(s=_(o,e,t,u)),!0===s&&(s={pos:o})}if(ne.isFunction(z.postValidation)&&!1!==s&&!t&&!0!==u&&!0!==i){var h=z.postValidation(P(!0),c.begin!==oe?v?c.end:c.begin:c,s,z);if(h!==oe){if(h.refreshFromBuffer&&h.buffer){var m=h.refreshFromBuffer;N(!0===m?m:m.start,m.end,h.buffer)}s=!0===h?s:h}}return s&&s.pos===oe&&(s.pos=o),!1!==s&&!0!==i||(w(!0),U().validPositions=ne.extend(!0,{},a)),s}function $(e,t,n){var i;if(e===oe)for(e=t-1;0<e&&!U().validPositions[e];e--);for(var o=e;o<t;o++)if(U().validPositions[o]===oe&&!M(o,!0)){var r=0==o?T(o):U().validPositions[o-1];if(r){var s=E(o).slice();""===s[s.length-1].match.def&&s.pop();var a=k(o,s);if((a=ne.extend({},a,{input:q(o,a.match,!0)||a.match.def})).generatedInput=!0,O(o,a,!0),!0!==n){var l=U().validPositions[t].input;U().validPositions[t]=oe,i=D(t,l,!0,!0)}}}return i}function O(e,t,n,i){function o(e,t,n){var i=t[e];if(i===oe||(null!==i.match.fn||!0===i.match.optionality)&&i.input!==z.radixPoint)return!1;var o=n.begin<=e-1?t[e-1]&&null===t[e-1].match.fn&&t[e-1]:t[e-1],r=n.end>e+1?t[e+1]&&null===t[e+1].match.fn&&t[e+1]:t[e+1];return o&&r}var r=e.begin!==oe?e.begin:e,s=e.end!==oe?e.end:e;if(e.begin>e.end&&(r=e.end,s=e.begin),i=i!==oe?i:r,r!==s||z.insertMode&&U().validPositions[i]!==oe&&n===oe){var a=ne.extend(!0,{},U().validPositions),l=S(oe,!0);for(U().p=r,f=l;r<=f;f--)U().validPositions[f]&&"+"===U().validPositions[f].match.nativeDef&&(z.isNegative=!1),delete U().validPositions[f];var c=!0,u=i,d=(U().validPositions,!1),p=u,f=u;for(t&&(U().validPositions[i]=ne.extend(!0,{},t),p++,u++,r<s&&f++);f<=l;f++){var h=a[f];if(h!==oe&&(s<=f||r<=f&&!0!==h.generatedInput&&o(f,a,{begin:r,end:s}))){for(;""!==T(p).match.def;){if(!1===d&&a[p]&&a[p].match.nativeDef===h.match.nativeDef)U().validPositions[p]=ne.extend(!0,{},a[p]),U().validPositions[p].input=h.input,$(oe,p,!0),u=p+1,c=!0;else if(z.shiftPositions&&x(p,h.match.def)){var m=D(p,h.input,!0,!0);c=!1!==m,u=m.caret||m.insert?S():p+1,d=!0}else c=!0===h.generatedInput||h.input===z.radixPoint&&!0===z.numericInput;if(c)break;if(!c&&s<p&&M(p,!0)&&(null!==h.match.fn||p>U().maskLength))break;p++}""==T(p).match.def&&(c=!1),p=u}if(!c)break}if(!c)return U().validPositions=ne.extend(!0,{},a),w(!0),!1}else t&&(U().validPositions[i]=ne.extend(!0,{},t));return w(!0),!0}function M(e,t){var n=b(e).match;if(""===n.def&&(n=T(e).match),null!=n.fn)return n.fn;if(!0!==t&&-1<e){var i=E(e);return i.length>1+(""===i[i.length-1].match.def?1:0)}return!1}function j(e,t){for(var n=e+1;""!==T(n).match.def&&(!0===t&&(!0!==T(n).match.newBlockMarker||!M(n))||!0!==t&&!M(n));)n++;return n}function H(e,t){var n,i=e;if(i<=0)return 0;for(;0<--i&&(!0===t&&!0!==T(i).match.newBlockMarker||!0!==t&&!M(i)&&((n=E(i)).length<2||2===n.length&&""===n[1].match.def)););return i}function F(e,t,n,i,o){if(i&&ne.isFunction(z.onBeforeWrite)){var r=z.onBeforeWrite.call(c,i,t,n,z);if(r){if(r.refreshFromBuffer){var s=r.refreshFromBuffer;N(!0===s?s:s.start,s.end,r.buffer||t),t=P(!0)}n!==oe&&(n=r.caret!==oe?r.caret:n)}}if(e!==oe&&(e.inputmask._valueSet(t.join("")),n===oe||i!==oe&&"blur"===i.type?Q(e,n,0===t.length):W(e,n),!0===o)){var a=ne(e),l=e.inputmask._valueGet();d=!0,a.trigger("input"),setTimeout(function(){l===A().join("")?a.trigger("cleared"):!0===X(t)&&a.trigger("complete")},0)}}function q(e,t,n){if((t=t||T(e).match).placeholder!==oe||!0===n)return ne.isFunction(t.placeholder)?t.placeholder(z):t.placeholder;if(null!==t.fn)return z.placeholder.charAt(e%z.placeholder.length);if(-1<e&&U().validPositions[e]===oe){var i,o=E(e),r=[];if(o.length>1+(""===o[o.length-1].match.def?1:0))for(var s=0;s<o.length;s++)if(!0!==o[s].match.optionality&&!0!==o[s].match.optionalQuantifier&&(null===o[s].match.fn||i===oe||!1!==o[s].match.fn.test(i.match.def,U(),e,!0,z))&&(r.push(o[s]),null===o[s].match.fn&&(i=o[s]),1<r.length&&/[0-9a-bA-Z]/.test(r[0].match.def)))return z.placeholder.charAt(e%z.placeholder.length)}return t.def}function o(e,t){if(se){if(e.inputmask._valueGet()!==t&&(e.placeholder!==t||""===e.placeholder)){var n=P().slice(),i=e.inputmask._valueGet();if(i!==t){var o=S();-1===o&&i===A().join("")?n=[]:-1!==o&&G(n),F(e,n)}}}else e.placeholder!==t&&(e.placeholder=t,""===e.placeholder&&e.removeAttribute("placeholder"))}var i,I={on:function(e,t,r){var n=function(e){var t=this;if(t.inputmask===oe&&"FORM"!==this.nodeName){var n=ne.data(t,"_inputmask_opts");n?new ue(n).mask(t):I.off(t)}else{if("setvalue"===e.type||"FORM"===this.nodeName||!(t.disabled||t.readOnly&&!("keydown"===e.type&&e.ctrlKey&&67===e.keyCode||!1===z.tabThrough&&e.keyCode===ue.keyCode.TAB))){switch(e.type){case"input":if(!0===d)return d=!1,e.preventDefault();if(ae){var i=arguments;return setTimeout(function(){r.apply(t,i),W(t,t.inputmask.caretPos,oe,!0)},0),!1}break;case"keydown":d=a=!1;break;case"keypress":if(!0===a)return e.preventDefault();a=!0;break;case"click":if(le||ce){var i=arguments;return setTimeout(function(){r.apply(t,i)},0),!1}}var o=r.apply(t,arguments);return!1===o&&(e.preventDefault(),e.stopPropagation()),o}e.preventDefault()}};e.inputmask.events[t]=e.inputmask.events[t]||[],e.inputmask.events[t].push(n),-1!==ne.inArray(t,["submit","reset"])?null!==e.form&&ne(e.form).on(t,n):ne(e).on(t,n)},off:function(i,e){var t;i.inputmask&&i.inputmask.events&&(e?(t=[])[e]=i.inputmask.events[e]:t=i.inputmask.events,ne.each(t,function(e,t){for(;0<t.length;){var n=t.pop();-1!==ne.inArray(e,["submit","reset"])?null!==i.form&&ne(i.form).off(e,n):ne(i).off(e,n)}delete i.inputmask.events[e]}))}},R={keydownEvent:function(e){var t=this,n=ne(t),i=e.keyCode,o=W(t);if(i===ue.keyCode.BACKSPACE||i===ue.keyCode.DELETE||ce&&i===ue.keyCode.BACKSPACE_SAFARI||e.ctrlKey&&i===ue.keyCode.X&&!de("cut"))e.preventDefault(),K(0,i,o),F(t,P(!0),U().p,e,t.inputmask._valueGet()!==P().join(""));else if(i===ue.keyCode.END||i===ue.keyCode.PAGE_DOWN){e.preventDefault();var r=j(S());W(t,e.shiftKey?o.begin:r,r,!0)}else i===ue.keyCode.HOME&&!e.shiftKey||i===ue.keyCode.PAGE_UP?(e.preventDefault(),W(t,0,e.shiftKey?o.begin:0,!0)):(z.undoOnEscape&&i===ue.keyCode.ESCAPE||90===i&&e.ctrlKey)&&!0!==e.altKey?(B(t,!0,!1,m.split("")),n.trigger("click")):i!==ue.keyCode.INSERT||e.shiftKey||e.ctrlKey?!0===z.tabThrough&&i===ue.keyCode.TAB&&(!0===e.shiftKey?(null===T(o.begin).match.fn&&(o.begin=j(o.begin)),o.end=H(o.begin,!0),o.begin=H(o.end,!0)):(o.begin=j(o.begin,!0),o.end=j(o.begin,!0),o.end<U().maskLength&&o.end--),o.begin<U().maskLength&&(e.preventDefault(),W(t,o.begin,o.end))):(z.insertMode=!z.insertMode,t.setAttribute("im-insert",z.insertMode));z.onKeyDown.call(this,e,P(),W(t).begin,z),y=-1!==ne.inArray(i,z.ignorables)},keypressEvent:function(e,t,n,i,o){var r=this,s=ne(r),a=e.which||e.charCode||e.keyCode;if(!(!0===t||e.ctrlKey&&e.altKey)&&(e.ctrlKey||e.metaKey||y))return a===ue.keyCode.ENTER&&m!==P().join("")&&(m=P().join(""),setTimeout(function(){s.trigger("change")},0)),!0;if(a){46===a&&!1===e.shiftKey&&""!==z.radixPoint&&(a=z.radixPoint.charCodeAt(0));var l,c=t?{begin:o,end:o}:W(r),u=String.fromCharCode(a),d=0;if(z._radixDance&&z.numericInput){var p=P().indexOf(z.radixPoint.charAt(0))+1;c.begin<=p&&(a===z.radixPoint.charCodeAt(0)&&(d=1),c.begin-=1,c.end-=1)}U().writeOutBuffer=!0;var f=D(c,u,i);if(!1!==f&&(w(!0),l=f.caret!==oe?f.caret:j(f.pos.begin?f.pos.begin:f.pos),U().p=l),l=(z.numericInput&&f.caret===oe?H(l):l)+d,!1!==n&&(setTimeout(function(){z.onKeyValidation.call(r,a,f,z)},0),U().writeOutBuffer&&!1!==f)){var h=P();F(r,h,l,e,!0!==t)}if(e.preventDefault(),t)return!1!==f&&(f.forwardPosition=l),f}},pasteEvent:function(e){var t,n=this,i=e.originalEvent||e,o=(ne(n),n.inputmask._valueGet(!0)),r=W(n);v&&(t=r.end,r.end=r.begin,r.begin=t);var s=o.substr(0,r.begin),a=o.substr(r.end,o.length);if(s===(v?A().reverse():A()).slice(0,r.begin).join("")&&(s=""),a===(v?A().reverse():A()).slice(r.end).join("")&&(a=""),ie.clipboardData&&ie.clipboardData.getData)o=s+ie.clipboardData.getData("Text")+a;else{if(!i.clipboardData||!i.clipboardData.getData)return!0;o=s+i.clipboardData.getData("text/plain")+a}var l=o;if(ne.isFunction(z.onBeforePaste)){if(!1===(l=z.onBeforePaste.call(c,o,z)))return e.preventDefault();l||(l=o)}return B(n,!1,!1,l.toString().split("")),F(n,P(),j(S()),e,m!==P().join("")),e.preventDefault()},inputFallBackEvent:function(e){var t,n,i=this,o=i.inputmask._valueGet();if(P().join("")!==o){var r=W(i);if(o=function(e,t,n){if(le){var i=t.replace(P().join(""),"");if(1===i.length){var o=t.split("");o.splice(n.begin,0,i),t=o.join("")}}return t}(0,(n=r,"."===(t=o).charAt(n.begin-1)&&""!==z.radixPoint&&((t=t.split(""))[n.begin-1]=z.radixPoint.charAt(0),t=t.join("")),o=t),r),P().join("")!==o){var s=P().join(""),a=!z.numericInput&&o.length>s.length?-1:0,l=o.substr(0,r.begin),c=o.substr(r.begin),u=s.substr(0,r.begin+a),d=s.substr(r.begin+a),p=r,f="",h=!1;if(l!==u){var m,g=(h=l.length>=u.length)?l.length:u.length;for(m=0;l.charAt(m)===u.charAt(m)&&m<g;m++);h&&(p.begin=m-a,f+=l.slice(m,p.end))}if(c!==d&&(c.length>d.length?f+=c.slice(0,1):c.length<d.length&&(p.end+=d.length-c.length,h||""===z.radixPoint||""!==c||l.charAt(p.begin+a-1)!==z.radixPoint||(p.begin--,f=z.radixPoint))),F(i,P(),{begin:p.begin+a,end:p.end+a}),0<f.length)ne.each(f.split(""),function(e,t){var n=new ne.Event("keypress");n.which=t.charCodeAt(0),y=!1,R.keypressEvent.call(i,n)});else{p.begin===p.end-1&&(p.begin=H(p.begin+1),p.begin===p.end-1?W(i,p.begin):W(i,p.begin,p.end));var v=new ne.Event("keydown");v.keyCode=z.numericInput?ue.keyCode.BACKSPACE:ue.keyCode.DELETE,R.keydownEvent.call(i,v)}e.preventDefault()}}},beforeInputEvent:function(e){if(e.cancelable){var i=this;switch(e.inputType){case"insertText":return ne.each(e.data.split(""),function(e,t){var n=new ne.Event("keypress");n.which=t.charCodeAt(0),y=!1,R.keypressEvent.call(i,n)}),e.preventDefault();case"deleteContentBackward":var t=new ne.Event("keydown");return t.keyCode=ue.keyCode.BACKSPACE,R.keydownEvent.call(i,t),e.preventDefault();case"deleteContentForward":var t=new ne.Event("keydown");return t.keyCode=ue.keyCode.DELETE,R.keydownEvent.call(i,t),e.preventDefault()}}},setValueEvent:function(e){this.inputmask.refreshValue=!1;var t=e&&e.detail?e.detail[0]:arguments[1],t=t||this.inputmask._valueGet(!0);ne.isFunction(z.onBeforeMask)&&(t=z.onBeforeMask.call(c,t,z)||t),B(this,!0,!1,t=t.split("")),m=P().join(""),(z.clearMaskOnLostFocus||z.clearIncomplete)&&this.inputmask._valueGet()===A().join("")&&this.inputmask._valueSet("")},focusEvent:function(e){var t=this.inputmask._valueGet();z.showMaskOnFocus&&(t!==P().join("")?F(this,P(),j(S())):!1===n&&W(this,j(S()))),!0===z.positionCaretOnTab&&!1===n&&R.clickEvent.apply(this,[e,!0]),m=P().join("")},mouseleaveEvent:function(e){n=!1,z.clearMaskOnLostFocus&&re.activeElement!==this&&o(this,s)},clickEvent:function(e,c){var u=this;setTimeout(function(){if(re.activeElement===u){var e=W(u);if(c&&(v?e.end=e.begin:e.begin=e.end),e.begin===e.end)switch(z.positionCaretOnClick){case"none":break;case"select":W(u,0,P().length);break;case"ignore":W(u,j(S()));break;case"radixFocus":if(function(e){if(""!==z.radixPoint){var t=U().validPositions;if(t[e]===oe||t[e].input===q(e)){if(e<j(-1))return!0;var n=ne.inArray(z.radixPoint,P());if(-1!==n){for(var i in t)if(n<i&&t[i].input!==q(i))return!1;return!0}}}return!1}(e.begin)){var t=P().join("").indexOf(z.radixPoint);W(u,z.numericInput?j(t):t);break}default:var n=e.begin,i=S(n,!0),o=j(i);if(n<o)W(u,M(n,!0)||M(n-1,!0)?n:j(n));else{var r=U().validPositions[i],s=b(o,r?r.match.locator:oe,r),a=q(o,s.match);if(""!==a&&P()[o]!==a&&!0!==s.match.optionalQuantifier&&!0!==s.match.newBlockMarker||!M(o,z.keepStatic)&&s.match.def===a){var l=j(o);(l<=n||n===o)&&(o=l)}W(u,o)}}}},0)},cutEvent:function(e){ne(this);var t=W(this),n=e.originalEvent||e,i=ie.clipboardData||n.clipboardData,o=v?P().slice(t.end,t.begin):P().slice(t.begin,t.end);i.setData("text",v?o.reverse().join(""):o.join("")),re.execCommand&&re.execCommand("copy"),K(0,ue.keyCode.DELETE,t),F(this,P(),U().p,e,m!==P().join(""))},blurEvent:function(e){var t=ne(this);if(this.inputmask){o(this,s);var n=this.inputmask._valueGet(),i=P().slice();""===n&&f===oe||(z.clearMaskOnLostFocus&&(-1===S()&&n===A().join("")?i=[]:G(i)),!1===X(i)&&(setTimeout(function(){t.trigger("incomplete")},0),z.clearIncomplete&&(w(),i=z.clearMaskOnLostFocus?[]:A().slice())),F(this,i,oe,e)),m!==P().join("")&&(m=i.join(""),t.trigger("change"))}},mouseenterEvent:function(e){n=!0,re.activeElement!==this&&z.showMaskOnHover&&o(this,(v?P().slice().reverse():P()).join(""))},submitEvent:function(e){m!==P().join("")&&r.trigger("change"),z.clearMaskOnLostFocus&&-1===S()&&u.inputmask._valueGet&&u.inputmask._valueGet()===A().join("")&&u.inputmask._valueSet(""),z.clearIncomplete&&!1===X(P())&&u.inputmask._valueSet(""),z.removeMaskOnSubmit&&(u.inputmask._valueSet(u.inputmask.unmaskedvalue(),!0),setTimeout(function(){F(u,P())},0))},resetEvent:function(e){u.inputmask.refreshValue=!0,setTimeout(function(){r.trigger("setvalue")},0)}};function B(s,e,a,t,n){var l=this||s.inputmask,c=t.slice(),u="",d=-1,p=oe;if(w(),a||!0===z.autoUnmask)d=j(d);else{var i=A().slice(0,j(-1)).join(""),o=c.join("").match(new RegExp("^"+ue.escapeRegex(i),"g"));o&&0<o.length&&(c.splice(0,o.length*i.length),d=j(d))}-1===d?(U().p=j(d),d=0):U().p=d,l.caretPos={begin:d},ne.each(c,function(e,t){if(t!==oe)if(U().validPositions[e]===oe&&c[e]===q(e)&&M(e,!0)&&!1===D(e,c[e],!0,oe,oe,!0))U().p++;else{var n=new ne.Event("_checkval");n.which=t.charCodeAt(0),u+=t;var i=S(oe,!0);o=d,r=u,-1===h(!0,0,!1).slice(o,j(o)).join("").replace(/'/g,"").indexOf(r)||M(o)||!(T(o).match.nativeDef===r.charAt(0)||null===T(o).match.fn&&T(o).match.nativeDef==="'"+r.charAt(0)||" "===T(o).match.nativeDef&&(T(o+1).match.nativeDef===r.charAt(0)||null===T(o+1).match.fn&&T(o+1).match.nativeDef==="'"+r.charAt(0)))?(p=R.keypressEvent.call(s,n,!0,!1,a,l.caretPos.begin))&&(d=l.caretPos.begin+1,u=""):p=R.keypressEvent.call(s,n,!0,!1,a,i+1),p&&(F(oe,P(),p.forwardPosition,n,!1),l.caretPos={begin:p.forwardPosition,end:p.forwardPosition})}var o,r}),e&&F(s,P(),p?p.forwardPosition:oe,n||new ne.Event("checkval"),n&&"input"===n.type)}function l(e){if(e){if(e.inputmask===oe)return e.value;e.inputmask&&e.inputmask.refreshValue&&R.setValueEvent.call(e)}var t=[],n=U().validPositions;for(var i in n)n[i].match&&null!=n[i].match.fn&&t.push(n[i].input);var o=0===t.length?"":(v?t.reverse():t).join("");if(ne.isFunction(z.onUnMask)){var r=(v?P().slice().reverse():P()).join("");o=z.onUnMask.call(c,r,o,z)}return o}function W(e,t,n,i){function o(e){return!v||"number"!=typeof e||z.greedy&&""===z.placeholder||!u||(e=u.inputmask._valueGet().length-e),e}var r;if(t===oe)return"selectionStart"in e?(t=e.selectionStart,n=e.selectionEnd):ie.getSelection?(r=ie.getSelection().getRangeAt(0)).commonAncestorContainer.parentNode!==e&&r.commonAncestorContainer!==e||(t=r.startOffset,n=r.endOffset):re.selection&&re.selection.createRange&&(r=re.selection.createRange(),t=0-r.duplicate().moveStart("character",-e.inputmask._valueGet().length),n=t+r.text.length),{begin:i?t:o(t),end:i?n:o(n)};if(ne.isArray(t)&&(n=v?t[0]:t[1],t=v?t[1]:t[0]),t.begin!==oe&&(n=v?t.begin:t.end,t=v?t.end:t.begin),"number"==typeof t){t=i?t:o(t),n="number"==typeof(n=i?n:o(n))?n:t;var s=parseInt(((e.ownerDocument.defaultView||ie).getComputedStyle?(e.ownerDocument.defaultView||ie).getComputedStyle(e,null):e.currentStyle).fontSize)*n;if(e.scrollLeft=s>e.scrollWidth?s:0,e.inputmask.caretPos={begin:t,end:n},e===re.activeElement){if("selectionStart"in e)e.selectionStart=t,e.selectionEnd=n;else if(ie.getSelection){if(r=re.createRange(),e.firstChild===oe||null===e.firstChild){var a=re.createTextNode("");e.appendChild(a)}r.setStart(e.firstChild,t<e.inputmask._valueGet().length?t:e.inputmask._valueGet().length),r.setEnd(e.firstChild,n<e.inputmask._valueGet().length?n:e.inputmask._valueGet().length),r.collapse(!0);var l=ie.getSelection();l.removeAllRanges(),l.addRange(r)}else e.createTextRange&&((r=e.createTextRange()).collapse(!0),r.moveEnd("character",n),r.moveStart("character",t),r.select());Q(e,{begin:t,end:n})}}}function V(e){var t,n,i=h(!0,S(),!0,!0),o=i.length,r=S(),s={},a=U().validPositions[r],l=a!==oe?a.locator.slice():oe;for(t=r+1;t<i.length;t++)n=b(t,l,t-1),l=n.locator.slice(),s[t]=ne.extend(!0,{},n);var c=a&&a.alternation!==oe?a.locator[a.alternation]:oe;for(t=o-1;r<t&&((n=s[t]).match.optionality||n.match.optionalQuantifier&&n.match.newBlockMarker||c&&(c!==s[t].locator[a.alternation]&&null!=n.match.fn||null===n.match.fn&&n.locator[a.alternation]&&L(n.locator[a.alternation].toString().split(","),c.toString().split(","))&&""!==E(t)[0].def))&&i[t]===q(t,n.match);t--)o--;return e?{l:o,def:s[o]?s[o].match:oe}:o}function G(e){for(var t,n=h(!(e.length=0),0,!0,oe,!0);(t=n.shift())!==oe;)e.push(t);return e}function X(e){if(ne.isFunction(z.isComplete))return z.isComplete(e,z);if("*"===z.repeat)return oe;var t=!1,n=V(!0),i=H(n.l);if(n.def===oe||n.def.newBlockMarker||n.def.optionality||n.def.optionalQuantifier){t=!0;for(var o=0;o<=i;o++){var r=b(o).match;if(null!==r.fn&&U().validPositions[o]===oe&&!0!==r.optionality&&!0!==r.optionalQuantifier||null===r.fn&&e[o]!==q(o,r)){t=!1;break}}}return t}function K(e,t,n,i,o){if((z.numericInput||v)&&(t===ue.keyCode.BACKSPACE?t=ue.keyCode.DELETE:t===ue.keyCode.DELETE&&(t=ue.keyCode.BACKSPACE),v)){var r=n.end;n.end=n.begin,n.begin=r}if(t===ue.keyCode.BACKSPACE&&n.end-n.begin<1?(n.begin=H(n.begin),U().validPositions[n.begin]!==oe&&U().validPositions[n.begin].input===z.groupSeparator&&n.begin--):t===ue.keyCode.DELETE&&n.begin===n.end&&(n.end=M(n.end,!0)&&U().validPositions[n.end]&&U().validPositions[n.end].input!==z.radixPoint?n.end+1:j(n.end)+1,U().validPositions[n.begin]!==oe&&U().validPositions[n.begin].input===z.groupSeparator&&n.end++),O(n),!0!==i&&!1!==z.keepStatic||null!==z.regex){var s=_(!0);if(s){var a=s.caret!==oe?s.caret:s.pos?j(s.pos.begin?s.pos.begin:s.pos):S(-1,!0);(t!==ue.keyCode.DELETE||n.begin>a)&&n.begin}}var l=S(n.begin,!0);if(l<n.begin||-1===n.begin)U().p=j(l);else if(!0!==i&&(U().p=n.begin,!0!==o))for(;U().p<l&&U().validPositions[U().p]===oe;)U().p++}function Y(c){var u=(c.ownerDocument.defaultView||ie).getComputedStyle(c,null),e=re.createElement("div");e.style.width=u.width,e.style.textAlign=u.textAlign,f=re.createElement("div"),(c.inputmask.colorMask=f).className="im-colormask",c.parentNode.insertBefore(f,c),c.parentNode.removeChild(c),f.appendChild(c),f.appendChild(e),c.style.left=e.offsetLeft+"px",ne(f).on("mouseleave",function(e){return R.mouseleaveEvent.call(c,[e])}),ne(f).on("mouseenter",function(e){return R.mouseenterEvent.call(c,[e])}),ne(f).on("click",function(e){return W(c,function(e){var t,n=re.createElement("span");for(var i in u)isNaN(i)&&-1!==i.indexOf("font")&&(n.style[i]=u[i]);n.style.textTransform=u.textTransform,n.style.letterSpacing=u.letterSpacing,n.style.position="absolute",n.style.height="auto",n.style.width="auto",n.style.visibility="hidden",n.style.whiteSpace="nowrap",re.body.appendChild(n);var o,r=c.inputmask._valueGet(),s=0;for(t=0,o=r.length;t<=o;t++){if(n.innerHTML+=r.charAt(t)||"_",n.offsetWidth>=e){var a=e-s,l=n.offsetWidth-e;n.innerHTML=r.charAt(t),a-=n.offsetWidth/3,t=a<l?t-1:t;break}s=n.offsetWidth}return re.body.removeChild(n),t}(e.clientX)),R.clickEvent.call(c,[e])})}function Q(e,t,n){var i,o,r,s=[],a=!1,l=0;function c(e){if(e===oe&&(e=""),a||null!==i.fn&&o.input!==oe)if(a&&(null!==i.fn&&o.input!==oe||""===i.def)){a=!1;var t=s.length;s[t-1]=s[t-1]+"</span>",s.push(e)}else s.push(e);else a=!0,s.push("<span class='im-static'>"+e)}if(f!==oe){var u=P();if(t===oe?t=W(e):t.begin===oe&&(t={begin:t,end:t}),!0!==n){for(var d=S();U().validPositions[l]?(o=U().validPositions[l],i=o.match,r=o.locator.slice(),c(u[l])):(o=b(l,r,l-1),i=o.match,r=o.locator.slice(),!1===z.jitMasking||l<d||"number"==typeof z.jitMasking&&isFinite(z.jitMasking)&&z.jitMasking>l?c(q(l,i)):a=!1),l++,(g===oe||l<g)&&(null!==i.fn||""!==i.def)||l<d||a;);a&&c(),re.activeElement===e&&(s.splice(t.begin,0,t.begin===t.end||t.end>U().maskLength?'<mark class="im-caret" style="border-right-width: 1px;border-right-style: solid;">':'<mark class="im-caret-select">'),s.splice(t.end+1,0,"</mark>"))}var p=f.getElementsByTagName("div")[0];p.innerHTML=s.join(""),e.inputmask.positionColorMask(e,p)}}if(ue.prototype.positionColorMask=function(e,t){e.style.left=t.offsetLeft+"px"},e!==oe)switch(e.action){case"isComplete":return u=e.el,X(P());case"unmaskedvalue":return u!==oe&&e.value===oe||(i=e.value,i=(ne.isFunction(z.onBeforeMask)&&z.onBeforeMask.call(c,i,z)||i).split(""),B.call(this,oe,!1,!1,i),ne.isFunction(z.onBeforeWrite)&&z.onBeforeWrite.call(c,oe,P(),0,z)),l(u);case"mask":!function(e){function t(e,l){function t(e){var t,n,i;function o(e){if(ne.valHooks&&(ne.valHooks[e]===oe||!0!==ne.valHooks[e].inputmaskpatch)){var n=ne.valHooks[e]&&ne.valHooks[e].get?ne.valHooks[e].get:function(e){return e.value},o=ne.valHooks[e]&&ne.valHooks[e].set?ne.valHooks[e].set:function(e,t){return e.value=t,e};ne.valHooks[e]={get:function(e){if(e.inputmask){if(e.inputmask.opts.autoUnmask)return e.inputmask.unmaskedvalue();var t=n(e);return-1!==S(oe,oe,e.inputmask.maskset.validPositions)||!0!==l.nullable?t:""}return n(e)},set:function(e,t){var n,i=ne(e);return n=o(e,t),e.inputmask&&i.trigger("setvalue",[t]),n},inputmaskpatch:!0}}}function r(){return this.inputmask?this.inputmask.opts.autoUnmask?this.inputmask.unmaskedvalue():-1!==S()||!0!==l.nullable?re.activeElement===this&&l.clearMaskOnLostFocus?(v?G(P().slice()).reverse():G(P().slice())).join(""):t.call(this):"":t.call(this)}function s(e){n.call(this,e),this.inputmask&&ne(this).trigger("setvalue",[e])}if(!e.inputmask.__valueGet){if(!0!==l.noValuePatching){if(Object.getOwnPropertyDescriptor){"function"!=typeof Object.getPrototypeOf&&(Object.getPrototypeOf="object"===fe("test".__proto__)?function(e){return e.__proto__}:function(e){return e.constructor.prototype});var a=Object.getPrototypeOf?Object.getOwnPropertyDescriptor(Object.getPrototypeOf(e),"value"):oe;a&&a.get&&a.set?(t=a.get,n=a.set,Object.defineProperty(e,"value",{get:r,set:s,configurable:!0})):"INPUT"!==e.tagName&&(t=function(){return this.textContent},n=function(e){this.textContent=e},Object.defineProperty(e,"value",{get:r,set:s,configurable:!0}))}else re.__lookupGetter__&&e.__lookupGetter__("value")&&(t=e.__lookupGetter__("value"),n=e.__lookupSetter__("value"),e.__defineGetter__("value",r),e.__defineSetter__("value",s));e.inputmask.__valueGet=t,e.inputmask.__valueSet=n}e.inputmask._valueGet=function(e){return v&&!0!==e?t.call(this.el).split("").reverse().join(""):t.call(this.el)},e.inputmask._valueSet=function(e,t){n.call(this.el,null===e||e===oe?"":!0!==t&&v?e.split("").reverse().join(""):e)},t===oe&&(t=function(){return this.value},n=function(e){this.value=e},o(e.type),i=e,I.on(i,"mouseenter",function(e){var t=ne(this),n=this.inputmask._valueGet();n!==P().join("")&&t.trigger("setvalue")}))}}var n=e.getAttribute("type"),i="INPUT"===e.tagName&&-1!==ne.inArray(n,l.supportsInputType)||e.isContentEditable||"TEXTAREA"===e.tagName;if(!i)if("INPUT"===e.tagName){var o=re.createElement("input");o.setAttribute("type",n),i="text"===o.type,o=null}else i="partial";return!1!==i?t(e):e.inputmask=oe,i}I.off(e);var n=t(e,z);if(!1!==n&&(r=ne(u=e),s=u.placeholder,-1===(g=u!==oe?u.maxLength:oe)&&(g=oe),!0===z.colorMask&&Y(u),ae&&("inputmode"in u&&(u.inputmode=z.inputmode,u.setAttribute("inputmode",z.inputmode)),!0===z.disablePredictiveText&&("autocorrect"in u?u.autocorrect=!1:(!0!==z.colorMask&&Y(u),u.type="password"))),!0===n&&(u.setAttribute("im-insert",z.insertMode),I.on(u,"submit",R.submitEvent),I.on(u,"reset",R.resetEvent),I.on(u,"blur",R.blurEvent),I.on(u,"focus",R.focusEvent),!0!==z.colorMask&&(I.on(u,"click",R.clickEvent),I.on(u,"mouseleave",R.mouseleaveEvent),I.on(u,"mouseenter",R.mouseenterEvent)),I.on(u,"paste",R.pasteEvent),I.on(u,"cut",R.cutEvent),I.on(u,"complete",z.oncomplete),I.on(u,"incomplete",z.onincomplete),I.on(u,"cleared",z.oncleared),ae||!0===z.inputEventOnly?u.removeAttribute("maxLength"):(I.on(u,"keydown",R.keydownEvent),I.on(u,"keypress",R.keypressEvent)),I.on(u,"input",R.inputFallBackEvent),I.on(u,"beforeinput",R.beforeInputEvent)),I.on(u,"setvalue",R.setValueEvent),m=A().join(""),""!==u.inputmask._valueGet(!0)||!1===z.clearMaskOnLostFocus||re.activeElement===u)){var i=ne.isFunction(z.onBeforeMask)&&z.onBeforeMask.call(c,u.inputmask._valueGet(!0),z)||u.inputmask._valueGet(!0);""!==i&&B(u,!0,!1,i.split(""));var o=P().slice();m=o.join(""),!1===X(o)&&z.clearIncomplete&&w(),z.clearMaskOnLostFocus&&re.activeElement!==u&&(-1===S()?o=[]:G(o)),(!1===z.clearMaskOnLostFocus||z.showMaskOnFocus&&re.activeElement===u||""!==u.inputmask._valueGet(!0))&&F(u,o),re.activeElement===u&&W(u,j(S()))}}(u);break;case"format":return i=(ne.isFunction(z.onBeforeMask)&&z.onBeforeMask.call(c,e.value,z)||e.value).split(""),B.call(this,oe,!0,!1,i),e.metadata?{value:v?P().slice().reverse().join(""):P().join(""),metadata:pe.call(this,{action:"getmetadata"},t,z)}:v?P().slice().reverse().join(""):P().join("");case"isValid":e.value?(i=e.value.split(""),B.call(this,oe,!0,!0,i)):e.value=P().join("");for(var J=P(),Z=V(),ee=J.length-1;Z<ee&&!M(ee);ee--);return J.splice(Z,ee+1-Z),X(J)&&e.value===P().join("");case"getemptymask":return A().join("");case"remove":return u&&u.inputmask&&(ne.data(u,"_inputmask_opts",null),r=ne(u),u.inputmask._valueSet(z.autoUnmask?l(u):u.inputmask._valueGet(!0)),I.off(u),u.inputmask.colorMask&&((f=u.inputmask.colorMask).removeChild(u),f.parentNode.insertBefore(u,f),f.parentNode.removeChild(f)),Object.getOwnPropertyDescriptor&&Object.getPrototypeOf?Object.getOwnPropertyDescriptor(Object.getPrototypeOf(u),"value")&&u.inputmask.__valueGet&&Object.defineProperty(u,"value",{get:u.inputmask.__valueGet,set:u.inputmask.__valueSet,configurable:!0}):re.__lookupGetter__&&u.__lookupGetter__("value")&&u.inputmask.__valueGet&&(u.__defineGetter__("value",u.inputmask.__valueGet),u.__defineSetter__("value",u.inputmask.__valueSet)),u.inputmask=oe),u;case"getmetadata":if(ne.isArray(t.metadata)){var te=h(!0,0,!1).join("");return ne.each(t.metadata,function(e,t){if(t.mask===te)return te=t,!1}),te}return t.metadata}}return ue.prototype={dataAttribute:"data-inputmask",defaults:{placeholder:"_",optionalmarker:["[","]"],quantifiermarker:["{","}"],groupmarker:["(",")"],alternatormarker:"|",escapeChar:"\\",mask:null,regex:null,oncomplete:ne.noop,onincomplete:ne.noop,oncleared:ne.noop,repeat:0,greedy:!1,autoUnmask:!1,removeMaskOnSubmit:!1,clearMaskOnLostFocus:!0,insertMode:!0,clearIncomplete:!1,alias:null,onKeyDown:ne.noop,onBeforeMask:null,onBeforePaste:function(e,t){return ne.isFunction(t.onBeforeMask)?t.onBeforeMask.call(this,e,t):e},onBeforeWrite:null,onUnMask:null,showMaskOnFocus:!0,showMaskOnHover:!0,onKeyValidation:ne.noop,skipOptionalPartCharacter:" ",numericInput:!1,rightAlign:!1,undoOnEscape:!0,radixPoint:"",_radixDance:!1,groupSeparator:"",keepStatic:null,positionCaretOnTab:!0,tabThrough:!1,supportsInputType:["text","tel","url","password","search"],ignorables:[8,9,13,19,27,33,34,35,36,37,38,39,40,45,46,93,112,113,114,115,116,117,118,119,120,121,122,123,0,229],isComplete:null,preValidation:null,postValidation:null,staticDefinitionSymbol:oe,jitMasking:!1,nullable:!0,inputEventOnly:!1,noValuePatching:!1,positionCaretOnClick:"lvp",casing:null,inputmode:"verbatim",colorMask:!1,disablePredictiveText:!1,importDataAttributes:!0,shiftPositions:!0},definitions:{9:{validator:"[0-9１-９]",definitionSymbol:"*"},a:{validator:"[A-Za-zА-яЁёÀ-ÿµ]",definitionSymbol:"*"},"*":{validator:"[0-9１-９A-Za-zА-яЁёÀ-ÿµ]"}},aliases:{},masksCache:{},mask:function(e){var o=this;return"string"==typeof e&&(e=re.getElementById(e)||re.querySelectorAll(e)),e=e.nodeName?[e]:e,ne.each(e,function(e,t){var n=ne.extend(!0,{},o.opts);if(function(n,e,i,o){if(!0===e.importDataAttributes){var t,r,s,a,l=function(e,t){null!==(t=t!==oe?t:n.getAttribute(o+"-"+e))&&("string"==typeof t&&(0===e.indexOf("on")?t=ie[t]:"false"===t?t=!1:"true"===t&&(t=!0)),i[e]=t)},c=n.getAttribute(o);if(c&&""!==c&&(c=c.replace(/'/g,'"'),r=JSON.parse("{"+c+"}")),r)for(a in s=oe,r)if("alias"===a.toLowerCase()){s=r[a];break}for(t in l("alias",s),i.alias&&u(i.alias,i,e),e){if(r)for(a in s=oe,r)if(a.toLowerCase()===t.toLowerCase()){s=r[a];break}l(t,s)}}return ne.extend(!0,e,i),("rtl"===n.dir||e.rightAlign)&&(n.style.textAlign="right"),("rtl"===n.dir||e.numericInput)&&(n.dir="ltr",n.removeAttribute("dir"),e.isRTL=!0),Object.keys(i).length}(t,n,ne.extend(!0,{},o.userOptions),o.dataAttribute)){var i=r(n,o.noMasksCache);i!==oe&&(t.inputmask!==oe&&(t.inputmask.opts.autoUnmask=!0,t.inputmask.remove()),t.inputmask=new ue(oe,oe,!0),t.inputmask.opts=n,t.inputmask.noMasksCache=o.noMasksCache,t.inputmask.userOptions=ne.extend(!0,{},o.userOptions),t.inputmask.isRTL=n.isRTL||n.numericInput,(t.inputmask.el=t).inputmask.maskset=i,ne.data(t,"_inputmask_opts",n),pe.call(t.inputmask,{action:"mask"}))}}),e&&e[0]&&e[0].inputmask||this},option:function(e,t){return"string"==typeof e?this.opts[e]:"object"===(void 0===e?"undefined":fe(e))?(ne.extend(this.userOptions,e),this.el&&!0!==t&&this.mask(this.el),this):void 0},unmaskedvalue:function(e){return this.maskset=this.maskset||r(this.opts,this.noMasksCache),pe.call(this,{action:"unmaskedvalue",value:e})},remove:function(){return pe.call(this,{action:"remove"})},getemptymask:function(){return this.maskset=this.maskset||r(this.opts,this.noMasksCache),pe.call(this,{action:"getemptymask"})},hasMaskedValue:function(){return!this.opts.autoUnmask},isComplete:function(){return this.maskset=this.maskset||r(this.opts,this.noMasksCache),pe.call(this,{action:"isComplete"})},getmetadata:function(){return this.maskset=this.maskset||r(this.opts,this.noMasksCache),pe.call(this,{action:"getmetadata"})},isValid:function(e){return this.maskset=this.maskset||r(this.opts,this.noMasksCache),pe.call(this,{action:"isValid",value:e})},format:function(e,t){return this.maskset=this.maskset||r(this.opts,this.noMasksCache),pe.call(this,{action:"format",value:e,metadata:t})},setValue:function(e){this.el&&ne(this.el).trigger("setvalue",[e])},analyseMask:function(e,r,s){var t,n,i,o,a,l,c=/(?:[?*+]|\{[0-9\+\*]+(?:,[0-9\+\*]*)?(?:\|[0-9\+\*]*)?\})|[^.?*+^${[]()|\\]+|./g,u=/\[\^?]?(?:[^\\\]]+|\\[\S\s]?)*]?|\\(?:0(?:[0-3][0-7]{0,2}|[4-7][0-7]?)?|[1-9][0-9]*|x[0-9A-Fa-f]{2}|u[0-9A-Fa-f]{4}|c[A-Za-z]|[\S\s]?)|\((?:\?[:=!]?)?|(?:[?*+]|\{[0-9]+(?:,[0-9]*)?\})\??|[^.?*+^${[()|\\]+|./g,d=!1,p=new m,f=[],h=[];function m(e,t,n,i){this.matches=[],this.openGroup=e||!1,this.alternatorGroup=!1,this.isGroup=e||!1,this.isOptional=t||!1,this.isQuantifier=n||!1,this.isAlternator=i||!1,this.quantifier={min:1,max:1}}function g(n,e,i){i=i!==oe?i:n.matches.length;var o=n.matches[i-1];if(r)0===e.indexOf("[")||d&&/\\d|\\s|\\w]/i.test(e)||"."===e?n.matches.splice(i++,0,{fn:new RegExp(e,s.casing?"i":""),optionality:!1,newBlockMarker:o===oe?"master":o.def!==e,casing:null,def:e,placeholder:oe,nativeDef:e}):(d&&(e=e[e.length-1]),ne.each(e.split(""),function(e,t){o=n.matches[i-1],n.matches.splice(i++,0,{fn:null,optionality:!1,newBlockMarker:o===oe?"master":o.def!==t&&null!==o.fn,casing:null,def:s.staticDefinitionSymbol||t,placeholder:s.staticDefinitionSymbol!==oe?t:oe,nativeDef:(d?"'":"")+t})})),d=!1;else{var t=(s.definitions?s.definitions[e]:oe)||ue.prototype.definitions[e];t&&!d?n.matches.splice(i++,0,{fn:t.validator?"string"==typeof t.validator?new RegExp(t.validator,s.casing?"i":""):new function(){this.test=t.validator}:new RegExp("."),optionality:!1,newBlockMarker:o===oe?"master":o.def!==(t.definitionSymbol||e),casing:t.casing,def:t.definitionSymbol||e,placeholder:t.placeholder,nativeDef:e}):(n.matches.splice(i++,0,{fn:null,optionality:!1,newBlockMarker:o===oe?"master":o.def!==e&&null!==o.fn,casing:null,def:s.staticDefinitionSymbol||e,placeholder:s.staticDefinitionSymbol!==oe?e:oe,nativeDef:(d?"'":"")+e}),d=!1)}}function v(){if(0<f.length){if(g(o=f[f.length-1],n),o.isAlternator){a=f.pop();for(var e=0;e<a.matches.length;e++)a.matches[e].isGroup&&(a.matches[e].isGroup=!1);0<f.length?(o=f[f.length-1]).matches.push(a):p.matches.push(a)}}else g(p,n)}function y(e){var t=new m(!0);return t.openGroup=!1,t.matches=e,t}for(r&&(s.optionalmarker[0]=oe,s.optionalmarker[1]=oe);t=r?u.exec(e):c.exec(e);){if(n=t[0],r)switch(n.charAt(0)){case"?":n="{0,1}";break;case"+":case"*":n="{"+n+"}"}if(d)v();else switch(n.charAt(0)){case"(?=":case"(?!":case"(?<=":case"(?<!":break;case s.escapeChar:d=!0,r&&v();break;case s.optionalmarker[1]:case s.groupmarker[1]:if((i=f.pop()).openGroup=!1,i!==oe)if(0<f.length){if((o=f[f.length-1]).matches.push(i),o.isAlternator){a=f.pop();for(var k=0;k<a.matches.length;k++)a.matches[k].isGroup=!1,a.matches[k].alternatorGroup=!1;0<f.length?(o=f[f.length-1]).matches.push(a):p.matches.push(a)}}else p.matches.push(i);else v();break;case s.optionalmarker[0]:f.push(new m(!1,!0));break;case s.groupmarker[0]:f.push(new m(!0));break;case s.quantifiermarker[0]:var b=new m(!1,!1,!0),x=(n=n.replace(/[{}]/g,"")).split("|"),w=x[0].split(","),S=isNaN(w[0])?w[0]:parseInt(w[0]),C=1===w.length?S:isNaN(w[1])?w[1]:parseInt(w[1]);"*"!==S&&"+"!==S||(S="*"===C?0:1),b.quantifier={min:S,max:C,jit:x[1]};var T=0<f.length?f[f.length-1].matches:p.matches;if((t=T.pop()).isAlternator){T.push(t),T=t.matches;var E=new m(!0),A=T.pop();T.push(E),T=E.matches,t=A}t.isGroup||(t=y([t])),T.push(t),T.push(b);break;case s.alternatormarker:var P=function(e){var t=e.pop();return t.isQuantifier&&(t=y([e.pop(),t])),t};if(0<f.length){var N=(o=f[f.length-1]).matches[o.matches.length-1];l=o.openGroup&&(N.matches===oe||!1===N.isGroup&&!1===N.isAlternator)?f.pop():P(o.matches)}else l=P(p.matches);if(l.isAlternator)f.push(l);else if(l.alternatorGroup?(a=f.pop(),l.alternatorGroup=!1):a=new m(!1,!1,!1,!0),a.matches.push(l),f.push(a),l.openGroup){var L=new m(!(l.openGroup=!1));L.alternatorGroup=!0,f.push(L)}break;default:v()}}for(;0<f.length;)i=f.pop(),p.matches.push(i);return 0<p.matches.length&&(function i(o){o&&o.matches&&ne.each(o.matches,function(e,t){var n=o.matches[e+1];(n===oe||n.matches===oe||!1===n.isQuantifier)&&t&&t.isGroup&&(t.isGroup=!1,r||(g(t,s.groupmarker[0],0),!0!==t.openGroup&&g(t,s.groupmarker[1]))),i(t)})}(p),h.push(p)),(s.numericInput||s.isRTL)&&function e(t){for(var n in t.matches=t.matches.reverse(),t.matches)if(t.matches.hasOwnProperty(n)){var i=parseInt(n);if(t.matches[n].isQuantifier&&t.matches[i+1]&&t.matches[i+1].isGroup){var o=t.matches[n];t.matches.splice(n,1),t.matches.splice(i+1,0,o)}t.matches[n].matches!==oe?t.matches[n]=e(t.matches[n]):t.matches[n]=((r=t.matches[n])===s.optionalmarker[0]?r=s.optionalmarker[1]:r===s.optionalmarker[1]?r=s.optionalmarker[0]:r===s.groupmarker[0]?r=s.groupmarker[1]:r===s.groupmarker[1]&&(r=s.groupmarker[0]),r)}var r;return t}(h[0]),h}},ue.extendDefaults=function(e){ne.extend(!0,ue.prototype.defaults,e)},ue.extendDefinitions=function(e){ne.extend(!0,ue.prototype.definitions,e)},ue.extendAliases=function(e){ne.extend(!0,ue.prototype.aliases,e)},ue.format=function(e,t,n){return ue(t).format(e,n)},ue.unmask=function(e,t){return ue(t).unmaskedvalue(e)},ue.isValid=function(e,t){return ue(t).isValid(e)},ue.remove=function(e){"string"==typeof e&&(e=re.getElementById(e)||re.querySelectorAll(e)),e=e.nodeName?[e]:e,ne.each(e,function(e,t){t.inputmask&&t.inputmask.remove()})},ue.setValue=function(e,n){"string"==typeof e&&(e=re.getElementById(e)||re.querySelectorAll(e)),e=e.nodeName?[e]:e,ne.each(e,function(e,t){t.inputmask?t.inputmask.setValue(n):ne(t).trigger("setvalue",[n])})},ue.escapeRegex=function(e){return e.replace(new RegExp("(\\"+["/",".","*","+","?","|","(",")","[","]","{","}","\\","$","^"].join("|\\")+")","gim"),"\\$1")},ue.keyCode={BACKSPACE:8,BACKSPACE_SAFARI:127,DELETE:46,DOWN:40,END:35,ENTER:13,ESCAPE:27,HOME:36,INSERT:45,LEFT:37,PAGE_DOWN:34,PAGE_UP:33,RIGHT:39,SPACE:32,TAB:9,UP:38,X:88,CONTROL:17},ue.dependencyLib=ne,ue})?i.apply(t,o):i)||(e.exports=r)},function(e,t,n){"use strict";var i,o,r;"function"==typeof Symbol&&Symbol.iterator;o=[n(4)],void 0===(r="function"==typeof(i=function(e){return e})?i.apply(t,o):i)||(e.exports=r)},function(e,t){e.exports=jQuery},function(module,exports,__webpack_require__){"use strict";var __WEBPACK_AMD_DEFINE_RESULT__,_typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e};__WEBPACK_AMD_DEFINE_RESULT__=function(){return"undefined"!=typeof window?window:new(eval("require('jsdom').JSDOM"))("").window}.call(exports,__webpack_require__,exports,module),void 0===__WEBPACK_AMD_DEFINE_RESULT__||(module.exports=__WEBPACK_AMD_DEFINE_RESULT__)},function(e,t,n){"use strict";var i,o,r,h="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e};o=[n(2)],void 0===(r="function"==typeof(i=function(a){var l=a.dependencyLib,u={d:["[1-9]|[12][0-9]|3[01]",Date.prototype.setDate,"day",Date.prototype.getDate],dd:["0[1-9]|[12][0-9]|3[01]",Date.prototype.setDate,"day",function(){return p(Date.prototype.getDate.call(this),2)}],ddd:[""],dddd:[""],m:["[1-9]|1[012]",Date.prototype.setMonth,"month",function(){return Date.prototype.getMonth.call(this)+1}],mm:["0[1-9]|1[012]",Date.prototype.setMonth,"month",function(){return p(Date.prototype.getMonth.call(this)+1,2)}],mmm:[""],mmmm:[""],yy:["[0-9]{2}",Date.prototype.setFullYear,"year",function(){return p(Date.prototype.getFullYear.call(this),2)}],yyyy:["[0-9]{4}",Date.prototype.setFullYear,"year",function(){return p(Date.prototype.getFullYear.call(this),4)}],h:["[1-9]|1[0-2]",Date.prototype.setHours,"hours",Date.prototype.getHours],hh:["0[1-9]|1[0-2]",Date.prototype.setHours,"hours",function(){return p(Date.prototype.getHours.call(this),2)}],hhh:["[0-9]+",Date.prototype.setHours,"hours",Date.prototype.getHours],H:["1?[0-9]|2[0-3]",Date.prototype.setHours,"hours",Date.prototype.getHours],HH:["0[0-9]|1[0-9]|2[0-3]",Date.prototype.setHours,"hours",function(){return p(Date.prototype.getHours.call(this),2)}],HHH:["[0-9]+",Date.prototype.setHours,"hours",Date.prototype.getHours],M:["[1-5]?[0-9]",Date.prototype.setMinutes,"minutes",Date.prototype.getMinutes],MM:["0[0-9]|1[0-9]|2[0-9]|3[0-9]|4[0-9]|5[0-9]",Date.prototype.setMinutes,"minutes",function(){return p(Date.prototype.getMinutes.call(this),2)}],ss:["[0-5][0-9]",Date.prototype.setSeconds,"seconds",function(){return p(Date.prototype.getSeconds.call(this),2)}],l:["[0-9]{3}",Date.prototype.setMilliseconds,"milliseconds",function(){return p(Date.prototype.getMilliseconds.call(this),3)}],L:["[0-9]{2}",Date.prototype.setMilliseconds,"milliseconds",function(){return p(Date.prototype.getMilliseconds.call(this),2)}],t:["[ap]"],tt:["[ap]m"],T:["[AP]"],TT:["[AP]M"],Z:[""],o:[""],S:[""]},t={isoDate:"yyyy-mm-dd",isoTime:"HH:MM:ss",isoDateTime:"yyyy-mm-dd'T'HH:MM:ss",isoUtcDateTime:"UTC:yyyy-mm-dd'T'HH:MM:ss'Z'"};function d(e){if(!e.tokenizer){var t=[];for(var n in u)-1===t.indexOf(n[0])&&t.push(n[0]);e.tokenizer="("+t.join("+|")+")+?|.",e.tokenizer=new RegExp(e.tokenizer,"g")}return e.tokenizer}function c(e,t,n,i){for(var o,r="";o=d(n).exec(e);)if(void 0===t)if(u[o[0]])r+="("+u[o[0]][0]+")";else switch(o[0]){case"[":r+="(";break;case"]":r+=")?";break;default:r+=a.escapeRegex(o[0])}else if(u[o[0]])if(!0!==i&&u[o[0]][3]){var s=u[o[0]][3];r+=s.call(t.date)}else u[o[0]][2]?r+=t["raw"+u[o[0]][2]]:r+=o[0];else r+=o[0];return r}function p(e,t){for(e=String(e),t=t||2;e.length<t;)e="0"+e;return e}function f(e,t,r){var s,n,i,o={date:new Date(1,0,1)},a=e;function l(e,t,n){e[s]=function(e){var t=e.replace(/[^0-9]/g,"0");if(t!=e){var n=e.replace(/[^0-9]/g,""),i=(r.min&&r.min[s]||e).toString(),o=(r.max&&r.max[s]||e).toString();t=n+(n<i.slice(0,n.length)?i.slice(n.length):n>o.slice(0,n.length)?o.slice(n.length):t.toString().slice(n.length))}return t}(t),e["raw"+s]=t,void 0!==i&&i.call(e.date,"month"==s?parseInt(e[s])-1:e[s])}if("string"==typeof a){for(;n=d(r).exec(t);){var c=a.slice(0,n[0].length);u.hasOwnProperty(n[0])&&(u[n[0]][0],s=u[n[0]][2],i=u[n[0]][1],l(o,c)),a=a.slice(c.length)}return o}if(a&&"object"===(void 0===a?"undefined":h(a))&&a.hasOwnProperty("date"))return a}return a.extendAliases({datetime:{mask:function(e){return u.S=e.i18n.ordinalSuffix.join("|"),e.inputFormat=t[e.inputFormat]||e.inputFormat,e.displayFormat=t[e.displayFormat]||e.displayFormat||e.inputFormat,e.outputFormat=t[e.outputFormat]||e.outputFormat||e.inputFormat,e.placeholder=""!==e.placeholder?e.placeholder:e.inputFormat.replace(/[\[\]]/,""),e.regex=c(e.inputFormat,void 0,e),null},placeholder:"",inputFormat:"isoDateTime",displayFormat:void 0,outputFormat:void 0,min:null,max:null,i18n:{dayNames:["Mon","Tue","Wed","Thu","Fri","Sat","Sun","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday","Sunday"],monthNames:["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec","January","February","March","April","May","June","July","August","September","October","November","December"],ordinalSuffix:["st","nd","rd","th"]},postValidation:function(e,t,n,i){i.min=f(i.min,i.inputFormat,i),i.max=f(i.max,i.inputFormat,i);var o,r,s=n,a=f(e.join(""),i.inputFormat,i);return s&&a.date.getTime()==a.date.getTime()&&(o=a,r=s,s=(s=(!isFinite(o.rawday)||"29"==o.day&&!isFinite(o.rawyear)||new Date(o.date.getFullYear(),isFinite(o.rawmonth)?o.month:o.date.getMonth()+1,0).getDate()>=o.day)&&r)&&function(e,t){var n=!0;if(t.min){if(e.rawyear){var i=e.rawyear.replace(/[^0-9]/g,""),o=t.min.year.substr(0,i.length);n=o<=i}e.year===e.rawyear&&t.min.date.getTime()==t.min.date.getTime()&&(n=t.min.date.getTime()<=e.date.getTime())}return n&&t.max&&t.max.date.getTime()==t.max.date.getTime()&&(n=t.max.date.getTime()>=e.date.getTime()),n}(a,i)),t&&s&&n.pos!==t?{buffer:c(i.inputFormat,a,i),refreshFromBuffer:{start:t,end:n.pos}}:s},onKeyDown:function(e,t,n,i){if(e.ctrlKey&&e.keyCode===a.keyCode.RIGHT){for(var o,r=new Date,s="";o=d(i).exec(i.inputFormat);)"d"===o[0].charAt(0)?s+=p(r.getDate(),o[0].length):"m"===o[0].charAt(0)?s+=p(r.getMonth()+1,o[0].length):"yyyy"===o[0]?s+=r.getFullYear().toString():"y"===o[0].charAt(0)&&(s+=p(r.getYear(),o[0].length));this.inputmask._valueSet(s),l(this).trigger("setvalue")}},onUnMask:function(e,t,n){return c(n.outputFormat,f(e,n.inputFormat,n),n,!0)},casing:function(e,t,n,i){return 0==t.nativeDef.indexOf("[ap]")?e.toLowerCase():0==t.nativeDef.indexOf("[AP]")?e.toUpperCase():e},insertMode:!1,shiftPositions:!1}}),a})?i.apply(t,o):i)||(e.exports=r)},function(e,t,n){"use strict";var i,o,r;"function"==typeof Symbol&&Symbol.iterator;o=[n(2)],void 0===(r="function"==typeof(i=function(g){var v=g.dependencyLib;function s(e,t){for(var n="",i=0;i<e.length;i++)g.prototype.definitions[e.charAt(i)]||t.definitions[e.charAt(i)]||t.optionalmarker.start===e.charAt(i)||t.optionalmarker.end===e.charAt(i)||t.quantifiermarker.start===e.charAt(i)||t.quantifiermarker.end===e.charAt(i)||t.groupmarker.start===e.charAt(i)||t.groupmarker.end===e.charAt(i)||t.alternatormarker===e.charAt(i)?n+="\\"+e.charAt(i):n+=e.charAt(i);return n}return g.extendAliases({numeric:{mask:function(e){if(0!==e.repeat&&isNaN(e.integerDigits)&&(e.integerDigits=e.repeat),e.repeat=0,e.groupSeparator===e.radixPoint&&e.digits&&"0"!==e.digits&&("."===e.radixPoint?e.groupSeparator=",":","===e.radixPoint?e.groupSeparator=".":e.groupSeparator="")," "===e.groupSeparator&&(e.skipOptionalPartCharacter=void 0),e.autoGroup=e.autoGroup&&""!==e.groupSeparator,e.autoGroup&&("string"==typeof e.groupSize&&isFinite(e.groupSize)&&(e.groupSize=parseInt(e.groupSize)),isFinite(e.integerDigits))){var t=Math.floor(e.integerDigits/e.groupSize),n=e.integerDigits%e.groupSize;e.integerDigits=parseInt(e.integerDigits)+(0===n?t-1:t),e.integerDigits<1&&(e.integerDigits="*")}1<e.placeholder.length&&(e.placeholder=e.placeholder.charAt(0)),"radixFocus"===e.positionCaretOnClick&&""===e.placeholder&&!1===e.integerOptional&&(e.positionCaretOnClick="lvp"),e.definitions[";"]=e.definitions["~"],e.definitions[";"].definitionSymbol="~",!0===e.numericInput&&(e.positionCaretOnClick="radixFocus"===e.positionCaretOnClick?"lvp":e.positionCaretOnClick,e.digitsOptional=!1,isNaN(e.digits)&&(e.digits=2),e.decimalProtect=!1);var i="[+]";if(i+=s(e.prefix,e),!0===e.integerOptional?i+="~{1,"+e.integerDigits+"}":i+="~{"+e.integerDigits+"}",void 0!==e.digits){var o=e.decimalProtect?":":e.radixPoint,r=e.digits.toString().split(",");isFinite(r[0])&&r[1]&&isFinite(r[1])?i+=o+";{"+e.digits+"}":(isNaN(e.digits)||0<parseInt(e.digits))&&(e.digitsOptional?i+="["+o+";{1,"+e.digits+"}]":i+=o+";{"+e.digits+"}")}return i+=s(e.suffix,e),i+="[-]",e.greedy=!1,i},placeholder:"",greedy:!1,digits:"*",digitsOptional:!0,enforceDigitsOnBlur:!1,radixPoint:".",positionCaretOnClick:"radixFocus",groupSize:3,groupSeparator:"",autoGroup:!1,allowMinus:!0,negationSymbol:{front:"-",back:""},integerDigits:"+",integerOptional:!0,prefix:"",suffix:"",rightAlign:!0,decimalProtect:!0,min:null,max:null,step:1,insertMode:!0,autoUnmask:!1,unmaskAsNumber:!1,inputType:"text",inputmode:"numeric",preValidation:function(e,t,n,i,o,r){if("-"===n||n===o.negationSymbol.front)return!0===o.allowMinus&&(o.isNegative=void 0===o.isNegative||!o.isNegative,""===e.join("")||{caret:r.validPositions[t]?t:void 0,dopost:!0});if(!1===i&&n===o.radixPoint&&void 0!==o.digits&&(isNaN(o.digits)||0<parseInt(o.digits))){var s=v.inArray(o.radixPoint,e);if(-1!==s&&void 0!==r.validPositions[s])return!0===o.numericInput?t===s:{caret:s+1}}return!0},postValidation:function(e,t,n,i){var o=i.suffix.split(""),r=i.prefix.split("");if(void 0===n.pos&&void 0!==n.caret&&!0!==n.dopost)return n;var s=void 0!==n.caret?n.caret:n.pos,a=e.slice();i.numericInput&&(s=a.length-s-1,a=a.reverse());var l=a[s];if(l===i.groupSeparator&&(l=a[s+=1]),s===a.length-i.suffix.length-1&&l===i.radixPoint)return n;void 0!==l&&l!==i.radixPoint&&l!==i.negationSymbol.front&&l!==i.negationSymbol.back&&(a[s]="?",0<i.prefix.length&&s>=(!1===i.isNegative?1:0)&&s<i.prefix.length-1+(!1===i.isNegative?1:0)?r[s-(!1===i.isNegative?1:0)]="?":0<i.suffix.length&&s>=a.length-i.suffix.length-(!1===i.isNegative?1:0)&&(o[s-(a.length-i.suffix.length-(!1===i.isNegative?1:0))]="?")),r=r.join(""),o=o.join("");var c=a.join("").replace(r,"");if(c=(c=(c=(c=c.replace(o,"")).replace(new RegExp(g.escapeRegex(i.groupSeparator),"g"),"")).replace(new RegExp("[-"+g.escapeRegex(i.negationSymbol.front)+"]","g"),"")).replace(new RegExp(g.escapeRegex(i.negationSymbol.back)+"$"),""),isNaN(i.placeholder)&&(c=c.replace(new RegExp(g.escapeRegex(i.placeholder),"g"),"")),1<c.length&&1!==c.indexOf(i.radixPoint)&&("0"===l&&(c=c.replace(/^\?/g,"")),c=c.replace(/^0/g,"")),c.charAt(0)===i.radixPoint&&""!==i.radixPoint&&!0!==i.numericInput&&(c="0"+c),""!==c){if(c=c.split(""),(!i.digitsOptional||i.enforceDigitsOnBlur&&"blur"===n.event)&&isFinite(i.digits)){var u=v.inArray(i.radixPoint,c),d=v.inArray(i.radixPoint,a);-1===u&&(c.push(i.radixPoint),u=c.length-1);for(var p=1;p<=i.digits;p++)i.digitsOptional&&(!i.enforceDigitsOnBlur||"blur"!==n.event)||void 0!==c[u+p]&&c[u+p]!==i.placeholder.charAt(0)?-1!==d&&void 0!==a[d+p]&&(c[u+p]=c[u+p]||a[d+p]):c[u+p]=n.placeholder||i.placeholder.charAt(0)}if(!0!==i.autoGroup||""===i.groupSeparator||l===i.radixPoint&&void 0===n.pos&&!n.dopost)c=c.join("");else{var f=c[c.length-1]===i.radixPoint&&n.c===i.radixPoint;c=g(function(e,t){var n="";if(n+="("+t.groupSeparator+"*{"+t.groupSize+"}){*}",""!==t.radixPoint){var i=e.join("").split(t.radixPoint);i[1]&&(n+=t.radixPoint+"*{"+i[1].match(/^\d*\??\d*/)[0].length+"}")}return n}(c,i),{numericInput:!0,jitMasking:!0,definitions:{"*":{validator:"[0-9?]",cardinality:1}}}).format(c.join("")),f&&(c+=i.radixPoint),c.charAt(0)===i.groupSeparator&&c.substr(1)}}if(i.isNegative&&"blur"===n.event&&(i.isNegative="0"!==c),c=r+c,c+=o,i.isNegative&&(c=i.negationSymbol.front+c,c+=i.negationSymbol.back),c=c.split(""),void 0!==l)if(l!==i.radixPoint&&l!==i.negationSymbol.front&&l!==i.negationSymbol.back)-1<(s=v.inArray("?",c))?c[s]=l:s=n.caret||0;else if(l===i.radixPoint||l===i.negationSymbol.front||l===i.negationSymbol.back){var h=v.inArray(l,c);-1!==h&&(s=h)}i.numericInput&&(s=c.length-s-1,c=c.reverse());var m={caret:void 0!==l&&void 0===n.pos||void 0===s?s:s+(i.numericInput?-1:1),buffer:c,refreshFromBuffer:n.dopost||e.join("")!==c.join("")};return m.refreshFromBuffer?m:n},onBeforeWrite:function(e,t,n,i){if(e)switch(e.type){case"keydown":return i.postValidation(t,n,{caret:n,dopost:!0},i);case"blur":case"checkval":var o;if(void 0===(r=i).parseMinMaxOptions&&(null!==r.min&&(r.min=r.min.toString().replace(new RegExp(g.escapeRegex(r.groupSeparator),"g"),""),","===r.radixPoint&&(r.min=r.min.replace(r.radixPoint,".")),r.min=isFinite(r.min)?parseFloat(r.min):NaN,isNaN(r.min)&&(r.min=Number.MIN_VALUE)),null!==r.max&&(r.max=r.max.toString().replace(new RegExp(g.escapeRegex(r.groupSeparator),"g"),""),","===r.radixPoint&&(r.max=r.max.replace(r.radixPoint,".")),r.max=isFinite(r.max)?parseFloat(r.max):NaN,isNaN(r.max)&&(r.max=Number.MAX_VALUE)),r.parseMinMaxOptions="done"),null!==i.min||null!==i.max){if(o=i.onUnMask(t.join(""),void 0,v.extend({},i,{unmaskAsNumber:!0})),null!==i.min&&o<i.min)return i.isNegative=i.min<0,i.postValidation(i.min.toString().replace(".",i.radixPoint).split(""),n,{caret:n,dopost:!0,placeholder:"0"},i);if(null!==i.max&&o>i.max)return i.isNegative=i.max<0,i.postValidation(i.max.toString().replace(".",i.radixPoint).split(""),n,{caret:n,dopost:!0,placeholder:"0"},i)}return i.postValidation(t,n,{caret:n,placeholder:"0",event:"blur"},i);case"_checkval":return{caret:n}}var r},regex:{integerPart:function(e,t){return t?new RegExp("["+g.escapeRegex(e.negationSymbol.front)+"+]?"):new RegExp("["+g.escapeRegex(e.negationSymbol.front)+"+]?\\d+")},integerNPart:function(e){return new RegExp("[\\d"+g.escapeRegex(e.groupSeparator)+g.escapeRegex(e.placeholder.charAt(0))+"]+")}},definitions:{"~":{validator:function(e,t,n,i,o,r){var s;if("k"===e||"m"===e){s={insert:[],c:0};for(var a=0,l="k"===e?2:5;a<l;a++)s.insert.push({pos:n+a,c:0});return s.pos=n+l,s}if(!0===(s=i?new RegExp("[0-9"+g.escapeRegex(o.groupSeparator)+"]").test(e):new RegExp("[0-9]").test(e))){if(!0!==o.numericInput&&void 0!==t.validPositions[n]&&"~"===t.validPositions[n].match.def&&!r){var c=t.buffer.join(""),u=(c=(c=c.replace(new RegExp("[-"+g.escapeRegex(o.negationSymbol.front)+"]","g"),"")).replace(new RegExp(g.escapeRegex(o.negationSymbol.back)+"$"),"")).split(o.radixPoint);1<u.length&&(u[1]=u[1].replace(/0/g,o.placeholder.charAt(0))),"0"===u[0]&&(u[0]=u[0].replace(/0/g,o.placeholder.charAt(0))),c=u[0]+o.radixPoint+u[1]||"";var d=t._buffer.join("");for(c===o.radixPoint&&(c=d);null===c.match(g.escapeRegex(d)+"$");)d=d.slice(1);s=void 0===(c=(c=c.replace(d,"")).split(""))[n]?{pos:n,remove:n}:{pos:n}}}else i||e!==o.radixPoint||void 0!==t.validPositions[n-1]||(s={insert:{pos:n,c:0},pos:n+1});return s},cardinality:1},"+":{validator:function(e,t,n,i,o){return o.allowMinus&&("-"===e||e===o.negationSymbol.front)},cardinality:1,placeholder:""},"-":{validator:function(e,t,n,i,o){return o.allowMinus&&e===o.negationSymbol.back},cardinality:1,placeholder:""},":":{validator:function(e,t,n,i,o){var r="["+g.escapeRegex(o.radixPoint)+"]",s=new RegExp(r).test(e);return s&&t.validPositions[n]&&t.validPositions[n].match.placeholder===o.radixPoint&&(s={caret:n+1}),s},cardinality:1,placeholder:function(e){return e.radixPoint}}},onUnMask:function(e,t,n){if(""===t&&!0===n.nullable)return t;var i=e.replace(n.prefix,"");return i=(i=i.replace(n.suffix,"")).replace(new RegExp(g.escapeRegex(n.groupSeparator),"g"),""),""!==n.placeholder.charAt(0)&&(i=i.replace(new RegExp(n.placeholder.charAt(0),"g"),"0")),n.unmaskAsNumber?(""!==n.radixPoint&&-1!==i.indexOf(n.radixPoint)&&(i=i.replace(g.escapeRegex.call(this,n.radixPoint),".")),i=(i=i.replace(new RegExp("^"+g.escapeRegex(n.negationSymbol.front)),"-")).replace(new RegExp(g.escapeRegex(n.negationSymbol.back)+"$"),""),Number(i)):i},isComplete:function(e,t){var n=(t.numericInput?e.slice().reverse():e).join("");return n=(n=(n=(n=(n=n.replace(new RegExp("^"+g.escapeRegex(t.negationSymbol.front)),"-")).replace(new RegExp(g.escapeRegex(t.negationSymbol.back)+"$"),"")).replace(t.prefix,"")).replace(t.suffix,"")).replace(new RegExp(g.escapeRegex(t.groupSeparator)+"([0-9]{3})","g"),"$1"),","===t.radixPoint&&(n=n.replace(g.escapeRegex(t.radixPoint),".")),isFinite(n)},onBeforeMask:function(e,t){t.isNegative=void 0;var n=t.radixPoint||",";"number"!=typeof e&&"number"!==t.inputType||""===n||(e=e.toString().replace(".",n));var i=e.split(n),o=i[0].replace(/[^\-0-9]/g,""),r=1<i.length?i[1].replace(/[^0-9]/g,""):"";e=o+(""!==r?n+r:r);var s=0;if(""!==n&&(s=r.length,""!==r)){var a=Math.pow(10,s||1);isFinite(t.digits)&&(s=parseInt(t.digits),a=Math.pow(10,s)),e=e.replace(g.escapeRegex(n),"."),isFinite(e)&&(e=Math.round(parseFloat(e)*a)/a),e=e.toString().replace(".",n)}return 0===t.digits&&-1!==e.indexOf(g.escapeRegex(n))&&(e=e.substring(0,e.indexOf(g.escapeRegex(n)))),function(e,t,n){if(0<t){var i=v.inArray(n.radixPoint,e);-1===i&&(e.push(n.radixPoint),i=e.length-1);for(var o=1;o<=t;o++)e[i+o]=e[i+o]||"0"}return e}(e.toString().split(""),s,t).join("")},onKeyDown:function(e,t,n,i){var o=v(this);if(e.ctrlKey)switch(e.keyCode){case g.keyCode.UP:o.val(parseFloat(this.inputmask.unmaskedvalue())+parseInt(i.step)),o.trigger("setvalue");break;case g.keyCode.DOWN:o.val(parseFloat(this.inputmask.unmaskedvalue())-parseInt(i.step)),o.trigger("setvalue")}}},currency:{prefix:"$ ",groupSeparator:",",alias:"numeric",placeholder:"0",autoGroup:!0,digits:2,digitsOptional:!1,clearMaskOnLostFocus:!1},decimal:{alias:"numeric"},integer:{alias:"numeric",digits:0,radixPoint:""},percentage:{alias:"numeric",digits:2,digitsOptional:!0,radixPoint:".",placeholder:"0",autoGroup:!1,min:0,max:100,suffix:" %",allowMinus:!1}}),g})?i.apply(t,o):i)||(e.exports=r)},function(e,t,n){"use strict";var i,o,r,s="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e};o=[n(4),n(2)],void 0===(r="function"==typeof(i=function(o,r){return void 0===o.fn.inputmask&&(o.fn.inputmask=function(e,t){var n,i=this[0];if(void 0===t&&(t={}),"string"==typeof e)switch(e){case"unmaskedvalue":return i&&i.inputmask?i.inputmask.unmaskedvalue():o(i).val();case"remove":return this.each(function(){this.inputmask&&this.inputmask.remove()});case"getemptymask":return i&&i.inputmask?i.inputmask.getemptymask():"";case"hasMaskedValue":return!(!i||!i.inputmask)&&i.inputmask.hasMaskedValue();case"isComplete":return!i||!i.inputmask||i.inputmask.isComplete();case"getmetadata":return i&&i.inputmask?i.inputmask.getmetadata():void 0;case"setvalue":r.setValue(i,t);break;case"option":if("string"!=typeof t)return this.each(function(){if(void 0!==this.inputmask)return this.inputmask.option(t)});if(i&&void 0!==i.inputmask)return i.inputmask.option(t);break;default:return t.alias=e,n=new r(t),this.each(function(){n.mask(this)})}else{if(Array.isArray(e))return t.alias=e,n=new r(t),this.each(function(){n.mask(this)});if("object"==(void 0===e?"undefined":s(e)))return n=new r(e),void 0===e.mask&&void 0===e.alias?this.each(function(){if(void 0!==this.inputmask)return this.inputmask.option(e);n.mask(this)}):this.each(function(){n.mask(this)});if(void 0===e)return this.each(function(){(n=new r(t)).mask(this)})}}),o.fn.inputmask})?i.apply(t,o):i)||(e.exports=r)}]),$(function(){$(window).width()<1280&&($(".m_header_top_gr").appendTo(".grAdres_mob"),$(".m_header_top_adress").appendTo(".grAdres_mob"),$(".m_header_center_logo").appendTo(".mob_log_text"),$(".m_header_center_logotext").appendTo(".mob_log_text"),$(".m_header_center_tel").appendTo(".mob_tel_search"),$(".m_header_center_search").appendTo(".mob_tel_search"))}),function(e){"use strict";"function"==typeof define&&define.amd?define(["jquery"],e):"undefined"!=typeof exports?module.exports=e(require("jquery")):e(jQuery)}(function(c){"use strict";var o,r=window.Slick||{};o=0,(r=function(e,t){var n,i=this;i.defaults={accessibility:!0,adaptiveHeight:!1,appendArrows:c(e),appendDots:c(e),arrows:!0,asNavFor:null,prevArrow:'<button class="slick-prev" aria-label="Previous" type="button">Previous</button>',nextArrow:'<button class="slick-next" aria-label="Next" type="button">Next</button>',autoplay:!1,autoplaySpeed:3e3,centerMode:!1,centerPadding:"50px",cssEase:"ease",customPaging:function(e,t){return c('<button type="button" />').text(t+1)},dots:!1,dotsClass:"slick-dots",draggable:!0,easing:"linear",edgeFriction:.35,fade:!1,focusOnSelect:!1,focusOnChange:!1,infinite:!0,initialSlide:0,lazyLoad:"ondemand",mobileFirst:!1,pauseOnHover:!0,pauseOnFocus:!0,pauseOnDotsHover:!1,respondTo:"window",responsive:null,rows:1,rtl:!1,slide:"",slidesPerRow:1,slidesToShow:1,slidesToScroll:1,speed:500,swipe:!0,swipeToSlide:!1,touchMove:!0,touchThreshold:5,useCSS:!0,useTransform:!0,variableWidth:!1,vertical:!1,verticalSwiping:!1,waitForAnimate:!0,zIndex:1e3},i.initials={animating:!1,dragging:!1,autoPlayTimer:null,currentDirection:0,currentLeft:null,currentSlide:0,direction:1,$dots:null,listWidth:null,listHeight:null,loadIndex:0,$nextArrow:null,$prevArrow:null,scrolling:!1,slideCount:null,slideWidth:null,$slideTrack:null,$slides:null,sliding:!1,slideOffset:0,swipeLeft:null,swiping:!1,$list:null,touchObject:{},transformsEnabled:!1,unslicked:!1},c.extend(i,i.initials),i.activeBreakpoint=null,i.animType=null,i.animProp=null,i.breakpoints=[],i.breakpointSettings=[],i.cssTransitions=!1,i.focussed=!1,i.interrupted=!1,i.hidden="hidden",i.paused=!0,i.positionProp=null,i.respondTo=null,i.rowCount=1,i.shouldClick=!0,i.$slider=c(e),i.$slidesCache=null,i.transformType=null,i.transitionType=null,i.visibilityChange="visibilitychange",i.windowWidth=0,i.windowTimer=null,n=c(e).data("slick")||{},i.options=c.extend({},i.defaults,t,n),i.currentSlide=i.options.initialSlide,i.originalSettings=i.options,void 0!==document.mozHidden?(i.hidden="mozHidden",i.visibilityChange="mozvisibilitychange"):void 0!==document.webkitHidden&&(i.hidden="webkitHidden",i.visibilityChange="webkitvisibilitychange"),i.autoPlay=c.proxy(i.autoPlay,i),i.autoPlayClear=c.proxy(i.autoPlayClear,i),i.autoPlayIterator=c.proxy(i.autoPlayIterator,i),i.changeSlide=c.proxy(i.changeSlide,i),i.clickHandler=c.proxy(i.clickHandler,i),i.selectHandler=c.proxy(i.selectHandler,i),i.setPosition=c.proxy(i.setPosition,i),i.swipeHandler=c.proxy(i.swipeHandler,i),i.dragHandler=c.proxy(i.dragHandler,i),i.keyHandler=c.proxy(i.keyHandler,i),i.instanceUid=o++,i.htmlExpr=/^(?:\s*(<[\w\W]+>)[^>]*)$/,i.registerBreakpoints(),i.init(!0)}).prototype.activateADA=function(){this.$slideTrack.find(".slick-active").attr({"aria-hidden":"false"}).find("a, input, button, select").attr({tabindex:"0"})},r.prototype.addSlide=r.prototype.slickAdd=function(e,t,n){var i=this;if("boolean"==typeof t)n=t,t=null;else if(t<0||t>=i.slideCount)return!1;i.unload(),"number"==typeof t?0===t&&0===i.$slides.length?c(e).appendTo(i.$slideTrack):n?c(e).insertBefore(i.$slides.eq(t)):c(e).insertAfter(i.$slides.eq(t)):!0===n?c(e).prependTo(i.$slideTrack):c(e).appendTo(i.$slideTrack),i.$slides=i.$slideTrack.children(this.options.slide),i.$slideTrack.children(this.options.slide).detach(),i.$slideTrack.append(i.$slides),i.$slides.each(function(e,t){c(t).attr("data-slick-index",e)}),i.$slidesCache=i.$slides,i.reinit()},r.prototype.animateHeight=function(){if(1===this.options.slidesToShow&&!0===this.options.adaptiveHeight&&!1===this.options.vertical){var e=this.$slides.eq(this.currentSlide).outerHeight(!0);this.$list.animate({height:e},this.options.speed)}},r.prototype.animateSlide=function(e,t){var n={},i=this;i.animateHeight(),!0===i.options.rtl&&!1===i.options.vertical&&(e=-e),!1===i.transformsEnabled?!1===i.options.vertical?i.$slideTrack.animate({left:e},i.options.speed,i.options.easing,t):i.$slideTrack.animate({top:e},i.options.speed,i.options.easing,t):!1===i.cssTransitions?(!0===i.options.rtl&&(i.currentLeft=-i.currentLeft),c({animStart:i.currentLeft}).animate({animStart:e},{duration:i.options.speed,easing:i.options.easing,step:function(e){e=Math.ceil(e),!1===i.options.vertical?n[i.animType]="translate("+e+"px, 0px)":n[i.animType]="translate(0px,"+e+"px)",i.$slideTrack.css(n)},complete:function(){t&&t.call()}})):(i.applyTransition(),e=Math.ceil(e),!1===i.options.vertical?n[i.animType]="translate3d("+e+"px, 0px, 0px)":n[i.animType]="translate3d(0px,"+e+"px, 0px)",i.$slideTrack.css(n),t&&setTimeout(function(){i.disableTransition(),t.call()},i.options.speed))},r.prototype.getNavTarget=function(){var e=this.options.asNavFor;return e&&null!==e&&(e=c(e).not(this.$slider)),e},r.prototype.asNavFor=function(t){var e=this.getNavTarget();null!==e&&"object"==typeof e&&e.each(function(){var e=c(this).slick("getSlick");e.unslicked||e.slideHandler(t,!0)})},r.prototype.applyTransition=function(e){var t=this,n={};!1===t.options.fade?n[t.transitionType]=t.transformType+" "+t.options.speed+"ms "+t.options.cssEase:n[t.transitionType]="opacity "+t.options.speed+"ms "+t.options.cssEase,!1===t.options.fade?t.$slideTrack.css(n):t.$slides.eq(e).css(n)},r.prototype.autoPlay=function(){this.autoPlayClear(),this.slideCount>this.options.slidesToShow&&(this.autoPlayTimer=setInterval(this.autoPlayIterator,this.options.autoplaySpeed))},r.prototype.autoPlayClear=function(){this.autoPlayTimer&&clearInterval(this.autoPlayTimer)},r.prototype.autoPlayIterator=function(){var e=this,t=e.currentSlide+e.options.slidesToScroll;e.paused||e.interrupted||e.focussed||(!1===e.options.infinite&&(1===e.direction&&e.currentSlide+1===e.slideCount-1?e.direction=0:0===e.direction&&(t=e.currentSlide-e.options.slidesToScroll,e.currentSlide-1==0&&(e.direction=1))),e.slideHandler(t))},r.prototype.buildArrows=function(){var e=this;!0===e.options.arrows&&(e.$prevArrow=c(e.options.prevArrow).addClass("slick-arrow"),e.$nextArrow=c(e.options.nextArrow).addClass("slick-arrow"),e.slideCount>e.options.slidesToShow?(e.$prevArrow.removeClass("slick-hidden").removeAttr("aria-hidden tabindex"),e.$nextArrow.removeClass("slick-hidden").removeAttr("aria-hidden tabindex"),e.htmlExpr.test(e.options.prevArrow)&&e.$prevArrow.prependTo(e.options.appendArrows),e.htmlExpr.test(e.options.nextArrow)&&e.$nextArrow.appendTo(e.options.appendArrows),!0!==e.options.infinite&&e.$prevArrow.addClass("slick-disabled").attr("aria-disabled","true")):e.$prevArrow.add(e.$nextArrow).addClass("slick-hidden").attr({"aria-disabled":"true",tabindex:"-1"}))},r.prototype.buildDots=function(){var e,t,n=this;if(!0===n.options.dots&&n.slideCount>n.options.slidesToShow){for(n.$slider.addClass("slick-dotted"),t=c("<ul />").addClass(n.options.dotsClass),e=0;e<=n.getDotCount();e+=1)t.append(c("<li />").append(n.options.customPaging.call(this,n,e)));n.$dots=t.appendTo(n.options.appendDots),n.$dots.find("li").first().addClass("slick-active")}},r.prototype.buildOut=function(){var e=this;e.$slides=e.$slider.children(e.options.slide+":not(.slick-cloned)").addClass("slick-slide"),e.slideCount=e.$slides.length,e.$slides.each(function(e,t){c(t).attr("data-slick-index",e).data("originalStyling",c(t).attr("style")||"")}),e.$slider.addClass("slick-slider"),e.$slideTrack=0===e.slideCount?c('<div class="slick-track"/>').appendTo(e.$slider):e.$slides.wrapAll('<div class="slick-track"/>').parent(),e.$list=e.$slideTrack.wrap('<div class="slick-list"/>').parent(),e.$slideTrack.css("opacity",0),!0!==e.options.centerMode&&!0!==e.options.swipeToSlide||(e.options.slidesToScroll=1),c("img[data-lazy]",e.$slider).not("[src]").addClass("slick-loading"),e.setupInfinite(),e.buildArrows(),e.buildDots(),e.updateDots(),e.setSlideClasses("number"==typeof e.currentSlide?e.currentSlide:0),!0===e.options.draggable&&e.$list.addClass("draggable")},r.prototype.buildRows=function(){var e,t,n,i,o,r,s,a=this;if(i=document.createDocumentFragment(),r=a.$slider.children(),0<a.options.rows){for(s=a.options.slidesPerRow*a.options.rows,o=Math.ceil(r.length/s),e=0;e<o;e++){var l=document.createElement("div");for(t=0;t<a.options.rows;t++){var c=document.createElement("div");for(n=0;n<a.options.slidesPerRow;n++){var u=e*s+(t*a.options.slidesPerRow+n);r.get(u)&&c.appendChild(r.get(u))}l.appendChild(c)}i.appendChild(l)}a.$slider.empty().append(i),a.$slider.children().children().children().css({width:100/a.options.slidesPerRow+"%",display:"inline-block"})}},r.prototype.checkResponsive=function(e,t){var n,i,o,r=this,s=!1,a=r.$slider.width(),l=window.innerWidth||c(window).width();if("window"===r.respondTo?o=l:"slider"===r.respondTo?o=a:"min"===r.respondTo&&(o=Math.min(l,a)),r.options.responsive&&r.options.responsive.length&&null!==r.options.responsive){for(n in i=null,r.breakpoints)r.breakpoints.hasOwnProperty(n)&&(!1===r.originalSettings.mobileFirst?o<r.breakpoints[n]&&(i=r.breakpoints[n]):o>r.breakpoints[n]&&(i=r.breakpoints[n]));null!==i?null!==r.activeBreakpoint?(i!==r.activeBreakpoint||t)&&(r.activeBreakpoint=i,"unslick"===r.breakpointSettings[i]?r.unslick(i):(r.options=c.extend({},r.originalSettings,r.breakpointSettings[i]),!0===e&&(r.currentSlide=r.options.initialSlide),r.refresh(e)),s=i):(r.activeBreakpoint=i,"unslick"===r.breakpointSettings[i]?r.unslick(i):(r.options=c.extend({},r.originalSettings,r.breakpointSettings[i]),!0===e&&(r.currentSlide=r.options.initialSlide),r.refresh(e)),s=i):null!==r.activeBreakpoint&&(r.activeBreakpoint=null,r.options=r.originalSettings,!0===e&&(r.currentSlide=r.options.initialSlide),r.refresh(e),s=i),e||!1===s||r.$slider.trigger("breakpoint",[r,s])}},r.prototype.changeSlide=function(e,t){var n,i,o=this,r=c(e.currentTarget);switch(r.is("a")&&e.preventDefault(),r.is("li")||(r=r.closest("li")),n=o.slideCount%o.options.slidesToScroll!=0?0:(o.slideCount-o.currentSlide)%o.options.slidesToScroll,e.data.message){case"previous":i=0===n?o.options.slidesToScroll:o.options.slidesToShow-n,o.slideCount>o.options.slidesToShow&&o.slideHandler(o.currentSlide-i,!1,t);break;case"next":i=0===n?o.options.slidesToScroll:n,o.slideCount>o.options.slidesToShow&&o.slideHandler(o.currentSlide+i,!1,t);break;case"index":var s=0===e.data.index?0:e.data.index||r.index()*o.options.slidesToScroll;o.slideHandler(o.checkNavigable(s),!1,t),r.children().trigger("focus");break;default:return}},r.prototype.checkNavigable=function(e){var t,n;if(n=0,e>(t=this.getNavigableIndexes())[t.length-1])e=t[t.length-1];else for(var i in t){if(e<t[i]){e=n;break}n=t[i]}return e},r.prototype.cleanUpEvents=function(){var e=this;e.options.dots&&null!==e.$dots&&(c("li",e.$dots).off("click.slick",e.changeSlide).off("mouseenter.slick",c.proxy(e.interrupt,e,!0)).off("mouseleave.slick",c.proxy(e.interrupt,e,!1)),!0===e.options.accessibility&&e.$dots.off("keydown.slick",e.keyHandler)),e.$slider.off("focus.slick blur.slick"),!0===e.options.arrows&&e.slideCount>e.options.slidesToShow&&(e.$prevArrow&&e.$prevArrow.off("click.slick",e.changeSlide),e.$nextArrow&&e.$nextArrow.off("click.slick",e.changeSlide),!0===e.options.accessibility&&(e.$prevArrow&&e.$prevArrow.off("keydown.slick",e.keyHandler),e.$nextArrow&&e.$nextArrow.off("keydown.slick",e.keyHandler))),e.$list.off("touchstart.slick mousedown.slick",e.swipeHandler),e.$list.off("touchmove.slick mousemove.slick",e.swipeHandler),e.$list.off("touchend.slick mouseup.slick",e.swipeHandler),e.$list.off("touchcancel.slick mouseleave.slick",e.swipeHandler),e.$list.off("click.slick",e.clickHandler),c(document).off(e.visibilityChange,e.visibility),e.cleanUpSlideEvents(),!0===e.options.accessibility&&e.$list.off("keydown.slick",e.keyHandler),!0===e.options.focusOnSelect&&c(e.$slideTrack).children().off("click.slick",e.selectHandler),c(window).off("orientationchange.slick.slick-"+e.instanceUid,e.orientationChange),c(window).off("resize.slick.slick-"+e.instanceUid,e.resize),c("[draggable!=true]",e.$slideTrack).off("dragstart",e.preventDefault),c(window).off("load.slick.slick-"+e.instanceUid,e.setPosition)},r.prototype.cleanUpSlideEvents=function(){this.$list.off("mouseenter.slick",c.proxy(this.interrupt,this,!0)),this.$list.off("mouseleave.slick",c.proxy(this.interrupt,this,!1))},r.prototype.cleanUpRows=function(){var e;0<this.options.rows&&((e=this.$slides.children().children()).removeAttr("style"),this.$slider.empty().append(e))},r.prototype.clickHandler=function(e){!1===this.shouldClick&&(e.stopImmediatePropagation(),e.stopPropagation(),e.preventDefault())},r.prototype.destroy=function(e){var t=this;t.autoPlayClear(),t.touchObject={},t.cleanUpEvents(),c(".slick-cloned",t.$slider).detach(),t.$dots&&t.$dots.remove(),t.$prevArrow&&t.$prevArrow.length&&(t.$prevArrow.removeClass("slick-disabled slick-arrow slick-hidden").removeAttr("aria-hidden aria-disabled tabindex").css("display",""),t.htmlExpr.test(t.options.prevArrow)&&t.$prevArrow.remove()),t.$nextArrow&&t.$nextArrow.length&&(t.$nextArrow.removeClass("slick-disabled slick-arrow slick-hidden").removeAttr("aria-hidden aria-disabled tabindex").css("display",""),t.htmlExpr.test(t.options.nextArrow)&&t.$nextArrow.remove()),t.$slides&&(t.$slides.removeClass("slick-slide slick-active slick-center slick-visible slick-current").removeAttr("aria-hidden").removeAttr("data-slick-index").each(function(){c(this).attr("style",c(this).data("originalStyling"))}),t.$slideTrack.children(this.options.slide).detach(),t.$slideTrack.detach(),t.$list.detach(),t.$slider.append(t.$slides)),t.cleanUpRows(),t.$slider.removeClass("slick-slider"),t.$slider.removeClass("slick-initialized"),t.$slider.removeClass("slick-dotted"),t.unslicked=!0,e||t.$slider.trigger("destroy",[t])},r.prototype.disableTransition=function(e){var t={};t[this.transitionType]="",!1===this.options.fade?this.$slideTrack.css(t):this.$slides.eq(e).css(t)},r.prototype.fadeSlide=function(e,t){var n=this;!1===n.cssTransitions?(n.$slides.eq(e).css({zIndex:n.options.zIndex}),n.$slides.eq(e).animate({opacity:1},n.options.speed,n.options.easing,t)):(n.applyTransition(e),n.$slides.eq(e).css({opacity:1,zIndex:n.options.zIndex}),t&&setTimeout(function(){n.disableTransition(e),t.call()},n.options.speed))},r.prototype.fadeSlideOut=function(e){!1===this.cssTransitions?this.$slides.eq(e).animate({opacity:0,zIndex:this.options.zIndex-2},this.options.speed,this.options.easing):(this.applyTransition(e),this.$slides.eq(e).css({opacity:0,zIndex:this.options.zIndex-2}))},r.prototype.filterSlides=r.prototype.slickFilter=function(e){null!==e&&(this.$slidesCache=this.$slides,this.unload(),this.$slideTrack.children(this.options.slide).detach(),this.$slidesCache.filter(e).appendTo(this.$slideTrack),this.reinit())},r.prototype.focusHandler=function(){var n=this;n.$slider.off("focus.slick blur.slick").on("focus.slick","*",function(e){var t=c(this);setTimeout(function(){n.options.pauseOnFocus&&t.is(":focus")&&(n.focussed=!0,n.autoPlay())},0)}).on("blur.slick","*",function(e){c(this),n.options.pauseOnFocus&&(n.focussed=!1,n.autoPlay())})},r.prototype.getCurrent=r.prototype.slickCurrentSlide=function(){return this.currentSlide},r.prototype.getDotCount=function(){var e=this,t=0,n=0,i=0;if(!0===e.options.infinite)if(e.slideCount<=e.options.slidesToShow)++i;else for(;t<e.slideCount;)++i,t=n+e.options.slidesToScroll,n+=e.options.slidesToScroll<=e.options.slidesToShow?e.options.slidesToScroll:e.options.slidesToShow;else if(!0===e.options.centerMode)i=e.slideCount;else if(e.options.asNavFor)for(;t<e.slideCount;)++i,t=n+e.options.slidesToScroll,n+=e.options.slidesToScroll<=e.options.slidesToShow?e.options.slidesToScroll:e.options.slidesToShow;else i=1+Math.ceil((e.slideCount-e.options.slidesToShow)/e.options.slidesToScroll);return i-1},r.prototype.getLeft=function(e){var t,n,i,o,r=this,s=0;return r.slideOffset=0,n=r.$slides.first().outerHeight(!0),!0===r.options.infinite?(r.slideCount>r.options.slidesToShow&&(r.slideOffset=r.slideWidth*r.options.slidesToShow*-1,o=-1,!0===r.options.vertical&&!0===r.options.centerMode&&(2===r.options.slidesToShow?o=-1.5:1===r.options.slidesToShow&&(o=-2)),s=n*r.options.slidesToShow*o),r.slideCount%r.options.slidesToScroll!=0&&e+r.options.slidesToScroll>r.slideCount&&r.slideCount>r.options.slidesToShow&&(s=e>r.slideCount?(r.slideOffset=(r.options.slidesToShow-(e-r.slideCount))*r.slideWidth*-1,(r.options.slidesToShow-(e-r.slideCount))*n*-1):(r.slideOffset=r.slideCount%r.options.slidesToScroll*r.slideWidth*-1,r.slideCount%r.options.slidesToScroll*n*-1))):e+r.options.slidesToShow>r.slideCount&&(r.slideOffset=(e+r.options.slidesToShow-r.slideCount)*r.slideWidth,s=(e+r.options.slidesToShow-r.slideCount)*n),r.slideCount<=r.options.slidesToShow&&(s=r.slideOffset=0),!0===r.options.centerMode&&r.slideCount<=r.options.slidesToShow?r.slideOffset=r.slideWidth*Math.floor(r.options.slidesToShow)/2-r.slideWidth*r.slideCount/2:!0===r.options.centerMode&&!0===r.options.infinite?r.slideOffset+=r.slideWidth*Math.floor(r.options.slidesToShow/2)-r.slideWidth:!0===r.options.centerMode&&(r.slideOffset=0,r.slideOffset+=r.slideWidth*Math.floor(r.options.slidesToShow/2)),t=!1===r.options.vertical?e*r.slideWidth*-1+r.slideOffset:e*n*-1+s,!0===r.options.variableWidth&&(i=r.slideCount<=r.options.slidesToShow||!1===r.options.infinite?r.$slideTrack.children(".slick-slide").eq(e):r.$slideTrack.children(".slick-slide").eq(e+r.options.slidesToShow),t=!0===r.options.rtl?i[0]?-1*(r.$slideTrack.width()-i[0].offsetLeft-i.width()):0:i[0]?-1*i[0].offsetLeft:0,!0===r.options.centerMode&&(i=r.slideCount<=r.options.slidesToShow||!1===r.options.infinite?r.$slideTrack.children(".slick-slide").eq(e):r.$slideTrack.children(".slick-slide").eq(e+r.options.slidesToShow+1),t=!0===r.options.rtl?i[0]?-1*(r.$slideTrack.width()-i[0].offsetLeft-i.width()):0:i[0]?-1*i[0].offsetLeft:0,t+=(r.$list.width()-i.outerWidth())/2)),t},r.prototype.getOption=r.prototype.slickGetOption=function(e){return this.options[e]},r.prototype.getNavigableIndexes=function(){var e,t=this,n=0,i=0,o=[];for(e=!1===t.options.infinite?t.slideCount:(n=-1*t.options.slidesToScroll,i=-1*t.options.slidesToScroll,2*t.slideCount);n<e;)o.push(n),n=i+t.options.slidesToScroll,i+=t.options.slidesToScroll<=t.options.slidesToShow?t.options.slidesToScroll:t.options.slidesToShow;return o},r.prototype.getSlick=function(){return this},r.prototype.getSlideCount=function(){var o,r,e,s=this;return e=!0===s.options.centerMode?Math.floor(s.$list.width()/2):0,r=-1*s.swipeLeft+e,!0===s.options.swipeToSlide?(s.$slideTrack.find(".slick-slide").each(function(e,t){var n,i;if(n=c(t).outerWidth(),i=t.offsetLeft,!0!==s.options.centerMode&&(i+=n/2),r<i+n)return o=t,!1}),Math.abs(c(o).attr("data-slick-index")-s.currentSlide)||1):s.options.slidesToScroll},r.prototype.goTo=r.prototype.slickGoTo=function(e,t){this.changeSlide({data:{message:"index",index:parseInt(e)}},t)},r.prototype.init=function(e){var t=this;c(t.$slider).hasClass("slick-initialized")||(c(t.$slider).addClass("slick-initialized"),t.buildRows(),t.buildOut(),t.setProps(),t.startLoad(),t.loadSlider(),t.initializeEvents(),t.updateArrows(),t.updateDots(),t.checkResponsive(!0),t.focusHandler()),e&&t.$slider.trigger("init",[t]),!0===t.options.accessibility&&t.initADA(),t.options.autoplay&&(t.paused=!1,t.autoPlay())},r.prototype.initADA=function(){var i=this,n=Math.ceil(i.slideCount/i.options.slidesToShow),o=i.getNavigableIndexes().filter(function(e){return 0<=e&&e<i.slideCount});i.$slides.add(i.$slideTrack.find(".slick-cloned")).attr({"aria-hidden":"true",tabindex:"-1"}).find("a, input, button, select").attr({tabindex:"-1"}),null!==i.$dots&&(i.$slides.not(i.$slideTrack.find(".slick-cloned")).each(function(e){var t=o.indexOf(e);if(c(this).attr({role:"tabpanel",id:"slick-slide"+i.instanceUid+e,tabindex:-1}),-1!==t){var n="slick-slide-control"+i.instanceUid+t;c("#"+n).length&&c(this).attr({"aria-describedby":n})}}),i.$dots.attr("role","tablist").find("li").each(function(e){var t=o[e];c(this).attr({role:"presentation"}),c(this).find("button").first().attr({role:"tab",id:"slick-slide-control"+i.instanceUid+e,"aria-controls":"slick-slide"+i.instanceUid+t,"aria-label":e+1+" of "+n,"aria-selected":null,tabindex:"-1"})}).eq(i.currentSlide).find("button").attr({"aria-selected":"true",tabindex:"0"}).end());for(var e=i.currentSlide,t=e+i.options.slidesToShow;e<t;e++)i.options.focusOnChange?i.$slides.eq(e).attr({tabindex:"0"}):i.$slides.eq(e).removeAttr("tabindex");i.activateADA()},r.prototype.initArrowEvents=function(){var e=this;!0===e.options.arrows&&e.slideCount>e.options.slidesToShow&&(e.$prevArrow.off("click.slick").on("click.slick",{message:"previous"},e.changeSlide),e.$nextArrow.off("click.slick").on("click.slick",{message:"next"},e.changeSlide),!0===e.options.accessibility&&(e.$prevArrow.on("keydown.slick",e.keyHandler),e.$nextArrow.on("keydown.slick",e.keyHandler)))},r.prototype.initDotEvents=function(){var e=this;!0===e.options.dots&&e.slideCount>e.options.slidesToShow&&(c("li",e.$dots).on("click.slick",{message:"index"},e.changeSlide),!0===e.options.accessibility&&e.$dots.on("keydown.slick",e.keyHandler)),!0===e.options.dots&&!0===e.options.pauseOnDotsHover&&e.slideCount>e.options.slidesToShow&&c("li",e.$dots).on("mouseenter.slick",c.proxy(e.interrupt,e,!0)).on("mouseleave.slick",c.proxy(e.interrupt,e,!1))},r.prototype.initSlideEvents=function(){this.options.pauseOnHover&&(this.$list.on("mouseenter.slick",c.proxy(this.interrupt,this,!0)),this.$list.on("mouseleave.slick",c.proxy(this.interrupt,this,!1)))},r.prototype.initializeEvents=function(){var e=this;e.initArrowEvents(),e.initDotEvents(),e.initSlideEvents(),e.$list.on("touchstart.slick mousedown.slick",{action:"start"},e.swipeHandler),e.$list.on("touchmove.slick mousemove.slick",{action:"move"},e.swipeHandler),e.$list.on("touchend.slick mouseup.slick",{action:"end"},e.swipeHandler),e.$list.on("touchcancel.slick mouseleave.slick",{action:"end"},e.swipeHandler),e.$list.on("click.slick",e.clickHandler),c(document).on(e.visibilityChange,c.proxy(e.visibility,e)),!0===e.options.accessibility&&e.$list.on("keydown.slick",e.keyHandler),!0===e.options.focusOnSelect&&c(e.$slideTrack).children().on("click.slick",e.selectHandler),c(window).on("orientationchange.slick.slick-"+e.instanceUid,c.proxy(e.orientationChange,e)),c(window).on("resize.slick.slick-"+e.instanceUid,c.proxy(e.resize,e)),c("[draggable!=true]",e.$slideTrack).on("dragstart",e.preventDefault),c(window).on("load.slick.slick-"+e.instanceUid,e.setPosition),c(e.setPosition)},r.prototype.initUI=function(){!0===this.options.arrows&&this.slideCount>this.options.slidesToShow&&(this.$prevArrow.show(),this.$nextArrow.show()),!0===this.options.dots&&this.slideCount>this.options.slidesToShow&&this.$dots.show()},r.prototype.keyHandler=function(e){e.target.tagName.match("TEXTAREA|INPUT|SELECT")||(37===e.keyCode&&!0===this.options.accessibility?this.changeSlide({data:{message:!0===this.options.rtl?"next":"previous"}}):39===e.keyCode&&!0===this.options.accessibility&&this.changeSlide({data:{message:!0===this.options.rtl?"previous":"next"}}))},r.prototype.lazyLoad=function(){function e(e){c("img[data-lazy]",e).each(function(){var e=c(this),t=c(this).attr("data-lazy"),n=c(this).attr("data-srcset"),i=c(this).attr("data-sizes")||r.$slider.attr("data-sizes"),o=document.createElement("img");o.onload=function(){e.animate({opacity:0},100,function(){n&&(e.attr("srcset",n),i&&e.attr("sizes",i)),e.attr("src",t).animate({opacity:1},200,function(){e.removeAttr("data-lazy data-srcset data-sizes").removeClass("slick-loading")}),r.$slider.trigger("lazyLoaded",[r,e,t])})},o.onerror=function(){e.removeAttr("data-lazy").removeClass("slick-loading").addClass("slick-lazyload-error"),r.$slider.trigger("lazyLoadError",[r,e,t])},o.src=t})}var t,n,i,r=this;if(!0===r.options.centerMode?i=!0===r.options.infinite?(n=r.currentSlide+(r.options.slidesToShow/2+1))+r.options.slidesToShow+2:(n=Math.max(0,r.currentSlide-(r.options.slidesToShow/2+1)),r.options.slidesToShow/2+1+2+r.currentSlide):(n=r.options.infinite?r.options.slidesToShow+r.currentSlide:r.currentSlide,i=Math.ceil(n+r.options.slidesToShow),!0===r.options.fade&&(0<n&&n--,i<=r.slideCount&&i++)),t=r.$slider.find(".slick-slide").slice(n,i),"anticipated"===r.options.lazyLoad)for(var o=n-1,s=i,a=r.$slider.find(".slick-slide"),l=0;l<r.options.slidesToScroll;l++)o<0&&(o=r.slideCount-1),t=(t=t.add(a.eq(o))).add(a.eq(s)),o--,s++;e(t),r.slideCount<=r.options.slidesToShow?e(r.$slider.find(".slick-slide")):r.currentSlide>=r.slideCount-r.options.slidesToShow?e(r.$slider.find(".slick-cloned").slice(0,r.options.slidesToShow)):0===r.currentSlide&&e(r.$slider.find(".slick-cloned").slice(-1*r.options.slidesToShow))},r.prototype.loadSlider=function(){this.setPosition(),this.$slideTrack.css({opacity:1}),this.$slider.removeClass("slick-loading"),this.initUI(),"progressive"===this.options.lazyLoad&&this.progressiveLazyLoad()},r.prototype.next=r.prototype.slickNext=function(){this.changeSlide({data:{message:"next"}})},r.prototype.orientationChange=function(){this.checkResponsive(),this.setPosition()},r.prototype.pause=r.prototype.slickPause=function(){this.autoPlayClear(),this.paused=!0},r.prototype.play=r.prototype.slickPlay=function(){this.autoPlay(),this.options.autoplay=!0,this.paused=!1,this.focussed=!1,this.interrupted=!1},r.prototype.postSlide=function(e){var t=this;!t.unslicked&&(t.$slider.trigger("afterChange",[t,e]),t.animating=!1,t.slideCount>t.options.slidesToShow&&t.setPosition(),t.swipeLeft=null,t.options.autoplay&&t.autoPlay(),!0===t.options.accessibility&&(t.initADA(),t.options.focusOnChange))&&c(t.$slides.get(t.currentSlide)).attr("tabindex",0).focus()},r.prototype.prev=r.prototype.slickPrev=function(){this.changeSlide({data:{message:"previous"}})},r.prototype.preventDefault=function(e){e.preventDefault()},r.prototype.progressiveLazyLoad=function(e){e=e||1;var t,n,i,o,r,s=this,a=c("img[data-lazy]",s.$slider);a.length?(t=a.first(),n=t.attr("data-lazy"),i=t.attr("data-srcset"),o=t.attr("data-sizes")||s.$slider.attr("data-sizes"),(r=document.createElement("img")).onload=function(){i&&(t.attr("srcset",i),o&&t.attr("sizes",o)),t.attr("src",n).removeAttr("data-lazy data-srcset data-sizes").removeClass("slick-loading"),!0===s.options.adaptiveHeight&&s.setPosition(),s.$slider.trigger("lazyLoaded",[s,t,n]),s.progressiveLazyLoad()},r.onerror=function(){e<3?setTimeout(function(){s.progressiveLazyLoad(e+1)},500):(t.removeAttr("data-lazy").removeClass("slick-loading").addClass("slick-lazyload-error"),s.$slider.trigger("lazyLoadError",[s,t,n]),s.progressiveLazyLoad())},r.src=n):s.$slider.trigger("allImagesLoaded",[s])},r.prototype.refresh=function(e){var t,n,i=this;n=i.slideCount-i.options.slidesToShow,!i.options.infinite&&i.currentSlide>n&&(i.currentSlide=n),i.slideCount<=i.options.slidesToShow&&(i.currentSlide=0),t=i.currentSlide,i.destroy(!0),c.extend(i,i.initials,{currentSlide:t}),i.init(),e||i.changeSlide({data:{message:"index",index:t}},!1)},r.prototype.registerBreakpoints=function(){var e,t,n,i=this,o=i.options.responsive||null;if("array"===c.type(o)&&o.length){for(e in i.respondTo=i.options.respondTo||"window",o)if(n=i.breakpoints.length-1,o.hasOwnProperty(e)){for(t=o[e].breakpoint;0<=n;)i.breakpoints[n]&&i.breakpoints[n]===t&&i.breakpoints.splice(n,1),n--;i.breakpoints.push(t),i.breakpointSettings[t]=o[e].settings}i.breakpoints.sort(function(e,t){return i.options.mobileFirst?e-t:t-e})}},r.prototype.reinit=function(){var e=this;e.$slides=e.$slideTrack.children(e.options.slide).addClass("slick-slide"),e.slideCount=e.$slides.length,e.currentSlide>=e.slideCount&&0!==e.currentSlide&&(e.currentSlide=e.currentSlide-e.options.slidesToScroll),e.slideCount<=e.options.slidesToShow&&(e.currentSlide=0),e.registerBreakpoints(),e.setProps(),e.setupInfinite(),e.buildArrows(),e.updateArrows(),e.initArrowEvents(),e.buildDots(),e.updateDots(),e.initDotEvents(),e.cleanUpSlideEvents(),e.initSlideEvents(),e.checkResponsive(!1,!0),!0===e.options.focusOnSelect&&c(e.$slideTrack).children().on("click.slick",e.selectHandler),e.setSlideClasses("number"==typeof e.currentSlide?e.currentSlide:0),e.setPosition(),e.focusHandler(),e.paused=!e.options.autoplay,e.autoPlay(),e.$slider.trigger("reInit",[e])},r.prototype.resize=function(){var e=this;c(window).width()!==e.windowWidth&&(clearTimeout(e.windowDelay),e.windowDelay=window.setTimeout(function(){e.windowWidth=c(window).width(),e.checkResponsive(),e.unslicked||e.setPosition()},50))},r.prototype.removeSlide=r.prototype.slickRemove=function(e,t,n){var i=this;return e="boolean"==typeof e?!0===(t=e)?0:i.slideCount-1:!0===t?--e:e,!(i.slideCount<1||e<0||e>i.slideCount-1)&&(i.unload(),!0===n?i.$slideTrack.children().remove():i.$slideTrack.children(this.options.slide).eq(e).remove(),i.$slides=i.$slideTrack.children(this.options.slide),i.$slideTrack.children(this.options.slide).detach(),i.$slideTrack.append(i.$slides),i.$slidesCache=i.$slides,void i.reinit())},r.prototype.setCSS=function(e){var t,n,i=this,o={};!0===i.options.rtl&&(e=-e),t="left"==i.positionProp?Math.ceil(e)+"px":"0px",n="top"==i.positionProp?Math.ceil(e)+"px":"0px",o[i.positionProp]=e,!1===i.transformsEnabled||(!(o={})===i.cssTransitions?o[i.animType]="translate("+t+", "+n+")":o[i.animType]="translate3d("+t+", "+n+", 0px)"),i.$slideTrack.css(o)},r.prototype.setDimensions=function(){var e=this;!1===e.options.vertical?!0===e.options.centerMode&&e.$list.css({padding:"0px "+e.options.centerPadding}):(e.$list.height(e.$slides.first().outerHeight(!0)*e.options.slidesToShow),!0===e.options.centerMode&&e.$list.css({padding:e.options.centerPadding+" 0px"})),e.listWidth=e.$list.width(),e.listHeight=e.$list.height(),!1===e.options.vertical&&!1===e.options.variableWidth?(e.slideWidth=Math.ceil(e.listWidth/e.options.slidesToShow),e.$slideTrack.width(Math.ceil(e.slideWidth*e.$slideTrack.children(".slick-slide").length))):!0===e.options.variableWidth?e.$slideTrack.width(5e3*e.slideCount):(e.slideWidth=Math.ceil(e.listWidth),e.$slideTrack.height(Math.ceil(e.$slides.first().outerHeight(!0)*e.$slideTrack.children(".slick-slide").length)));var t=e.$slides.first().outerWidth(!0)-e.$slides.first().width();!1===e.options.variableWidth&&e.$slideTrack.children(".slick-slide").width(e.slideWidth-t)},r.prototype.setFade=function(){var n,i=this;i.$slides.each(function(e,t){n=i.slideWidth*e*-1,!0===i.options.rtl?c(t).css({position:"relative",right:n,top:0,zIndex:i.options.zIndex-2,opacity:0}):c(t).css({position:"relative",left:n,top:0,zIndex:i.options.zIndex-2,opacity:0})}),i.$slides.eq(i.currentSlide).css({zIndex:i.options.zIndex-1,opacity:1})},r.prototype.setHeight=function(){if(1===this.options.slidesToShow&&!0===this.options.adaptiveHeight&&!1===this.options.vertical){var e=this.$slides.eq(this.currentSlide).outerHeight(!0);this.$list.css("height",e)}},r.prototype.setOption=r.prototype.slickSetOption=function(){var e,t,n,i,o,r=this,s=!1;if("object"===c.type(arguments[0])?(n=arguments[0],s=arguments[1],o="multiple"):"string"===c.type(arguments[0])&&(n=arguments[0],i=arguments[1],s=arguments[2],"responsive"===arguments[0]&&"array"===c.type(arguments[1])?o="responsive":void 0!==arguments[1]&&(o="single")),"single"===o)r.options[n]=i;else if("multiple"===o)c.each(n,function(e,t){r.options[e]=t});else if("responsive"===o)for(t in i)if("array"!==c.type(r.options.responsive))r.options.responsive=[i[t]];else{for(e=r.options.responsive.length-1;0<=e;)r.options.responsive[e].breakpoint===i[t].breakpoint&&r.options.responsive.splice(e,1),e--;r.options.responsive.push(i[t])}s&&(r.unload(),r.reinit())},r.prototype.setPosition=function(){this.setDimensions(),this.setHeight(),!1===this.options.fade?this.setCSS(this.getLeft(this.currentSlide)):this.setFade(),this.$slider.trigger("setPosition",[this])},r.prototype.setProps=function(){var e=this,t=document.body.style;e.positionProp=!0===e.options.vertical?"top":"left","top"===e.positionProp?e.$slider.addClass("slick-vertical"):e.$slider.removeClass("slick-vertical"),void 0===t.WebkitTransition&&void 0===t.MozTransition&&void 0===t.msTransition||!0===e.options.useCSS&&(e.cssTransitions=!0),e.options.fade&&("number"==typeof e.options.zIndex?e.options.zIndex<3&&(e.options.zIndex=3):e.options.zIndex=e.defaults.zIndex),void 0!==t.OTransform&&(e.animType="OTransform",e.transformType="-o-transform",e.transitionType="OTransition",void 0===t.perspectiveProperty&&void 0===t.webkitPerspective&&(e.animType=!1)),void 0!==t.MozTransform&&(e.animType="MozTransform",e.transformType="-moz-transform",e.transitionType="MozTransition",void 0===t.perspectiveProperty&&void 0===t.MozPerspective&&(e.animType=!1)),void 0!==t.webkitTransform&&(e.animType="webkitTransform",e.transformType="-webkit-transform",e.transitionType="webkitTransition",void 0===t.perspectiveProperty&&void 0===t.webkitPerspective&&(e.animType=!1)),void 0!==t.msTransform&&(e.animType="msTransform",e.transformType="-ms-transform",e.transitionType="msTransition",void 0===t.msTransform&&(e.animType=!1)),void 0!==t.transform&&!1!==e.animType&&(e.animType="transform",e.transformType="transform",e.transitionType="transition"),e.transformsEnabled=e.options.useTransform&&null!==e.animType&&!1!==e.animType},r.prototype.setSlideClasses=function(e){var t,n,i,o,r=this;if(n=r.$slider.find(".slick-slide").removeClass("slick-active slick-center slick-current").attr("aria-hidden","true"),r.$slides.eq(e).addClass("slick-current"),!0===r.options.centerMode){var s=r.options.slidesToShow%2==0?1:0;t=Math.floor(r.options.slidesToShow/2),!0===r.options.infinite&&(t<=e&&e<=r.slideCount-1-t?r.$slides.slice(e-t+s,e+t+1).addClass("slick-active").attr("aria-hidden","false"):(i=r.options.slidesToShow+e,n.slice(i-t+1+s,i+t+2).addClass("slick-active").attr("aria-hidden","false")),0===e?n.eq(n.length-1-r.options.slidesToShow).addClass("slick-center"):e===r.slideCount-1&&n.eq(r.options.slidesToShow).addClass("slick-center")),r.$slides.eq(e).addClass("slick-center")}else 0<=e&&e<=r.slideCount-r.options.slidesToShow?r.$slides.slice(e,e+r.options.slidesToShow).addClass("slick-active").attr("aria-hidden","false"):n.length<=r.options.slidesToShow?n.addClass("slick-active").attr("aria-hidden","false"):(o=r.slideCount%r.options.slidesToShow,i=!0===r.options.infinite?r.options.slidesToShow+e:e,r.options.slidesToShow==r.options.slidesToScroll&&r.slideCount-e<r.options.slidesToShow?n.slice(i-(r.options.slidesToShow-o),i+o).addClass("slick-active").attr("aria-hidden","false"):n.slice(i,i+r.options.slidesToShow).addClass("slick-active").attr("aria-hidden","false"));"ondemand"!==r.options.lazyLoad&&"anticipated"!==r.options.lazyLoad||r.lazyLoad()},r.prototype.setupInfinite=function(){var e,t,n,i=this;if(!0===i.options.fade&&(i.options.centerMode=!1),!0===i.options.infinite&&!1===i.options.fade&&(t=null,i.slideCount>i.options.slidesToShow)){for(n=!0===i.options.centerMode?i.options.slidesToShow+1:i.options.slidesToShow,e=i.slideCount;e>i.slideCount-n;e-=1)t=e-1,c(i.$slides[t]).clone(!0).attr("id","").attr("data-slick-index",t-i.slideCount).prependTo(i.$slideTrack).addClass("slick-cloned");for(e=0;e<n+i.slideCount;e+=1)t=e,c(i.$slides[t]).clone(!0).attr("id","").attr("data-slick-index",t+i.slideCount).appendTo(i.$slideTrack).addClass("slick-cloned");i.$slideTrack.find(".slick-cloned").find("[id]").each(function(){c(this).attr("id","")})}},r.prototype.interrupt=function(e){e||this.autoPlay(),this.interrupted=e},r.prototype.selectHandler=function(e){var t=c(e.target).is(".slick-slide")?c(e.target):c(e.target).parents(".slick-slide"),n=parseInt(t.attr("data-slick-index"));return n||(n=0),this.slideCount<=this.options.slidesToShow?void this.slideHandler(n,!1,!0):void this.slideHandler(n)},r.prototype.slideHandler=function(e,t,n){var i,o,r,s,a,l=null,c=this;if(t=t||!1,!(!0===c.animating&&!0===c.options.waitForAnimate||!0===c.options.fade&&c.currentSlide===e))return!1===t&&c.asNavFor(e),i=e,l=c.getLeft(i),s=c.getLeft(c.currentSlide),c.currentLeft=null===c.swipeLeft?s:c.swipeLeft,!1===c.options.infinite&&!1===c.options.centerMode&&(e<0||e>c.getDotCount()*c.options.slidesToScroll)?void(!1===c.options.fade&&(i=c.currentSlide,!0!==n&&c.slideCount>c.options.slidesToShow?c.animateSlide(s,function(){c.postSlide(i)}):c.postSlide(i))):!1===c.options.infinite&&!0===c.options.centerMode&&(e<0||e>c.slideCount-c.options.slidesToScroll)?void(!1===c.options.fade&&(i=c.currentSlide,!0!==n&&c.slideCount>c.options.slidesToShow?c.animateSlide(s,function(){c.postSlide(i)}):c.postSlide(i))):(c.options.autoplay&&clearInterval(c.autoPlayTimer),o=i<0?c.slideCount%c.options.slidesToScroll!=0?c.slideCount-c.slideCount%c.options.slidesToScroll:c.slideCount+i:i>=c.slideCount?c.slideCount%c.options.slidesToScroll!=0?0:i-c.slideCount:i,c.animating=!0,c.$slider.trigger("beforeChange",[c,c.currentSlide,o]),r=c.currentSlide,c.currentSlide=o,c.setSlideClasses(c.currentSlide),c.options.asNavFor&&((a=(a=c.getNavTarget()).slick("getSlick")).slideCount<=a.options.slidesToShow&&a.setSlideClasses(c.currentSlide)),c.updateDots(),c.updateArrows(),!0===c.options.fade?(!0!==n?(c.fadeSlideOut(r),c.fadeSlide(o,function(){c.postSlide(o)})):c.postSlide(o),void c.animateHeight()):void(!0!==n&&c.slideCount>c.options.slidesToShow?c.animateSlide(l,function(){c.postSlide(o)}):c.postSlide(o)))},r.prototype.startLoad=function(){var e=this;!0===e.options.arrows&&e.slideCount>e.options.slidesToShow&&(e.$prevArrow.hide(),e.$nextArrow.hide()),!0===e.options.dots&&e.slideCount>e.options.slidesToShow&&e.$dots.hide(),e.$slider.addClass("slick-loading")},r.prototype.swipeDirection=function(){var e,t,n,i;return e=this.touchObject.startX-this.touchObject.curX,t=this.touchObject.startY-this.touchObject.curY,n=Math.atan2(t,e),(i=Math.round(180*n/Math.PI))<0&&(i=360-Math.abs(i)),i<=45&&0<=i?!1===this.options.rtl?"left":"right":i<=360&&315<=i?!1===this.options.rtl?"left":"right":135<=i&&i<=225?!1===this.options.rtl?"right":"left":!0===this.options.verticalSwiping?35<=i&&i<=135?"down":"up":"vertical"},r.prototype.swipeEnd=function(e){var t,n,i=this;if(i.dragging=!1,i.swiping=!1,i.scrolling)return i.scrolling=!1;if(i.interrupted=!1,i.shouldClick=!(10<i.touchObject.swipeLength),void 0===i.touchObject.curX)return!1;if(!0===i.touchObject.edgeHit&&i.$slider.trigger("edge",[i,i.swipeDirection()]),i.touchObject.swipeLength>=i.touchObject.minSwipe){switch(n=i.swipeDirection()){case"left":case"down":t=i.options.swipeToSlide?i.checkNavigable(i.currentSlide+i.getSlideCount()):i.currentSlide+i.getSlideCount(),i.currentDirection=0;break;case"right":case"up":t=i.options.swipeToSlide?i.checkNavigable(i.currentSlide-i.getSlideCount()):i.currentSlide-i.getSlideCount(),i.currentDirection=1}"vertical"!=n&&(i.slideHandler(t),i.touchObject={},i.$slider.trigger("swipe",[i,n]))}else i.touchObject.startX!==i.touchObject.curX&&(i.slideHandler(i.currentSlide),i.touchObject={})},r.prototype.swipeHandler=function(e){var t=this;if(!(!1===t.options.swipe||"ontouchend"in document&&!1===t.options.swipe||!1===t.options.draggable&&-1!==e.type.indexOf("mouse")))switch(t.touchObject.fingerCount=e.originalEvent&&void 0!==e.originalEvent.touches?e.originalEvent.touches.length:1,t.touchObject.minSwipe=t.listWidth/t.options.touchThreshold,!0===t.options.verticalSwiping&&(t.touchObject.minSwipe=t.listHeight/t.options.touchThreshold),e.data.action){case"start":t.swipeStart(e);break;case"move":t.swipeMove(e);break;case"end":t.swipeEnd(e)}},r.prototype.swipeMove=function(e){var t,n,i,o,r,s,a=this;return r=void 0!==e.originalEvent?e.originalEvent.touches:null,!(!a.dragging||a.scrolling||r&&1!==r.length)&&(t=a.getLeft(a.currentSlide),a.touchObject.curX=void 0!==r?r[0].pageX:e.clientX,a.touchObject.curY=void 0!==r?r[0].pageY:e.clientY,a.touchObject.swipeLength=Math.round(Math.sqrt(Math.pow(a.touchObject.curX-a.touchObject.startX,2))),s=Math.round(Math.sqrt(Math.pow(a.touchObject.curY-a.touchObject.startY,2))),!a.options.verticalSwiping&&!a.swiping&&4<s?!(a.scrolling=!0):(!0===a.options.verticalSwiping&&(a.touchObject.swipeLength=s),n=a.swipeDirection(),void 0!==e.originalEvent&&4<a.touchObject.swipeLength&&(a.swiping=!0,e.preventDefault()),o=(!1===a.options.rtl?1:-1)*(a.touchObject.curX>a.touchObject.startX?1:-1),!0===a.options.verticalSwiping&&(o=a.touchObject.curY>a.touchObject.startY?1:-1),i=a.touchObject.swipeLength,(a.touchObject.edgeHit=!1)===a.options.infinite&&(0===a.currentSlide&&"right"===n||a.currentSlide>=a.getDotCount()&&"left"===n)&&(i=a.touchObject.swipeLength*a.options.edgeFriction,a.touchObject.edgeHit=!0),!1===a.options.vertical?a.swipeLeft=t+i*o:a.swipeLeft=t+i*(a.$list.height()/a.listWidth)*o,!0===a.options.verticalSwiping&&(a.swipeLeft=t+i*o),!0!==a.options.fade&&!1!==a.options.touchMove&&(!0===a.animating?(a.swipeLeft=null,!1):void a.setCSS(a.swipeLeft))))},r.prototype.swipeStart=function(e){var t,n=this;return n.interrupted=!0,1!==n.touchObject.fingerCount||n.slideCount<=n.options.slidesToShow?!(n.touchObject={}):(void 0!==e.originalEvent&&void 0!==e.originalEvent.touches&&(t=e.originalEvent.touches[0]),n.touchObject.startX=n.touchObject.curX=void 0!==t?t.pageX:e.clientX,n.touchObject.startY=n.touchObject.curY=void 0!==t?t.pageY:e.clientY,void(n.dragging=!0))},r.prototype.unfilterSlides=r.prototype.slickUnfilter=function(){null!==this.$slidesCache&&(this.unload(),this.$slideTrack.children(this.options.slide).detach(),this.$slidesCache.appendTo(this.$slideTrack),this.reinit())},r.prototype.unload=function(){var e=this;c(".slick-cloned",e.$slider).remove(),e.$dots&&e.$dots.remove(),e.$prevArrow&&e.htmlExpr.test(e.options.prevArrow)&&e.$prevArrow.remove(),e.$nextArrow&&e.htmlExpr.test(e.options.nextArrow)&&e.$nextArrow.remove(),e.$slides.removeClass("slick-slide slick-active slick-visible slick-current").attr("aria-hidden","true").css("width","")},r.prototype.unslick=function(e){this.$slider.trigger("unslick",[this,e]),this.destroy()},r.prototype.updateArrows=function(){var e=this;Math.floor(e.options.slidesToShow/2),!0===e.options.arrows&&e.slideCount>e.options.slidesToShow&&!e.options.infinite&&(e.$prevArrow.removeClass("slick-disabled").attr("aria-disabled","false"),e.$nextArrow.removeClass("slick-disabled").attr("aria-disabled","false"),0===e.currentSlide?(e.$prevArrow.addClass("slick-disabled").attr("aria-disabled","true"),e.$nextArrow.removeClass("slick-disabled").attr("aria-disabled","false")):e.currentSlide>=e.slideCount-e.options.slidesToShow&&!1===e.options.centerMode?(e.$nextArrow.addClass("slick-disabled").attr("aria-disabled","true"),e.$prevArrow.removeClass("slick-disabled").attr("aria-disabled","false")):e.currentSlide>=e.slideCount-1&&!0===e.options.centerMode&&(e.$nextArrow.addClass("slick-disabled").attr("aria-disabled","true"),e.$prevArrow.removeClass("slick-disabled").attr("aria-disabled","false")))},r.prototype.updateDots=function(){null!==this.$dots&&(this.$dots.find("li").removeClass("slick-active").end(),this.$dots.find("li").eq(Math.floor(this.currentSlide/this.options.slidesToScroll)).addClass("slick-active"))},r.prototype.visibility=function(){this.options.autoplay&&(document[this.hidden]?this.interrupted=!0:this.interrupted=!1)},c.fn.slick=function(){var e,t,n=arguments[0],i=Array.prototype.slice.call(arguments,1),o=this.length;for(e=0;e<o;e++)if("object"==typeof n||void 0===n?this[e].slick=new r(this[e],n):t=this[e].slick[n].apply(this[e].slick,i),void 0!==t)return t;return this}}),$(document).ready(function(){$(".slider_container").slick({dots:!0,infinite:!0,arrows:!0,speed:1e3,slidesToShow:1}),$(".image_container").slick({dots:!1,infinite:!0,arrows:!0,speed:1e3,slidesToShow:1})}),$(document).ready(function(){$(".slider_product").slick({dots:!0,infinite:!1,arrows:!0,speed:1e3,slidesToShow:5,slidesToScroll:5,responsive:[{breakpoint:1280,settings:{slidesToShow:3,slidesToScroll:3,infinite:!0,dots:!0,infinite:!1}},{breakpoint:767,settings:{slidesToShow:1,slidesToScroll:1,infinite:!0,dots:!0,infinite:!1}}]})}),$(document).ready(function(){$(".slider_product_hits").slick({dots:!0,infinite:!1,arrows:!0,speed:1e3,slidesToShow:5,slidesToScroll:5,responsive:[{breakpoint:1280,settings:{slidesToShow:3,slidesToScroll:3,infinite:!0,dots:!0,infinite:!1}},{breakpoint:767,settings:{slidesToShow:1,slidesToScroll:1,infinite:!0,dots:!0,infinite:!1}}]}),$(".slider_feedback").slick({dots:!0,infinite:!1,arrows:!0,speed:1e3,slidesToShow:2,slidesToScroll:2,responsive:[{breakpoint:1280,settings:{slidesToShow:1,slidesToScroll:1,infinite:!0,dots:!0,infinite:!1}},{breakpoint:767,settings:{slidesToShow:1,slidesToScroll:1,infinite:!0,dots:!0,infinite:!1}}]});var e=document.querySelectorAll(".slider-nav img");e&&($(".slider-for").slick({slidesToShow:1,slidesToScroll:1,dots:!0,arrows:!0,fade:!0,asNavFor:".slider-nav"}),$(".slider-nav").slick({slidesToShow:e.length,slidesToScroll:1,vertical:!0,dots:!1,arrows:!1,verticalSwiping:!0,asNavFor:".slider-for",focusOnSelect:!0}))}),window.onload=function(){var e=document.querySelectorAll(".slider_product")[0],t=document.querySelectorAll(".slider_product_hits")[0];e&&(e.addEventListener("mouseup",function(){for(var e=0;e<d.length;e++)1==d[e].classList.length&&(u[0].innerHTML=d[e].children[0].innerHTML)}),e.addEventListener("touchend",function(){for(var e=0;e<d.length;e++)1==d[e].classList.length&&(u[0].innerHTML=d[e].children[0].innerHTML)})),t&&(t.addEventListener("mouseup",function(){for(var e=0;e<p.length;e++)1==p[e].classList.length&&(u[1].innerHTML=p[e].children[0].innerHTML)}),t.addEventListener("touchend",function(){for(var e=0;e<p.length;e++)1==p[e].classList.length&&(u[1].innerHTML=p[e].children[0].innerHTML)}));for(var n=document.querySelectorAll("body")[0],i=document.getElementsByClassName("hover_down"),o=document.getElementsByClassName("m_header_top_lang")[0],r=document.getElementsByClassName("arrow_click"),s=document.querySelectorAll(".slider_product .slick-arrow"),a=document.querySelectorAll(".slider_product_hits .slick-arrow"),l=document.querySelectorAll(".slider_feedback .slick-arrow"),c=document.getElementsByClassName("size"),u=document.getElementsByClassName("size_up"),d=document.querySelectorAll(".slider_product .slick-dots li"),p=document.querySelectorAll(".slider_product_hits .slick-dots li"),f=document.querySelectorAll(".slider_feedback .slick-dots li"),h=0;h<s.length;h++)r[0].appendChild(s[h]);if(0==d.length)d=null;else{c[0].innerHTML=d.length,s[1].addEventListener("click",function(){for(var e=0;e<d.length;e++)1==d[e].classList.length&&(u[0].innerHTML=d[e].children[0].innerHTML)}),s[0].addEventListener("click",function(){for(var e=0;e<d.length;e++)1==d[e].classList.length&&(u[0].innerHTML=d[e].children[0].innerHTML)});for(h=0;h<a.length;h++)r[1].appendChild(a[h]);c[1].innerHTML=p.length,a[1].addEventListener("click",function(){for(var e=0;e<p.length;e++)1==p[e].classList.length&&(u[1].innerHTML=p[e].children[0].innerHTML)}),a[0].addEventListener("click",function(){for(var e=0;e<p.length;e++)1==p[e].classList.length&&(u[1].innerHTML=p[e].children[0].innerHTML)})}var m=document.querySelectorAll("form.feedback_items .click_assessment>div");if(m){var g={count:0};function v(e){if(0===e.currentTarget.classList.length){e.currentTarget.classList.add("active");for(var t=0;t<m.length;t++)if(1===m[t].classList.length){g.count=t;for(var n=0;n<g.count;n++)m[n].classList.add("active")}}else{e.currentTarget.classList.remove("active");for(t=0;t<m.length;t++)if(0===m[t].classList.length){g.count=t;for(n=g.count;n<m.length;n++)e.currentTarget.classList.add("active"),m[n].classList.remove("active")}}for(t=0;t<m.length;t++)1===m[t].classList.length&&t+1}for(h=0;h<m.length;h++)m[h].addEventListener("click",v,!1)}var y=document.getElementsByClassName("tabs_product")[0];if(y&&(y.onmouseover=function(e){for(var t=0;t<y.children.length;t++)y.children[t].classList.remove("active");var n=e.target;"LI"===n.nodeName?n.classList.add("active"):"A"===n.nodeName&&n.parentNode.classList.add("active")},y.onmouseout=function(e){var t=e.target;"LI"===t.nodeName?t.classList.remove("active"):"A"===t.nodeName&&t.parentNode.classList.remove("active")}),0===f.length)f=null;else{for(h=0;h<l.length;h++)r[0].appendChild(l[h]);c[0].innerHTML=f.length,l[1].addEventListener("click",function(){for(var e=0;e<f.length;e++)1==f[e].classList.length&&(u[0].innerHTML=f[e].children[0].innerHTML)}),l[0].addEventListener("click",function(){for(var e=0;e<f.length;e++)1==f[e].classList.length&&(u[0].innerHTML=f[e].children[0].innerHTML)})}var k=document.querySelectorAll(".catalog_items  .item_product ");for(h=0;h<k.length;h++){var b=document.createElement("div");k[h].parentNode.appendChild(b),b.classList.add("product_size"),b.appendChild(k[h])}function x(e){for(var t=0;t<k.length;t++)k[t].style.zIndex="1";e.currentTarget.style.zIndex="14"}for(h=0;h<k.length;h++)k[h].addEventListener("mouseover",x,!1);var w=document.getElementsByClassName("button_catalog")[0],S=document.getElementsByClassName("device_container")[0];if(w){function C(e){for(var t=0;t<o.children.length;t++)o.children[t].classList.remove("active");e.target.classList.add("active")}w.addEventListener("click",function(){setTimeout(function(){S.classList.remove("active-scale")},500),2===S.classList.length?S.classList.add("active"):(S.classList.remove("active"),S.classList.add("active-scale"))});for(h=0;h<o.children.length;h++)o.children[h].addEventListener("click",C,!1)}if(window.innerWidth<=767){var T=document.getElementsByClassName("link_hover"),E=document.getElementsByClassName("hamburger"),A=document.getElementsByClassName("modal_header_menu")[0],P=document.getElementsByClassName("modal_header_top")[0],N=document.querySelectorAll(".content_footer .mob_row")[0],L=document.querySelectorAll(".content_footer>div:last-child")[0],_=document.getElementsByClassName("mob_tel_search")[0],D=document.getElementsByClassName("mobile_header_top")[0];function O(e){"active"===e.currentTarget.classList[e.currentTarget.classList.length-1]?(n.classList.remove("modal_open"),e.currentTarget.classList.remove("active"),A.classList.remove("active"),E[1].classList.remove("active")):(setTimeout(function(){n.classList.add("modal_open")},500),e.currentTarget.classList.add("active"),E[0].classList.add("active"),A.classList.add("active"))}L&&(N.children[0].appendChild(L.lastElementChild),D.appendChild(_),o&&P.appendChild(o));for(h=0;h<E.length;h++)E[h].addEventListener("click",O,!1);for(var M=[],j=document.getElementById("device"),H=0;H<i.length;H++){var F=document.createElement("div");j.children[H].appendChild(F),F.classList.add("drop_down"),F.appendChild(T[H]);for(h=0;h<i[H].children.length-1;h++)for(var q=0;q<i[H].children[h].children[0].children.length;q++)M.push(i[H].children[h].children[0].children[q]);i[H].children[0].children[0].innerHTML="",countAdaptive=1;for(h=0;h<M.length;h++)i[H].children[0].children[0].appendChild(M[h]);M=[]}var I=document.getElementsByClassName("drop_down");function R(e){"active"===e.currentTarget.parentNode.classList[e.currentTarget.classList.length-1]?(e.currentTarget.parentNode.classList.remove("active"),e.currentTarget.parentNode.children[0].classList.remove("active")):(e.currentTarget.parentNode.children[0].classList.add("active"),e.currentTarget.parentNode.classList.add("active"))}for(h=0;h<I.length;h++)I[h].addEventListener("click",R,!1)}else if(window.innerWidth<=1280){var B=[],z=0;for(H=0;H<i.length;H++){for(h=0;h<i[H].children.length-1;h++)for(q=0;q<i[H].children[h].children[0].children.length;q++)B.push(i[H].children[h].children[0].children[q]);for(q=0;q<i[H].children.length-3;q++){i[H].children[q].children[0].innerHTML="",z=1;for(h=0;h<B.length;h++)h<B.length/2?i[H].children[q].children[0].appendChild(B[h]):i[H].children[z].children[0].appendChild(B[h])}B=[]}}if(window.innerWidth<=1280){var U=document.getElementsByClassName("filters_product_container")[0],W=document.getElementsByClassName("banner")[0];U&&U.appendChild(W)}if(window.innerWidth<=767){var V=document.getElementsByClassName("button_close")[0],G=document.getElementsByClassName("text_container")[0],X=document.getElementsByClassName("items_online_store")[1];void 0===X||G.appendChild(X.children[0]);var K=document.getElementsByClassName("filter_product")[0],Y=document.getElementsByClassName("pop_up_mobile_filter")[0];if(Y)Y.appendChild(K),document.getElementsByClassName("filter_mobile")[0].addEventListener("click",function(){Y.classList.add("active"),V.classList.add("active"),setTimeout(function(){n.classList.add("modal_open")},500),V.addEventListener("click",function(){Y.classList.remove("active"),n.classList.remove("modal_open"),V.classList.remove("active")})});var Q=document.getElementsByClassName("tabs_product")[0];Q&&Q.addEventListener("wheel",function(e){if(e.deltaMode==e.DOM_DELTA_PIXEL)var t=1;else if(e.deltaMode==e.DOM_DELTA_LINE)t=parseInt(getComputedStyle(this).lineHeight);else if(e.deltaMode==e.DOM_DELTA_PAGE)t=this.clientHeight;0!=e.deltaY&&(this.scrollLeft+=t*e.deltaY,e.preventDefault())});var J=document.getElementsByClassName("header_product_conainer")[0],Z=document.getElementsByClassName("article_size"),ee=document.getElementsByClassName("buy_size"),te=document.getElementsByClassName("result_size");if(0===Z.length)Z=void 0;else{J.children[1].classList.remove("article_size"),J.children[2].classList.remove("buy_size"),J.children[4].classList.remove("result_size");for(h=0;h<Z.length;h++)Z[h].appendChild(J.children[1].cloneNode(!0)),ee[h].appendChild(J.children[2].cloneNode(!0)),te[h].appendChild(J.children[4].cloneNode(!0))}}var ne=document.getElementsByClassName("headert_tabs")[0],ie=document.getElementsByClassName("tabs_container")[0];if(ne){function oe(e){for(var t=0;t<ne.children.length;t++)0===ne.children[t].classList.length?(ne.children[t].classList.add("active"),ie.children[t].classList.add("active")):(ne.children[t].classList.remove("active"),ie.children[t].classList.remove("active"))}for(h=0;h<ne.children.length;h++)ne.children[h].addEventListener("click",oe,!1)}var re=document.getElementsByClassName("tabs_brands_links")[0],se=document.getElementsByClassName("tabs_container_brands")[0];if(re){function ae(e){for(var t=0;t<re.children.length;t++)re.children[t].classList.remove("active");e.currentTarget.classList.add("active");for(t=0;t<re.children.length;t++)se.children[t].classList.remove("active"),1===re.children[t].classList.length&&se.children[t].classList.add("active")}for(h=0;h<re.children.length;h++)re.children[h].addEventListener("click",ae,!1)}var le=document.querySelectorAll(".info_content_product>.buy_product>.buy");if(0===le.length);else{le[0].addEventListener("click",function(){document.getElementsByClassName("popup_buy_click")[0].style.display="block"}),document.querySelectorAll(".info_content_product>.buy_product>.buy_one")[0].addEventListener("click",function(){document.getElementsByClassName("one_click_popup")[0].style.display="block"});var ce=document.querySelectorAll(".header_close>div");ce[0].addEventListener("click",function(){document.getElementsByClassName("popup_buy_click")[0].style.display="none"}),ce[1].addEventListener("click",function(){document.getElementsByClassName("one_click_popup")[0].style.display="none"})}var ue=document.getElementsByClassName("container_tabs_lsit_personal")[0],de=document.getElementsByClassName("tabs_container_personal")[0];if(ue){function pe(e){for(var t=0;t<ue.children.length;t++)ue.children[t].classList.remove("active");e.currentTarget.classList.add("active");for(t=0;t<ue.children.length;t++)"active"===ue.children[t].classList[1]?de.children[t].classList.add("active"):de.children[t].classList.remove("active")}for(h=0;h<ue.children.length;h++)ue.children[h].addEventListener("click",pe,!1)}var fe=[document.querySelectorAll(".one_click_popup .header_close")[0],document.querySelectorAll(".pop_up_product_none .header_close")[0],document.querySelectorAll(".pop_up_save_data button")[0],document.querySelectorAll(".pop_up_list_address_save button")[0],document.querySelectorAll(".pop_up_list_address_save button")[1],document.querySelectorAll(".pop_up_password_save button")[0]];function he(e){"header_close"===e.currentTarget.classList[0]?e.currentTarget.parentNode.parentNode.style.display="none":e.currentTarget.parentNode.parentNode.parentNode.style.display="none"}for(h=0;h<fe.length;h++)void 0===fe[h]||fe[h].addEventListener("click",he,!1);var me=document.getElementsByClassName("pop_up_list_address_save");function ge(e){e.currentTarget.lastElementChild.contains(e.target)||(e.currentTarget.style.display="none")}for(h=0;h<me.length;h++)void 0===me[h]||me[h].addEventListener("click",ge,!1);var ve=[document.querySelectorAll(".pop_up_product_none")[0],document.querySelectorAll(".pop_up_save_data")[0],document.querySelectorAll(".pop_up_password_save")[0],document.querySelectorAll(".popap_subskripe")[0],document.querySelectorAll(".one_click_popup")[0],document.querySelectorAll(".popup_buy_click")[0]];if(ve){function ye(e){e.currentTarget.lastElementChild.contains(e.target)||(e.currentTarget.style.display="none")}for(h=0;h<ve.length;h++)void 0===ve[h]||ve[h].addEventListener("click",ye,!1)}$(document).ready(function(){$("select").niceSelect()});var ke=document.querySelectorAll("input");for(h=0;h<ke.length;h++)if(void 0===ke[h]);else for(q=0;q<ke[h].attributes.length;q++)"telephone"===ke[h].attributes[q].nodeValue&&ke[h].classList.add("phone");jQuery(function(e){e(".phone").inputmask({mask:"+38(999) 999-9999"})});var be=document.querySelectorAll("#device>li");function xe(e){for(var t=0;t<be.length;t++)be[t].classList.remove("active");e.currentTarget.classList.add("active");for(t=0;t<be.length;t++)"active"===be[t].classList[0]&&localStorage.setItem(1,t)}for(h=0;h<be.length;h++)be[h].addEventListener("click",xe,!1);for(h=0;h<be.length;h++)be[localStorage.getItem(1)].classList.add("active");if(document.querySelectorAll(".right_counter")[0]){for(h=0;h<document.querySelectorAll(".right_counter").length;h++)document.querySelectorAll(".right_counter")[h].addEventListener("click",we,!1);function we(e){if(void 0===e.currentTarget.attributes[1]){var t=1;e.currentTarget.setAttribute("index-value",t++),0<Number(e.currentTarget.attributes[1].value)&&e.currentTarget.parentNode.children[0].classList.remove("active")}else e.currentTarget.setAttribute("index-value",Number(e.currentTarget.attributes[1].value)+1),0<Number(e.currentTarget.attributes[1].value)&&e.currentTarget.parentNode.children[0].classList.remove("active")}function Se(e){"undefined"===e.currentTarget.parentNode.children[2].attributes[1].value||(0<Number(e.currentTarget.parentNode.children[2].attributes[1].value)&&e.currentTarget.parentNode.children[2].setAttribute("index-value",Number(e.currentTarget.parentNode.children[2].attributes[1].value)-1),0===Number(e.currentTarget.parentNode.children[2].attributes[1].value)&&(e.currentTarget.classList.add("active"),console.log(counter)))}for(h=0;h<document.querySelectorAll(".left_counter").length;h++)document.querySelectorAll(".left_counter")[h].addEventListener("click",Se,!1)}},$(document).ready(function(){var s=document.getElementById("input-range-container"),n=[document.getElementById("min_range"),document.getElementById("max_range")];if(s){noUiSlider.create(s,{start:[600,14e3],connect:!0,tooltips:[!0,wNumb({decimals:1})],range:{min:[0,100],max:[15e3,100]}});var e=[document.querySelectorAll(".noUi-handle.noUi-handle-upper")[0],document.querySelectorAll(".noUi-handle.noUi-handle-lower")[0]];function t(e){s.noUiSlider.on("update",function(e,t){n[t].value=e[t]})}for(var i=0;i<n.length;i++)n[i].addEventListener("click",t,!1),e[i].addEventListener("mousedown",t,!1);n.forEach(function(e,r){e.addEventListener("change",function(){s.noUiSlider.setHandle(r,this.value)}),e.addEventListener("keydown",function(e){var t,n=s.noUiSlider.get(),i=Number(n[r]),o=s.noUiSlider.steps()[r];switch(e.which){case 13:s.noUiSlider.setHandle(r,this.value);break;case 38:!1===(t=o[1])&&(t=1),null!==t&&s.noUiSlider.setHandle(r,i+t);break;case 40:!1===(t=o[0])&&(t=1),null!==t&&s.noUiSlider.setHandle(r,i-t)}})})}$(document).ready(function(){$("select").niceSelect()})});
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm1haW4uanMiXSwibmFtZXMiOlsiZ2xvYmFsIiwiZmFjdG9yeSIsIm1vZHVsZSIsImV4cG9ydHMiLCJkb2N1bWVudCIsInciLCJFcnJvciIsIndpbmRvdyIsInRoaXMiLCJub0dsb2JhbCIsImFyciIsInNsaWNlIiwiY29uY2F0IiwicHVzaCIsImluZGV4T2YiLCJjbGFzczJ0eXBlIiwidG9TdHJpbmciLCJoYXNPd24iLCJoYXNPd25Qcm9wZXJ0eSIsInN1cHBvcnQiLCJ2ZXJzaW9uIiwialF1ZXJ5Iiwic2VsZWN0b3IiLCJjb250ZXh0IiwiZm4iLCJpbml0IiwicnRyaW0iLCJybXNQcmVmaXgiLCJyZGFzaEFscGhhIiwiZmNhbWVsQ2FzZSIsImFsbCIsImxldHRlciIsInRvVXBwZXJDYXNlIiwiaXNBcnJheUxpa2UiLCJvYmoiLCJsZW5ndGgiLCJ0eXBlIiwiaXNXaW5kb3ciLCJwcm90b3R5cGUiLCJqcXVlcnkiLCJjb25zdHJ1Y3RvciIsInRvQXJyYXkiLCJjYWxsIiwiZ2V0IiwibnVtIiwicHVzaFN0YWNrIiwiZWxlbXMiLCJyZXQiLCJtZXJnZSIsInByZXZPYmplY3QiLCJlYWNoIiwiY2FsbGJhY2siLCJtYXAiLCJlbGVtIiwiaSIsImFwcGx5IiwiYXJndW1lbnRzIiwiZmlyc3QiLCJlcSIsImxhc3QiLCJsZW4iLCJqIiwiZW5kIiwic29ydCIsInNwbGljZSIsImV4dGVuZCIsIm9wdGlvbnMiLCJuYW1lIiwic3JjIiwiY29weSIsImNvcHlJc0FycmF5IiwiY2xvbmUiLCJ0YXJnZXQiLCJkZWVwIiwiaXNGdW5jdGlvbiIsImlzUGxhaW5PYmplY3QiLCJpc0FycmF5IiwidW5kZWZpbmVkIiwiZXhwYW5kbyIsIk1hdGgiLCJyYW5kb20iLCJyZXBsYWNlIiwiaXNSZWFkeSIsImVycm9yIiwibXNnIiwibm9vcCIsIkFycmF5IiwiaXNOdW1lcmljIiwicmVhbFN0cmluZ09iaiIsInBhcnNlRmxvYXQiLCJrZXkiLCJub2RlVHlwZSIsImlzRW1wdHlPYmplY3QiLCJnbG9iYWxFdmFsIiwiY29kZSIsInNjcmlwdCIsImluZGlyZWN0IiwiZXZhbCIsInRyaW0iLCJjcmVhdGVFbGVtZW50IiwidGV4dCIsImhlYWQiLCJhcHBlbmRDaGlsZCIsInBhcmVudE5vZGUiLCJyZW1vdmVDaGlsZCIsImNhbWVsQ2FzZSIsInN0cmluZyIsIm5vZGVOYW1lIiwidG9Mb3dlckNhc2UiLCJtYWtlQXJyYXkiLCJyZXN1bHRzIiwiT2JqZWN0IiwiaW5BcnJheSIsInNlY29uZCIsImdyZXAiLCJpbnZlcnQiLCJtYXRjaGVzIiwiY2FsbGJhY2tFeHBlY3QiLCJhcmciLCJ2YWx1ZSIsImd1aWQiLCJwcm94eSIsInRtcCIsImFyZ3MiLCJub3ciLCJEYXRlIiwiU3ltYm9sIiwiaXRlcmF0b3IiLCJzcGxpdCIsIlNpenpsZSIsIkV4cHIiLCJnZXRUZXh0IiwiaXNYTUwiLCJ0b2tlbml6ZSIsImNvbXBpbGUiLCJzZWxlY3QiLCJvdXRlcm1vc3RDb250ZXh0Iiwic29ydElucHV0IiwiaGFzRHVwbGljYXRlIiwic2V0RG9jdW1lbnQiLCJkb2NFbGVtIiwiZG9jdW1lbnRJc0hUTUwiLCJyYnVnZ3lRU0EiLCJyYnVnZ3lNYXRjaGVzIiwiY29udGFpbnMiLCJwcmVmZXJyZWREb2MiLCJkaXJydW5zIiwiZG9uZSIsImNsYXNzQ2FjaGUiLCJjcmVhdGVDYWNoZSIsInRva2VuQ2FjaGUiLCJjb21waWxlckNhY2hlIiwic29ydE9yZGVyIiwiYSIsImIiLCJwb3AiLCJwdXNoX25hdGl2ZSIsImxpc3QiLCJib29sZWFucyIsIndoaXRlc3BhY2UiLCJpZGVudGlmaWVyIiwiYXR0cmlidXRlcyIsInBzZXVkb3MiLCJyd2hpdGVzcGFjZSIsIlJlZ0V4cCIsInJjb21tYSIsInJjb21iaW5hdG9ycyIsInJhdHRyaWJ1dGVRdW90ZXMiLCJycHNldWRvIiwicmlkZW50aWZpZXIiLCJtYXRjaEV4cHIiLCJJRCIsIkNMQVNTIiwiVEFHIiwiQVRUUiIsIlBTRVVETyIsIkNISUxEIiwiYm9vbCIsIm5lZWRzQ29udGV4dCIsInJpbnB1dHMiLCJyaGVhZGVyIiwicm5hdGl2ZSIsInJxdWlja0V4cHIiLCJyc2libGluZyIsInJlc2NhcGUiLCJydW5lc2NhcGUiLCJmdW5lc2NhcGUiLCJfIiwiZXNjYXBlZCIsImVzY2FwZWRXaGl0ZXNwYWNlIiwiaGlnaCIsIlN0cmluZyIsImZyb21DaGFyQ29kZSIsInVubG9hZEhhbmRsZXIiLCJjaGlsZE5vZGVzIiwiZSIsImVscyIsInNlZWQiLCJtIiwibmlkIiwibmlkc2VsZWN0IiwibWF0Y2giLCJncm91cHMiLCJuZXdTZWxlY3RvciIsIm5ld0NvbnRleHQiLCJvd25lckRvY3VtZW50IiwiZXhlYyIsImdldEVsZW1lbnRCeUlkIiwiaWQiLCJnZXRFbGVtZW50c0J5VGFnTmFtZSIsImdldEVsZW1lbnRzQnlDbGFzc05hbWUiLCJxc2EiLCJ0ZXN0IiwiZ2V0QXR0cmlidXRlIiwic2V0QXR0cmlidXRlIiwidG9TZWxlY3RvciIsImpvaW4iLCJ0ZXN0Q29udGV4dCIsInF1ZXJ5U2VsZWN0b3JBbGwiLCJxc2FFcnJvciIsInJlbW92ZUF0dHJpYnV0ZSIsImtleXMiLCJjYWNoZSIsImNhY2hlTGVuZ3RoIiwic2hpZnQiLCJtYXJrRnVuY3Rpb24iLCJhc3NlcnQiLCJkaXYiLCJhZGRIYW5kbGUiLCJhdHRycyIsImhhbmRsZXIiLCJhdHRySGFuZGxlIiwic2libGluZ0NoZWNrIiwiY3VyIiwiZGlmZiIsInNvdXJjZUluZGV4IiwibmV4dFNpYmxpbmciLCJjcmVhdGVJbnB1dFBzZXVkbyIsImNyZWF0ZUJ1dHRvblBzZXVkbyIsImNyZWF0ZVBvc2l0aW9uYWxQc2V1ZG8iLCJhcmd1bWVudCIsIm1hdGNoSW5kZXhlcyIsImRvY3VtZW50RWxlbWVudCIsIm5vZGUiLCJoYXNDb21wYXJlIiwicGFyZW50IiwiZG9jIiwiZGVmYXVsdFZpZXciLCJ0b3AiLCJhZGRFdmVudExpc3RlbmVyIiwiYXR0YWNoRXZlbnQiLCJjbGFzc05hbWUiLCJjcmVhdGVDb21tZW50IiwiZ2V0QnlJZCIsImdldEVsZW1lbnRzQnlOYW1lIiwiZmluZCIsImZpbHRlciIsImF0dHJJZCIsImdldEF0dHJpYnV0ZU5vZGUiLCJ0YWciLCJpbm5lckhUTUwiLCJpbnB1dCIsIm1hdGNoZXNTZWxlY3RvciIsIndlYmtpdE1hdGNoZXNTZWxlY3RvciIsIm1vek1hdGNoZXNTZWxlY3RvciIsIm9NYXRjaGVzU2VsZWN0b3IiLCJtc01hdGNoZXNTZWxlY3RvciIsImRpc2Nvbm5lY3RlZE1hdGNoIiwiY29tcGFyZURvY3VtZW50UG9zaXRpb24iLCJhZG93biIsImJ1cCIsImNvbXBhcmUiLCJzb3J0RGV0YWNoZWQiLCJhdXAiLCJhcCIsImJwIiwidW5zaGlmdCIsImV4cHIiLCJlbGVtZW50cyIsImF0dHIiLCJ2YWwiLCJzcGVjaWZpZWQiLCJ1bmlxdWVTb3J0IiwiZHVwbGljYXRlcyIsImRldGVjdER1cGxpY2F0ZXMiLCJzb3J0U3RhYmxlIiwidGV4dENvbnRlbnQiLCJmaXJzdENoaWxkIiwibm9kZVZhbHVlIiwic2VsZWN0b3JzIiwiY3JlYXRlUHNldWRvIiwicmVsYXRpdmUiLCI+IiwiZGlyIiwiICIsIisiLCJ+IiwicHJlRmlsdGVyIiwiZXhjZXNzIiwidW5xdW90ZWQiLCJub2RlTmFtZVNlbGVjdG9yIiwicGF0dGVybiIsIm9wZXJhdG9yIiwiY2hlY2siLCJyZXN1bHQiLCJ3aGF0Iiwic2ltcGxlIiwiZm9yd2FyZCIsIm9mVHlwZSIsInhtbCIsInVuaXF1ZUNhY2hlIiwib3V0ZXJDYWNoZSIsIm5vZGVJbmRleCIsInN0YXJ0IiwidXNlQ2FjaGUiLCJsYXN0Q2hpbGQiLCJ1bmlxdWVJRCIsInBzZXVkbyIsInNldEZpbHRlcnMiLCJpZHgiLCJtYXRjaGVkIiwibm90IiwibWF0Y2hlciIsInVubWF0Y2hlZCIsImhhcyIsImlubmVyVGV4dCIsImxhbmciLCJlbGVtTGFuZyIsImhhc2giLCJsb2NhdGlvbiIsInJvb3QiLCJmb2N1cyIsImFjdGl2ZUVsZW1lbnQiLCJoYXNGb2N1cyIsImhyZWYiLCJ0YWJJbmRleCIsImVuYWJsZWQiLCJkaXNhYmxlZCIsImNoZWNrZWQiLCJzZWxlY3RlZCIsInNlbGVjdGVkSW5kZXgiLCJlbXB0eSIsImhlYWRlciIsImJ1dHRvbiIsImV2ZW4iLCJvZGQiLCJsdCIsImd0IiwicmFkaW8iLCJjaGVja2JveCIsImZpbGUiLCJwYXNzd29yZCIsImltYWdlIiwic3VibWl0IiwicmVzZXQiLCJ0b2tlbnMiLCJhZGRDb21iaW5hdG9yIiwiY29tYmluYXRvciIsImJhc2UiLCJjaGVja05vbkVsZW1lbnRzIiwiZG9uZU5hbWUiLCJvbGRDYWNoZSIsIm5ld0NhY2hlIiwiZWxlbWVudE1hdGNoZXIiLCJtYXRjaGVycyIsImNvbmRlbnNlIiwibmV3VW5tYXRjaGVkIiwibWFwcGVkIiwic2V0TWF0Y2hlciIsInBvc3RGaWx0ZXIiLCJwb3N0RmluZGVyIiwicG9zdFNlbGVjdG9yIiwidGVtcCIsInByZU1hcCIsInBvc3RNYXAiLCJwcmVleGlzdGluZyIsImNvbnRleHRzIiwibXVsdGlwbGVDb250ZXh0cyIsIm1hdGNoZXJJbiIsIm1hdGNoZXJPdXQiLCJtYXRjaGVyRnJvbVRva2VucyIsImNoZWNrQ29udGV4dCIsImxlYWRpbmdSZWxhdGl2ZSIsImltcGxpY2l0UmVsYXRpdmUiLCJtYXRjaENvbnRleHQiLCJtYXRjaEFueUNvbnRleHQiLCJmaWx0ZXJzIiwicGFyc2VPbmx5Iiwic29GYXIiLCJwcmVGaWx0ZXJzIiwiY2FjaGVkIiwiZWxlbWVudE1hdGNoZXJzIiwic2V0TWF0Y2hlcnMiLCJieVNldCIsImJ5RWxlbWVudCIsInN1cGVyTWF0Y2hlciIsIm91dGVybW9zdCIsIm1hdGNoZWRDb3VudCIsInNldE1hdGNoZWQiLCJjb250ZXh0QmFja3VwIiwiZGlycnVuc1VuaXF1ZSIsInRva2VuIiwiY29tcGlsZWQiLCJkaXYxIiwiZGVmYXVsdFZhbHVlIiwidW5pcXVlIiwiaXNYTUxEb2MiLCJ1bnRpbCIsInRydW5jYXRlIiwiaXMiLCJzaWJsaW5ncyIsIm4iLCJybmVlZHNDb250ZXh0IiwicnNpbmdsZVRhZyIsInJpc1NpbXBsZSIsIndpbm5vdyIsInF1YWxpZmllciIsInNlbGYiLCJyb290alF1ZXJ5IiwicmVhZHkiLCJwYXJzZUhUTUwiLCJycGFyZW50c3ByZXYiLCJndWFyYW50ZWVkVW5pcXVlIiwiY2hpbGRyZW4iLCJjb250ZW50cyIsIm5leHQiLCJwcmV2Iiwic2libGluZyIsInRhcmdldHMiLCJsIiwiY2xvc2VzdCIsInBvcyIsImluZGV4IiwicHJldkFsbCIsImFkZCIsImFkZEJhY2siLCJwYXJlbnRzIiwicGFyZW50c1VudGlsIiwibmV4dEFsbCIsIm5leHRVbnRpbCIsInByZXZVbnRpbCIsImNvbnRlbnREb2N1bWVudCIsInJldmVyc2UiLCJyZWFkeUxpc3QiLCJybm90d2hpdGUiLCJjb21wbGV0ZWQiLCJyZW1vdmVFdmVudExpc3RlbmVyIiwiQ2FsbGJhY2tzIiwib2JqZWN0IiwiZmxhZyIsImZpcmluZyIsIm1lbW9yeSIsImZpcmVkIiwibG9ja2VkIiwicXVldWUiLCJmaXJpbmdJbmRleCIsImZpcmUiLCJvbmNlIiwic3RvcE9uRmFsc2UiLCJyZW1vdmUiLCJkaXNhYmxlIiwibG9jayIsImZpcmVXaXRoIiwiRGVmZXJyZWQiLCJmdW5jIiwidHVwbGVzIiwic3RhdGUiLCJwcm9taXNlIiwiYWx3YXlzIiwiZGVmZXJyZWQiLCJmYWlsIiwidGhlbiIsImZucyIsIm5ld0RlZmVyIiwidHVwbGUiLCJyZXR1cm5lZCIsInByb2dyZXNzIiwibm90aWZ5IiwicmVzb2x2ZSIsInJlamVjdCIsInBpcGUiLCJzdGF0ZVN0cmluZyIsIndoZW4iLCJzdWJvcmRpbmF0ZSIsInByb2dyZXNzVmFsdWVzIiwicHJvZ3Jlc3NDb250ZXh0cyIsInJlc29sdmVDb250ZXh0cyIsInJlc29sdmVWYWx1ZXMiLCJyZW1haW5pbmciLCJ1cGRhdGVGdW5jIiwidmFsdWVzIiwibm90aWZ5V2l0aCIsInJlc29sdmVXaXRoIiwicmVhZHlXYWl0IiwiaG9sZFJlYWR5IiwiaG9sZCIsIndhaXQiLCJ0cmlnZ2VySGFuZGxlciIsIm9mZiIsInJlYWR5U3RhdGUiLCJkb1Njcm9sbCIsInNldFRpbWVvdXQiLCJhY2Nlc3MiLCJjaGFpbmFibGUiLCJlbXB0eUdldCIsInJhdyIsImJ1bGsiLCJhY2NlcHREYXRhIiwib3duZXIiLCJEYXRhIiwidWlkIiwicmVnaXN0ZXIiLCJpbml0aWFsIiwiZGVmaW5lUHJvcGVydHkiLCJ3cml0YWJsZSIsImNvbmZpZ3VyYWJsZSIsInNldCIsImRhdGEiLCJwcm9wIiwic3RvcmVkIiwiY2FtZWwiLCJoYXNEYXRhIiwiZGF0YVByaXYiLCJkYXRhVXNlciIsInJicmFjZSIsInJtdWx0aURhc2giLCJkYXRhQXR0ciIsInBhcnNlSlNPTiIsInJlbW92ZURhdGEiLCJfZGF0YSIsIl9yZW1vdmVEYXRhIiwiY2FtZWxLZXkiLCJkZXF1ZXVlIiwic3RhcnRMZW5ndGgiLCJob29rcyIsIl9xdWV1ZUhvb2tzIiwic3RvcCIsInNldHRlciIsImNsZWFyUXVldWUiLCJjb3VudCIsImRlZmVyIiwicG51bSIsInNvdXJjZSIsInJjc3NOdW0iLCJjc3NFeHBhbmQiLCJpc0hpZGRlbiIsImVsIiwiY3NzIiwiYWRqdXN0Q1NTIiwidmFsdWVQYXJ0cyIsInR3ZWVuIiwiYWRqdXN0ZWQiLCJzY2FsZSIsIm1heEl0ZXJhdGlvbnMiLCJjdXJyZW50VmFsdWUiLCJ1bml0IiwiY3NzTnVtYmVyIiwiaW5pdGlhbEluVW5pdCIsInN0eWxlIiwicmNoZWNrYWJsZVR5cGUiLCJydGFnTmFtZSIsInJzY3JpcHRUeXBlIiwid3JhcE1hcCIsIm9wdGlvbiIsInRoZWFkIiwiY29sIiwidHIiLCJ0ZCIsIl9kZWZhdWx0IiwiZ2V0QWxsIiwic2V0R2xvYmFsRXZhbCIsInJlZkVsZW1lbnRzIiwib3B0Z3JvdXAiLCJ0Ym9keSIsInRmb290IiwiY29sZ3JvdXAiLCJjYXB0aW9uIiwidGgiLCJyaHRtbCIsImJ1aWxkRnJhZ21lbnQiLCJzY3JpcHRzIiwic2VsZWN0aW9uIiwiaWdub3JlZCIsIndyYXAiLCJmcmFnbWVudCIsImNyZWF0ZURvY3VtZW50RnJhZ21lbnQiLCJub2RlcyIsImh0bWxQcmVmaWx0ZXIiLCJjcmVhdGVUZXh0Tm9kZSIsImNoZWNrQ2xvbmUiLCJjbG9uZU5vZGUiLCJub0Nsb25lQ2hlY2tlZCIsInJrZXlFdmVudCIsInJtb3VzZUV2ZW50IiwicnR5cGVuYW1lc3BhY2UiLCJyZXR1cm5UcnVlIiwicmV0dXJuRmFsc2UiLCJzYWZlQWN0aXZlRWxlbWVudCIsImVyciIsIm9uIiwidHlwZXMiLCJvbmUiLCJvcmlnRm4iLCJldmVudCIsImhhbmRsZU9iakluIiwiZXZlbnRIYW5kbGUiLCJldmVudHMiLCJ0IiwiaGFuZGxlT2JqIiwic3BlY2lhbCIsImhhbmRsZXJzIiwibmFtZXNwYWNlcyIsIm9yaWdUeXBlIiwiZWxlbURhdGEiLCJoYW5kbGUiLCJ0cmlnZ2VyZWQiLCJkaXNwYXRjaCIsImRlbGVnYXRlVHlwZSIsImJpbmRUeXBlIiwibmFtZXNwYWNlIiwiZGVsZWdhdGVDb3VudCIsInNldHVwIiwibWFwcGVkVHlwZXMiLCJvcmlnQ291bnQiLCJ0ZWFyZG93biIsInJlbW92ZUV2ZW50IiwiZml4IiwiaGFuZGxlclF1ZXVlIiwiZGVsZWdhdGVUYXJnZXQiLCJwcmVEaXNwYXRjaCIsImlzUHJvcGFnYXRpb25TdG9wcGVkIiwiY3VycmVudFRhcmdldCIsImlzSW1tZWRpYXRlUHJvcGFnYXRpb25TdG9wcGVkIiwicm5hbWVzcGFjZSIsInByZXZlbnREZWZhdWx0Iiwic3RvcFByb3BhZ2F0aW9uIiwicG9zdERpc3BhdGNoIiwic2VsIiwiaXNOYU4iLCJwcm9wcyIsImZpeEhvb2tzIiwia2V5SG9va3MiLCJvcmlnaW5hbCIsIndoaWNoIiwiY2hhckNvZGUiLCJrZXlDb2RlIiwibW91c2VIb29rcyIsImV2ZW50RG9jIiwiYm9keSIsInBhZ2VYIiwiY2xpZW50WCIsInNjcm9sbExlZnQiLCJjbGllbnRMZWZ0IiwicGFnZVkiLCJjbGllbnRZIiwic2Nyb2xsVG9wIiwiY2xpZW50VG9wIiwib3JpZ2luYWxFdmVudCIsImZpeEhvb2siLCJFdmVudCIsImxvYWQiLCJub0J1YmJsZSIsInRyaWdnZXIiLCJibHVyIiwiY2xpY2siLCJiZWZvcmV1bmxvYWQiLCJyZXR1cm5WYWx1ZSIsImlzRGVmYXVsdFByZXZlbnRlZCIsImRlZmF1bHRQcmV2ZW50ZWQiLCJ0aW1lU3RhbXAiLCJpc1NpbXVsYXRlZCIsInN0b3BJbW1lZGlhdGVQcm9wYWdhdGlvbiIsIm1vdXNlZW50ZXIiLCJtb3VzZWxlYXZlIiwicG9pbnRlcmVudGVyIiwicG9pbnRlcmxlYXZlIiwib3JpZyIsInJlbGF0ZWQiLCJyZWxhdGVkVGFyZ2V0IiwicnhodG1sVGFnIiwicm5vSW5uZXJodG1sIiwicmNoZWNrZWQiLCJyc2NyaXB0VHlwZU1hc2tlZCIsInJjbGVhblNjcmlwdCIsIm1hbmlwdWxhdGlvblRhcmdldCIsImNvbnRlbnQiLCJkaXNhYmxlU2NyaXB0IiwicmVzdG9yZVNjcmlwdCIsImNsb25lQ29weUV2ZW50IiwiZGVzdCIsInBkYXRhT2xkIiwicGRhdGFDdXIiLCJ1ZGF0YU9sZCIsInVkYXRhQ3VyIiwiZG9tTWFuaXAiLCJjb2xsZWN0aW9uIiwiaGFzU2NyaXB0cyIsImlOb0Nsb25lIiwiaHRtbCIsIl9ldmFsVXJsIiwia2VlcERhdGEiLCJjbGVhbkRhdGEiLCJkYXRhQW5kRXZlbnRzIiwiZGVlcERhdGFBbmRFdmVudHMiLCJzcmNFbGVtZW50cyIsImRlc3RFbGVtZW50cyIsImluUGFnZSIsImRldGFjaCIsImFwcGVuZCIsInByZXBlbmQiLCJpbnNlcnRCZWZvcmUiLCJiZWZvcmUiLCJhZnRlciIsInJlcGxhY2VXaXRoIiwicmVwbGFjZUNoaWxkIiwiYXBwZW5kVG8iLCJwcmVwZW5kVG8iLCJpbnNlcnRBZnRlciIsInJlcGxhY2VBbGwiLCJpbnNlcnQiLCJpZnJhbWUiLCJlbGVtZGlzcGxheSIsIkhUTUwiLCJCT0RZIiwiYWN0dWFsRGlzcGxheSIsImRpc3BsYXkiLCJkZWZhdWx0RGlzcGxheSIsIndyaXRlIiwiY2xvc2UiLCJybWFyZ2luIiwicm51bW5vbnB4IiwiZ2V0U3R5bGVzIiwidmlldyIsIm9wZW5lciIsImdldENvbXB1dGVkU3R5bGUiLCJzd2FwIiwib2xkIiwiY3VyQ1NTIiwiY29tcHV0ZWQiLCJ3aWR0aCIsIm1pbldpZHRoIiwibWF4V2lkdGgiLCJnZXRQcm9wZXJ0eVZhbHVlIiwicGl4ZWxNYXJnaW5SaWdodCIsImFkZEdldEhvb2tJZiIsImNvbmRpdGlvbkZuIiwiaG9va0ZuIiwicGl4ZWxQb3NpdGlvblZhbCIsImJveFNpemluZ1JlbGlhYmxlVmFsIiwicGl4ZWxNYXJnaW5SaWdodFZhbCIsInJlbGlhYmxlTWFyZ2luTGVmdFZhbCIsImNvbnRhaW5lciIsImNvbXB1dGVTdHlsZVRlc3RzIiwiY3NzVGV4dCIsImRpdlN0eWxlIiwibWFyZ2luTGVmdCIsIm1hcmdpblJpZ2h0IiwiYmFja2dyb3VuZENsaXAiLCJjbGVhckNsb25lU3R5bGUiLCJwaXhlbFBvc2l0aW9uIiwiYm94U2l6aW5nUmVsaWFibGUiLCJyZWxpYWJsZU1hcmdpbkxlZnQiLCJyZWxpYWJsZU1hcmdpblJpZ2h0IiwibWFyZ2luRGl2IiwicmRpc3BsYXlzd2FwIiwiY3NzU2hvdyIsInBvc2l0aW9uIiwidmlzaWJpbGl0eSIsImNzc05vcm1hbFRyYW5zZm9ybSIsImxldHRlclNwYWNpbmciLCJmb250V2VpZ2h0IiwiY3NzUHJlZml4ZXMiLCJlbXB0eVN0eWxlIiwidmVuZG9yUHJvcE5hbWUiLCJjYXBOYW1lIiwic2V0UG9zaXRpdmVOdW1iZXIiLCJzdWJ0cmFjdCIsIm1heCIsImF1Z21lbnRXaWR0aE9ySGVpZ2h0IiwiZXh0cmEiLCJpc0JvcmRlckJveCIsInN0eWxlcyIsImdldFdpZHRoT3JIZWlnaHQiLCJ2YWx1ZUlzQm9yZGVyQm94Iiwib2Zmc2V0V2lkdGgiLCJvZmZzZXRIZWlnaHQiLCJzaG93SGlkZSIsInNob3ciLCJoaWRkZW4iLCJUd2VlbiIsImVhc2luZyIsImNzc0hvb2tzIiwib3BhY2l0eSIsImFuaW1hdGlvbkl0ZXJhdGlvbkNvdW50IiwiY29sdW1uQ291bnQiLCJmaWxsT3BhY2l0eSIsImZsZXhHcm93IiwiZmxleFNocmluayIsImxpbmVIZWlnaHQiLCJvcmRlciIsIm9ycGhhbnMiLCJ3aWRvd3MiLCJ6SW5kZXgiLCJ6b29tIiwiY3NzUHJvcHMiLCJmbG9hdCIsIm9yaWdOYW1lIiwiaXNGaW5pdGUiLCJnZXRCb3VuZGluZ0NsaWVudFJlY3QiLCJsZWZ0IiwibWFyZ2luIiwicGFkZGluZyIsImJvcmRlciIsInByZWZpeCIsInN1ZmZpeCIsImV4cGFuZCIsImV4cGFuZGVkIiwicGFydHMiLCJoaWRlIiwidG9nZ2xlIiwicHJvcEhvb2tzIiwicnVuIiwicGVyY2VudCIsImVhc2VkIiwiZHVyYXRpb24iLCJzdGVwIiwiZngiLCJsaW5lYXIiLCJwIiwic3dpbmciLCJjb3MiLCJQSSIsImZ4Tm93IiwidGltZXJJZCIsIm9wdCIsInJmeHR5cGVzIiwicnJ1biIsImNyZWF0ZUZ4Tm93IiwiZ2VuRngiLCJpbmNsdWRlV2lkdGgiLCJoZWlnaHQiLCJjcmVhdGVUd2VlbiIsImFuaW1hdGlvbiIsIkFuaW1hdGlvbiIsInR3ZWVuZXJzIiwicHJvcGVydGllcyIsInN0b3BwZWQiLCJwcmVmaWx0ZXJzIiwidGljayIsImN1cnJlbnRUaW1lIiwic3RhcnRUaW1lIiwidHdlZW5zIiwib3B0cyIsInNwZWNpYWxFYXNpbmciLCJvcmlnaW5hbFByb3BlcnRpZXMiLCJvcmlnaW5hbE9wdGlvbnMiLCJnb3RvRW5kIiwicmVqZWN0V2l0aCIsInByb3BGaWx0ZXIiLCJ0aW1lciIsImFuaW0iLCJjb21wbGV0ZSIsIioiLCJ0d2VlbmVyIiwib2xkZmlyZSIsImRhdGFTaG93IiwidW5xdWV1ZWQiLCJvdmVyZmxvdyIsIm92ZXJmbG93WCIsIm92ZXJmbG93WSIsInByZWZpbHRlciIsInNwZWVkIiwic3BlZWRzIiwiZmFkZVRvIiwidG8iLCJhbmltYXRlIiwib3B0YWxsIiwiZG9BbmltYXRpb24iLCJmaW5pc2giLCJzdG9wUXVldWUiLCJ0aW1lcnMiLCJjc3NGbiIsInNsaWRlRG93biIsInNsaWRlVXAiLCJzbGlkZVRvZ2dsZSIsImZhZGVJbiIsImZhZGVPdXQiLCJmYWRlVG9nZ2xlIiwiaW50ZXJ2YWwiLCJzZXRJbnRlcnZhbCIsImNsZWFySW50ZXJ2YWwiLCJzbG93IiwiZmFzdCIsImRlbGF5IiwidGltZSIsInRpbWVvdXQiLCJjbGVhclRpbWVvdXQiLCJjaGVja09uIiwib3B0U2VsZWN0ZWQiLCJvcHREaXNhYmxlZCIsInJhZGlvVmFsdWUiLCJib29sSG9vayIsInJlbW92ZUF0dHIiLCJuVHlwZSIsImF0dHJIb29rcyIsInByb3BOYW1lIiwiYXR0ck5hbWVzIiwicHJvcEZpeCIsImdldHRlciIsInJmb2N1c2FibGUiLCJyY2xpY2thYmxlIiwicmVtb3ZlUHJvcCIsInRhYmluZGV4IiwicGFyc2VJbnQiLCJmb3IiLCJjbGFzcyIsInJjbGFzcyIsImdldENsYXNzIiwiYWRkQ2xhc3MiLCJjbGFzc2VzIiwiY3VyVmFsdWUiLCJjbGF6eiIsImZpbmFsVmFsdWUiLCJyZW1vdmVDbGFzcyIsInRvZ2dsZUNsYXNzIiwic3RhdGVWYWwiLCJjbGFzc05hbWVzIiwiaGFzQ2xhc3MiLCJycmV0dXJuIiwicnNwYWNlcyIsInZhbEhvb2tzIiwib3B0aW9uU2V0IiwicmZvY3VzTW9ycGgiLCJvbmx5SGFuZGxlcnMiLCJidWJibGVUeXBlIiwib250eXBlIiwiZXZlbnRQYXRoIiwiaXNUcmlnZ2VyIiwicGFyZW50V2luZG93Iiwic2ltdWxhdGUiLCJob3ZlciIsImZuT3ZlciIsImZuT3V0IiwiZm9jdXNpbiIsImF0dGFjaGVzIiwibm9uY2UiLCJycXVlcnkiLCJKU09OIiwicGFyc2UiLCJwYXJzZVhNTCIsIkRPTVBhcnNlciIsInBhcnNlRnJvbVN0cmluZyIsInJoYXNoIiwicnRzIiwicmhlYWRlcnMiLCJybm9Db250ZW50IiwicnByb3RvY29sIiwidHJhbnNwb3J0cyIsImFsbFR5cGVzIiwib3JpZ2luQW5jaG9yIiwiYWRkVG9QcmVmaWx0ZXJzT3JUcmFuc3BvcnRzIiwic3RydWN0dXJlIiwiZGF0YVR5cGVFeHByZXNzaW9uIiwiZGF0YVR5cGUiLCJkYXRhVHlwZXMiLCJpbnNwZWN0UHJlZmlsdGVyc09yVHJhbnNwb3J0cyIsImpxWEhSIiwiaW5zcGVjdGVkIiwic2Vla2luZ1RyYW5zcG9ydCIsImluc3BlY3QiLCJwcmVmaWx0ZXJPckZhY3RvcnkiLCJkYXRhVHlwZU9yVHJhbnNwb3J0IiwiYWpheEV4dGVuZCIsImZsYXRPcHRpb25zIiwiYWpheFNldHRpbmdzIiwiYWN0aXZlIiwibGFzdE1vZGlmaWVkIiwiZXRhZyIsInVybCIsImlzTG9jYWwiLCJwcm90b2NvbCIsInByb2Nlc3NEYXRhIiwiYXN5bmMiLCJjb250ZW50VHlwZSIsImFjY2VwdHMiLCJqc29uIiwicmVzcG9uc2VGaWVsZHMiLCJjb252ZXJ0ZXJzIiwiKiB0ZXh0IiwidGV4dCBodG1sIiwidGV4dCBqc29uIiwidGV4dCB4bWwiLCJhamF4U2V0dXAiLCJzZXR0aW5ncyIsImFqYXhQcmVmaWx0ZXIiLCJhamF4VHJhbnNwb3J0IiwiYWpheCIsInRyYW5zcG9ydCIsImNhY2hlVVJMIiwicmVzcG9uc2VIZWFkZXJzU3RyaW5nIiwicmVzcG9uc2VIZWFkZXJzIiwidGltZW91dFRpbWVyIiwidXJsQW5jaG9yIiwiZmlyZUdsb2JhbHMiLCJzIiwiY2FsbGJhY2tDb250ZXh0IiwiZ2xvYmFsRXZlbnRDb250ZXh0IiwiY29tcGxldGVEZWZlcnJlZCIsInN0YXR1c0NvZGUiLCJyZXF1ZXN0SGVhZGVycyIsInJlcXVlc3RIZWFkZXJzTmFtZXMiLCJzdHJBYm9ydCIsImdldFJlc3BvbnNlSGVhZGVyIiwiZ2V0QWxsUmVzcG9uc2VIZWFkZXJzIiwic2V0UmVxdWVzdEhlYWRlciIsImxuYW1lIiwib3ZlcnJpZGVNaW1lVHlwZSIsIm1pbWVUeXBlIiwic3RhdHVzIiwiYWJvcnQiLCJzdGF0dXNUZXh0IiwiZmluYWxUZXh0Iiwic3VjY2VzcyIsIm1ldGhvZCIsImNyb3NzRG9tYWluIiwiaG9zdCIsInBhcmFtIiwidHJhZGl0aW9uYWwiLCJoYXNDb250ZW50IiwiaWZNb2RpZmllZCIsImhlYWRlcnMiLCJiZWZvcmVTZW5kIiwic2VuZCIsIm5hdGl2ZVN0YXR1c1RleHQiLCJyZXNwb25zZXMiLCJpc1N1Y2Nlc3MiLCJyZXNwb25zZSIsIm1vZGlmaWVkIiwiY3QiLCJmaW5hbERhdGFUeXBlIiwiZmlyc3REYXRhVHlwZSIsImFqYXhIYW5kbGVSZXNwb25zZXMiLCJjb252MiIsImN1cnJlbnQiLCJjb252IiwiZGF0YUZpbHRlciIsInRocm93cyIsImFqYXhDb252ZXJ0IiwiZ2V0SlNPTiIsImdldFNjcmlwdCIsIndyYXBBbGwiLCJmaXJzdEVsZW1lbnRDaGlsZCIsIndyYXBJbm5lciIsInVud3JhcCIsInZpc2libGUiLCJnZXRDbGllbnRSZWN0cyIsInIyMCIsInJicmFja2V0IiwickNSTEYiLCJyc3VibWl0dGVyVHlwZXMiLCJyc3VibWl0dGFibGUiLCJidWlsZFBhcmFtcyIsInYiLCJlbmNvZGVVUklDb21wb25lbnQiLCJzZXJpYWxpemUiLCJzZXJpYWxpemVBcnJheSIsInhociIsIlhNTEh0dHBSZXF1ZXN0IiwieGhyU3VjY2Vzc1N0YXR1cyIsIjAiLCIxMjIzIiwieGhyU3VwcG9ydGVkIiwiY29ycyIsImVycm9yQ2FsbGJhY2siLCJvcGVuIiwidXNlcm5hbWUiLCJ4aHJGaWVsZHMiLCJvbmxvYWQiLCJvbmVycm9yIiwib25hYm9ydCIsIm9ucmVhZHlzdGF0ZWNoYW5nZSIsInJlc3BvbnNlVHlwZSIsInJlc3BvbnNlVGV4dCIsImJpbmFyeSIsInRleHQgc2NyaXB0IiwiY2hhcnNldCIsInNjcmlwdENoYXJzZXQiLCJldnQiLCJvbGRDYWxsYmFja3MiLCJyanNvbnAiLCJqc29ucCIsImpzb25wQ2FsbGJhY2siLCJvcmlnaW5hbFNldHRpbmdzIiwiY2FsbGJhY2tOYW1lIiwib3ZlcndyaXR0ZW4iLCJyZXNwb25zZUNvbnRhaW5lciIsImpzb25Qcm9wIiwia2VlcFNjcmlwdHMiLCJwYXJzZWQiLCJfbG9hZCIsImdldFdpbmRvdyIsInBhcmFtcyIsImFuaW1hdGVkIiwib2Zmc2V0Iiwic2V0T2Zmc2V0IiwiY3VyUG9zaXRpb24iLCJjdXJMZWZ0IiwiY3VyQ1NTVG9wIiwiY3VyVG9wIiwiY3VyT2Zmc2V0IiwiY3VyQ1NTTGVmdCIsImN1ckVsZW0iLCJ1c2luZyIsIndpbiIsImJveCIsInBhZ2VZT2Zmc2V0IiwicGFnZVhPZmZzZXQiLCJvZmZzZXRQYXJlbnQiLCJwYXJlbnRPZmZzZXQiLCJzY3JvbGxUbyIsIkhlaWdodCIsIldpZHRoIiwiIiwiZGVmYXVsdEV4dHJhIiwiZnVuY05hbWUiLCJiaW5kIiwidW5iaW5kIiwiZGVsZWdhdGUiLCJ1bmRlbGVnYXRlIiwic2l6ZSIsImFuZFNlbGYiLCJkZWZpbmUiLCJhbWQiLCJfalF1ZXJ5IiwiXyQiLCIkIiwibm9Db25mbGljdCIsIndOdW1iIiwiRm9ybWF0T3B0aW9ucyIsInN0clJldmVyc2UiLCJzdHJTdGFydHNXaXRoIiwic3Vic3RyaW5nIiwidGhyb3dFcXVhbEVycm9yIiwiRiIsImlzVmFsaWROdW1iZXIiLCJmb3JtYXRUbyIsImRlY2ltYWxzIiwidGhvdXNhbmQiLCJtYXJrIiwiZW5jb2RlciIsImRlY29kZXIiLCJuZWdhdGl2ZUJlZm9yZSIsIm5lZ2F0aXZlIiwiZWRpdCIsInVuZG8iLCJpbnB1dElzTmVnYXRpdmUiLCJpbnB1dFBpZWNlcyIsImlucHV0QmFzZSIsImV4cCIsIm9yaWdpbmFsSW5wdXQiLCJpbnB1dERlY2ltYWxzIiwib3V0cHV0IiwidG9GaXhlZCIsImFicyIsInJvdW5kIiwiZm9ybWF0RnJvbSIsIk51bWJlciIsInBhc3NBbGwiLCJpbnB1dE9wdGlvbnMiLCJvcHRpb25OYW1lIiwib3B0aW9uVmFsdWUiLCJmaWx0ZXJlZE9wdGlvbnMiLCJ2YWxpZGF0ZSIsImZyb20iLCJub1VpU2xpZGVyIiwiZXQiLCJydCIsIm50IiwiciIsImF0Iiwic3QiLCJpdCIsIm1pbiIsIm90IiwiY2xhc3NMaXN0IiwiY29tcGF0TW9kZSIsIngiLCJ5IiwiYyIsImYiLCJvIiwieFBjdCIsInhWYWwiLCJ4U3RlcHMiLCJ4SGlnaGVzdENvbXBsZXRlU3RlcCIsInhOdW1TdGVwcyIsImNlaWwiLCJzbmFwIiwiZ2V0TWFyZ2luIiwidG9TdGVwcGluZyIsInUiLCJmcm9tU3RlcHBpbmciLCJnZXRTdGVwIiwiZ2V0TmVhcmJ5U3RlcHMiLCJzdGVwQmVmb3JlIiwic3RhcnRWYWx1ZSIsImhpZ2hlc3RTdGVwIiwidGhpc1N0ZXAiLCJzdGVwQWZ0ZXIiLCJjb3VudFN0ZXBEZWNpbWFscyIsImNvbnZlcnQiLCJkIiwiaCIsInNpbmdsZVN0ZXAiLCJzcGVjdHJ1bSIsImciLCJoYW5kbGVzIiwiUyIsImFuaW1hdGlvbkR1cmF0aW9uIiwiY29ubmVjdCIsIm9ydCIsIkUiLCJsaW1pdCIsIkMiLCJOIiwiVSIsInRhcCIsImRyYWciLCJmaXhlZCIsInVuY29uc3RyYWluZWQiLCJrIiwidG9vbHRpcHMiLCJmb3JFYWNoIiwiUCIsImFyaWFGb3JtYXQiLCJBIiwiZm9ybWF0IiwiTSIsImtleWJvYXJkU3VwcG9ydCIsIlYiLCJPIiwiY3NzUHJlZml4IiwiTCIsImNzc0NsYXNzZXMiLCJ1dCIsImRpcmVjdGlvbiIsInJhbmdlIiwib3JpZW50YXRpb24iLCJiZWhhdmlvdXIiLCJvcmlnaW4iLCJoYW5kbGVMb3dlciIsImhhbmRsZVVwcGVyIiwiaG9yaXpvbnRhbCIsInZlcnRpY2FsIiwiYmFja2dyb3VuZCIsImNvbm5lY3RzIiwibHRyIiwicnRsIiwiZHJhZ2dhYmxlIiwidG9vbHRpcCIsInBpcHMiLCJwaXBzSG9yaXpvbnRhbCIsInBpcHNWZXJ0aWNhbCIsIm1hcmtlciIsIm1hcmtlckhvcml6b250YWwiLCJtYXJrZXJWZXJ0aWNhbCIsIm1hcmtlck5vcm1hbCIsIm1hcmtlckxhcmdlIiwibWFya2VyU3ViIiwidmFsdWVIb3Jpem9udGFsIiwidmFsdWVWZXJ0aWNhbCIsInZhbHVlTm9ybWFsIiwidmFsdWVMYXJnZSIsInZhbHVlU3ViIiwibXNUcmFuc2Zvcm0iLCJ0cmFuc2Zvcm0iLCJ0cmFuc2Zvcm1SdWxlIiwieiIsIm5hdmlnYXRvciIsInBvaW50ZXJFbmFibGVkIiwibW92ZSIsIm1zUG9pbnRlckVuYWJsZWQiLCJDU1MiLCJzdXBwb3J0cyIsInBhcmVudEVsZW1lbnQiLCJtb2RlIiwiZGVuc2l0eSIsInN0ZXBwZWQiLCJ0b3VjaGVzIiwiY2hhbmdlZFRvdWNoZXMiLCJwYWdlT2Zmc2V0IiwicG9pbnRzIiwiY3Vyc29yIiwiaGFzQXR0cmlidXRlIiwiZG9Ob3RSZWplY3QiLCJidXR0b25zIiwiY2FsY1BvaW50IiwicGFzc2l2ZSIsIkgiLCJ1c2VyQWdlbnQiLCJEIiwiUiIsIlQiLCJhcHBWZXJzaW9uIiwiYnV0dG9uc1Byb3BlcnR5Iiwic3RhcnRDYWxjUG9pbnQiLCJiYXNlU2l6ZSIsImxvY2F0aW9ucyIsImhhbmRsZU51bWJlcnMiLCJsaXN0ZW5lcnMiLCJKIiwiWSIsInEiLCJYIiwiSSIsIlciLCJLIiwiRyIsIlEiLCJaIiwidHQiLCJkZXN0cm95Iiwic3RlcHMiLCJzZXRIYW5kbGUiLCJfX21vdmVIYW5kbGVzIiwidXBkYXRlT3B0aW9ucyIsInJlbW92ZVBpcHMiLCJfX3NwZWN0cnVtIiwiY3JlYXRlIiwiZXhpc3RzIiwia2V5Q29udHJvbCIsInRoZW1lIiwiY3VycmVudE5vIiwidG90YWxObyIsInNsaWRlIiwiZGlmZmVyZW5jZSIsInRvdGFsIiwibWF4SGl0Iiwic2V0U2xpZGUiLCJzbGlkZVN0YXR1cyIsImdldFNsaWRlIiwic2xpZGVTd2l0Y2giLCJpbWFnZVBhdGgiLCJza2lwIiwia2V5dXAiLCJrZXlwcmVzcyIsIlNsaWNrIiwibmljZVNlbGVjdCIsImNvbnNvbGUiLCJsb2ciLCJwb2ludGVyRXZlbnRzIiwibW9kdWxlcyIsImluc3RhbGxlZE1vZHVsZXMiLCJfX3dlYnBhY2tfcmVxdWlyZV9fIiwibW9kdWxlSWQiLCJlbnVtZXJhYmxlIiwidG9TdHJpbmdUYWciLCJfX2VzTW9kdWxlIiwibnMiLCJwcm9wZXJ0eSIsIl9pbnB1dG1hc2syIiwiX2ludGVyb3BSZXF1aXJlRGVmYXVsdCIsIl9pbnB1dG1hc2s0IiwiX2pxdWVyeTIiLCJkZWZhdWx0IiwiSW5wdXRtYXNrIiwiX19XRUJQQUNLX0FNRF9ERUZJTkVfRkFDVE9SWV9fIiwiX19XRUJQQUNLX0FNRF9ERUZJTkVfQVJSQVlfXyIsIl9fV0VCUEFDS19BTURfREVGSU5FX1JFU1VMVF9fIiwiZXh0ZW5kRGVmaW5pdGlvbnMiLCJ2YWxpZGF0b3IiLCJjYXNpbmciLCImIiwiIyIsImV4dGVuZEFsaWFzZXMiLCJjc3N1bml0IiwicmVnZXgiLCJhdXRvVW5tYXNrIiwiaXAiLCJtYXNrIiwiZGVmaW5pdGlvbnMiLCJjaHJzIiwibWFza3NldCIsInN0cmljdCIsImJ1ZmZlciIsIm9uVW5NYXNrIiwibWFza2VkVmFsdWUiLCJ1bm1hc2tlZFZhbHVlIiwiaW5wdXRtb2RlIiwiZW1haWwiLCJncmVlZHkiLCJvbkJlZm9yZVBhc3RlIiwicGFzdGVkVmFsdWUiLCItIiwibWFjIiwidmluIiwiY2xlYXJJbmNvbXBsZXRlIiwiX3R5cGVvZiIsInVhIiwiaWUiLCJtb2JpbGUiLCJpc0lucHV0RXZlbnRTdXBwb3J0ZWQiLCJpZW1vYmlsZSIsImlwaG9uZSIsImFsaWFzIiwiaW50ZXJuYWwiLCJyZWZyZXNoVmFsdWUiLCJkZWZhdWx0cyIsIm5vTWFza3NDYWNoZSIsInVzZXJPcHRpb25zIiwiaXNSVEwiLCJudW1lcmljSW5wdXQiLCJyZXNvbHZlQWxpYXMiLCJhbGlhc1N0ciIsImFsaWFzRGVmaW5pdGlvbiIsImFsaWFzZXMiLCJnZW5lcmF0ZU1hc2tTZXQiLCJub2NhY2hlIiwiZ2VuZXJhdGVNYXNrIiwibWV0YWRhdGEiLCJyZWdleE1hc2siLCJyZXBlYXQiLCJwbGFjZWhvbGRlciIsInJlcGVhdFN0YXJ0IiwiZ3JvdXBtYXJrZXIiLCJxdWFudGlmaWVybWFya2VyIiwibWFza3NldERlZmluaXRpb24iLCJtYXNrZGVmS2V5IiwibWFza3NDYWNoZSIsIm1hc2tUb2tlbiIsImFuYWx5c2VNYXNrIiwidmFsaWRQb3NpdGlvbnMiLCJfYnVmZmVyIiwidGVzdHMiLCJleGNsdWRlcyIsIm1hc2tMZW5ndGgiLCJqaXRPZmZzZXQiLCJrZWVwU3RhdGljIiwiY2hhckF0IiwiYWx0TWFzayIsIm5keCIsIm1zayIsImFsdGVybmF0b3JtYXJrZXIiLCJldmVudE5hbWUiLCJldk5hbWUiLCJpc1N1cHBvcnRlZCIsIm1hc2tTY29wZSIsImFjdGlvbk9iaiIsInVuZG9WYWx1ZSIsIiRlbCIsIm1heExlbmd0aCIsImNvbG9yTWFzayIsIm9yaWdpbmFsUGxhY2Vob2xkZXIiLCJpbnB1dG1hc2siLCJza2lwS2V5UHJlc3NFdmVudCIsInNraXBJbnB1dEV2ZW50IiwiaWdub3JhYmxlIiwibW91c2VFbnRlciIsImdldE1hc2tUZW1wbGF0ZSIsImJhc2VPbklucHV0IiwibWluaW1hbFBvcyIsImluY2x1ZGVNb2RlIiwibm9KaXQiLCJjbGVhck9wdGlvbmFsVGFpbCIsIm5keEludGx6ciIsInRlc3RQb3MiLCJtYXNrVGVtcGxhdGUiLCJnZXRMYXN0VmFsaWRQb3NpdGlvbiIsImdldE1hc2tTZXQiLCJvcHRpb25hbGl0eSIsImdlbmVyYXRlZElucHV0Iiwic2tpcE9wdGlvbmFsUGFydENoYXJhY3RlciIsImRldGVybWluZVRlc3RUZW1wbGF0ZSIsImdldFRlc3RzIiwibG9jYXRvciIsIm5hdGl2ZURlZiIsImdldFBsYWNlaG9sZGVyIiwiZ2V0VGVzdFRlbXBsYXRlIiwiaml0TWFza2luZyIsImppdCIsIm5ld0Jsb2NrTWFya2VyIiwiZGVmIiwicmVzZXRNYXNrU2V0Iiwic29mdCIsImNsb3Nlc3RUbyIsInZhbGlkcyIsInBvc05keCIsInBzTmR4IiwiZ2V0RGVjaXNpb25UYWtlciIsInRzdCIsImRlY2lzaW9uVGFrZXIiLCJhbHRlcm5hdGlvbiIsImdldExvY2F0b3IiLCJhbGlnbiIsIm1sb2MiLCJ0c3RMb2NhdG9yIiwiYmVzdE1hdGNoIiwiYWx0VGVzdCIsImdldFRlc3QiLCJ0YXJnZXRMb2NhdG9yIiwiZGlzdGFuY2UiLCJvcHRpb25hbFF1YW50aWZpZXIiLCJ0c3RQcyIsInBvc2l0aW9uQ2FuTWF0Y2hEZWZpbml0aW9uIiwidmFsaWQiLCJ0bmR4IiwibGF0ZXN0TWF0Y2giLCJtYXNrVG9rZW5zIiwibmR4SW5pdGlhbGl6ZXIiLCJpbnNlcnRTdG9wIiwiY2FjaGVEZXBlbmRlbmN5IiwicmVzb2x2ZVRlc3RGcm9tVG9rZW4iLCJsb29wTmR4IiwicXVhbnRpZmllclJlY3Vyc2UiLCJoYW5kbGVNYXRjaCIsImlzRmlyc3RNYXRjaCIsInRva2VuR3JvdXAiLCJmaXJzdE1hdGNoIiwiaXNRdWFudGlmaWVyIiwicmVzb2x2ZU5keEluaXRpYWxpemVyIiwiYWx0ZXJuYXRlTmR4IiwidGFyZ2V0QWx0ZXJuYXRpb24iLCJpbmRleFBvcyIsImxtbnQiLCJuZHhQb3MiLCJiZXN0TWF0Y2hBbHRJbmRleCIsImlzU3Vic2V0T2YiLCJjaGFyQ29kZUF0Iiwic2V0TWVyZ2VMb2NhdG9ycyIsInRhcmdldE1hdGNoIiwiYWx0TWF0Y2giLCJsb2NOZHgiLCJjZCIsImlzR3JvdXAiLCJpc09wdGlvbmFsIiwib3B0aW9uYWxUb2tlbiIsIm10Y2giLCJpc0FsdGVybmF0b3IiLCJtYWx0TWF0Y2hlcyIsImFsdGVybmF0ZVRva2VuIiwibWFsdGVybmF0ZU1hdGNoZXMiLCJjdXJyZW50TWF0Y2hlcyIsImxvb3BOZHhDbnQiLCJhbHRJbmRleCIsImFtbmR4IiwiY3VycmVudFBvcyIsIm5keEluaXRpYWxpemVyQ2xvbmUiLCJhbHRJbmRleEFyciIsImFsdEluZGV4QXJyQ2xvbmUiLCJ1bk1hdGNoZWRBbHRlcm5hdGlvbiIsIm5keDEiLCJkcm9wTWF0Y2giLCJuZHgyIiwiYWx0TWF0Y2gyIiwiY2FuTWF0Y2giLCJxdCIsInFuZHgiLCJxdWFudGlmaWVyIiwicHJldmlvdXNQb3MiLCJtdG5keCIsImdldEJ1ZmZlclRlbXBsYXRlIiwiZ2V0QnVmZmVyIiwibm9DYWNoZSIsInJlZnJlc2hGcm9tQnVmZmVyIiwidmFsUmVzdWx0IiwiaXNWYWxpZCIsImNhcmV0IiwiY2hlY2tBbHRlcm5hdGlvbk1hdGNoIiwiYWx0QXJyMSIsImFsdEFycjIiLCJuYSIsIm5hTmR4IiwiYWx0QXJyQyIsImlzTWF0Y2giLCJuYUFyciIsImFsbmR4IiwiYWx0ZXJuYXRlIiwiZnJvbVNldFZhbGlkIiwickFsdFBvcyIsImxhc3RBbHQiLCJhbHRQb3MiLCJwcmV2QWx0UG9zIiwidmFsaWRQb3MiLCJkZWNpc2lvblBvcyIsInZhbGlkUHNDbG9uZSIsImlzVmFsaWRSc2x0IiwibEFsdFBvcyIsInZhbGlkSW5wdXRzQ2xvbmUiLCJzdGF0aWNJbnB1dHNCZWZvcmVQb3MiLCJwb3NPZmZzZXQiLCJ2YWxpZElucHV0cyIsInRhcmdldEx2cCIsImZyb21BbHRlcm5hdGUiLCJ2YWxpZGF0ZU9ubHkiLCJpc1NlbGVjdGlvbiIsInBvc09iaiIsImJlZ2luIiwibWFza1BvcyIsIl9pc1ZhbGlkIiwicnNsdCIsInZhbGlkYXRlZFBvcyIsInJldmFsaWRhdGVNYXNrIiwicG9zQmVmb3JlIiwiU1BBQ0UiLCJwb3NpdGlvbnNDbG9uZSIsInByZVZhbGlkYXRpb24iLCJ0cmFja2JhY2tQb3NpdGlvbnMiLCJjdXJyZW50UG9zVmFsaWQiLCJpbnNlcnRNb2RlIiwic2Vla05leHQiLCJpc01hc2siLCJuUG9zIiwic25Qb3MiLCJpc0NvbXBsZXRlIiwicG9zdFZhbGlkYXRpb24iLCJwb3N0UmVzdWx0IiwicmVmcmVzaCIsIm9yaWdpbmFsUG9zIiwibmV3UG9zIiwiZmlsbE9ubHkiLCJwcyIsInZwIiwiY3ZwSW5wdXQiLCJ2YWxpZFRlc3QiLCJJc0VuY2xvc2VkU3RhdGljIiwicG9zTWF0Y2giLCJyYWRpeFBvaW50IiwicHJldk1hdGNoIiwibmV4dE1hdGNoIiwibHZwIiwiaXNOZWdhdGl2ZSIsIm5lZWRzVmFsaWRhdGlvbiIsInNoaWZ0UG9zaXRpb25zIiwibmV3QmxvY2siLCJzZWVrUHJldmlvdXMiLCJ3cml0ZUJ1ZmZlciIsImNhcmV0UG9zIiwidHJpZ2dlckV2ZW50cyIsIm9uQmVmb3JlV3JpdGUiLCJfdmFsdWVTZXQiLCJyZW5kZXJDb2xvck1hc2siLCIkaW5wdXQiLCJucHRWYWwiLCJfdmFsdWVHZXQiLCJyZXR1cm5QTCIsInByZXZUZXN0Iiwic3RhdGljQWx0ZXJuYXRpb25zIiwiSGFuZGxlTmF0aXZlUGxhY2Vob2xkZXIiLCJucHQiLCJucHRWYWx1ZSIsInZhbHVlQnVmZmVyIiwiRXZlbnRSdWxlciIsImV2ZW50SGFuZGxlciIsImV2IiwidGhhdCIsImltT3B0cyIsInJlYWRPbmx5IiwiY3RybEtleSIsInRhYlRocm91Z2giLCJUQUIiLCJyZXR1cm5WYWwiLCJmb3JtIiwiZXZBcnIiLCJFdmVudEhhbmRsZXJzIiwia2V5ZG93bkV2ZW50IiwiQkFDS1NQQUNFIiwiREVMRVRFIiwiQkFDS1NQQUNFX1NBRkFSSSIsImhhbmRsZVJlbW92ZSIsIkVORCIsIlBBR0VfRE9XTiIsInNoaWZ0S2V5IiwiSE9NRSIsIlBBR0VfVVAiLCJ1bmRvT25Fc2NhcGUiLCJFU0NBUEUiLCJhbHRLZXkiLCJjaGVja1ZhbCIsIklOU0VSVCIsIm9uS2V5RG93biIsImlnbm9yYWJsZXMiLCJrZXlwcmVzc0V2ZW50IiwiY2hlY2t2YWwiLCJ3cml0ZU91dCIsIm1ldGFLZXkiLCJFTlRFUiIsImZvcndhcmRQb3NpdGlvbiIsIl9yYWRpeERhbmNlIiwid3JpdGVPdXRCdWZmZXIiLCJvbktleVZhbGlkYXRpb24iLCJwYXN0ZUV2ZW50IiwidGVtcFZhbHVlIiwiaW5wdXRWYWx1ZSIsInZhbHVlQmVmb3JlQ2FyZXQiLCJzdWJzdHIiLCJ2YWx1ZUFmdGVyQ2FyZXQiLCJjbGlwYm9hcmREYXRhIiwiZ2V0RGF0YSIsInBhc3RlVmFsdWUiLCJpbnB1dEZhbGxCYWNrRXZlbnQiLCJpbnB1dENoYXIiLCJpdiIsImllTW9iaWxlSGFuZGxlciIsImZyb250UGFydCIsImJhY2tQYXJ0IiwiZnJvbnRCdWZmZXJQYXJ0IiwiYmFja0J1ZmZlclBhcnQiLCJlbnRyaWVzIiwiaXNFbnRyeSIsImZwbCIsImVudHJ5Iiwia2V5ZG93biIsImJlZm9yZUlucHV0RXZlbnQiLCJjYW5jZWxhYmxlIiwiaW5wdXRUeXBlIiwic2V0VmFsdWVFdmVudCIsImRldGFpbCIsIm9uQmVmb3JlTWFzayIsImNsZWFyTWFza09uTG9zdEZvY3VzIiwiZm9jdXNFdmVudCIsInNob3dNYXNrT25Gb2N1cyIsInBvc2l0aW9uQ2FyZXRPblRhYiIsImNsaWNrRXZlbnQiLCJtb3VzZWxlYXZlRXZlbnQiLCJ0YWJiZWQiLCJzZWxlY3RlZENhcmV0IiwicG9zaXRpb25DYXJldE9uQ2xpY2siLCJjbGlja1BvcyIsInZwcyIsInJhZGl4UG9zIiwiZG9SYWRpeEZvY3VzIiwiY2xpY2tQb3NpdGlvbiIsImx2Y2xpY2tQb3NpdGlvbiIsImxhc3RQb3NpdGlvbiIsImN1dEV2ZW50IiwiY2xpcERhdGEiLCJzZXREYXRhIiwiZXhlY0NvbW1hbmQiLCJibHVyRXZlbnQiLCJtb3VzZWVudGVyRXZlbnQiLCJzaG93TWFza09uSG92ZXIiLCJzdWJtaXRFdmVudCIsInJlbW92ZU1hc2tPblN1Ym1pdCIsInVubWFza2VkdmFsdWUiLCJyZXNldEV2ZW50IiwibnB0dmwiLCJpbml0aWF0aW5nRXZlbnQiLCJjaGFyQ29kZXMiLCJpbml0aWFsTmR4Iiwic3RhdGljSW5wdXQiLCJlc2NhcGVSZWdleCIsInVtVmFsdWUiLCJwbmR4IiwiYnVmZmVyVmFsdWUiLCJub3RyYW5zbGF0ZSIsInRyYW5zbGF0ZVBvc2l0aW9uIiwic2VsZWN0aW9uU3RhcnQiLCJzZWxlY3Rpb25FbmQiLCJnZXRTZWxlY3Rpb24iLCJnZXRSYW5nZUF0IiwiY29tbW9uQW5jZXN0b3JDb250YWluZXIiLCJzdGFydE9mZnNldCIsImVuZE9mZnNldCIsImNyZWF0ZVJhbmdlIiwiZHVwbGljYXRlIiwibW92ZVN0YXJ0Iiwic2Nyb2xsQ2FsYyIsImN1cnJlbnRTdHlsZSIsImZvbnRTaXplIiwic2Nyb2xsV2lkdGgiLCJ0ZXh0Tm9kZSIsInNldFN0YXJ0Iiwic2V0RW5kIiwiY29sbGFwc2UiLCJyZW1vdmVBbGxSYW5nZXMiLCJhZGRSYW5nZSIsImNyZWF0ZVRleHRSYW5nZSIsIm1vdmVFbmQiLCJkZXRlcm1pbmVMYXN0UmVxdWlyZWRQb3NpdGlvbiIsInJldHVybkRlZmluaXRpb24iLCJibCIsInBvc2l0aW9ucyIsImx2VGVzdCIsImx2VGVzdEFsdCIsInRlbXBsYXRlIiwibHJwIiwiYW1sIiwiZnJvbUlzVmFsaWQiLCJwZW5kIiwiZ3JvdXBTZXBhcmF0b3IiLCJpbml0aWFsaXplQ29sb3JNYXNrIiwiY29tcHV0ZWRTdHlsZSIsInRleHRBbGlnbiIsIm9mZnNldExlZnQiLCJjbGllbnR4IiwidGV4dFRyYW5zZm9ybSIsIndoaXRlU3BhY2UiLCJpdGwiLCJpbnB1dFRleHQiLCJwcmV2aW91c1dpZHRoIiwib2Zmc2V0MSIsIm9mZnNldDIiLCJmaW5kQ2FyZXRQb3MiLCJjbGVhciIsImlzU3RhdGljIiwic2V0RW50cnkiLCJtdGwiLCJwb3NpdGlvbkNvbG9yTWFzayIsImFjdGlvbiIsImlzRWxlbWVudFR5cGVTdXBwb3J0ZWQiLCJwYXRjaFZhbHVlUHJvcGVydHkiLCJ2YWx1ZUdldCIsInZhbHVlU2V0IiwicGF0Y2hWYWxob29rIiwiaW5wdXRtYXNrcGF0Y2giLCJ2YWxob29rR2V0IiwidmFsaG9va1NldCIsIm51bGxhYmxlIiwiJGVsZW0iLCJfX3ZhbHVlR2V0Iiwibm9WYWx1ZVBhdGNoaW5nIiwiZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yIiwiZ2V0UHJvdG90eXBlT2YiLCJfX3Byb3RvX18iLCJ2YWx1ZVByb3BlcnR5IiwidGFnTmFtZSIsIl9fbG9va3VwR2V0dGVyX18iLCJfX2xvb2t1cFNldHRlcl9fIiwiX19kZWZpbmVHZXR0ZXJfXyIsIl9fZGVmaW5lU2V0dGVyX18iLCJfX3ZhbHVlU2V0Iiwib3ZlcnJ1bGVSVEwiLCJlbGVtZW50VHlwZSIsInN1cHBvcnRzSW5wdXRUeXBlIiwiaXNDb250ZW50RWRpdGFibGUiLCJkaXNhYmxlUHJlZGljdGl2ZVRleHQiLCJhdXRvY29ycmVjdCIsIm9uY29tcGxldGUiLCJvbmluY29tcGxldGUiLCJvbmNsZWFyZWQiLCJpbnB1dEV2ZW50T25seSIsImluaXRpYWxWYWx1ZSIsInJsIiwibG1pYiIsIm1hc2tUYXJnZXQiLCJtdGR0IiwiZGF0YUF0dHJpYnV0ZSIsIm9wdGlvbmFsbWFya2VyIiwiZXNjYXBlQ2hhciIsInJpZ2h0QWxpZ24iLCJzdGF0aWNEZWZpbml0aW9uU3ltYm9sIiwiaW1wb3J0RGF0YUF0dHJpYnV0ZXMiLCI5IiwiZGVmaW5pdGlvblN5bWJvbCIsInNjb3BlZE9wdHMiLCJkYXRhb3B0aW9ucyIsIm9wdGlvbkRhdGEiLCJpbXBvcnRPcHRpb24iLCJhdHRyT3B0aW9ucyIsImltcG9ydEF0dHJpYnV0ZU9wdGlvbnMiLCJub3JlbWFzayIsImdldGVtcHR5bWFzayIsImhhc01hc2tlZFZhbHVlIiwiZ2V0bWV0YWRhdGEiLCJzZXRWYWx1ZSIsIm9wZW5pbmdUb2tlbiIsImN1cnJlbnRPcGVuaW5nVG9rZW4iLCJhbHRlcm5hdG9yIiwibGFzdE1hdGNoIiwidG9rZW5pemVyIiwicmVnZXhUb2tlbml6ZXIiLCJjdXJyZW50VG9rZW4iLCJNYXNrVG9rZW4iLCJvcGVuZW5pbmdzIiwib3Blbkdyb3VwIiwiYWx0ZXJuYXRvckdyb3VwIiwiaW5zZXJ0VGVzdERlZmluaXRpb24iLCJtdG9rZW4iLCJlbGVtZW50IiwibWFza2RlZiIsImRlZmF1bHRDYXNlIiwibW5keCIsImdyb3VwaWZ5IiwiZ3JvdXBUb2tlbiIsIm1xaiIsIm1xIiwibXEwIiwibXExIiwidG1wTWF0Y2giLCJncm91cFF1YW50aWZpZXIiLCJzdWJUb2tlbiIsInZlcmlmeUdyb3VwTWFya2VyIiwibmV4dFRva2VuIiwicmV2ZXJzZVRva2VucyIsImludE1hdGNoIiwiZXh0ZW5kRGVmYXVsdHMiLCJkZWZpbml0aW9uIiwidW5tYXNrIiwic3RyIiwiRE9XTiIsIkxFRlQiLCJSSUdIVCIsIlVQIiwiQ09OVFJPTCIsImRlcGVuZGVuY3lMaWIiLCJmb3JtYXRDb2RlIiwic2V0RGF0ZSIsImdldERhdGUiLCJkZCIsInBhZCIsImRkZCIsImRkZGQiLCJzZXRNb250aCIsImdldE1vbnRoIiwibW0iLCJtbW0iLCJtbW1tIiwieXkiLCJzZXRGdWxsWWVhciIsImdldEZ1bGxZZWFyIiwieXl5eSIsInNldEhvdXJzIiwiZ2V0SG91cnMiLCJoaCIsImhoaCIsIkhIIiwiSEhIIiwic2V0TWludXRlcyIsImdldE1pbnV0ZXMiLCJNTSIsInNzIiwic2V0U2Vjb25kcyIsImdldFNlY29uZHMiLCJzZXRNaWxsaXNlY29uZHMiLCJnZXRNaWxsaXNlY29uZHMiLCJUVCIsImZvcm1hdEFsaWFzIiwiaXNvRGF0ZSIsImlzb1RpbWUiLCJpc29EYXRlVGltZSIsImlzb1V0Y0RhdGVUaW1lIiwiZ2V0VG9rZW5pemVyIiwiZGF0ZU9ialZhbHVlIiwiZ2V0Rm4iLCJkYXRlIiwibWFza1N0cmluZyIsInRhcmdldFByb3AiLCJkYXRlT3BlcmF0aW9uIiwiZGF0ZU9iaiIsImNvcnJlY3RlZFZhbHVlIiwiZW50ZXJlZFBhcnQiLCJleHRlbmRQcm9wZXJ0eSIsImRhdGV0aW1lIiwiaTE4biIsIm9yZGluYWxTdWZmaXgiLCJpbnB1dEZvcm1hdCIsImRpc3BsYXlGb3JtYXQiLCJvdXRwdXRGb3JtYXQiLCJkYXlOYW1lcyIsIm1vbnRoTmFtZXMiLCJjdXJyZW50UmVzdWx0IiwiZGF0ZVBhcnRzIiwiZ2V0VGltZSIsInJhd2RheSIsImRheSIsInJhd3llYXIiLCJyYXdtb250aCIsIm1vbnRoIiwicmF3WWVhciIsIm1pblllYXIiLCJ5ZWFyIiwiaXNEYXRlSW5SYW5nZSIsInRvZGF5IiwiZ2V0WWVhciIsImF1dG9Fc2NhcGUiLCJ0eHQiLCJlc2NhcGVkVHh0IiwibnVtZXJpYyIsImludGVnZXJEaWdpdHMiLCJkaWdpdHMiLCJhdXRvR3JvdXAiLCJncm91cFNpemUiLCJzZXBzIiwiZmxvb3IiLCJtb2QiLCJpbnRlZ2VyT3B0aW9uYWwiLCJkaWdpdHNPcHRpb25hbCIsImRlY2ltYWxQcm90ZWN0IiwicmFkaXhEZWYiLCJkcSIsImVuZm9yY2VEaWdpdHNPbkJsdXIiLCJhbGxvd01pbnVzIiwibmVnYXRpb25TeW1ib2wiLCJmcm9udCIsImJhY2siLCJ1bm1hc2tBc051bWJlciIsImRvcG9zdCIsImNoYXJBdFBvcyIsInByb2Nlc3NWYWx1ZSIsInJhZGl4UG9zaXRpb24iLCJycGIiLCJhZGRSYWRpeCIsInBvc3RNYXNrIiwicmFkaXhTcGxpdCIsImJ1aWxkUG9zdE1hc2siLCJjYXJkaW5hbGl0eSIsIm5ld0NhcmV0UG9zIiwidW5tYXNrZWQiLCJwYXJzZU1pbk1heE9wdGlvbnMiLCJOYU4iLCJNSU5fVkFMVUUiLCJNQVhfVkFMVUUiLCJpbnRlZ2VyUGFydCIsImVtcHR5Q2hlY2siLCJpbnRlZ2VyTlBhcnQiLCJwdlJhZGl4U3BsaXQiLCJidWZmZXJUZW1wbGF0ZSIsIjoiLCJyYWRpeCIsImRlY2ltYWxQYXJ0IiwiZGlnaXRzRmFjdG9yIiwicG93IiwiYWxpZ25EaWdpdHMiLCJjdXJyZW5jeSIsImRlY2ltYWwiLCJpbnRlZ2VyIiwicGVyY2VudGFnZSIsIm5wdG1hc2siLCJyZXF1aXJlIiwiYWNjZXNzaWJpbGl0eSIsImFkYXB0aXZlSGVpZ2h0IiwiYXBwZW5kQXJyb3dzIiwiYXBwZW5kRG90cyIsImFycm93cyIsImFzTmF2Rm9yIiwicHJldkFycm93IiwibmV4dEFycm93IiwiYXV0b3BsYXkiLCJhdXRvcGxheVNwZWVkIiwiY2VudGVyTW9kZSIsImNlbnRlclBhZGRpbmciLCJjc3NFYXNlIiwiY3VzdG9tUGFnaW5nIiwiZG90cyIsImRvdHNDbGFzcyIsImVkZ2VGcmljdGlvbiIsImZhZGUiLCJmb2N1c09uU2VsZWN0IiwiZm9jdXNPbkNoYW5nZSIsImluZmluaXRlIiwiaW5pdGlhbFNsaWRlIiwibGF6eUxvYWQiLCJtb2JpbGVGaXJzdCIsInBhdXNlT25Ib3ZlciIsInBhdXNlT25Gb2N1cyIsInBhdXNlT25Eb3RzSG92ZXIiLCJyZXNwb25kVG8iLCJyZXNwb25zaXZlIiwicm93cyIsInNsaWRlc1BlclJvdyIsInNsaWRlc1RvU2hvdyIsInNsaWRlc1RvU2Nyb2xsIiwic3dpcGUiLCJzd2lwZVRvU2xpZGUiLCJ0b3VjaE1vdmUiLCJ0b3VjaFRocmVzaG9sZCIsInVzZUNTUyIsInVzZVRyYW5zZm9ybSIsInZhcmlhYmxlV2lkdGgiLCJ2ZXJ0aWNhbFN3aXBpbmciLCJ3YWl0Rm9yQW5pbWF0ZSIsImluaXRpYWxzIiwiYW5pbWF0aW5nIiwiZHJhZ2dpbmciLCJhdXRvUGxheVRpbWVyIiwiY3VycmVudERpcmVjdGlvbiIsImN1cnJlbnRMZWZ0IiwiY3VycmVudFNsaWRlIiwiJGRvdHMiLCJsaXN0V2lkdGgiLCJsaXN0SGVpZ2h0IiwibG9hZEluZGV4IiwiJG5leHRBcnJvdyIsIiRwcmV2QXJyb3ciLCJzY3JvbGxpbmciLCJzbGlkZUNvdW50Iiwic2xpZGVXaWR0aCIsIiRzbGlkZVRyYWNrIiwiJHNsaWRlcyIsInNsaWRpbmciLCJzbGlkZU9mZnNldCIsInN3aXBlTGVmdCIsInN3aXBpbmciLCIkbGlzdCIsInRvdWNoT2JqZWN0IiwidHJhbnNmb3Jtc0VuYWJsZWQiLCJ1bnNsaWNrZWQiLCJhY3RpdmVCcmVha3BvaW50IiwiYW5pbVR5cGUiLCJhbmltUHJvcCIsImJyZWFrcG9pbnRzIiwiYnJlYWtwb2ludFNldHRpbmdzIiwiY3NzVHJhbnNpdGlvbnMiLCJmb2N1c3NlZCIsImludGVycnVwdGVkIiwicGF1c2VkIiwicG9zaXRpb25Qcm9wIiwicm93Q291bnQiLCJzaG91bGRDbGljayIsIiRzbGlkZXIiLCIkc2xpZGVzQ2FjaGUiLCJ0cmFuc2Zvcm1UeXBlIiwidHJhbnNpdGlvblR5cGUiLCJ2aXNpYmlsaXR5Q2hhbmdlIiwid2luZG93V2lkdGgiLCJ3aW5kb3dUaW1lciIsIm1vekhpZGRlbiIsIndlYmtpdEhpZGRlbiIsImF1dG9QbGF5IiwiYXV0b1BsYXlDbGVhciIsImF1dG9QbGF5SXRlcmF0b3IiLCJjaGFuZ2VTbGlkZSIsImNsaWNrSGFuZGxlciIsInNlbGVjdEhhbmRsZXIiLCJzZXRQb3NpdGlvbiIsInN3aXBlSGFuZGxlciIsImRyYWdIYW5kbGVyIiwia2V5SGFuZGxlciIsImluc3RhbmNlVWlkIiwiaHRtbEV4cHIiLCJyZWdpc3RlckJyZWFrcG9pbnRzIiwiYWN0aXZhdGVBREEiLCJhcmlhLWhpZGRlbiIsImFkZFNsaWRlIiwic2xpY2tBZGQiLCJ1bmxvYWQiLCJyZWluaXQiLCJhbmltYXRlSGVpZ2h0Iiwib3V0ZXJIZWlnaHQiLCJhbmltYXRlU2xpZGUiLCJhbmltU3RhcnQiLCJhcHBseVRyYW5zaXRpb24iLCJkaXNhYmxlVHJhbnNpdGlvbiIsImdldE5hdlRhcmdldCIsInNsaWNrIiwic2xpZGVIYW5kbGVyIiwiYnVpbGRBcnJvd3MiLCJhcmlhLWRpc2FibGVkIiwiYnVpbGREb3RzIiwiZ2V0RG90Q291bnQiLCJidWlsZE91dCIsInNldHVwSW5maW5pdGUiLCJ1cGRhdGVEb3RzIiwic2V0U2xpZGVDbGFzc2VzIiwiYnVpbGRSb3dzIiwiY2hlY2tSZXNwb25zaXZlIiwiaW5uZXJXaWR0aCIsInVuc2xpY2siLCJtZXNzYWdlIiwiY2hlY2tOYXZpZ2FibGUiLCJnZXROYXZpZ2FibGVJbmRleGVzIiwiY2xlYW5VcEV2ZW50cyIsImludGVycnVwdCIsImNsZWFuVXBTbGlkZUV2ZW50cyIsIm9yaWVudGF0aW9uQ2hhbmdlIiwicmVzaXplIiwiY2xlYW5VcFJvd3MiLCJmYWRlU2xpZGUiLCJmYWRlU2xpZGVPdXQiLCJmaWx0ZXJTbGlkZXMiLCJzbGlja0ZpbHRlciIsImZvY3VzSGFuZGxlciIsImdldEN1cnJlbnQiLCJzbGlja0N1cnJlbnRTbGlkZSIsImdldExlZnQiLCJvdXRlcldpZHRoIiwiZ2V0T3B0aW9uIiwic2xpY2tHZXRPcHRpb24iLCJnZXRTbGljayIsImdldFNsaWRlQ291bnQiLCJnb1RvIiwic2xpY2tHb1RvIiwic2V0UHJvcHMiLCJzdGFydExvYWQiLCJsb2FkU2xpZGVyIiwiaW5pdGlhbGl6ZUV2ZW50cyIsInVwZGF0ZUFycm93cyIsImluaXRBREEiLCJyb2xlIiwiYXJpYS1kZXNjcmliZWRieSIsImFyaWEtY29udHJvbHMiLCJhcmlhLWxhYmVsIiwiYXJpYS1zZWxlY3RlZCIsImluaXRBcnJvd0V2ZW50cyIsImluaXREb3RFdmVudHMiLCJpbml0U2xpZGVFdmVudHMiLCJpbml0VUkiLCJwcm9ncmVzc2l2ZUxhenlMb2FkIiwic2xpY2tOZXh0IiwicGF1c2UiLCJzbGlja1BhdXNlIiwicGxheSIsInNsaWNrUGxheSIsInBvc3RTbGlkZSIsInNsaWNrUHJldiIsImJyZWFrcG9pbnQiLCJ3aW5kb3dEZWxheSIsInJlbW92ZVNsaWRlIiwic2xpY2tSZW1vdmUiLCJzZXRDU1MiLCJzZXREaW1lbnNpb25zIiwic2V0RmFkZSIsInJpZ2h0Iiwic2V0SGVpZ2h0Iiwic2V0T3B0aW9uIiwic2xpY2tTZXRPcHRpb24iLCJXZWJraXRUcmFuc2l0aW9uIiwiTW96VHJhbnNpdGlvbiIsIm1zVHJhbnNpdGlvbiIsIk9UcmFuc2Zvcm0iLCJwZXJzcGVjdGl2ZVByb3BlcnR5Iiwid2Via2l0UGVyc3BlY3RpdmUiLCJNb3pUcmFuc2Zvcm0iLCJNb3pQZXJzcGVjdGl2ZSIsIndlYmtpdFRyYW5zZm9ybSIsInN3aXBlRGlyZWN0aW9uIiwic3RhcnRYIiwiY3VyWCIsInN0YXJ0WSIsImN1clkiLCJhdGFuMiIsInN3aXBlRW5kIiwic3dpcGVMZW5ndGgiLCJlZGdlSGl0IiwibWluU3dpcGUiLCJmaW5nZXJDb3VudCIsInN3aXBlU3RhcnQiLCJzd2lwZU1vdmUiLCJzcXJ0IiwidW5maWx0ZXJTbGlkZXMiLCJzbGlja1VuZmlsdGVyIiwibGVuZ3RoU2xpZGVyIiwiU2xpZGVyUHJvZHVjdEhpdHMiLCJTbGlkZXJGZWVkYmFjayIsIlNsaWRlclByb2R1Y3REb3RzIiwiU2l6ZVVwIiwiU2xpZGVyUHJvZHVjdEhpdHNEb3RzIiwiSG92ZXJEb3duIiwiSGVhZGVyVG9wTGFuZyIsIkFycm93Q2xpY2siLCJTbGlkZXJQcm9kdWN0QXJyb3ciLCJTbGlkZXJQcm9kdWN0SGl0c0Fycm93IiwiU2xpZGVyRmVlZGJhY2tBcnJvdyIsIlNpemUiLCJTbGlkZXJGZWVkYmFja0RvdHMiLCJGZWVkYmFja0l0ZW1zIiwiY291bnRlcnMiLCJGZWVkYmFja0dyYXlTdmciLCJUYWJTcHJvZHVjdCIsIm9ubW91c2VvdmVyIiwib25tb3VzZW91dCIsIkNhdGFsb2dQcm9kdWN0QWxsIiwiY3JlYXRlRWxlbWVudFR3byIsIk1vdXNlIiwiYnV0dG9uX2NhdGFsb2ciLCJEZXZpY2UiLCJhZGRDbGljayIsImxpbmtob3ZlciIsImhhbWJ1cmdlciIsIk1vZGFsSGVhZGVyTWVudSIsIk1vZGFsSGVhZGVyVG9wIiwiTW9iUm93RWxlbWVudCIsIk1vYkFkYXB0aXZlIiwiTW9iVGVsU2VhcmNoIiwiTW9iaWxlSGVhZGVyVG9wIiwibWVudSIsImxhc3RFbGVtZW50Q2hpbGQiLCJtYXNzaXZlVHdvIiwiZGV2aWNlTGkiLCJjcmVhdGVFbGVtIiwiY291bnRBZGFwdGl2ZSIsIkRyb3BEb3duIiwiZHJvcERvd24iLCJtYXNzaXZlIiwiRmlsdGVyc1Byb2R1Y3RDb250YWluZXIiLCJCYW5uZXIiLCJCdXR0b25DbG9zZSIsIlRleHRDb250YWluZXIiLCJJdGVtc09ubGluZVN0b3JlIiwiRmlsdGVyUHJvZHVjdCIsIlBvcFVwTW9iaWxlRmlsdGVyIiwiZGVsdGFNb2RlIiwiRE9NX0RFTFRBX1BJWEVMIiwibW9kaWZpZXIiLCJET01fREVMVEFfTElORSIsIkRPTV9ERUxUQV9QQUdFIiwiY2xpZW50SGVpZ2h0IiwiZGVsdGFZIiwiSGVhZGVyUHJvZHVjdENvbmFpbmVyIiwiQXJ0aWNsZVNpemUiLCJCdXlTaXplIiwiUmVzdWx0U2l6ZSIsIkhlYWRlclRhYnMiLCJUYWJzQ29udGFpbmVyIiwiY2xpY2tUYWJzIiwiVGFic0JyYW5kc0xpbmtzIiwiVGFic0NvbnRhaW5lckJyYW5kcyIsImNsaWNrVGFic0JyYW5kcyIsImNsaWNrU2VsZWN0IiwiSGVhZGVyQ2xvc2UiLCJjb250YWluZXJUYWJzTGlzdFBlcnNvbmFsIiwidGFic2xpc3QiLCJmdW5jdGlvbkNsaWNrVGFicyIsIm1hc3NpdmVDbG9zZVBvcFVwIiwicG9wdXBjbG9zZSIsInBvcF91cF9hbGwiLCJwb3B1cGNsb3NlbmV3Y2xvc2UiLCJtYXNzaXZlQ2xpY0Rpdk5vZGUiLCJwb3B1cGNsb3NlQ2xpY2siLCJudW1iZXIiLCJsaWxpc3QiLCJjbGlja05ldyIsImxvY2FsU3RvcmFnZSIsInNldEl0ZW0iLCJnZXRJdGVtIiwiZWxlbWVudF9udW1iZXJfdHdvIiwiY291bnRlciIsImVsZW1lbnRfbnVtYmVyIiwia2V5cHJlc3NTbGlkZXIiLCJpbnB1dHMiLCJhcnJvdyIsImNsaWNrUG96Il0sIm1hcHBpbmdzIjoiQ0FlQyxTQUFVQSxFQUFRQyxHQUVLLGlCQUFYQyxRQUFpRCxpQkFBbkJBLE9BQU9DLFFBUWhERCxPQUFPQyxRQUFVSCxFQUFPSSxTQUN2QkgsRUFBU0QsR0FBUSxHQUNqQixTQUFVSyxHQUNULElBQU1BLEVBQUVELFNBQ1AsTUFBTSxJQUFJRSxNQUFPLDRDQUVsQixPQUFPTCxFQUFTSSxJQUdsQkosRUFBU0QsR0FuQlgsQ0F1Qm9CLG9CQUFYTyxPQUF5QkEsT0FBU0MsS0FBTSxTQUFVRCxFQUFRRSxHQU9uRSxJQUFJQyxFQUFNLEdBRU5OLEVBQVdHLEVBQU9ILFNBRWxCTyxFQUFRRCxFQUFJQyxNQUVaQyxFQUFTRixFQUFJRSxPQUViQyxFQUFPSCxFQUFJRyxLQUVYQyxFQUFVSixFQUFJSSxRQUVkQyxFQUFhLEdBRWJDLEVBQVdELEVBQVdDLFNBRXRCQyxFQUFTRixFQUFXRyxlQUVwQkMsRUFBVSxHQUtiQyxFQUFVLFFBR1ZDLEVBQVMsU0FBVUMsRUFBVUMsR0FJNUIsT0FBTyxJQUFJRixFQUFPRyxHQUFHQyxLQUFNSCxFQUFVQyxJQUt0Q0csRUFBUSxxQ0FHUkMsRUFBWSxRQUNaQyxFQUFhLGVBR2JDLEVBQWEsU0FBVUMsRUFBS0MsR0FDM0IsT0FBT0EsRUFBT0MsZUF5YmhCLFNBQVNDLEVBQWFDLEdBTXJCLElBQUlDLElBQVdELEdBQU8sV0FBWUEsR0FBT0EsRUFBSUMsT0FDNUNDLEVBQU9mLEVBQU9lLEtBQU1GLEdBRXJCLE1BQWMsYUFBVEUsSUFBdUJmLEVBQU9nQixTQUFVSCxLQUk3QixVQUFURSxHQUErQixJQUFYRCxHQUNSLGlCQUFYQSxHQUFnQyxFQUFUQSxHQUFnQkEsRUFBUyxLQUFPRCxHQXBjaEViLEVBQU9HLEdBQUtILEVBQU9pQixVQUFZLENBRzlCQyxPQUFRbkIsRUFFUm9CLFlBQWFuQixFQUdiQyxTQUFVLEdB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R0FDQTBoRCxFQUFlbG9DLFdBQVdxSixVQUFVcnNCLEVBQVEvZSxFQUFRdW9CLFFBUTVFaVgsRUFBRTNtQyxVQUFVK1osTUFBTSxXQUNkNHNCLEVBQUUsVUFBVW9OIiwiZmlsZSI6Im1haW4uanMiLCJzb3VyY2VzQ29udGVudCI6WyJcclxuLyohXHJcbiAqIGpRdWVyeSBKYXZhU2NyaXB0IExpYnJhcnkgdjIuMi40XHJcbiAqIGh0dHA6Ly9qcXVlcnkuY29tL1xyXG4gKlxyXG4gKiBJbmNsdWRlcyBTaXp6bGUuanNcclxuICogaHR0cDovL3NpenpsZWpzLmNvbS9cclxuICpcclxuICogQ29weXJpZ2h0IGpRdWVyeSBGb3VuZGF0aW9uIGFuZCBvdGhlciBjb250cmlidXRvcnNcclxuICogUmVsZWFzZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlXHJcbiAqIGh0dHA6Ly9qcXVlcnkub3JnL2xpY2Vuc2VcclxuICpcclxuICogRGF0ZTogMjAxNi0wNS0yMFQxNzoyM1pcclxuICovXHJcblxyXG4oZnVuY3Rpb24oIGdsb2JhbCwgZmFjdG9yeSApIHtcclxuXHJcblx0aWYgKCB0eXBlb2YgbW9kdWxlID09PSBcIm9iamVjdFwiICYmIHR5cGVvZiBtb2R1bGUuZXhwb3J0cyA9PT0gXCJvYmplY3RcIiApIHtcclxuXHRcdC8vIEZvciBDb21tb25KUyBhbmQgQ29tbW9uSlMtbGlrZSBlbnZpcm9ubWVudHMgd2hlcmUgYSBwcm9wZXIgYHdpbmRvd2BcclxuXHRcdC8vIGlzIHByZXNlbnQsIGV4ZWN1dGUgdGhlIGZhY3RvcnkgYW5kIGdldCBqUXVlcnkuXHJcblx0XHQvLyBGb3IgZW52aXJvbm1lbnRzIHRoYXQgZG8gbm90IGhhdmUgYSBgd2luZG93YCB3aXRoIGEgYGRvY3VtZW50YFxyXG5cdFx0Ly8gKHN1Y2ggYXMgTm9kZS5qcyksIGV4cG9zZSBhIGZhY3RvcnkgYXMgbW9kdWxlLmV4cG9ydHMuXHJcblx0XHQvLyBUaGlzIGFjY2VudHVhdGVzIHRoZSBuZWVkIGZvciB0aGUgY3JlYXRpb24gb2YgYSByZWFsIGB3aW5kb3dgLlxyXG5cdFx0Ly8gZS5nLiB2YXIgalF1ZXJ5ID0gcmVxdWlyZShcImpxdWVyeVwiKSh3aW5kb3cpO1xyXG5cdFx0Ly8gU2VlIHRpY2tldCAjMTQ1NDkgZm9yIG1vcmUgaW5mby5cclxuXHRcdG1vZHVsZS5leHBvcnRzID0gZ2xvYmFsLmRvY3VtZW50ID9cclxuXHRcdFx0ZmFjdG9yeSggZ2xvYmFsLCB0cnVlICkgOlxyXG5cdFx0XHRmdW5jdGlvbiggdyApIHtcclxuXHRcdFx0XHRpZiAoICF3LmRvY3VtZW50ICkge1xyXG5cdFx0XHRcdFx0dGhyb3cgbmV3IEVycm9yKCBcImpRdWVyeSByZXF1aXJlcyBhIHdpbmRvdyB3aXRoIGEgZG9jdW1lbnRcIiApO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0XHRyZXR1cm4gZmFjdG9yeSggdyApO1xyXG5cdFx0XHR9O1xyXG5cdH0gZWxzZSB7XHJcblx0XHRmYWN0b3J5KCBnbG9iYWwgKTtcclxuXHR9XHJcblxyXG4vLyBQYXNzIHRoaXMgaWYgd2luZG93IGlzIG5vdCBkZWZpbmVkIHlldFxyXG59KHR5cGVvZiB3aW5kb3cgIT09IFwidW5kZWZpbmVkXCIgPyB3aW5kb3cgOiB0aGlzLCBmdW5jdGlvbiggd2luZG93LCBub0dsb2JhbCApIHtcclxuXHJcbi8vIFN1cHBvcnQ6IEZpcmVmb3ggMTgrXHJcbi8vIENhbid0IGJlIGluIHN0cmljdCBtb2RlLCBzZXZlcmFsIGxpYnMgaW5jbHVkaW5nIEFTUC5ORVQgdHJhY2VcclxuLy8gdGhlIHN0YWNrIHZpYSBhcmd1bWVudHMuY2FsbGVyLmNhbGxlZSBhbmQgRmlyZWZveCBkaWVzIGlmXHJcbi8vIHlvdSB0cnkgdG8gdHJhY2UgdGhyb3VnaCBcInVzZSBzdHJpY3RcIiBjYWxsIGNoYWlucy4gKCMxMzMzNSlcclxuLy9cInVzZSBzdHJpY3RcIjtcclxudmFyIGFyciA9IFtdO1xyXG5cclxudmFyIGRvY3VtZW50ID0gd2luZG93LmRvY3VtZW50O1xyXG5cclxudmFyIHNsaWNlID0gYXJyLnNsaWNlO1xyXG5cclxudmFyIGNvbmNhdCA9IGFyci5jb25jYXQ7XHJcblxyXG52YXIgcHVzaCA9IGFyci5wdXNoO1xyXG5cclxudmFyIGluZGV4T2YgPSBhcnIuaW5kZXhPZjtcclxuXHJcbnZhciBjbGFzczJ0eXBlID0ge307XHJcblxyXG52YXIgdG9TdHJpbmcgPSBjbGFzczJ0eXBlLnRvU3RyaW5nO1xyXG5cclxudmFyIGhhc093biA9IGNsYXNzMnR5cGUuaGFzT3duUHJvcGVydHk7XHJcblxyXG52YXIgc3VwcG9ydCA9IHt9O1xyXG5cclxuXHJcblxyXG52YXJcclxuXHR2ZXJzaW9uID0gXCIyLjIuNFwiLFxyXG5cclxuXHQvLyBEZWZpbmUgYSBsb2NhbCBjb3B5IG9mIGpRdWVyeVxyXG5cdGpRdWVyeSA9IGZ1bmN0aW9uKCBzZWxlY3RvciwgY29udGV4dCApIHtcclxuXHJcblx0XHQvLyBUaGUgalF1ZXJ5IG9iamVjdCBpcyBhY3R1YWxseSBqdXN0IHRoZSBpbml0IGNvbnN0cnVjdG9yICdlbmhhbmNlZCdcclxuXHRcdC8vIE5lZWQgaW5pdCBpZiBqUXVlcnkgaXMgY2FsbGVkIChqdXN0IGFsbG93IGVycm9yIHRvIGJlIHRocm93biBpZiBub3QgaW5jbHVkZWQpXHJcblx0XHRyZXR1cm4gbmV3IGpRdWVyeS5mbi5pbml0KCBzZWxlY3RvciwgY29udGV4dCApO1xyXG5cdH0sXHJcblxyXG5cdC8vIFN1cHBvcnQ6IEFuZHJvaWQ8NC4xXHJcblx0Ly8gTWFrZSBzdXJlIHdlIHRyaW0gQk9NIGFuZCBOQlNQXHJcblx0cnRyaW0gPSAvXltcXHNcXHVGRUZGXFx4QTBdK3xbXFxzXFx1RkVGRlxceEEwXSskL2csXHJcblxyXG5cdC8vIE1hdGNoZXMgZGFzaGVkIHN0cmluZyBmb3IgY2FtZWxpemluZ1xyXG5cdHJtc1ByZWZpeCA9IC9eLW1zLS8sXHJcblx0cmRhc2hBbHBoYSA9IC8tKFtcXGRhLXpdKS9naSxcclxuXHJcblx0Ly8gVXNlZCBieSBqUXVlcnkuY2FtZWxDYXNlIGFzIGNhbGxiYWNrIHRvIHJlcGxhY2UoKVxyXG5cdGZjYW1lbENhc2UgPSBmdW5jdGlvbiggYWxsLCBsZXR0ZXIgKSB7XHJcblx0XHRyZXR1cm4gbGV0dGVyLnRvVXBwZXJDYXNlKCk7XHJcblx0fTtcclxuXHJcbmpRdWVyeS5mbiA9IGpRdWVyeS5wcm90b3R5cGUgPSB7XHJcblxyXG5cdC8vIFRoZSBjdXJyZW50IHZlcnNpb24gb2YgalF1ZXJ5IGJlaW5nIHVzZWRcclxuXHRqcXVlcnk6IHZlcnNpb24sXHJcblxyXG5cdGNvbnN0cnVjdG9yOiBqUXVlcnksXHJcblxyXG5cdC8vIFN0YXJ0IHdpdGggYW4gZW1wdHkgc2VsZWN0b3JcclxuXHRzZWxlY3RvcjogXCJcIixcclxuXHJcblx0Ly8gVGhlIGRlZmF1bHQgbGVuZ3RoIG9mIGEgalF1ZXJ5IG9iamVjdCBpcyAwXHJcblx0bGVuZ3RoOiAwLFxyXG5cclxuXHR0b0FycmF5OiBmdW5jdGlvbigpIHtcclxuXHRcdHJldHVybiBzbGljZS5jYWxsKCB0aGlzICk7XHJcblx0fSxcclxuXHJcblx0Ly8gR2V0IHRoZSBOdGggZWxlbWVudCBpbiB0aGUgbWF0Y2hlZCBlbGVtZW50IHNldCBPUlxyXG5cdC8vIEdldCB0aGUgd2hvbGUgbWF0Y2hlZCBlbGVtZW50IHNldCBhcyBhIGNsZWFuIGFycmF5XHJcblx0Z2V0OiBmdW5jdGlvbiggbnVtICkge1xyXG5cdFx0cmV0dXJuIG51bSAhPSBudWxsID9cclxuXHJcblx0XHRcdC8vIFJldHVybiBqdXN0IHRoZSBvbmUgZWxlbWVudCBmcm9tIHRoZSBzZXRcclxuXHRcdFx0KCBudW0gPCAwID8gdGhpc1sgbnVtICsgdGhpcy5sZW5ndGggXSA6IHRoaXNbIG51bSBdICkgOlxyXG5cclxuXHRcdFx0Ly8gUmV0dXJuIGFsbCB0aGUgZWxlbWVudHMgaW4gYSBjbGVhbiBhcnJheVxyXG5cdFx0XHRzbGljZS5jYWxsKCB0aGlzICk7XHJcblx0fSxcclxuXHJcblx0Ly8gVGFrZSBhbiBhcnJheSBvZiBlbGVtZW50cyBhbmQgcHVzaCBpdCBvbnRvIHRoZSBzdGFja1xyXG5cdC8vIChyZXR1cm5pbmcgdGhlIG5ldyBtYXRjaGVkIGVsZW1lbnQgc2V0KVxyXG5cdHB1c2hTdGFjazogZnVuY3Rpb24oIGVsZW1zICkge1xyXG5cclxuXHRcdC8vIEJ1aWxkIGEgbmV3IGpRdWVyeSBtYXRjaGVkIGVsZW1lbnQgc2V0XHJcblx0XHR2YXIgcmV0ID0galF1ZXJ5Lm1lcmdlKCB0aGlzLmNvbnN0cnVjdG9yKCksIGVsZW1zICk7XHJcblxyXG5cdFx0Ly8gQWRkIHRoZSBvbGQgb2JqZWN0IG9udG8gdGhlIHN0YWNrIChhcyBhIHJlZmVyZW5jZSlcclxuXHRcdHJldC5wcmV2T2JqZWN0ID0gdGhpcztcclxuXHRcdHJldC5jb250ZXh0ID0gdGhpcy5jb250ZXh0O1xyXG5cclxuXHRcdC8vIFJldHVybiB0aGUgbmV3bHktZm9ybWVkIGVsZW1lbnQgc2V0XHJcblx0XHRyZXR1cm4gcmV0O1xyXG5cdH0sXHJcblxyXG5cdC8vIEV4ZWN1dGUgYSBjYWxsYmFjayBmb3IgZXZlcnkgZWxlbWVudCBpbiB0aGUgbWF0Y2hlZCBzZXQuXHJcblx0ZWFjaDogZnVuY3Rpb24oIGNhbGxiYWNrICkge1xyXG5cdFx0cmV0dXJuIGpRdWVyeS5lYWNoKCB0aGlzLCBjYWxsYmFjayApO1xyXG5cdH0sXHJcblxyXG5cdG1hcDogZnVuY3Rpb24oIGNhbGxiYWNrICkge1xyXG5cdFx0cmV0dXJuIHRoaXMucHVzaFN0YWNrKCBqUXVlcnkubWFwKCB0aGlzLCBmdW5jdGlvbiggZWxlbSwgaSApIHtcclxuXHRcdFx0cmV0dXJuIGNhbGxiYWNrLmNhbGwoIGVsZW0sIGksIGVsZW0gKTtcclxuXHRcdH0gKSApO1xyXG5cdH0sXHJcblxyXG5cdHNsaWNlOiBmdW5jdGlvbigpIHtcclxuXHRcdHJldHVybiB0aGlzLnB1c2hTdGFjayggc2xpY2UuYXBwbHkoIHRoaXMsIGFyZ3VtZW50cyApICk7XHJcblx0fSxcclxuXHJcblx0Zmlyc3Q6IGZ1bmN0aW9uKCkge1xyXG5cdFx0cmV0dXJuIHRoaXMuZXEoIDAgKTtcclxuXHR9LFxyXG5cclxuXHRsYXN0OiBmdW5jdGlvbigpIHtcclxuXHRcdHJldHVybiB0aGlzLmVxKCAtMSApO1xyXG5cdH0sXHJcblxyXG5cdGVxOiBmdW5jdGlvbiggaSApIHtcclxuXHRcdHZhciBsZW4gPSB0aGlzLmxlbmd0aCxcclxuXHRcdFx0aiA9ICtpICsgKCBpIDwgMCA/IGxlbiA6IDAgKTtcclxuXHRcdHJldHVybiB0aGlzLnB1c2hTdGFjayggaiA+PSAwICYmIGogPCBsZW4gPyBbIHRoaXNbIGogXSBdIDogW10gKTtcclxuXHR9LFxyXG5cclxuXHRlbmQ6IGZ1bmN0aW9uKCkge1xyXG5cdFx0cmV0dXJuIHRoaXMucHJldk9iamVjdCB8fCB0aGlzLmNvbnN0cnVjdG9yKCk7XHJcblx0fSxcclxuXHJcblx0Ly8gRm9yIGludGVybmFsIHVzZSBvbmx5LlxyXG5cdC8vIEJlaGF2ZXMgbGlrZSBhbiBBcnJheSdzIG1ldGhvZCwgbm90IGxpa2UgYSBqUXVlcnkgbWV0aG9kLlxyXG5cdHB1c2g6IHB1c2gsXHJcblx0c29ydDogYXJyLnNvcnQsXHJcblx0c3BsaWNlOiBhcnIuc3BsaWNlXHJcbn07XHJcblxyXG5qUXVlcnkuZXh0ZW5kID0galF1ZXJ5LmZuLmV4dGVuZCA9IGZ1bmN0aW9uKCkge1xyXG5cdHZhciBvcHRpb25zLCBuYW1lLCBzcmMsIGNvcHksIGNvcHlJc0FycmF5LCBjbG9uZSxcclxuXHRcdHRhcmdldCA9IGFyZ3VtZW50c1sgMCBdIHx8IHt9LFxyXG5cdFx0aSA9IDEsXHJcblx0XHRsZW5ndGggPSBhcmd1bWVudHMubGVuZ3RoLFxyXG5cdFx0ZGVlcCA9IGZhbHNlO1xyXG5cclxuXHQvLyBIYW5kbGUgYSBkZWVwIGNvcHkgc2l0dWF0aW9uXHJcblx0aWYgKCB0eXBlb2YgdGFyZ2V0ID09PSBcImJvb2xlYW5cIiApIHtcclxuXHRcdGRlZXAgPSB0YXJnZXQ7XHJcblxyXG5cdFx0Ly8gU2tpcCB0aGUgYm9vbGVhbiBhbmQgdGhlIHRhcmdldFxyXG5cdFx0dGFyZ2V0ID0gYXJndW1lbnRzWyBpIF0gfHwge307XHJcblx0XHRpKys7XHJcblx0fVxyXG5cclxuXHQvLyBIYW5kbGUgY2FzZSB3aGVuIHRhcmdldCBpcyBhIHN0cmluZyBvciBzb21ldGhpbmcgKHBvc3NpYmxlIGluIGRlZXAgY29weSlcclxuXHRpZiAoIHR5cGVvZiB0YXJnZXQgIT09IFwib2JqZWN0XCIgJiYgIWpRdWVyeS5pc0Z1bmN0aW9uKCB0YXJnZXQgKSApIHtcclxuXHRcdHRhcmdldCA9IHt9O1xyXG5cdH1cclxuXHJcblx0Ly8gRXh0ZW5kIGpRdWVyeSBpdHNlbGYgaWYgb25seSBvbmUgYXJndW1lbnQgaXMgcGFzc2VkXHJcblx0aWYgKCBpID09PSBsZW5ndGggKSB7XHJcblx0XHR0YXJnZXQgPSB0aGlzO1xyXG5cdFx0aS0tO1xyXG5cdH1cclxuXHJcblx0Zm9yICggOyBpIDwgbGVuZ3RoOyBpKysgKSB7XHJcblxyXG5cdFx0Ly8gT25seSBkZWFsIHdpdGggbm9uLW51bGwvdW5kZWZpbmVkIHZhbHVlc1xyXG5cdFx0aWYgKCAoIG9wdGlvbnMgPSBhcmd1bWVudHNbIGkgXSApICE9IG51bGwgKSB7XHJcblxyXG5cdFx0XHQvLyBFeHRlbmQgdGhlIGJhc2Ugb2JqZWN0XHJcblx0XHRcdGZvciAoIG5hbWUgaW4gb3B0aW9ucyApIHtcclxuXHRcdFx0XHRzcmMgPSB0YXJnZXRbIG5hbWUgXTtcclxuXHRcdFx0XHRjb3B5ID0gb3B0aW9uc1sgbmFtZSBdO1xyXG5cclxuXHRcdFx0XHQvLyBQcmV2ZW50IG5ldmVyLWVuZGluZyBsb29wXHJcblx0XHRcdFx0aWYgKCB0YXJnZXQgPT09IGNvcHkgKSB7XHJcblx0XHRcdFx0XHRjb250aW51ZTtcclxuXHRcdFx0XHR9XHJcblxyXG5cdFx0XHRcdC8vIFJlY3Vyc2UgaWYgd2UncmUgbWVyZ2luZyBwbGFpbiBvYmplY3RzIG9yIGFycmF5c1xyXG5cdFx0XHRcdGlmICggZGVlcCAmJiBjb3B5ICYmICggalF1ZXJ5LmlzUGxhaW5PYmplY3QoIGNvcHkgKSB8fFxyXG5cdFx0XHRcdFx0KCBjb3B5SXNBcnJheSA9IGpRdWVyeS5pc0FycmF5KCBjb3B5ICkgKSApICkge1xyXG5cclxuXHRcdFx0XHRcdGlmICggY29weUlzQXJyYXkgKSB7XHJcblx0XHRcdFx0XHRcdGNvcHlJc0FycmF5ID0gZmFsc2U7XHJcblx0XHRcdFx0XHRcdGNsb25lID0gc3JjICYmIGpRdWVyeS5pc0FycmF5KCBzcmMgKSA/IHNyYyA6IFtdO1xyXG5cclxuXHRcdFx0XHRcdH0gZWxzZSB7XHJcblx0XHRcdFx0XHRcdGNsb25lID0gc3JjICYmIGpRdWVyeS5pc1BsYWluT2JqZWN0KCBzcmMgKSA/IHNyYyA6IHt9O1xyXG5cdFx0XHRcdFx0fVxyXG5cclxuXHRcdFx0XHRcdC8vIE5ldmVyIG1vdmUgb3JpZ2luYWwgb2JqZWN0cywgY2xvbmUgdGhlbVxyXG5cdFx0XHRcdFx0dGFyZ2V0WyBuYW1lIF0gPSBqUXVlcnkuZXh0ZW5kKCBkZWVwLCBjbG9uZSwgY29weSApO1xyXG5cclxuXHRcdFx0XHQvLyBEb24ndCBicmluZyBpbiB1bmRlZmluZWQgdmFsdWVzXHJcblx0XHRcdFx0fSBlbHNlIGlmICggY29weSAhPT0gdW5kZWZpbmVkICkge1xyXG5cdFx0XHRcdFx0dGFyZ2V0WyBuYW1lIF0gPSBjb3B5O1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0fVxyXG5cdFx0fVxyXG5cdH1cclxuXHJcblx0Ly8gUmV0dXJuIHRoZSBtb2RpZmllZCBvYmplY3RcclxuXHRyZXR1cm4gdGFyZ2V0O1xyXG59O1xyXG5cclxualF1ZXJ5LmV4dGVuZCgge1xyXG5cclxuXHQvLyBVbmlxdWUgZm9yIGVhY2ggY29weSBvZiBqUXVlcnkgb24gdGhlIHBhZ2VcclxuXHRleHBhbmRvOiBcImpRdWVyeVwiICsgKCB2ZXJzaW9uICsgTWF0aC5yYW5kb20oKSApLnJlcGxhY2UoIC9cXEQvZywgXCJcIiApLFxyXG5cclxuXHQvLyBBc3N1bWUgalF1ZXJ5IGlzIHJlYWR5IHdpdGhvdXQgdGhlIHJlYWR5IG1vZHVsZVxyXG5cdGlzUmVhZHk6IHRydWUsXHJcblxyXG5cdGVycm9yOiBmdW5jdGlvbiggbXNnICkge1xyXG5cdFx0dGhyb3cgbmV3IEVycm9yKCBtc2cgKTtcclxuXHR9LFxyXG5cclxuXHRub29wOiBmdW5jdGlvbigpIHt9LFxyXG5cclxuXHRpc0Z1bmN0aW9uOiBmdW5jdGlvbiggb2JqICkge1xyXG5cdFx0cmV0dXJuIGpRdWVyeS50eXBlKCBvYmogKSA9PT0gXCJmdW5jdGlvblwiO1xyXG5cdH0sXHJcblxyXG5cdGlzQXJyYXk6IEFycmF5LmlzQXJyYXksXHJcblxyXG5cdGlzV2luZG93OiBmdW5jdGlvbiggb2JqICkge1xyXG5cdFx0cmV0dXJuIG9iaiAhPSBudWxsICYmIG9iaiA9PT0gb2JqLndpbmRvdztcclxuXHR9LFxyXG5cclxuXHRpc051bWVyaWM6IGZ1bmN0aW9uKCBvYmogKSB7XHJcblxyXG5cdFx0Ly8gcGFyc2VGbG9hdCBOYU5zIG51bWVyaWMtY2FzdCBmYWxzZSBwb3NpdGl2ZXMgKG51bGx8dHJ1ZXxmYWxzZXxcIlwiKVxyXG5cdFx0Ly8gLi4uYnV0IG1pc2ludGVycHJldHMgbGVhZGluZy1udW1iZXIgc3RyaW5ncywgcGFydGljdWxhcmx5IGhleCBsaXRlcmFscyAoXCIweC4uLlwiKVxyXG5cdFx0Ly8gc3VidHJhY3Rpb24gZm9yY2VzIGluZmluaXRpZXMgdG8gTmFOXHJcblx0XHQvLyBhZGRpbmcgMSBjb3JyZWN0cyBsb3NzIG9mIHByZWNpc2lvbiBmcm9tIHBhcnNlRmxvYXQgKCMxNTEwMClcclxuXHRcdHZhciByZWFsU3RyaW5nT2JqID0gb2JqICYmIG9iai50b1N0cmluZygpO1xyXG5cdFx0cmV0dXJuICFqUXVlcnkuaXNBcnJheSggb2JqICkgJiYgKCByZWFsU3RyaW5nT2JqIC0gcGFyc2VGbG9hdCggcmVhbFN0cmluZ09iaiApICsgMSApID49IDA7XHJcblx0fSxcclxuXHJcblx0aXNQbGFpbk9iamVjdDogZnVuY3Rpb24oIG9iaiApIHtcclxuXHRcdHZhciBrZXk7XHJcblxyXG5cdFx0Ly8gTm90IHBsYWluIG9iamVjdHM6XHJcblx0XHQvLyAtIEFueSBvYmplY3Qgb3IgdmFsdWUgd2hvc2UgaW50ZXJuYWwgW1tDbGFzc11dIHByb3BlcnR5IGlzIG5vdCBcIltvYmplY3QgT2JqZWN0XVwiXHJcblx0XHQvLyAtIERPTSBub2Rlc1xyXG5cdFx0Ly8gLSB3aW5kb3dcclxuXHRcdGlmICggalF1ZXJ5LnR5cGUoIG9iaiApICE9PSBcIm9iamVjdFwiIHx8IG9iai5ub2RlVHlwZSB8fCBqUXVlcnkuaXNXaW5kb3coIG9iaiApICkge1xyXG5cdFx0XHRyZXR1cm4gZmFsc2U7XHJcblx0XHR9XHJcblxyXG5cdFx0Ly8gTm90IG93biBjb25zdHJ1Y3RvciBwcm9wZXJ0eSBtdXN0IGJlIE9iamVjdFxyXG5cdFx0aWYgKCBvYmouY29uc3RydWN0b3IgJiZcclxuXHRcdFx0XHQhaGFzT3duLmNhbGwoIG9iaiwgXCJjb25zdHJ1Y3RvclwiICkgJiZcclxuXHRcdFx0XHQhaGFzT3duLmNhbGwoIG9iai5jb25zdHJ1Y3Rvci5wcm90b3R5cGUgfHwge30sIFwiaXNQcm90b3R5cGVPZlwiICkgKSB7XHJcblx0XHRcdHJldHVybiBmYWxzZTtcclxuXHRcdH1cclxuXHJcblx0XHQvLyBPd24gcHJvcGVydGllcyBhcmUgZW51bWVyYXRlZCBmaXJzdGx5LCBzbyB0byBzcGVlZCB1cCxcclxuXHRcdC8vIGlmIGxhc3Qgb25lIGlzIG93biwgdGhlbiBhbGwgcHJvcGVydGllcyBhcmUgb3duXHJcblx0XHRmb3IgKCBrZXkgaW4gb2JqICkge31cclxuXHJcblx0XHRyZXR1cm4ga2V5ID09PSB1bmRlZmluZWQgfHwgaGFzT3duLmNhbGwoIG9iaiwga2V5ICk7XHJcblx0fSxcclxuXHJcblx0aXNFbXB0eU9iamVjdDogZnVuY3Rpb24oIG9iaiApIHtcclxuXHRcdHZhciBuYW1lO1xyXG5cdFx0Zm9yICggbmFtZSBpbiBvYmogKSB7XHJcblx0XHRcdHJldHVybiBmYWxzZTtcclxuXHRcdH1cclxuXHRcdHJldHVybiB0cnVlO1xyXG5cdH0sXHJcblxyXG5cdHR5cGU6IGZ1bmN0aW9uKCBvYmogKSB7XHJcblx0XHRpZiAoIG9iaiA9PSBudWxsICkge1xyXG5cdFx0XHRyZXR1cm4gb2JqICsgXCJcIjtcclxuXHRcdH1cclxuXHJcblx0XHQvLyBTdXBwb3J0OiBBbmRyb2lkPDQuMCwgaU9TPDYgKGZ1bmN0aW9uaXNoIFJlZ0V4cClcclxuXHRcdHJldHVybiB0eXBlb2Ygb2JqID09PSBcIm9iamVjdFwiIHx8IHR5cGVvZiBvYmogPT09IFwiZnVuY3Rpb25cIiA/XHJcblx0XHRcdGNsYXNzMnR5cGVbIHRvU3RyaW5nLmNhbGwoIG9iaiApIF0gfHwgXCJvYmplY3RcIiA6XHJcblx0XHRcdHR5cGVvZiBvYmo7XHJcblx0fSxcclxuXHJcblx0Ly8gRXZhbHVhdGVzIGEgc2NyaXB0IGluIGEgZ2xvYmFsIGNvbnRleHRcclxuXHRnbG9iYWxFdmFsOiBmdW5jdGlvbiggY29kZSApIHtcclxuXHRcdHZhciBzY3JpcHQsXHJcblx0XHRcdGluZGlyZWN0ID0gZXZhbDtcclxuXHJcblx0XHRjb2RlID0galF1ZXJ5LnRyaW0oIGNvZGUgKTtcclxuXHJcblx0XHRpZiAoIGNvZGUgKSB7XHJcblxyXG5cdFx0XHQvLyBJZiB0aGUgY29kZSBpbmNsdWRlcyBhIHZhbGlkLCBwcm9sb2d1ZSBwb3NpdGlvblxyXG5cdFx0XHQvLyBzdHJpY3QgbW9kZSBwcmFnbWEsIGV4ZWN1dGUgY29kZSBieSBpbmplY3RpbmcgYVxyXG5cdFx0XHQvLyBzY3JpcHQgdGFnIGludG8gdGhlIGRvY3VtZW50LlxyXG5cdFx0XHRpZiAoIGNvZGUuaW5kZXhPZiggXCJ1c2Ugc3RyaWN0XCIgKSA9PT0gMSApIHtcclxuXHRcdFx0XHRzY3JpcHQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCBcInNjcmlwdFwiICk7XHJcblx0XHRcdFx0c2NyaXB0LnRleHQgPSBjb2RlO1xyXG5cdFx0XHRcdGRvY3VtZW50LmhlYWQuYXBwZW5kQ2hpbGQoIHNjcmlwdCApLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoIHNjcmlwdCApO1xyXG5cdFx0XHR9IGVsc2Uge1xyXG5cclxuXHRcdFx0XHQvLyBPdGhlcndpc2UsIGF2b2lkIHRoZSBET00gbm9kZSBjcmVhdGlvbiwgaW5zZXJ0aW9uXHJcblx0XHRcdFx0Ly8gYW5kIHJlbW92YWwgYnkgdXNpbmcgYW4gaW5kaXJlY3QgZ2xvYmFsIGV2YWxcclxuXHJcblx0XHRcdFx0aW5kaXJlY3QoIGNvZGUgKTtcclxuXHRcdFx0fVxyXG5cdFx0fVxyXG5cdH0sXHJcblxyXG5cdC8vIENvbnZlcnQgZGFzaGVkIHRvIGNhbWVsQ2FzZTsgdXNlZCBieSB0aGUgY3NzIGFuZCBkYXRhIG1vZHVsZXNcclxuXHQvLyBTdXBwb3J0OiBJRTktMTErXHJcblx0Ly8gTWljcm9zb2Z0IGZvcmdvdCB0byBodW1wIHRoZWlyIHZlbmRvciBwcmVmaXggKCM5NTcyKVxyXG5cdGNhbWVsQ2FzZTogZnVuY3Rpb24oIHN0cmluZyApIHtcclxuXHRcdHJldHVybiBzdHJpbmcucmVwbGFjZSggcm1zUHJlZml4LCBcIm1zLVwiICkucmVwbGFjZSggcmRhc2hBbHBoYSwgZmNhbWVsQ2FzZSApO1xyXG5cdH0sXHJcblxyXG5cdG5vZGVOYW1lOiBmdW5jdGlvbiggZWxlbSwgbmFtZSApIHtcclxuXHRcdHJldHVybiBlbGVtLm5vZGVOYW1lICYmIGVsZW0ubm9kZU5hbWUudG9Mb3dlckNhc2UoKSA9PT0gbmFtZS50b0xvd2VyQ2FzZSgpO1xyXG5cdH0sXHJcblxyXG5cdGVhY2g6IGZ1bmN0aW9uKCBvYmosIGNhbGxiYWNrICkge1xyXG5cdFx0dmFyIGxlbmd0aCwgaSA9IDA7XHJcblxyXG5cdFx0aWYgKCBpc0FycmF5TGlrZSggb2JqICkgKSB7XHJcblx0XHRcdGxlbmd0aCA9IG9iai5sZW5ndGg7XHJcblx0XHRcdGZvciAoIDsgaSA8IGxlbmd0aDsgaSsrICkge1xyXG5cdFx0XHRcdGlmICggY2FsbGJhY2suY2FsbCggb2JqWyBpIF0sIGksIG9ialsgaSBdICkgPT09IGZhbHNlICkge1xyXG5cdFx0XHRcdFx0YnJlYWs7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9XHJcblx0XHR9IGVsc2Uge1xyXG5cdFx0XHRmb3IgKCBpIGluIG9iaiApIHtcclxuXHRcdFx0XHRpZiAoIGNhbGxiYWNrLmNhbGwoIG9ialsgaSBdLCBpLCBvYmpbIGkgXSApID09PSBmYWxzZSApIHtcclxuXHRcdFx0XHRcdGJyZWFrO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0fVxyXG5cdFx0fVxyXG5cclxuXHRcdHJldHVybiBvYmo7XHJcblx0fSxcclxuXHJcblx0Ly8gU3VwcG9ydDogQW5kcm9pZDw0LjFcclxuXHR0cmltOiBmdW5jdGlvbiggdGV4dCApIHtcclxuXHRcdHJldHVybiB0ZXh0ID09IG51bGwgP1xyXG5cdFx0XHRcIlwiIDpcclxuXHRcdFx0KCB0ZXh0ICsgXCJcIiApLnJlcGxhY2UoIHJ0cmltLCBcIlwiICk7XHJcblx0fSxcclxuXHJcblx0Ly8gcmVzdWx0cyBpcyBmb3IgaW50ZXJuYWwgdXNhZ2Ugb25seVxyXG5cdG1ha2VBcnJheTogZnVuY3Rpb24oIGFyciwgcmVzdWx0cyApIHtcclxuXHRcdHZhciByZXQgPSByZXN1bHRzIHx8IFtdO1xyXG5cclxuXHRcdGlmICggYXJyICE9IG51bGwgKSB7XHJcblx0XHRcdGlmICggaXNBcnJheUxpa2UoIE9iamVjdCggYXJyICkgKSApIHtcclxuXHRcdFx0XHRqUXVlcnkubWVyZ2UoIHJldCxcclxuXHRcdFx0XHRcdHR5cGVvZiBhcnIgPT09IFwic3RyaW5nXCIgP1xyXG5cdFx0XHRcdFx0WyBhcnIgXSA6IGFyclxyXG5cdFx0XHRcdCk7XHJcblx0XHRcdH0gZWxzZSB7XHJcblx0XHRcdFx0cHVzaC5jYWxsKCByZXQsIGFyciApO1xyXG5cdFx0XHR9XHJcblx0XHR9XHJcblxyXG5cdFx0cmV0dXJuIHJldDtcclxuXHR9LFxyXG5cclxuXHRpbkFycmF5OiBmdW5jdGlvbiggZWxlbSwgYXJyLCBpICkge1xyXG5cdFx0cmV0dXJuIGFyciA9PSBudWxsID8gLTEgOiBpbmRleE9mLmNhbGwoIGFyciwgZWxlbSwgaSApO1xyXG5cdH0sXHJcblxyXG5cdG1lcmdlOiBmdW5jdGlvbiggZmlyc3QsIHNlY29uZCApIHtcclxuXHRcdHZhciBsZW4gPSArc2Vjb25kLmxlbmd0aCxcclxuXHRcdFx0aiA9IDAsXHJcblx0XHRcdGkgPSBmaXJzdC5sZW5ndGg7XHJcblxyXG5cdFx0Zm9yICggOyBqIDwgbGVuOyBqKysgKSB7XHJcblx0XHRcdGZpcnN0WyBpKysgXSA9IHNlY29uZFsgaiBdO1xyXG5cdFx0fVxyXG5cclxuXHRcdGZpcnN0Lmxlbmd0aCA9IGk7XHJcblxyXG5cdFx0cmV0dXJuIGZpcnN0O1xyXG5cdH0sXHJcblxyXG5cdGdyZXA6IGZ1bmN0aW9uKCBlbGVtcywgY2FsbGJhY2ssIGludmVydCApIHtcclxuXHRcdHZhciBjYWxsYmFja0ludmVyc2UsXHJcblx0XHRcdG1hdGNoZXMgPSBbXSxcclxuXHRcdFx0aSA9IDAsXHJcblx0XHRcdGxlbmd0aCA9IGVsZW1zLmxlbmd0aCxcclxuXHRcdFx0Y2FsbGJhY2tFeHBlY3QgPSAhaW52ZXJ0O1xyXG5cclxuXHRcdC8vIEdvIHRocm91Z2ggdGhlIGFycmF5LCBvbmx5IHNhdmluZyB0aGUgaXRlbXNcclxuXHRcdC8vIHRoYXQgcGFzcyB0aGUgdmFsaWRhdG9yIGZ1bmN0aW9uXHJcblx0XHRmb3IgKCA7IGkgPCBsZW5ndGg7IGkrKyApIHtcclxuXHRcdFx0Y2FsbGJhY2tJbnZlcnNlID0gIWNhbGxiYWNrKCBlbGVtc1sgaSBdLCBpICk7XHJcblx0XHRcdGlmICggY2FsbGJhY2tJbnZlcnNlICE9PSBjYWxsYmFja0V4cGVjdCApIHtcclxuXHRcdFx0XHRtYXRjaGVzLnB1c2goIGVsZW1zWyBpIF0gKTtcclxuXHRcdFx0fVxyXG5cdFx0fVxyXG5cclxuXHRcdHJldHVybiBtYXRjaGVzO1xyXG5cdH0sXHJcblxyXG5cdC8vIGFyZyBpcyBmb3IgaW50ZXJuYWwgdXNhZ2Ugb25seVxyXG5cdG1hcDogZnVuY3Rpb24oIGVsZW1zLCBjYWxsYmFjaywgYXJnICkge1xyXG5cdFx0dmFyIGxlbmd0aCwgdmFsdWUsXHJcblx0XHRcdGkgPSAwLFxyXG5cdFx0XHRyZXQgPSBbXTtcclxuXHJcblx0XHQvLyBHbyB0aHJvdWdoIHRoZSBhcnJheSwgdHJhbnNsYXRpbmcgZWFjaCBvZiB0aGUgaXRlbXMgdG8gdGhlaXIgbmV3IHZhbHVlc1xyXG5cdFx0aWYgKCBpc0FycmF5TGlrZSggZWxlbXMgKSApIHtcclxuXHRcdFx0bGVuZ3RoID0gZWxlbXMubGVuZ3RoO1xyXG5cdFx0XHRmb3IgKCA7IGkgPCBsZW5ndGg7IGkrKyApIHtcclxuXHRcdFx0XHR2YWx1ZSA9IGNhbGxiYWNrKCBlbGVtc1sgaSBdLCBpLCBhcmcgKTtcclxuXHJcblx0XHRcdFx0aWYgKCB2YWx1ZSAhPSBudWxsICkge1xyXG5cdFx0XHRcdFx0cmV0LnB1c2goIHZhbHVlICk7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9XHJcblxyXG5cdFx0Ly8gR28gdGhyb3VnaCBldmVyeSBrZXkgb24gdGhlIG9iamVjdCxcclxuXHRcdH0gZWxzZSB7XHJcblx0XHRcdGZvciAoIGkgaW4gZWxlbXMgKSB7XHJcblx0XHRcdFx0dmFsdWUgPSBjYWxsYmFjayggZWxlbXNbIGkgXSwgaSwgYXJnICk7XHJcblxyXG5cdFx0XHRcdGlmICggdmFsdWUgIT0gbnVsbCApIHtcclxuXHRcdFx0XHRcdHJldC5wdXNoKCB2YWx1ZSApO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0fVxyXG5cdFx0fVxyXG5cclxuXHRcdC8vIEZsYXR0ZW4gYW55IG5lc3RlZCBhcnJheXNcclxuXHRcdHJldHVybiBjb25jYXQuYXBwbHkoIFtdLCByZXQgKTtcclxuXHR9LFxyXG5cclxuXHQvLyBBIGdsb2JhbCBHVUlEIGNvdW50ZXIgZm9yIG9iamVjdHNcclxuXHRndWlkOiAxLFxyXG5cclxuXHQvLyBCaW5kIGEgZnVuY3Rpb24gdG8gYSBjb250ZXh0LCBvcHRpb25hbGx5IHBhcnRpYWxseSBhcHBseWluZyBhbnlcclxuXHQvLyBhcmd1bWVudHMuXHJcblx0cHJveHk6IGZ1bmN0aW9uKCBmbiwgY29udGV4dCApIHtcclxuXHRcdHZhciB0bXAsIGFyZ3MsIHByb3h5O1xyXG5cclxuXHRcdGlmICggdHlwZW9mIGNvbnRleHQgPT09IFwic3RyaW5nXCIgKSB7XHJcblx0XHRcdHRtcCA9IGZuWyBjb250ZXh0IF07XHJcblx0XHRcdGNvbnRleHQgPSBmbjtcclxuXHRcdFx0Zm4gPSB0bXA7XHJcblx0XHR9XHJcblxyXG5cdFx0Ly8gUXVpY2sgY2hlY2sgdG8gZGV0ZXJtaW5lIGlmIHRhcmdldCBpcyBjYWxsYWJsZSwgaW4gdGhlIHNwZWNcclxuXHRcdC8vIHRoaXMgdGhyb3dzIGEgVHlwZUVycm9yLCBidXQgd2Ugd2lsbCBqdXN0IHJldHVybiB1bmRlZmluZWQuXHJcblx0XHRpZiAoICFqUXVlcnkuaXNGdW5jdGlvbiggZm4gKSApIHtcclxuXHRcdFx0cmV0dXJuIHVuZGVmaW5lZDtcclxuXHRcdH1cclxuXHJcblx0XHQvLyBTaW11bGF0ZWQgYmluZFxyXG5cdFx0YXJncyA9IHNsaWNlLmNhbGwoIGFyZ3VtZW50cywgMiApO1xyXG5cdFx0cHJveHkgPSBmdW5jdGlvbigpIHtcclxuXHRcdFx0cmV0dXJuIGZuLmFwcGx5KCBjb250ZXh0IHx8IHRoaXMsIGFyZ3MuY29uY2F0KCBzbGljZS5jYWxsKCBhcmd1bWVudHMgKSApICk7XHJcblx0XHR9O1xyXG5cclxuXHRcdC8vIFNldCB0aGUgZ3VpZCBvZiB1bmlxdWUgaGFuZGxlciB0byB0aGUgc2FtZSBvZiBvcmlnaW5hbCBoYW5kbGVyLCBzbyBpdCBjYW4gYmUgcmVtb3ZlZFxyXG5cdFx0cHJveHkuZ3VpZCA9IGZuLmd1aWQgPSBmbi5ndWlkIHx8IGpRdWVyeS5ndWlkKys7XHJcblxyXG5cdFx0cmV0dXJuIHByb3h5O1xyXG5cdH0sXHJcblxyXG5cdG5vdzogRGF0ZS5ub3csXHJcblxyXG5cdC8vIGpRdWVyeS5zdXBwb3J0IGlzIG5vdCB1c2VkIGluIENvcmUgYnV0IG90aGVyIHByb2plY3RzIGF0dGFjaCB0aGVpclxyXG5cdC8vIHByb3BlcnRpZXMgdG8gaXQgc28gaXQgbmVlZHMgdG8gZXhpc3QuXHJcblx0c3VwcG9ydDogc3VwcG9ydFxyXG59ICk7XHJcblxyXG4vLyBKU0hpbnQgd291bGQgZXJyb3Igb24gdGhpcyBjb2RlIGR1ZSB0byB0aGUgU3ltYm9sIG5vdCBiZWluZyBkZWZpbmVkIGluIEVTNS5cclxuLy8gRGVmaW5pbmcgdGhpcyBnbG9iYWwgaW4gLmpzaGludHJjIHdvdWxkIGNyZWF0ZSBhIGRhbmdlciBvZiB1c2luZyB0aGUgZ2xvYmFsXHJcbi8vIHVuZ3VhcmRlZCBpbiBhbm90aGVyIHBsYWNlLCBpdCBzZWVtcyBzYWZlciB0byBqdXN0IGRpc2FibGUgSlNIaW50IGZvciB0aGVzZVxyXG4vLyB0aHJlZSBsaW5lcy5cclxuLyoganNoaW50IGlnbm9yZTogc3RhcnQgKi9cclxuaWYgKCB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgKSB7XHJcblx0alF1ZXJ5LmZuWyBTeW1ib2wuaXRlcmF0b3IgXSA9IGFyclsgU3ltYm9sLml0ZXJhdG9yIF07XHJcbn1cclxuLyoganNoaW50IGlnbm9yZTogZW5kICovXHJcblxyXG4vLyBQb3B1bGF0ZSB0aGUgY2xhc3MydHlwZSBtYXBcclxualF1ZXJ5LmVhY2goIFwiQm9vbGVhbiBOdW1iZXIgU3RyaW5nIEZ1bmN0aW9uIEFycmF5IERhdGUgUmVnRXhwIE9iamVjdCBFcnJvciBTeW1ib2xcIi5zcGxpdCggXCIgXCIgKSxcclxuZnVuY3Rpb24oIGksIG5hbWUgKSB7XHJcblx0Y2xhc3MydHlwZVsgXCJbb2JqZWN0IFwiICsgbmFtZSArIFwiXVwiIF0gPSBuYW1lLnRvTG93ZXJDYXNlKCk7XHJcbn0gKTtcclxuXHJcbmZ1bmN0aW9uIGlzQXJyYXlMaWtlKCBvYmogKSB7XHJcblxyXG5cdC8vIFN1cHBvcnQ6IGlPUyA4LjIgKG5vdCByZXByb2R1Y2libGUgaW4gc2ltdWxhdG9yKVxyXG5cdC8vIGBpbmAgY2hlY2sgdXNlZCB0byBwcmV2ZW50IEpJVCBlcnJvciAoZ2gtMjE0NSlcclxuXHQvLyBoYXNPd24gaXNuJ3QgdXNlZCBoZXJlIGR1ZSB0byBmYWxzZSBuZWdhdGl2ZXNcclxuXHQvLyByZWdhcmRpbmcgTm9kZWxpc3QgbGVuZ3RoIGluIElFXHJcblx0dmFyIGxlbmd0aCA9ICEhb2JqICYmIFwibGVuZ3RoXCIgaW4gb2JqICYmIG9iai5sZW5ndGgsXHJcblx0XHR0eXBlID0galF1ZXJ5LnR5cGUoIG9iaiApO1xyXG5cclxuXHRpZiAoIHR5cGUgPT09IFwiZnVuY3Rpb25cIiB8fCBqUXVlcnkuaXNXaW5kb3coIG9iaiApICkge1xyXG5cdFx0cmV0dXJuIGZhbHNlO1xyXG5cdH1cclxuXHJcblx0cmV0dXJuIHR5cGUgPT09IFwiYXJyYXlcIiB8fCBsZW5ndGggPT09IDAgfHxcclxuXHRcdHR5cGVvZiBsZW5ndGggPT09IFwibnVtYmVyXCIgJiYgbGVuZ3RoID4gMCAmJiAoIGxlbmd0aCAtIDEgKSBpbiBvYmo7XHJcbn1cclxudmFyIFNpenpsZSA9XHJcbi8qIVxyXG4gKiBTaXp6bGUgQ1NTIFNlbGVjdG9yIEVuZ2luZSB2Mi4yLjFcclxuICogaHR0cDovL3NpenpsZWpzLmNvbS9cclxuICpcclxuICogQ29weXJpZ2h0IGpRdWVyeSBGb3VuZGF0aW9uIGFuZCBvdGhlciBjb250cmlidXRvcnNcclxuICogUmVsZWFzZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlXHJcbiAqIGh0dHA6Ly9qcXVlcnkub3JnL2xpY2Vuc2VcclxuICpcclxuICogRGF0ZTogMjAxNS0xMC0xN1xyXG4gKi9cclxuKGZ1bmN0aW9uKCB3aW5kb3cgKSB7XHJcblxyXG52YXIgaSxcclxuXHRzdXBwb3J0LFxyXG5cdEV4cHIsXHJcblx0Z2V0VGV4dCxcclxuXHRpc1hNTCxcclxuXHR0b2tlbml6ZSxcclxuXHRjb21waWxlLFxyXG5cdHNlbGVjdCxcclxuXHRvdXRlcm1vc3RDb250ZXh0LFxyXG5cdHNvcnRJbnB1dCxcclxuXHRoYXNEdXBsaWNhdGUsXHJcblxyXG5cdC8vIExvY2FsIGRvY3VtZW50IHZhcnNcclxuXHRzZXREb2N1bWVudCxcclxuXHRkb2N1bWVudCxcclxuXHRkb2NFbGVtLFxyXG5cdGRvY3VtZW50SXNIVE1MLFxyXG5cdHJidWdneVFTQSxcclxuXHRyYnVnZ3lNYXRjaGVzLFxyXG5cdG1hdGNoZXMsXHJcblx0Y29udGFpbnMsXHJcblxyXG5cdC8vIEluc3RhbmNlLXNwZWNpZmljIGRhdGFcclxuXHRleHBhbmRvID0gXCJzaXp6bGVcIiArIDEgKiBuZXcgRGF0ZSgpLFxyXG5cdHByZWZlcnJlZERvYyA9IHdpbmRvdy5kb2N1bWVudCxcclxuXHRkaXJydW5zID0gMCxcclxuXHRkb25lID0gMCxcclxuXHRjbGFzc0NhY2hlID0gY3JlYXRlQ2FjaGUoKSxcclxuXHR0b2tlbkNhY2hlID0gY3JlYXRlQ2FjaGUoKSxcclxuXHRjb21waWxlckNhY2hlID0gY3JlYXRlQ2FjaGUoKSxcclxuXHRzb3J0T3JkZXIgPSBmdW5jdGlvbiggYSwgYiApIHtcclxuXHRcdGlmICggYSA9PT0gYiApIHtcclxuXHRcdFx0aGFzRHVwbGljYXRlID0gdHJ1ZTtcclxuXHRcdH1cclxuXHRcdHJldHVybiAwO1xyXG5cdH0sXHJcblxyXG5cdC8vIEdlbmVyYWwtcHVycG9zZSBjb25zdGFudHNcclxuXHRNQVhfTkVHQVRJVkUgPSAxIDw8IDMxLFxyXG5cclxuXHQvLyBJbnN0YW5jZSBtZXRob2RzXHJcblx0aGFzT3duID0gKHt9KS5oYXNPd25Qcm9wZXJ0eSxcclxuXHRhcnIgPSBbXSxcclxuXHRwb3AgPSBhcnIucG9wLFxyXG5cdHB1c2hfbmF0aXZlID0gYXJyLnB1c2gsXHJcblx0cHVzaCA9IGFyci5wdXNoLFxyXG5cdHNsaWNlID0gYXJyLnNsaWNlLFxyXG5cdC8vIFVzZSBhIHN0cmlwcGVkLWRvd24gaW5kZXhPZiBhcyBpdCdzIGZhc3RlciB0aGFuIG5hdGl2ZVxyXG5cdC8vIGh0dHA6Ly9qc3BlcmYuY29tL3Rob3ItaW5kZXhvZi12cy1mb3IvNVxyXG5cdGluZGV4T2YgPSBmdW5jdGlvbiggbGlzdCwgZWxlbSApIHtcclxuXHRcdHZhciBpID0gMCxcclxuXHRcdFx0bGVuID0gbGlzdC5sZW5ndGg7XHJcblx0XHRmb3IgKCA7IGkgPCBsZW47IGkrKyApIHtcclxuXHRcdFx0aWYgKCBsaXN0W2ldID09PSBlbGVtICkge1xyXG5cdFx0XHRcdHJldHVybiBpO1xyXG5cdFx0XHR9XHJcblx0XHR9XHJcblx0XHRyZXR1cm4gLTE7XHJcblx0fSxcclxuXHJcblx0Ym9vbGVhbnMgPSBcImNoZWNrZWR8c2VsZWN0ZWR8YXN5bmN8YXV0b2ZvY3VzfGF1dG9wbGF5fGNvbnRyb2xzfGRlZmVyfGRpc2FibGVkfGhpZGRlbnxpc21hcHxsb29wfG11bHRpcGxlfG9wZW58cmVhZG9ubHl8cmVxdWlyZWR8c2NvcGVkXCIsXHJcblxyXG5cdC8vIFJlZ3VsYXIgZXhwcmVzc2lvbnNcclxuXHJcblx0Ly8gaHR0cDovL3d3dy53My5vcmcvVFIvY3NzMy1zZWxlY3RvcnMvI3doaXRlc3BhY2VcclxuXHR3aGl0ZXNwYWNlID0gXCJbXFxcXHgyMFxcXFx0XFxcXHJcXFxcblxcXFxmXVwiLFxyXG5cclxuXHQvLyBodHRwOi8vd3d3LnczLm9yZy9UUi9DU1MyMS9zeW5kYXRhLmh0bWwjdmFsdWUtZGVmLWlkZW50aWZpZXJcclxuXHRpZGVudGlmaWVyID0gXCIoPzpcXFxcXFxcXC58W1xcXFx3LV18W15cXFxceDAwLVxcXFx4YTBdKStcIixcclxuXHJcblx0Ly8gQXR0cmlidXRlIHNlbGVjdG9yczogaHR0cDovL3d3dy53My5vcmcvVFIvc2VsZWN0b3JzLyNhdHRyaWJ1dGUtc2VsZWN0b3JzXHJcblx0YXR0cmlidXRlcyA9IFwiXFxcXFtcIiArIHdoaXRlc3BhY2UgKyBcIiooXCIgKyBpZGVudGlmaWVyICsgXCIpKD86XCIgKyB3aGl0ZXNwYWNlICtcclxuXHRcdC8vIE9wZXJhdG9yIChjYXB0dXJlIDIpXHJcblx0XHRcIiooWypeJHwhfl0/PSlcIiArIHdoaXRlc3BhY2UgK1xyXG5cdFx0Ly8gXCJBdHRyaWJ1dGUgdmFsdWVzIG11c3QgYmUgQ1NTIGlkZW50aWZpZXJzIFtjYXB0dXJlIDVdIG9yIHN0cmluZ3MgW2NhcHR1cmUgMyBvciBjYXB0dXJlIDRdXCJcclxuXHRcdFwiKig/OicoKD86XFxcXFxcXFwufFteXFxcXFxcXFwnXSkqKSd8XFxcIigoPzpcXFxcXFxcXC58W15cXFxcXFxcXFxcXCJdKSopXFxcInwoXCIgKyBpZGVudGlmaWVyICsgXCIpKXwpXCIgKyB3aGl0ZXNwYWNlICtcclxuXHRcdFwiKlxcXFxdXCIsXHJcblxyXG5cdHBzZXVkb3MgPSBcIjooXCIgKyBpZGVudGlmaWVyICsgXCIpKD86XFxcXCgoXCIgK1xyXG5cdFx0Ly8gVG8gcmVkdWNlIHRoZSBudW1iZXIgb2Ygc2VsZWN0b3JzIG5lZWRpbmcgdG9rZW5pemUgaW4gdGhlIHByZUZpbHRlciwgcHJlZmVyIGFyZ3VtZW50czpcclxuXHRcdC8vIDEuIHF1b3RlZCAoY2FwdHVyZSAzOyBjYXB0dXJlIDQgb3IgY2FwdHVyZSA1KVxyXG5cdFx0XCIoJygoPzpcXFxcXFxcXC58W15cXFxcXFxcXCddKSopJ3xcXFwiKCg/OlxcXFxcXFxcLnxbXlxcXFxcXFxcXFxcIl0pKilcXFwiKXxcIiArXHJcblx0XHQvLyAyLiBzaW1wbGUgKGNhcHR1cmUgNilcclxuXHRcdFwiKCg/OlxcXFxcXFxcLnxbXlxcXFxcXFxcKClbXFxcXF1dfFwiICsgYXR0cmlidXRlcyArIFwiKSopfFwiICtcclxuXHRcdC8vIDMuIGFueXRoaW5nIGVsc2UgKGNhcHR1cmUgMilcclxuXHRcdFwiLipcIiArXHJcblx0XHRcIilcXFxcKXwpXCIsXHJcblxyXG5cdC8vIExlYWRpbmcgYW5kIG5vbi1lc2NhcGVkIHRyYWlsaW5nIHdoaXRlc3BhY2UsIGNhcHR1cmluZyBzb21lIG5vbi13aGl0ZXNwYWNlIGNoYXJhY3RlcnMgcHJlY2VkaW5nIHRoZSBsYXR0ZXJcclxuXHRyd2hpdGVzcGFjZSA9IG5ldyBSZWdFeHAoIHdoaXRlc3BhY2UgKyBcIitcIiwgXCJnXCIgKSxcclxuXHRydHJpbSA9IG5ldyBSZWdFeHAoIFwiXlwiICsgd2hpdGVzcGFjZSArIFwiK3woKD86XnxbXlxcXFxcXFxcXSkoPzpcXFxcXFxcXC4pKilcIiArIHdoaXRlc3BhY2UgKyBcIiskXCIsIFwiZ1wiICksXHJcblxyXG5cdHJjb21tYSA9IG5ldyBSZWdFeHAoIFwiXlwiICsgd2hpdGVzcGFjZSArIFwiKixcIiArIHdoaXRlc3BhY2UgKyBcIipcIiApLFxyXG5cdHJjb21iaW5hdG9ycyA9IG5ldyBSZWdFeHAoIFwiXlwiICsgd2hpdGVzcGFjZSArIFwiKihbPit+XXxcIiArIHdoaXRlc3BhY2UgKyBcIilcIiArIHdoaXRlc3BhY2UgKyBcIipcIiApLFxyXG5cclxuXHRyYXR0cmlidXRlUXVvdGVzID0gbmV3IFJlZ0V4cCggXCI9XCIgKyB3aGl0ZXNwYWNlICsgXCIqKFteXFxcXF0nXFxcIl0qPylcIiArIHdoaXRlc3BhY2UgKyBcIipcXFxcXVwiLCBcImdcIiApLFxyXG5cclxuXHRycHNldWRvID0gbmV3IFJlZ0V4cCggcHNldWRvcyApLFxyXG5cdHJpZGVudGlmaWVyID0gbmV3IFJlZ0V4cCggXCJeXCIgKyBpZGVudGlmaWVyICsgXCIkXCIgKSxcclxuXHJcblx0bWF0Y2hFeHByID0ge1xyXG5cdFx0XCJJRFwiOiBuZXcgUmVnRXhwKCBcIl4jKFwiICsgaWRlbnRpZmllciArIFwiKVwiICksXHJcblx0XHRcIkNMQVNTXCI6IG5ldyBSZWdFeHAoIFwiXlxcXFwuKFwiICsgaWRlbnRpZmllciArIFwiKVwiICksXHJcblx0XHRcIlRBR1wiOiBuZXcgUmVnRXhwKCBcIl4oXCIgKyBpZGVudGlmaWVyICsgXCJ8WypdKVwiICksXHJcblx0XHRcIkFUVFJcIjogbmV3IFJlZ0V4cCggXCJeXCIgKyBhdHRyaWJ1dGVzICksXHJcblx0XHRcIlBTRVVET1wiOiBuZXcgUmVnRXhwKCBcIl5cIiArIHBzZXVkb3MgKSxcclxuXHRcdFwiQ0hJTERcIjogbmV3IFJlZ0V4cCggXCJeOihvbmx5fGZpcnN0fGxhc3R8bnRofG50aC1sYXN0KS0oY2hpbGR8b2YtdHlwZSkoPzpcXFxcKFwiICsgd2hpdGVzcGFjZSArXHJcblx0XHRcdFwiKihldmVufG9kZHwoKFsrLV18KShcXFxcZCopbnwpXCIgKyB3aGl0ZXNwYWNlICsgXCIqKD86KFsrLV18KVwiICsgd2hpdGVzcGFjZSArXHJcblx0XHRcdFwiKihcXFxcZCspfCkpXCIgKyB3aGl0ZXNwYWNlICsgXCIqXFxcXCl8KVwiLCBcImlcIiApLFxyXG5cdFx0XCJib29sXCI6IG5ldyBSZWdFeHAoIFwiXig/OlwiICsgYm9vbGVhbnMgKyBcIikkXCIsIFwiaVwiICksXHJcblx0XHQvLyBGb3IgdXNlIGluIGxpYnJhcmllcyBpbXBsZW1lbnRpbmcgLmlzKClcclxuXHRcdC8vIFdlIHVzZSB0aGlzIGZvciBQT1MgbWF0Y2hpbmcgaW4gYHNlbGVjdGBcclxuXHRcdFwibmVlZHNDb250ZXh0XCI6IG5ldyBSZWdFeHAoIFwiXlwiICsgd2hpdGVzcGFjZSArIFwiKls+K35dfDooZXZlbnxvZGR8ZXF8Z3R8bHR8bnRofGZpcnN0fGxhc3QpKD86XFxcXChcIiArXHJcblx0XHRcdHdoaXRlc3BhY2UgKyBcIiooKD86LVxcXFxkKT9cXFxcZCopXCIgKyB3aGl0ZXNwYWNlICsgXCIqXFxcXCl8KSg/PVteLV18JClcIiwgXCJpXCIgKVxyXG5cdH0sXHJcblxyXG5cdHJpbnB1dHMgPSAvXig/OmlucHV0fHNlbGVjdHx0ZXh0YXJlYXxidXR0b24pJC9pLFxyXG5cdHJoZWFkZXIgPSAvXmhcXGQkL2ksXHJcblxyXG5cdHJuYXRpdmUgPSAvXltee10rXFx7XFxzKlxcW25hdGl2ZSBcXHcvLFxyXG5cclxuXHQvLyBFYXNpbHktcGFyc2VhYmxlL3JldHJpZXZhYmxlIElEIG9yIFRBRyBvciBDTEFTUyBzZWxlY3RvcnNcclxuXHRycXVpY2tFeHByID0gL14oPzojKFtcXHctXSspfChcXHcrKXxcXC4oW1xcdy1dKykpJC8sXHJcblxyXG5cdHJzaWJsaW5nID0gL1srfl0vLFxyXG5cdHJlc2NhcGUgPSAvJ3xcXFxcL2csXHJcblxyXG5cdC8vIENTUyBlc2NhcGVzIGh0dHA6Ly93d3cudzMub3JnL1RSL0NTUzIxL3N5bmRhdGEuaHRtbCNlc2NhcGVkLWNoYXJhY3RlcnNcclxuXHRydW5lc2NhcGUgPSBuZXcgUmVnRXhwKCBcIlxcXFxcXFxcKFtcXFxcZGEtZl17MSw2fVwiICsgd2hpdGVzcGFjZSArIFwiP3woXCIgKyB3aGl0ZXNwYWNlICsgXCIpfC4pXCIsIFwiaWdcIiApLFxyXG5cdGZ1bmVzY2FwZSA9IGZ1bmN0aW9uKCBfLCBlc2NhcGVkLCBlc2NhcGVkV2hpdGVzcGFjZSApIHtcclxuXHRcdHZhciBoaWdoID0gXCIweFwiICsgZXNjYXBlZCAtIDB4MTAwMDA7XHJcblx0XHQvLyBOYU4gbWVhbnMgbm9uLWNvZGVwb2ludFxyXG5cdFx0Ly8gU3VwcG9ydDogRmlyZWZveDwyNFxyXG5cdFx0Ly8gV29ya2Fyb3VuZCBlcnJvbmVvdXMgbnVtZXJpYyBpbnRlcnByZXRhdGlvbiBvZiArXCIweFwiXHJcblx0XHRyZXR1cm4gaGlnaCAhPT0gaGlnaCB8fCBlc2NhcGVkV2hpdGVzcGFjZSA/XHJcblx0XHRcdGVzY2FwZWQgOlxyXG5cdFx0XHRoaWdoIDwgMCA/XHJcblx0XHRcdFx0Ly8gQk1QIGNvZGVwb2ludFxyXG5cdFx0XHRcdFN0cmluZy5mcm9tQ2hhckNvZGUoIGhpZ2ggKyAweDEwMDAwICkgOlxyXG5cdFx0XHRcdC8vIFN1cHBsZW1lbnRhbCBQbGFuZSBjb2RlcG9pbnQgKHN1cnJvZ2F0ZSBwYWlyKVxyXG5cdFx0XHRcdFN0cmluZy5mcm9tQ2hhckNvZGUoIGhpZ2ggPj4gMTAgfCAweEQ4MDAsIGhpZ2ggJiAweDNGRiB8IDB4REMwMCApO1xyXG5cdH0sXHJcblxyXG5cdC8vIFVzZWQgZm9yIGlmcmFtZXNcclxuXHQvLyBTZWUgc2V0RG9jdW1lbnQoKVxyXG5cdC8vIFJlbW92aW5nIHRoZSBmdW5jdGlvbiB3cmFwcGVyIGNhdXNlcyBhIFwiUGVybWlzc2lvbiBEZW5pZWRcIlxyXG5cdC8vIGVycm9yIGluIElFXHJcblx0dW5sb2FkSGFuZGxlciA9IGZ1bmN0aW9uKCkge1xyXG5cdFx0c2V0RG9jdW1lbnQoKTtcclxuXHR9O1xyXG5cclxuLy8gT3B0aW1pemUgZm9yIHB1c2guYXBwbHkoIF8sIE5vZGVMaXN0IClcclxudHJ5IHtcclxuXHRwdXNoLmFwcGx5KFxyXG5cdFx0KGFyciA9IHNsaWNlLmNhbGwoIHByZWZlcnJlZERvYy5jaGlsZE5vZGVzICkpLFxyXG5cdFx0cHJlZmVycmVkRG9jLmNoaWxkTm9kZXNcclxuXHQpO1xyXG5cdC8vIFN1cHBvcnQ6IEFuZHJvaWQ8NC4wXHJcblx0Ly8gRGV0ZWN0IHNpbGVudGx5IGZhaWxpbmcgcHVzaC5hcHBseVxyXG5cdGFyclsgcHJlZmVycmVkRG9jLmNoaWxkTm9kZXMubGVuZ3RoIF0ubm9kZVR5cGU7XHJcbn0gY2F0Y2ggKCBlICkge1xyXG5cdHB1c2ggPSB7IGFwcGx5OiBhcnIubGVuZ3RoID9cclxuXHJcblx0XHQvLyBMZXZlcmFnZSBzbGljZSBpZiBwb3NzaWJsZVxyXG5cdFx0ZnVuY3Rpb24oIHRhcmdldCwgZWxzICkge1xyXG5cdFx0XHRwdXNoX25hdGl2ZS5hcHBseSggdGFyZ2V0LCBzbGljZS5jYWxsKGVscykgKTtcclxuXHRcdH0gOlxyXG5cclxuXHRcdC8vIFN1cHBvcnQ6IElFPDlcclxuXHRcdC8vIE90aGVyd2lzZSBhcHBlbmQgZGlyZWN0bHlcclxuXHRcdGZ1bmN0aW9uKCB0YXJnZXQsIGVscyApIHtcclxuXHRcdFx0dmFyIGogPSB0YXJnZXQubGVuZ3RoLFxyXG5cdFx0XHRcdGkgPSAwO1xyXG5cdFx0XHQvLyBDYW4ndCB0cnVzdCBOb2RlTGlzdC5sZW5ndGhcclxuXHRcdFx0d2hpbGUgKCAodGFyZ2V0W2orK10gPSBlbHNbaSsrXSkgKSB7fVxyXG5cdFx0XHR0YXJnZXQubGVuZ3RoID0gaiAtIDE7XHJcblx0XHR9XHJcblx0fTtcclxufVxyXG5cclxuZnVuY3Rpb24gU2l6emxlKCBzZWxlY3RvciwgY29udGV4dCwgcmVzdWx0cywgc2VlZCApIHtcclxuXHR2YXIgbSwgaSwgZWxlbSwgbmlkLCBuaWRzZWxlY3QsIG1hdGNoLCBncm91cHMsIG5ld1NlbGVjdG9yLFxyXG5cdFx0bmV3Q29udGV4dCA9IGNvbnRleHQgJiYgY29udGV4dC5vd25lckRvY3VtZW50LFxyXG5cclxuXHRcdC8vIG5vZGVUeXBlIGRlZmF1bHRzIHRvIDksIHNpbmNlIGNvbnRleHQgZGVmYXVsdHMgdG8gZG9jdW1lbnRcclxuXHRcdG5vZGVUeXBlID0gY29udGV4dCA/IGNvbnRleHQubm9kZVR5cGUgOiA5O1xyXG5cclxuXHRyZXN1bHRzID0gcmVzdWx0cyB8fCBbXTtcclxuXHJcblx0Ly8gUmV0dXJuIGVhcmx5IGZyb20gY2FsbHMgd2l0aCBpbnZhbGlkIHNlbGVjdG9yIG9yIGNvbnRleHRcclxuXHRpZiAoIHR5cGVvZiBzZWxlY3RvciAhPT0gXCJzdHJpbmdcIiB8fCAhc2VsZWN0b3IgfHxcclxuXHRcdG5vZGVUeXBlICE9PSAxICYmIG5vZGVUeXBlICE9PSA5ICYmIG5vZGVUeXBlICE9PSAxMSApIHtcclxuXHJcblx0XHRyZXR1cm4gcmVzdWx0cztcclxuXHR9XHJcblxyXG5cdC8vIFRyeSB0byBzaG9ydGN1dCBmaW5kIG9wZXJhdGlvbnMgKGFzIG9wcG9zZWQgdG8gZmlsdGVycykgaW4gSFRNTCBkb2N1bWVudHNcclxuXHRpZiAoICFzZWVkICkge1xyXG5cclxuXHRcdGlmICggKCBjb250ZXh0ID8gY29udGV4dC5vd25lckRvY3VtZW50IHx8IGNvbnRleHQgOiBwcmVmZXJyZWREb2MgKSAhPT0gZG9jdW1lbnQgKSB7XHJcblx0XHRcdHNldERvY3VtZW50KCBjb250ZXh0ICk7XHJcblx0XHR9XHJcblx0XHRjb250ZXh0ID0gY29udGV4dCB8fCBkb2N1bWVudDtcclxuXHJcblx0XHRpZiAoIGRvY3VtZW50SXNIVE1MICkge1xyXG5cclxuXHRcdFx0Ly8gSWYgdGhlIHNlbGVjdG9yIGlzIHN1ZmZpY2llbnRseSBzaW1wbGUsIHRyeSB1c2luZyBhIFwiZ2V0KkJ5KlwiIERPTSBtZXRob2RcclxuXHRcdFx0Ly8gKGV4Y2VwdGluZyBEb2N1bWVudEZyYWdtZW50IGNvbnRleHQsIHdoZXJlIHRoZSBtZXRob2RzIGRvbid0IGV4aXN0KVxyXG5cdFx0XHRpZiAoIG5vZGVUeXBlICE9PSAxMSAmJiAobWF0Y2ggPSBycXVpY2tFeHByLmV4ZWMoIHNlbGVjdG9yICkpICkge1xyXG5cclxuXHRcdFx0XHQvLyBJRCBzZWxlY3RvclxyXG5cdFx0XHRcdGlmICggKG0gPSBtYXRjaFsxXSkgKSB7XHJcblxyXG5cdFx0XHRcdFx0Ly8gRG9jdW1lbnQgY29udGV4dFxyXG5cdFx0XHRcdFx0aWYgKCBub2RlVHlwZSA9PT0gOSApIHtcclxuXHRcdFx0XHRcdFx0aWYgKCAoZWxlbSA9IGNvbnRleHQuZ2V0RWxlbWVudEJ5SWQoIG0gKSkgKSB7XHJcblxyXG5cdFx0XHRcdFx0XHRcdC8vIFN1cHBvcnQ6IElFLCBPcGVyYSwgV2Via2l0XHJcblx0XHRcdFx0XHRcdFx0Ly8gVE9ETzogaWRlbnRpZnkgdmVyc2lvbnNcclxuXHRcdFx0XHRcdFx0XHQvLyBnZXRFbGVtZW50QnlJZCBjYW4gbWF0Y2ggZWxlbWVudHMgYnkgbmFtZSBpbnN0ZWFkIG9mIElEXHJcblx0XHRcdFx0XHRcdFx0aWYgKCBlbGVtLmlkID09PSBtICkge1xyXG5cdFx0XHRcdFx0XHRcdFx0cmVzdWx0cy5wdXNoKCBlbGVtICk7XHJcblx0XHRcdFx0XHRcdFx0XHRyZXR1cm4gcmVzdWx0cztcclxuXHRcdFx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHRcdH0gZWxzZSB7XHJcblx0XHRcdFx0XHRcdFx0cmV0dXJuIHJlc3VsdHM7XHJcblx0XHRcdFx0XHRcdH1cclxuXHJcblx0XHRcdFx0XHQvLyBFbGVtZW50IGNvbnRleHRcclxuXHRcdFx0XHRcdH0gZWxzZSB7XHJcblxyXG5cdFx0XHRcdFx0XHQvLyBTdXBwb3J0OiBJRSwgT3BlcmEsIFdlYmtpdFxyXG5cdFx0XHRcdFx0XHQvLyBUT0RPOiBpZGVudGlmeSB2ZXJzaW9uc1xyXG5cdFx0XHRcdFx0XHQvLyBnZXRFbGVtZW50QnlJZCBjYW4gbWF0Y2ggZWxlbWVudHMgYnkgbmFtZSBpbnN0ZWFkIG9mIElEXHJcblx0XHRcdFx0XHRcdGlmICggbmV3Q29udGV4dCAmJiAoZWxlbSA9IG5ld0NvbnRleHQuZ2V0RWxlbWVudEJ5SWQoIG0gKSkgJiZcclxuXHRcdFx0XHRcdFx0XHRjb250YWlucyggY29udGV4dCwgZWxlbSApICYmXHJcblx0XHRcdFx0XHRcdFx0ZWxlbS5pZCA9PT0gbSApIHtcclxuXHJcblx0XHRcdFx0XHRcdFx0cmVzdWx0cy5wdXNoKCBlbGVtICk7XHJcblx0XHRcdFx0XHRcdFx0cmV0dXJuIHJlc3VsdHM7XHJcblx0XHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdH1cclxuXHJcblx0XHRcdFx0Ly8gVHlwZSBzZWxlY3RvclxyXG5cdFx0XHRcdH0gZWxzZSBpZiAoIG1hdGNoWzJdICkge1xyXG5cdFx0XHRcdFx0cHVzaC5hcHBseSggcmVzdWx0cywgY29udGV4dC5nZXRFbGVtZW50c0J5VGFnTmFtZSggc2VsZWN0b3IgKSApO1xyXG5cdFx0XHRcdFx0cmV0dXJuIHJlc3VsdHM7XHJcblxyXG5cdFx0XHRcdC8vIENsYXNzIHNlbGVjdG9yXHJcblx0XHRcdFx0fSBlbHNlIGlmICggKG0gPSBtYXRjaFszXSkgJiYgc3VwcG9ydC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lICYmXHJcblx0XHRcdFx0XHRjb250ZXh0LmdldEVsZW1lbnRzQnlDbGFzc05hbWUgKSB7XHJcblxyXG5cdFx0XHRcdFx0cHVzaC5hcHBseSggcmVzdWx0cywgY29udGV4dC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lKCBtICkgKTtcclxuXHRcdFx0XHRcdHJldHVybiByZXN1bHRzO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0Ly8gVGFrZSBhZHZhbnRhZ2Ugb2YgcXVlcnlTZWxlY3RvckFsbFxyXG5cdFx0XHRpZiAoIHN1cHBvcnQucXNhICYmXHJcblx0XHRcdFx0IWNvbXBpbGVyQ2FjaGVbIHNlbGVjdG9yICsgXCIgXCIgXSAmJlxyXG5cdFx0XHRcdCghcmJ1Z2d5UVNBIHx8ICFyYnVnZ3lRU0EudGVzdCggc2VsZWN0b3IgKSkgKSB7XHJcblxyXG5cdFx0XHRcdGlmICggbm9kZVR5cGUgIT09IDEgKSB7XHJcblx0XHRcdFx0XHRuZXdDb250ZXh0ID0gY29udGV4dDtcclxuXHRcdFx0XHRcdG5ld1NlbGVjdG9yID0gc2VsZWN0b3I7XHJcblxyXG5cdFx0XHRcdC8vIHFTQSBsb29rcyBvdXRzaWRlIEVsZW1lbnQgY29udGV4dCwgd2hpY2ggaXMgbm90IHdoYXQgd2Ugd2FudFxyXG5cdFx0XHRcdC8vIFRoYW5rcyB0byBBbmRyZXcgRHVwb250IGZvciB0aGlzIHdvcmthcm91bmQgdGVjaG5pcXVlXHJcblx0XHRcdFx0Ly8gU3VwcG9ydDogSUUgPD04XHJcblx0XHRcdFx0Ly8gRXhjbHVkZSBvYmplY3QgZWxlbWVudHNcclxuXHRcdFx0XHR9IGVsc2UgaWYgKCBjb250ZXh0Lm5vZGVOYW1lLnRvTG93ZXJDYXNlKCkgIT09IFwib2JqZWN0XCIgKSB7XHJcblxyXG5cdFx0XHRcdFx0Ly8gQ2FwdHVyZSB0aGUgY29udGV4dCBJRCwgc2V0dGluZyBpdCBmaXJzdCBpZiBuZWNlc3NhcnlcclxuXHRcdFx0XHRcdGlmICggKG5pZCA9IGNvbnRleHQuZ2V0QXR0cmlidXRlKCBcImlkXCIgKSkgKSB7XHJcblx0XHRcdFx0XHRcdG5pZCA9IG5pZC5yZXBsYWNlKCByZXNjYXBlLCBcIlxcXFwkJlwiICk7XHJcblx0XHRcdFx0XHR9IGVsc2Uge1xyXG5cdFx0XHRcdFx0XHRjb250ZXh0LnNldEF0dHJpYnV0ZSggXCJpZFwiLCAobmlkID0gZXhwYW5kbykgKTtcclxuXHRcdFx0XHRcdH1cclxuXHJcblx0XHRcdFx0XHQvLyBQcmVmaXggZXZlcnkgc2VsZWN0b3IgaW4gdGhlIGxpc3RcclxuXHRcdFx0XHRcdGdyb3VwcyA9IHRva2VuaXplKCBzZWxlY3RvciApO1xyXG5cdFx0XHRcdFx0aSA9IGdyb3Vwcy5sZW5ndGg7XHJcblx0XHRcdFx0XHRuaWRzZWxlY3QgPSByaWRlbnRpZmllci50ZXN0KCBuaWQgKSA/IFwiI1wiICsgbmlkIDogXCJbaWQ9J1wiICsgbmlkICsgXCInXVwiO1xyXG5cdFx0XHRcdFx0d2hpbGUgKCBpLS0gKSB7XHJcblx0XHRcdFx0XHRcdGdyb3Vwc1tpXSA9IG5pZHNlbGVjdCArIFwiIFwiICsgdG9TZWxlY3RvciggZ3JvdXBzW2ldICk7XHJcblx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHRuZXdTZWxlY3RvciA9IGdyb3Vwcy5qb2luKCBcIixcIiApO1xyXG5cclxuXHRcdFx0XHRcdC8vIEV4cGFuZCBjb250ZXh0IGZvciBzaWJsaW5nIHNlbGVjdG9yc1xyXG5cdFx0XHRcdFx0bmV3Q29udGV4dCA9IHJzaWJsaW5nLnRlc3QoIHNlbGVjdG9yICkgJiYgdGVzdENvbnRleHQoIGNvbnRleHQucGFyZW50Tm9kZSApIHx8XHJcblx0XHRcdFx0XHRcdGNvbnRleHQ7XHJcblx0XHRcdFx0fVxyXG5cclxuXHRcdFx0XHRpZiAoIG5ld1NlbGVjdG9yICkge1xyXG5cdFx0XHRcdFx0dHJ5IHtcclxuXHRcdFx0XHRcdFx0cHVzaC5hcHBseSggcmVzdWx0cyxcclxuXHRcdFx0XHRcdFx0XHRuZXdDb250ZXh0LnF1ZXJ5U2VsZWN0b3JBbGwoIG5ld1NlbGVjdG9yIClcclxuXHRcdFx0XHRcdFx0KTtcclxuXHRcdFx0XHRcdFx0cmV0dXJuIHJlc3VsdHM7XHJcblx0XHRcdFx0XHR9IGNhdGNoICggcXNhRXJyb3IgKSB7XHJcblx0XHRcdFx0XHR9IGZpbmFsbHkge1xyXG5cdFx0XHRcdFx0XHRpZiAoIG5pZCA9PT0gZXhwYW5kbyApIHtcclxuXHRcdFx0XHRcdFx0XHRjb250ZXh0LnJlbW92ZUF0dHJpYnV0ZSggXCJpZFwiICk7XHJcblx0XHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdH1cclxuXHRcdFx0XHR9XHJcblx0XHRcdH1cclxuXHRcdH1cclxuXHR9XHJcblxyXG5cdC8vIEFsbCBvdGhlcnNcclxuXHRyZXR1cm4gc2VsZWN0KCBzZWxlY3Rvci5yZXBsYWNlKCBydHJpbSwgXCIkMVwiICksIGNvbnRleHQsIHJlc3VsdHMsIHNlZWQgKTtcclxufVxyXG5cclxuLyoqXHJcbiAqIENyZWF0ZSBrZXktdmFsdWUgY2FjaGVzIG9mIGxpbWl0ZWQgc2l6ZVxyXG4gKiBAcmV0dXJucyB7ZnVuY3Rpb24oc3RyaW5nLCBvYmplY3QpfSBSZXR1cm5zIHRoZSBPYmplY3QgZGF0YSBhZnRlciBzdG9yaW5nIGl0IG9uIGl0c2VsZiB3aXRoXHJcbiAqXHRwcm9wZXJ0eSBuYW1lIHRoZSAoc3BhY2Utc3VmZml4ZWQpIHN0cmluZyBhbmQgKGlmIHRoZSBjYWNoZSBpcyBsYXJnZXIgdGhhbiBFeHByLmNhY2hlTGVuZ3RoKVxyXG4gKlx0ZGVsZXRpbmcgdGhlIG9sZGVzdCBlbnRyeVxyXG4gKi9cclxuZnVuY3Rpb24gY3JlYXRlQ2FjaGUoKSB7XHJcblx0dmFyIGtleXMgPSBbXTtcclxuXHJcblx0ZnVuY3Rpb24gY2FjaGUoIGtleSwgdmFsdWUgKSB7XHJcblx0XHQvLyBVc2UgKGtleSArIFwiIFwiKSB0byBhdm9pZCBjb2xsaXNpb24gd2l0aCBuYXRpdmUgcHJvdG90eXBlIHByb3BlcnRpZXMgKHNlZSBJc3N1ZSAjMTU3KVxyXG5cdFx0aWYgKCBrZXlzLnB1c2goIGtleSArIFwiIFwiICkgPiBFeHByLmNhY2hlTGVuZ3RoICkge1xyXG5cdFx0XHQvLyBPbmx5IGtlZXAgdGhlIG1vc3QgcmVjZW50IGVudHJpZXNcclxuXHRcdFx0ZGVsZXRlIGNhY2hlWyBrZXlzLnNoaWZ0KCkgXTtcclxuXHRcdH1cclxuXHRcdHJldHVybiAoY2FjaGVbIGtleSArIFwiIFwiIF0gPSB2YWx1ZSk7XHJcblx0fVxyXG5cdHJldHVybiBjYWNoZTtcclxufVxyXG5cclxuLyoqXHJcbiAqIE1hcmsgYSBmdW5jdGlvbiBmb3Igc3BlY2lhbCB1c2UgYnkgU2l6emxlXHJcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZuIFRoZSBmdW5jdGlvbiB0byBtYXJrXHJcbiAqL1xyXG5mdW5jdGlvbiBtYXJrRnVuY3Rpb24oIGZuICkge1xyXG5cdGZuWyBleHBhbmRvIF0gPSB0cnVlO1xyXG5cdHJldHVybiBmbjtcclxufVxyXG5cclxuLyoqXHJcbiAqIFN1cHBvcnQgdGVzdGluZyB1c2luZyBhbiBlbGVtZW50XHJcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZuIFBhc3NlZCB0aGUgY3JlYXRlZCBkaXYgYW5kIGV4cGVjdHMgYSBib29sZWFuIHJlc3VsdFxyXG4gKi9cclxuZnVuY3Rpb24gYXNzZXJ0KCBmbiApIHtcclxuXHR2YXIgZGl2ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcclxuXHJcblx0dHJ5IHtcclxuXHRcdHJldHVybiAhIWZuKCBkaXYgKTtcclxuXHR9IGNhdGNoIChlKSB7XHJcblx0XHRyZXR1cm4gZmFsc2U7XHJcblx0fSBmaW5hbGx5IHtcclxuXHRcdC8vIFJlbW92ZSBmcm9tIGl0cyBwYXJlbnQgYnkgZGVmYXVsdFxyXG5cdFx0aWYgKCBkaXYucGFyZW50Tm9kZSApIHtcclxuXHRcdFx0ZGl2LnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoIGRpdiApO1xyXG5cdFx0fVxyXG5cdFx0Ly8gcmVsZWFzZSBtZW1vcnkgaW4gSUVcclxuXHRcdGRpdiA9IG51bGw7XHJcblx0fVxyXG59XHJcblxyXG4vKipcclxuICogQWRkcyB0aGUgc2FtZSBoYW5kbGVyIGZvciBhbGwgb2YgdGhlIHNwZWNpZmllZCBhdHRyc1xyXG4gKiBAcGFyYW0ge1N0cmluZ30gYXR0cnMgUGlwZS1zZXBhcmF0ZWQgbGlzdCBvZiBhdHRyaWJ1dGVzXHJcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGhhbmRsZXIgVGhlIG1ldGhvZCB0aGF0IHdpbGwgYmUgYXBwbGllZFxyXG4gKi9cclxuZnVuY3Rpb24gYWRkSGFuZGxlKCBhdHRycywgaGFuZGxlciApIHtcclxuXHR2YXIgYXJyID0gYXR0cnMuc3BsaXQoXCJ8XCIpLFxyXG5cdFx0aSA9IGFyci5sZW5ndGg7XHJcblxyXG5cdHdoaWxlICggaS0tICkge1xyXG5cdFx0RXhwci5hdHRySGFuZGxlWyBhcnJbaV0gXSA9IGhhbmRsZXI7XHJcblx0fVxyXG59XHJcblxyXG4vKipcclxuICogQ2hlY2tzIGRvY3VtZW50IG9yZGVyIG9mIHR3byBzaWJsaW5nc1xyXG4gKiBAcGFyYW0ge0VsZW1lbnR9IGFcclxuICogQHBhcmFtIHtFbGVtZW50fSBiXHJcbiAqIEByZXR1cm5zIHtOdW1iZXJ9IFJldHVybnMgbGVzcyB0aGFuIDAgaWYgYSBwcmVjZWRlcyBiLCBncmVhdGVyIHRoYW4gMCBpZiBhIGZvbGxvd3MgYlxyXG4gKi9cclxuZnVuY3Rpb24gc2libGluZ0NoZWNrKCBhLCBiICkge1xyXG5cdHZhciBjdXIgPSBiICYmIGEsXHJcblx0XHRkaWZmID0gY3VyICYmIGEubm9kZVR5cGUgPT09IDEgJiYgYi5ub2RlVHlwZSA9PT0gMSAmJlxyXG5cdFx0XHQoIH5iLnNvdXJjZUluZGV4IHx8IE1BWF9ORUdBVElWRSApIC1cclxuXHRcdFx0KCB+YS5zb3VyY2VJbmRleCB8fCBNQVhfTkVHQVRJVkUgKTtcclxuXHJcblx0Ly8gVXNlIElFIHNvdXJjZUluZGV4IGlmIGF2YWlsYWJsZSBvbiBib3RoIG5vZGVzXHJcblx0aWYgKCBkaWZmICkge1xyXG5cdFx0cmV0dXJuIGRpZmY7XHJcblx0fVxyXG5cclxuXHQvLyBDaGVjayBpZiBiIGZvbGxvd3MgYVxyXG5cdGlmICggY3VyICkge1xyXG5cdFx0d2hpbGUgKCAoY3VyID0gY3VyLm5leHRTaWJsaW5nKSApIHtcclxuXHRcdFx0aWYgKCBjdXIgPT09IGIgKSB7XHJcblx0XHRcdFx0cmV0dXJuIC0xO1xyXG5cdFx0XHR9XHJcblx0XHR9XHJcblx0fVxyXG5cclxuXHRyZXR1cm4gYSA/IDEgOiAtMTtcclxufVxyXG5cclxuLyoqXHJcbiAqIFJldHVybnMgYSBmdW5jdGlvbiB0byB1c2UgaW4gcHNldWRvcyBmb3IgaW5wdXQgdHlwZXNcclxuICogQHBhcmFtIHtTdHJpbmd9IHR5cGVcclxuICovXHJcbmZ1bmN0aW9uIGNyZWF0ZUlucHV0UHNldWRvKCB0eXBlICkge1xyXG5cdHJldHVybiBmdW5jdGlvbiggZWxlbSApIHtcclxuXHRcdHZhciBuYW1lID0gZWxlbS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpO1xyXG5cdFx0cmV0dXJuIG5hbWUgPT09IFwiaW5wdXRcIiAmJiBlbGVtLnR5cGUgPT09IHR5cGU7XHJcblx0fTtcclxufVxyXG5cclxuLyoqXHJcbiAqIFJldHVybnMgYSBmdW5jdGlvbiB0byB1c2UgaW4gcHNldWRvcyBmb3IgYnV0dG9uc1xyXG4gKiBAcGFyYW0ge1N0cmluZ30gdHlwZVxyXG4gKi9cclxuZnVuY3Rpb24gY3JlYXRlQnV0dG9uUHNldWRvKCB0eXBlICkge1xyXG5cdHJldHVybiBmdW5jdGlvbiggZWxlbSApIHtcclxuXHRcdHZhciBuYW1lID0gZWxlbS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpO1xyXG5cdFx0cmV0dXJuIChuYW1lID09PSBcImlucHV0XCIgfHwgbmFtZSA9PT0gXCJidXR0b25cIikgJiYgZWxlbS50eXBlID09PSB0eXBlO1xyXG5cdH07XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBSZXR1cm5zIGEgZnVuY3Rpb24gdG8gdXNlIGluIHBzZXVkb3MgZm9yIHBvc2l0aW9uYWxzXHJcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZuXHJcbiAqL1xyXG5mdW5jdGlvbiBjcmVhdGVQb3NpdGlvbmFsUHNldWRvKCBmbiApIHtcclxuXHRyZXR1cm4gbWFya0Z1bmN0aW9uKGZ1bmN0aW9uKCBhcmd1bWVudCApIHtcclxuXHRcdGFyZ3VtZW50ID0gK2FyZ3VtZW50O1xyXG5cdFx0cmV0dXJuIG1hcmtGdW5jdGlvbihmdW5jdGlvbiggc2VlZCwgbWF0Y2hlcyApIHtcclxuXHRcdFx0dmFyIGosXHJcblx0XHRcdFx0bWF0Y2hJbmRleGVzID0gZm4oIFtdLCBzZWVkLmxlbmd0aCwgYXJndW1lbnQgKSxcclxuXHRcdFx0XHRpID0gbWF0Y2hJbmRleGVzLmxlbmd0aDtcclxuXHJcblx0XHRcdC8vIE1hdGNoIGVsZW1lbnRzIGZvdW5kIGF0IHRoZSBzcGVjaWZpZWQgaW5kZXhlc1xyXG5cdFx0XHR3aGlsZSAoIGktLSApIHtcclxuXHRcdFx0XHRpZiAoIHNlZWRbIChqID0gbWF0Y2hJbmRleGVzW2ldKSBdICkge1xyXG5cdFx0XHRcdFx0c2VlZFtqXSA9ICEobWF0Y2hlc1tqXSA9IHNlZWRbal0pO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0fVxyXG5cdFx0fSk7XHJcblx0fSk7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBDaGVja3MgYSBub2RlIGZvciB2YWxpZGl0eSBhcyBhIFNpenpsZSBjb250ZXh0XHJcbiAqIEBwYXJhbSB7RWxlbWVudHxPYmplY3Q9fSBjb250ZXh0XHJcbiAqIEByZXR1cm5zIHtFbGVtZW50fE9iamVjdHxCb29sZWFufSBUaGUgaW5wdXQgbm9kZSBpZiBhY2NlcHRhYmxlLCBvdGhlcndpc2UgYSBmYWxzeSB2YWx1ZVxyXG4gKi9cclxuZnVuY3Rpb24gdGVzdENvbnRleHQoIGNvbnRleHQgKSB7XHJcblx0cmV0dXJuIGNvbnRleHQgJiYgdHlwZW9mIGNvbnRleHQuZ2V0RWxlbWVudHNCeVRhZ05hbWUgIT09IFwidW5kZWZpbmVkXCIgJiYgY29udGV4dDtcclxufVxyXG5cclxuLy8gRXhwb3NlIHN1cHBvcnQgdmFycyBmb3IgY29udmVuaWVuY2Vcclxuc3VwcG9ydCA9IFNpenpsZS5zdXBwb3J0ID0ge307XHJcblxyXG4vKipcclxuICogRGV0ZWN0cyBYTUwgbm9kZXNcclxuICogQHBhcmFtIHtFbGVtZW50fE9iamVjdH0gZWxlbSBBbiBlbGVtZW50IG9yIGEgZG9jdW1lbnRcclxuICogQHJldHVybnMge0Jvb2xlYW59IFRydWUgaWZmIGVsZW0gaXMgYSBub24tSFRNTCBYTUwgbm9kZVxyXG4gKi9cclxuaXNYTUwgPSBTaXp6bGUuaXNYTUwgPSBmdW5jdGlvbiggZWxlbSApIHtcclxuXHQvLyBkb2N1bWVudEVsZW1lbnQgaXMgdmVyaWZpZWQgZm9yIGNhc2VzIHdoZXJlIGl0IGRvZXNuJ3QgeWV0IGV4aXN0XHJcblx0Ly8gKHN1Y2ggYXMgbG9hZGluZyBpZnJhbWVzIGluIElFIC0gIzQ4MzMpXHJcblx0dmFyIGRvY3VtZW50RWxlbWVudCA9IGVsZW0gJiYgKGVsZW0ub3duZXJEb2N1bWVudCB8fCBlbGVtKS5kb2N1bWVudEVsZW1lbnQ7XHJcblx0cmV0dXJuIGRvY3VtZW50RWxlbWVudCA/IGRvY3VtZW50RWxlbWVudC5ub2RlTmFtZSAhPT0gXCJIVE1MXCIgOiBmYWxzZTtcclxufTtcclxuXHJcbi8qKlxyXG4gKiBTZXRzIGRvY3VtZW50LXJlbGF0ZWQgdmFyaWFibGVzIG9uY2UgYmFzZWQgb24gdGhlIGN1cnJlbnQgZG9jdW1lbnRcclxuICogQHBhcmFtIHtFbGVtZW50fE9iamVjdH0gW2RvY10gQW4gZWxlbWVudCBvciBkb2N1bWVudCBvYmplY3QgdG8gdXNlIHRvIHNldCB0aGUgZG9jdW1lbnRcclxuICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgY3VycmVudCBkb2N1bWVudFxyXG4gKi9cclxuc2V0RG9jdW1lbnQgPSBTaXp6bGUuc2V0RG9jdW1lbnQgPSBmdW5jdGlvbiggbm9kZSApIHtcclxuXHR2YXIgaGFzQ29tcGFyZSwgcGFyZW50LFxyXG5cdFx0ZG9jID0gbm9kZSA/IG5vZGUub3duZXJEb2N1bWVudCB8fCBub2RlIDogcHJlZmVycmVkRG9jO1xyXG5cclxuXHQvLyBSZXR1cm4gZWFybHkgaWYgZG9jIGlzIGludmFsaWQgb3IgYWxyZWFkeSBzZWxlY3RlZFxyXG5cdGlmICggZG9jID09PSBkb2N1bWVudCB8fCBkb2Mubm9kZVR5cGUgIT09IDkgfHwgIWRvYy5kb2N1bWVudEVsZW1lbnQgKSB7XHJcblx0XHRyZXR1cm4gZG9jdW1lbnQ7XHJcblx0fVxyXG5cclxuXHQvLyBVcGRhdGUgZ2xvYmFsIHZhcmlhYmxlc1xyXG5cdGRvY3VtZW50ID0gZG9jO1xyXG5cdGRvY0VsZW0gPSBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQ7XHJcblx0ZG9jdW1lbnRJc0hUTUwgPSAhaXNYTUwoIGRvY3VtZW50ICk7XHJcblxyXG5cdC8vIFN1cHBvcnQ6IElFIDktMTEsIEVkZ2VcclxuXHQvLyBBY2Nlc3NpbmcgaWZyYW1lIGRvY3VtZW50cyBhZnRlciB1bmxvYWQgdGhyb3dzIFwicGVybWlzc2lvbiBkZW5pZWRcIiBlcnJvcnMgKGpRdWVyeSAjMTM5MzYpXHJcblx0aWYgKCAocGFyZW50ID0gZG9jdW1lbnQuZGVmYXVsdFZpZXcpICYmIHBhcmVudC50b3AgIT09IHBhcmVudCApIHtcclxuXHRcdC8vIFN1cHBvcnQ6IElFIDExXHJcblx0XHRpZiAoIHBhcmVudC5hZGRFdmVudExpc3RlbmVyICkge1xyXG5cdFx0XHRwYXJlbnQuYWRkRXZlbnRMaXN0ZW5lciggXCJ1bmxvYWRcIiwgdW5sb2FkSGFuZGxlciwgZmFsc2UgKTtcclxuXHJcblx0XHQvLyBTdXBwb3J0OiBJRSA5IC0gMTAgb25seVxyXG5cdFx0fSBlbHNlIGlmICggcGFyZW50LmF0dGFjaEV2ZW50ICkge1xyXG5cdFx0XHRwYXJlbnQuYXR0YWNoRXZlbnQoIFwib251bmxvYWRcIiwgdW5sb2FkSGFuZGxlciApO1xyXG5cdFx0fVxyXG5cdH1cclxuXHJcblx0LyogQXR0cmlidXRlc1xyXG5cdC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gKi9cclxuXHJcblx0Ly8gU3VwcG9ydDogSUU8OFxyXG5cdC8vIFZlcmlmeSB0aGF0IGdldEF0dHJpYnV0ZSByZWFsbHkgcmV0dXJucyBhdHRyaWJ1dGVzIGFuZCBub3QgcHJvcGVydGllc1xyXG5cdC8vIChleGNlcHRpbmcgSUU4IGJvb2xlYW5zKVxyXG5cdHN1cHBvcnQuYXR0cmlidXRlcyA9IGFzc2VydChmdW5jdGlvbiggZGl2ICkge1xyXG5cdFx0ZGl2LmNsYXNzTmFtZSA9IFwiaVwiO1xyXG5cdFx0cmV0dXJuICFkaXYuZ2V0QXR0cmlidXRlKFwiY2xhc3NOYW1lXCIpO1xyXG5cdH0pO1xyXG5cclxuXHQvKiBnZXRFbGVtZW50KHMpQnkqXHJcblx0LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSAqL1xyXG5cclxuXHQvLyBDaGVjayBpZiBnZXRFbGVtZW50c0J5VGFnTmFtZShcIipcIikgcmV0dXJucyBvbmx5IGVsZW1lbnRzXHJcblx0c3VwcG9ydC5nZXRFbGVtZW50c0J5VGFnTmFtZSA9IGFzc2VydChmdW5jdGlvbiggZGl2ICkge1xyXG5cdFx0ZGl2LmFwcGVuZENoaWxkKCBkb2N1bWVudC5jcmVhdGVDb21tZW50KFwiXCIpICk7XHJcblx0XHRyZXR1cm4gIWRpdi5nZXRFbGVtZW50c0J5VGFnTmFtZShcIipcIikubGVuZ3RoO1xyXG5cdH0pO1xyXG5cclxuXHQvLyBTdXBwb3J0OiBJRTw5XHJcblx0c3VwcG9ydC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lID0gcm5hdGl2ZS50ZXN0KCBkb2N1bWVudC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lICk7XHJcblxyXG5cdC8vIFN1cHBvcnQ6IElFPDEwXHJcblx0Ly8gQ2hlY2sgaWYgZ2V0RWxlbWVudEJ5SWQgcmV0dXJucyBlbGVtZW50cyBieSBuYW1lXHJcblx0Ly8gVGhlIGJyb2tlbiBnZXRFbGVtZW50QnlJZCBtZXRob2RzIGRvbid0IHBpY2sgdXAgcHJvZ3JhbWF0aWNhbGx5LXNldCBuYW1lcyxcclxuXHQvLyBzbyB1c2UgYSByb3VuZGFib3V0IGdldEVsZW1lbnRzQnlOYW1lIHRlc3RcclxuXHRzdXBwb3J0LmdldEJ5SWQgPSBhc3NlcnQoZnVuY3Rpb24oIGRpdiApIHtcclxuXHRcdGRvY0VsZW0uYXBwZW5kQ2hpbGQoIGRpdiApLmlkID0gZXhwYW5kbztcclxuXHRcdHJldHVybiAhZG9jdW1lbnQuZ2V0RWxlbWVudHNCeU5hbWUgfHwgIWRvY3VtZW50LmdldEVsZW1lbnRzQnlOYW1lKCBleHBhbmRvICkubGVuZ3RoO1xyXG5cdH0pO1xyXG5cclxuXHQvLyBJRCBmaW5kIGFuZCBmaWx0ZXJcclxuXHRpZiAoIHN1cHBvcnQuZ2V0QnlJZCApIHtcclxuXHRcdEV4cHIuZmluZFtcIklEXCJdID0gZnVuY3Rpb24oIGlkLCBjb250ZXh0ICkge1xyXG5cdFx0XHRpZiAoIHR5cGVvZiBjb250ZXh0LmdldEVsZW1lbnRCeUlkICE9PSBcInVuZGVmaW5lZFwiICYmIGRvY3VtZW50SXNIVE1MICkge1xyXG5cdFx0XHRcdHZhciBtID0gY29udGV4dC5nZXRFbGVtZW50QnlJZCggaWQgKTtcclxuXHRcdFx0XHRyZXR1cm4gbSA/IFsgbSBdIDogW107XHJcblx0XHRcdH1cclxuXHRcdH07XHJcblx0XHRFeHByLmZpbHRlcltcIklEXCJdID0gZnVuY3Rpb24oIGlkICkge1xyXG5cdFx0XHR2YXIgYXR0cklkID0gaWQucmVwbGFjZSggcnVuZXNjYXBlLCBmdW5lc2NhcGUgKTtcclxuXHRcdFx0cmV0dXJuIGZ1bmN0aW9uKCBlbGVtICkge1xyXG5cdFx0XHRcdHJldHVybiBlbGVtLmdldEF0dHJpYnV0ZShcImlkXCIpID09PSBhdHRySWQ7XHJcblx0XHRcdH07XHJcblx0XHR9O1xyXG5cdH0gZWxzZSB7XHJcblx0XHQvLyBTdXBwb3J0OiBJRTYvN1xyXG5cdFx0Ly8gZ2V0RWxlbWVudEJ5SWQgaXMgbm90IHJlbGlhYmxlIGFzIGEgZmluZCBzaG9ydGN1dFxyXG5cdFx0ZGVsZXRlIEV4cHIuZmluZFtcIklEXCJdO1xyXG5cclxuXHRcdEV4cHIuZmlsdGVyW1wiSURcIl0gPSAgZnVuY3Rpb24oIGlkICkge1xyXG5cdFx0XHR2YXIgYXR0cklkID0gaWQucmVwbGFjZSggcnVuZXNjYXBlLCBmdW5lc2NhcGUgKTtcclxuXHRcdFx0cmV0dXJuIGZ1bmN0aW9uKCBlbGVtICkge1xyXG5cdFx0XHRcdHZhciBub2RlID0gdHlwZW9mIGVsZW0uZ2V0QXR0cmlidXRlTm9kZSAhPT0gXCJ1bmRlZmluZWRcIiAmJlxyXG5cdFx0XHRcdFx0ZWxlbS5nZXRBdHRyaWJ1dGVOb2RlKFwiaWRcIik7XHJcblx0XHRcdFx0cmV0dXJuIG5vZGUgJiYgbm9kZS52YWx1ZSA9PT0gYXR0cklkO1xyXG5cdFx0XHR9O1xyXG5cdFx0fTtcclxuXHR9XHJcblxyXG5cdC8vIFRhZ1xyXG5cdEV4cHIuZmluZFtcIlRBR1wiXSA9IHN1cHBvcnQuZ2V0RWxlbWVudHNCeVRhZ05hbWUgP1xyXG5cdFx0ZnVuY3Rpb24oIHRhZywgY29udGV4dCApIHtcclxuXHRcdFx0aWYgKCB0eXBlb2YgY29udGV4dC5nZXRFbGVtZW50c0J5VGFnTmFtZSAhPT0gXCJ1bmRlZmluZWRcIiApIHtcclxuXHRcdFx0XHRyZXR1cm4gY29udGV4dC5nZXRFbGVtZW50c0J5VGFnTmFtZSggdGFnICk7XHJcblxyXG5cdFx0XHQvLyBEb2N1bWVudEZyYWdtZW50IG5vZGVzIGRvbid0IGhhdmUgZ0VCVE5cclxuXHRcdFx0fSBlbHNlIGlmICggc3VwcG9ydC5xc2EgKSB7XHJcblx0XHRcdFx0cmV0dXJuIGNvbnRleHQucXVlcnlTZWxlY3RvckFsbCggdGFnICk7XHJcblx0XHRcdH1cclxuXHRcdH0gOlxyXG5cclxuXHRcdGZ1bmN0aW9uKCB0YWcsIGNvbnRleHQgKSB7XHJcblx0XHRcdHZhciBlbGVtLFxyXG5cdFx0XHRcdHRtcCA9IFtdLFxyXG5cdFx0XHRcdGkgPSAwLFxyXG5cdFx0XHRcdC8vIEJ5IGhhcHB5IGNvaW5jaWRlbmNlLCBhIChicm9rZW4pIGdFQlROIGFwcGVhcnMgb24gRG9jdW1lbnRGcmFnbWVudCBub2RlcyB0b29cclxuXHRcdFx0XHRyZXN1bHRzID0gY29udGV4dC5nZXRFbGVtZW50c0J5VGFnTmFtZSggdGFnICk7XHJcblxyXG5cdFx0XHQvLyBGaWx0ZXIgb3V0IHBvc3NpYmxlIGNvbW1lbnRzXHJcblx0XHRcdGlmICggdGFnID09PSBcIipcIiApIHtcclxuXHRcdFx0XHR3aGlsZSAoIChlbGVtID0gcmVzdWx0c1tpKytdKSApIHtcclxuXHRcdFx0XHRcdGlmICggZWxlbS5ub2RlVHlwZSA9PT0gMSApIHtcclxuXHRcdFx0XHRcdFx0dG1wLnB1c2goIGVsZW0gKTtcclxuXHRcdFx0XHRcdH1cclxuXHRcdFx0XHR9XHJcblxyXG5cdFx0XHRcdHJldHVybiB0bXA7XHJcblx0XHRcdH1cclxuXHRcdFx0cmV0dXJuIHJlc3VsdHM7XHJcblx0XHR9O1xyXG5cclxuXHQvLyBDbGFzc1xyXG5cdEV4cHIuZmluZFtcIkNMQVNTXCJdID0gc3VwcG9ydC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lICYmIGZ1bmN0aW9uKCBjbGFzc05hbWUsIGNvbnRleHQgKSB7XHJcblx0XHRpZiAoIHR5cGVvZiBjb250ZXh0LmdldEVsZW1lbnRzQnlDbGFzc05hbWUgIT09IFwidW5kZWZpbmVkXCIgJiYgZG9jdW1lbnRJc0hUTUwgKSB7XHJcblx0XHRcdHJldHVybiBjb250ZXh0LmdldEVsZW1lbnRzQnlDbGFzc05hbWUoIGNsYXNzTmFtZSApO1xyXG5cdFx0fVxyXG5cdH07XHJcblxyXG5cdC8qIFFTQS9tYXRjaGVzU2VsZWN0b3JcclxuXHQtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tICovXHJcblxyXG5cdC8vIFFTQSBhbmQgbWF0Y2hlc1NlbGVjdG9yIHN1cHBvcnRcclxuXHJcblx0Ly8gbWF0Y2hlc1NlbGVjdG9yKDphY3RpdmUpIHJlcG9ydHMgZmFsc2Ugd2hlbiB0cnVlIChJRTkvT3BlcmEgMTEuNSlcclxuXHRyYnVnZ3lNYXRjaGVzID0gW107XHJcblxyXG5cdC8vIHFTYSg6Zm9jdXMpIHJlcG9ydHMgZmFsc2Ugd2hlbiB0cnVlIChDaHJvbWUgMjEpXHJcblx0Ly8gV2UgYWxsb3cgdGhpcyBiZWNhdXNlIG9mIGEgYnVnIGluIElFOC85IHRoYXQgdGhyb3dzIGFuIGVycm9yXHJcblx0Ly8gd2hlbmV2ZXIgYGRvY3VtZW50LmFjdGl2ZUVsZW1lbnRgIGlzIGFjY2Vzc2VkIG9uIGFuIGlmcmFtZVxyXG5cdC8vIFNvLCB3ZSBhbGxvdyA6Zm9jdXMgdG8gcGFzcyB0aHJvdWdoIFFTQSBhbGwgdGhlIHRpbWUgdG8gYXZvaWQgdGhlIElFIGVycm9yXHJcblx0Ly8gU2VlIGh0dHA6Ly9idWdzLmpxdWVyeS5jb20vdGlja2V0LzEzMzc4XHJcblx0cmJ1Z2d5UVNBID0gW107XHJcblxyXG5cdGlmICggKHN1cHBvcnQucXNhID0gcm5hdGl2ZS50ZXN0KCBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsICkpICkge1xyXG5cdFx0Ly8gQnVpbGQgUVNBIHJlZ2V4XHJcblx0XHQvLyBSZWdleCBzdHJhdGVneSBhZG9wdGVkIGZyb20gRGllZ28gUGVyaW5pXHJcblx0XHRhc3NlcnQoZnVuY3Rpb24oIGRpdiApIHtcclxuXHRcdFx0Ly8gU2VsZWN0IGlzIHNldCB0byBlbXB0eSBzdHJpbmcgb24gcHVycG9zZVxyXG5cdFx0XHQvLyBUaGlzIGlzIHRvIHRlc3QgSUUncyB0cmVhdG1lbnQgb2Ygbm90IGV4cGxpY2l0bHlcclxuXHRcdFx0Ly8gc2V0dGluZyBhIGJvb2xlYW4gY29udGVudCBhdHRyaWJ1dGUsXHJcblx0XHRcdC8vIHNpbmNlIGl0cyBwcmVzZW5jZSBzaG91bGQgYmUgZW5vdWdoXHJcblx0XHRcdC8vIGh0dHA6Ly9idWdzLmpxdWVyeS5jb20vdGlja2V0LzEyMzU5XHJcblx0XHRcdGRvY0VsZW0uYXBwZW5kQ2hpbGQoIGRpdiApLmlubmVySFRNTCA9IFwiPGEgaWQ9J1wiICsgZXhwYW5kbyArIFwiJz48L2E+XCIgK1xyXG5cdFx0XHRcdFwiPHNlbGVjdCBpZD0nXCIgKyBleHBhbmRvICsgXCItXFxyXFxcXCcgbXNhbGxvd2NhcHR1cmU9Jyc+XCIgK1xyXG5cdFx0XHRcdFwiPG9wdGlvbiBzZWxlY3RlZD0nJz48L29wdGlvbj48L3NlbGVjdD5cIjtcclxuXHJcblx0XHRcdC8vIFN1cHBvcnQ6IElFOCwgT3BlcmEgMTEtMTIuMTZcclxuXHRcdFx0Ly8gTm90aGluZyBzaG91bGQgYmUgc2VsZWN0ZWQgd2hlbiBlbXB0eSBzdHJpbmdzIGZvbGxvdyBePSBvciAkPSBvciAqPVxyXG5cdFx0XHQvLyBUaGUgdGVzdCBhdHRyaWJ1dGUgbXVzdCBiZSB1bmtub3duIGluIE9wZXJhIGJ1dCBcInNhZmVcIiBmb3IgV2luUlRcclxuXHRcdFx0Ly8gaHR0cDovL21zZG4ubWljcm9zb2Z0LmNvbS9lbi11cy9saWJyYXJ5L2llL2hoNDY1Mzg4LmFzcHgjYXR0cmlidXRlX3NlY3Rpb25cclxuXHRcdFx0aWYgKCBkaXYucXVlcnlTZWxlY3RvckFsbChcIlttc2FsbG93Y2FwdHVyZV49JyddXCIpLmxlbmd0aCApIHtcclxuXHRcdFx0XHRyYnVnZ3lRU0EucHVzaCggXCJbKl4kXT1cIiArIHdoaXRlc3BhY2UgKyBcIiooPzonJ3xcXFwiXFxcIilcIiApO1xyXG5cdFx0XHR9XHJcblxyXG5cdFx0XHQvLyBTdXBwb3J0OiBJRThcclxuXHRcdFx0Ly8gQm9vbGVhbiBhdHRyaWJ1dGVzIGFuZCBcInZhbHVlXCIgYXJlIG5vdCB0cmVhdGVkIGNvcnJlY3RseVxyXG5cdFx0XHRpZiAoICFkaXYucXVlcnlTZWxlY3RvckFsbChcIltzZWxlY3RlZF1cIikubGVuZ3RoICkge1xyXG5cdFx0XHRcdHJidWdneVFTQS5wdXNoKCBcIlxcXFxbXCIgKyB3aGl0ZXNwYWNlICsgXCIqKD86dmFsdWV8XCIgKyBib29sZWFucyArIFwiKVwiICk7XHJcblx0XHRcdH1cclxuXHJcblx0XHRcdC8vIFN1cHBvcnQ6IENocm9tZTwyOSwgQW5kcm9pZDw0LjQsIFNhZmFyaTw3LjArLCBpT1M8Ny4wKywgUGhhbnRvbUpTPDEuOS44K1xyXG5cdFx0XHRpZiAoICFkaXYucXVlcnlTZWxlY3RvckFsbCggXCJbaWR+PVwiICsgZXhwYW5kbyArIFwiLV1cIiApLmxlbmd0aCApIHtcclxuXHRcdFx0XHRyYnVnZ3lRU0EucHVzaChcIn49XCIpO1xyXG5cdFx0XHR9XHJcblxyXG5cdFx0XHQvLyBXZWJraXQvT3BlcmEgLSA6Y2hlY2tlZCBzaG91bGQgcmV0dXJuIHNlbGVjdGVkIG9wdGlvbiBlbGVtZW50c1xyXG5cdFx0XHQvLyBodHRwOi8vd3d3LnczLm9yZy9UUi8yMDExL1JFQy1jc3MzLXNlbGVjdG9ycy0yMDExMDkyOS8jY2hlY2tlZFxyXG5cdFx0XHQvLyBJRTggdGhyb3dzIGVycm9yIGhlcmUgYW5kIHdpbGwgbm90IHNlZSBsYXRlciB0ZXN0c1xyXG5cdFx0XHRpZiAoICFkaXYucXVlcnlTZWxlY3RvckFsbChcIjpjaGVja2VkXCIpLmxlbmd0aCApIHtcclxuXHRcdFx0XHRyYnVnZ3lRU0EucHVzaChcIjpjaGVja2VkXCIpO1xyXG5cdFx0XHR9XHJcblxyXG5cdFx0XHQvLyBTdXBwb3J0OiBTYWZhcmkgOCssIGlPUyA4K1xyXG5cdFx0XHQvLyBodHRwczovL2J1Z3Mud2Via2l0Lm9yZy9zaG93X2J1Zy5jZ2k/aWQ9MTM2ODUxXHJcblx0XHRcdC8vIEluLXBhZ2UgYHNlbGVjdG9yI2lkIHNpYmluZy1jb21iaW5hdG9yIHNlbGVjdG9yYCBmYWlsc1xyXG5cdFx0XHRpZiAoICFkaXYucXVlcnlTZWxlY3RvckFsbCggXCJhI1wiICsgZXhwYW5kbyArIFwiKypcIiApLmxlbmd0aCApIHtcclxuXHRcdFx0XHRyYnVnZ3lRU0EucHVzaChcIi4jLitbK35dXCIpO1xyXG5cdFx0XHR9XHJcblx0XHR9KTtcclxuXHJcblx0XHRhc3NlcnQoZnVuY3Rpb24oIGRpdiApIHtcclxuXHRcdFx0Ly8gU3VwcG9ydDogV2luZG93cyA4IE5hdGl2ZSBBcHBzXHJcblx0XHRcdC8vIFRoZSB0eXBlIGFuZCBuYW1lIGF0dHJpYnV0ZXMgYXJlIHJlc3RyaWN0ZWQgZHVyaW5nIC5pbm5lckhUTUwgYXNzaWdubWVudFxyXG5cdFx0XHR2YXIgaW5wdXQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiaW5wdXRcIik7XHJcblx0XHRcdGlucHV0LnNldEF0dHJpYnV0ZSggXCJ0eXBlXCIsIFwiaGlkZGVuXCIgKTtcclxuXHRcdFx0ZGl2LmFwcGVuZENoaWxkKCBpbnB1dCApLnNldEF0dHJpYnV0ZSggXCJuYW1lXCIsIFwiRFwiICk7XHJcblxyXG5cdFx0XHQvLyBTdXBwb3J0OiBJRThcclxuXHRcdFx0Ly8gRW5mb3JjZSBjYXNlLXNlbnNpdGl2aXR5IG9mIG5hbWUgYXR0cmlidXRlXHJcblx0XHRcdGlmICggZGl2LnF1ZXJ5U2VsZWN0b3JBbGwoXCJbbmFtZT1kXVwiKS5sZW5ndGggKSB7XHJcblx0XHRcdFx0cmJ1Z2d5UVNBLnB1c2goIFwibmFtZVwiICsgd2hpdGVzcGFjZSArIFwiKlsqXiR8IX5dPz1cIiApO1xyXG5cdFx0XHR9XHJcblxyXG5cdFx0XHQvLyBGRiAzLjUgLSA6ZW5hYmxlZC86ZGlzYWJsZWQgYW5kIGhpZGRlbiBlbGVtZW50cyAoaGlkZGVuIGVsZW1lbnRzIGFyZSBzdGlsbCBlbmFibGVkKVxyXG5cdFx0XHQvLyBJRTggdGhyb3dzIGVycm9yIGhlcmUgYW5kIHdpbGwgbm90IHNlZSBsYXRlciB0ZXN0c1xyXG5cdFx0XHRpZiAoICFkaXYucXVlcnlTZWxlY3RvckFsbChcIjplbmFibGVkXCIpLmxlbmd0aCApIHtcclxuXHRcdFx0XHRyYnVnZ3lRU0EucHVzaCggXCI6ZW5hYmxlZFwiLCBcIjpkaXNhYmxlZFwiICk7XHJcblx0XHRcdH1cclxuXHJcblx0XHRcdC8vIE9wZXJhIDEwLTExIGRvZXMgbm90IHRocm93IG9uIHBvc3QtY29tbWEgaW52YWxpZCBwc2V1ZG9zXHJcblx0XHRcdGRpdi5xdWVyeVNlbGVjdG9yQWxsKFwiKiw6eFwiKTtcclxuXHRcdFx0cmJ1Z2d5UVNBLnB1c2goXCIsLio6XCIpO1xyXG5cdFx0fSk7XHJcblx0fVxyXG5cclxuXHRpZiAoIChzdXBwb3J0Lm1hdGNoZXNTZWxlY3RvciA9IHJuYXRpdmUudGVzdCggKG1hdGNoZXMgPSBkb2NFbGVtLm1hdGNoZXMgfHxcclxuXHRcdGRvY0VsZW0ud2Via2l0TWF0Y2hlc1NlbGVjdG9yIHx8XHJcblx0XHRkb2NFbGVtLm1vek1hdGNoZXNTZWxlY3RvciB8fFxyXG5cdFx0ZG9jRWxlbS5vTWF0Y2hlc1NlbGVjdG9yIHx8XHJcblx0XHRkb2NFbGVtLm1zTWF0Y2hlc1NlbGVjdG9yKSApKSApIHtcclxuXHJcblx0XHRhc3NlcnQoZnVuY3Rpb24oIGRpdiApIHtcclxuXHRcdFx0Ly8gQ2hlY2sgdG8gc2VlIGlmIGl0J3MgcG9zc2libGUgdG8gZG8gbWF0Y2hlc1NlbGVjdG9yXHJcblx0XHRcdC8vIG9uIGEgZGlzY29ubmVjdGVkIG5vZGUgKElFIDkpXHJcblx0XHRcdHN1cHBvcnQuZGlzY29ubmVjdGVkTWF0Y2ggPSBtYXRjaGVzLmNhbGwoIGRpdiwgXCJkaXZcIiApO1xyXG5cclxuXHRcdFx0Ly8gVGhpcyBzaG91bGQgZmFpbCB3aXRoIGFuIGV4Y2VwdGlvblxyXG5cdFx0XHQvLyBHZWNrbyBkb2VzIG5vdCBlcnJvciwgcmV0dXJucyBmYWxzZSBpbnN0ZWFkXHJcblx0XHRcdG1hdGNoZXMuY2FsbCggZGl2LCBcIltzIT0nJ106eFwiICk7XHJcblx0XHRcdHJidWdneU1hdGNoZXMucHVzaCggXCIhPVwiLCBwc2V1ZG9zICk7XHJcblx0XHR9KTtcclxuXHR9XHJcblxyXG5cdHJidWdneVFTQSA9IHJidWdneVFTQS5sZW5ndGggJiYgbmV3IFJlZ0V4cCggcmJ1Z2d5UVNBLmpvaW4oXCJ8XCIpICk7XHJcblx0cmJ1Z2d5TWF0Y2hlcyA9IHJidWdneU1hdGNoZXMubGVuZ3RoICYmIG5ldyBSZWdFeHAoIHJidWdneU1hdGNoZXMuam9pbihcInxcIikgKTtcclxuXHJcblx0LyogQ29udGFpbnNcclxuXHQtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tICovXHJcblx0aGFzQ29tcGFyZSA9IHJuYXRpdmUudGVzdCggZG9jRWxlbS5jb21wYXJlRG9jdW1lbnRQb3NpdGlvbiApO1xyXG5cclxuXHQvLyBFbGVtZW50IGNvbnRhaW5zIGFub3RoZXJcclxuXHQvLyBQdXJwb3NlZnVsbHkgc2VsZi1leGNsdXNpdmVcclxuXHQvLyBBcyBpbiwgYW4gZWxlbWVudCBkb2VzIG5vdCBjb250YWluIGl0c2VsZlxyXG5cdGNvbnRhaW5zID0gaGFzQ29tcGFyZSB8fCBybmF0aXZlLnRlc3QoIGRvY0VsZW0uY29udGFpbnMgKSA/XHJcblx0XHRmdW5jdGlvbiggYSwgYiApIHtcclxuXHRcdFx0dmFyIGFkb3duID0gYS5ub2RlVHlwZSA9PT0gOSA/IGEuZG9jdW1lbnRFbGVtZW50IDogYSxcclxuXHRcdFx0XHRidXAgPSBiICYmIGIucGFyZW50Tm9kZTtcclxuXHRcdFx0cmV0dXJuIGEgPT09IGJ1cCB8fCAhISggYnVwICYmIGJ1cC5ub2RlVHlwZSA9PT0gMSAmJiAoXHJcblx0XHRcdFx0YWRvd24uY29udGFpbnMgP1xyXG5cdFx0XHRcdFx0YWRvd24uY29udGFpbnMoIGJ1cCApIDpcclxuXHRcdFx0XHRcdGEuY29tcGFyZURvY3VtZW50UG9zaXRpb24gJiYgYS5jb21wYXJlRG9jdW1lbnRQb3NpdGlvbiggYnVwICkgJiAxNlxyXG5cdFx0XHQpKTtcclxuXHRcdH0gOlxyXG5cdFx0ZnVuY3Rpb24oIGEsIGIgKSB7XHJcblx0XHRcdGlmICggYiApIHtcclxuXHRcdFx0XHR3aGlsZSAoIChiID0gYi5wYXJlbnROb2RlKSApIHtcclxuXHRcdFx0XHRcdGlmICggYiA9PT0gYSApIHtcclxuXHRcdFx0XHRcdFx0cmV0dXJuIHRydWU7XHJcblx0XHRcdFx0XHR9XHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9XHJcblx0XHRcdHJldHVybiBmYWxzZTtcclxuXHRcdH07XHJcblxyXG5cdC8qIFNvcnRpbmdcclxuXHQtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tICovXHJcblxyXG5cdC8vIERvY3VtZW50IG9yZGVyIHNvcnRpbmdcclxuXHRzb3J0T3JkZXIgPSBoYXNDb21wYXJlID9cclxuXHRmdW5jdGlvbiggYSwgYiApIHtcclxuXHJcblx0XHQvLyBGbGFnIGZvciBkdXBsaWNhdGUgcmVtb3ZhbFxyXG5cdFx0aWYgKCBhID09PSBiICkge1xyXG5cdFx0XHRoYXNEdXBsaWNhdGUgPSB0cnVlO1xyXG5cdFx0XHRyZXR1cm4gMDtcclxuXHRcdH1cclxuXHJcblx0XHQvLyBTb3J0IG9uIG1ldGhvZCBleGlzdGVuY2UgaWYgb25seSBvbmUgaW5wdXQgaGFzIGNvbXBhcmVEb2N1bWVudFBvc2l0aW9uXHJcblx0XHR2YXIgY29tcGFyZSA9ICFhLmNvbXBhcmVEb2N1bWVudFBvc2l0aW9uIC0gIWIuY29tcGFyZURvY3VtZW50UG9zaXRpb247XHJcblx0XHRpZiAoIGNvbXBhcmUgKSB7XHJcblx0XHRcdHJldHVybiBjb21wYXJlO1xyXG5cdFx0fVxyXG5cclxuXHRcdC8vIENhbGN1bGF0ZSBwb3NpdGlvbiBpZiBib3RoIGlucHV0cyBiZWxvbmcgdG8gdGhlIHNhbWUgZG9jdW1lbnRcclxuXHRcdGNvbXBhcmUgPSAoIGEub3duZXJEb2N1bWVudCB8fCBhICkgPT09ICggYi5vd25lckRvY3VtZW50IHx8IGIgKSA/XHJcblx0XHRcdGEuY29tcGFyZURvY3VtZW50UG9zaXRpb24oIGIgKSA6XHJcblxyXG5cdFx0XHQvLyBPdGhlcndpc2Ugd2Uga25vdyB0aGV5IGFyZSBkaXNjb25uZWN0ZWRcclxuXHRcdFx0MTtcclxuXHJcblx0XHQvLyBEaXNjb25uZWN0ZWQgbm9kZXNcclxuXHRcdGlmICggY29tcGFyZSAmIDEgfHxcclxuXHRcdFx0KCFzdXBwb3J0LnNvcnREZXRhY2hlZCAmJiBiLmNvbXBhcmVEb2N1bWVudFBvc2l0aW9uKCBhICkgPT09IGNvbXBhcmUpICkge1xyXG5cclxuXHRcdFx0Ly8gQ2hvb3NlIHRoZSBmaXJzdCBlbGVtZW50IHRoYXQgaXMgcmVsYXRlZCB0byBvdXIgcHJlZmVycmVkIGRvY3VtZW50XHJcblx0XHRcdGlmICggYSA9PT0gZG9jdW1lbnQgfHwgYS5vd25lckRvY3VtZW50ID09PSBwcmVmZXJyZWREb2MgJiYgY29udGFpbnMocHJlZmVycmVkRG9jLCBhKSApIHtcclxuXHRcdFx0XHRyZXR1cm4gLTE7XHJcblx0XHRcdH1cclxuXHRcdFx0aWYgKCBiID09PSBkb2N1bWVudCB8fCBiLm93bmVyRG9jdW1lbnQgPT09IHByZWZlcnJlZERvYyAmJiBjb250YWlucyhwcmVmZXJyZWREb2MsIGIpICkge1xyXG5cdFx0XHRcdHJldHVybiAxO1xyXG5cdFx0XHR9XHJcblxyXG5cdFx0XHQvLyBNYWludGFpbiBvcmlnaW5hbCBvcmRlclxyXG5cdFx0XHRyZXR1cm4gc29ydElucHV0ID9cclxuXHRcdFx0XHQoIGluZGV4T2YoIHNvcnRJbnB1dCwgYSApIC0gaW5kZXhPZiggc29ydElucHV0LCBiICkgKSA6XHJcblx0XHRcdFx0MDtcclxuXHRcdH1cclxuXHJcblx0XHRyZXR1cm4gY29tcGFyZSAmIDQgPyAtMSA6IDE7XHJcblx0fSA6XHJcblx0ZnVuY3Rpb24oIGEsIGIgKSB7XHJcblx0XHQvLyBFeGl0IGVhcmx5IGlmIHRoZSBub2RlcyBhcmUgaWRlbnRpY2FsXHJcblx0XHRpZiAoIGEgPT09IGIgKSB7XHJcblx0XHRcdGhhc0R1cGxpY2F0ZSA9IHRydWU7XHJcblx0XHRcdHJldHVybiAwO1xyXG5cdFx0fVxyXG5cclxuXHRcdHZhciBjdXIsXHJcblx0XHRcdGkgPSAwLFxyXG5cdFx0XHRhdXAgPSBhLnBhcmVudE5vZGUsXHJcblx0XHRcdGJ1cCA9IGIucGFyZW50Tm9kZSxcclxuXHRcdFx0YXAgPSBbIGEgXSxcclxuXHRcdFx0YnAgPSBbIGIgXTtcclxuXHJcblx0XHQvLyBQYXJlbnRsZXNzIG5vZGVzIGFyZSBlaXRoZXIgZG9jdW1lbnRzIG9yIGRpc2Nvbm5lY3RlZFxyXG5cdFx0aWYgKCAhYXVwIHx8ICFidXAgKSB7XHJcblx0XHRcdHJldHVybiBhID09PSBkb2N1bWVudCA/IC0xIDpcclxuXHRcdFx0XHRiID09PSBkb2N1bWVudCA/IDEgOlxyXG5cdFx0XHRcdGF1cCA/IC0xIDpcclxuXHRcdFx0XHRidXAgPyAxIDpcclxuXHRcdFx0XHRzb3J0SW5wdXQgP1xyXG5cdFx0XHRcdCggaW5kZXhPZiggc29ydElucHV0LCBhICkgLSBpbmRleE9mKCBzb3J0SW5wdXQsIGIgKSApIDpcclxuXHRcdFx0XHQwO1xyXG5cclxuXHRcdC8vIElmIHRoZSBub2RlcyBhcmUgc2libGluZ3MsIHdlIGNhbiBkbyBhIHF1aWNrIGNoZWNrXHJcblx0XHR9IGVsc2UgaWYgKCBhdXAgPT09IGJ1cCApIHtcclxuXHRcdFx0cmV0dXJuIHNpYmxpbmdDaGVjayggYSwgYiApO1xyXG5cdFx0fVxyXG5cclxuXHRcdC8vIE90aGVyd2lzZSB3ZSBuZWVkIGZ1bGwgbGlzdHMgb2YgdGhlaXIgYW5jZXN0b3JzIGZvciBjb21wYXJpc29uXHJcblx0XHRjdXIgPSBhO1xyXG5cdFx0d2hpbGUgKCAoY3VyID0gY3VyLnBhcmVudE5vZGUpICkge1xyXG5cdFx0XHRhcC51bnNoaWZ0KCBjdXIgKTtcclxuXHRcdH1cclxuXHRcdGN1ciA9IGI7XHJcblx0XHR3aGlsZSAoIChjdXIgPSBjdXIucGFyZW50Tm9kZSkgKSB7XHJcblx0XHRcdGJwLnVuc2hpZnQoIGN1ciApO1xyXG5cdFx0fVxyXG5cclxuXHRcdC8vIFdhbGsgZG93biB0aGUgdHJlZSBsb29raW5nIGZvciBhIGRpc2NyZXBhbmN5XHJcblx0XHR3aGlsZSAoIGFwW2ldID09PSBicFtpXSApIHtcclxuXHRcdFx0aSsrO1xyXG5cdFx0fVxyXG5cclxuXHRcdHJldHVybiBpID9cclxuXHRcdFx0Ly8gRG8gYSBzaWJsaW5nIGNoZWNrIGlmIHRoZSBub2RlcyBoYXZlIGEgY29tbW9uIGFuY2VzdG9yXHJcblx0XHRcdHNpYmxpbmdDaGVjayggYXBbaV0sIGJwW2ldICkgOlxyXG5cclxuXHRcdFx0Ly8gT3RoZXJ3aXNlIG5vZGVzIGluIG91ciBkb2N1bWVudCBzb3J0IGZpcnN0XHJcblx0XHRcdGFwW2ldID09PSBwcmVmZXJyZWREb2MgPyAtMSA6XHJcblx0XHRcdGJwW2ldID09PSBwcmVmZXJyZWREb2MgPyAxIDpcclxuXHRcdFx0MDtcclxuXHR9O1xyXG5cclxuXHRyZXR1cm4gZG9jdW1lbnQ7XHJcbn07XHJcblxyXG5TaXp6bGUubWF0Y2hlcyA9IGZ1bmN0aW9uKCBleHByLCBlbGVtZW50cyApIHtcclxuXHRyZXR1cm4gU2l6emxlKCBleHByLCBudWxsLCBudWxsLCBlbGVtZW50cyApO1xyXG59O1xyXG5cclxuU2l6emxlLm1hdGNoZXNTZWxlY3RvciA9IGZ1bmN0aW9uKCBlbGVtLCBleHByICkge1xyXG5cdC8vIFNldCBkb2N1bWVudCB2YXJzIGlmIG5lZWRlZFxyXG5cdGlmICggKCBlbGVtLm93bmVyRG9jdW1lbnQgfHwgZWxlbSApICE9PSBkb2N1bWVudCApIHtcclxuXHRcdHNldERvY3VtZW50KCBlbGVtICk7XHJcblx0fVxyXG5cclxuXHQvLyBNYWtlIHN1cmUgdGhhdCBhdHRyaWJ1dGUgc2VsZWN0b3JzIGFyZSBxdW90ZWRcclxuXHRleHByID0gZXhwci5yZXBsYWNlKCByYXR0cmlidXRlUXVvdGVzLCBcIj0nJDEnXVwiICk7XHJcblxyXG5cdGlmICggc3VwcG9ydC5tYXRjaGVzU2VsZWN0b3IgJiYgZG9jdW1lbnRJc0hUTUwgJiZcclxuXHRcdCFjb21waWxlckNhY2hlWyBleHByICsgXCIgXCIgXSAmJlxyXG5cdFx0KCAhcmJ1Z2d5TWF0Y2hlcyB8fCAhcmJ1Z2d5TWF0Y2hlcy50ZXN0KCBleHByICkgKSAmJlxyXG5cdFx0KCAhcmJ1Z2d5UVNBICAgICB8fCAhcmJ1Z2d5UVNBLnRlc3QoIGV4cHIgKSApICkge1xyXG5cclxuXHRcdHRyeSB7XHJcblx0XHRcdHZhciByZXQgPSBtYXRjaGVzLmNhbGwoIGVsZW0sIGV4cHIgKTtcclxuXHJcblx0XHRcdC8vIElFIDkncyBtYXRjaGVzU2VsZWN0b3IgcmV0dXJucyBmYWxzZSBvbiBkaXNjb25uZWN0ZWQgbm9kZXNcclxuXHRcdFx0aWYgKCByZXQgfHwgc3VwcG9ydC5kaXNjb25uZWN0ZWRNYXRjaCB8fFxyXG5cdFx0XHRcdFx0Ly8gQXMgd2VsbCwgZGlzY29ubmVjdGVkIG5vZGVzIGFyZSBzYWlkIHRvIGJlIGluIGEgZG9jdW1lbnRcclxuXHRcdFx0XHRcdC8vIGZyYWdtZW50IGluIElFIDlcclxuXHRcdFx0XHRcdGVsZW0uZG9jdW1lbnQgJiYgZWxlbS5kb2N1bWVudC5ub2RlVHlwZSAhPT0gMTEgKSB7XHJcblx0XHRcdFx0cmV0dXJuIHJldDtcclxuXHRcdFx0fVxyXG5cdFx0fSBjYXRjaCAoZSkge31cclxuXHR9XHJcblxyXG5cdHJldHVybiBTaXp6bGUoIGV4cHIsIGRvY3VtZW50LCBudWxsLCBbIGVsZW0gXSApLmxlbmd0aCA+IDA7XHJcbn07XHJcblxyXG5TaXp6bGUuY29udGFpbnMgPSBmdW5jdGlvbiggY29udGV4dCwgZWxlbSApIHtcclxuXHQvLyBTZXQgZG9jdW1lbnQgdmFycyBpZiBuZWVkZWRcclxuXHRpZiAoICggY29udGV4dC5vd25lckRvY3VtZW50IHx8IGNvbnRleHQgKSAhPT0gZG9jdW1lbnQgKSB7XHJcblx0XHRzZXREb2N1bWVudCggY29udGV4dCApO1xyXG5cdH1cclxuXHRyZXR1cm4gY29udGFpbnMoIGNvbnRleHQsIGVsZW0gKTtcclxufTtcclxuXHJcblNpenpsZS5hdHRyID0gZnVuY3Rpb24oIGVsZW0sIG5hbWUgKSB7XHJcblx0Ly8gU2V0IGRvY3VtZW50IHZhcnMgaWYgbmVlZGVkXHJcblx0aWYgKCAoIGVsZW0ub3duZXJEb2N1bWVudCB8fCBlbGVtICkgIT09IGRvY3VtZW50ICkge1xyXG5cdFx0c2V0RG9jdW1lbnQoIGVsZW0gKTtcclxuXHR9XHJcblxyXG5cdHZhciBmbiA9IEV4cHIuYXR0ckhhbmRsZVsgbmFtZS50b0xvd2VyQ2FzZSgpIF0sXHJcblx0XHQvLyBEb24ndCBnZXQgZm9vbGVkIGJ5IE9iamVjdC5wcm90b3R5cGUgcHJvcGVydGllcyAoalF1ZXJ5ICMxMzgwNylcclxuXHRcdHZhbCA9IGZuICYmIGhhc093bi5jYWxsKCBFeHByLmF0dHJIYW5kbGUsIG5hbWUudG9Mb3dlckNhc2UoKSApID9cclxuXHRcdFx0Zm4oIGVsZW0sIG5hbWUsICFkb2N1bWVudElzSFRNTCApIDpcclxuXHRcdFx0dW5kZWZpbmVkO1xyXG5cclxuXHRyZXR1cm4gdmFsICE9PSB1bmRlZmluZWQgP1xyXG5cdFx0dmFsIDpcclxuXHRcdHN1cHBvcnQuYXR0cmlidXRlcyB8fCAhZG9jdW1lbnRJc0hUTUwgP1xyXG5cdFx0XHRlbGVtLmdldEF0dHJpYnV0ZSggbmFtZSApIDpcclxuXHRcdFx0KHZhbCA9IGVsZW0uZ2V0QXR0cmlidXRlTm9kZShuYW1lKSkgJiYgdmFsLnNwZWNpZmllZCA/XHJcblx0XHRcdFx0dmFsLnZhbHVlIDpcclxuXHRcdFx0XHRudWxsO1xyXG59O1xyXG5cclxuU2l6emxlLmVycm9yID0gZnVuY3Rpb24oIG1zZyApIHtcclxuXHR0aHJvdyBuZXcgRXJyb3IoIFwiU3ludGF4IGVycm9yLCB1bnJlY29nbml6ZWQgZXhwcmVzc2lvbjogXCIgKyBtc2cgKTtcclxufTtcclxuXHJcbi8qKlxyXG4gKiBEb2N1bWVudCBzb3J0aW5nIGFuZCByZW1vdmluZyBkdXBsaWNhdGVzXHJcbiAqIEBwYXJhbSB7QXJyYXlMaWtlfSByZXN1bHRzXHJcbiAqL1xyXG5TaXp6bGUudW5pcXVlU29ydCA9IGZ1bmN0aW9uKCByZXN1bHRzICkge1xyXG5cdHZhciBlbGVtLFxyXG5cdFx0ZHVwbGljYXRlcyA9IFtdLFxyXG5cdFx0aiA9IDAsXHJcblx0XHRpID0gMDtcclxuXHJcblx0Ly8gVW5sZXNzIHdlICprbm93KiB3ZSBjYW4gZGV0ZWN0IGR1cGxpY2F0ZXMsIGFzc3VtZSB0aGVpciBwcmVzZW5jZVxyXG5cdGhhc0R1cGxpY2F0ZSA9ICFzdXBwb3J0LmRldGVjdER1cGxpY2F0ZXM7XHJcblx0c29ydElucHV0ID0gIXN1cHBvcnQuc29ydFN0YWJsZSAmJiByZXN1bHRzLnNsaWNlKCAwICk7XHJcblx0cmVzdWx0cy5zb3J0KCBzb3J0T3JkZXIgKTtcclxuXHJcblx0aWYgKCBoYXNEdXBsaWNhdGUgKSB7XHJcblx0XHR3aGlsZSAoIChlbGVtID0gcmVzdWx0c1tpKytdKSApIHtcclxuXHRcdFx0aWYgKCBlbGVtID09PSByZXN1bHRzWyBpIF0gKSB7XHJcblx0XHRcdFx0aiA9IGR1cGxpY2F0ZXMucHVzaCggaSApO1xyXG5cdFx0XHR9XHJcblx0XHR9XHJcblx0XHR3aGlsZSAoIGotLSApIHtcclxuXHRcdFx0cmVzdWx0cy5zcGxpY2UoIGR1cGxpY2F0ZXNbIGogXSwgMSApO1xyXG5cdFx0fVxyXG5cdH1cclxuXHJcblx0Ly8gQ2xlYXIgaW5wdXQgYWZ0ZXIgc29ydGluZyB0byByZWxlYXNlIG9iamVjdHNcclxuXHQvLyBTZWUgaHR0cHM6Ly9naXRodWIuY29tL2pxdWVyeS9zaXp6bGUvcHVsbC8yMjVcclxuXHRzb3J0SW5wdXQgPSBudWxsO1xyXG5cclxuXHRyZXR1cm4gcmVzdWx0cztcclxufTtcclxuXHJcbi8qKlxyXG4gKiBVdGlsaXR5IGZ1bmN0aW9uIGZvciByZXRyaWV2aW5nIHRoZSB0ZXh0IHZhbHVlIG9mIGFuIGFycmF5IG9mIERPTSBub2Rlc1xyXG4gKiBAcGFyYW0ge0FycmF5fEVsZW1lbnR9IGVsZW1cclxuICovXHJcbmdldFRleHQgPSBTaXp6bGUuZ2V0VGV4dCA9IGZ1bmN0aW9uKCBlbGVtICkge1xyXG5cdHZhciBub2RlLFxyXG5cdFx0cmV0ID0gXCJcIixcclxuXHRcdGkgPSAwLFxyXG5cdFx0bm9kZVR5cGUgPSBlbGVtLm5vZGVUeXBlO1xyXG5cclxuXHRpZiAoICFub2RlVHlwZSApIHtcclxuXHRcdC8vIElmIG5vIG5vZGVUeXBlLCB0aGlzIGlzIGV4cGVjdGVkIHRvIGJlIGFuIGFycmF5XHJcblx0XHR3aGlsZSAoIChub2RlID0gZWxlbVtpKytdKSApIHtcclxuXHRcdFx0Ly8gRG8gbm90IHRyYXZlcnNlIGNvbW1lbnQgbm9kZXNcclxuXHRcdFx0cmV0ICs9IGdldFRleHQoIG5vZGUgKTtcclxuXHRcdH1cclxuXHR9IGVsc2UgaWYgKCBub2RlVHlwZSA9PT0gMSB8fCBub2RlVHlwZSA9PT0gOSB8fCBub2RlVHlwZSA9PT0gMTEgKSB7XHJcblx0XHQvLyBVc2UgdGV4dENvbnRlbnQgZm9yIGVsZW1lbnRzXHJcblx0XHQvLyBpbm5lclRleHQgdXNhZ2UgcmVtb3ZlZCBmb3IgY29uc2lzdGVuY3kgb2YgbmV3IGxpbmVzIChqUXVlcnkgIzExMTUzKVxyXG5cdFx0aWYgKCB0eXBlb2YgZWxlbS50ZXh0Q29udGVudCA9PT0gXCJzdHJpbmdcIiApIHtcclxuXHRcdFx0cmV0dXJuIGVsZW0udGV4dENvbnRlbnQ7XHJcblx0XHR9IGVsc2Uge1xyXG5cdFx0XHQvLyBUcmF2ZXJzZSBpdHMgY2hpbGRyZW5cclxuXHRcdFx0Zm9yICggZWxlbSA9IGVsZW0uZmlyc3RDaGlsZDsgZWxlbTsgZWxlbSA9IGVsZW0ubmV4dFNpYmxpbmcgKSB7XHJcblx0XHRcdFx0cmV0ICs9IGdldFRleHQoIGVsZW0gKTtcclxuXHRcdFx0fVxyXG5cdFx0fVxyXG5cdH0gZWxzZSBpZiAoIG5vZGVUeXBlID09PSAzIHx8IG5vZGVUeXBlID09PSA0ICkge1xyXG5cdFx0cmV0dXJuIGVsZW0ubm9kZVZhbHVlO1xyXG5cdH1cclxuXHQvLyBEbyBub3QgaW5jbHVkZSBjb21tZW50IG9yIHByb2Nlc3NpbmcgaW5zdHJ1Y3Rpb24gbm9kZXNcclxuXHJcblx0cmV0dXJuIHJldDtcclxufTtcclxuXHJcbkV4cHIgPSBTaXp6bGUuc2VsZWN0b3JzID0ge1xyXG5cclxuXHQvLyBDYW4gYmUgYWRqdXN0ZWQgYnkgdGhlIHVzZXJcclxuXHRjYWNoZUxlbmd0aDogNTAsXHJcblxyXG5cdGNyZWF0ZVBzZXVkbzogbWFya0Z1bmN0aW9uLFxyXG5cclxuXHRtYXRjaDogbWF0Y2hFeHByLFxyXG5cclxuXHRhdHRySGFuZGxlOiB7fSxcclxuXHJcblx0ZmluZDoge30sXHJcblxyXG5cdHJlbGF0aXZlOiB7XHJcblx0XHRcIj5cIjogeyBkaXI6IFwicGFyZW50Tm9kZVwiLCBmaXJzdDogdHJ1ZSB9LFxyXG5cdFx0XCIgXCI6IHsgZGlyOiBcInBhcmVudE5vZGVcIiB9LFxyXG5cdFx0XCIrXCI6IHsgZGlyOiBcInByZXZpb3VzU2libGluZ1wiLCBmaXJzdDogdHJ1ZSB9LFxyXG5cdFx0XCJ+XCI6IHsgZGlyOiBcInByZXZpb3VzU2libGluZ1wiIH1cclxuXHR9LFxyXG5cclxuXHRwcmVGaWx0ZXI6IHtcclxuXHRcdFwiQVRUUlwiOiBmdW5jdGlvbiggbWF0Y2ggKSB7XHJcblx0XHRcdG1hdGNoWzFdID0gbWF0Y2hbMV0ucmVwbGFjZSggcnVuZXNjYXBlLCBmdW5lc2NhcGUgKTtcclxuXHJcblx0XHRcdC8vIE1vdmUgdGhlIGdpdmVuIHZhbHVlIHRvIG1hdGNoWzNdIHdoZXRoZXIgcXVvdGVkIG9yIHVucXVvdGVkXHJcblx0XHRcdG1hdGNoWzNdID0gKCBtYXRjaFszXSB8fCBtYXRjaFs0XSB8fCBtYXRjaFs1XSB8fCBcIlwiICkucmVwbGFjZSggcnVuZXNjYXBlLCBmdW5lc2NhcGUgKTtcclxuXHJcblx0XHRcdGlmICggbWF0Y2hbMl0gPT09IFwifj1cIiApIHtcclxuXHRcdFx0XHRtYXRjaFszXSA9IFwiIFwiICsgbWF0Y2hbM10gKyBcIiBcIjtcclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0cmV0dXJuIG1hdGNoLnNsaWNlKCAwLCA0ICk7XHJcblx0XHR9LFxyXG5cclxuXHRcdFwiQ0hJTERcIjogZnVuY3Rpb24oIG1hdGNoICkge1xyXG5cdFx0XHQvKiBtYXRjaGVzIGZyb20gbWF0Y2hFeHByW1wiQ0hJTERcIl1cclxuXHRcdFx0XHQxIHR5cGUgKG9ubHl8bnRofC4uLilcclxuXHRcdFx0XHQyIHdoYXQgKGNoaWxkfG9mLXR5cGUpXHJcblx0XHRcdFx0MyBhcmd1bWVudCAoZXZlbnxvZGR8XFxkKnxcXGQqbihbKy1dXFxkKyk/fC4uLilcclxuXHRcdFx0XHQ0IHhuLWNvbXBvbmVudCBvZiB4bit5IGFyZ3VtZW50IChbKy1dP1xcZCpufClcclxuXHRcdFx0XHQ1IHNpZ24gb2YgeG4tY29tcG9uZW50XHJcblx0XHRcdFx0NiB4IG9mIHhuLWNvbXBvbmVudFxyXG5cdFx0XHRcdDcgc2lnbiBvZiB5LWNvbXBvbmVudFxyXG5cdFx0XHRcdDggeSBvZiB5LWNvbXBvbmVudFxyXG5cdFx0XHQqL1xyXG5cdFx0XHRtYXRjaFsxXSA9IG1hdGNoWzFdLnRvTG93ZXJDYXNlKCk7XHJcblxyXG5cdFx0XHRpZiAoIG1hdGNoWzFdLnNsaWNlKCAwLCAzICkgPT09IFwibnRoXCIgKSB7XHJcblx0XHRcdFx0Ly8gbnRoLSogcmVxdWlyZXMgYXJndW1lbnRcclxuXHRcdFx0XHRpZiAoICFtYXRjaFszXSApIHtcclxuXHRcdFx0XHRcdFNpenpsZS5lcnJvciggbWF0Y2hbMF0gKTtcclxuXHRcdFx0XHR9XHJcblxyXG5cdFx0XHRcdC8vIG51bWVyaWMgeCBhbmQgeSBwYXJhbWV0ZXJzIGZvciBFeHByLmZpbHRlci5DSElMRFxyXG5cdFx0XHRcdC8vIHJlbWVtYmVyIHRoYXQgZmFsc2UvdHJ1ZSBjYXN0IHJlc3BlY3RpdmVseSB0byAwLzFcclxuXHRcdFx0XHRtYXRjaFs0XSA9ICsoIG1hdGNoWzRdID8gbWF0Y2hbNV0gKyAobWF0Y2hbNl0gfHwgMSkgOiAyICogKCBtYXRjaFszXSA9PT0gXCJldmVuXCIgfHwgbWF0Y2hbM10gPT09IFwib2RkXCIgKSApO1xyXG5cdFx0XHRcdG1hdGNoWzVdID0gKyggKCBtYXRjaFs3XSArIG1hdGNoWzhdICkgfHwgbWF0Y2hbM10gPT09IFwib2RkXCIgKTtcclxuXHJcblx0XHRcdC8vIG90aGVyIHR5cGVzIHByb2hpYml0IGFyZ3VtZW50c1xyXG5cdFx0XHR9IGVsc2UgaWYgKCBtYXRjaFszXSApIHtcclxuXHRcdFx0XHRTaXp6bGUuZXJyb3IoIG1hdGNoWzBdICk7XHJcblx0XHRcdH1cclxuXHJcblx0XHRcdHJldHVybiBtYXRjaDtcclxuXHRcdH0sXHJcblxyXG5cdFx0XCJQU0VVRE9cIjogZnVuY3Rpb24oIG1hdGNoICkge1xyXG5cdFx0XHR2YXIgZXhjZXNzLFxyXG5cdFx0XHRcdHVucXVvdGVkID0gIW1hdGNoWzZdICYmIG1hdGNoWzJdO1xyXG5cclxuXHRcdFx0aWYgKCBtYXRjaEV4cHJbXCJDSElMRFwiXS50ZXN0KCBtYXRjaFswXSApICkge1xyXG5cdFx0XHRcdHJldHVybiBudWxsO1xyXG5cdFx0XHR9XHJcblxyXG5cdFx0XHQvLyBBY2NlcHQgcXVvdGVkIGFyZ3VtZW50cyBhcy1pc1xyXG5cdFx0XHRpZiAoIG1hdGNoWzNdICkge1xyXG5cdFx0XHRcdG1hdGNoWzJdID0gbWF0Y2hbNF0gfHwgbWF0Y2hbNV0gfHwgXCJcIjtcclxuXHJcblx0XHRcdC8vIFN0cmlwIGV4Y2VzcyBjaGFyYWN0ZXJzIGZyb20gdW5xdW90ZWQgYXJndW1lbnRzXHJcblx0XHRcdH0gZWxzZSBpZiAoIHVucXVvdGVkICYmIHJwc2V1ZG8udGVzdCggdW5xdW90ZWQgKSAmJlxyXG5cdFx0XHRcdC8vIEdldCBleGNlc3MgZnJvbSB0b2tlbml6ZSAocmVjdXJzaXZlbHkpXHJcblx0XHRcdFx0KGV4Y2VzcyA9IHRva2VuaXplKCB1bnF1b3RlZCwgdHJ1ZSApKSAmJlxyXG5cdFx0XHRcdC8vIGFkdmFuY2UgdG8gdGhlIG5leHQgY2xvc2luZyBwYXJlbnRoZXNpc1xyXG5cdFx0XHRcdChleGNlc3MgPSB1bnF1b3RlZC5pbmRleE9mKCBcIilcIiwgdW5xdW90ZWQubGVuZ3RoIC0gZXhjZXNzICkgLSB1bnF1b3RlZC5sZW5ndGgpICkge1xyXG5cclxuXHRcdFx0XHQvLyBleGNlc3MgaXMgYSBuZWdhdGl2ZSBpbmRleFxyXG5cdFx0XHRcdG1hdGNoWzBdID0gbWF0Y2hbMF0uc2xpY2UoIDAsIGV4Y2VzcyApO1xyXG5cdFx0XHRcdG1hdGNoWzJdID0gdW5xdW90ZWQuc2xpY2UoIDAsIGV4Y2VzcyApO1xyXG5cdFx0XHR9XHJcblxyXG5cdFx0XHQvLyBSZXR1cm4gb25seSBjYXB0dXJlcyBuZWVkZWQgYnkgdGhlIHBzZXVkbyBmaWx0ZXIgbWV0aG9kICh0eXBlIGFuZCBhcmd1bWVudClcclxuXHRcdFx0cmV0dXJuIG1hdGNoLnNsaWNlKCAwLCAzICk7XHJcblx0XHR9XHJcblx0fSxcclxuXHJcblx0ZmlsdGVyOiB7XHJcblxyXG5cdFx0XCJUQUdcIjogZnVuY3Rpb24oIG5vZGVOYW1lU2VsZWN0b3IgKSB7XHJcblx0XHRcdHZhciBub2RlTmFtZSA9IG5vZGVOYW1lU2VsZWN0b3IucmVwbGFjZSggcnVuZXNjYXBlLCBmdW5lc2NhcGUgKS50b0xvd2VyQ2FzZSgpO1xyXG5cdFx0XHRyZXR1cm4gbm9kZU5hbWVTZWxlY3RvciA9PT0gXCIqXCIgP1xyXG5cdFx0XHRcdGZ1bmN0aW9uKCkgeyByZXR1cm4gdHJ1ZTsgfSA6XHJcblx0XHRcdFx0ZnVuY3Rpb24oIGVsZW0gKSB7XHJcblx0XHRcdFx0XHRyZXR1cm4gZWxlbS5ub2RlTmFtZSAmJiBlbGVtLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCkgPT09IG5vZGVOYW1lO1xyXG5cdFx0XHRcdH07XHJcblx0XHR9LFxyXG5cclxuXHRcdFwiQ0xBU1NcIjogZnVuY3Rpb24oIGNsYXNzTmFtZSApIHtcclxuXHRcdFx0dmFyIHBhdHRlcm4gPSBjbGFzc0NhY2hlWyBjbGFzc05hbWUgKyBcIiBcIiBdO1xyXG5cclxuXHRcdFx0cmV0dXJuIHBhdHRlcm4gfHxcclxuXHRcdFx0XHQocGF0dGVybiA9IG5ldyBSZWdFeHAoIFwiKF58XCIgKyB3aGl0ZXNwYWNlICsgXCIpXCIgKyBjbGFzc05hbWUgKyBcIihcIiArIHdoaXRlc3BhY2UgKyBcInwkKVwiICkpICYmXHJcblx0XHRcdFx0Y2xhc3NDYWNoZSggY2xhc3NOYW1lLCBmdW5jdGlvbiggZWxlbSApIHtcclxuXHRcdFx0XHRcdHJldHVybiBwYXR0ZXJuLnRlc3QoIHR5cGVvZiBlbGVtLmNsYXNzTmFtZSA9PT0gXCJzdHJpbmdcIiAmJiBlbGVtLmNsYXNzTmFtZSB8fCB0eXBlb2YgZWxlbS5nZXRBdHRyaWJ1dGUgIT09IFwidW5kZWZpbmVkXCIgJiYgZWxlbS5nZXRBdHRyaWJ1dGUoXCJjbGFzc1wiKSB8fCBcIlwiICk7XHJcblx0XHRcdFx0fSk7XHJcblx0XHR9LFxyXG5cclxuXHRcdFwiQVRUUlwiOiBmdW5jdGlvbiggbmFtZSwgb3BlcmF0b3IsIGNoZWNrICkge1xyXG5cdFx0XHRyZXR1cm4gZnVuY3Rpb24oIGVsZW0gKSB7XHJcblx0XHRcdFx0dmFyIHJlc3VsdCA9IFNpenpsZS5hdHRyKCBlbGVtLCBuYW1lICk7XHJcblxyXG5cdFx0XHRcdGlmICggcmVzdWx0ID09IG51bGwgKSB7XHJcblx0XHRcdFx0XHRyZXR1cm4gb3BlcmF0b3IgPT09IFwiIT1cIjtcclxuXHRcdFx0XHR9XHJcblx0XHRcdFx0aWYgKCAhb3BlcmF0b3IgKSB7XHJcblx0XHRcdFx0XHRyZXR1cm4gdHJ1ZTtcclxuXHRcdFx0XHR9XHJcblxyXG5cdFx0XHRcdHJlc3VsdCArPSBcIlwiO1xyXG5cclxuXHRcdFx0XHRyZXR1cm4gb3BlcmF0b3IgPT09IFwiPVwiID8gcmVzdWx0ID09PSBjaGVjayA6XHJcblx0XHRcdFx0XHRvcGVyYXRvciA9PT0gXCIhPVwiID8gcmVzdWx0ICE9PSBjaGVjayA6XHJcblx0XHRcdFx0XHRvcGVyYXRvciA9PT0gXCJePVwiID8gY2hlY2sgJiYgcmVzdWx0LmluZGV4T2YoIGNoZWNrICkgPT09IDAgOlxyXG5cdFx0XHRcdFx0b3BlcmF0b3IgPT09IFwiKj1cIiA/IGNoZWNrICYmIHJlc3VsdC5pbmRleE9mKCBjaGVjayApID4gLTEgOlxyXG5cdFx0XHRcdFx0b3BlcmF0b3IgPT09IFwiJD1cIiA/IGNoZWNrICYmIHJlc3VsdC5zbGljZSggLWNoZWNrLmxlbmd0aCApID09PSBjaGVjayA6XHJcblx0XHRcdFx0XHRvcGVyYXRvciA9PT0gXCJ+PVwiID8gKCBcIiBcIiArIHJlc3VsdC5yZXBsYWNlKCByd2hpdGVzcGFjZSwgXCIgXCIgKSArIFwiIFwiICkuaW5kZXhPZiggY2hlY2sgKSA+IC0xIDpcclxuXHRcdFx0XHRcdG9wZXJhdG9yID09PSBcInw9XCIgPyByZXN1bHQgPT09IGNoZWNrIHx8IHJlc3VsdC5zbGljZSggMCwgY2hlY2subGVuZ3RoICsgMSApID09PSBjaGVjayArIFwiLVwiIDpcclxuXHRcdFx0XHRcdGZhbHNlO1xyXG5cdFx0XHR9O1xyXG5cdFx0fSxcclxuXHJcblx0XHRcIkNISUxEXCI6IGZ1bmN0aW9uKCB0eXBlLCB3aGF0LCBhcmd1bWVudCwgZmlyc3QsIGxhc3QgKSB7XHJcblx0XHRcdHZhciBzaW1wbGUgPSB0eXBlLnNsaWNlKCAwLCAzICkgIT09IFwibnRoXCIsXHJcblx0XHRcdFx0Zm9yd2FyZCA9IHR5cGUuc2xpY2UoIC00ICkgIT09IFwibGFzdFwiLFxyXG5cdFx0XHRcdG9mVHlwZSA9IHdoYXQgPT09IFwib2YtdHlwZVwiO1xyXG5cclxuXHRcdFx0cmV0dXJuIGZpcnN0ID09PSAxICYmIGxhc3QgPT09IDAgP1xyXG5cclxuXHRcdFx0XHQvLyBTaG9ydGN1dCBmb3IgOm50aC0qKG4pXHJcblx0XHRcdFx0ZnVuY3Rpb24oIGVsZW0gKSB7XHJcblx0XHRcdFx0XHRyZXR1cm4gISFlbGVtLnBhcmVudE5vZGU7XHJcblx0XHRcdFx0fSA6XHJcblxyXG5cdFx0XHRcdGZ1bmN0aW9uKCBlbGVtLCBjb250ZXh0LCB4bWwgKSB7XHJcblx0XHRcdFx0XHR2YXIgY2FjaGUsIHVuaXF1ZUNhY2hlLCBvdXRlckNhY2hlLCBub2RlLCBub2RlSW5kZXgsIHN0YXJ0LFxyXG5cdFx0XHRcdFx0XHRkaXIgPSBzaW1wbGUgIT09IGZvcndhcmQgPyBcIm5leHRTaWJsaW5nXCIgOiBcInByZXZpb3VzU2libGluZ1wiLFxyXG5cdFx0XHRcdFx0XHRwYXJlbnQgPSBlbGVtLnBhcmVudE5vZGUsXHJcblx0XHRcdFx0XHRcdG5hbWUgPSBvZlR5cGUgJiYgZWxlbS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpLFxyXG5cdFx0XHRcdFx0XHR1c2VDYWNoZSA9ICF4bWwgJiYgIW9mVHlwZSxcclxuXHRcdFx0XHRcdFx0ZGlmZiA9IGZhbHNlO1xyXG5cclxuXHRcdFx0XHRcdGlmICggcGFyZW50ICkge1xyXG5cclxuXHRcdFx0XHRcdFx0Ly8gOihmaXJzdHxsYXN0fG9ubHkpLShjaGlsZHxvZi10eXBlKVxyXG5cdFx0XHRcdFx0XHRpZiAoIHNpbXBsZSApIHtcclxuXHRcdFx0XHRcdFx0XHR3aGlsZSAoIGRpciApIHtcclxuXHRcdFx0XHRcdFx0XHRcdG5vZGUgPSBlbGVtO1xyXG5cdFx0XHRcdFx0XHRcdFx0d2hpbGUgKCAobm9kZSA9IG5vZGVbIGRpciBdKSApIHtcclxuXHRcdFx0XHRcdFx0XHRcdFx0aWYgKCBvZlR5cGUgP1xyXG5cdFx0XHRcdFx0XHRcdFx0XHRcdG5vZGUubm9kZU5hbWUudG9Mb3dlckNhc2UoKSA9PT0gbmFtZSA6XHJcblx0XHRcdFx0XHRcdFx0XHRcdFx0bm9kZS5ub2RlVHlwZSA9PT0gMSApIHtcclxuXHJcblx0XHRcdFx0XHRcdFx0XHRcdFx0cmV0dXJuIGZhbHNlO1xyXG5cdFx0XHRcdFx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHRcdFx0XHQvLyBSZXZlcnNlIGRpcmVjdGlvbiBmb3IgOm9ubHktKiAoaWYgd2UgaGF2ZW4ndCB5ZXQgZG9uZSBzbylcclxuXHRcdFx0XHRcdFx0XHRcdHN0YXJ0ID0gZGlyID0gdHlwZSA9PT0gXCJvbmx5XCIgJiYgIXN0YXJ0ICYmIFwibmV4dFNpYmxpbmdcIjtcclxuXHRcdFx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHRcdFx0cmV0dXJuIHRydWU7XHJcblx0XHRcdFx0XHRcdH1cclxuXHJcblx0XHRcdFx0XHRcdHN0YXJ0ID0gWyBmb3J3YXJkID8gcGFyZW50LmZpcnN0Q2hpbGQgOiBwYXJlbnQubGFzdENoaWxkIF07XHJcblxyXG5cdFx0XHRcdFx0XHQvLyBub24teG1sIDpudGgtY2hpbGQoLi4uKSBzdG9yZXMgY2FjaGUgZGF0YSBvbiBgcGFyZW50YFxyXG5cdFx0XHRcdFx0XHRpZiAoIGZvcndhcmQgJiYgdXNlQ2FjaGUgKSB7XHJcblxyXG5cdFx0XHRcdFx0XHRcdC8vIFNlZWsgYGVsZW1gIGZyb20gYSBwcmV2aW91c2x5LWNhY2hlZCBpbmRleFxyXG5cclxuXHRcdFx0XHRcdFx0XHQvLyAuLi5pbiBhIGd6aXAtZnJpZW5kbHkgd2F5XHJcblx0XHRcdFx0XHRcdFx0bm9kZSA9IHBhcmVudDtcclxuXHRcdFx0XHRcdFx0XHRvdXRlckNhY2hlID0gbm9kZVsgZXhwYW5kbyBdIHx8IChub2RlWyBleHBhbmRvIF0gPSB7fSk7XHJcblxyXG5cdFx0XHRcdFx0XHRcdC8vIFN1cHBvcnQ6IElFIDw5IG9ubHlcclxuXHRcdFx0XHRcdFx0XHQvLyBEZWZlbmQgYWdhaW5zdCBjbG9uZWQgYXR0cm9wZXJ0aWVzIChqUXVlcnkgZ2gtMTcwOSlcclxuXHRcdFx0XHRcdFx0XHR1bmlxdWVDYWNoZSA9IG91dGVyQ2FjaGVbIG5vZGUudW5pcXVlSUQgXSB8fFxyXG5cdFx0XHRcdFx0XHRcdFx0KG91dGVyQ2FjaGVbIG5vZGUudW5pcXVlSUQgXSA9IHt9KTtcclxuXHJcblx0XHRcdFx0XHRcdFx0Y2FjaGUgPSB1bmlxdWVDYWNoZVsgdHlwZSBdIHx8IFtdO1xyXG5cdFx0XHRcdFx0XHRcdG5vZGVJbmRleCA9IGNhY2hlWyAwIF0gPT09IGRpcnJ1bnMgJiYgY2FjaGVbIDEgXTtcclxuXHRcdFx0XHRcdFx0XHRkaWZmID0gbm9kZUluZGV4ICYmIGNhY2hlWyAyIF07XHJcblx0XHRcdFx0XHRcdFx0bm9kZSA9IG5vZGVJbmRleCAmJiBwYXJlbnQuY2hpbGROb2Rlc1sgbm9kZUluZGV4IF07XHJcblxyXG5cdFx0XHRcdFx0XHRcdHdoaWxlICggKG5vZGUgPSArK25vZGVJbmRleCAmJiBub2RlICYmIG5vZGVbIGRpciBdIHx8XHJcblxyXG5cdFx0XHRcdFx0XHRcdFx0Ly8gRmFsbGJhY2sgdG8gc2Vla2luZyBgZWxlbWAgZnJvbSB0aGUgc3RhcnRcclxuXHRcdFx0XHRcdFx0XHRcdChkaWZmID0gbm9kZUluZGV4ID0gMCkgfHwgc3RhcnQucG9wKCkpICkge1xyXG5cclxuXHRcdFx0XHRcdFx0XHRcdC8vIFdoZW4gZm91bmQsIGNhY2hlIGluZGV4ZXMgb24gYHBhcmVudGAgYW5kIGJyZWFrXHJcblx0XHRcdFx0XHRcdFx0XHRpZiAoIG5vZGUubm9kZVR5cGUgPT09IDEgJiYgKytkaWZmICYmIG5vZGUgPT09IGVsZW0gKSB7XHJcblx0XHRcdFx0XHRcdFx0XHRcdHVuaXF1ZUNhY2hlWyB0eXBlIF0gPSBbIGRpcnJ1bnMsIG5vZGVJbmRleCwgZGlmZiBdO1xyXG5cdFx0XHRcdFx0XHRcdFx0XHRicmVhaztcclxuXHRcdFx0XHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdFx0XHR9XHJcblxyXG5cdFx0XHRcdFx0XHR9IGVsc2Uge1xyXG5cdFx0XHRcdFx0XHRcdC8vIFVzZSBwcmV2aW91c2x5LWNhY2hlZCBlbGVtZW50IGluZGV4IGlmIGF2YWlsYWJsZVxyXG5cdFx0XHRcdFx0XHRcdGlmICggdXNlQ2FjaGUgKSB7XHJcblx0XHRcdFx0XHRcdFx0XHQvLyAuLi5pbiBhIGd6aXAtZnJpZW5kbHkgd2F5XHJcblx0XHRcdFx0XHRcdFx0XHRub2RlID0gZWxlbTtcclxuXHRcdFx0XHRcdFx0XHRcdG91dGVyQ2FjaGUgPSBub2RlWyBleHBhbmRvIF0gfHwgKG5vZGVbIGV4cGFuZG8gXSA9IHt9KTtcclxuXHJcblx0XHRcdFx0XHRcdFx0XHQvLyBTdXBwb3J0OiBJRSA8OSBvbmx5XHJcblx0XHRcdFx0XHRcdFx0XHQvLyBEZWZlbmQgYWdhaW5zdCBjbG9uZWQgYXR0cm9wZXJ0aWVzIChqUXVlcnkgZ2gtMTcwOSlcclxuXHRcdFx0XHRcdFx0XHRcdHVuaXF1ZUNhY2hlID0gb3V0ZXJDYWNoZVsgbm9kZS51bmlxdWVJRCBdIHx8XHJcblx0XHRcdFx0XHRcdFx0XHRcdChvdXRlckNhY2hlWyBub2RlLnVuaXF1ZUlEIF0gPSB7fSk7XHJcblxyXG5cdFx0XHRcdFx0XHRcdFx0Y2FjaGUgPSB1bmlxdWVDYWNoZVsgdHlwZSBdIHx8IFtdO1xyXG5cdFx0XHRcdFx0XHRcdFx0bm9kZUluZGV4ID0gY2FjaGVbIDAgXSA9PT0gZGlycnVucyAmJiBjYWNoZVsgMSBdO1xyXG5cdFx0XHRcdFx0XHRcdFx0ZGlmZiA9IG5vZGVJbmRleDtcclxuXHRcdFx0XHRcdFx0XHR9XHJcblxyXG5cdFx0XHRcdFx0XHRcdC8vIHhtbCA6bnRoLWNoaWxkKC4uLilcclxuXHRcdFx0XHRcdFx0XHQvLyBvciA6bnRoLWxhc3QtY2hpbGQoLi4uKSBvciA6bnRoKC1sYXN0KT8tb2YtdHlwZSguLi4pXHJcblx0XHRcdFx0XHRcdFx0aWYgKCBkaWZmID09PSBmYWxzZSApIHtcclxuXHRcdFx0XHRcdFx0XHRcdC8vIFVzZSB0aGUgc2FtZSBsb29wIGFzIGFib3ZlIHRvIHNlZWsgYGVsZW1gIGZyb20gdGhlIHN0YXJ0XHJcblx0XHRcdFx0XHRcdFx0XHR3aGlsZSAoIChub2RlID0gKytub2RlSW5kZXggJiYgbm9kZSAmJiBub2RlWyBkaXIgXSB8fFxyXG5cdFx0XHRcdFx0XHRcdFx0XHQoZGlmZiA9IG5vZGVJbmRleCA9IDApIHx8IHN0YXJ0LnBvcCgpKSApIHtcclxuXHJcblx0XHRcdFx0XHRcdFx0XHRcdGlmICggKCBvZlR5cGUgP1xyXG5cdFx0XHRcdFx0XHRcdFx0XHRcdG5vZGUubm9kZU5hbWUudG9Mb3dlckNhc2UoKSA9PT0gbmFtZSA6XHJcblx0XHRcdFx0XHRcdFx0XHRcdFx0bm9kZS5ub2RlVHlwZSA9PT0gMSApICYmXHJcblx0XHRcdFx0XHRcdFx0XHRcdFx0KytkaWZmICkge1xyXG5cclxuXHRcdFx0XHRcdFx0XHRcdFx0XHQvLyBDYWNoZSB0aGUgaW5kZXggb2YgZWFjaCBlbmNvdW50ZXJlZCBlbGVtZW50XHJcblx0XHRcdFx0XHRcdFx0XHRcdFx0aWYgKCB1c2VDYWNoZSApIHtcclxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdG91dGVyQ2FjaGUgPSBub2RlWyBleHBhbmRvIF0gfHwgKG5vZGVbIGV4cGFuZG8gXSA9IHt9KTtcclxuXHJcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHQvLyBTdXBwb3J0OiBJRSA8OSBvbmx5XHJcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHQvLyBEZWZlbmQgYWdhaW5zdCBjbG9uZWQgYXR0cm9wZXJ0aWVzIChqUXVlcnkgZ2gtMTcwOSlcclxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdHVuaXF1ZUNhY2hlID0gb3V0ZXJDYWNoZVsgbm9kZS51bmlxdWVJRCBdIHx8XHJcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdChvdXRlckNhY2hlWyBub2RlLnVuaXF1ZUlEIF0gPSB7fSk7XHJcblxyXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0dW5pcXVlQ2FjaGVbIHR5cGUgXSA9IFsgZGlycnVucywgZGlmZiBdO1xyXG5cdFx0XHRcdFx0XHRcdFx0XHRcdH1cclxuXHJcblx0XHRcdFx0XHRcdFx0XHRcdFx0aWYgKCBub2RlID09PSBlbGVtICkge1xyXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0YnJlYWs7XHJcblx0XHRcdFx0XHRcdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0XHR9XHJcblxyXG5cdFx0XHRcdFx0XHQvLyBJbmNvcnBvcmF0ZSB0aGUgb2Zmc2V0LCB0aGVuIGNoZWNrIGFnYWluc3QgY3ljbGUgc2l6ZVxyXG5cdFx0XHRcdFx0XHRkaWZmIC09IGxhc3Q7XHJcblx0XHRcdFx0XHRcdHJldHVybiBkaWZmID09PSBmaXJzdCB8fCAoIGRpZmYgJSBmaXJzdCA9PT0gMCAmJiBkaWZmIC8gZmlyc3QgPj0gMCApO1xyXG5cdFx0XHRcdFx0fVxyXG5cdFx0XHRcdH07XHJcblx0XHR9LFxyXG5cclxuXHRcdFwiUFNFVURPXCI6IGZ1bmN0aW9uKCBwc2V1ZG8sIGFyZ3VtZW50ICkge1xyXG5cdFx0XHQvLyBwc2V1ZG8tY2xhc3MgbmFtZXMgYXJlIGNhc2UtaW5zZW5zaXRpdmVcclxuXHRcdFx0Ly8gaHR0cDovL3d3dy53My5vcmcvVFIvc2VsZWN0b3JzLyNwc2V1ZG8tY2xhc3Nlc1xyXG5cdFx0XHQvLyBQcmlvcml0aXplIGJ5IGNhc2Ugc2Vuc2l0aXZpdHkgaW4gY2FzZSBjdXN0b20gcHNldWRvcyBhcmUgYWRkZWQgd2l0aCB1cHBlcmNhc2UgbGV0dGVyc1xyXG5cdFx0XHQvLyBSZW1lbWJlciB0aGF0IHNldEZpbHRlcnMgaW5oZXJpdHMgZnJvbSBwc2V1ZG9zXHJcblx0XHRcdHZhciBhcmdzLFxyXG5cdFx0XHRcdGZuID0gRXhwci5wc2V1ZG9zWyBwc2V1ZG8gXSB8fCBFeHByLnNldEZpbHRlcnNbIHBzZXVkby50b0xvd2VyQ2FzZSgpIF0gfHxcclxuXHRcdFx0XHRcdFNpenpsZS5lcnJvciggXCJ1bnN1cHBvcnRlZCBwc2V1ZG86IFwiICsgcHNldWRvICk7XHJcblxyXG5cdFx0XHQvLyBUaGUgdXNlciBtYXkgdXNlIGNyZWF0ZVBzZXVkbyB0byBpbmRpY2F0ZSB0aGF0XHJcblx0XHRcdC8vIGFyZ3VtZW50cyBhcmUgbmVlZGVkIHRvIGNyZWF0ZSB0aGUgZmlsdGVyIGZ1bmN0aW9uXHJcblx0XHRcdC8vIGp1c3QgYXMgU2l6emxlIGRvZXNcclxuXHRcdFx0aWYgKCBmblsgZXhwYW5kbyBdICkge1xyXG5cdFx0XHRcdHJldHVybiBmbiggYXJndW1lbnQgKTtcclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0Ly8gQnV0IG1haW50YWluIHN1cHBvcnQgZm9yIG9sZCBzaWduYXR1cmVzXHJcblx0XHRcdGlmICggZm4ubGVuZ3RoID4gMSApIHtcclxuXHRcdFx0XHRhcmdzID0gWyBwc2V1ZG8sIHBzZXVkbywgXCJcIiwgYXJndW1lbnQgXTtcclxuXHRcdFx0XHRyZXR1cm4gRXhwci5zZXRGaWx0ZXJzLmhhc093blByb3BlcnR5KCBwc2V1ZG8udG9Mb3dlckNhc2UoKSApID9cclxuXHRcdFx0XHRcdG1hcmtGdW5jdGlvbihmdW5jdGlvbiggc2VlZCwgbWF0Y2hlcyApIHtcclxuXHRcdFx0XHRcdFx0dmFyIGlkeCxcclxuXHRcdFx0XHRcdFx0XHRtYXRjaGVkID0gZm4oIHNlZWQsIGFyZ3VtZW50ICksXHJcblx0XHRcdFx0XHRcdFx0aSA9IG1hdGNoZWQubGVuZ3RoO1xyXG5cdFx0XHRcdFx0XHR3aGlsZSAoIGktLSApIHtcclxuXHRcdFx0XHRcdFx0XHRpZHggPSBpbmRleE9mKCBzZWVkLCBtYXRjaGVkW2ldICk7XHJcblx0XHRcdFx0XHRcdFx0c2VlZFsgaWR4IF0gPSAhKCBtYXRjaGVzWyBpZHggXSA9IG1hdGNoZWRbaV0gKTtcclxuXHRcdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0fSkgOlxyXG5cdFx0XHRcdFx0ZnVuY3Rpb24oIGVsZW0gKSB7XHJcblx0XHRcdFx0XHRcdHJldHVybiBmbiggZWxlbSwgMCwgYXJncyApO1xyXG5cdFx0XHRcdFx0fTtcclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0cmV0dXJuIGZuO1xyXG5cdFx0fVxyXG5cdH0sXHJcblxyXG5cdHBzZXVkb3M6IHtcclxuXHRcdC8vIFBvdGVudGlhbGx5IGNvbXBsZXggcHNldWRvc1xyXG5cdFx0XCJub3RcIjogbWFya0Z1bmN0aW9uKGZ1bmN0aW9uKCBzZWxlY3RvciApIHtcclxuXHRcdFx0Ly8gVHJpbSB0aGUgc2VsZWN0b3IgcGFzc2VkIHRvIGNvbXBpbGVcclxuXHRcdFx0Ly8gdG8gYXZvaWQgdHJlYXRpbmcgbGVhZGluZyBhbmQgdHJhaWxpbmdcclxuXHRcdFx0Ly8gc3BhY2VzIGFzIGNvbWJpbmF0b3JzXHJcblx0XHRcdHZhciBpbnB1dCA9IFtdLFxyXG5cdFx0XHRcdHJlc3VsdHMgPSBbXSxcclxuXHRcdFx0XHRtYXRjaGVyID0gY29tcGlsZSggc2VsZWN0b3IucmVwbGFjZSggcnRyaW0sIFwiJDFcIiApICk7XHJcblxyXG5cdFx0XHRyZXR1cm4gbWF0Y2hlclsgZXhwYW5kbyBdID9cclxuXHRcdFx0XHRtYXJrRnVuY3Rpb24oZnVuY3Rpb24oIHNlZWQsIG1hdGNoZXMsIGNvbnRleHQsIHhtbCApIHtcclxuXHRcdFx0XHRcdHZhciBlbGVtLFxyXG5cdFx0XHRcdFx0XHR1bm1hdGNoZWQgPSBtYXRjaGVyKCBzZWVkLCBudWxsLCB4bWwsIFtdICksXHJcblx0XHRcdFx0XHRcdGkgPSBzZWVkLmxlbmd0aDtcclxuXHJcblx0XHRcdFx0XHQvLyBNYXRjaCBlbGVtZW50cyB1bm1hdGNoZWQgYnkgYG1hdGNoZXJgXHJcblx0XHRcdFx0XHR3aGlsZSAoIGktLSApIHtcclxuXHRcdFx0XHRcdFx0aWYgKCAoZWxlbSA9IHVubWF0Y2hlZFtpXSkgKSB7XHJcblx0XHRcdFx0XHRcdFx0c2VlZFtpXSA9ICEobWF0Y2hlc1tpXSA9IGVsZW0pO1xyXG5cdFx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHR9XHJcblx0XHRcdFx0fSkgOlxyXG5cdFx0XHRcdGZ1bmN0aW9uKCBlbGVtLCBjb250ZXh0LCB4bWwgKSB7XHJcblx0XHRcdFx0XHRpbnB1dFswXSA9IGVsZW07XHJcblx0XHRcdFx0XHRtYXRjaGVyKCBpbnB1dCwgbnVsbCwgeG1sLCByZXN1bHRzICk7XHJcblx0XHRcdFx0XHQvLyBEb24ndCBrZWVwIHRoZSBlbGVtZW50IChpc3N1ZSAjMjk5KVxyXG5cdFx0XHRcdFx0aW5wdXRbMF0gPSBudWxsO1xyXG5cdFx0XHRcdFx0cmV0dXJuICFyZXN1bHRzLnBvcCgpO1xyXG5cdFx0XHRcdH07XHJcblx0XHR9KSxcclxuXHJcblx0XHRcImhhc1wiOiBtYXJrRnVuY3Rpb24oZnVuY3Rpb24oIHNlbGVjdG9yICkge1xyXG5cdFx0XHRyZXR1cm4gZnVuY3Rpb24oIGVsZW0gKSB7XHJcblx0XHRcdFx0cmV0dXJuIFNpenpsZSggc2VsZWN0b3IsIGVsZW0gKS5sZW5ndGggPiAwO1xyXG5cdFx0XHR9O1xyXG5cdFx0fSksXHJcblxyXG5cdFx0XCJjb250YWluc1wiOiBtYXJrRnVuY3Rpb24oZnVuY3Rpb24oIHRleHQgKSB7XHJcblx0XHRcdHRleHQgPSB0ZXh0LnJlcGxhY2UoIHJ1bmVzY2FwZSwgZnVuZXNjYXBlICk7XHJcblx0XHRcdHJldHVybiBmdW5jdGlvbiggZWxlbSApIHtcclxuXHRcdFx0XHRyZXR1cm4gKCBlbGVtLnRleHRDb250ZW50IHx8IGVsZW0uaW5uZXJUZXh0IHx8IGdldFRleHQoIGVsZW0gKSApLmluZGV4T2YoIHRleHQgKSA+IC0xO1xyXG5cdFx0XHR9O1xyXG5cdFx0fSksXHJcblxyXG5cdFx0Ly8gXCJXaGV0aGVyIGFuIGVsZW1lbnQgaXMgcmVwcmVzZW50ZWQgYnkgYSA6bGFuZygpIHNlbGVjdG9yXHJcblx0XHQvLyBpcyBiYXNlZCBzb2xlbHkgb24gdGhlIGVsZW1lbnQncyBsYW5ndWFnZSB2YWx1ZVxyXG5cdFx0Ly8gYmVpbmcgZXF1YWwgdG8gdGhlIGlkZW50aWZpZXIgQyxcclxuXHRcdC8vIG9yIGJlZ2lubmluZyB3aXRoIHRoZSBpZGVudGlmaWVyIEMgaW1tZWRpYXRlbHkgZm9sbG93ZWQgYnkgXCItXCIuXHJcblx0XHQvLyBUaGUgbWF0Y2hpbmcgb2YgQyBhZ2FpbnN0IHRoZSBlbGVtZW50J3MgbGFuZ3VhZ2UgdmFsdWUgaXMgcGVyZm9ybWVkIGNhc2UtaW5zZW5zaXRpdmVseS5cclxuXHRcdC8vIFRoZSBpZGVudGlmaWVyIEMgZG9lcyBub3QgaGF2ZSB0byBiZSBhIHZhbGlkIGxhbmd1YWdlIG5hbWUuXCJcclxuXHRcdC8vIGh0dHA6Ly93d3cudzMub3JnL1RSL3NlbGVjdG9ycy8jbGFuZy1wc2V1ZG9cclxuXHRcdFwibGFuZ1wiOiBtYXJrRnVuY3Rpb24oIGZ1bmN0aW9uKCBsYW5nICkge1xyXG5cdFx0XHQvLyBsYW5nIHZhbHVlIG11c3QgYmUgYSB2YWxpZCBpZGVudGlmaWVyXHJcblx0XHRcdGlmICggIXJpZGVudGlmaWVyLnRlc3QobGFuZyB8fCBcIlwiKSApIHtcclxuXHRcdFx0XHRTaXp6bGUuZXJyb3IoIFwidW5zdXBwb3J0ZWQgbGFuZzogXCIgKyBsYW5nICk7XHJcblx0XHRcdH1cclxuXHRcdFx0bGFuZyA9IGxhbmcucmVwbGFjZSggcnVuZXNjYXBlLCBmdW5lc2NhcGUgKS50b0xvd2VyQ2FzZSgpO1xyXG5cdFx0XHRyZXR1cm4gZnVuY3Rpb24oIGVsZW0gKSB7XHJcblx0XHRcdFx0dmFyIGVsZW1MYW5nO1xyXG5cdFx0XHRcdGRvIHtcclxuXHRcdFx0XHRcdGlmICggKGVsZW1MYW5nID0gZG9jdW1lbnRJc0hUTUwgP1xyXG5cdFx0XHRcdFx0XHRlbGVtLmxhbmcgOlxyXG5cdFx0XHRcdFx0XHRlbGVtLmdldEF0dHJpYnV0ZShcInhtbDpsYW5nXCIpIHx8IGVsZW0uZ2V0QXR0cmlidXRlKFwibGFuZ1wiKSkgKSB7XHJcblxyXG5cdFx0XHRcdFx0XHRlbGVtTGFuZyA9IGVsZW1MYW5nLnRvTG93ZXJDYXNlKCk7XHJcblx0XHRcdFx0XHRcdHJldHVybiBlbGVtTGFuZyA9PT0gbGFuZyB8fCBlbGVtTGFuZy5pbmRleE9mKCBsYW5nICsgXCItXCIgKSA9PT0gMDtcclxuXHRcdFx0XHRcdH1cclxuXHRcdFx0XHR9IHdoaWxlICggKGVsZW0gPSBlbGVtLnBhcmVudE5vZGUpICYmIGVsZW0ubm9kZVR5cGUgPT09IDEgKTtcclxuXHRcdFx0XHRyZXR1cm4gZmFsc2U7XHJcblx0XHRcdH07XHJcblx0XHR9KSxcclxuXHJcblx0XHQvLyBNaXNjZWxsYW5lb3VzXHJcblx0XHRcInRhcmdldFwiOiBmdW5jdGlvbiggZWxlbSApIHtcclxuXHRcdFx0dmFyIGhhc2ggPSB3aW5kb3cubG9jYXRpb24gJiYgd2luZG93LmxvY2F0aW9uLmhhc2g7XHJcblx0XHRcdHJldHVybiBoYXNoICYmIGhhc2guc2xpY2UoIDEgKSA9PT0gZWxlbS5pZDtcclxuXHRcdH0sXHJcblxyXG5cdFx0XCJyb290XCI6IGZ1bmN0aW9uKCBlbGVtICkge1xyXG5cdFx0XHRyZXR1cm4gZWxlbSA9PT0gZG9jRWxlbTtcclxuXHRcdH0sXHJcblxyXG5cdFx0XCJmb2N1c1wiOiBmdW5jdGlvbiggZWxlbSApIHtcclxuXHRcdFx0cmV0dXJuIGVsZW0gPT09IGRvY3VtZW50LmFjdGl2ZUVsZW1lbnQgJiYgKCFkb2N1bWVudC5oYXNGb2N1cyB8fCBkb2N1bWVudC5oYXNGb2N1cygpKSAmJiAhIShlbGVtLnR5cGUgfHwgZWxlbS5ocmVmIHx8IH5lbGVtLnRhYkluZGV4KTtcclxuXHRcdH0sXHJcblxyXG5cdFx0Ly8gQm9vbGVhbiBwcm9wZXJ0aWVzXHJcblx0XHRcImVuYWJsZWRcIjogZnVuY3Rpb24oIGVsZW0gKSB7XHJcblx0XHRcdHJldHVybiBlbGVtLmRpc2FibGVkID09PSBmYWxzZTtcclxuXHRcdH0sXHJcblxyXG5cdFx0XCJkaXNhYmxlZFwiOiBmdW5jdGlvbiggZWxlbSApIHtcclxuXHRcdFx0cmV0dXJuIGVsZW0uZGlzYWJsZWQgPT09IHRydWU7XHJcblx0XHR9LFxyXG5cclxuXHRcdFwiY2hlY2tlZFwiOiBmdW5jdGlvbiggZWxlbSApIHtcclxuXHRcdFx0Ly8gSW4gQ1NTMywgOmNoZWNrZWQgc2hvdWxkIHJldHVybiBib3RoIGNoZWNrZWQgYW5kIHNlbGVjdGVkIGVsZW1lbnRzXHJcblx0XHRcdC8vIGh0dHA6Ly93d3cudzMub3JnL1RSLzIwMTEvUkVDLWNzczMtc2VsZWN0b3JzLTIwMTEwOTI5LyNjaGVja2VkXHJcblx0XHRcdHZhciBub2RlTmFtZSA9IGVsZW0ubm9kZU5hbWUudG9Mb3dlckNhc2UoKTtcclxuXHRcdFx0cmV0dXJuIChub2RlTmFtZSA9PT0gXCJpbnB1dFwiICYmICEhZWxlbS5jaGVja2VkKSB8fCAobm9kZU5hbWUgPT09IFwib3B0aW9uXCIgJiYgISFlbGVtLnNlbGVjdGVkKTtcclxuXHRcdH0sXHJcblxyXG5cdFx0XCJzZWxlY3RlZFwiOiBmdW5jdGlvbiggZWxlbSApIHtcclxuXHRcdFx0Ly8gQWNjZXNzaW5nIHRoaXMgcHJvcGVydHkgbWFrZXMgc2VsZWN0ZWQtYnktZGVmYXVsdFxyXG5cdFx0XHQvLyBvcHRpb25zIGluIFNhZmFyaSB3b3JrIHByb3Blcmx5XHJcblx0XHRcdGlmICggZWxlbS5wYXJlbnROb2RlICkge1xyXG5cdFx0XHRcdGVsZW0ucGFyZW50Tm9kZS5zZWxlY3RlZEluZGV4O1xyXG5cdFx0XHR9XHJcblxyXG5cdFx0XHRyZXR1cm4gZWxlbS5zZWxlY3RlZCA9PT0gdHJ1ZTtcclxuXHRcdH0sXHJcblxyXG5cdFx0Ly8gQ29udGVudHNcclxuXHRcdFwiZW1wdHlcIjogZnVuY3Rpb24oIGVsZW0gKSB7XHJcblx0XHRcdC8vIGh0dHA6Ly93d3cudzMub3JnL1RSL3NlbGVjdG9ycy8jZW1wdHktcHNldWRvXHJcblx0XHRcdC8vIDplbXB0eSBpcyBuZWdhdGVkIGJ5IGVsZW1lbnQgKDEpIG9yIGNvbnRlbnQgbm9kZXMgKHRleHQ6IDM7IGNkYXRhOiA0OyBlbnRpdHkgcmVmOiA1KSxcclxuXHRcdFx0Ly8gICBidXQgbm90IGJ5IG90aGVycyAoY29tbWVudDogODsgcHJvY2Vzc2luZyBpbnN0cnVjdGlvbjogNzsgZXRjLilcclxuXHRcdFx0Ly8gbm9kZVR5cGUgPCA2IHdvcmtzIGJlY2F1c2UgYXR0cmlidXRlcyAoMikgZG8gbm90IGFwcGVhciBhcyBjaGlsZHJlblxyXG5cdFx0XHRmb3IgKCBlbGVtID0gZWxlbS5maXJzdENoaWxkOyBlbGVtOyBlbGVtID0gZWxlbS5uZXh0U2libGluZyApIHtcclxuXHRcdFx0XHRpZiAoIGVsZW0ubm9kZVR5cGUgPCA2ICkge1xyXG5cdFx0XHRcdFx0cmV0dXJuIGZhbHNlO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0fVxyXG5cdFx0XHRyZXR1cm4gdHJ1ZTtcclxuXHRcdH0sXHJcblxyXG5cdFx0XCJwYXJlbnRcIjogZnVuY3Rpb24oIGVsZW0gKSB7XHJcblx0XHRcdHJldHVybiAhRXhwci5wc2V1ZG9zW1wiZW1wdHlcIl0oIGVsZW0gKTtcclxuXHRcdH0sXHJcblxyXG5cdFx0Ly8gRWxlbWVudC9pbnB1dCB0eXBlc1xyXG5cdFx0XCJoZWFkZXJcIjogZnVuY3Rpb24oIGVsZW0gKSB7XHJcblx0XHRcdHJldHVybiByaGVhZGVyLnRlc3QoIGVsZW0ubm9kZU5hbWUgKTtcclxuXHRcdH0sXHJcblxyXG5cdFx0XCJpbnB1dFwiOiBmdW5jdGlvbiggZWxlbSApIHtcclxuXHRcdFx0cmV0dXJuIHJpbnB1dHMudGVzdCggZWxlbS5ub2RlTmFtZSApO1xyXG5cdFx0fSxcclxuXHJcblx0XHRcImJ1dHRvblwiOiBmdW5jdGlvbiggZWxlbSApIHtcclxuXHRcdFx0dmFyIG5hbWUgPSBlbGVtLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCk7XHJcblx0XHRcdHJldHVybiBuYW1lID09PSBcImlucHV0XCIgJiYgZWxlbS50eXBlID09PSBcImJ1dHRvblwiIHx8IG5hbWUgPT09IFwiYnV0dG9uXCI7XHJcblx0XHR9LFxyXG5cclxuXHRcdFwidGV4dFwiOiBmdW5jdGlvbiggZWxlbSApIHtcclxuXHRcdFx0dmFyIGF0dHI7XHJcblx0XHRcdHJldHVybiBlbGVtLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCkgPT09IFwiaW5wdXRcIiAmJlxyXG5cdFx0XHRcdGVsZW0udHlwZSA9PT0gXCJ0ZXh0XCIgJiZcclxuXHJcblx0XHRcdFx0Ly8gU3VwcG9ydDogSUU8OFxyXG5cdFx0XHRcdC8vIE5ldyBIVE1MNSBhdHRyaWJ1dGUgdmFsdWVzIChlLmcuLCBcInNlYXJjaFwiKSBhcHBlYXIgd2l0aCBlbGVtLnR5cGUgPT09IFwidGV4dFwiXHJcblx0XHRcdFx0KCAoYXR0ciA9IGVsZW0uZ2V0QXR0cmlidXRlKFwidHlwZVwiKSkgPT0gbnVsbCB8fCBhdHRyLnRvTG93ZXJDYXNlKCkgPT09IFwidGV4dFwiICk7XHJcblx0XHR9LFxyXG5cclxuXHRcdC8vIFBvc2l0aW9uLWluLWNvbGxlY3Rpb25cclxuXHRcdFwiZmlyc3RcIjogY3JlYXRlUG9zaXRpb25hbFBzZXVkbyhmdW5jdGlvbigpIHtcclxuXHRcdFx0cmV0dXJuIFsgMCBdO1xyXG5cdFx0fSksXHJcblxyXG5cdFx0XCJsYXN0XCI6IGNyZWF0ZVBvc2l0aW9uYWxQc2V1ZG8oZnVuY3Rpb24oIG1hdGNoSW5kZXhlcywgbGVuZ3RoICkge1xyXG5cdFx0XHRyZXR1cm4gWyBsZW5ndGggLSAxIF07XHJcblx0XHR9KSxcclxuXHJcblx0XHRcImVxXCI6IGNyZWF0ZVBvc2l0aW9uYWxQc2V1ZG8oZnVuY3Rpb24oIG1hdGNoSW5kZXhlcywgbGVuZ3RoLCBhcmd1bWVudCApIHtcclxuXHRcdFx0cmV0dXJuIFsgYXJndW1lbnQgPCAwID8gYXJndW1lbnQgKyBsZW5ndGggOiBhcmd1bWVudCBdO1xyXG5cdFx0fSksXHJcblxyXG5cdFx0XCJldmVuXCI6IGNyZWF0ZVBvc2l0aW9uYWxQc2V1ZG8oZnVuY3Rpb24oIG1hdGNoSW5kZXhlcywgbGVuZ3RoICkge1xyXG5cdFx0XHR2YXIgaSA9IDA7XHJcblx0XHRcdGZvciAoIDsgaSA8IGxlbmd0aDsgaSArPSAyICkge1xyXG5cdFx0XHRcdG1hdGNoSW5kZXhlcy5wdXNoKCBpICk7XHJcblx0XHRcdH1cclxuXHRcdFx0cmV0dXJuIG1hdGNoSW5kZXhlcztcclxuXHRcdH0pLFxyXG5cclxuXHRcdFwib2RkXCI6IGNyZWF0ZVBvc2l0aW9uYWxQc2V1ZG8oZnVuY3Rpb24oIG1hdGNoSW5kZXhlcywgbGVuZ3RoICkge1xyXG5cdFx0XHR2YXIgaSA9IDE7XHJcblx0XHRcdGZvciAoIDsgaSA8IGxlbmd0aDsgaSArPSAyICkge1xyXG5cdFx0XHRcdG1hdGNoSW5kZXhlcy5wdXNoKCBpICk7XHJcblx0XHRcdH1cclxuXHRcdFx0cmV0dXJuIG1hdGNoSW5kZXhlcztcclxuXHRcdH0pLFxyXG5cclxuXHRcdFwibHRcIjogY3JlYXRlUG9zaXRpb25hbFBzZXVkbyhmdW5jdGlvbiggbWF0Y2hJbmRleGVzLCBsZW5ndGgsIGFyZ3VtZW50ICkge1xyXG5cdFx0XHR2YXIgaSA9IGFyZ3VtZW50IDwgMCA/IGFyZ3VtZW50ICsgbGVuZ3RoIDogYXJndW1lbnQ7XHJcblx0XHRcdGZvciAoIDsgLS1pID49IDA7ICkge1xyXG5cdFx0XHRcdG1hdGNoSW5kZXhlcy5wdXNoKCBpICk7XHJcblx0XHRcdH1cclxuXHRcdFx0cmV0dXJuIG1hdGNoSW5kZXhlcztcclxuXHRcdH0pLFxyXG5cclxuXHRcdFwiZ3RcIjogY3JlYXRlUG9zaXRpb25hbFBzZXVkbyhmdW5jdGlvbiggbWF0Y2hJbmRleGVzLCBsZW5ndGgsIGFyZ3VtZW50ICkge1xyXG5cdFx0XHR2YXIgaSA9IGFyZ3VtZW50IDwgMCA/IGFyZ3VtZW50ICsgbGVuZ3RoIDogYXJndW1lbnQ7XHJcblx0XHRcdGZvciAoIDsgKytpIDwgbGVuZ3RoOyApIHtcclxuXHRcdFx0XHRtYXRjaEluZGV4ZXMucHVzaCggaSApO1xyXG5cdFx0XHR9XHJcblx0XHRcdHJldHVybiBtYXRjaEluZGV4ZXM7XHJcblx0XHR9KVxyXG5cdH1cclxufTtcclxuXHJcbkV4cHIucHNldWRvc1tcIm50aFwiXSA9IEV4cHIucHNldWRvc1tcImVxXCJdO1xyXG5cclxuLy8gQWRkIGJ1dHRvbi9pbnB1dCB0eXBlIHBzZXVkb3NcclxuZm9yICggaSBpbiB7IHJhZGlvOiB0cnVlLCBjaGVja2JveDogdHJ1ZSwgZmlsZTogdHJ1ZSwgcGFzc3dvcmQ6IHRydWUsIGltYWdlOiB0cnVlIH0gKSB7XHJcblx0RXhwci5wc2V1ZG9zWyBpIF0gPSBjcmVhdGVJbnB1dFBzZXVkbyggaSApO1xyXG59XHJcbmZvciAoIGkgaW4geyBzdWJtaXQ6IHRydWUsIHJlc2V0OiB0cnVlIH0gKSB7XHJcblx0RXhwci5wc2V1ZG9zWyBpIF0gPSBjcmVhdGVCdXR0b25Qc2V1ZG8oIGkgKTtcclxufVxyXG5cclxuLy8gRWFzeSBBUEkgZm9yIGNyZWF0aW5nIG5ldyBzZXRGaWx0ZXJzXHJcbmZ1bmN0aW9uIHNldEZpbHRlcnMoKSB7fVxyXG5zZXRGaWx0ZXJzLnByb3RvdHlwZSA9IEV4cHIuZmlsdGVycyA9IEV4cHIucHNldWRvcztcclxuRXhwci5zZXRGaWx0ZXJzID0gbmV3IHNldEZpbHRlcnMoKTtcclxuXHJcbnRva2VuaXplID0gU2l6emxlLnRva2VuaXplID0gZnVuY3Rpb24oIHNlbGVjdG9yLCBwYXJzZU9ubHkgKSB7XHJcblx0dmFyIG1hdGNoZWQsIG1hdGNoLCB0b2tlbnMsIHR5cGUsXHJcblx0XHRzb0ZhciwgZ3JvdXBzLCBwcmVGaWx0ZXJzLFxyXG5cdFx0Y2FjaGVkID0gdG9rZW5DYWNoZVsgc2VsZWN0b3IgKyBcIiBcIiBdO1xyXG5cclxuXHRpZiAoIGNhY2hlZCApIHtcclxuXHRcdHJldHVybiBwYXJzZU9ubHkgPyAwIDogY2FjaGVkLnNsaWNlKCAwICk7XHJcblx0fVxyXG5cclxuXHRzb0ZhciA9IHNlbGVjdG9yO1xyXG5cdGdyb3VwcyA9IFtdO1xyXG5cdHByZUZpbHRlcnMgPSBFeHByLnByZUZpbHRlcjtcclxuXHJcblx0d2hpbGUgKCBzb0ZhciApIHtcclxuXHJcblx0XHQvLyBDb21tYSBhbmQgZmlyc3QgcnVuXHJcblx0XHRpZiAoICFtYXRjaGVkIHx8IChtYXRjaCA9IHJjb21tYS5leGVjKCBzb0ZhciApKSApIHtcclxuXHRcdFx0aWYgKCBtYXRjaCApIHtcclxuXHRcdFx0XHQvLyBEb24ndCBjb25zdW1lIHRyYWlsaW5nIGNvbW1hcyBhcyB2YWxpZFxyXG5cdFx0XHRcdHNvRmFyID0gc29GYXIuc2xpY2UoIG1hdGNoWzBdLmxlbmd0aCApIHx8IHNvRmFyO1xyXG5cdFx0XHR9XHJcblx0XHRcdGdyb3Vwcy5wdXNoKCAodG9rZW5zID0gW10pICk7XHJcblx0XHR9XHJcblxyXG5cdFx0bWF0Y2hlZCA9IGZhbHNlO1xyXG5cclxuXHRcdC8vIENvbWJpbmF0b3JzXHJcblx0XHRpZiAoIChtYXRjaCA9IHJjb21iaW5hdG9ycy5leGVjKCBzb0ZhciApKSApIHtcclxuXHRcdFx0bWF0Y2hlZCA9IG1hdGNoLnNoaWZ0KCk7XHJcblx0XHRcdHRva2Vucy5wdXNoKHtcclxuXHRcdFx0XHR2YWx1ZTogbWF0Y2hlZCxcclxuXHRcdFx0XHQvLyBDYXN0IGRlc2NlbmRhbnQgY29tYmluYXRvcnMgdG8gc3BhY2VcclxuXHRcdFx0XHR0eXBlOiBtYXRjaFswXS5yZXBsYWNlKCBydHJpbSwgXCIgXCIgKVxyXG5cdFx0XHR9KTtcclxuXHRcdFx0c29GYXIgPSBzb0Zhci5zbGljZSggbWF0Y2hlZC5sZW5ndGggKTtcclxuXHRcdH1cclxuXHJcblx0XHQvLyBGaWx0ZXJzXHJcblx0XHRmb3IgKCB0eXBlIGluIEV4cHIuZmlsdGVyICkge1xyXG5cdFx0XHRpZiAoIChtYXRjaCA9IG1hdGNoRXhwclsgdHlwZSBdLmV4ZWMoIHNvRmFyICkpICYmICghcHJlRmlsdGVyc1sgdHlwZSBdIHx8XHJcblx0XHRcdFx0KG1hdGNoID0gcHJlRmlsdGVyc1sgdHlwZSBdKCBtYXRjaCApKSkgKSB7XHJcblx0XHRcdFx0bWF0Y2hlZCA9IG1hdGNoLnNoaWZ0KCk7XHJcblx0XHRcdFx0dG9rZW5zLnB1c2goe1xyXG5cdFx0XHRcdFx0dmFsdWU6IG1hdGNoZWQsXHJcblx0XHRcdFx0XHR0eXBlOiB0eXBlLFxyXG5cdFx0XHRcdFx0bWF0Y2hlczogbWF0Y2hcclxuXHRcdFx0XHR9KTtcclxuXHRcdFx0XHRzb0ZhciA9IHNvRmFyLnNsaWNlKCBtYXRjaGVkLmxlbmd0aCApO1xyXG5cdFx0XHR9XHJcblx0XHR9XHJcblxyXG5cdFx0aWYgKCAhbWF0Y2hlZCApIHtcclxuXHRcdFx0YnJlYWs7XHJcblx0XHR9XHJcblx0fVxyXG5cclxuXHQvLyBSZXR1cm4gdGhlIGxlbmd0aCBvZiB0aGUgaW52YWxpZCBleGNlc3NcclxuXHQvLyBpZiB3ZSdyZSBqdXN0IHBhcnNpbmdcclxuXHQvLyBPdGhlcndpc2UsIHRocm93IGFuIGVycm9yIG9yIHJldHVybiB0b2tlbnNcclxuXHRyZXR1cm4gcGFyc2VPbmx5ID9cclxuXHRcdHNvRmFyLmxlbmd0aCA6XHJcblx0XHRzb0ZhciA/XHJcblx0XHRcdFNpenpsZS5lcnJvciggc2VsZWN0b3IgKSA6XHJcblx0XHRcdC8vIENhY2hlIHRoZSB0b2tlbnNcclxuXHRcdFx0dG9rZW5DYWNoZSggc2VsZWN0b3IsIGdyb3VwcyApLnNsaWNlKCAwICk7XHJcbn07XHJcblxyXG5mdW5jdGlvbiB0b1NlbGVjdG9yKCB0b2tlbnMgKSB7XHJcblx0dmFyIGkgPSAwLFxyXG5cdFx0bGVuID0gdG9rZW5zLmxlbmd0aCxcclxuXHRcdHNlbGVjdG9yID0gXCJcIjtcclxuXHRmb3IgKCA7IGkgPCBsZW47IGkrKyApIHtcclxuXHRcdHNlbGVjdG9yICs9IHRva2Vuc1tpXS52YWx1ZTtcclxuXHR9XHJcblx0cmV0dXJuIHNlbGVjdG9yO1xyXG59XHJcblxyXG5mdW5jdGlvbiBhZGRDb21iaW5hdG9yKCBtYXRjaGVyLCBjb21iaW5hdG9yLCBiYXNlICkge1xyXG5cdHZhciBkaXIgPSBjb21iaW5hdG9yLmRpcixcclxuXHRcdGNoZWNrTm9uRWxlbWVudHMgPSBiYXNlICYmIGRpciA9PT0gXCJwYXJlbnROb2RlXCIsXHJcblx0XHRkb25lTmFtZSA9IGRvbmUrKztcclxuXHJcblx0cmV0dXJuIGNvbWJpbmF0b3IuZmlyc3QgP1xyXG5cdFx0Ly8gQ2hlY2sgYWdhaW5zdCBjbG9zZXN0IGFuY2VzdG9yL3ByZWNlZGluZyBlbGVtZW50XHJcblx0XHRmdW5jdGlvbiggZWxlbSwgY29udGV4dCwgeG1sICkge1xyXG5cdFx0XHR3aGlsZSAoIChlbGVtID0gZWxlbVsgZGlyIF0pICkge1xyXG5cdFx0XHRcdGlmICggZWxlbS5ub2RlVHlwZSA9PT0gMSB8fCBjaGVja05vbkVsZW1lbnRzICkge1xyXG5cdFx0XHRcdFx0cmV0dXJuIG1hdGNoZXIoIGVsZW0sIGNvbnRleHQsIHhtbCApO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0fVxyXG5cdFx0fSA6XHJcblxyXG5cdFx0Ly8gQ2hlY2sgYWdhaW5zdCBhbGwgYW5jZXN0b3IvcHJlY2VkaW5nIGVsZW1lbnRzXHJcblx0XHRmdW5jdGlvbiggZWxlbSwgY29udGV4dCwgeG1sICkge1xyXG5cdFx0XHR2YXIgb2xkQ2FjaGUsIHVuaXF1ZUNhY2hlLCBvdXRlckNhY2hlLFxyXG5cdFx0XHRcdG5ld0NhY2hlID0gWyBkaXJydW5zLCBkb25lTmFtZSBdO1xyXG5cclxuXHRcdFx0Ly8gV2UgY2FuJ3Qgc2V0IGFyYml0cmFyeSBkYXRhIG9uIFhNTCBub2Rlcywgc28gdGhleSBkb24ndCBiZW5lZml0IGZyb20gY29tYmluYXRvciBjYWNoaW5nXHJcblx0XHRcdGlmICggeG1sICkge1xyXG5cdFx0XHRcdHdoaWxlICggKGVsZW0gPSBlbGVtWyBkaXIgXSkgKSB7XHJcblx0XHRcdFx0XHRpZiAoIGVsZW0ubm9kZVR5cGUgPT09IDEgfHwgY2hlY2tOb25FbGVtZW50cyApIHtcclxuXHRcdFx0XHRcdFx0aWYgKCBtYXRjaGVyKCBlbGVtLCBjb250ZXh0LCB4bWwgKSApIHtcclxuXHRcdFx0XHRcdFx0XHRyZXR1cm4gdHJ1ZTtcclxuXHRcdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0fVxyXG5cdFx0XHRcdH1cclxuXHRcdFx0fSBlbHNlIHtcclxuXHRcdFx0XHR3aGlsZSAoIChlbGVtID0gZWxlbVsgZGlyIF0pICkge1xyXG5cdFx0XHRcdFx0aWYgKCBlbGVtLm5vZGVUeXBlID09PSAxIHx8IGNoZWNrTm9uRWxlbWVudHMgKSB7XHJcblx0XHRcdFx0XHRcdG91dGVyQ2FjaGUgPSBlbGVtWyBleHBhbmRvIF0gfHwgKGVsZW1bIGV4cGFuZG8gXSA9IHt9KTtcclxuXHJcblx0XHRcdFx0XHRcdC8vIFN1cHBvcnQ6IElFIDw5IG9ubHlcclxuXHRcdFx0XHRcdFx0Ly8gRGVmZW5kIGFnYWluc3QgY2xvbmVkIGF0dHJvcGVydGllcyAoalF1ZXJ5IGdoLTE3MDkpXHJcblx0XHRcdFx0XHRcdHVuaXF1ZUNhY2hlID0gb3V0ZXJDYWNoZVsgZWxlbS51bmlxdWVJRCBdIHx8IChvdXRlckNhY2hlWyBlbGVtLnVuaXF1ZUlEIF0gPSB7fSk7XHJcblxyXG5cdFx0XHRcdFx0XHRpZiAoIChvbGRDYWNoZSA9IHVuaXF1ZUNhY2hlWyBkaXIgXSkgJiZcclxuXHRcdFx0XHRcdFx0XHRvbGRDYWNoZVsgMCBdID09PSBkaXJydW5zICYmIG9sZENhY2hlWyAxIF0gPT09IGRvbmVOYW1lICkge1xyXG5cclxuXHRcdFx0XHRcdFx0XHQvLyBBc3NpZ24gdG8gbmV3Q2FjaGUgc28gcmVzdWx0cyBiYWNrLXByb3BhZ2F0ZSB0byBwcmV2aW91cyBlbGVtZW50c1xyXG5cdFx0XHRcdFx0XHRcdHJldHVybiAobmV3Q2FjaGVbIDIgXSA9IG9sZENhY2hlWyAyIF0pO1xyXG5cdFx0XHRcdFx0XHR9IGVsc2Uge1xyXG5cdFx0XHRcdFx0XHRcdC8vIFJldXNlIG5ld2NhY2hlIHNvIHJlc3VsdHMgYmFjay1wcm9wYWdhdGUgdG8gcHJldmlvdXMgZWxlbWVudHNcclxuXHRcdFx0XHRcdFx0XHR1bmlxdWVDYWNoZVsgZGlyIF0gPSBuZXdDYWNoZTtcclxuXHJcblx0XHRcdFx0XHRcdFx0Ly8gQSBtYXRjaCBtZWFucyB3ZSdyZSBkb25lOyBhIGZhaWwgbWVhbnMgd2UgaGF2ZSB0byBrZWVwIGNoZWNraW5nXHJcblx0XHRcdFx0XHRcdFx0aWYgKCAobmV3Q2FjaGVbIDIgXSA9IG1hdGNoZXIoIGVsZW0sIGNvbnRleHQsIHhtbCApKSApIHtcclxuXHRcdFx0XHRcdFx0XHRcdHJldHVybiB0cnVlO1xyXG5cdFx0XHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0fVxyXG5cdFx0XHRcdH1cclxuXHRcdFx0fVxyXG5cdFx0fTtcclxufVxyXG5cclxuZnVuY3Rpb24gZWxlbWVudE1hdGNoZXIoIG1hdGNoZXJzICkge1xyXG5cdHJldHVybiBtYXRjaGVycy5sZW5ndGggPiAxID9cclxuXHRcdGZ1bmN0aW9uKCBlbGVtLCBjb250ZXh0LCB4bWwgKSB7XHJcblx0XHRcdHZhciBpID0gbWF0Y2hlcnMubGVuZ3RoO1xyXG5cdFx0XHR3aGlsZSAoIGktLSApIHtcclxuXHRcdFx0XHRpZiAoICFtYXRjaGVyc1tpXSggZWxlbSwgY29udGV4dCwgeG1sICkgKSB7XHJcblx0XHRcdFx0XHRyZXR1cm4gZmFsc2U7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9XHJcblx0XHRcdHJldHVybiB0cnVlO1xyXG5cdFx0fSA6XHJcblx0XHRtYXRjaGVyc1swXTtcclxufVxyXG5cclxuZnVuY3Rpb24gbXVsdGlwbGVDb250ZXh0cyggc2VsZWN0b3IsIGNvbnRleHRzLCByZXN1bHRzICkge1xyXG5cdHZhciBpID0gMCxcclxuXHRcdGxlbiA9IGNvbnRleHRzLmxlbmd0aDtcclxuXHRmb3IgKCA7IGkgPCBsZW47IGkrKyApIHtcclxuXHRcdFNpenpsZSggc2VsZWN0b3IsIGNvbnRleHRzW2ldLCByZXN1bHRzICk7XHJcblx0fVxyXG5cdHJldHVybiByZXN1bHRzO1xyXG59XHJcblxyXG5mdW5jdGlvbiBjb25kZW5zZSggdW5tYXRjaGVkLCBtYXAsIGZpbHRlciwgY29udGV4dCwgeG1sICkge1xyXG5cdHZhciBlbGVtLFxyXG5cdFx0bmV3VW5tYXRjaGVkID0gW10sXHJcblx0XHRpID0gMCxcclxuXHRcdGxlbiA9IHVubWF0Y2hlZC5sZW5ndGgsXHJcblx0XHRtYXBwZWQgPSBtYXAgIT0gbnVsbDtcclxuXHJcblx0Zm9yICggOyBpIDwgbGVuOyBpKysgKSB7XHJcblx0XHRpZiAoIChlbGVtID0gdW5tYXRjaGVkW2ldKSApIHtcclxuXHRcdFx0aWYgKCAhZmlsdGVyIHx8IGZpbHRlciggZWxlbSwgY29udGV4dCwgeG1sICkgKSB7XHJcblx0XHRcdFx0bmV3VW5tYXRjaGVkLnB1c2goIGVsZW0gKTtcclxuXHRcdFx0XHRpZiAoIG1hcHBlZCApIHtcclxuXHRcdFx0XHRcdG1hcC5wdXNoKCBpICk7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9XHJcblx0XHR9XHJcblx0fVxyXG5cclxuXHRyZXR1cm4gbmV3VW5tYXRjaGVkO1xyXG59XHJcblxyXG5mdW5jdGlvbiBzZXRNYXRjaGVyKCBwcmVGaWx0ZXIsIHNlbGVjdG9yLCBtYXRjaGVyLCBwb3N0RmlsdGVyLCBwb3N0RmluZGVyLCBwb3N0U2VsZWN0b3IgKSB7XHJcblx0aWYgKCBwb3N0RmlsdGVyICYmICFwb3N0RmlsdGVyWyBleHBhbmRvIF0gKSB7XHJcblx0XHRwb3N0RmlsdGVyID0gc2V0TWF0Y2hlciggcG9zdEZpbHRlciApO1xyXG5cdH1cclxuXHRpZiAoIHBvc3RGaW5kZXIgJiYgIXBvc3RGaW5kZXJbIGV4cGFuZG8gXSApIHtcclxuXHRcdHBvc3RGaW5kZXIgPSBzZXRNYXRjaGVyKCBwb3N0RmluZGVyLCBwb3N0U2VsZWN0b3IgKTtcclxuXHR9XHJcblx0cmV0dXJuIG1hcmtGdW5jdGlvbihmdW5jdGlvbiggc2VlZCwgcmVzdWx0cywgY29udGV4dCwgeG1sICkge1xyXG5cdFx0dmFyIHRlbXAsIGksIGVsZW0sXHJcblx0XHRcdHByZU1hcCA9IFtdLFxyXG5cdFx0XHRwb3N0TWFwID0gW10sXHJcblx0XHRcdHByZWV4aXN0aW5nID0gcmVzdWx0cy5sZW5ndGgsXHJcblxyXG5cdFx0XHQvLyBHZXQgaW5pdGlhbCBlbGVtZW50cyBmcm9tIHNlZWQgb3IgY29udGV4dFxyXG5cdFx0XHRlbGVtcyA9IHNlZWQgfHwgbXVsdGlwbGVDb250ZXh0cyggc2VsZWN0b3IgfHwgXCIqXCIsIGNvbnRleHQubm9kZVR5cGUgPyBbIGNvbnRleHQgXSA6IGNvbnRleHQsIFtdICksXHJcblxyXG5cdFx0XHQvLyBQcmVmaWx0ZXIgdG8gZ2V0IG1hdGNoZXIgaW5wdXQsIHByZXNlcnZpbmcgYSBtYXAgZm9yIHNlZWQtcmVzdWx0cyBzeW5jaHJvbml6YXRpb25cclxuXHRcdFx0bWF0Y2hlckluID0gcHJlRmlsdGVyICYmICggc2VlZCB8fCAhc2VsZWN0b3IgKSA/XHJcblx0XHRcdFx0Y29uZGVuc2UoIGVsZW1zLCBwcmVNYXAsIHByZUZpbHRlciwgY29udGV4dCwgeG1sICkgOlxyXG5cdFx0XHRcdGVsZW1zLFxyXG5cclxuXHRcdFx0bWF0Y2hlck91dCA9IG1hdGNoZXIgP1xyXG5cdFx0XHRcdC8vIElmIHdlIGhhdmUgYSBwb3N0RmluZGVyLCBvciBmaWx0ZXJlZCBzZWVkLCBvciBub24tc2VlZCBwb3N0RmlsdGVyIG9yIHByZWV4aXN0aW5nIHJlc3VsdHMsXHJcblx0XHRcdFx0cG9zdEZpbmRlciB8fCAoIHNlZWQgPyBwcmVGaWx0ZXIgOiBwcmVleGlzdGluZyB8fCBwb3N0RmlsdGVyICkgP1xyXG5cclxuXHRcdFx0XHRcdC8vIC4uLmludGVybWVkaWF0ZSBwcm9jZXNzaW5nIGlzIG5lY2Vzc2FyeVxyXG5cdFx0XHRcdFx0W10gOlxyXG5cclxuXHRcdFx0XHRcdC8vIC4uLm90aGVyd2lzZSB1c2UgcmVzdWx0cyBkaXJlY3RseVxyXG5cdFx0XHRcdFx0cmVzdWx0cyA6XHJcblx0XHRcdFx0bWF0Y2hlckluO1xyXG5cclxuXHRcdC8vIEZpbmQgcHJpbWFyeSBtYXRjaGVzXHJcblx0XHRpZiAoIG1hdGNoZXIgKSB7XHJcblx0XHRcdG1hdGNoZXIoIG1hdGNoZXJJbiwgbWF0Y2hlck91dCwgY29udGV4dCwgeG1sICk7XHJcblx0XHR9XHJcblxyXG5cdFx0Ly8gQXBwbHkgcG9zdEZpbHRlclxyXG5cdFx0aWYgKCBwb3N0RmlsdGVyICkge1xyXG5cdFx0XHR0ZW1wID0gY29uZGVuc2UoIG1hdGNoZXJPdXQsIHBvc3RNYXAgKTtcclxuXHRcdFx0cG9zdEZpbHRlciggdGVtcCwgW10sIGNvbnRleHQsIHhtbCApO1xyXG5cclxuXHRcdFx0Ly8gVW4tbWF0Y2ggZmFpbGluZyBlbGVtZW50cyBieSBtb3ZpbmcgdGhlbSBiYWNrIHRvIG1hdGNoZXJJblxyXG5cdFx0XHRpID0gdGVtcC5sZW5ndGg7XHJcblx0XHRcdHdoaWxlICggaS0tICkge1xyXG5cdFx0XHRcdGlmICggKGVsZW0gPSB0ZW1wW2ldKSApIHtcclxuXHRcdFx0XHRcdG1hdGNoZXJPdXRbIHBvc3RNYXBbaV0gXSA9ICEobWF0Y2hlckluWyBwb3N0TWFwW2ldIF0gPSBlbGVtKTtcclxuXHRcdFx0XHR9XHJcblx0XHRcdH1cclxuXHRcdH1cclxuXHJcblx0XHRpZiAoIHNlZWQgKSB7XHJcblx0XHRcdGlmICggcG9zdEZpbmRlciB8fCBwcmVGaWx0ZXIgKSB7XHJcblx0XHRcdFx0aWYgKCBwb3N0RmluZGVyICkge1xyXG5cdFx0XHRcdFx0Ly8gR2V0IHRoZSBmaW5hbCBtYXRjaGVyT3V0IGJ5IGNvbmRlbnNpbmcgdGhpcyBpbnRlcm1lZGlhdGUgaW50byBwb3N0RmluZGVyIGNvbnRleHRzXHJcblx0XHRcdFx0XHR0ZW1wID0gW107XHJcblx0XHRcdFx0XHRpID0gbWF0Y2hlck91dC5sZW5ndGg7XHJcblx0XHRcdFx0XHR3aGlsZSAoIGktLSApIHtcclxuXHRcdFx0XHRcdFx0aWYgKCAoZWxlbSA9IG1hdGNoZXJPdXRbaV0pICkge1xyXG5cdFx0XHRcdFx0XHRcdC8vIFJlc3RvcmUgbWF0Y2hlckluIHNpbmNlIGVsZW0gaXMgbm90IHlldCBhIGZpbmFsIG1hdGNoXHJcblx0XHRcdFx0XHRcdFx0dGVtcC5wdXNoKCAobWF0Y2hlckluW2ldID0gZWxlbSkgKTtcclxuXHRcdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0cG9zdEZpbmRlciggbnVsbCwgKG1hdGNoZXJPdXQgPSBbXSksIHRlbXAsIHhtbCApO1xyXG5cdFx0XHRcdH1cclxuXHJcblx0XHRcdFx0Ly8gTW92ZSBtYXRjaGVkIGVsZW1lbnRzIGZyb20gc2VlZCB0byByZXN1bHRzIHRvIGtlZXAgdGhlbSBzeW5jaHJvbml6ZWRcclxuXHRcdFx0XHRpID0gbWF0Y2hlck91dC5sZW5ndGg7XHJcblx0XHRcdFx0d2hpbGUgKCBpLS0gKSB7XHJcblx0XHRcdFx0XHRpZiAoIChlbGVtID0gbWF0Y2hlck91dFtpXSkgJiZcclxuXHRcdFx0XHRcdFx0KHRlbXAgPSBwb3N0RmluZGVyID8gaW5kZXhPZiggc2VlZCwgZWxlbSApIDogcHJlTWFwW2ldKSA+IC0xICkge1xyXG5cclxuXHRcdFx0XHRcdFx0c2VlZFt0ZW1wXSA9ICEocmVzdWx0c1t0ZW1wXSA9IGVsZW0pO1xyXG5cdFx0XHRcdFx0fVxyXG5cdFx0XHRcdH1cclxuXHRcdFx0fVxyXG5cclxuXHRcdC8vIEFkZCBlbGVtZW50cyB0byByZXN1bHRzLCB0aHJvdWdoIHBvc3RGaW5kZXIgaWYgZGVmaW5lZFxyXG5cdFx0fSBlbHNlIHtcclxuXHRcdFx0bWF0Y2hlck91dCA9IGNvbmRlbnNlKFxyXG5cdFx0XHRcdG1hdGNoZXJPdXQgPT09IHJlc3VsdHMgP1xyXG5cdFx0XHRcdFx0bWF0Y2hlck91dC5zcGxpY2UoIHByZWV4aXN0aW5nLCBtYXRjaGVyT3V0Lmxlbmd0aCApIDpcclxuXHRcdFx0XHRcdG1hdGNoZXJPdXRcclxuXHRcdFx0KTtcclxuXHRcdFx0aWYgKCBwb3N0RmluZGVyICkge1xyXG5cdFx0XHRcdHBvc3RGaW5kZXIoIG51bGwsIHJlc3VsdHMsIG1hdGNoZXJPdXQsIHhtbCApO1xyXG5cdFx0XHR9IGVsc2Uge1xyXG5cdFx0XHRcdHB1c2guYXBwbHkoIHJlc3VsdHMsIG1hdGNoZXJPdXQgKTtcclxuXHRcdFx0fVxyXG5cdFx0fVxyXG5cdH0pO1xyXG59XHJcblxyXG5mdW5jdGlvbiBtYXRjaGVyRnJvbVRva2VucyggdG9rZW5zICkge1xyXG5cdHZhciBjaGVja0NvbnRleHQsIG1hdGNoZXIsIGosXHJcblx0XHRsZW4gPSB0b2tlbnMubGVuZ3RoLFxyXG5cdFx0bGVhZGluZ1JlbGF0aXZlID0gRXhwci5yZWxhdGl2ZVsgdG9rZW5zWzBdLnR5cGUgXSxcclxuXHRcdGltcGxpY2l0UmVsYXRpdmUgPSBsZWFkaW5nUmVsYXRpdmUgfHwgRXhwci5yZWxhdGl2ZVtcIiBcIl0sXHJcblx0XHRpID0gbGVhZGluZ1JlbGF0aXZlID8gMSA6IDAsXHJcblxyXG5cdFx0Ly8gVGhlIGZvdW5kYXRpb25hbCBtYXRjaGVyIGVuc3VyZXMgdGhhdCBlbGVtZW50cyBhcmUgcmVhY2hhYmxlIGZyb20gdG9wLWxldmVsIGNvbnRleHQocylcclxuXHRcdG1hdGNoQ29udGV4dCA9IGFkZENvbWJpbmF0b3IoIGZ1bmN0aW9uKCBlbGVtICkge1xyXG5cdFx0XHRyZXR1cm4gZWxlbSA9PT0gY2hlY2tDb250ZXh0O1xyXG5cdFx0fSwgaW1wbGljaXRSZWxhdGl2ZSwgdHJ1ZSApLFxyXG5cdFx0bWF0Y2hBbnlDb250ZXh0ID0gYWRkQ29tYmluYXRvciggZnVuY3Rpb24oIGVsZW0gKSB7XHJcblx0XHRcdHJldHVybiBpbmRleE9mKCBjaGVja0NvbnRleHQsIGVsZW0gKSA+IC0xO1xyXG5cdFx0fSwgaW1wbGljaXRSZWxhdGl2ZSwgdHJ1ZSApLFxyXG5cdFx0bWF0Y2hlcnMgPSBbIGZ1bmN0aW9uKCBlbGVtLCBjb250ZXh0LCB4bWwgKSB7XHJcblx0XHRcdHZhciByZXQgPSAoICFsZWFkaW5nUmVsYXRpdmUgJiYgKCB4bWwgfHwgY29udGV4dCAhPT0gb3V0ZXJtb3N0Q29udGV4dCApICkgfHwgKFxyXG5cdFx0XHRcdChjaGVja0NvbnRleHQgPSBjb250ZXh0KS5ub2RlVHlwZSA/XHJcblx0XHRcdFx0XHRtYXRjaENvbnRleHQoIGVsZW0sIGNvbnRleHQsIHhtbCApIDpcclxuXHRcdFx0XHRcdG1hdGNoQW55Q29udGV4dCggZWxlbSwgY29udGV4dCwgeG1sICkgKTtcclxuXHRcdFx0Ly8gQXZvaWQgaGFuZ2luZyBvbnRvIGVsZW1lbnQgKGlzc3VlICMyOTkpXHJcblx0XHRcdGNoZWNrQ29udGV4dCA9IG51bGw7XHJcblx0XHRcdHJldHVybiByZXQ7XHJcblx0XHR9IF07XHJcblxyXG5cdGZvciAoIDsgaSA8IGxlbjsgaSsrICkge1xyXG5cdFx0aWYgKCAobWF0Y2hlciA9IEV4cHIucmVsYXRpdmVbIHRva2Vuc1tpXS50eXBlIF0pICkge1xyXG5cdFx0XHRtYXRjaGVycyA9IFsgYWRkQ29tYmluYXRvcihlbGVtZW50TWF0Y2hlciggbWF0Y2hlcnMgKSwgbWF0Y2hlcikgXTtcclxuXHRcdH0gZWxzZSB7XHJcblx0XHRcdG1hdGNoZXIgPSBFeHByLmZpbHRlclsgdG9rZW5zW2ldLnR5cGUgXS5hcHBseSggbnVsbCwgdG9rZW5zW2ldLm1hdGNoZXMgKTtcclxuXHJcblx0XHRcdC8vIFJldHVybiBzcGVjaWFsIHVwb24gc2VlaW5nIGEgcG9zaXRpb25hbCBtYXRjaGVyXHJcblx0XHRcdGlmICggbWF0Y2hlclsgZXhwYW5kbyBdICkge1xyXG5cdFx0XHRcdC8vIEZpbmQgdGhlIG5leHQgcmVsYXRpdmUgb3BlcmF0b3IgKGlmIGFueSkgZm9yIHByb3BlciBoYW5kbGluZ1xyXG5cdFx0XHRcdGogPSArK2k7XHJcblx0XHRcdFx0Zm9yICggOyBqIDwgbGVuOyBqKysgKSB7XHJcblx0XHRcdFx0XHRpZiAoIEV4cHIucmVsYXRpdmVbIHRva2Vuc1tqXS50eXBlIF0gKSB7XHJcblx0XHRcdFx0XHRcdGJyZWFrO1xyXG5cdFx0XHRcdFx0fVxyXG5cdFx0XHRcdH1cclxuXHRcdFx0XHRyZXR1cm4gc2V0TWF0Y2hlcihcclxuXHRcdFx0XHRcdGkgPiAxICYmIGVsZW1lbnRNYXRjaGVyKCBtYXRjaGVycyApLFxyXG5cdFx0XHRcdFx0aSA+IDEgJiYgdG9TZWxlY3RvcihcclxuXHRcdFx0XHRcdFx0Ly8gSWYgdGhlIHByZWNlZGluZyB0b2tlbiB3YXMgYSBkZXNjZW5kYW50IGNvbWJpbmF0b3IsIGluc2VydCBhbiBpbXBsaWNpdCBhbnktZWxlbWVudCBgKmBcclxuXHRcdFx0XHRcdFx0dG9rZW5zLnNsaWNlKCAwLCBpIC0gMSApLmNvbmNhdCh7IHZhbHVlOiB0b2tlbnNbIGkgLSAyIF0udHlwZSA9PT0gXCIgXCIgPyBcIipcIiA6IFwiXCIgfSlcclxuXHRcdFx0XHRcdCkucmVwbGFjZSggcnRyaW0sIFwiJDFcIiApLFxyXG5cdFx0XHRcdFx0bWF0Y2hlcixcclxuXHRcdFx0XHRcdGkgPCBqICYmIG1hdGNoZXJGcm9tVG9rZW5zKCB0b2tlbnMuc2xpY2UoIGksIGogKSApLFxyXG5cdFx0XHRcdFx0aiA8IGxlbiAmJiBtYXRjaGVyRnJvbVRva2VucyggKHRva2VucyA9IHRva2Vucy5zbGljZSggaiApKSApLFxyXG5cdFx0XHRcdFx0aiA8IGxlbiAmJiB0b1NlbGVjdG9yKCB0b2tlbnMgKVxyXG5cdFx0XHRcdCk7XHJcblx0XHRcdH1cclxuXHRcdFx0bWF0Y2hlcnMucHVzaCggbWF0Y2hlciApO1xyXG5cdFx0fVxyXG5cdH1cclxuXHJcblx0cmV0dXJuIGVsZW1lbnRNYXRjaGVyKCBtYXRjaGVycyApO1xyXG59XHJcblxyXG5mdW5jdGlvbiBtYXRjaGVyRnJvbUdyb3VwTWF0Y2hlcnMoIGVsZW1lbnRNYXRjaGVycywgc2V0TWF0Y2hlcnMgKSB7XHJcblx0dmFyIGJ5U2V0ID0gc2V0TWF0Y2hlcnMubGVuZ3RoID4gMCxcclxuXHRcdGJ5RWxlbWVudCA9IGVsZW1lbnRNYXRjaGVycy5sZW5ndGggPiAwLFxyXG5cdFx0c3VwZXJNYXRjaGVyID0gZnVuY3Rpb24oIHNlZWQsIGNvbnRleHQsIHhtbCwgcmVzdWx0cywgb3V0ZXJtb3N0ICkge1xyXG5cdFx0XHR2YXIgZWxlbSwgaiwgbWF0Y2hlcixcclxuXHRcdFx0XHRtYXRjaGVkQ291bnQgPSAwLFxyXG5cdFx0XHRcdGkgPSBcIjBcIixcclxuXHRcdFx0XHR1bm1hdGNoZWQgPSBzZWVkICYmIFtdLFxyXG5cdFx0XHRcdHNldE1hdGNoZWQgPSBbXSxcclxuXHRcdFx0XHRjb250ZXh0QmFja3VwID0gb3V0ZXJtb3N0Q29udGV4dCxcclxuXHRcdFx0XHQvLyBXZSBtdXN0IGFsd2F5cyBoYXZlIGVpdGhlciBzZWVkIGVsZW1lbnRzIG9yIG91dGVybW9zdCBjb250ZXh0XHJcblx0XHRcdFx0ZWxlbXMgPSBzZWVkIHx8IGJ5RWxlbWVudCAmJiBFeHByLmZpbmRbXCJUQUdcIl0oIFwiKlwiLCBvdXRlcm1vc3QgKSxcclxuXHRcdFx0XHQvLyBVc2UgaW50ZWdlciBkaXJydW5zIGlmZiB0aGlzIGlzIHRoZSBvdXRlcm1vc3QgbWF0Y2hlclxyXG5cdFx0XHRcdGRpcnJ1bnNVbmlxdWUgPSAoZGlycnVucyArPSBjb250ZXh0QmFja3VwID09IG51bGwgPyAxIDogTWF0aC5yYW5kb20oKSB8fCAwLjEpLFxyXG5cdFx0XHRcdGxlbiA9IGVsZW1zLmxlbmd0aDtcclxuXHJcblx0XHRcdGlmICggb3V0ZXJtb3N0ICkge1xyXG5cdFx0XHRcdG91dGVybW9zdENvbnRleHQgPSBjb250ZXh0ID09PSBkb2N1bWVudCB8fCBjb250ZXh0IHx8IG91dGVybW9zdDtcclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0Ly8gQWRkIGVsZW1lbnRzIHBhc3NpbmcgZWxlbWVudE1hdGNoZXJzIGRpcmVjdGx5IHRvIHJlc3VsdHNcclxuXHRcdFx0Ly8gU3VwcG9ydDogSUU8OSwgU2FmYXJpXHJcblx0XHRcdC8vIFRvbGVyYXRlIE5vZGVMaXN0IHByb3BlcnRpZXMgKElFOiBcImxlbmd0aFwiOyBTYWZhcmk6IDxudW1iZXI+KSBtYXRjaGluZyBlbGVtZW50cyBieSBpZFxyXG5cdFx0XHRmb3IgKCA7IGkgIT09IGxlbiAmJiAoZWxlbSA9IGVsZW1zW2ldKSAhPSBudWxsOyBpKysgKSB7XHJcblx0XHRcdFx0aWYgKCBieUVsZW1lbnQgJiYgZWxlbSApIHtcclxuXHRcdFx0XHRcdGogPSAwO1xyXG5cdFx0XHRcdFx0aWYgKCAhY29udGV4dCAmJiBlbGVtLm93bmVyRG9jdW1lbnQgIT09IGRvY3VtZW50ICkge1xyXG5cdFx0XHRcdFx0XHRzZXREb2N1bWVudCggZWxlbSApO1xyXG5cdFx0XHRcdFx0XHR4bWwgPSAhZG9jdW1lbnRJc0hUTUw7XHJcblx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHR3aGlsZSAoIChtYXRjaGVyID0gZWxlbWVudE1hdGNoZXJzW2orK10pICkge1xyXG5cdFx0XHRcdFx0XHRpZiAoIG1hdGNoZXIoIGVsZW0sIGNvbnRleHQgfHwgZG9jdW1lbnQsIHhtbCkgKSB7XHJcblx0XHRcdFx0XHRcdFx0cmVzdWx0cy5wdXNoKCBlbGVtICk7XHJcblx0XHRcdFx0XHRcdFx0YnJlYWs7XHJcblx0XHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdGlmICggb3V0ZXJtb3N0ICkge1xyXG5cdFx0XHRcdFx0XHRkaXJydW5zID0gZGlycnVuc1VuaXF1ZTtcclxuXHRcdFx0XHRcdH1cclxuXHRcdFx0XHR9XHJcblxyXG5cdFx0XHRcdC8vIFRyYWNrIHVubWF0Y2hlZCBlbGVtZW50cyBmb3Igc2V0IGZpbHRlcnNcclxuXHRcdFx0XHRpZiAoIGJ5U2V0ICkge1xyXG5cdFx0XHRcdFx0Ly8gVGhleSB3aWxsIGhhdmUgZ29uZSB0aHJvdWdoIGFsbCBwb3NzaWJsZSBtYXRjaGVyc1xyXG5cdFx0XHRcdFx0aWYgKCAoZWxlbSA9ICFtYXRjaGVyICYmIGVsZW0pICkge1xyXG5cdFx0XHRcdFx0XHRtYXRjaGVkQ291bnQtLTtcclxuXHRcdFx0XHRcdH1cclxuXHJcblx0XHRcdFx0XHQvLyBMZW5ndGhlbiB0aGUgYXJyYXkgZm9yIGV2ZXJ5IGVsZW1lbnQsIG1hdGNoZWQgb3Igbm90XHJcblx0XHRcdFx0XHRpZiAoIHNlZWQgKSB7XHJcblx0XHRcdFx0XHRcdHVubWF0Y2hlZC5wdXNoKCBlbGVtICk7XHJcblx0XHRcdFx0XHR9XHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9XHJcblxyXG5cdFx0XHQvLyBgaWAgaXMgbm93IHRoZSBjb3VudCBvZiBlbGVtZW50cyB2aXNpdGVkIGFib3ZlLCBhbmQgYWRkaW5nIGl0IHRvIGBtYXRjaGVkQ291bnRgXHJcblx0XHRcdC8vIG1ha2VzIHRoZSBsYXR0ZXIgbm9ubmVnYXRpdmUuXHJcblx0XHRcdG1hdGNoZWRDb3VudCArPSBpO1xyXG5cclxuXHRcdFx0Ly8gQXBwbHkgc2V0IGZpbHRlcnMgdG8gdW5tYXRjaGVkIGVsZW1lbnRzXHJcblx0XHRcdC8vIE5PVEU6IFRoaXMgY2FuIGJlIHNraXBwZWQgaWYgdGhlcmUgYXJlIG5vIHVubWF0Y2hlZCBlbGVtZW50cyAoaS5lLiwgYG1hdGNoZWRDb3VudGBcclxuXHRcdFx0Ly8gZXF1YWxzIGBpYCksIHVubGVzcyB3ZSBkaWRuJ3QgdmlzaXQgX2FueV8gZWxlbWVudHMgaW4gdGhlIGFib3ZlIGxvb3AgYmVjYXVzZSB3ZSBoYXZlXHJcblx0XHRcdC8vIG5vIGVsZW1lbnQgbWF0Y2hlcnMgYW5kIG5vIHNlZWQuXHJcblx0XHRcdC8vIEluY3JlbWVudGluZyBhbiBpbml0aWFsbHktc3RyaW5nIFwiMFwiIGBpYCBhbGxvd3MgYGlgIHRvIHJlbWFpbiBhIHN0cmluZyBvbmx5IGluIHRoYXRcclxuXHRcdFx0Ly8gY2FzZSwgd2hpY2ggd2lsbCByZXN1bHQgaW4gYSBcIjAwXCIgYG1hdGNoZWRDb3VudGAgdGhhdCBkaWZmZXJzIGZyb20gYGlgIGJ1dCBpcyBhbHNvXHJcblx0XHRcdC8vIG51bWVyaWNhbGx5IHplcm8uXHJcblx0XHRcdGlmICggYnlTZXQgJiYgaSAhPT0gbWF0Y2hlZENvdW50ICkge1xyXG5cdFx0XHRcdGogPSAwO1xyXG5cdFx0XHRcdHdoaWxlICggKG1hdGNoZXIgPSBzZXRNYXRjaGVyc1tqKytdKSApIHtcclxuXHRcdFx0XHRcdG1hdGNoZXIoIHVubWF0Y2hlZCwgc2V0TWF0Y2hlZCwgY29udGV4dCwgeG1sICk7XHJcblx0XHRcdFx0fVxyXG5cclxuXHRcdFx0XHRpZiAoIHNlZWQgKSB7XHJcblx0XHRcdFx0XHQvLyBSZWludGVncmF0ZSBlbGVtZW50IG1hdGNoZXMgdG8gZWxpbWluYXRlIHRoZSBuZWVkIGZvciBzb3J0aW5nXHJcblx0XHRcdFx0XHRpZiAoIG1hdGNoZWRDb3VudCA+IDAgKSB7XHJcblx0XHRcdFx0XHRcdHdoaWxlICggaS0tICkge1xyXG5cdFx0XHRcdFx0XHRcdGlmICggISh1bm1hdGNoZWRbaV0gfHwgc2V0TWF0Y2hlZFtpXSkgKSB7XHJcblx0XHRcdFx0XHRcdFx0XHRzZXRNYXRjaGVkW2ldID0gcG9wLmNhbGwoIHJlc3VsdHMgKTtcclxuXHRcdFx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdH1cclxuXHJcblx0XHRcdFx0XHQvLyBEaXNjYXJkIGluZGV4IHBsYWNlaG9sZGVyIHZhbHVlcyB0byBnZXQgb25seSBhY3R1YWwgbWF0Y2hlc1xyXG5cdFx0XHRcdFx0c2V0TWF0Y2hlZCA9IGNvbmRlbnNlKCBzZXRNYXRjaGVkICk7XHJcblx0XHRcdFx0fVxyXG5cclxuXHRcdFx0XHQvLyBBZGQgbWF0Y2hlcyB0byByZXN1bHRzXHJcblx0XHRcdFx0cHVzaC5hcHBseSggcmVzdWx0cywgc2V0TWF0Y2hlZCApO1xyXG5cclxuXHRcdFx0XHQvLyBTZWVkbGVzcyBzZXQgbWF0Y2hlcyBzdWNjZWVkaW5nIG11bHRpcGxlIHN1Y2Nlc3NmdWwgbWF0Y2hlcnMgc3RpcHVsYXRlIHNvcnRpbmdcclxuXHRcdFx0XHRpZiAoIG91dGVybW9zdCAmJiAhc2VlZCAmJiBzZXRNYXRjaGVkLmxlbmd0aCA+IDAgJiZcclxuXHRcdFx0XHRcdCggbWF0Y2hlZENvdW50ICsgc2V0TWF0Y2hlcnMubGVuZ3RoICkgPiAxICkge1xyXG5cclxuXHRcdFx0XHRcdFNpenpsZS51bmlxdWVTb3J0KCByZXN1bHRzICk7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9XHJcblxyXG5cdFx0XHQvLyBPdmVycmlkZSBtYW5pcHVsYXRpb24gb2YgZ2xvYmFscyBieSBuZXN0ZWQgbWF0Y2hlcnNcclxuXHRcdFx0aWYgKCBvdXRlcm1vc3QgKSB7XHJcblx0XHRcdFx0ZGlycnVucyA9IGRpcnJ1bnNVbmlxdWU7XHJcblx0XHRcdFx0b3V0ZXJtb3N0Q29udGV4dCA9IGNvbnRleHRCYWNrdXA7XHJcblx0XHRcdH1cclxuXHJcblx0XHRcdHJldHVybiB1bm1hdGNoZWQ7XHJcblx0XHR9O1xyXG5cclxuXHRyZXR1cm4gYnlTZXQgP1xyXG5cdFx0bWFya0Z1bmN0aW9uKCBzdXBlck1hdGNoZXIgKSA6XHJcblx0XHRzdXBlck1hdGNoZXI7XHJcbn1cclxuXHJcbmNvbXBpbGUgPSBTaXp6bGUuY29tcGlsZSA9IGZ1bmN0aW9uKCBzZWxlY3RvciwgbWF0Y2ggLyogSW50ZXJuYWwgVXNlIE9ubHkgKi8gKSB7XHJcblx0dmFyIGksXHJcblx0XHRzZXRNYXRjaGVycyA9IFtdLFxyXG5cdFx0ZWxlbWVudE1hdGNoZXJzID0gW10sXHJcblx0XHRjYWNoZWQgPSBjb21waWxlckNhY2hlWyBzZWxlY3RvciArIFwiIFwiIF07XHJcblxyXG5cdGlmICggIWNhY2hlZCApIHtcclxuXHRcdC8vIEdlbmVyYXRlIGEgZnVuY3Rpb24gb2YgcmVjdXJzaXZlIGZ1bmN0aW9ucyB0aGF0IGNhbiBiZSB1c2VkIHRvIGNoZWNrIGVhY2ggZWxlbWVudFxyXG5cdFx0aWYgKCAhbWF0Y2ggKSB7XHJcblx0XHRcdG1hdGNoID0gdG9rZW5pemUoIHNlbGVjdG9yICk7XHJcblx0XHR9XHJcblx0XHRpID0gbWF0Y2gubGVuZ3RoO1xyXG5cdFx0d2hpbGUgKCBpLS0gKSB7XHJcblx0XHRcdGNhY2hlZCA9IG1hdGNoZXJGcm9tVG9rZW5zKCBtYXRjaFtpXSApO1xyXG5cdFx0XHRpZiAoIGNhY2hlZFsgZXhwYW5kbyBdICkge1xyXG5cdFx0XHRcdHNldE1hdGNoZXJzLnB1c2goIGNhY2hlZCApO1xyXG5cdFx0XHR9IGVsc2Uge1xyXG5cdFx0XHRcdGVsZW1lbnRNYXRjaGVycy5wdXNoKCBjYWNoZWQgKTtcclxuXHRcdFx0fVxyXG5cdFx0fVxyXG5cclxuXHRcdC8vIENhY2hlIHRoZSBjb21waWxlZCBmdW5jdGlvblxyXG5cdFx0Y2FjaGVkID0gY29tcGlsZXJDYWNoZSggc2VsZWN0b3IsIG1hdGNoZXJGcm9tR3JvdXBNYXRjaGVycyggZWxlbWVudE1hdGNoZXJzLCBzZXRNYXRjaGVycyApICk7XHJcblxyXG5cdFx0Ly8gU2F2ZSBzZWxlY3RvciBhbmQgdG9rZW5pemF0aW9uXHJcblx0XHRjYWNoZWQuc2VsZWN0b3IgPSBzZWxlY3RvcjtcclxuXHR9XHJcblx0cmV0dXJuIGNhY2hlZDtcclxufTtcclxuXHJcbi8qKlxyXG4gKiBBIGxvdy1sZXZlbCBzZWxlY3Rpb24gZnVuY3Rpb24gdGhhdCB3b3JrcyB3aXRoIFNpenpsZSdzIGNvbXBpbGVkXHJcbiAqICBzZWxlY3RvciBmdW5jdGlvbnNcclxuICogQHBhcmFtIHtTdHJpbmd8RnVuY3Rpb259IHNlbGVjdG9yIEEgc2VsZWN0b3Igb3IgYSBwcmUtY29tcGlsZWRcclxuICogIHNlbGVjdG9yIGZ1bmN0aW9uIGJ1aWx0IHdpdGggU2l6emxlLmNvbXBpbGVcclxuICogQHBhcmFtIHtFbGVtZW50fSBjb250ZXh0XHJcbiAqIEBwYXJhbSB7QXJyYXl9IFtyZXN1bHRzXVxyXG4gKiBAcGFyYW0ge0FycmF5fSBbc2VlZF0gQSBzZXQgb2YgZWxlbWVudHMgdG8gbWF0Y2ggYWdhaW5zdFxyXG4gKi9cclxuc2VsZWN0ID0gU2l6emxlLnNlbGVjdCA9IGZ1bmN0aW9uKCBzZWxlY3RvciwgY29udGV4dCwgcmVzdWx0cywgc2VlZCApIHtcclxuXHR2YXIgaSwgdG9rZW5zLCB0b2tlbiwgdHlwZSwgZmluZCxcclxuXHRcdGNvbXBpbGVkID0gdHlwZW9mIHNlbGVjdG9yID09PSBcImZ1bmN0aW9uXCIgJiYgc2VsZWN0b3IsXHJcblx0XHRtYXRjaCA9ICFzZWVkICYmIHRva2VuaXplKCAoc2VsZWN0b3IgPSBjb21waWxlZC5zZWxlY3RvciB8fCBzZWxlY3RvcikgKTtcclxuXHJcblx0cmVzdWx0cyA9IHJlc3VsdHMgfHwgW107XHJcblxyXG5cdC8vIFRyeSB0byBtaW5pbWl6ZSBvcGVyYXRpb25zIGlmIHRoZXJlIGlzIG9ubHkgb25lIHNlbGVjdG9yIGluIHRoZSBsaXN0IGFuZCBubyBzZWVkXHJcblx0Ly8gKHRoZSBsYXR0ZXIgb2Ygd2hpY2ggZ3VhcmFudGVlcyB1cyBjb250ZXh0KVxyXG5cdGlmICggbWF0Y2gubGVuZ3RoID09PSAxICkge1xyXG5cclxuXHRcdC8vIFJlZHVjZSBjb250ZXh0IGlmIHRoZSBsZWFkaW5nIGNvbXBvdW5kIHNlbGVjdG9yIGlzIGFuIElEXHJcblx0XHR0b2tlbnMgPSBtYXRjaFswXSA9IG1hdGNoWzBdLnNsaWNlKCAwICk7XHJcblx0XHRpZiAoIHRva2Vucy5sZW5ndGggPiAyICYmICh0b2tlbiA9IHRva2Vuc1swXSkudHlwZSA9PT0gXCJJRFwiICYmXHJcblx0XHRcdFx0c3VwcG9ydC5nZXRCeUlkICYmIGNvbnRleHQubm9kZVR5cGUgPT09IDkgJiYgZG9jdW1lbnRJc0hUTUwgJiZcclxuXHRcdFx0XHRFeHByLnJlbGF0aXZlWyB0b2tlbnNbMV0udHlwZSBdICkge1xyXG5cclxuXHRcdFx0Y29udGV4dCA9ICggRXhwci5maW5kW1wiSURcIl0oIHRva2VuLm1hdGNoZXNbMF0ucmVwbGFjZShydW5lc2NhcGUsIGZ1bmVzY2FwZSksIGNvbnRleHQgKSB8fCBbXSApWzBdO1xyXG5cdFx0XHRpZiAoICFjb250ZXh0ICkge1xyXG5cdFx0XHRcdHJldHVybiByZXN1bHRzO1xyXG5cclxuXHRcdFx0Ly8gUHJlY29tcGlsZWQgbWF0Y2hlcnMgd2lsbCBzdGlsbCB2ZXJpZnkgYW5jZXN0cnksIHNvIHN0ZXAgdXAgYSBsZXZlbFxyXG5cdFx0XHR9IGVsc2UgaWYgKCBjb21waWxlZCApIHtcclxuXHRcdFx0XHRjb250ZXh0ID0gY29udGV4dC5wYXJlbnROb2RlO1xyXG5cdFx0XHR9XHJcblxyXG5cdFx0XHRzZWxlY3RvciA9IHNlbGVjdG9yLnNsaWNlKCB0b2tlbnMuc2hpZnQoKS52YWx1ZS5sZW5ndGggKTtcclxuXHRcdH1cclxuXHJcblx0XHQvLyBGZXRjaCBhIHNlZWQgc2V0IGZvciByaWdodC10by1sZWZ0IG1hdGNoaW5nXHJcblx0XHRpID0gbWF0Y2hFeHByW1wibmVlZHNDb250ZXh0XCJdLnRlc3QoIHNlbGVjdG9yICkgPyAwIDogdG9rZW5zLmxlbmd0aDtcclxuXHRcdHdoaWxlICggaS0tICkge1xyXG5cdFx0XHR0b2tlbiA9IHRva2Vuc1tpXTtcclxuXHJcblx0XHRcdC8vIEFib3J0IGlmIHdlIGhpdCBhIGNvbWJpbmF0b3JcclxuXHRcdFx0aWYgKCBFeHByLnJlbGF0aXZlWyAodHlwZSA9IHRva2VuLnR5cGUpIF0gKSB7XHJcblx0XHRcdFx0YnJlYWs7XHJcblx0XHRcdH1cclxuXHRcdFx0aWYgKCAoZmluZCA9IEV4cHIuZmluZFsgdHlwZSBdKSApIHtcclxuXHRcdFx0XHQvLyBTZWFyY2gsIGV4cGFuZGluZyBjb250ZXh0IGZvciBsZWFkaW5nIHNpYmxpbmcgY29tYmluYXRvcnNcclxuXHRcdFx0XHRpZiAoIChzZWVkID0gZmluZChcclxuXHRcdFx0XHRcdHRva2VuLm1hdGNoZXNbMF0ucmVwbGFjZSggcnVuZXNjYXBlLCBmdW5lc2NhcGUgKSxcclxuXHRcdFx0XHRcdHJzaWJsaW5nLnRlc3QoIHRva2Vuc1swXS50eXBlICkgJiYgdGVzdENvbnRleHQoIGNvbnRleHQucGFyZW50Tm9kZSApIHx8IGNvbnRleHRcclxuXHRcdFx0XHQpKSApIHtcclxuXHJcblx0XHRcdFx0XHQvLyBJZiBzZWVkIGlzIGVtcHR5IG9yIG5vIHRva2VucyByZW1haW4sIHdlIGNhbiByZXR1cm4gZWFybHlcclxuXHRcdFx0XHRcdHRva2Vucy5zcGxpY2UoIGksIDEgKTtcclxuXHRcdFx0XHRcdHNlbGVjdG9yID0gc2VlZC5sZW5ndGggJiYgdG9TZWxlY3RvciggdG9rZW5zICk7XHJcblx0XHRcdFx0XHRpZiAoICFzZWxlY3RvciApIHtcclxuXHRcdFx0XHRcdFx0cHVzaC5hcHBseSggcmVzdWx0cywgc2VlZCApO1xyXG5cdFx0XHRcdFx0XHRyZXR1cm4gcmVzdWx0cztcclxuXHRcdFx0XHRcdH1cclxuXHJcblx0XHRcdFx0XHRicmVhaztcclxuXHRcdFx0XHR9XHJcblx0XHRcdH1cclxuXHRcdH1cclxuXHR9XHJcblxyXG5cdC8vIENvbXBpbGUgYW5kIGV4ZWN1dGUgYSBmaWx0ZXJpbmcgZnVuY3Rpb24gaWYgb25lIGlzIG5vdCBwcm92aWRlZFxyXG5cdC8vIFByb3ZpZGUgYG1hdGNoYCB0byBhdm9pZCByZXRva2VuaXphdGlvbiBpZiB3ZSBtb2RpZmllZCB0aGUgc2VsZWN0b3IgYWJvdmVcclxuXHQoIGNvbXBpbGVkIHx8IGNvbXBpbGUoIHNlbGVjdG9yLCBtYXRjaCApICkoXHJcblx0XHRzZWVkLFxyXG5cdFx0Y29udGV4dCxcclxuXHRcdCFkb2N1bWVudElzSFRNTCxcclxuXHRcdHJlc3VsdHMsXHJcblx0XHQhY29udGV4dCB8fCByc2libGluZy50ZXN0KCBzZWxlY3RvciApICYmIHRlc3RDb250ZXh0KCBjb250ZXh0LnBhcmVudE5vZGUgKSB8fCBjb250ZXh0XHJcblx0KTtcclxuXHRyZXR1cm4gcmVzdWx0cztcclxufTtcclxuXHJcbi8vIE9uZS10aW1lIGFzc2lnbm1lbnRzXHJcblxyXG4vLyBTb3J0IHN0YWJpbGl0eVxyXG5zdXBwb3J0LnNvcnRTdGFibGUgPSBleHBhbmRvLnNwbGl0KFwiXCIpLnNvcnQoIHNvcnRPcmRlciApLmpvaW4oXCJcIikgPT09IGV4cGFuZG87XHJcblxyXG4vLyBTdXBwb3J0OiBDaHJvbWUgMTQtMzUrXHJcbi8vIEFsd2F5cyBhc3N1bWUgZHVwbGljYXRlcyBpZiB0aGV5IGFyZW4ndCBwYXNzZWQgdG8gdGhlIGNvbXBhcmlzb24gZnVuY3Rpb25cclxuc3VwcG9ydC5kZXRlY3REdXBsaWNhdGVzID0gISFoYXNEdXBsaWNhdGU7XHJcblxyXG4vLyBJbml0aWFsaXplIGFnYWluc3QgdGhlIGRlZmF1bHQgZG9jdW1lbnRcclxuc2V0RG9jdW1lbnQoKTtcclxuXHJcbi8vIFN1cHBvcnQ6IFdlYmtpdDw1MzcuMzIgLSBTYWZhcmkgNi4wLjMvQ2hyb21lIDI1IChmaXhlZCBpbiBDaHJvbWUgMjcpXHJcbi8vIERldGFjaGVkIG5vZGVzIGNvbmZvdW5kaW5nbHkgZm9sbG93ICplYWNoIG90aGVyKlxyXG5zdXBwb3J0LnNvcnREZXRhY2hlZCA9IGFzc2VydChmdW5jdGlvbiggZGl2MSApIHtcclxuXHQvLyBTaG91bGQgcmV0dXJuIDEsIGJ1dCByZXR1cm5zIDQgKGZvbGxvd2luZylcclxuXHRyZXR1cm4gZGl2MS5jb21wYXJlRG9jdW1lbnRQb3NpdGlvbiggZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKSApICYgMTtcclxufSk7XHJcblxyXG4vLyBTdXBwb3J0OiBJRTw4XHJcbi8vIFByZXZlbnQgYXR0cmlidXRlL3Byb3BlcnR5IFwiaW50ZXJwb2xhdGlvblwiXHJcbi8vIGh0dHA6Ly9tc2RuLm1pY3Jvc29mdC5jb20vZW4tdXMvbGlicmFyeS9tczUzNjQyOSUyOFZTLjg1JTI5LmFzcHhcclxuaWYgKCAhYXNzZXJ0KGZ1bmN0aW9uKCBkaXYgKSB7XHJcblx0ZGl2LmlubmVySFRNTCA9IFwiPGEgaHJlZj0nIyc+PC9hPlwiO1xyXG5cdHJldHVybiBkaXYuZmlyc3RDaGlsZC5nZXRBdHRyaWJ1dGUoXCJocmVmXCIpID09PSBcIiNcIiA7XHJcbn0pICkge1xyXG5cdGFkZEhhbmRsZSggXCJ0eXBlfGhyZWZ8aGVpZ2h0fHdpZHRoXCIsIGZ1bmN0aW9uKCBlbGVtLCBuYW1lLCBpc1hNTCApIHtcclxuXHRcdGlmICggIWlzWE1MICkge1xyXG5cdFx0XHRyZXR1cm4gZWxlbS5nZXRBdHRyaWJ1dGUoIG5hbWUsIG5hbWUudG9Mb3dlckNhc2UoKSA9PT0gXCJ0eXBlXCIgPyAxIDogMiApO1xyXG5cdFx0fVxyXG5cdH0pO1xyXG59XHJcblxyXG4vLyBTdXBwb3J0OiBJRTw5XHJcbi8vIFVzZSBkZWZhdWx0VmFsdWUgaW4gcGxhY2Ugb2YgZ2V0QXR0cmlidXRlKFwidmFsdWVcIilcclxuaWYgKCAhc3VwcG9ydC5hdHRyaWJ1dGVzIHx8ICFhc3NlcnQoZnVuY3Rpb24oIGRpdiApIHtcclxuXHRkaXYuaW5uZXJIVE1MID0gXCI8aW5wdXQvPlwiO1xyXG5cdGRpdi5maXJzdENoaWxkLnNldEF0dHJpYnV0ZSggXCJ2YWx1ZVwiLCBcIlwiICk7XHJcblx0cmV0dXJuIGRpdi5maXJzdENoaWxkLmdldEF0dHJpYnV0ZSggXCJ2YWx1ZVwiICkgPT09IFwiXCI7XHJcbn0pICkge1xyXG5cdGFkZEhhbmRsZSggXCJ2YWx1ZVwiLCBmdW5jdGlvbiggZWxlbSwgbmFtZSwgaXNYTUwgKSB7XHJcblx0XHRpZiAoICFpc1hNTCAmJiBlbGVtLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCkgPT09IFwiaW5wdXRcIiApIHtcclxuXHRcdFx0cmV0dXJuIGVsZW0uZGVmYXVsdFZhbHVlO1xyXG5cdFx0fVxyXG5cdH0pO1xyXG59XHJcblxyXG4vLyBTdXBwb3J0OiBJRTw5XHJcbi8vIFVzZSBnZXRBdHRyaWJ1dGVOb2RlIHRvIGZldGNoIGJvb2xlYW5zIHdoZW4gZ2V0QXR0cmlidXRlIGxpZXNcclxuaWYgKCAhYXNzZXJ0KGZ1bmN0aW9uKCBkaXYgKSB7XHJcblx0cmV0dXJuIGRpdi5nZXRBdHRyaWJ1dGUoXCJkaXNhYmxlZFwiKSA9PSBudWxsO1xyXG59KSApIHtcclxuXHRhZGRIYW5kbGUoIGJvb2xlYW5zLCBmdW5jdGlvbiggZWxlbSwgbmFtZSwgaXNYTUwgKSB7XHJcblx0XHR2YXIgdmFsO1xyXG5cdFx0aWYgKCAhaXNYTUwgKSB7XHJcblx0XHRcdHJldHVybiBlbGVtWyBuYW1lIF0gPT09IHRydWUgPyBuYW1lLnRvTG93ZXJDYXNlKCkgOlxyXG5cdFx0XHRcdFx0KHZhbCA9IGVsZW0uZ2V0QXR0cmlidXRlTm9kZSggbmFtZSApKSAmJiB2YWwuc3BlY2lmaWVkID9cclxuXHRcdFx0XHRcdHZhbC52YWx1ZSA6XHJcblx0XHRcdFx0bnVsbDtcclxuXHRcdH1cclxuXHR9KTtcclxufVxyXG5cclxucmV0dXJuIFNpenpsZTtcclxuXHJcbn0pKCB3aW5kb3cgKTtcclxuXHJcblxyXG5cclxualF1ZXJ5LmZpbmQgPSBTaXp6bGU7XHJcbmpRdWVyeS5leHByID0gU2l6emxlLnNlbGVjdG9ycztcclxualF1ZXJ5LmV4cHJbIFwiOlwiIF0gPSBqUXVlcnkuZXhwci5wc2V1ZG9zO1xyXG5qUXVlcnkudW5pcXVlU29ydCA9IGpRdWVyeS51bmlxdWUgPSBTaXp6bGUudW5pcXVlU29ydDtcclxualF1ZXJ5LnRleHQgPSBTaXp6bGUuZ2V0VGV4dDtcclxualF1ZXJ5LmlzWE1MRG9jID0gU2l6emxlLmlzWE1MO1xyXG5qUXVlcnkuY29udGFpbnMgPSBTaXp6bGUuY29udGFpbnM7XHJcblxyXG5cclxuXHJcbnZhciBkaXIgPSBmdW5jdGlvbiggZWxlbSwgZGlyLCB1bnRpbCApIHtcclxuXHR2YXIgbWF0Y2hlZCA9IFtdLFxyXG5cdFx0dHJ1bmNhdGUgPSB1bnRpbCAhPT0gdW5kZWZpbmVkO1xyXG5cclxuXHR3aGlsZSAoICggZWxlbSA9IGVsZW1bIGRpciBdICkgJiYgZWxlbS5ub2RlVHlwZSAhPT0gOSApIHtcclxuXHRcdGlmICggZWxlbS5ub2RlVHlwZSA9PT0gMSApIHtcclxuXHRcdFx0aWYgKCB0cnVuY2F0ZSAmJiBqUXVlcnkoIGVsZW0gKS5pcyggdW50aWwgKSApIHtcclxuXHRcdFx0XHRicmVhaztcclxuXHRcdFx0fVxyXG5cdFx0XHRtYXRjaGVkLnB1c2goIGVsZW0gKTtcclxuXHRcdH1cclxuXHR9XHJcblx0cmV0dXJuIG1hdGNoZWQ7XHJcbn07XHJcblxyXG5cclxudmFyIHNpYmxpbmdzID0gZnVuY3Rpb24oIG4sIGVsZW0gKSB7XHJcblx0dmFyIG1hdGNoZWQgPSBbXTtcclxuXHJcblx0Zm9yICggOyBuOyBuID0gbi5uZXh0U2libGluZyApIHtcclxuXHRcdGlmICggbi5ub2RlVHlwZSA9PT0gMSAmJiBuICE9PSBlbGVtICkge1xyXG5cdFx0XHRtYXRjaGVkLnB1c2goIG4gKTtcclxuXHRcdH1cclxuXHR9XHJcblxyXG5cdHJldHVybiBtYXRjaGVkO1xyXG59O1xyXG5cclxuXHJcbnZhciBybmVlZHNDb250ZXh0ID0galF1ZXJ5LmV4cHIubWF0Y2gubmVlZHNDb250ZXh0O1xyXG5cclxudmFyIHJzaW5nbGVUYWcgPSAoIC9ePChbXFx3LV0rKVxccypcXC8/Pig/OjxcXC9cXDE+fCkkLyApO1xyXG5cclxuXHJcblxyXG52YXIgcmlzU2ltcGxlID0gL14uW146I1xcW1xcLixdKiQvO1xyXG5cclxuLy8gSW1wbGVtZW50IHRoZSBpZGVudGljYWwgZnVuY3Rpb25hbGl0eSBmb3IgZmlsdGVyIGFuZCBub3RcclxuZnVuY3Rpb24gd2lubm93KCBlbGVtZW50cywgcXVhbGlmaWVyLCBub3QgKSB7XHJcblx0aWYgKCBqUXVlcnkuaXNGdW5jdGlvbiggcXVhbGlmaWVyICkgKSB7XHJcblx0XHRyZXR1cm4galF1ZXJ5LmdyZXAoIGVsZW1lbnRzLCBmdW5jdGlvbiggZWxlbSwgaSApIHtcclxuXHRcdFx0LyoganNoaW50IC1XMDE4ICovXHJcblx0XHRcdHJldHVybiAhIXF1YWxpZmllci5jYWxsKCBlbGVtLCBpLCBlbGVtICkgIT09IG5vdDtcclxuXHRcdH0gKTtcclxuXHJcblx0fVxyXG5cclxuXHRpZiAoIHF1YWxpZmllci5ub2RlVHlwZSApIHtcclxuXHRcdHJldHVybiBqUXVlcnkuZ3JlcCggZWxlbWVudHMsIGZ1bmN0aW9uKCBlbGVtICkge1xyXG5cdFx0XHRyZXR1cm4gKCBlbGVtID09PSBxdWFsaWZpZXIgKSAhPT0gbm90O1xyXG5cdFx0fSApO1xyXG5cclxuXHR9XHJcblxyXG5cdGlmICggdHlwZW9mIHF1YWxpZmllciA9PT0gXCJzdHJpbmdcIiApIHtcclxuXHRcdGlmICggcmlzU2ltcGxlLnRlc3QoIHF1YWxpZmllciApICkge1xyXG5cdFx0XHRyZXR1cm4galF1ZXJ5LmZpbHRlciggcXVhbGlmaWVyLCBlbGVtZW50cywgbm90ICk7XHJcblx0XHR9XHJcblxyXG5cdFx0cXVhbGlmaWVyID0galF1ZXJ5LmZpbHRlciggcXVhbGlmaWVyLCBlbGVtZW50cyApO1xyXG5cdH1cclxuXHJcblx0cmV0dXJuIGpRdWVyeS5ncmVwKCBlbGVtZW50cywgZnVuY3Rpb24oIGVsZW0gKSB7XHJcblx0XHRyZXR1cm4gKCBpbmRleE9mLmNhbGwoIHF1YWxpZmllciwgZWxlbSApID4gLTEgKSAhPT0gbm90O1xyXG5cdH0gKTtcclxufVxyXG5cclxualF1ZXJ5LmZpbHRlciA9IGZ1bmN0aW9uKCBleHByLCBlbGVtcywgbm90ICkge1xyXG5cdHZhciBlbGVtID0gZWxlbXNbIDAgXTtcclxuXHJcblx0aWYgKCBub3QgKSB7XHJcblx0XHRleHByID0gXCI6bm90KFwiICsgZXhwciArIFwiKVwiO1xyXG5cdH1cclxuXHJcblx0cmV0dXJuIGVsZW1zLmxlbmd0aCA9PT0gMSAmJiBlbGVtLm5vZGVUeXBlID09PSAxID9cclxuXHRcdGpRdWVyeS5maW5kLm1hdGNoZXNTZWxlY3RvciggZWxlbSwgZXhwciApID8gWyBlbGVtIF0gOiBbXSA6XHJcblx0XHRqUXVlcnkuZmluZC5tYXRjaGVzKCBleHByLCBqUXVlcnkuZ3JlcCggZWxlbXMsIGZ1bmN0aW9uKCBlbGVtICkge1xyXG5cdFx0XHRyZXR1cm4gZWxlbS5ub2RlVHlwZSA9PT0gMTtcclxuXHRcdH0gKSApO1xyXG59O1xyXG5cclxualF1ZXJ5LmZuLmV4dGVuZCgge1xyXG5cdGZpbmQ6IGZ1bmN0aW9uKCBzZWxlY3RvciApIHtcclxuXHRcdHZhciBpLFxyXG5cdFx0XHRsZW4gPSB0aGlzLmxlbmd0aCxcclxuXHRcdFx0cmV0ID0gW10sXHJcblx0XHRcdHNlbGYgPSB0aGlzO1xyXG5cclxuXHRcdGlmICggdHlwZW9mIHNlbGVjdG9yICE9PSBcInN0cmluZ1wiICkge1xyXG5cdFx0XHRyZXR1cm4gdGhpcy5wdXNoU3RhY2soIGpRdWVyeSggc2VsZWN0b3IgKS5maWx0ZXIoIGZ1bmN0aW9uKCkge1xyXG5cdFx0XHRcdGZvciAoIGkgPSAwOyBpIDwgbGVuOyBpKysgKSB7XHJcblx0XHRcdFx0XHRpZiAoIGpRdWVyeS5jb250YWlucyggc2VsZlsgaSBdLCB0aGlzICkgKSB7XHJcblx0XHRcdFx0XHRcdHJldHVybiB0cnVlO1xyXG5cdFx0XHRcdFx0fVxyXG5cdFx0XHRcdH1cclxuXHRcdFx0fSApICk7XHJcblx0XHR9XHJcblxyXG5cdFx0Zm9yICggaSA9IDA7IGkgPCBsZW47IGkrKyApIHtcclxuXHRcdFx0alF1ZXJ5LmZpbmQoIHNlbGVjdG9yLCBzZWxmWyBpIF0sIHJldCApO1xyXG5cdFx0fVxyXG5cclxuXHRcdC8vIE5lZWRlZCBiZWNhdXNlICQoIHNlbGVjdG9yLCBjb250ZXh0ICkgYmVjb21lcyAkKCBjb250ZXh0ICkuZmluZCggc2VsZWN0b3IgKVxyXG5cdFx0cmV0ID0gdGhpcy5wdXNoU3RhY2soIGxlbiA+IDEgPyBqUXVlcnkudW5pcXVlKCByZXQgKSA6IHJldCApO1xyXG5cdFx0cmV0LnNlbGVjdG9yID0gdGhpcy5zZWxlY3RvciA/IHRoaXMuc2VsZWN0b3IgKyBcIiBcIiArIHNlbGVjdG9yIDogc2VsZWN0b3I7XHJcblx0XHRyZXR1cm4gcmV0O1xyXG5cdH0sXHJcblx0ZmlsdGVyOiBmdW5jdGlvbiggc2VsZWN0b3IgKSB7XHJcblx0XHRyZXR1cm4gdGhpcy5wdXNoU3RhY2soIHdpbm5vdyggdGhpcywgc2VsZWN0b3IgfHwgW10sIGZhbHNlICkgKTtcclxuXHR9LFxyXG5cdG5vdDogZnVuY3Rpb24oIHNlbGVjdG9yICkge1xyXG5cdFx0cmV0dXJuIHRoaXMucHVzaFN0YWNrKCB3aW5ub3coIHRoaXMsIHNlbGVjdG9yIHx8IFtdLCB0cnVlICkgKTtcclxuXHR9LFxyXG5cdGlzOiBmdW5jdGlvbiggc2VsZWN0b3IgKSB7XHJcblx0XHRyZXR1cm4gISF3aW5ub3coXHJcblx0XHRcdHRoaXMsXHJcblxyXG5cdFx0XHQvLyBJZiB0aGlzIGlzIGEgcG9zaXRpb25hbC9yZWxhdGl2ZSBzZWxlY3RvciwgY2hlY2sgbWVtYmVyc2hpcCBpbiB0aGUgcmV0dXJuZWQgc2V0XHJcblx0XHRcdC8vIHNvICQoXCJwOmZpcnN0XCIpLmlzKFwicDpsYXN0XCIpIHdvbid0IHJldHVybiB0cnVlIGZvciBhIGRvYyB3aXRoIHR3byBcInBcIi5cclxuXHRcdFx0dHlwZW9mIHNlbGVjdG9yID09PSBcInN0cmluZ1wiICYmIHJuZWVkc0NvbnRleHQudGVzdCggc2VsZWN0b3IgKSA/XHJcblx0XHRcdFx0alF1ZXJ5KCBzZWxlY3RvciApIDpcclxuXHRcdFx0XHRzZWxlY3RvciB8fCBbXSxcclxuXHRcdFx0ZmFsc2VcclxuXHRcdCkubGVuZ3RoO1xyXG5cdH1cclxufSApO1xyXG5cclxuXHJcbi8vIEluaXRpYWxpemUgYSBqUXVlcnkgb2JqZWN0XHJcblxyXG5cclxuLy8gQSBjZW50cmFsIHJlZmVyZW5jZSB0byB0aGUgcm9vdCBqUXVlcnkoZG9jdW1lbnQpXHJcbnZhciByb290alF1ZXJ5LFxyXG5cclxuXHQvLyBBIHNpbXBsZSB3YXkgdG8gY2hlY2sgZm9yIEhUTUwgc3RyaW5nc1xyXG5cdC8vIFByaW9yaXRpemUgI2lkIG92ZXIgPHRhZz4gdG8gYXZvaWQgWFNTIHZpYSBsb2NhdGlvbi5oYXNoICgjOTUyMSlcclxuXHQvLyBTdHJpY3QgSFRNTCByZWNvZ25pdGlvbiAoIzExMjkwOiBtdXN0IHN0YXJ0IHdpdGggPClcclxuXHRycXVpY2tFeHByID0gL14oPzpcXHMqKDxbXFx3XFxXXSs+KVtePl0qfCMoW1xcdy1dKikpJC8sXHJcblxyXG5cdGluaXQgPSBqUXVlcnkuZm4uaW5pdCA9IGZ1bmN0aW9uKCBzZWxlY3RvciwgY29udGV4dCwgcm9vdCApIHtcclxuXHRcdHZhciBtYXRjaCwgZWxlbTtcclxuXHJcblx0XHQvLyBIQU5ETEU6ICQoXCJcIiksICQobnVsbCksICQodW5kZWZpbmVkKSwgJChmYWxzZSlcclxuXHRcdGlmICggIXNlbGVjdG9yICkge1xyXG5cdFx0XHRyZXR1cm4gdGhpcztcclxuXHRcdH1cclxuXHJcblx0XHQvLyBNZXRob2QgaW5pdCgpIGFjY2VwdHMgYW4gYWx0ZXJuYXRlIHJvb3RqUXVlcnlcclxuXHRcdC8vIHNvIG1pZ3JhdGUgY2FuIHN1cHBvcnQgalF1ZXJ5LnN1YiAoZ2gtMjEwMSlcclxuXHRcdHJvb3QgPSByb290IHx8IHJvb3RqUXVlcnk7XHJcblxyXG5cdFx0Ly8gSGFuZGxlIEhUTUwgc3RyaW5nc1xyXG5cdFx0aWYgKCB0eXBlb2Ygc2VsZWN0b3IgPT09IFwic3RyaW5nXCIgKSB7XHJcblx0XHRcdGlmICggc2VsZWN0b3JbIDAgXSA9PT0gXCI8XCIgJiZcclxuXHRcdFx0XHRzZWxlY3Rvclsgc2VsZWN0b3IubGVuZ3RoIC0gMSBdID09PSBcIj5cIiAmJlxyXG5cdFx0XHRcdHNlbGVjdG9yLmxlbmd0aCA+PSAzICkge1xyXG5cclxuXHRcdFx0XHQvLyBBc3N1bWUgdGhhdCBzdHJpbmdzIHRoYXQgc3RhcnQgYW5kIGVuZCB3aXRoIDw+IGFyZSBIVE1MIGFuZCBza2lwIHRoZSByZWdleCBjaGVja1xyXG5cdFx0XHRcdG1hdGNoID0gWyBudWxsLCBzZWxlY3RvciwgbnVsbCBdO1xyXG5cclxuXHRcdFx0fSBlbHNlIHtcclxuXHRcdFx0XHRtYXRjaCA9IHJxdWlja0V4cHIuZXhlYyggc2VsZWN0b3IgKTtcclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0Ly8gTWF0Y2ggaHRtbCBvciBtYWtlIHN1cmUgbm8gY29udGV4dCBpcyBzcGVjaWZpZWQgZm9yICNpZFxyXG5cdFx0XHRpZiAoIG1hdGNoICYmICggbWF0Y2hbIDEgXSB8fCAhY29udGV4dCApICkge1xyXG5cclxuXHRcdFx0XHQvLyBIQU5ETEU6ICQoaHRtbCkgLT4gJChhcnJheSlcclxuXHRcdFx0XHRpZiAoIG1hdGNoWyAxIF0gKSB7XHJcblx0XHRcdFx0XHRjb250ZXh0ID0gY29udGV4dCBpbnN0YW5jZW9mIGpRdWVyeSA/IGNvbnRleHRbIDAgXSA6IGNvbnRleHQ7XHJcblxyXG5cdFx0XHRcdFx0Ly8gT3B0aW9uIHRvIHJ1biBzY3JpcHRzIGlzIHRydWUgZm9yIGJhY2stY29tcGF0XHJcblx0XHRcdFx0XHQvLyBJbnRlbnRpb25hbGx5IGxldCB0aGUgZXJyb3IgYmUgdGhyb3duIGlmIHBhcnNlSFRNTCBpcyBub3QgcHJlc2VudFxyXG5cdFx0XHRcdFx0alF1ZXJ5Lm1lcmdlKCB0aGlzLCBqUXVlcnkucGFyc2VIVE1MKFxyXG5cdFx0XHRcdFx0XHRtYXRjaFsgMSBdLFxyXG5cdFx0XHRcdFx0XHRjb250ZXh0ICYmIGNvbnRleHQubm9kZVR5cGUgPyBjb250ZXh0Lm93bmVyRG9jdW1lbnQgfHwgY29udGV4dCA6IGRvY3VtZW50LFxyXG5cdFx0XHRcdFx0XHR0cnVlXHJcblx0XHRcdFx0XHQpICk7XHJcblxyXG5cdFx0XHRcdFx0Ly8gSEFORExFOiAkKGh0bWwsIHByb3BzKVxyXG5cdFx0XHRcdFx0aWYgKCByc2luZ2xlVGFnLnRlc3QoIG1hdGNoWyAxIF0gKSAmJiBqUXVlcnkuaXNQbGFpbk9iamVjdCggY29udGV4dCApICkge1xyXG5cdFx0XHRcdFx0XHRmb3IgKCBtYXRjaCBpbiBjb250ZXh0ICkge1xyXG5cclxuXHRcdFx0XHRcdFx0XHQvLyBQcm9wZXJ0aWVzIG9mIGNvbnRleHQgYXJlIGNhbGxlZCBhcyBtZXRob2RzIGlmIHBvc3NpYmxlXHJcblx0XHRcdFx0XHRcdFx0aWYgKCBqUXVlcnkuaXNGdW5jdGlvbiggdGhpc1sgbWF0Y2ggXSApICkge1xyXG5cdFx0XHRcdFx0XHRcdFx0dGhpc1sgbWF0Y2ggXSggY29udGV4dFsgbWF0Y2ggXSApO1xyXG5cclxuXHRcdFx0XHRcdFx0XHQvLyAuLi5hbmQgb3RoZXJ3aXNlIHNldCBhcyBhdHRyaWJ1dGVzXHJcblx0XHRcdFx0XHRcdFx0fSBlbHNlIHtcclxuXHRcdFx0XHRcdFx0XHRcdHRoaXMuYXR0ciggbWF0Y2gsIGNvbnRleHRbIG1hdGNoIF0gKTtcclxuXHRcdFx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdH1cclxuXHJcblx0XHRcdFx0XHRyZXR1cm4gdGhpcztcclxuXHJcblx0XHRcdFx0Ly8gSEFORExFOiAkKCNpZClcclxuXHRcdFx0XHR9IGVsc2Uge1xyXG5cdFx0XHRcdFx0ZWxlbSA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCBtYXRjaFsgMiBdICk7XHJcblxyXG5cdFx0XHRcdFx0Ly8gU3VwcG9ydDogQmxhY2tiZXJyeSA0LjZcclxuXHRcdFx0XHRcdC8vIGdFQklEIHJldHVybnMgbm9kZXMgbm8gbG9uZ2VyIGluIHRoZSBkb2N1bWVudCAoIzY5NjMpXHJcblx0XHRcdFx0XHRpZiAoIGVsZW0gJiYgZWxlbS5wYXJlbnROb2RlICkge1xyXG5cclxuXHRcdFx0XHRcdFx0Ly8gSW5qZWN0IHRoZSBlbGVtZW50IGRpcmVjdGx5IGludG8gdGhlIGpRdWVyeSBvYmplY3RcclxuXHRcdFx0XHRcdFx0dGhpcy5sZW5ndGggPSAxO1xyXG5cdFx0XHRcdFx0XHR0aGlzWyAwIF0gPSBlbGVtO1xyXG5cdFx0XHRcdFx0fVxyXG5cclxuXHRcdFx0XHRcdHRoaXMuY29udGV4dCA9IGRvY3VtZW50O1xyXG5cdFx0XHRcdFx0dGhpcy5zZWxlY3RvciA9IHNlbGVjdG9yO1xyXG5cdFx0XHRcdFx0cmV0dXJuIHRoaXM7XHJcblx0XHRcdFx0fVxyXG5cclxuXHRcdFx0Ly8gSEFORExFOiAkKGV4cHIsICQoLi4uKSlcclxuXHRcdFx0fSBlbHNlIGlmICggIWNvbnRleHQgfHwgY29udGV4dC5qcXVlcnkgKSB7XHJcblx0XHRcdFx0cmV0dXJuICggY29udGV4dCB8fCByb290ICkuZmluZCggc2VsZWN0b3IgKTtcclxuXHJcblx0XHRcdC8vIEhBTkRMRTogJChleHByLCBjb250ZXh0KVxyXG5cdFx0XHQvLyAod2hpY2ggaXMganVzdCBlcXVpdmFsZW50IHRvOiAkKGNvbnRleHQpLmZpbmQoZXhwcilcclxuXHRcdFx0fSBlbHNlIHtcclxuXHRcdFx0XHRyZXR1cm4gdGhpcy5jb25zdHJ1Y3RvciggY29udGV4dCApLmZpbmQoIHNlbGVjdG9yICk7XHJcblx0XHRcdH1cclxuXHJcblx0XHQvLyBIQU5ETEU6ICQoRE9NRWxlbWVudClcclxuXHRcdH0gZWxzZSBpZiAoIHNlbGVjdG9yLm5vZGVUeXBlICkge1xyXG5cdFx0XHR0aGlzLmNvbnRleHQgPSB0aGlzWyAwIF0gPSBzZWxlY3RvcjtcclxuXHRcdFx0dGhpcy5sZW5ndGggPSAxO1xyXG5cdFx0XHRyZXR1cm4gdGhpcztcclxuXHJcblx0XHQvLyBIQU5ETEU6ICQoZnVuY3Rpb24pXHJcblx0XHQvLyBTaG9ydGN1dCBmb3IgZG9jdW1lbnQgcmVhZHlcclxuXHRcdH0gZWxzZSBpZiAoIGpRdWVyeS5pc0Z1bmN0aW9uKCBzZWxlY3RvciApICkge1xyXG5cdFx0XHRyZXR1cm4gcm9vdC5yZWFkeSAhPT0gdW5kZWZpbmVkID9cclxuXHRcdFx0XHRyb290LnJlYWR5KCBzZWxlY3RvciApIDpcclxuXHJcblx0XHRcdFx0Ly8gRXhlY3V0ZSBpbW1lZGlhdGVseSBpZiByZWFkeSBpcyBub3QgcHJlc2VudFxyXG5cdFx0XHRcdHNlbGVjdG9yKCBqUXVlcnkgKTtcclxuXHRcdH1cclxuXHJcblx0XHRpZiAoIHNlbGVjdG9yLnNlbGVjdG9yICE9PSB1bmRlZmluZWQgKSB7XHJcblx0XHRcdHRoaXMuc2VsZWN0b3IgPSBzZWxlY3Rvci5zZWxlY3RvcjtcclxuXHRcdFx0dGhpcy5jb250ZXh0ID0gc2VsZWN0b3IuY29udGV4dDtcclxuXHRcdH1cclxuXHJcblx0XHRyZXR1cm4galF1ZXJ5Lm1ha2VBcnJheSggc2VsZWN0b3IsIHRoaXMgKTtcclxuXHR9O1xyXG5cclxuLy8gR2l2ZSB0aGUgaW5pdCBmdW5jdGlvbiB0aGUgalF1ZXJ5IHByb3RvdHlwZSBmb3IgbGF0ZXIgaW5zdGFudGlhdGlvblxyXG5pbml0LnByb3RvdHlwZSA9IGpRdWVyeS5mbjtcclxuXHJcbi8vIEluaXRpYWxpemUgY2VudHJhbCByZWZlcmVuY2Vcclxucm9vdGpRdWVyeSA9IGpRdWVyeSggZG9jdW1lbnQgKTtcclxuXHJcblxyXG52YXIgcnBhcmVudHNwcmV2ID0gL14oPzpwYXJlbnRzfHByZXYoPzpVbnRpbHxBbGwpKS8sXHJcblxyXG5cdC8vIE1ldGhvZHMgZ3VhcmFudGVlZCB0byBwcm9kdWNlIGEgdW5pcXVlIHNldCB3aGVuIHN0YXJ0aW5nIGZyb20gYSB1bmlxdWUgc2V0XHJcblx0Z3VhcmFudGVlZFVuaXF1ZSA9IHtcclxuXHRcdGNoaWxkcmVuOiB0cnVlLFxyXG5cdFx0Y29udGVudHM6IHRydWUsXHJcblx0XHRuZXh0OiB0cnVlLFxyXG5cdFx0cHJldjogdHJ1ZVxyXG5cdH07XHJcblxyXG5qUXVlcnkuZm4uZXh0ZW5kKCB7XHJcblx0aGFzOiBmdW5jdGlvbiggdGFyZ2V0ICkge1xyXG5cdFx0dmFyIHRhcmdldHMgPSBqUXVlcnkoIHRhcmdldCwgdGhpcyApLFxyXG5cdFx0XHRsID0gdGFyZ2V0cy5sZW5ndGg7XHJcblxyXG5cdFx0cmV0dXJuIHRoaXMuZmlsdGVyKCBmdW5jdGlvbigpIHtcclxuXHRcdFx0dmFyIGkgPSAwO1xyXG5cdFx0XHRmb3IgKCA7IGkgPCBsOyBpKysgKSB7XHJcblx0XHRcdFx0aWYgKCBqUXVlcnkuY29udGFpbnMoIHRoaXMsIHRhcmdldHNbIGkgXSApICkge1xyXG5cdFx0XHRcdFx0cmV0dXJuIHRydWU7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9XHJcblx0XHR9ICk7XHJcblx0fSxcclxuXHJcblx0Y2xvc2VzdDogZnVuY3Rpb24oIHNlbGVjdG9ycywgY29udGV4dCApIHtcclxuXHRcdHZhciBjdXIsXHJcblx0XHRcdGkgPSAwLFxyXG5cdFx0XHRsID0gdGhpcy5sZW5ndGgsXHJcblx0XHRcdG1hdGNoZWQgPSBbXSxcclxuXHRcdFx0cG9zID0gcm5lZWRzQ29udGV4dC50ZXN0KCBzZWxlY3RvcnMgKSB8fCB0eXBlb2Ygc2VsZWN0b3JzICE9PSBcInN0cmluZ1wiID9cclxuXHRcdFx0XHRqUXVlcnkoIHNlbGVjdG9ycywgY29udGV4dCB8fCB0aGlzLmNvbnRleHQgKSA6XHJcblx0XHRcdFx0MDtcclxuXHJcblx0XHRmb3IgKCA7IGkgPCBsOyBpKysgKSB7XHJcblx0XHRcdGZvciAoIGN1ciA9IHRoaXNbIGkgXTsgY3VyICYmIGN1ciAhPT0gY29udGV4dDsgY3VyID0gY3VyLnBhcmVudE5vZGUgKSB7XHJcblxyXG5cdFx0XHRcdC8vIEFsd2F5cyBza2lwIGRvY3VtZW50IGZyYWdtZW50c1xyXG5cdFx0XHRcdGlmICggY3VyLm5vZGVUeXBlIDwgMTEgJiYgKCBwb3MgP1xyXG5cdFx0XHRcdFx0cG9zLmluZGV4KCBjdXIgKSA+IC0xIDpcclxuXHJcblx0XHRcdFx0XHQvLyBEb24ndCBwYXNzIG5vbi1lbGVtZW50cyB0byBTaXp6bGVcclxuXHRcdFx0XHRcdGN1ci5ub2RlVHlwZSA9PT0gMSAmJlxyXG5cdFx0XHRcdFx0XHRqUXVlcnkuZmluZC5tYXRjaGVzU2VsZWN0b3IoIGN1ciwgc2VsZWN0b3JzICkgKSApIHtcclxuXHJcblx0XHRcdFx0XHRtYXRjaGVkLnB1c2goIGN1ciApO1xyXG5cdFx0XHRcdFx0YnJlYWs7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9XHJcblx0XHR9XHJcblxyXG5cdFx0cmV0dXJuIHRoaXMucHVzaFN0YWNrKCBtYXRjaGVkLmxlbmd0aCA+IDEgPyBqUXVlcnkudW5pcXVlU29ydCggbWF0Y2hlZCApIDogbWF0Y2hlZCApO1xyXG5cdH0sXHJcblxyXG5cdC8vIERldGVybWluZSB0aGUgcG9zaXRpb24gb2YgYW4gZWxlbWVudCB3aXRoaW4gdGhlIHNldFxyXG5cdGluZGV4OiBmdW5jdGlvbiggZWxlbSApIHtcclxuXHJcblx0XHQvLyBObyBhcmd1bWVudCwgcmV0dXJuIGluZGV4IGluIHBhcmVudFxyXG5cdFx0aWYgKCAhZWxlbSApIHtcclxuXHRcdFx0cmV0dXJuICggdGhpc1sgMCBdICYmIHRoaXNbIDAgXS5wYXJlbnROb2RlICkgPyB0aGlzLmZpcnN0KCkucHJldkFsbCgpLmxlbmd0aCA6IC0xO1xyXG5cdFx0fVxyXG5cclxuXHRcdC8vIEluZGV4IGluIHNlbGVjdG9yXHJcblx0XHRpZiAoIHR5cGVvZiBlbGVtID09PSBcInN0cmluZ1wiICkge1xyXG5cdFx0XHRyZXR1cm4gaW5kZXhPZi5jYWxsKCBqUXVlcnkoIGVsZW0gKSwgdGhpc1sgMCBdICk7XHJcblx0XHR9XHJcblxyXG5cdFx0Ly8gTG9jYXRlIHRoZSBwb3NpdGlvbiBvZiB0aGUgZGVzaXJlZCBlbGVtZW50XHJcblx0XHRyZXR1cm4gaW5kZXhPZi5jYWxsKCB0aGlzLFxyXG5cclxuXHRcdFx0Ly8gSWYgaXQgcmVjZWl2ZXMgYSBqUXVlcnkgb2JqZWN0LCB0aGUgZmlyc3QgZWxlbWVudCBpcyB1c2VkXHJcblx0XHRcdGVsZW0uanF1ZXJ5ID8gZWxlbVsgMCBdIDogZWxlbVxyXG5cdFx0KTtcclxuXHR9LFxyXG5cclxuXHRhZGQ6IGZ1bmN0aW9uKCBzZWxlY3RvciwgY29udGV4dCApIHtcclxuXHRcdHJldHVybiB0aGlzLnB1c2hTdGFjayhcclxuXHRcdFx0alF1ZXJ5LnVuaXF1ZVNvcnQoXHJcblx0XHRcdFx0alF1ZXJ5Lm1lcmdlKCB0aGlzLmdldCgpLCBqUXVlcnkoIHNlbGVjdG9yLCBjb250ZXh0ICkgKVxyXG5cdFx0XHQpXHJcblx0XHQpO1xyXG5cdH0sXHJcblxyXG5cdGFkZEJhY2s6IGZ1bmN0aW9uKCBzZWxlY3RvciApIHtcclxuXHRcdHJldHVybiB0aGlzLmFkZCggc2VsZWN0b3IgPT0gbnVsbCA/XHJcblx0XHRcdHRoaXMucHJldk9iamVjdCA6IHRoaXMucHJldk9iamVjdC5maWx0ZXIoIHNlbGVjdG9yIClcclxuXHRcdCk7XHJcblx0fVxyXG59ICk7XHJcblxyXG5mdW5jdGlvbiBzaWJsaW5nKCBjdXIsIGRpciApIHtcclxuXHR3aGlsZSAoICggY3VyID0gY3VyWyBkaXIgXSApICYmIGN1ci5ub2RlVHlwZSAhPT0gMSApIHt9XHJcblx0cmV0dXJuIGN1cjtcclxufVxyXG5cclxualF1ZXJ5LmVhY2goIHtcclxuXHRwYXJlbnQ6IGZ1bmN0aW9uKCBlbGVtICkge1xyXG5cdFx0dmFyIHBhcmVudCA9IGVsZW0ucGFyZW50Tm9kZTtcclxuXHRcdHJldHVybiBwYXJlbnQgJiYgcGFyZW50Lm5vZGVUeXBlICE9PSAxMSA/IHBhcmVudCA6IG51bGw7XHJcblx0fSxcclxuXHRwYXJlbnRzOiBmdW5jdGlvbiggZWxlbSApIHtcclxuXHRcdHJldHVybiBkaXIoIGVsZW0sIFwicGFyZW50Tm9kZVwiICk7XHJcblx0fSxcclxuXHRwYXJlbnRzVW50aWw6IGZ1bmN0aW9uKCBlbGVtLCBpLCB1bnRpbCApIHtcclxuXHRcdHJldHVybiBkaXIoIGVsZW0sIFwicGFyZW50Tm9kZVwiLCB1bnRpbCApO1xyXG5cdH0sXHJcblx0bmV4dDogZnVuY3Rpb24oIGVsZW0gKSB7XHJcblx0XHRyZXR1cm4gc2libGluZyggZWxlbSwgXCJuZXh0U2libGluZ1wiICk7XHJcblx0fSxcclxuXHRwcmV2OiBmdW5jdGlvbiggZWxlbSApIHtcclxuXHRcdHJldHVybiBzaWJsaW5nKCBlbGVtLCBcInByZXZpb3VzU2libGluZ1wiICk7XHJcblx0fSxcclxuXHRuZXh0QWxsOiBmdW5jdGlvbiggZWxlbSApIHtcclxuXHRcdHJldHVybiBkaXIoIGVsZW0sIFwibmV4dFNpYmxpbmdcIiApO1xyXG5cdH0sXHJcblx0cHJldkFsbDogZnVuY3Rpb24oIGVsZW0gKSB7XHJcblx0XHRyZXR1cm4gZGlyKCBlbGVtLCBcInByZXZpb3VzU2libGluZ1wiICk7XHJcblx0fSxcclxuXHRuZXh0VW50aWw6IGZ1bmN0aW9uKCBlbGVtLCBpLCB1bnRpbCApIHtcclxuXHRcdHJldHVybiBkaXIoIGVsZW0sIFwibmV4dFNpYmxpbmdcIiwgdW50aWwgKTtcclxuXHR9LFxyXG5cdHByZXZVbnRpbDogZnVuY3Rpb24oIGVsZW0sIGksIHVudGlsICkge1xyXG5cdFx0cmV0dXJuIGRpciggZWxlbSwgXCJwcmV2aW91c1NpYmxpbmdcIiwgdW50aWwgKTtcclxuXHR9LFxyXG5cdHNpYmxpbmdzOiBmdW5jdGlvbiggZWxlbSApIHtcclxuXHRcdHJldHVybiBzaWJsaW5ncyggKCBlbGVtLnBhcmVudE5vZGUgfHwge30gKS5maXJzdENoaWxkLCBlbGVtICk7XHJcblx0fSxcclxuXHRjaGlsZHJlbjogZnVuY3Rpb24oIGVsZW0gKSB7XHJcblx0XHRyZXR1cm4gc2libGluZ3MoIGVsZW0uZmlyc3RDaGlsZCApO1xyXG5cdH0sXHJcblx0Y29udGVudHM6IGZ1bmN0aW9uKCBlbGVtICkge1xyXG5cdFx0cmV0dXJuIGVsZW0uY29udGVudERvY3VtZW50IHx8IGpRdWVyeS5tZXJnZSggW10sIGVsZW0uY2hpbGROb2RlcyApO1xyXG5cdH1cclxufSwgZnVuY3Rpb24oIG5hbWUsIGZuICkge1xyXG5cdGpRdWVyeS5mblsgbmFtZSBdID0gZnVuY3Rpb24oIHVudGlsLCBzZWxlY3RvciApIHtcclxuXHRcdHZhciBtYXRjaGVkID0galF1ZXJ5Lm1hcCggdGhpcywgZm4sIHVudGlsICk7XHJcblxyXG5cdFx0aWYgKCBuYW1lLnNsaWNlKCAtNSApICE9PSBcIlVudGlsXCIgKSB7XHJcblx0XHRcdHNlbGVjdG9yID0gdW50aWw7XHJcblx0XHR9XHJcblxyXG5cdFx0aWYgKCBzZWxlY3RvciAmJiB0eXBlb2Ygc2VsZWN0b3IgPT09IFwic3RyaW5nXCIgKSB7XHJcblx0XHRcdG1hdGNoZWQgPSBqUXVlcnkuZmlsdGVyKCBzZWxlY3RvciwgbWF0Y2hlZCApO1xyXG5cdFx0fVxyXG5cclxuXHRcdGlmICggdGhpcy5sZW5ndGggPiAxICkge1xyXG5cclxuXHRcdFx0Ly8gUmVtb3ZlIGR1cGxpY2F0ZXNcclxuXHRcdFx0aWYgKCAhZ3VhcmFudGVlZFVuaXF1ZVsgbmFtZSBdICkge1xyXG5cdFx0XHRcdGpRdWVyeS51bmlxdWVTb3J0KCBtYXRjaGVkICk7XHJcblx0XHRcdH1cclxuXHJcblx0XHRcdC8vIFJldmVyc2Ugb3JkZXIgZm9yIHBhcmVudHMqIGFuZCBwcmV2LWRlcml2YXRpdmVzXHJcblx0XHRcdGlmICggcnBhcmVudHNwcmV2LnRlc3QoIG5hbWUgKSApIHtcclxuXHRcdFx0XHRtYXRjaGVkLnJldmVyc2UoKTtcclxuXHRcdFx0fVxyXG5cdFx0fVxyXG5cclxuXHRcdHJldHVybiB0aGlzLnB1c2hTdGFjayggbWF0Y2hlZCApO1xyXG5cdH07XHJcbn0gKTtcclxudmFyIHJub3R3aGl0ZSA9ICggL1xcUysvZyApO1xyXG5cclxuXHJcblxyXG4vLyBDb252ZXJ0IFN0cmluZy1mb3JtYXR0ZWQgb3B0aW9ucyBpbnRvIE9iamVjdC1mb3JtYXR0ZWQgb25lc1xyXG5mdW5jdGlvbiBjcmVhdGVPcHRpb25zKCBvcHRpb25zICkge1xyXG5cdHZhciBvYmplY3QgPSB7fTtcclxuXHRqUXVlcnkuZWFjaCggb3B0aW9ucy5tYXRjaCggcm5vdHdoaXRlICkgfHwgW10sIGZ1bmN0aW9uKCBfLCBmbGFnICkge1xyXG5cdFx0b2JqZWN0WyBmbGFnIF0gPSB0cnVlO1xyXG5cdH0gKTtcclxuXHRyZXR1cm4gb2JqZWN0O1xyXG59XHJcblxyXG4vKlxyXG4gKiBDcmVhdGUgYSBjYWxsYmFjayBsaXN0IHVzaW5nIHRoZSBmb2xsb3dpbmcgcGFyYW1ldGVyczpcclxuICpcclxuICpcdG9wdGlvbnM6IGFuIG9wdGlvbmFsIGxpc3Qgb2Ygc3BhY2Utc2VwYXJhdGVkIG9wdGlvbnMgdGhhdCB3aWxsIGNoYW5nZSBob3dcclxuICpcdFx0XHR0aGUgY2FsbGJhY2sgbGlzdCBiZWhhdmVzIG9yIGEgbW9yZSB0cmFkaXRpb25hbCBvcHRpb24gb2JqZWN0XHJcbiAqXHJcbiAqIEJ5IGRlZmF1bHQgYSBjYWxsYmFjayBsaXN0IHdpbGwgYWN0IGxpa2UgYW4gZXZlbnQgY2FsbGJhY2sgbGlzdCBhbmQgY2FuIGJlXHJcbiAqIFwiZmlyZWRcIiBtdWx0aXBsZSB0aW1lcy5cclxuICpcclxuICogUG9zc2libGUgb3B0aW9uczpcclxuICpcclxuICpcdG9uY2U6XHRcdFx0d2lsbCBlbnN1cmUgdGhlIGNhbGxiYWNrIGxpc3QgY2FuIG9ubHkgYmUgZmlyZWQgb25jZSAobGlrZSBhIERlZmVycmVkKVxyXG4gKlxyXG4gKlx0bWVtb3J5Olx0XHRcdHdpbGwga2VlcCB0cmFjayBvZiBwcmV2aW91cyB2YWx1ZXMgYW5kIHdpbGwgY2FsbCBhbnkgY2FsbGJhY2sgYWRkZWRcclxuICpcdFx0XHRcdFx0YWZ0ZXIgdGhlIGxpc3QgaGFzIGJlZW4gZmlyZWQgcmlnaHQgYXdheSB3aXRoIHRoZSBsYXRlc3QgXCJtZW1vcml6ZWRcIlxyXG4gKlx0XHRcdFx0XHR2YWx1ZXMgKGxpa2UgYSBEZWZlcnJlZClcclxuICpcclxuICpcdHVuaXF1ZTpcdFx0XHR3aWxsIGVuc3VyZSBhIGNhbGxiYWNrIGNhbiBvbmx5IGJlIGFkZGVkIG9uY2UgKG5vIGR1cGxpY2F0ZSBpbiB0aGUgbGlzdClcclxuICpcclxuICpcdHN0b3BPbkZhbHNlOlx0aW50ZXJydXB0IGNhbGxpbmdzIHdoZW4gYSBjYWxsYmFjayByZXR1cm5zIGZhbHNlXHJcbiAqXHJcbiAqL1xyXG5qUXVlcnkuQ2FsbGJhY2tzID0gZnVuY3Rpb24oIG9wdGlvbnMgKSB7XHJcblxyXG5cdC8vIENvbnZlcnQgb3B0aW9ucyBmcm9tIFN0cmluZy1mb3JtYXR0ZWQgdG8gT2JqZWN0LWZvcm1hdHRlZCBpZiBuZWVkZWRcclxuXHQvLyAod2UgY2hlY2sgaW4gY2FjaGUgZmlyc3QpXHJcblx0b3B0aW9ucyA9IHR5cGVvZiBvcHRpb25zID09PSBcInN0cmluZ1wiID9cclxuXHRcdGNyZWF0ZU9wdGlvbnMoIG9wdGlvbnMgKSA6XHJcblx0XHRqUXVlcnkuZXh0ZW5kKCB7fSwgb3B0aW9ucyApO1xyXG5cclxuXHR2YXIgLy8gRmxhZyB0byBrbm93IGlmIGxpc3QgaXMgY3VycmVudGx5IGZpcmluZ1xyXG5cdFx0ZmlyaW5nLFxyXG5cclxuXHRcdC8vIExhc3QgZmlyZSB2YWx1ZSBmb3Igbm9uLWZvcmdldHRhYmxlIGxpc3RzXHJcblx0XHRtZW1vcnksXHJcblxyXG5cdFx0Ly8gRmxhZyB0byBrbm93IGlmIGxpc3Qgd2FzIGFscmVhZHkgZmlyZWRcclxuXHRcdGZpcmVkLFxyXG5cclxuXHRcdC8vIEZsYWcgdG8gcHJldmVudCBmaXJpbmdcclxuXHRcdGxvY2tlZCxcclxuXHJcblx0XHQvLyBBY3R1YWwgY2FsbGJhY2sgbGlzdFxyXG5cdFx0bGlzdCA9IFtdLFxyXG5cclxuXHRcdC8vIFF1ZXVlIG9mIGV4ZWN1dGlvbiBkYXRhIGZvciByZXBlYXRhYmxlIGxpc3RzXHJcblx0XHRxdWV1ZSA9IFtdLFxyXG5cclxuXHRcdC8vIEluZGV4IG9mIGN1cnJlbnRseSBmaXJpbmcgY2FsbGJhY2sgKG1vZGlmaWVkIGJ5IGFkZC9yZW1vdmUgYXMgbmVlZGVkKVxyXG5cdFx0ZmlyaW5nSW5kZXggPSAtMSxcclxuXHJcblx0XHQvLyBGaXJlIGNhbGxiYWNrc1xyXG5cdFx0ZmlyZSA9IGZ1bmN0aW9uKCkge1xyXG5cclxuXHRcdFx0Ly8gRW5mb3JjZSBzaW5nbGUtZmlyaW5nXHJcblx0XHRcdGxvY2tlZCA9IG9wdGlvbnMub25jZTtcclxuXHJcblx0XHRcdC8vIEV4ZWN1dGUgY2FsbGJhY2tzIGZvciBhbGwgcGVuZGluZyBleGVjdXRpb25zLFxyXG5cdFx0XHQvLyByZXNwZWN0aW5nIGZpcmluZ0luZGV4IG92ZXJyaWRlcyBhbmQgcnVudGltZSBjaGFuZ2VzXHJcblx0XHRcdGZpcmVkID0gZmlyaW5nID0gdHJ1ZTtcclxuXHRcdFx0Zm9yICggOyBxdWV1ZS5sZW5ndGg7IGZpcmluZ0luZGV4ID0gLTEgKSB7XHJcblx0XHRcdFx0bWVtb3J5ID0gcXVldWUuc2hpZnQoKTtcclxuXHRcdFx0XHR3aGlsZSAoICsrZmlyaW5nSW5kZXggPCBsaXN0Lmxlbmd0aCApIHtcclxuXHJcblx0XHRcdFx0XHQvLyBSdW4gY2FsbGJhY2sgYW5kIGNoZWNrIGZvciBlYXJseSB0ZXJtaW5hdGlvblxyXG5cdFx0XHRcdFx0aWYgKCBsaXN0WyBmaXJpbmdJbmRleCBdLmFwcGx5KCBtZW1vcnlbIDAgXSwgbWVtb3J5WyAxIF0gKSA9PT0gZmFsc2UgJiZcclxuXHRcdFx0XHRcdFx0b3B0aW9ucy5zdG9wT25GYWxzZSApIHtcclxuXHJcblx0XHRcdFx0XHRcdC8vIEp1bXAgdG8gZW5kIGFuZCBmb3JnZXQgdGhlIGRhdGEgc28gLmFkZCBkb2Vzbid0IHJlLWZpcmVcclxuXHRcdFx0XHRcdFx0ZmlyaW5nSW5kZXggPSBsaXN0Lmxlbmd0aDtcclxuXHRcdFx0XHRcdFx0bWVtb3J5ID0gZmFsc2U7XHJcblx0XHRcdFx0XHR9XHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9XHJcblxyXG5cdFx0XHQvLyBGb3JnZXQgdGhlIGRhdGEgaWYgd2UncmUgZG9uZSB3aXRoIGl0XHJcblx0XHRcdGlmICggIW9wdGlvbnMubWVtb3J5ICkge1xyXG5cdFx0XHRcdG1lbW9yeSA9IGZhbHNlO1xyXG5cdFx0XHR9XHJcblxyXG5cdFx0XHRmaXJpbmcgPSBmYWxzZTtcclxuXHJcblx0XHRcdC8vIENsZWFuIHVwIGlmIHdlJ3JlIGRvbmUgZmlyaW5nIGZvciBnb29kXHJcblx0XHRcdGlmICggbG9ja2VkICkge1xyXG5cclxuXHRcdFx0XHQvLyBLZWVwIGFuIGVtcHR5IGxpc3QgaWYgd2UgaGF2ZSBkYXRhIGZvciBmdXR1cmUgYWRkIGNhbGxzXHJcblx0XHRcdFx0aWYgKCBtZW1vcnkgKSB7XHJcblx0XHRcdFx0XHRsaXN0ID0gW107XHJcblxyXG5cdFx0XHRcdC8vIE90aGVyd2lzZSwgdGhpcyBvYmplY3QgaXMgc3BlbnRcclxuXHRcdFx0XHR9IGVsc2Uge1xyXG5cdFx0XHRcdFx0bGlzdCA9IFwiXCI7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9XHJcblx0XHR9LFxyXG5cclxuXHRcdC8vIEFjdHVhbCBDYWxsYmFja3Mgb2JqZWN0XHJcblx0XHRzZWxmID0ge1xyXG5cclxuXHRcdFx0Ly8gQWRkIGEgY2FsbGJhY2sgb3IgYSBjb2xsZWN0aW9uIG9mIGNhbGxiYWNrcyB0byB0aGUgbGlzdFxyXG5cdFx0XHRhZGQ6IGZ1bmN0aW9uKCkge1xyXG5cdFx0XHRcdGlmICggbGlzdCApIHtcclxuXHJcblx0XHRcdFx0XHQvLyBJZiB3ZSBoYXZlIG1lbW9yeSBmcm9tIGEgcGFzdCBydW4sIHdlIHNob3VsZCBmaXJlIGFmdGVyIGFkZGluZ1xyXG5cdFx0XHRcdFx0aWYgKCBtZW1vcnkgJiYgIWZpcmluZyApIHtcclxuXHRcdFx0XHRcdFx0ZmlyaW5nSW5kZXggPSBsaXN0Lmxlbmd0aCAtIDE7XHJcblx0XHRcdFx0XHRcdHF1ZXVlLnB1c2goIG1lbW9yeSApO1xyXG5cdFx0XHRcdFx0fVxyXG5cclxuXHRcdFx0XHRcdCggZnVuY3Rpb24gYWRkKCBhcmdzICkge1xyXG5cdFx0XHRcdFx0XHRqUXVlcnkuZWFjaCggYXJncywgZnVuY3Rpb24oIF8sIGFyZyApIHtcclxuXHRcdFx0XHRcdFx0XHRpZiAoIGpRdWVyeS5pc0Z1bmN0aW9uKCBhcmcgKSApIHtcclxuXHRcdFx0XHRcdFx0XHRcdGlmICggIW9wdGlvbnMudW5pcXVlIHx8ICFzZWxmLmhhcyggYXJnICkgKSB7XHJcblx0XHRcdFx0XHRcdFx0XHRcdGxpc3QucHVzaCggYXJnICk7XHJcblx0XHRcdFx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHRcdFx0fSBlbHNlIGlmICggYXJnICYmIGFyZy5sZW5ndGggJiYgalF1ZXJ5LnR5cGUoIGFyZyApICE9PSBcInN0cmluZ1wiICkge1xyXG5cclxuXHRcdFx0XHRcdFx0XHRcdC8vIEluc3BlY3QgcmVjdXJzaXZlbHlcclxuXHRcdFx0XHRcdFx0XHRcdGFkZCggYXJnICk7XHJcblx0XHRcdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0XHR9ICk7XHJcblx0XHRcdFx0XHR9ICkoIGFyZ3VtZW50cyApO1xyXG5cclxuXHRcdFx0XHRcdGlmICggbWVtb3J5ICYmICFmaXJpbmcgKSB7XHJcblx0XHRcdFx0XHRcdGZpcmUoKTtcclxuXHRcdFx0XHRcdH1cclxuXHRcdFx0XHR9XHJcblx0XHRcdFx0cmV0dXJuIHRoaXM7XHJcblx0XHRcdH0sXHJcblxyXG5cdFx0XHQvLyBSZW1vdmUgYSBjYWxsYmFjayBmcm9tIHRoZSBsaXN0XHJcblx0XHRcdHJlbW92ZTogZnVuY3Rpb24oKSB7XHJcblx0XHRcdFx0alF1ZXJ5LmVhY2goIGFyZ3VtZW50cywgZnVuY3Rpb24oIF8sIGFyZyApIHtcclxuXHRcdFx0XHRcdHZhciBpbmRleDtcclxuXHRcdFx0XHRcdHdoaWxlICggKCBpbmRleCA9IGpRdWVyeS5pbkFycmF5KCBhcmcsIGxpc3QsIGluZGV4ICkgKSA+IC0xICkge1xyXG5cdFx0XHRcdFx0XHRsaXN0LnNwbGljZSggaW5kZXgsIDEgKTtcclxuXHJcblx0XHRcdFx0XHRcdC8vIEhhbmRsZSBmaXJpbmcgaW5kZXhlc1xyXG5cdFx0XHRcdFx0XHRpZiAoIGluZGV4IDw9IGZpcmluZ0luZGV4ICkge1xyXG5cdFx0XHRcdFx0XHRcdGZpcmluZ0luZGV4LS07XHJcblx0XHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdH1cclxuXHRcdFx0XHR9ICk7XHJcblx0XHRcdFx0cmV0dXJuIHRoaXM7XHJcblx0XHRcdH0sXHJcblxyXG5cdFx0XHQvLyBDaGVjayBpZiBhIGdpdmVuIGNhbGxiYWNrIGlzIGluIHRoZSBsaXN0LlxyXG5cdFx0XHQvLyBJZiBubyBhcmd1bWVudCBpcyBnaXZlbiwgcmV0dXJuIHdoZXRoZXIgb3Igbm90IGxpc3QgaGFzIGNhbGxiYWNrcyBhdHRhY2hlZC5cclxuXHRcdFx0aGFzOiBmdW5jdGlvbiggZm4gKSB7XHJcblx0XHRcdFx0cmV0dXJuIGZuID9cclxuXHRcdFx0XHRcdGpRdWVyeS5pbkFycmF5KCBmbiwgbGlzdCApID4gLTEgOlxyXG5cdFx0XHRcdFx0bGlzdC5sZW5ndGggPiAwO1xyXG5cdFx0XHR9LFxyXG5cclxuXHRcdFx0Ly8gUmVtb3ZlIGFsbCBjYWxsYmFja3MgZnJvbSB0aGUgbGlzdFxyXG5cdFx0XHRlbXB0eTogZnVuY3Rpb24oKSB7XHJcblx0XHRcdFx0aWYgKCBsaXN0ICkge1xyXG5cdFx0XHRcdFx0bGlzdCA9IFtdO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0XHRyZXR1cm4gdGhpcztcclxuXHRcdFx0fSxcclxuXHJcblx0XHRcdC8vIERpc2FibGUgLmZpcmUgYW5kIC5hZGRcclxuXHRcdFx0Ly8gQWJvcnQgYW55IGN1cnJlbnQvcGVuZGluZyBleGVjdXRpb25zXHJcblx0XHRcdC8vIENsZWFyIGFsbCBjYWxsYmFja3MgYW5kIHZhbHVlc1xyXG5cdFx0XHRkaXNhYmxlOiBmdW5jdGlvbigpIHtcclxuXHRcdFx0XHRsb2NrZWQgPSBxdWV1ZSA9IFtdO1xyXG5cdFx0XHRcdGxpc3QgPSBtZW1vcnkgPSBcIlwiO1xyXG5cdFx0XHRcdHJldHVybiB0aGlzO1xyXG5cdFx0XHR9LFxyXG5cdFx0XHRkaXNhYmxlZDogZnVuY3Rpb24oKSB7XHJcblx0XHRcdFx0cmV0dXJuICFsaXN0O1xyXG5cdFx0XHR9LFxyXG5cclxuXHRcdFx0Ly8gRGlzYWJsZSAuZmlyZVxyXG5cdFx0XHQvLyBBbHNvIGRpc2FibGUgLmFkZCB1bmxlc3Mgd2UgaGF2ZSBtZW1vcnkgKHNpbmNlIGl0IHdvdWxkIGhhdmUgbm8gZWZmZWN0KVxyXG5cdFx0XHQvLyBBYm9ydCBhbnkgcGVuZGluZyBleGVjdXRpb25zXHJcblx0XHRcdGxvY2s6IGZ1bmN0aW9uKCkge1xyXG5cdFx0XHRcdGxvY2tlZCA9IHF1ZXVlID0gW107XHJcblx0XHRcdFx0aWYgKCAhbWVtb3J5ICkge1xyXG5cdFx0XHRcdFx0bGlzdCA9IG1lbW9yeSA9IFwiXCI7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHRcdHJldHVybiB0aGlzO1xyXG5cdFx0XHR9LFxyXG5cdFx0XHRsb2NrZWQ6IGZ1bmN0aW9uKCkge1xyXG5cdFx0XHRcdHJldHVybiAhIWxvY2tlZDtcclxuXHRcdFx0fSxcclxuXHJcblx0XHRcdC8vIENhbGwgYWxsIGNhbGxiYWNrcyB3aXRoIHRoZSBnaXZlbiBjb250ZXh0IGFuZCBhcmd1bWVudHNcclxuXHRcdFx0ZmlyZVdpdGg6IGZ1bmN0aW9uKCBjb250ZXh0LCBhcmdzICkge1xyXG5cdFx0XHRcdGlmICggIWxvY2tlZCApIHtcclxuXHRcdFx0XHRcdGFyZ3MgPSBhcmdzIHx8IFtdO1xyXG5cdFx0XHRcdFx0YXJncyA9IFsgY29udGV4dCwgYXJncy5zbGljZSA/IGFyZ3Muc2xpY2UoKSA6IGFyZ3MgXTtcclxuXHRcdFx0XHRcdHF1ZXVlLnB1c2goIGFyZ3MgKTtcclxuXHRcdFx0XHRcdGlmICggIWZpcmluZyApIHtcclxuXHRcdFx0XHRcdFx0ZmlyZSgpO1xyXG5cdFx0XHRcdFx0fVxyXG5cdFx0XHRcdH1cclxuXHRcdFx0XHRyZXR1cm4gdGhpcztcclxuXHRcdFx0fSxcclxuXHJcblx0XHRcdC8vIENhbGwgYWxsIHRoZSBjYWxsYmFja3Mgd2l0aCB0aGUgZ2l2ZW4gYXJndW1lbnRzXHJcblx0XHRcdGZpcmU6IGZ1bmN0aW9uKCkge1xyXG5cdFx0XHRcdHNlbGYuZmlyZVdpdGgoIHRoaXMsIGFyZ3VtZW50cyApO1xyXG5cdFx0XHRcdHJldHVybiB0aGlzO1xyXG5cdFx0XHR9LFxyXG5cclxuXHRcdFx0Ly8gVG8ga25vdyBpZiB0aGUgY2FsbGJhY2tzIGhhdmUgYWxyZWFkeSBiZWVuIGNhbGxlZCBhdCBsZWFzdCBvbmNlXHJcblx0XHRcdGZpcmVkOiBmdW5jdGlvbigpIHtcclxuXHRcdFx0XHRyZXR1cm4gISFmaXJlZDtcclxuXHRcdFx0fVxyXG5cdFx0fTtcclxuXHJcblx0cmV0dXJuIHNlbGY7XHJcbn07XHJcblxyXG5cclxualF1ZXJ5LmV4dGVuZCgge1xyXG5cclxuXHREZWZlcnJlZDogZnVuY3Rpb24oIGZ1bmMgKSB7XHJcblx0XHR2YXIgdHVwbGVzID0gW1xyXG5cclxuXHRcdFx0XHQvLyBhY3Rpb24sIGFkZCBsaXN0ZW5lciwgbGlzdGVuZXIgbGlzdCwgZmluYWwgc3RhdGVcclxuXHRcdFx0XHRbIFwicmVzb2x2ZVwiLCBcImRvbmVcIiwgalF1ZXJ5LkNhbGxiYWNrcyggXCJvbmNlIG1lbW9yeVwiICksIFwicmVzb2x2ZWRcIiBdLFxyXG5cdFx0XHRcdFsgXCJyZWplY3RcIiwgXCJmYWlsXCIsIGpRdWVyeS5DYWxsYmFja3MoIFwib25jZSBtZW1vcnlcIiApLCBcInJlamVjdGVkXCIgXSxcclxuXHRcdFx0XHRbIFwibm90aWZ5XCIsIFwicHJvZ3Jlc3NcIiwgalF1ZXJ5LkNhbGxiYWNrcyggXCJtZW1vcnlcIiApIF1cclxuXHRcdFx0XSxcclxuXHRcdFx0c3RhdGUgPSBcInBlbmRpbmdcIixcclxuXHRcdFx0cHJvbWlzZSA9IHtcclxuXHRcdFx0XHRzdGF0ZTogZnVuY3Rpb24oKSB7XHJcblx0XHRcdFx0XHRyZXR1cm4gc3RhdGU7XHJcblx0XHRcdFx0fSxcclxuXHRcdFx0XHRhbHdheXM6IGZ1bmN0aW9uKCkge1xyXG5cdFx0XHRcdFx0ZGVmZXJyZWQuZG9uZSggYXJndW1lbnRzICkuZmFpbCggYXJndW1lbnRzICk7XHJcblx0XHRcdFx0XHRyZXR1cm4gdGhpcztcclxuXHRcdFx0XHR9LFxyXG5cdFx0XHRcdHRoZW46IGZ1bmN0aW9uKCAvKiBmbkRvbmUsIGZuRmFpbCwgZm5Qcm9ncmVzcyAqLyApIHtcclxuXHRcdFx0XHRcdHZhciBmbnMgPSBhcmd1bWVudHM7XHJcblx0XHRcdFx0XHRyZXR1cm4galF1ZXJ5LkRlZmVycmVkKCBmdW5jdGlvbiggbmV3RGVmZXIgKSB7XHJcblx0XHRcdFx0XHRcdGpRdWVyeS5lYWNoKCB0dXBsZXMsIGZ1bmN0aW9uKCBpLCB0dXBsZSApIHtcclxuXHRcdFx0XHRcdFx0XHR2YXIgZm4gPSBqUXVlcnkuaXNGdW5jdGlvbiggZm5zWyBpIF0gKSAmJiBmbnNbIGkgXTtcclxuXHJcblx0XHRcdFx0XHRcdFx0Ly8gZGVmZXJyZWRbIGRvbmUgfCBmYWlsIHwgcHJvZ3Jlc3MgXSBmb3IgZm9yd2FyZGluZyBhY3Rpb25zIHRvIG5ld0RlZmVyXHJcblx0XHRcdFx0XHRcdFx0ZGVmZXJyZWRbIHR1cGxlWyAxIF0gXSggZnVuY3Rpb24oKSB7XHJcblx0XHRcdFx0XHRcdFx0XHR2YXIgcmV0dXJuZWQgPSBmbiAmJiBmbi5hcHBseSggdGhpcywgYXJndW1lbnRzICk7XHJcblx0XHRcdFx0XHRcdFx0XHRpZiAoIHJldHVybmVkICYmIGpRdWVyeS5pc0Z1bmN0aW9uKCByZXR1cm5lZC5wcm9taXNlICkgKSB7XHJcblx0XHRcdFx0XHRcdFx0XHRcdHJldHVybmVkLnByb21pc2UoKVxyXG5cdFx0XHRcdFx0XHRcdFx0XHRcdC5wcm9ncmVzcyggbmV3RGVmZXIubm90aWZ5IClcclxuXHRcdFx0XHRcdFx0XHRcdFx0XHQuZG9uZSggbmV3RGVmZXIucmVzb2x2ZSApXHJcblx0XHRcdFx0XHRcdFx0XHRcdFx0LmZhaWwoIG5ld0RlZmVyLnJlamVjdCApO1xyXG5cdFx0XHRcdFx0XHRcdFx0fSBlbHNlIHtcclxuXHRcdFx0XHRcdFx0XHRcdFx0bmV3RGVmZXJbIHR1cGxlWyAwIF0gKyBcIldpdGhcIiBdKFxyXG5cdFx0XHRcdFx0XHRcdFx0XHRcdHRoaXMgPT09IHByb21pc2UgPyBuZXdEZWZlci5wcm9taXNlKCkgOiB0aGlzLFxyXG5cdFx0XHRcdFx0XHRcdFx0XHRcdGZuID8gWyByZXR1cm5lZCBdIDogYXJndW1lbnRzXHJcblx0XHRcdFx0XHRcdFx0XHRcdCk7XHJcblx0XHRcdFx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHRcdFx0fSApO1xyXG5cdFx0XHRcdFx0XHR9ICk7XHJcblx0XHRcdFx0XHRcdGZucyA9IG51bGw7XHJcblx0XHRcdFx0XHR9ICkucHJvbWlzZSgpO1xyXG5cdFx0XHRcdH0sXHJcblxyXG5cdFx0XHRcdC8vIEdldCBhIHByb21pc2UgZm9yIHRoaXMgZGVmZXJyZWRcclxuXHRcdFx0XHQvLyBJZiBvYmogaXMgcHJvdmlkZWQsIHRoZSBwcm9taXNlIGFzcGVjdCBpcyBhZGRlZCB0byB0aGUgb2JqZWN0XHJcblx0XHRcdFx0cHJvbWlzZTogZnVuY3Rpb24oIG9iaiApIHtcclxuXHRcdFx0XHRcdHJldHVybiBvYmogIT0gbnVsbCA/IGpRdWVyeS5leHRlbmQoIG9iaiwgcHJvbWlzZSApIDogcHJvbWlzZTtcclxuXHRcdFx0XHR9XHJcblx0XHRcdH0sXHJcblx0XHRcdGRlZmVycmVkID0ge307XHJcblxyXG5cdFx0Ly8gS2VlcCBwaXBlIGZvciBiYWNrLWNvbXBhdFxyXG5cdFx0cHJvbWlzZS5waXBlID0gcHJvbWlzZS50aGVuO1xyXG5cclxuXHRcdC8vIEFkZCBsaXN0LXNwZWNpZmljIG1ldGhvZHNcclxuXHRcdGpRdWVyeS5lYWNoKCB0dXBsZXMsIGZ1bmN0aW9uKCBpLCB0dXBsZSApIHtcclxuXHRcdFx0dmFyIGxpc3QgPSB0dXBsZVsgMiBdLFxyXG5cdFx0XHRcdHN0YXRlU3RyaW5nID0gdHVwbGVbIDMgXTtcclxuXHJcblx0XHRcdC8vIHByb21pc2VbIGRvbmUgfCBmYWlsIHwgcHJvZ3Jlc3MgXSA9IGxpc3QuYWRkXHJcblx0XHRcdHByb21pc2VbIHR1cGxlWyAxIF0gXSA9IGxpc3QuYWRkO1xyXG5cclxuXHRcdFx0Ly8gSGFuZGxlIHN0YXRlXHJcblx0XHRcdGlmICggc3RhdGVTdHJpbmcgKSB7XHJcblx0XHRcdFx0bGlzdC5hZGQoIGZ1bmN0aW9uKCkge1xyXG5cclxuXHRcdFx0XHRcdC8vIHN0YXRlID0gWyByZXNvbHZlZCB8IHJlamVjdGVkIF1cclxuXHRcdFx0XHRcdHN0YXRlID0gc3RhdGVTdHJpbmc7XHJcblxyXG5cdFx0XHRcdC8vIFsgcmVqZWN0X2xpc3QgfCByZXNvbHZlX2xpc3QgXS5kaXNhYmxlOyBwcm9ncmVzc19saXN0LmxvY2tcclxuXHRcdFx0XHR9LCB0dXBsZXNbIGkgXiAxIF1bIDIgXS5kaXNhYmxlLCB0dXBsZXNbIDIgXVsgMiBdLmxvY2sgKTtcclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0Ly8gZGVmZXJyZWRbIHJlc29sdmUgfCByZWplY3QgfCBub3RpZnkgXVxyXG5cdFx0XHRkZWZlcnJlZFsgdHVwbGVbIDAgXSBdID0gZnVuY3Rpb24oKSB7XHJcblx0XHRcdFx0ZGVmZXJyZWRbIHR1cGxlWyAwIF0gKyBcIldpdGhcIiBdKCB0aGlzID09PSBkZWZlcnJlZCA/IHByb21pc2UgOiB0aGlzLCBhcmd1bWVudHMgKTtcclxuXHRcdFx0XHRyZXR1cm4gdGhpcztcclxuXHRcdFx0fTtcclxuXHRcdFx0ZGVmZXJyZWRbIHR1cGxlWyAwIF0gKyBcIldpdGhcIiBdID0gbGlzdC5maXJlV2l0aDtcclxuXHRcdH0gKTtcclxuXHJcblx0XHQvLyBNYWtlIHRoZSBkZWZlcnJlZCBhIHByb21pc2VcclxuXHRcdHByb21pc2UucHJvbWlzZSggZGVmZXJyZWQgKTtcclxuXHJcblx0XHQvLyBDYWxsIGdpdmVuIGZ1bmMgaWYgYW55XHJcblx0XHRpZiAoIGZ1bmMgKSB7XHJcblx0XHRcdGZ1bmMuY2FsbCggZGVmZXJyZWQsIGRlZmVycmVkICk7XHJcblx0XHR9XHJcblxyXG5cdFx0Ly8gQWxsIGRvbmUhXHJcblx0XHRyZXR1cm4gZGVmZXJyZWQ7XHJcblx0fSxcclxuXHJcblx0Ly8gRGVmZXJyZWQgaGVscGVyXHJcblx0d2hlbjogZnVuY3Rpb24oIHN1Ym9yZGluYXRlIC8qICwgLi4uLCBzdWJvcmRpbmF0ZU4gKi8gKSB7XHJcblx0XHR2YXIgaSA9IDAsXHJcblx0XHRcdHJlc29sdmVWYWx1ZXMgPSBzbGljZS5jYWxsKCBhcmd1bWVudHMgKSxcclxuXHRcdFx0bGVuZ3RoID0gcmVzb2x2ZVZhbHVlcy5sZW5ndGgsXHJcblxyXG5cdFx0XHQvLyB0aGUgY291bnQgb2YgdW5jb21wbGV0ZWQgc3Vib3JkaW5hdGVzXHJcblx0XHRcdHJlbWFpbmluZyA9IGxlbmd0aCAhPT0gMSB8fFxyXG5cdFx0XHRcdCggc3Vib3JkaW5hdGUgJiYgalF1ZXJ5LmlzRnVuY3Rpb24oIHN1Ym9yZGluYXRlLnByb21pc2UgKSApID8gbGVuZ3RoIDogMCxcclxuXHJcblx0XHRcdC8vIHRoZSBtYXN0ZXIgRGVmZXJyZWQuXHJcblx0XHRcdC8vIElmIHJlc29sdmVWYWx1ZXMgY29uc2lzdCBvZiBvbmx5IGEgc2luZ2xlIERlZmVycmVkLCBqdXN0IHVzZSB0aGF0LlxyXG5cdFx0XHRkZWZlcnJlZCA9IHJlbWFpbmluZyA9PT0gMSA/IHN1Ym9yZGluYXRlIDogalF1ZXJ5LkRlZmVycmVkKCksXHJcblxyXG5cdFx0XHQvLyBVcGRhdGUgZnVuY3Rpb24gZm9yIGJvdGggcmVzb2x2ZSBhbmQgcHJvZ3Jlc3MgdmFsdWVzXHJcblx0XHRcdHVwZGF0ZUZ1bmMgPSBmdW5jdGlvbiggaSwgY29udGV4dHMsIHZhbHVlcyApIHtcclxuXHRcdFx0XHRyZXR1cm4gZnVuY3Rpb24oIHZhbHVlICkge1xyXG5cdFx0XHRcdFx0Y29udGV4dHNbIGkgXSA9IHRoaXM7XHJcblx0XHRcdFx0XHR2YWx1ZXNbIGkgXSA9IGFyZ3VtZW50cy5sZW5ndGggPiAxID8gc2xpY2UuY2FsbCggYXJndW1lbnRzICkgOiB2YWx1ZTtcclxuXHRcdFx0XHRcdGlmICggdmFsdWVzID09PSBwcm9ncmVzc1ZhbHVlcyApIHtcclxuXHRcdFx0XHRcdFx0ZGVmZXJyZWQubm90aWZ5V2l0aCggY29udGV4dHMsIHZhbHVlcyApO1xyXG5cdFx0XHRcdFx0fSBlbHNlIGlmICggISggLS1yZW1haW5pbmcgKSApIHtcclxuXHRcdFx0XHRcdFx0ZGVmZXJyZWQucmVzb2x2ZVdpdGgoIGNvbnRleHRzLCB2YWx1ZXMgKTtcclxuXHRcdFx0XHRcdH1cclxuXHRcdFx0XHR9O1xyXG5cdFx0XHR9LFxyXG5cclxuXHRcdFx0cHJvZ3Jlc3NWYWx1ZXMsIHByb2dyZXNzQ29udGV4dHMsIHJlc29sdmVDb250ZXh0cztcclxuXHJcblx0XHQvLyBBZGQgbGlzdGVuZXJzIHRvIERlZmVycmVkIHN1Ym9yZGluYXRlczsgdHJlYXQgb3RoZXJzIGFzIHJlc29sdmVkXHJcblx0XHRpZiAoIGxlbmd0aCA+IDEgKSB7XHJcblx0XHRcdHByb2dyZXNzVmFsdWVzID0gbmV3IEFycmF5KCBsZW5ndGggKTtcclxuXHRcdFx0cHJvZ3Jlc3NDb250ZXh0cyA9IG5ldyBBcnJheSggbGVuZ3RoICk7XHJcblx0XHRcdHJlc29sdmVDb250ZXh0cyA9IG5ldyBBcnJheSggbGVuZ3RoICk7XHJcblx0XHRcdGZvciAoIDsgaSA8IGxlbmd0aDsgaSsrICkge1xyXG5cdFx0XHRcdGlmICggcmVzb2x2ZVZhbHVlc1sgaSBdICYmIGpRdWVyeS5pc0Z1bmN0aW9uKCByZXNvbHZlVmFsdWVzWyBpIF0ucHJvbWlzZSApICkge1xyXG5cdFx0XHRcdFx0cmVzb2x2ZVZhbHVlc1sgaSBdLnByb21pc2UoKVxyXG5cdFx0XHRcdFx0XHQucHJvZ3Jlc3MoIHVwZGF0ZUZ1bmMoIGksIHByb2dyZXNzQ29udGV4dHMsIHByb2dyZXNzVmFsdWVzICkgKVxyXG5cdFx0XHRcdFx0XHQuZG9uZSggdXBkYXRlRnVuYyggaSwgcmVzb2x2ZUNvbnRleHRzLCByZXNvbHZlVmFsdWVzICkgKVxyXG5cdFx0XHRcdFx0XHQuZmFpbCggZGVmZXJyZWQucmVqZWN0ICk7XHJcblx0XHRcdFx0fSBlbHNlIHtcclxuXHRcdFx0XHRcdC0tcmVtYWluaW5nO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0fVxyXG5cdFx0fVxyXG5cclxuXHRcdC8vIElmIHdlJ3JlIG5vdCB3YWl0aW5nIG9uIGFueXRoaW5nLCByZXNvbHZlIHRoZSBtYXN0ZXJcclxuXHRcdGlmICggIXJlbWFpbmluZyApIHtcclxuXHRcdFx0ZGVmZXJyZWQucmVzb2x2ZVdpdGgoIHJlc29sdmVDb250ZXh0cywgcmVzb2x2ZVZhbHVlcyApO1xyXG5cdFx0fVxyXG5cclxuXHRcdHJldHVybiBkZWZlcnJlZC5wcm9taXNlKCk7XHJcblx0fVxyXG59ICk7XHJcblxyXG5cclxuLy8gVGhlIGRlZmVycmVkIHVzZWQgb24gRE9NIHJlYWR5XHJcbnZhciByZWFkeUxpc3Q7XHJcblxyXG5qUXVlcnkuZm4ucmVhZHkgPSBmdW5jdGlvbiggZm4gKSB7XHJcblxyXG5cdC8vIEFkZCB0aGUgY2FsbGJhY2tcclxuXHRqUXVlcnkucmVhZHkucHJvbWlzZSgpLmRvbmUoIGZuICk7XHJcblxyXG5cdHJldHVybiB0aGlzO1xyXG59O1xyXG5cclxualF1ZXJ5LmV4dGVuZCgge1xyXG5cclxuXHQvLyBJcyB0aGUgRE9NIHJlYWR5IHRvIGJlIHVzZWQ/IFNldCB0byB0cnVlIG9uY2UgaXQgb2NjdXJzLlxyXG5cdGlzUmVhZHk6IGZhbHNlLFxyXG5cclxuXHQvLyBBIGNvdW50ZXIgdG8gdHJhY2sgaG93IG1hbnkgaXRlbXMgdG8gd2FpdCBmb3IgYmVmb3JlXHJcblx0Ly8gdGhlIHJlYWR5IGV2ZW50IGZpcmVzLiBTZWUgIzY3ODFcclxuXHRyZWFkeVdhaXQ6IDEsXHJcblxyXG5cdC8vIEhvbGQgKG9yIHJlbGVhc2UpIHRoZSByZWFkeSBldmVudFxyXG5cdGhvbGRSZWFkeTogZnVuY3Rpb24oIGhvbGQgKSB7XHJcblx0XHRpZiAoIGhvbGQgKSB7XHJcblx0XHRcdGpRdWVyeS5yZWFkeVdhaXQrKztcclxuXHRcdH0gZWxzZSB7XHJcblx0XHRcdGpRdWVyeS5yZWFkeSggdHJ1ZSApO1xyXG5cdFx0fVxyXG5cdH0sXHJcblxyXG5cdC8vIEhhbmRsZSB3aGVuIHRoZSBET00gaXMgcmVhZHlcclxuXHRyZWFkeTogZnVuY3Rpb24oIHdhaXQgKSB7XHJcblxyXG5cdFx0Ly8gQWJvcnQgaWYgdGhlcmUgYXJlIHBlbmRpbmcgaG9sZHMgb3Igd2UncmUgYWxyZWFkeSByZWFkeVxyXG5cdFx0aWYgKCB3YWl0ID09PSB0cnVlID8gLS1qUXVlcnkucmVhZHlXYWl0IDogalF1ZXJ5LmlzUmVhZHkgKSB7XHJcblx0XHRcdHJldHVybjtcclxuXHRcdH1cclxuXHJcblx0XHQvLyBSZW1lbWJlciB0aGF0IHRoZSBET00gaXMgcmVhZHlcclxuXHRcdGpRdWVyeS5pc1JlYWR5ID0gdHJ1ZTtcclxuXHJcblx0XHQvLyBJZiBhIG5vcm1hbCBET00gUmVhZHkgZXZlbnQgZmlyZWQsIGRlY3JlbWVudCwgYW5kIHdhaXQgaWYgbmVlZCBiZVxyXG5cdFx0aWYgKCB3YWl0ICE9PSB0cnVlICYmIC0talF1ZXJ5LnJlYWR5V2FpdCA+IDAgKSB7XHJcblx0XHRcdHJldHVybjtcclxuXHRcdH1cclxuXHJcblx0XHQvLyBJZiB0aGVyZSBhcmUgZnVuY3Rpb25zIGJvdW5kLCB0byBleGVjdXRlXHJcblx0XHRyZWFkeUxpc3QucmVzb2x2ZVdpdGgoIGRvY3VtZW50LCBbIGpRdWVyeSBdICk7XHJcblxyXG5cdFx0Ly8gVHJpZ2dlciBhbnkgYm91bmQgcmVhZHkgZXZlbnRzXHJcblx0XHRpZiAoIGpRdWVyeS5mbi50cmlnZ2VySGFuZGxlciApIHtcclxuXHRcdFx0alF1ZXJ5KCBkb2N1bWVudCApLnRyaWdnZXJIYW5kbGVyKCBcInJlYWR5XCIgKTtcclxuXHRcdFx0alF1ZXJ5KCBkb2N1bWVudCApLm9mZiggXCJyZWFkeVwiICk7XHJcblx0XHR9XHJcblx0fVxyXG59ICk7XHJcblxyXG4vKipcclxuICogVGhlIHJlYWR5IGV2ZW50IGhhbmRsZXIgYW5kIHNlbGYgY2xlYW51cCBtZXRob2RcclxuICovXHJcbmZ1bmN0aW9uIGNvbXBsZXRlZCgpIHtcclxuXHRkb2N1bWVudC5yZW1vdmVFdmVudExpc3RlbmVyKCBcIkRPTUNvbnRlbnRMb2FkZWRcIiwgY29tcGxldGVkICk7XHJcblx0d2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoIFwibG9hZFwiLCBjb21wbGV0ZWQgKTtcclxuXHRqUXVlcnkucmVhZHkoKTtcclxufVxyXG5cclxualF1ZXJ5LnJlYWR5LnByb21pc2UgPSBmdW5jdGlvbiggb2JqICkge1xyXG5cdGlmICggIXJlYWR5TGlzdCApIHtcclxuXHJcblx0XHRyZWFkeUxpc3QgPSBqUXVlcnkuRGVmZXJyZWQoKTtcclxuXHJcblx0XHQvLyBDYXRjaCBjYXNlcyB3aGVyZSAkKGRvY3VtZW50KS5yZWFkeSgpIGlzIGNhbGxlZFxyXG5cdFx0Ly8gYWZ0ZXIgdGhlIGJyb3dzZXIgZXZlbnQgaGFzIGFscmVhZHkgb2NjdXJyZWQuXHJcblx0XHQvLyBTdXBwb3J0OiBJRTktMTAgb25seVxyXG5cdFx0Ly8gT2xkZXIgSUUgc29tZXRpbWVzIHNpZ25hbHMgXCJpbnRlcmFjdGl2ZVwiIHRvbyBzb29uXHJcblx0XHRpZiAoIGRvY3VtZW50LnJlYWR5U3RhdGUgPT09IFwiY29tcGxldGVcIiB8fFxyXG5cdFx0XHQoIGRvY3VtZW50LnJlYWR5U3RhdGUgIT09IFwibG9hZGluZ1wiICYmICFkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuZG9TY3JvbGwgKSApIHtcclxuXHJcblx0XHRcdC8vIEhhbmRsZSBpdCBhc3luY2hyb25vdXNseSB0byBhbGxvdyBzY3JpcHRzIHRoZSBvcHBvcnR1bml0eSB0byBkZWxheSByZWFkeVxyXG5cdFx0XHR3aW5kb3cuc2V0VGltZW91dCggalF1ZXJ5LnJlYWR5ICk7XHJcblxyXG5cdFx0fSBlbHNlIHtcclxuXHJcblx0XHRcdC8vIFVzZSB0aGUgaGFuZHkgZXZlbnQgY2FsbGJhY2tcclxuXHRcdFx0ZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lciggXCJET01Db250ZW50TG9hZGVkXCIsIGNvbXBsZXRlZCApO1xyXG5cclxuXHRcdFx0Ly8gQSBmYWxsYmFjayB0byB3aW5kb3cub25sb2FkLCB0aGF0IHdpbGwgYWx3YXlzIHdvcmtcclxuXHRcdFx0d2luZG93LmFkZEV2ZW50TGlzdGVuZXIoIFwibG9hZFwiLCBjb21wbGV0ZWQgKTtcclxuXHRcdH1cclxuXHR9XHJcblx0cmV0dXJuIHJlYWR5TGlzdC5wcm9taXNlKCBvYmogKTtcclxufTtcclxuXHJcbi8vIEtpY2sgb2ZmIHRoZSBET00gcmVhZHkgY2hlY2sgZXZlbiBpZiB0aGUgdXNlciBkb2VzIG5vdFxyXG5qUXVlcnkucmVhZHkucHJvbWlzZSgpO1xyXG5cclxuXHJcblxyXG5cclxuLy8gTXVsdGlmdW5jdGlvbmFsIG1ldGhvZCB0byBnZXQgYW5kIHNldCB2YWx1ZXMgb2YgYSBjb2xsZWN0aW9uXHJcbi8vIFRoZSB2YWx1ZS9zIGNhbiBvcHRpb25hbGx5IGJlIGV4ZWN1dGVkIGlmIGl0J3MgYSBmdW5jdGlvblxyXG52YXIgYWNjZXNzID0gZnVuY3Rpb24oIGVsZW1zLCBmbiwga2V5LCB2YWx1ZSwgY2hhaW5hYmxlLCBlbXB0eUdldCwgcmF3ICkge1xyXG5cdHZhciBpID0gMCxcclxuXHRcdGxlbiA9IGVsZW1zLmxlbmd0aCxcclxuXHRcdGJ1bGsgPSBrZXkgPT0gbnVsbDtcclxuXHJcblx0Ly8gU2V0cyBtYW55IHZhbHVlc1xyXG5cdGlmICggalF1ZXJ5LnR5cGUoIGtleSApID09PSBcIm9iamVjdFwiICkge1xyXG5cdFx0Y2hhaW5hYmxlID0gdHJ1ZTtcclxuXHRcdGZvciAoIGkgaW4ga2V5ICkge1xyXG5cdFx0XHRhY2Nlc3MoIGVsZW1zLCBmbiwgaSwga2V5WyBpIF0sIHRydWUsIGVtcHR5R2V0LCByYXcgKTtcclxuXHRcdH1cclxuXHJcblx0Ly8gU2V0cyBvbmUgdmFsdWVcclxuXHR9IGVsc2UgaWYgKCB2YWx1ZSAhPT0gdW5kZWZpbmVkICkge1xyXG5cdFx0Y2hhaW5hYmxlID0gdHJ1ZTtcclxuXHJcblx0XHRpZiAoICFqUXVlcnkuaXNGdW5jdGlvbiggdmFsdWUgKSApIHtcclxuXHRcdFx0cmF3ID0gdHJ1ZTtcclxuXHRcdH1cclxuXHJcblx0XHRpZiAoIGJ1bGsgKSB7XHJcblxyXG5cdFx0XHQvLyBCdWxrIG9wZXJhdGlvbnMgcnVuIGFnYWluc3QgdGhlIGVudGlyZSBzZXRcclxuXHRcdFx0aWYgKCByYXcgKSB7XHJcblx0XHRcdFx0Zm4uY2FsbCggZWxlbXMsIHZhbHVlICk7XHJcblx0XHRcdFx0Zm4gPSBudWxsO1xyXG5cclxuXHRcdFx0Ly8gLi4uZXhjZXB0IHdoZW4gZXhlY3V0aW5nIGZ1bmN0aW9uIHZhbHVlc1xyXG5cdFx0XHR9IGVsc2Uge1xyXG5cdFx0XHRcdGJ1bGsgPSBmbjtcclxuXHRcdFx0XHRmbiA9IGZ1bmN0aW9uKCBlbGVtLCBrZXksIHZhbHVlICkge1xyXG5cdFx0XHRcdFx0cmV0dXJuIGJ1bGsuY2FsbCggalF1ZXJ5KCBlbGVtICksIHZhbHVlICk7XHJcblx0XHRcdFx0fTtcclxuXHRcdFx0fVxyXG5cdFx0fVxyXG5cclxuXHRcdGlmICggZm4gKSB7XHJcblx0XHRcdGZvciAoIDsgaSA8IGxlbjsgaSsrICkge1xyXG5cdFx0XHRcdGZuKFxyXG5cdFx0XHRcdFx0ZWxlbXNbIGkgXSwga2V5LCByYXcgP1xyXG5cdFx0XHRcdFx0dmFsdWUgOlxyXG5cdFx0XHRcdFx0dmFsdWUuY2FsbCggZWxlbXNbIGkgXSwgaSwgZm4oIGVsZW1zWyBpIF0sIGtleSApIClcclxuXHRcdFx0XHQpO1xyXG5cdFx0XHR9XHJcblx0XHR9XHJcblx0fVxyXG5cclxuXHRyZXR1cm4gY2hhaW5hYmxlID9cclxuXHRcdGVsZW1zIDpcclxuXHJcblx0XHQvLyBHZXRzXHJcblx0XHRidWxrID9cclxuXHRcdFx0Zm4uY2FsbCggZWxlbXMgKSA6XHJcblx0XHRcdGxlbiA/IGZuKCBlbGVtc1sgMCBdLCBrZXkgKSA6IGVtcHR5R2V0O1xyXG59O1xyXG52YXIgYWNjZXB0RGF0YSA9IGZ1bmN0aW9uKCBvd25lciApIHtcclxuXHJcblx0Ly8gQWNjZXB0cyBvbmx5OlxyXG5cdC8vICAtIE5vZGVcclxuXHQvLyAgICAtIE5vZGUuRUxFTUVOVF9OT0RFXHJcblx0Ly8gICAgLSBOb2RlLkRPQ1VNRU5UX05PREVcclxuXHQvLyAgLSBPYmplY3RcclxuXHQvLyAgICAtIEFueVxyXG5cdC8qIGpzaGludCAtVzAxOCAqL1xyXG5cdHJldHVybiBvd25lci5ub2RlVHlwZSA9PT0gMSB8fCBvd25lci5ub2RlVHlwZSA9PT0gOSB8fCAhKCArb3duZXIubm9kZVR5cGUgKTtcclxufTtcclxuXHJcblxyXG5cclxuXHJcbmZ1bmN0aW9uIERhdGEoKSB7XHJcblx0dGhpcy5leHBhbmRvID0galF1ZXJ5LmV4cGFuZG8gKyBEYXRhLnVpZCsrO1xyXG59XHJcblxyXG5EYXRhLnVpZCA9IDE7XHJcblxyXG5EYXRhLnByb3RvdHlwZSA9IHtcclxuXHJcblx0cmVnaXN0ZXI6IGZ1bmN0aW9uKCBvd25lciwgaW5pdGlhbCApIHtcclxuXHRcdHZhciB2YWx1ZSA9IGluaXRpYWwgfHwge307XHJcblxyXG5cdFx0Ly8gSWYgaXQgaXMgYSBub2RlIHVubGlrZWx5IHRvIGJlIHN0cmluZ2lmeS1lZCBvciBsb29wZWQgb3ZlclxyXG5cdFx0Ly8gdXNlIHBsYWluIGFzc2lnbm1lbnRcclxuXHRcdGlmICggb3duZXIubm9kZVR5cGUgKSB7XHJcblx0XHRcdG93bmVyWyB0aGlzLmV4cGFuZG8gXSA9IHZhbHVlO1xyXG5cclxuXHRcdC8vIE90aGVyd2lzZSBzZWN1cmUgaXQgaW4gYSBub24tZW51bWVyYWJsZSwgbm9uLXdyaXRhYmxlIHByb3BlcnR5XHJcblx0XHQvLyBjb25maWd1cmFiaWxpdHkgbXVzdCBiZSB0cnVlIHRvIGFsbG93IHRoZSBwcm9wZXJ0eSB0byBiZVxyXG5cdFx0Ly8gZGVsZXRlZCB3aXRoIHRoZSBkZWxldGUgb3BlcmF0b3JcclxuXHRcdH0gZWxzZSB7XHJcblx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eSggb3duZXIsIHRoaXMuZXhwYW5kbywge1xyXG5cdFx0XHRcdHZhbHVlOiB2YWx1ZSxcclxuXHRcdFx0XHR3cml0YWJsZTogdHJ1ZSxcclxuXHRcdFx0XHRjb25maWd1cmFibGU6IHRydWVcclxuXHRcdFx0fSApO1xyXG5cdFx0fVxyXG5cdFx0cmV0dXJuIG93bmVyWyB0aGlzLmV4cGFuZG8gXTtcclxuXHR9LFxyXG5cdGNhY2hlOiBmdW5jdGlvbiggb3duZXIgKSB7XHJcblxyXG5cdFx0Ly8gV2UgY2FuIGFjY2VwdCBkYXRhIGZvciBub24tZWxlbWVudCBub2RlcyBpbiBtb2Rlcm4gYnJvd3NlcnMsXHJcblx0XHQvLyBidXQgd2Ugc2hvdWxkIG5vdCwgc2VlICM4MzM1LlxyXG5cdFx0Ly8gQWx3YXlzIHJldHVybiBhbiBlbXB0eSBvYmplY3QuXHJcblx0XHRpZiAoICFhY2NlcHREYXRhKCBvd25lciApICkge1xyXG5cdFx0XHRyZXR1cm4ge307XHJcblx0XHR9XHJcblxyXG5cdFx0Ly8gQ2hlY2sgaWYgdGhlIG93bmVyIG9iamVjdCBhbHJlYWR5IGhhcyBhIGNhY2hlXHJcblx0XHR2YXIgdmFsdWUgPSBvd25lclsgdGhpcy5leHBhbmRvIF07XHJcblxyXG5cdFx0Ly8gSWYgbm90LCBjcmVhdGUgb25lXHJcblx0XHRpZiAoICF2YWx1ZSApIHtcclxuXHRcdFx0dmFsdWUgPSB7fTtcclxuXHJcblx0XHRcdC8vIFdlIGNhbiBhY2NlcHQgZGF0YSBmb3Igbm9uLWVsZW1lbnQgbm9kZXMgaW4gbW9kZXJuIGJyb3dzZXJzLFxyXG5cdFx0XHQvLyBidXQgd2Ugc2hvdWxkIG5vdCwgc2VlICM4MzM1LlxyXG5cdFx0XHQvLyBBbHdheXMgcmV0dXJuIGFuIGVtcHR5IG9iamVjdC5cclxuXHRcdFx0aWYgKCBhY2NlcHREYXRhKCBvd25lciApICkge1xyXG5cclxuXHRcdFx0XHQvLyBJZiBpdCBpcyBhIG5vZGUgdW5saWtlbHkgdG8gYmUgc3RyaW5naWZ5LWVkIG9yIGxvb3BlZCBvdmVyXHJcblx0XHRcdFx0Ly8gdXNlIHBsYWluIGFzc2lnbm1lbnRcclxuXHRcdFx0XHRpZiAoIG93bmVyLm5vZGVUeXBlICkge1xyXG5cdFx0XHRcdFx0b3duZXJbIHRoaXMuZXhwYW5kbyBdID0gdmFsdWU7XHJcblxyXG5cdFx0XHRcdC8vIE90aGVyd2lzZSBzZWN1cmUgaXQgaW4gYSBub24tZW51bWVyYWJsZSBwcm9wZXJ0eVxyXG5cdFx0XHRcdC8vIGNvbmZpZ3VyYWJsZSBtdXN0IGJlIHRydWUgdG8gYWxsb3cgdGhlIHByb3BlcnR5IHRvIGJlXHJcblx0XHRcdFx0Ly8gZGVsZXRlZCB3aGVuIGRhdGEgaXMgcmVtb3ZlZFxyXG5cdFx0XHRcdH0gZWxzZSB7XHJcblx0XHRcdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoIG93bmVyLCB0aGlzLmV4cGFuZG8sIHtcclxuXHRcdFx0XHRcdFx0dmFsdWU6IHZhbHVlLFxyXG5cdFx0XHRcdFx0XHRjb25maWd1cmFibGU6IHRydWVcclxuXHRcdFx0XHRcdH0gKTtcclxuXHRcdFx0XHR9XHJcblx0XHRcdH1cclxuXHRcdH1cclxuXHJcblx0XHRyZXR1cm4gdmFsdWU7XHJcblx0fSxcclxuXHRzZXQ6IGZ1bmN0aW9uKCBvd25lciwgZGF0YSwgdmFsdWUgKSB7XHJcblx0XHR2YXIgcHJvcCxcclxuXHRcdFx0Y2FjaGUgPSB0aGlzLmNhY2hlKCBvd25lciApO1xyXG5cclxuXHRcdC8vIEhhbmRsZTogWyBvd25lciwga2V5LCB2YWx1ZSBdIGFyZ3NcclxuXHRcdGlmICggdHlwZW9mIGRhdGEgPT09IFwic3RyaW5nXCIgKSB7XHJcblx0XHRcdGNhY2hlWyBkYXRhIF0gPSB2YWx1ZTtcclxuXHJcblx0XHQvLyBIYW5kbGU6IFsgb3duZXIsIHsgcHJvcGVydGllcyB9IF0gYXJnc1xyXG5cdFx0fSBlbHNlIHtcclxuXHJcblx0XHRcdC8vIENvcHkgdGhlIHByb3BlcnRpZXMgb25lLWJ5LW9uZSB0byB0aGUgY2FjaGUgb2JqZWN0XHJcblx0XHRcdGZvciAoIHByb3AgaW4gZGF0YSApIHtcclxuXHRcdFx0XHRjYWNoZVsgcHJvcCBdID0gZGF0YVsgcHJvcCBdO1xyXG5cdFx0XHR9XHJcblx0XHR9XHJcblx0XHRyZXR1cm4gY2FjaGU7XHJcblx0fSxcclxuXHRnZXQ6IGZ1bmN0aW9uKCBvd25lciwga2V5ICkge1xyXG5cdFx0cmV0dXJuIGtleSA9PT0gdW5kZWZpbmVkID9cclxuXHRcdFx0dGhpcy5jYWNoZSggb3duZXIgKSA6XHJcblx0XHRcdG93bmVyWyB0aGlzLmV4cGFuZG8gXSAmJiBvd25lclsgdGhpcy5leHBhbmRvIF1bIGtleSBdO1xyXG5cdH0sXHJcblx0YWNjZXNzOiBmdW5jdGlvbiggb3duZXIsIGtleSwgdmFsdWUgKSB7XHJcblx0XHR2YXIgc3RvcmVkO1xyXG5cclxuXHRcdC8vIEluIGNhc2VzIHdoZXJlIGVpdGhlcjpcclxuXHRcdC8vXHJcblx0XHQvLyAgIDEuIE5vIGtleSB3YXMgc3BlY2lmaWVkXHJcblx0XHQvLyAgIDIuIEEgc3RyaW5nIGtleSB3YXMgc3BlY2lmaWVkLCBidXQgbm8gdmFsdWUgcHJvdmlkZWRcclxuXHRcdC8vXHJcblx0XHQvLyBUYWtlIHRoZSBcInJlYWRcIiBwYXRoIGFuZCBhbGxvdyB0aGUgZ2V0IG1ldGhvZCB0byBkZXRlcm1pbmVcclxuXHRcdC8vIHdoaWNoIHZhbHVlIHRvIHJldHVybiwgcmVzcGVjdGl2ZWx5IGVpdGhlcjpcclxuXHRcdC8vXHJcblx0XHQvLyAgIDEuIFRoZSBlbnRpcmUgY2FjaGUgb2JqZWN0XHJcblx0XHQvLyAgIDIuIFRoZSBkYXRhIHN0b3JlZCBhdCB0aGUga2V5XHJcblx0XHQvL1xyXG5cdFx0aWYgKCBrZXkgPT09IHVuZGVmaW5lZCB8fFxyXG5cdFx0XHRcdCggKCBrZXkgJiYgdHlwZW9mIGtleSA9PT0gXCJzdHJpbmdcIiApICYmIHZhbHVlID09PSB1bmRlZmluZWQgKSApIHtcclxuXHJcblx0XHRcdHN0b3JlZCA9IHRoaXMuZ2V0KCBvd25lciwga2V5ICk7XHJcblxyXG5cdFx0XHRyZXR1cm4gc3RvcmVkICE9PSB1bmRlZmluZWQgP1xyXG5cdFx0XHRcdHN0b3JlZCA6IHRoaXMuZ2V0KCBvd25lciwgalF1ZXJ5LmNhbWVsQ2FzZSgga2V5ICkgKTtcclxuXHRcdH1cclxuXHJcblx0XHQvLyBXaGVuIHRoZSBrZXkgaXMgbm90IGEgc3RyaW5nLCBvciBib3RoIGEga2V5IGFuZCB2YWx1ZVxyXG5cdFx0Ly8gYXJlIHNwZWNpZmllZCwgc2V0IG9yIGV4dGVuZCAoZXhpc3Rpbmcgb2JqZWN0cykgd2l0aCBlaXRoZXI6XHJcblx0XHQvL1xyXG5cdFx0Ly8gICAxLiBBbiBvYmplY3Qgb2YgcHJvcGVydGllc1xyXG5cdFx0Ly8gICAyLiBBIGtleSBhbmQgdmFsdWVcclxuXHRcdC8vXHJcblx0XHR0aGlzLnNldCggb3duZXIsIGtleSwgdmFsdWUgKTtcclxuXHJcblx0XHQvLyBTaW5jZSB0aGUgXCJzZXRcIiBwYXRoIGNhbiBoYXZlIHR3byBwb3NzaWJsZSBlbnRyeSBwb2ludHNcclxuXHRcdC8vIHJldHVybiB0aGUgZXhwZWN0ZWQgZGF0YSBiYXNlZCBvbiB3aGljaCBwYXRoIHdhcyB0YWtlblsqXVxyXG5cdFx0cmV0dXJuIHZhbHVlICE9PSB1bmRlZmluZWQgPyB2YWx1ZSA6IGtleTtcclxuXHR9LFxyXG5cdHJlbW92ZTogZnVuY3Rpb24oIG93bmVyLCBrZXkgKSB7XHJcblx0XHR2YXIgaSwgbmFtZSwgY2FtZWwsXHJcblx0XHRcdGNhY2hlID0gb3duZXJbIHRoaXMuZXhwYW5kbyBdO1xyXG5cclxuXHRcdGlmICggY2FjaGUgPT09IHVuZGVmaW5lZCApIHtcclxuXHRcdFx0cmV0dXJuO1xyXG5cdFx0fVxyXG5cclxuXHRcdGlmICgga2V5ID09PSB1bmRlZmluZWQgKSB7XHJcblx0XHRcdHRoaXMucmVnaXN0ZXIoIG93bmVyICk7XHJcblxyXG5cdFx0fSBlbHNlIHtcclxuXHJcblx0XHRcdC8vIFN1cHBvcnQgYXJyYXkgb3Igc3BhY2Ugc2VwYXJhdGVkIHN0cmluZyBvZiBrZXlzXHJcblx0XHRcdGlmICggalF1ZXJ5LmlzQXJyYXkoIGtleSApICkge1xyXG5cclxuXHRcdFx0XHQvLyBJZiBcIm5hbWVcIiBpcyBhbiBhcnJheSBvZiBrZXlzLi4uXHJcblx0XHRcdFx0Ly8gV2hlbiBkYXRhIGlzIGluaXRpYWxseSBjcmVhdGVkLCB2aWEgKFwia2V5XCIsIFwidmFsXCIpIHNpZ25hdHVyZSxcclxuXHRcdFx0XHQvLyBrZXlzIHdpbGwgYmUgY29udmVydGVkIHRvIGNhbWVsQ2FzZS5cclxuXHRcdFx0XHQvLyBTaW5jZSB0aGVyZSBpcyBubyB3YXkgdG8gdGVsbCBfaG93XyBhIGtleSB3YXMgYWRkZWQsIHJlbW92ZVxyXG5cdFx0XHRcdC8vIGJvdGggcGxhaW4ga2V5IGFuZCBjYW1lbENhc2Uga2V5LiAjMTI3ODZcclxuXHRcdFx0XHQvLyBUaGlzIHdpbGwgb25seSBwZW5hbGl6ZSB0aGUgYXJyYXkgYXJndW1lbnQgcGF0aC5cclxuXHRcdFx0XHRuYW1lID0ga2V5LmNvbmNhdCgga2V5Lm1hcCggalF1ZXJ5LmNhbWVsQ2FzZSApICk7XHJcblx0XHRcdH0gZWxzZSB7XHJcblx0XHRcdFx0Y2FtZWwgPSBqUXVlcnkuY2FtZWxDYXNlKCBrZXkgKTtcclxuXHJcblx0XHRcdFx0Ly8gVHJ5IHRoZSBzdHJpbmcgYXMgYSBrZXkgYmVmb3JlIGFueSBtYW5pcHVsYXRpb25cclxuXHRcdFx0XHRpZiAoIGtleSBpbiBjYWNoZSApIHtcclxuXHRcdFx0XHRcdG5hbWUgPSBbIGtleSwgY2FtZWwgXTtcclxuXHRcdFx0XHR9IGVsc2Uge1xyXG5cclxuXHRcdFx0XHRcdC8vIElmIGEga2V5IHdpdGggdGhlIHNwYWNlcyBleGlzdHMsIHVzZSBpdC5cclxuXHRcdFx0XHRcdC8vIE90aGVyd2lzZSwgY3JlYXRlIGFuIGFycmF5IGJ5IG1hdGNoaW5nIG5vbi13aGl0ZXNwYWNlXHJcblx0XHRcdFx0XHRuYW1lID0gY2FtZWw7XHJcblx0XHRcdFx0XHRuYW1lID0gbmFtZSBpbiBjYWNoZSA/XHJcblx0XHRcdFx0XHRcdFsgbmFtZSBdIDogKCBuYW1lLm1hdGNoKCBybm90d2hpdGUgKSB8fCBbXSApO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0aSA9IG5hbWUubGVuZ3RoO1xyXG5cclxuXHRcdFx0d2hpbGUgKCBpLS0gKSB7XHJcblx0XHRcdFx0ZGVsZXRlIGNhY2hlWyBuYW1lWyBpIF0gXTtcclxuXHRcdFx0fVxyXG5cdFx0fVxyXG5cclxuXHRcdC8vIFJlbW92ZSB0aGUgZXhwYW5kbyBpZiB0aGVyZSdzIG5vIG1vcmUgZGF0YVxyXG5cdFx0aWYgKCBrZXkgPT09IHVuZGVmaW5lZCB8fCBqUXVlcnkuaXNFbXB0eU9iamVjdCggY2FjaGUgKSApIHtcclxuXHJcblx0XHRcdC8vIFN1cHBvcnQ6IENocm9tZSA8PSAzNS00NStcclxuXHRcdFx0Ly8gV2Via2l0ICYgQmxpbmsgcGVyZm9ybWFuY2Ugc3VmZmVycyB3aGVuIGRlbGV0aW5nIHByb3BlcnRpZXNcclxuXHRcdFx0Ly8gZnJvbSBET00gbm9kZXMsIHNvIHNldCB0byB1bmRlZmluZWQgaW5zdGVhZFxyXG5cdFx0XHQvLyBodHRwczovL2NvZGUuZ29vZ2xlLmNvbS9wL2Nocm9taXVtL2lzc3Vlcy9kZXRhaWw/aWQ9Mzc4NjA3XHJcblx0XHRcdGlmICggb3duZXIubm9kZVR5cGUgKSB7XHJcblx0XHRcdFx0b3duZXJbIHRoaXMuZXhwYW5kbyBdID0gdW5kZWZpbmVkO1xyXG5cdFx0XHR9IGVsc2Uge1xyXG5cdFx0XHRcdGRlbGV0ZSBvd25lclsgdGhpcy5leHBhbmRvIF07XHJcblx0XHRcdH1cclxuXHRcdH1cclxuXHR9LFxyXG5cdGhhc0RhdGE6IGZ1bmN0aW9uKCBvd25lciApIHtcclxuXHRcdHZhciBjYWNoZSA9IG93bmVyWyB0aGlzLmV4cGFuZG8gXTtcclxuXHRcdHJldHVybiBjYWNoZSAhPT0gdW5kZWZpbmVkICYmICFqUXVlcnkuaXNFbXB0eU9iamVjdCggY2FjaGUgKTtcclxuXHR9XHJcbn07XHJcbnZhciBkYXRhUHJpdiA9IG5ldyBEYXRhKCk7XHJcblxyXG52YXIgZGF0YVVzZXIgPSBuZXcgRGF0YSgpO1xyXG5cclxuXHJcblxyXG4vL1x0SW1wbGVtZW50YXRpb24gU3VtbWFyeVxyXG4vL1xyXG4vL1x0MS4gRW5mb3JjZSBBUEkgc3VyZmFjZSBhbmQgc2VtYW50aWMgY29tcGF0aWJpbGl0eSB3aXRoIDEuOS54IGJyYW5jaFxyXG4vL1x0Mi4gSW1wcm92ZSB0aGUgbW9kdWxlJ3MgbWFpbnRhaW5hYmlsaXR5IGJ5IHJlZHVjaW5nIHRoZSBzdG9yYWdlXHJcbi8vXHRcdHBhdGhzIHRvIGEgc2luZ2xlIG1lY2hhbmlzbS5cclxuLy9cdDMuIFVzZSB0aGUgc2FtZSBzaW5nbGUgbWVjaGFuaXNtIHRvIHN1cHBvcnQgXCJwcml2YXRlXCIgYW5kIFwidXNlclwiIGRhdGEuXHJcbi8vXHQ0LiBfTmV2ZXJfIGV4cG9zZSBcInByaXZhdGVcIiBkYXRhIHRvIHVzZXIgY29kZSAoVE9ETzogRHJvcCBfZGF0YSwgX3JlbW92ZURhdGEpXHJcbi8vXHQ1LiBBdm9pZCBleHBvc2luZyBpbXBsZW1lbnRhdGlvbiBkZXRhaWxzIG9uIHVzZXIgb2JqZWN0cyAoZWcuIGV4cGFuZG8gcHJvcGVydGllcylcclxuLy9cdDYuIFByb3ZpZGUgYSBjbGVhciBwYXRoIGZvciBpbXBsZW1lbnRhdGlvbiB1cGdyYWRlIHRvIFdlYWtNYXAgaW4gMjAxNFxyXG5cclxudmFyIHJicmFjZSA9IC9eKD86XFx7W1xcd1xcV10qXFx9fFxcW1tcXHdcXFddKlxcXSkkLyxcclxuXHRybXVsdGlEYXNoID0gL1tBLVpdL2c7XHJcblxyXG5mdW5jdGlvbiBkYXRhQXR0ciggZWxlbSwga2V5LCBkYXRhICkge1xyXG5cdHZhciBuYW1lO1xyXG5cclxuXHQvLyBJZiBub3RoaW5nIHdhcyBmb3VuZCBpbnRlcm5hbGx5LCB0cnkgdG8gZmV0Y2ggYW55XHJcblx0Ly8gZGF0YSBmcm9tIHRoZSBIVE1MNSBkYXRhLSogYXR0cmlidXRlXHJcblx0aWYgKCBkYXRhID09PSB1bmRlZmluZWQgJiYgZWxlbS5ub2RlVHlwZSA9PT0gMSApIHtcclxuXHRcdG5hbWUgPSBcImRhdGEtXCIgKyBrZXkucmVwbGFjZSggcm11bHRpRGFzaCwgXCItJCZcIiApLnRvTG93ZXJDYXNlKCk7XHJcblx0XHRkYXRhID0gZWxlbS5nZXRBdHRyaWJ1dGUoIG5hbWUgKTtcclxuXHJcblx0XHRpZiAoIHR5cGVvZiBkYXRhID09PSBcInN0cmluZ1wiICkge1xyXG5cdFx0XHR0cnkge1xyXG5cdFx0XHRcdGRhdGEgPSBkYXRhID09PSBcInRydWVcIiA/IHRydWUgOlxyXG5cdFx0XHRcdFx0ZGF0YSA9PT0gXCJmYWxzZVwiID8gZmFsc2UgOlxyXG5cdFx0XHRcdFx0ZGF0YSA9PT0gXCJudWxsXCIgPyBudWxsIDpcclxuXHJcblx0XHRcdFx0XHQvLyBPbmx5IGNvbnZlcnQgdG8gYSBudW1iZXIgaWYgaXQgZG9lc24ndCBjaGFuZ2UgdGhlIHN0cmluZ1xyXG5cdFx0XHRcdFx0K2RhdGEgKyBcIlwiID09PSBkYXRhID8gK2RhdGEgOlxyXG5cdFx0XHRcdFx0cmJyYWNlLnRlc3QoIGRhdGEgKSA/IGpRdWVyeS5wYXJzZUpTT04oIGRhdGEgKSA6XHJcblx0XHRcdFx0XHRkYXRhO1xyXG5cdFx0XHR9IGNhdGNoICggZSApIHt9XHJcblxyXG5cdFx0XHQvLyBNYWtlIHN1cmUgd2Ugc2V0IHRoZSBkYXRhIHNvIGl0IGlzbid0IGNoYW5nZWQgbGF0ZXJcclxuXHRcdFx0ZGF0YVVzZXIuc2V0KCBlbGVtLCBrZXksIGRhdGEgKTtcclxuXHRcdH0gZWxzZSB7XHJcblx0XHRcdGRhdGEgPSB1bmRlZmluZWQ7XHJcblx0XHR9XHJcblx0fVxyXG5cdHJldHVybiBkYXRhO1xyXG59XHJcblxyXG5qUXVlcnkuZXh0ZW5kKCB7XHJcblx0aGFzRGF0YTogZnVuY3Rpb24oIGVsZW0gKSB7XHJcblx0XHRyZXR1cm4gZGF0YVVzZXIuaGFzRGF0YSggZWxlbSApIHx8IGRhdGFQcml2Lmhhc0RhdGEoIGVsZW0gKTtcclxuXHR9LFxyXG5cclxuXHRkYXRhOiBmdW5jdGlvbiggZWxlbSwgbmFtZSwgZGF0YSApIHtcclxuXHRcdHJldHVybiBkYXRhVXNlci5hY2Nlc3MoIGVsZW0sIG5hbWUsIGRhdGEgKTtcclxuXHR9LFxyXG5cclxuXHRyZW1vdmVEYXRhOiBmdW5jdGlvbiggZWxlbSwgbmFtZSApIHtcclxuXHRcdGRhdGFVc2VyLnJlbW92ZSggZWxlbSwgbmFtZSApO1xyXG5cdH0sXHJcblxyXG5cdC8vIFRPRE86IE5vdyB0aGF0IGFsbCBjYWxscyB0byBfZGF0YSBhbmQgX3JlbW92ZURhdGEgaGF2ZSBiZWVuIHJlcGxhY2VkXHJcblx0Ly8gd2l0aCBkaXJlY3QgY2FsbHMgdG8gZGF0YVByaXYgbWV0aG9kcywgdGhlc2UgY2FuIGJlIGRlcHJlY2F0ZWQuXHJcblx0X2RhdGE6IGZ1bmN0aW9uKCBlbGVtLCBuYW1lLCBkYXRhICkge1xyXG5cdFx0cmV0dXJuIGRhdGFQcml2LmFjY2VzcyggZWxlbSwgbmFtZSwgZGF0YSApO1xyXG5cdH0sXHJcblxyXG5cdF9yZW1vdmVEYXRhOiBmdW5jdGlvbiggZWxlbSwgbmFtZSApIHtcclxuXHRcdGRhdGFQcml2LnJlbW92ZSggZWxlbSwgbmFtZSApO1xyXG5cdH1cclxufSApO1xyXG5cclxualF1ZXJ5LmZuLmV4dGVuZCgge1xyXG5cdGRhdGE6IGZ1bmN0aW9uKCBrZXksIHZhbHVlICkge1xyXG5cdFx0dmFyIGksIG5hbWUsIGRhdGEsXHJcblx0XHRcdGVsZW0gPSB0aGlzWyAwIF0sXHJcblx0XHRcdGF0dHJzID0gZWxlbSAmJiBlbGVtLmF0dHJpYnV0ZXM7XHJcblxyXG5cdFx0Ly8gR2V0cyBhbGwgdmFsdWVzXHJcblx0XHRpZiAoIGtleSA9PT0gdW5kZWZpbmVkICkge1xyXG5cdFx0XHRpZiAoIHRoaXMubGVuZ3RoICkge1xyXG5cdFx0XHRcdGRhdGEgPSBkYXRhVXNlci5nZXQoIGVsZW0gKTtcclxuXHJcblx0XHRcdFx0aWYgKCBlbGVtLm5vZGVUeXBlID09PSAxICYmICFkYXRhUHJpdi5nZXQoIGVsZW0sIFwiaGFzRGF0YUF0dHJzXCIgKSApIHtcclxuXHRcdFx0XHRcdGkgPSBhdHRycy5sZW5ndGg7XHJcblx0XHRcdFx0XHR3aGlsZSAoIGktLSApIHtcclxuXHJcblx0XHRcdFx0XHRcdC8vIFN1cHBvcnQ6IElFMTErXHJcblx0XHRcdFx0XHRcdC8vIFRoZSBhdHRycyBlbGVtZW50cyBjYW4gYmUgbnVsbCAoIzE0ODk0KVxyXG5cdFx0XHRcdFx0XHRpZiAoIGF0dHJzWyBpIF0gKSB7XHJcblx0XHRcdFx0XHRcdFx0bmFtZSA9IGF0dHJzWyBpIF0ubmFtZTtcclxuXHRcdFx0XHRcdFx0XHRpZiAoIG5hbWUuaW5kZXhPZiggXCJkYXRhLVwiICkgPT09IDAgKSB7XHJcblx0XHRcdFx0XHRcdFx0XHRuYW1lID0galF1ZXJ5LmNhbWVsQ2FzZSggbmFtZS5zbGljZSggNSApICk7XHJcblx0XHRcdFx0XHRcdFx0XHRkYXRhQXR0ciggZWxlbSwgbmFtZSwgZGF0YVsgbmFtZSBdICk7XHJcblx0XHRcdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHRkYXRhUHJpdi5zZXQoIGVsZW0sIFwiaGFzRGF0YUF0dHJzXCIsIHRydWUgKTtcclxuXHRcdFx0XHR9XHJcblx0XHRcdH1cclxuXHJcblx0XHRcdHJldHVybiBkYXRhO1xyXG5cdFx0fVxyXG5cclxuXHRcdC8vIFNldHMgbXVsdGlwbGUgdmFsdWVzXHJcblx0XHRpZiAoIHR5cGVvZiBrZXkgPT09IFwib2JqZWN0XCIgKSB7XHJcblx0XHRcdHJldHVybiB0aGlzLmVhY2goIGZ1bmN0aW9uKCkge1xyXG5cdFx0XHRcdGRhdGFVc2VyLnNldCggdGhpcywga2V5ICk7XHJcblx0XHRcdH0gKTtcclxuXHRcdH1cclxuXHJcblx0XHRyZXR1cm4gYWNjZXNzKCB0aGlzLCBmdW5jdGlvbiggdmFsdWUgKSB7XHJcblx0XHRcdHZhciBkYXRhLCBjYW1lbEtleTtcclxuXHJcblx0XHRcdC8vIFRoZSBjYWxsaW5nIGpRdWVyeSBvYmplY3QgKGVsZW1lbnQgbWF0Y2hlcykgaXMgbm90IGVtcHR5XHJcblx0XHRcdC8vIChhbmQgdGhlcmVmb3JlIGhhcyBhbiBlbGVtZW50IGFwcGVhcnMgYXQgdGhpc1sgMCBdKSBhbmQgdGhlXHJcblx0XHRcdC8vIGB2YWx1ZWAgcGFyYW1ldGVyIHdhcyBub3QgdW5kZWZpbmVkLiBBbiBlbXB0eSBqUXVlcnkgb2JqZWN0XHJcblx0XHRcdC8vIHdpbGwgcmVzdWx0IGluIGB1bmRlZmluZWRgIGZvciBlbGVtID0gdGhpc1sgMCBdIHdoaWNoIHdpbGxcclxuXHRcdFx0Ly8gdGhyb3cgYW4gZXhjZXB0aW9uIGlmIGFuIGF0dGVtcHQgdG8gcmVhZCBhIGRhdGEgY2FjaGUgaXMgbWFkZS5cclxuXHRcdFx0aWYgKCBlbGVtICYmIHZhbHVlID09PSB1bmRlZmluZWQgKSB7XHJcblxyXG5cdFx0XHRcdC8vIEF0dGVtcHQgdG8gZ2V0IGRhdGEgZnJvbSB0aGUgY2FjaGVcclxuXHRcdFx0XHQvLyB3aXRoIHRoZSBrZXkgYXMtaXNcclxuXHRcdFx0XHRkYXRhID0gZGF0YVVzZXIuZ2V0KCBlbGVtLCBrZXkgKSB8fFxyXG5cclxuXHRcdFx0XHRcdC8vIFRyeSB0byBmaW5kIGRhc2hlZCBrZXkgaWYgaXQgZXhpc3RzIChnaC0yNzc5KVxyXG5cdFx0XHRcdFx0Ly8gVGhpcyBpcyBmb3IgMi4yLnggb25seVxyXG5cdFx0XHRcdFx0ZGF0YVVzZXIuZ2V0KCBlbGVtLCBrZXkucmVwbGFjZSggcm11bHRpRGFzaCwgXCItJCZcIiApLnRvTG93ZXJDYXNlKCkgKTtcclxuXHJcblx0XHRcdFx0aWYgKCBkYXRhICE9PSB1bmRlZmluZWQgKSB7XHJcblx0XHRcdFx0XHRyZXR1cm4gZGF0YTtcclxuXHRcdFx0XHR9XHJcblxyXG5cdFx0XHRcdGNhbWVsS2V5ID0galF1ZXJ5LmNhbWVsQ2FzZSgga2V5ICk7XHJcblxyXG5cdFx0XHRcdC8vIEF0dGVtcHQgdG8gZ2V0IGRhdGEgZnJvbSB0aGUgY2FjaGVcclxuXHRcdFx0XHQvLyB3aXRoIHRoZSBrZXkgY2FtZWxpemVkXHJcblx0XHRcdFx0ZGF0YSA9IGRhdGFVc2VyLmdldCggZWxlbSwgY2FtZWxLZXkgKTtcclxuXHRcdFx0XHRpZiAoIGRhdGEgIT09IHVuZGVmaW5lZCApIHtcclxuXHRcdFx0XHRcdHJldHVybiBkYXRhO1xyXG5cdFx0XHRcdH1cclxuXHJcblx0XHRcdFx0Ly8gQXR0ZW1wdCB0byBcImRpc2NvdmVyXCIgdGhlIGRhdGEgaW5cclxuXHRcdFx0XHQvLyBIVE1MNSBjdXN0b20gZGF0YS0qIGF0dHJzXHJcblx0XHRcdFx0ZGF0YSA9IGRhdGFBdHRyKCBlbGVtLCBjYW1lbEtleSwgdW5kZWZpbmVkICk7XHJcblx0XHRcdFx0aWYgKCBkYXRhICE9PSB1bmRlZmluZWQgKSB7XHJcblx0XHRcdFx0XHRyZXR1cm4gZGF0YTtcclxuXHRcdFx0XHR9XHJcblxyXG5cdFx0XHRcdC8vIFdlIHRyaWVkIHJlYWxseSBoYXJkLCBidXQgdGhlIGRhdGEgZG9lc24ndCBleGlzdC5cclxuXHRcdFx0XHRyZXR1cm47XHJcblx0XHRcdH1cclxuXHJcblx0XHRcdC8vIFNldCB0aGUgZGF0YS4uLlxyXG5cdFx0XHRjYW1lbEtleSA9IGpRdWVyeS5jYW1lbENhc2UoIGtleSApO1xyXG5cdFx0XHR0aGlzLmVhY2goIGZ1bmN0aW9uKCkge1xyXG5cclxuXHRcdFx0XHQvLyBGaXJzdCwgYXR0ZW1wdCB0byBzdG9yZSBhIGNvcHkgb3IgcmVmZXJlbmNlIG9mIGFueVxyXG5cdFx0XHRcdC8vIGRhdGEgdGhhdCBtaWdodCd2ZSBiZWVuIHN0b3JlIHdpdGggYSBjYW1lbENhc2VkIGtleS5cclxuXHRcdFx0XHR2YXIgZGF0YSA9IGRhdGFVc2VyLmdldCggdGhpcywgY2FtZWxLZXkgKTtcclxuXHJcblx0XHRcdFx0Ly8gRm9yIEhUTUw1IGRhdGEtKiBhdHRyaWJ1dGUgaW50ZXJvcCwgd2UgaGF2ZSB0b1xyXG5cdFx0XHRcdC8vIHN0b3JlIHByb3BlcnR5IG5hbWVzIHdpdGggZGFzaGVzIGluIGEgY2FtZWxDYXNlIGZvcm0uXHJcblx0XHRcdFx0Ly8gVGhpcyBtaWdodCBub3QgYXBwbHkgdG8gYWxsIHByb3BlcnRpZXMuLi4qXHJcblx0XHRcdFx0ZGF0YVVzZXIuc2V0KCB0aGlzLCBjYW1lbEtleSwgdmFsdWUgKTtcclxuXHJcblx0XHRcdFx0Ly8gKi4uLiBJbiB0aGUgY2FzZSBvZiBwcm9wZXJ0aWVzIHRoYXQgbWlnaHQgX2FjdHVhbGx5X1xyXG5cdFx0XHRcdC8vIGhhdmUgZGFzaGVzLCB3ZSBuZWVkIHRvIGFsc28gc3RvcmUgYSBjb3B5IG9mIHRoYXRcclxuXHRcdFx0XHQvLyB1bmNoYW5nZWQgcHJvcGVydHkuXHJcblx0XHRcdFx0aWYgKCBrZXkuaW5kZXhPZiggXCItXCIgKSA+IC0xICYmIGRhdGEgIT09IHVuZGVmaW5lZCApIHtcclxuXHRcdFx0XHRcdGRhdGFVc2VyLnNldCggdGhpcywga2V5LCB2YWx1ZSApO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0fSApO1xyXG5cdFx0fSwgbnVsbCwgdmFsdWUsIGFyZ3VtZW50cy5sZW5ndGggPiAxLCBudWxsLCB0cnVlICk7XHJcblx0fSxcclxuXHJcblx0cmVtb3ZlRGF0YTogZnVuY3Rpb24oIGtleSApIHtcclxuXHRcdHJldHVybiB0aGlzLmVhY2goIGZ1bmN0aW9uKCkge1xyXG5cdFx0XHRkYXRhVXNlci5yZW1vdmUoIHRoaXMsIGtleSApO1xyXG5cdFx0fSApO1xyXG5cdH1cclxufSApO1xyXG5cclxuXHJcbmpRdWVyeS5leHRlbmQoIHtcclxuXHRxdWV1ZTogZnVuY3Rpb24oIGVsZW0sIHR5cGUsIGRhdGEgKSB7XHJcblx0XHR2YXIgcXVldWU7XHJcblxyXG5cdFx0aWYgKCBlbGVtICkge1xyXG5cdFx0XHR0eXBlID0gKCB0eXBlIHx8IFwiZnhcIiApICsgXCJxdWV1ZVwiO1xyXG5cdFx0XHRxdWV1ZSA9IGRhdGFQcml2LmdldCggZWxlbSwgdHlwZSApO1xyXG5cclxuXHRcdFx0Ly8gU3BlZWQgdXAgZGVxdWV1ZSBieSBnZXR0aW5nIG91dCBxdWlja2x5IGlmIHRoaXMgaXMganVzdCBhIGxvb2t1cFxyXG5cdFx0XHRpZiAoIGRhdGEgKSB7XHJcblx0XHRcdFx0aWYgKCAhcXVldWUgfHwgalF1ZXJ5LmlzQXJyYXkoIGRhdGEgKSApIHtcclxuXHRcdFx0XHRcdHF1ZXVlID0gZGF0YVByaXYuYWNjZXNzKCBlbGVtLCB0eXBlLCBqUXVlcnkubWFrZUFycmF5KCBkYXRhICkgKTtcclxuXHRcdFx0XHR9IGVsc2Uge1xyXG5cdFx0XHRcdFx0cXVldWUucHVzaCggZGF0YSApO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0fVxyXG5cdFx0XHRyZXR1cm4gcXVldWUgfHwgW107XHJcblx0XHR9XHJcblx0fSxcclxuXHJcblx0ZGVxdWV1ZTogZnVuY3Rpb24oIGVsZW0sIHR5cGUgKSB7XHJcblx0XHR0eXBlID0gdHlwZSB8fCBcImZ4XCI7XHJcblxyXG5cdFx0dmFyIHF1ZXVlID0galF1ZXJ5LnF1ZXVlKCBlbGVtLCB0eXBlICksXHJcblx0XHRcdHN0YXJ0TGVuZ3RoID0gcXVldWUubGVuZ3RoLFxyXG5cdFx0XHRmbiA9IHF1ZXVlLnNoaWZ0KCksXHJcblx0XHRcdGhvb2tzID0galF1ZXJ5Ll9xdWV1ZUhvb2tzKCBlbGVtLCB0eXBlICksXHJcblx0XHRcdG5leHQgPSBmdW5jdGlvbigpIHtcclxuXHRcdFx0XHRqUXVlcnkuZGVxdWV1ZSggZWxlbSwgdHlwZSApO1xyXG5cdFx0XHR9O1xyXG5cclxuXHRcdC8vIElmIHRoZSBmeCBxdWV1ZSBpcyBkZXF1ZXVlZCwgYWx3YXlzIHJlbW92ZSB0aGUgcHJvZ3Jlc3Mgc2VudGluZWxcclxuXHRcdGlmICggZm4gPT09IFwiaW5wcm9ncmVzc1wiICkge1xyXG5cdFx0XHRmbiA9IHF1ZXVlLnNoaWZ0KCk7XHJcblx0XHRcdHN0YXJ0TGVuZ3RoLS07XHJcblx0XHR9XHJcblxyXG5cdFx0aWYgKCBmbiApIHtcclxuXHJcblx0XHRcdC8vIEFkZCBhIHByb2dyZXNzIHNlbnRpbmVsIHRvIHByZXZlbnQgdGhlIGZ4IHF1ZXVlIGZyb20gYmVpbmdcclxuXHRcdFx0Ly8gYXV0b21hdGljYWxseSBkZXF1ZXVlZFxyXG5cdFx0XHRpZiAoIHR5cGUgPT09IFwiZnhcIiApIHtcclxuXHRcdFx0XHRxdWV1ZS51bnNoaWZ0KCBcImlucHJvZ3Jlc3NcIiApO1xyXG5cdFx0XHR9XHJcblxyXG5cdFx0XHQvLyBDbGVhciB1cCB0aGUgbGFzdCBxdWV1ZSBzdG9wIGZ1bmN0aW9uXHJcblx0XHRcdGRlbGV0ZSBob29rcy5zdG9wO1xyXG5cdFx0XHRmbi5jYWxsKCBlbGVtLCBuZXh0LCBob29rcyApO1xyXG5cdFx0fVxyXG5cclxuXHRcdGlmICggIXN0YXJ0TGVuZ3RoICYmIGhvb2tzICkge1xyXG5cdFx0XHRob29rcy5lbXB0eS5maXJlKCk7XHJcblx0XHR9XHJcblx0fSxcclxuXHJcblx0Ly8gTm90IHB1YmxpYyAtIGdlbmVyYXRlIGEgcXVldWVIb29rcyBvYmplY3QsIG9yIHJldHVybiB0aGUgY3VycmVudCBvbmVcclxuXHRfcXVldWVIb29rczogZnVuY3Rpb24oIGVsZW0sIHR5cGUgKSB7XHJcblx0XHR2YXIga2V5ID0gdHlwZSArIFwicXVldWVIb29rc1wiO1xyXG5cdFx0cmV0dXJuIGRhdGFQcml2LmdldCggZWxlbSwga2V5ICkgfHwgZGF0YVByaXYuYWNjZXNzKCBlbGVtLCBrZXksIHtcclxuXHRcdFx0ZW1wdHk6IGpRdWVyeS5DYWxsYmFja3MoIFwib25jZSBtZW1vcnlcIiApLmFkZCggZnVuY3Rpb24oKSB7XHJcblx0XHRcdFx0ZGF0YVByaXYucmVtb3ZlKCBlbGVtLCBbIHR5cGUgKyBcInF1ZXVlXCIsIGtleSBdICk7XHJcblx0XHRcdH0gKVxyXG5cdFx0fSApO1xyXG5cdH1cclxufSApO1xyXG5cclxualF1ZXJ5LmZuLmV4dGVuZCgge1xyXG5cdHF1ZXVlOiBmdW5jdGlvbiggdHlwZSwgZGF0YSApIHtcclxuXHRcdHZhciBzZXR0ZXIgPSAyO1xyXG5cclxuXHRcdGlmICggdHlwZW9mIHR5cGUgIT09IFwic3RyaW5nXCIgKSB7XHJcblx0XHRcdGRhdGEgPSB0eXBlO1xyXG5cdFx0XHR0eXBlID0gXCJmeFwiO1xyXG5cdFx0XHRzZXR0ZXItLTtcclxuXHRcdH1cclxuXHJcblx0XHRpZiAoIGFyZ3VtZW50cy5sZW5ndGggPCBzZXR0ZXIgKSB7XHJcblx0XHRcdHJldHVybiBqUXVlcnkucXVldWUoIHRoaXNbIDAgXSwgdHlwZSApO1xyXG5cdFx0fVxyXG5cclxuXHRcdHJldHVybiBkYXRhID09PSB1bmRlZmluZWQgP1xyXG5cdFx0XHR0aGlzIDpcclxuXHRcdFx0dGhpcy5lYWNoKCBmdW5jdGlvbigpIHtcclxuXHRcdFx0XHR2YXIgcXVldWUgPSBqUXVlcnkucXVldWUoIHRoaXMsIHR5cGUsIGRhdGEgKTtcclxuXHJcblx0XHRcdFx0Ly8gRW5zdXJlIGEgaG9va3MgZm9yIHRoaXMgcXVldWVcclxuXHRcdFx0XHRqUXVlcnkuX3F1ZXVlSG9va3MoIHRoaXMsIHR5cGUgKTtcclxuXHJcblx0XHRcdFx0aWYgKCB0eXBlID09PSBcImZ4XCIgJiYgcXVldWVbIDAgXSAhPT0gXCJpbnByb2dyZXNzXCIgKSB7XHJcblx0XHRcdFx0XHRqUXVlcnkuZGVxdWV1ZSggdGhpcywgdHlwZSApO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0fSApO1xyXG5cdH0sXHJcblx0ZGVxdWV1ZTogZnVuY3Rpb24oIHR5cGUgKSB7XHJcblx0XHRyZXR1cm4gdGhpcy5lYWNoKCBmdW5jdGlvbigpIHtcclxuXHRcdFx0alF1ZXJ5LmRlcXVldWUoIHRoaXMsIHR5cGUgKTtcclxuXHRcdH0gKTtcclxuXHR9LFxyXG5cdGNsZWFyUXVldWU6IGZ1bmN0aW9uKCB0eXBlICkge1xyXG5cdFx0cmV0dXJuIHRoaXMucXVldWUoIHR5cGUgfHwgXCJmeFwiLCBbXSApO1xyXG5cdH0sXHJcblxyXG5cdC8vIEdldCBhIHByb21pc2UgcmVzb2x2ZWQgd2hlbiBxdWV1ZXMgb2YgYSBjZXJ0YWluIHR5cGVcclxuXHQvLyBhcmUgZW1wdGllZCAoZnggaXMgdGhlIHR5cGUgYnkgZGVmYXVsdClcclxuXHRwcm9taXNlOiBmdW5jdGlvbiggdHlwZSwgb2JqICkge1xyXG5cdFx0dmFyIHRtcCxcclxuXHRcdFx0Y291bnQgPSAxLFxyXG5cdFx0XHRkZWZlciA9IGpRdWVyeS5EZWZlcnJlZCgpLFxyXG5cdFx0XHRlbGVtZW50cyA9IHRoaXMsXHJcblx0XHRcdGkgPSB0aGlzLmxlbmd0aCxcclxuXHRcdFx0cmVzb2x2ZSA9IGZ1bmN0aW9uKCkge1xyXG5cdFx0XHRcdGlmICggISggLS1jb3VudCApICkge1xyXG5cdFx0XHRcdFx0ZGVmZXIucmVzb2x2ZVdpdGgoIGVsZW1lbnRzLCBbIGVsZW1lbnRzIF0gKTtcclxuXHRcdFx0XHR9XHJcblx0XHRcdH07XHJcblxyXG5cdFx0aWYgKCB0eXBlb2YgdHlwZSAhPT0gXCJzdHJpbmdcIiApIHtcclxuXHRcdFx0b2JqID0gdHlwZTtcclxuXHRcdFx0dHlwZSA9IHVuZGVmaW5lZDtcclxuXHRcdH1cclxuXHRcdHR5cGUgPSB0eXBlIHx8IFwiZnhcIjtcclxuXHJcblx0XHR3aGlsZSAoIGktLSApIHtcclxuXHRcdFx0dG1wID0gZGF0YVByaXYuZ2V0KCBlbGVtZW50c1sgaSBdLCB0eXBlICsgXCJxdWV1ZUhvb2tzXCIgKTtcclxuXHRcdFx0aWYgKCB0bXAgJiYgdG1wLmVtcHR5ICkge1xyXG5cdFx0XHRcdGNvdW50Kys7XHJcblx0XHRcdFx0dG1wLmVtcHR5LmFkZCggcmVzb2x2ZSApO1xyXG5cdFx0XHR9XHJcblx0XHR9XHJcblx0XHRyZXNvbHZlKCk7XHJcblx0XHRyZXR1cm4gZGVmZXIucHJvbWlzZSggb2JqICk7XHJcblx0fVxyXG59ICk7XHJcbnZhciBwbnVtID0gKCAvWystXT8oPzpcXGQqXFwufClcXGQrKD86W2VFXVsrLV0/XFxkK3wpLyApLnNvdXJjZTtcclxuXHJcbnZhciByY3NzTnVtID0gbmV3IFJlZ0V4cCggXCJeKD86KFsrLV0pPXwpKFwiICsgcG51bSArIFwiKShbYS16JV0qKSRcIiwgXCJpXCIgKTtcclxuXHJcblxyXG52YXIgY3NzRXhwYW5kID0gWyBcIlRvcFwiLCBcIlJpZ2h0XCIsIFwiQm90dG9tXCIsIFwiTGVmdFwiIF07XHJcblxyXG52YXIgaXNIaWRkZW4gPSBmdW5jdGlvbiggZWxlbSwgZWwgKSB7XHJcblxyXG5cdFx0Ly8gaXNIaWRkZW4gbWlnaHQgYmUgY2FsbGVkIGZyb20galF1ZXJ5I2ZpbHRlciBmdW5jdGlvbjtcclxuXHRcdC8vIGluIHRoYXQgY2FzZSwgZWxlbWVudCB3aWxsIGJlIHNlY29uZCBhcmd1bWVudFxyXG5cdFx0ZWxlbSA9IGVsIHx8IGVsZW07XHJcblx0XHRyZXR1cm4galF1ZXJ5LmNzcyggZWxlbSwgXCJkaXNwbGF5XCIgKSA9PT0gXCJub25lXCIgfHxcclxuXHRcdFx0IWpRdWVyeS5jb250YWlucyggZWxlbS5vd25lckRvY3VtZW50LCBlbGVtICk7XHJcblx0fTtcclxuXHJcblxyXG5cclxuZnVuY3Rpb24gYWRqdXN0Q1NTKCBlbGVtLCBwcm9wLCB2YWx1ZVBhcnRzLCB0d2VlbiApIHtcclxuXHR2YXIgYWRqdXN0ZWQsXHJcblx0XHRzY2FsZSA9IDEsXHJcblx0XHRtYXhJdGVyYXRpb25zID0gMjAsXHJcblx0XHRjdXJyZW50VmFsdWUgPSB0d2VlbiA/XHJcblx0XHRcdGZ1bmN0aW9uKCkgeyByZXR1cm4gdHdlZW4uY3VyKCk7IH0gOlxyXG5cdFx0XHRmdW5jdGlvbigpIHsgcmV0dXJuIGpRdWVyeS5jc3MoIGVsZW0sIHByb3AsIFwiXCIgKTsgfSxcclxuXHRcdGluaXRpYWwgPSBjdXJyZW50VmFsdWUoKSxcclxuXHRcdHVuaXQgPSB2YWx1ZVBhcnRzICYmIHZhbHVlUGFydHNbIDMgXSB8fCAoIGpRdWVyeS5jc3NOdW1iZXJbIHByb3AgXSA/IFwiXCIgOiBcInB4XCIgKSxcclxuXHJcblx0XHQvLyBTdGFydGluZyB2YWx1ZSBjb21wdXRhdGlvbiBpcyByZXF1aXJlZCBmb3IgcG90ZW50aWFsIHVuaXQgbWlzbWF0Y2hlc1xyXG5cdFx0aW5pdGlhbEluVW5pdCA9ICggalF1ZXJ5LmNzc051bWJlclsgcHJvcCBdIHx8IHVuaXQgIT09IFwicHhcIiAmJiAraW5pdGlhbCApICYmXHJcblx0XHRcdHJjc3NOdW0uZXhlYyggalF1ZXJ5LmNzcyggZWxlbSwgcHJvcCApICk7XHJcblxyXG5cdGlmICggaW5pdGlhbEluVW5pdCAmJiBpbml0aWFsSW5Vbml0WyAzIF0gIT09IHVuaXQgKSB7XHJcblxyXG5cdFx0Ly8gVHJ1c3QgdW5pdHMgcmVwb3J0ZWQgYnkgalF1ZXJ5LmNzc1xyXG5cdFx0dW5pdCA9IHVuaXQgfHwgaW5pdGlhbEluVW5pdFsgMyBdO1xyXG5cclxuXHRcdC8vIE1ha2Ugc3VyZSB3ZSB1cGRhdGUgdGhlIHR3ZWVuIHByb3BlcnRpZXMgbGF0ZXIgb25cclxuXHRcdHZhbHVlUGFydHMgPSB2YWx1ZVBhcnRzIHx8IFtdO1xyXG5cclxuXHRcdC8vIEl0ZXJhdGl2ZWx5IGFwcHJveGltYXRlIGZyb20gYSBub256ZXJvIHN0YXJ0aW5nIHBvaW50XHJcblx0XHRpbml0aWFsSW5Vbml0ID0gK2luaXRpYWwgfHwgMTtcclxuXHJcblx0XHRkbyB7XHJcblxyXG5cdFx0XHQvLyBJZiBwcmV2aW91cyBpdGVyYXRpb24gemVyb2VkIG91dCwgZG91YmxlIHVudGlsIHdlIGdldCAqc29tZXRoaW5nKi5cclxuXHRcdFx0Ly8gVXNlIHN0cmluZyBmb3IgZG91Ymxpbmcgc28gd2UgZG9uJ3QgYWNjaWRlbnRhbGx5IHNlZSBzY2FsZSBhcyB1bmNoYW5nZWQgYmVsb3dcclxuXHRcdFx0c2NhbGUgPSBzY2FsZSB8fCBcIi41XCI7XHJcblxyXG5cdFx0XHQvLyBBZGp1c3QgYW5kIGFwcGx5XHJcblx0XHRcdGluaXRpYWxJblVuaXQgPSBpbml0aWFsSW5Vbml0IC8gc2NhbGU7XHJcblx0XHRcdGpRdWVyeS5zdHlsZSggZWxlbSwgcHJvcCwgaW5pdGlhbEluVW5pdCArIHVuaXQgKTtcclxuXHJcblx0XHQvLyBVcGRhdGUgc2NhbGUsIHRvbGVyYXRpbmcgemVybyBvciBOYU4gZnJvbSB0d2Vlbi5jdXIoKVxyXG5cdFx0Ly8gQnJlYWsgdGhlIGxvb3AgaWYgc2NhbGUgaXMgdW5jaGFuZ2VkIG9yIHBlcmZlY3QsIG9yIGlmIHdlJ3ZlIGp1c3QgaGFkIGVub3VnaC5cclxuXHRcdH0gd2hpbGUgKFxyXG5cdFx0XHRzY2FsZSAhPT0gKCBzY2FsZSA9IGN1cnJlbnRWYWx1ZSgpIC8gaW5pdGlhbCApICYmIHNjYWxlICE9PSAxICYmIC0tbWF4SXRlcmF0aW9uc1xyXG5cdFx0KTtcclxuXHR9XHJcblxyXG5cdGlmICggdmFsdWVQYXJ0cyApIHtcclxuXHRcdGluaXRpYWxJblVuaXQgPSAraW5pdGlhbEluVW5pdCB8fCAraW5pdGlhbCB8fCAwO1xyXG5cclxuXHRcdC8vIEFwcGx5IHJlbGF0aXZlIG9mZnNldCAoKz0vLT0pIGlmIHNwZWNpZmllZFxyXG5cdFx0YWRqdXN0ZWQgPSB2YWx1ZVBhcnRzWyAxIF0gP1xyXG5cdFx0XHRpbml0aWFsSW5Vbml0ICsgKCB2YWx1ZVBhcnRzWyAxIF0gKyAxICkgKiB2YWx1ZVBhcnRzWyAyIF0gOlxyXG5cdFx0XHQrdmFsdWVQYXJ0c1sgMiBdO1xyXG5cdFx0aWYgKCB0d2VlbiApIHtcclxuXHRcdFx0dHdlZW4udW5pdCA9IHVuaXQ7XHJcblx0XHRcdHR3ZWVuLnN0YXJ0ID0gaW5pdGlhbEluVW5pdDtcclxuXHRcdFx0dHdlZW4uZW5kID0gYWRqdXN0ZWQ7XHJcblx0XHR9XHJcblx0fVxyXG5cdHJldHVybiBhZGp1c3RlZDtcclxufVxyXG52YXIgcmNoZWNrYWJsZVR5cGUgPSAoIC9eKD86Y2hlY2tib3h8cmFkaW8pJC9pICk7XHJcblxyXG52YXIgcnRhZ05hbWUgPSAoIC88KFtcXHc6LV0rKS8gKTtcclxuXHJcbnZhciByc2NyaXB0VHlwZSA9ICggL14kfFxcLyg/OmphdmF8ZWNtYSlzY3JpcHQvaSApO1xyXG5cclxuXHJcblxyXG4vLyBXZSBoYXZlIHRvIGNsb3NlIHRoZXNlIHRhZ3MgdG8gc3VwcG9ydCBYSFRNTCAoIzEzMjAwKVxyXG52YXIgd3JhcE1hcCA9IHtcclxuXHJcblx0Ly8gU3VwcG9ydDogSUU5XHJcblx0b3B0aW9uOiBbIDEsIFwiPHNlbGVjdCBtdWx0aXBsZT0nbXVsdGlwbGUnPlwiLCBcIjwvc2VsZWN0PlwiIF0sXHJcblxyXG5cdC8vIFhIVE1MIHBhcnNlcnMgZG8gbm90IG1hZ2ljYWxseSBpbnNlcnQgZWxlbWVudHMgaW4gdGhlXHJcblx0Ly8gc2FtZSB3YXkgdGhhdCB0YWcgc291cCBwYXJzZXJzIGRvLiBTbyB3ZSBjYW5ub3Qgc2hvcnRlblxyXG5cdC8vIHRoaXMgYnkgb21pdHRpbmcgPHRib2R5PiBvciBvdGhlciByZXF1aXJlZCBlbGVtZW50cy5cclxuXHR0aGVhZDogWyAxLCBcIjx0YWJsZT5cIiwgXCI8L3RhYmxlPlwiIF0sXHJcblx0Y29sOiBbIDIsIFwiPHRhYmxlPjxjb2xncm91cD5cIiwgXCI8L2NvbGdyb3VwPjwvdGFibGU+XCIgXSxcclxuXHR0cjogWyAyLCBcIjx0YWJsZT48dGJvZHk+XCIsIFwiPC90Ym9keT48L3RhYmxlPlwiIF0sXHJcblx0dGQ6IFsgMywgXCI8dGFibGU+PHRib2R5Pjx0cj5cIiwgXCI8L3RyPjwvdGJvZHk+PC90YWJsZT5cIiBdLFxyXG5cclxuXHRfZGVmYXVsdDogWyAwLCBcIlwiLCBcIlwiIF1cclxufTtcclxuXHJcbi8vIFN1cHBvcnQ6IElFOVxyXG53cmFwTWFwLm9wdGdyb3VwID0gd3JhcE1hcC5vcHRpb247XHJcblxyXG53cmFwTWFwLnRib2R5ID0gd3JhcE1hcC50Zm9vdCA9IHdyYXBNYXAuY29sZ3JvdXAgPSB3cmFwTWFwLmNhcHRpb24gPSB3cmFwTWFwLnRoZWFkO1xyXG53cmFwTWFwLnRoID0gd3JhcE1hcC50ZDtcclxuXHJcblxyXG5mdW5jdGlvbiBnZXRBbGwoIGNvbnRleHQsIHRhZyApIHtcclxuXHJcblx0Ly8gU3VwcG9ydDogSUU5LTExK1xyXG5cdC8vIFVzZSB0eXBlb2YgdG8gYXZvaWQgemVyby1hcmd1bWVudCBtZXRob2QgaW52b2NhdGlvbiBvbiBob3N0IG9iamVjdHMgKCMxNTE1MSlcclxuXHR2YXIgcmV0ID0gdHlwZW9mIGNvbnRleHQuZ2V0RWxlbWVudHNCeVRhZ05hbWUgIT09IFwidW5kZWZpbmVkXCIgP1xyXG5cdFx0XHRjb250ZXh0LmdldEVsZW1lbnRzQnlUYWdOYW1lKCB0YWcgfHwgXCIqXCIgKSA6XHJcblx0XHRcdHR5cGVvZiBjb250ZXh0LnF1ZXJ5U2VsZWN0b3JBbGwgIT09IFwidW5kZWZpbmVkXCIgP1xyXG5cdFx0XHRcdGNvbnRleHQucXVlcnlTZWxlY3RvckFsbCggdGFnIHx8IFwiKlwiICkgOlxyXG5cdFx0XHRbXTtcclxuXHJcblx0cmV0dXJuIHRhZyA9PT0gdW5kZWZpbmVkIHx8IHRhZyAmJiBqUXVlcnkubm9kZU5hbWUoIGNvbnRleHQsIHRhZyApID9cclxuXHRcdGpRdWVyeS5tZXJnZSggWyBjb250ZXh0IF0sIHJldCApIDpcclxuXHRcdHJldDtcclxufVxyXG5cclxuXHJcbi8vIE1hcmsgc2NyaXB0cyBhcyBoYXZpbmcgYWxyZWFkeSBiZWVuIGV2YWx1YXRlZFxyXG5mdW5jdGlvbiBzZXRHbG9iYWxFdmFsKCBlbGVtcywgcmVmRWxlbWVudHMgKSB7XHJcblx0dmFyIGkgPSAwLFxyXG5cdFx0bCA9IGVsZW1zLmxlbmd0aDtcclxuXHJcblx0Zm9yICggOyBpIDwgbDsgaSsrICkge1xyXG5cdFx0ZGF0YVByaXYuc2V0KFxyXG5cdFx0XHRlbGVtc1sgaSBdLFxyXG5cdFx0XHRcImdsb2JhbEV2YWxcIixcclxuXHRcdFx0IXJlZkVsZW1lbnRzIHx8IGRhdGFQcml2LmdldCggcmVmRWxlbWVudHNbIGkgXSwgXCJnbG9iYWxFdmFsXCIgKVxyXG5cdFx0KTtcclxuXHR9XHJcbn1cclxuXHJcblxyXG52YXIgcmh0bWwgPSAvPHwmIz9cXHcrOy87XHJcblxyXG5mdW5jdGlvbiBidWlsZEZyYWdtZW50KCBlbGVtcywgY29udGV4dCwgc2NyaXB0cywgc2VsZWN0aW9uLCBpZ25vcmVkICkge1xyXG5cdHZhciBlbGVtLCB0bXAsIHRhZywgd3JhcCwgY29udGFpbnMsIGosXHJcblx0XHRmcmFnbWVudCA9IGNvbnRleHQuY3JlYXRlRG9jdW1lbnRGcmFnbWVudCgpLFxyXG5cdFx0bm9kZXMgPSBbXSxcclxuXHRcdGkgPSAwLFxyXG5cdFx0bCA9IGVsZW1zLmxlbmd0aDtcclxuXHJcblx0Zm9yICggOyBpIDwgbDsgaSsrICkge1xyXG5cdFx0ZWxlbSA9IGVsZW1zWyBpIF07XHJcblxyXG5cdFx0aWYgKCBlbGVtIHx8IGVsZW0gPT09IDAgKSB7XHJcblxyXG5cdFx0XHQvLyBBZGQgbm9kZXMgZGlyZWN0bHlcclxuXHRcdFx0aWYgKCBqUXVlcnkudHlwZSggZWxlbSApID09PSBcIm9iamVjdFwiICkge1xyXG5cclxuXHRcdFx0XHQvLyBTdXBwb3J0OiBBbmRyb2lkPDQuMSwgUGhhbnRvbUpTPDJcclxuXHRcdFx0XHQvLyBwdXNoLmFwcGx5KF8sIGFycmF5bGlrZSkgdGhyb3dzIG9uIGFuY2llbnQgV2ViS2l0XHJcblx0XHRcdFx0alF1ZXJ5Lm1lcmdlKCBub2RlcywgZWxlbS5ub2RlVHlwZSA/IFsgZWxlbSBdIDogZWxlbSApO1xyXG5cclxuXHRcdFx0Ly8gQ29udmVydCBub24taHRtbCBpbnRvIGEgdGV4dCBub2RlXHJcblx0XHRcdH0gZWxzZSBpZiAoICFyaHRtbC50ZXN0KCBlbGVtICkgKSB7XHJcblx0XHRcdFx0bm9kZXMucHVzaCggY29udGV4dC5jcmVhdGVUZXh0Tm9kZSggZWxlbSApICk7XHJcblxyXG5cdFx0XHQvLyBDb252ZXJ0IGh0bWwgaW50byBET00gbm9kZXNcclxuXHRcdFx0fSBlbHNlIHtcclxuXHRcdFx0XHR0bXAgPSB0bXAgfHwgZnJhZ21lbnQuYXBwZW5kQ2hpbGQoIGNvbnRleHQuY3JlYXRlRWxlbWVudCggXCJkaXZcIiApICk7XHJcblxyXG5cdFx0XHRcdC8vIERlc2VyaWFsaXplIGEgc3RhbmRhcmQgcmVwcmVzZW50YXRpb25cclxuXHRcdFx0XHR0YWcgPSAoIHJ0YWdOYW1lLmV4ZWMoIGVsZW0gKSB8fCBbIFwiXCIsIFwiXCIgXSApWyAxIF0udG9Mb3dlckNhc2UoKTtcclxuXHRcdFx0XHR3cmFwID0gd3JhcE1hcFsgdGFnIF0gfHwgd3JhcE1hcC5fZGVmYXVsdDtcclxuXHRcdFx0XHR0bXAuaW5uZXJIVE1MID0gd3JhcFsgMSBdICsgalF1ZXJ5Lmh0bWxQcmVmaWx0ZXIoIGVsZW0gKSArIHdyYXBbIDIgXTtcclxuXHJcblx0XHRcdFx0Ly8gRGVzY2VuZCB0aHJvdWdoIHdyYXBwZXJzIHRvIHRoZSByaWdodCBjb250ZW50XHJcblx0XHRcdFx0aiA9IHdyYXBbIDAgXTtcclxuXHRcdFx0XHR3aGlsZSAoIGotLSApIHtcclxuXHRcdFx0XHRcdHRtcCA9IHRtcC5sYXN0Q2hpbGQ7XHJcblx0XHRcdFx0fVxyXG5cclxuXHRcdFx0XHQvLyBTdXBwb3J0OiBBbmRyb2lkPDQuMSwgUGhhbnRvbUpTPDJcclxuXHRcdFx0XHQvLyBwdXNoLmFwcGx5KF8sIGFycmF5bGlrZSkgdGhyb3dzIG9uIGFuY2llbnQgV2ViS2l0XHJcblx0XHRcdFx0alF1ZXJ5Lm1lcmdlKCBub2RlcywgdG1wLmNoaWxkTm9kZXMgKTtcclxuXHJcblx0XHRcdFx0Ly8gUmVtZW1iZXIgdGhlIHRvcC1sZXZlbCBjb250YWluZXJcclxuXHRcdFx0XHR0bXAgPSBmcmFnbWVudC5maXJzdENoaWxkO1xyXG5cclxuXHRcdFx0XHQvLyBFbnN1cmUgdGhlIGNyZWF0ZWQgbm9kZXMgYXJlIG9ycGhhbmVkICgjMTIzOTIpXHJcblx0XHRcdFx0dG1wLnRleHRDb250ZW50ID0gXCJcIjtcclxuXHRcdFx0fVxyXG5cdFx0fVxyXG5cdH1cclxuXHJcblx0Ly8gUmVtb3ZlIHdyYXBwZXIgZnJvbSBmcmFnbWVudFxyXG5cdGZyYWdtZW50LnRleHRDb250ZW50ID0gXCJcIjtcclxuXHJcblx0aSA9IDA7XHJcblx0d2hpbGUgKCAoIGVsZW0gPSBub2Rlc1sgaSsrIF0gKSApIHtcclxuXHJcblx0XHQvLyBTa2lwIGVsZW1lbnRzIGFscmVhZHkgaW4gdGhlIGNvbnRleHQgY29sbGVjdGlvbiAodHJhYy00MDg3KVxyXG5cdFx0aWYgKCBzZWxlY3Rpb24gJiYgalF1ZXJ5LmluQXJyYXkoIGVsZW0sIHNlbGVjdGlvbiApID4gLTEgKSB7XHJcblx0XHRcdGlmICggaWdub3JlZCApIHtcclxuXHRcdFx0XHRpZ25vcmVkLnB1c2goIGVsZW0gKTtcclxuXHRcdFx0fVxyXG5cdFx0XHRjb250aW51ZTtcclxuXHRcdH1cclxuXHJcblx0XHRjb250YWlucyA9IGpRdWVyeS5jb250YWlucyggZWxlbS5vd25lckRvY3VtZW50LCBlbGVtICk7XHJcblxyXG5cdFx0Ly8gQXBwZW5kIHRvIGZyYWdtZW50XHJcblx0XHR0bXAgPSBnZXRBbGwoIGZyYWdtZW50LmFwcGVuZENoaWxkKCBlbGVtICksIFwic2NyaXB0XCIgKTtcclxuXHJcblx0XHQvLyBQcmVzZXJ2ZSBzY3JpcHQgZXZhbHVhdGlvbiBoaXN0b3J5XHJcblx0XHRpZiAoIGNvbnRhaW5zICkge1xyXG5cdFx0XHRzZXRHbG9iYWxFdmFsKCB0bXAgKTtcclxuXHRcdH1cclxuXHJcblx0XHQvLyBDYXB0dXJlIGV4ZWN1dGFibGVzXHJcblx0XHRpZiAoIHNjcmlwdHMgKSB7XHJcblx0XHRcdGogPSAwO1xyXG5cdFx0XHR3aGlsZSAoICggZWxlbSA9IHRtcFsgaisrIF0gKSApIHtcclxuXHRcdFx0XHRpZiAoIHJzY3JpcHRUeXBlLnRlc3QoIGVsZW0udHlwZSB8fCBcIlwiICkgKSB7XHJcblx0XHRcdFx0XHRzY3JpcHRzLnB1c2goIGVsZW0gKTtcclxuXHRcdFx0XHR9XHJcblx0XHRcdH1cclxuXHRcdH1cclxuXHR9XHJcblxyXG5cdHJldHVybiBmcmFnbWVudDtcclxufVxyXG5cclxuXHJcbiggZnVuY3Rpb24oKSB7XHJcblx0dmFyIGZyYWdtZW50ID0gZG9jdW1lbnQuY3JlYXRlRG9jdW1lbnRGcmFnbWVudCgpLFxyXG5cdFx0ZGl2ID0gZnJhZ21lbnQuYXBwZW5kQ2hpbGQoIGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoIFwiZGl2XCIgKSApLFxyXG5cdFx0aW5wdXQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCBcImlucHV0XCIgKTtcclxuXHJcblx0Ly8gU3VwcG9ydDogQW5kcm9pZCA0LjAtNC4zLCBTYWZhcmk8PTUuMVxyXG5cdC8vIENoZWNrIHN0YXRlIGxvc3QgaWYgdGhlIG5hbWUgaXMgc2V0ICgjMTEyMTcpXHJcblx0Ly8gU3VwcG9ydDogV2luZG93cyBXZWIgQXBwcyAoV1dBKVxyXG5cdC8vIGBuYW1lYCBhbmQgYHR5cGVgIG11c3QgdXNlIC5zZXRBdHRyaWJ1dGUgZm9yIFdXQSAoIzE0OTAxKVxyXG5cdGlucHV0LnNldEF0dHJpYnV0ZSggXCJ0eXBlXCIsIFwicmFkaW9cIiApO1xyXG5cdGlucHV0LnNldEF0dHJpYnV0ZSggXCJjaGVja2VkXCIsIFwiY2hlY2tlZFwiICk7XHJcblx0aW5wdXQuc2V0QXR0cmlidXRlKCBcIm5hbWVcIiwgXCJ0XCIgKTtcclxuXHJcblx0ZGl2LmFwcGVuZENoaWxkKCBpbnB1dCApO1xyXG5cclxuXHQvLyBTdXBwb3J0OiBTYWZhcmk8PTUuMSwgQW5kcm9pZDw0LjJcclxuXHQvLyBPbGRlciBXZWJLaXQgZG9lc24ndCBjbG9uZSBjaGVja2VkIHN0YXRlIGNvcnJlY3RseSBpbiBmcmFnbWVudHNcclxuXHRzdXBwb3J0LmNoZWNrQ2xvbmUgPSBkaXYuY2xvbmVOb2RlKCB0cnVlICkuY2xvbmVOb2RlKCB0cnVlICkubGFzdENoaWxkLmNoZWNrZWQ7XHJcblxyXG5cdC8vIFN1cHBvcnQ6IElFPD0xMStcclxuXHQvLyBNYWtlIHN1cmUgdGV4dGFyZWEgKGFuZCBjaGVja2JveCkgZGVmYXVsdFZhbHVlIGlzIHByb3Blcmx5IGNsb25lZFxyXG5cdGRpdi5pbm5lckhUTUwgPSBcIjx0ZXh0YXJlYT54PC90ZXh0YXJlYT5cIjtcclxuXHRzdXBwb3J0Lm5vQ2xvbmVDaGVja2VkID0gISFkaXYuY2xvbmVOb2RlKCB0cnVlICkubGFzdENoaWxkLmRlZmF1bHRWYWx1ZTtcclxufSApKCk7XHJcblxyXG5cclxudmFyXHJcblx0cmtleUV2ZW50ID0gL15rZXkvLFxyXG5cdHJtb3VzZUV2ZW50ID0gL14oPzptb3VzZXxwb2ludGVyfGNvbnRleHRtZW51fGRyYWd8ZHJvcCl8Y2xpY2svLFxyXG5cdHJ0eXBlbmFtZXNwYWNlID0gL14oW14uXSopKD86XFwuKC4rKXwpLztcclxuXHJcbmZ1bmN0aW9uIHJldHVyblRydWUoKSB7XHJcblx0cmV0dXJuIHRydWU7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIHJldHVybkZhbHNlKCkge1xyXG5cdHJldHVybiBmYWxzZTtcclxufVxyXG5cclxuLy8gU3VwcG9ydDogSUU5XHJcbi8vIFNlZSAjMTMzOTMgZm9yIG1vcmUgaW5mb1xyXG5mdW5jdGlvbiBzYWZlQWN0aXZlRWxlbWVudCgpIHtcclxuXHR0cnkge1xyXG5cdFx0cmV0dXJuIGRvY3VtZW50LmFjdGl2ZUVsZW1lbnQ7XHJcblx0fSBjYXRjaCAoIGVyciApIHsgfVxyXG59XHJcblxyXG5mdW5jdGlvbiBvbiggZWxlbSwgdHlwZXMsIHNlbGVjdG9yLCBkYXRhLCBmbiwgb25lICkge1xyXG5cdHZhciBvcmlnRm4sIHR5cGU7XHJcblxyXG5cdC8vIFR5cGVzIGNhbiBiZSBhIG1hcCBvZiB0eXBlcy9oYW5kbGVyc1xyXG5cdGlmICggdHlwZW9mIHR5cGVzID09PSBcIm9iamVjdFwiICkge1xyXG5cclxuXHRcdC8vICggdHlwZXMtT2JqZWN0LCBzZWxlY3RvciwgZGF0YSApXHJcblx0XHRpZiAoIHR5cGVvZiBzZWxlY3RvciAhPT0gXCJzdHJpbmdcIiApIHtcclxuXHJcblx0XHRcdC8vICggdHlwZXMtT2JqZWN0LCBkYXRhIClcclxuXHRcdFx0ZGF0YSA9IGRhdGEgfHwgc2VsZWN0b3I7XHJcblx0XHRcdHNlbGVjdG9yID0gdW5kZWZpbmVkO1xyXG5cdFx0fVxyXG5cdFx0Zm9yICggdHlwZSBpbiB0eXBlcyApIHtcclxuXHRcdFx0b24oIGVsZW0sIHR5cGUsIHNlbGVjdG9yLCBkYXRhLCB0eXBlc1sgdHlwZSBdLCBvbmUgKTtcclxuXHRcdH1cclxuXHRcdHJldHVybiBlbGVtO1xyXG5cdH1cclxuXHJcblx0aWYgKCBkYXRhID09IG51bGwgJiYgZm4gPT0gbnVsbCApIHtcclxuXHJcblx0XHQvLyAoIHR5cGVzLCBmbiApXHJcblx0XHRmbiA9IHNlbGVjdG9yO1xyXG5cdFx0ZGF0YSA9IHNlbGVjdG9yID0gdW5kZWZpbmVkO1xyXG5cdH0gZWxzZSBpZiAoIGZuID09IG51bGwgKSB7XHJcblx0XHRpZiAoIHR5cGVvZiBzZWxlY3RvciA9PT0gXCJzdHJpbmdcIiApIHtcclxuXHJcblx0XHRcdC8vICggdHlwZXMsIHNlbGVjdG9yLCBmbiApXHJcblx0XHRcdGZuID0gZGF0YTtcclxuXHRcdFx0ZGF0YSA9IHVuZGVmaW5lZDtcclxuXHRcdH0gZWxzZSB7XHJcblxyXG5cdFx0XHQvLyAoIHR5cGVzLCBkYXRhLCBmbiApXHJcblx0XHRcdGZuID0gZGF0YTtcclxuXHRcdFx0ZGF0YSA9IHNlbGVjdG9yO1xyXG5cdFx0XHRzZWxlY3RvciA9IHVuZGVmaW5lZDtcclxuXHRcdH1cclxuXHR9XHJcblx0aWYgKCBmbiA9PT0gZmFsc2UgKSB7XHJcblx0XHRmbiA9IHJldHVybkZhbHNlO1xyXG5cdH0gZWxzZSBpZiAoICFmbiApIHtcclxuXHRcdHJldHVybiBlbGVtO1xyXG5cdH1cclxuXHJcblx0aWYgKCBvbmUgPT09IDEgKSB7XHJcblx0XHRvcmlnRm4gPSBmbjtcclxuXHRcdGZuID0gZnVuY3Rpb24oIGV2ZW50ICkge1xyXG5cclxuXHRcdFx0Ly8gQ2FuIHVzZSBhbiBlbXB0eSBzZXQsIHNpbmNlIGV2ZW50IGNvbnRhaW5zIHRoZSBpbmZvXHJcblx0XHRcdGpRdWVyeSgpLm9mZiggZXZlbnQgKTtcclxuXHRcdFx0cmV0dXJuIG9yaWdGbi5hcHBseSggdGhpcywgYXJndW1lbnRzICk7XHJcblx0XHR9O1xyXG5cclxuXHRcdC8vIFVzZSBzYW1lIGd1aWQgc28gY2FsbGVyIGNhbiByZW1vdmUgdXNpbmcgb3JpZ0ZuXHJcblx0XHRmbi5ndWlkID0gb3JpZ0ZuLmd1aWQgfHwgKCBvcmlnRm4uZ3VpZCA9IGpRdWVyeS5ndWlkKysgKTtcclxuXHR9XHJcblx0cmV0dXJuIGVsZW0uZWFjaCggZnVuY3Rpb24oKSB7XHJcblx0XHRqUXVlcnkuZXZlbnQuYWRkKCB0aGlzLCB0eXBlcywgZm4sIGRhdGEsIHNlbGVjdG9yICk7XHJcblx0fSApO1xyXG59XHJcblxyXG4vKlxyXG4gKiBIZWxwZXIgZnVuY3Rpb25zIGZvciBtYW5hZ2luZyBldmVudHMgLS0gbm90IHBhcnQgb2YgdGhlIHB1YmxpYyBpbnRlcmZhY2UuXHJcbiAqIFByb3BzIHRvIERlYW4gRWR3YXJkcycgYWRkRXZlbnQgbGlicmFyeSBmb3IgbWFueSBvZiB0aGUgaWRlYXMuXHJcbiAqL1xyXG5qUXVlcnkuZXZlbnQgPSB7XHJcblxyXG5cdGdsb2JhbDoge30sXHJcblxyXG5cdGFkZDogZnVuY3Rpb24oIGVsZW0sIHR5cGVzLCBoYW5kbGVyLCBkYXRhLCBzZWxlY3RvciApIHtcclxuXHJcblx0XHR2YXIgaGFuZGxlT2JqSW4sIGV2ZW50SGFuZGxlLCB0bXAsXHJcblx0XHRcdGV2ZW50cywgdCwgaGFuZGxlT2JqLFxyXG5cdFx0XHRzcGVjaWFsLCBoYW5kbGVycywgdHlwZSwgbmFtZXNwYWNlcywgb3JpZ1R5cGUsXHJcblx0XHRcdGVsZW1EYXRhID0gZGF0YVByaXYuZ2V0KCBlbGVtICk7XHJcblxyXG5cdFx0Ly8gRG9uJ3QgYXR0YWNoIGV2ZW50cyB0byBub0RhdGEgb3IgdGV4dC9jb21tZW50IG5vZGVzIChidXQgYWxsb3cgcGxhaW4gb2JqZWN0cylcclxuXHRcdGlmICggIWVsZW1EYXRhICkge1xyXG5cdFx0XHRyZXR1cm47XHJcblx0XHR9XHJcblxyXG5cdFx0Ly8gQ2FsbGVyIGNhbiBwYXNzIGluIGFuIG9iamVjdCBvZiBjdXN0b20gZGF0YSBpbiBsaWV1IG9mIHRoZSBoYW5kbGVyXHJcblx0XHRpZiAoIGhhbmRsZXIuaGFuZGxlciApIHtcclxuXHRcdFx0aGFuZGxlT2JqSW4gPSBoYW5kbGVyO1xyXG5cdFx0XHRoYW5kbGVyID0gaGFuZGxlT2JqSW4uaGFuZGxlcjtcclxuXHRcdFx0c2VsZWN0b3IgPSBoYW5kbGVPYmpJbi5zZWxlY3RvcjtcclxuXHRcdH1cclxuXHJcblx0XHQvLyBNYWtlIHN1cmUgdGhhdCB0aGUgaGFuZGxlciBoYXMgYSB1bmlxdWUgSUQsIHVzZWQgdG8gZmluZC9yZW1vdmUgaXQgbGF0ZXJcclxuXHRcdGlmICggIWhhbmRsZXIuZ3VpZCApIHtcclxuXHRcdFx0aGFuZGxlci5ndWlkID0galF1ZXJ5Lmd1aWQrKztcclxuXHRcdH1cclxuXHJcblx0XHQvLyBJbml0IHRoZSBlbGVtZW50J3MgZXZlbnQgc3RydWN0dXJlIGFuZCBtYWluIGhhbmRsZXIsIGlmIHRoaXMgaXMgdGhlIGZpcnN0XHJcblx0XHRpZiAoICEoIGV2ZW50cyA9IGVsZW1EYXRhLmV2ZW50cyApICkge1xyXG5cdFx0XHRldmVudHMgPSBlbGVtRGF0YS5ldmVudHMgPSB7fTtcclxuXHRcdH1cclxuXHRcdGlmICggISggZXZlbnRIYW5kbGUgPSBlbGVtRGF0YS5oYW5kbGUgKSApIHtcclxuXHRcdFx0ZXZlbnRIYW5kbGUgPSBlbGVtRGF0YS5oYW5kbGUgPSBmdW5jdGlvbiggZSApIHtcclxuXHJcblx0XHRcdFx0Ly8gRGlzY2FyZCB0aGUgc2Vjb25kIGV2ZW50IG9mIGEgalF1ZXJ5LmV2ZW50LnRyaWdnZXIoKSBhbmRcclxuXHRcdFx0XHQvLyB3aGVuIGFuIGV2ZW50IGlzIGNhbGxlZCBhZnRlciBhIHBhZ2UgaGFzIHVubG9hZGVkXHJcblx0XHRcdFx0cmV0dXJuIHR5cGVvZiBqUXVlcnkgIT09IFwidW5kZWZpbmVkXCIgJiYgalF1ZXJ5LmV2ZW50LnRyaWdnZXJlZCAhPT0gZS50eXBlID9cclxuXHRcdFx0XHRcdGpRdWVyeS5ldmVudC5kaXNwYXRjaC5hcHBseSggZWxlbSwgYXJndW1lbnRzICkgOiB1bmRlZmluZWQ7XHJcblx0XHRcdH07XHJcblx0XHR9XHJcblxyXG5cdFx0Ly8gSGFuZGxlIG11bHRpcGxlIGV2ZW50cyBzZXBhcmF0ZWQgYnkgYSBzcGFjZVxyXG5cdFx0dHlwZXMgPSAoIHR5cGVzIHx8IFwiXCIgKS5tYXRjaCggcm5vdHdoaXRlICkgfHwgWyBcIlwiIF07XHJcblx0XHR0ID0gdHlwZXMubGVuZ3RoO1xyXG5cdFx0d2hpbGUgKCB0LS0gKSB7XHJcblx0XHRcdHRtcCA9IHJ0eXBlbmFtZXNwYWNlLmV4ZWMoIHR5cGVzWyB0IF0gKSB8fCBbXTtcclxuXHRcdFx0dHlwZSA9IG9yaWdUeXBlID0gdG1wWyAxIF07XHJcblx0XHRcdG5hbWVzcGFjZXMgPSAoIHRtcFsgMiBdIHx8IFwiXCIgKS5zcGxpdCggXCIuXCIgKS5zb3J0KCk7XHJcblxyXG5cdFx0XHQvLyBUaGVyZSAqbXVzdCogYmUgYSB0eXBlLCBubyBhdHRhY2hpbmcgbmFtZXNwYWNlLW9ubHkgaGFuZGxlcnNcclxuXHRcdFx0aWYgKCAhdHlwZSApIHtcclxuXHRcdFx0XHRjb250aW51ZTtcclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0Ly8gSWYgZXZlbnQgY2hhbmdlcyBpdHMgdHlwZSwgdXNlIHRoZSBzcGVjaWFsIGV2ZW50IGhhbmRsZXJzIGZvciB0aGUgY2hhbmdlZCB0eXBlXHJcblx0XHRcdHNwZWNpYWwgPSBqUXVlcnkuZXZlbnQuc3BlY2lhbFsgdHlwZSBdIHx8IHt9O1xyXG5cclxuXHRcdFx0Ly8gSWYgc2VsZWN0b3IgZGVmaW5lZCwgZGV0ZXJtaW5lIHNwZWNpYWwgZXZlbnQgYXBpIHR5cGUsIG90aGVyd2lzZSBnaXZlbiB0eXBlXHJcblx0XHRcdHR5cGUgPSAoIHNlbGVjdG9yID8gc3BlY2lhbC5kZWxlZ2F0ZVR5cGUgOiBzcGVjaWFsLmJpbmRUeXBlICkgfHwgdHlwZTtcclxuXHJcblx0XHRcdC8vIFVwZGF0ZSBzcGVjaWFsIGJhc2VkIG9uIG5ld2x5IHJlc2V0IHR5cGVcclxuXHRcdFx0c3BlY2lhbCA9IGpRdWVyeS5ldmVudC5zcGVjaWFsWyB0eXBlIF0gfHwge307XHJcblxyXG5cdFx0XHQvLyBoYW5kbGVPYmogaXMgcGFzc2VkIHRvIGFsbCBldmVudCBoYW5kbGVyc1xyXG5cdFx0XHRoYW5kbGVPYmogPSBqUXVlcnkuZXh0ZW5kKCB7XHJcblx0XHRcdFx0dHlwZTogdHlwZSxcclxuXHRcdFx0XHRvcmlnVHlwZTogb3JpZ1R5cGUsXHJcblx0XHRcdFx0ZGF0YTogZGF0YSxcclxuXHRcdFx0XHRoYW5kbGVyOiBoYW5kbGVyLFxyXG5cdFx0XHRcdGd1aWQ6IGhhbmRsZXIuZ3VpZCxcclxuXHRcdFx0XHRzZWxlY3Rvcjogc2VsZWN0b3IsXHJcblx0XHRcdFx0bmVlZHNDb250ZXh0OiBzZWxlY3RvciAmJiBqUXVlcnkuZXhwci5tYXRjaC5uZWVkc0NvbnRleHQudGVzdCggc2VsZWN0b3IgKSxcclxuXHRcdFx0XHRuYW1lc3BhY2U6IG5hbWVzcGFjZXMuam9pbiggXCIuXCIgKVxyXG5cdFx0XHR9LCBoYW5kbGVPYmpJbiApO1xyXG5cclxuXHRcdFx0Ly8gSW5pdCB0aGUgZXZlbnQgaGFuZGxlciBxdWV1ZSBpZiB3ZSdyZSB0aGUgZmlyc3RcclxuXHRcdFx0aWYgKCAhKCBoYW5kbGVycyA9IGV2ZW50c1sgdHlwZSBdICkgKSB7XHJcblx0XHRcdFx0aGFuZGxlcnMgPSBldmVudHNbIHR5cGUgXSA9IFtdO1xyXG5cdFx0XHRcdGhhbmRsZXJzLmRlbGVnYXRlQ291bnQgPSAwO1xyXG5cclxuXHRcdFx0XHQvLyBPbmx5IHVzZSBhZGRFdmVudExpc3RlbmVyIGlmIHRoZSBzcGVjaWFsIGV2ZW50cyBoYW5kbGVyIHJldHVybnMgZmFsc2VcclxuXHRcdFx0XHRpZiAoICFzcGVjaWFsLnNldHVwIHx8XHJcblx0XHRcdFx0XHRzcGVjaWFsLnNldHVwLmNhbGwoIGVsZW0sIGRhdGEsIG5hbWVzcGFjZXMsIGV2ZW50SGFuZGxlICkgPT09IGZhbHNlICkge1xyXG5cclxuXHRcdFx0XHRcdGlmICggZWxlbS5hZGRFdmVudExpc3RlbmVyICkge1xyXG5cdFx0XHRcdFx0XHRlbGVtLmFkZEV2ZW50TGlzdGVuZXIoIHR5cGUsIGV2ZW50SGFuZGxlICk7XHJcblx0XHRcdFx0XHR9XHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9XHJcblxyXG5cdFx0XHRpZiAoIHNwZWNpYWwuYWRkICkge1xyXG5cdFx0XHRcdHNwZWNpYWwuYWRkLmNhbGwoIGVsZW0sIGhhbmRsZU9iaiApO1xyXG5cclxuXHRcdFx0XHRpZiAoICFoYW5kbGVPYmouaGFuZGxlci5ndWlkICkge1xyXG5cdFx0XHRcdFx0aGFuZGxlT2JqLmhhbmRsZXIuZ3VpZCA9IGhhbmRsZXIuZ3VpZDtcclxuXHRcdFx0XHR9XHJcblx0XHRcdH1cclxuXHJcblx0XHRcdC8vIEFkZCB0byB0aGUgZWxlbWVudCdzIGhhbmRsZXIgbGlzdCwgZGVsZWdhdGVzIGluIGZyb250XHJcblx0XHRcdGlmICggc2VsZWN0b3IgKSB7XHJcblx0XHRcdFx0aGFuZGxlcnMuc3BsaWNlKCBoYW5kbGVycy5kZWxlZ2F0ZUNvdW50KyssIDAsIGhhbmRsZU9iaiApO1xyXG5cdFx0XHR9IGVsc2Uge1xyXG5cdFx0XHRcdGhhbmRsZXJzLnB1c2goIGhhbmRsZU9iaiApO1xyXG5cdFx0XHR9XHJcblxyXG5cdFx0XHQvLyBLZWVwIHRyYWNrIG9mIHdoaWNoIGV2ZW50cyBoYXZlIGV2ZXIgYmVlbiB1c2VkLCBmb3IgZXZlbnQgb3B0aW1pemF0aW9uXHJcblx0XHRcdGpRdWVyeS5ldmVudC5nbG9iYWxbIHR5cGUgXSA9IHRydWU7XHJcblx0XHR9XHJcblxyXG5cdH0sXHJcblxyXG5cdC8vIERldGFjaCBhbiBldmVudCBvciBzZXQgb2YgZXZlbnRzIGZyb20gYW4gZWxlbWVudFxyXG5cdHJlbW92ZTogZnVuY3Rpb24oIGVsZW0sIHR5cGVzLCBoYW5kbGVyLCBzZWxlY3RvciwgbWFwcGVkVHlwZXMgKSB7XHJcblxyXG5cdFx0dmFyIGosIG9yaWdDb3VudCwgdG1wLFxyXG5cdFx0XHRldmVudHMsIHQsIGhhbmRsZU9iaixcclxuXHRcdFx0c3BlY2lhbCwgaGFuZGxlcnMsIHR5cGUsIG5hbWVzcGFjZXMsIG9yaWdUeXBlLFxyXG5cdFx0XHRlbGVtRGF0YSA9IGRhdGFQcml2Lmhhc0RhdGEoIGVsZW0gKSAmJiBkYXRhUHJpdi5nZXQoIGVsZW0gKTtcclxuXHJcblx0XHRpZiAoICFlbGVtRGF0YSB8fCAhKCBldmVudHMgPSBlbGVtRGF0YS5ldmVudHMgKSApIHtcclxuXHRcdFx0cmV0dXJuO1xyXG5cdFx0fVxyXG5cclxuXHRcdC8vIE9uY2UgZm9yIGVhY2ggdHlwZS5uYW1lc3BhY2UgaW4gdHlwZXM7IHR5cGUgbWF5IGJlIG9taXR0ZWRcclxuXHRcdHR5cGVzID0gKCB0eXBlcyB8fCBcIlwiICkubWF0Y2goIHJub3R3aGl0ZSApIHx8IFsgXCJcIiBdO1xyXG5cdFx0dCA9IHR5cGVzLmxlbmd0aDtcclxuXHRcdHdoaWxlICggdC0tICkge1xyXG5cdFx0XHR0bXAgPSBydHlwZW5hbWVzcGFjZS5leGVjKCB0eXBlc1sgdCBdICkgfHwgW107XHJcblx0XHRcdHR5cGUgPSBvcmlnVHlwZSA9IHRtcFsgMSBdO1xyXG5cdFx0XHRuYW1lc3BhY2VzID0gKCB0bXBbIDIgXSB8fCBcIlwiICkuc3BsaXQoIFwiLlwiICkuc29ydCgpO1xyXG5cclxuXHRcdFx0Ly8gVW5iaW5kIGFsbCBldmVudHMgKG9uIHRoaXMgbmFtZXNwYWNlLCBpZiBwcm92aWRlZCkgZm9yIHRoZSBlbGVtZW50XHJcblx0XHRcdGlmICggIXR5cGUgKSB7XHJcblx0XHRcdFx0Zm9yICggdHlwZSBpbiBldmVudHMgKSB7XHJcblx0XHRcdFx0XHRqUXVlcnkuZXZlbnQucmVtb3ZlKCBlbGVtLCB0eXBlICsgdHlwZXNbIHQgXSwgaGFuZGxlciwgc2VsZWN0b3IsIHRydWUgKTtcclxuXHRcdFx0XHR9XHJcblx0XHRcdFx0Y29udGludWU7XHJcblx0XHRcdH1cclxuXHJcblx0XHRcdHNwZWNpYWwgPSBqUXVlcnkuZXZlbnQuc3BlY2lhbFsgdHlwZSBdIHx8IHt9O1xyXG5cdFx0XHR0eXBlID0gKCBzZWxlY3RvciA/IHNwZWNpYWwuZGVsZWdhdGVUeXBlIDogc3BlY2lhbC5iaW5kVHlwZSApIHx8IHR5cGU7XHJcblx0XHRcdGhhbmRsZXJzID0gZXZlbnRzWyB0eXBlIF0gfHwgW107XHJcblx0XHRcdHRtcCA9IHRtcFsgMiBdICYmXHJcblx0XHRcdFx0bmV3IFJlZ0V4cCggXCIoXnxcXFxcLilcIiArIG5hbWVzcGFjZXMuam9pbiggXCJcXFxcLig/Oi4qXFxcXC58KVwiICkgKyBcIihcXFxcLnwkKVwiICk7XHJcblxyXG5cdFx0XHQvLyBSZW1vdmUgbWF0Y2hpbmcgZXZlbnRzXHJcblx0XHRcdG9yaWdDb3VudCA9IGogPSBoYW5kbGVycy5sZW5ndGg7XHJcblx0XHRcdHdoaWxlICggai0tICkge1xyXG5cdFx0XHRcdGhhbmRsZU9iaiA9IGhhbmRsZXJzWyBqIF07XHJcblxyXG5cdFx0XHRcdGlmICggKCBtYXBwZWRUeXBlcyB8fCBvcmlnVHlwZSA9PT0gaGFuZGxlT2JqLm9yaWdUeXBlICkgJiZcclxuXHRcdFx0XHRcdCggIWhhbmRsZXIgfHwgaGFuZGxlci5ndWlkID09PSBoYW5kbGVPYmouZ3VpZCApICYmXHJcblx0XHRcdFx0XHQoICF0bXAgfHwgdG1wLnRlc3QoIGhhbmRsZU9iai5uYW1lc3BhY2UgKSApICYmXHJcblx0XHRcdFx0XHQoICFzZWxlY3RvciB8fCBzZWxlY3RvciA9PT0gaGFuZGxlT2JqLnNlbGVjdG9yIHx8XHJcblx0XHRcdFx0XHRcdHNlbGVjdG9yID09PSBcIioqXCIgJiYgaGFuZGxlT2JqLnNlbGVjdG9yICkgKSB7XHJcblx0XHRcdFx0XHRoYW5kbGVycy5zcGxpY2UoIGosIDEgKTtcclxuXHJcblx0XHRcdFx0XHRpZiAoIGhhbmRsZU9iai5zZWxlY3RvciApIHtcclxuXHRcdFx0XHRcdFx0aGFuZGxlcnMuZGVsZWdhdGVDb3VudC0tO1xyXG5cdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0aWYgKCBzcGVjaWFsLnJlbW92ZSApIHtcclxuXHRcdFx0XHRcdFx0c3BlY2lhbC5yZW1vdmUuY2FsbCggZWxlbSwgaGFuZGxlT2JqICk7XHJcblx0XHRcdFx0XHR9XHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9XHJcblxyXG5cdFx0XHQvLyBSZW1vdmUgZ2VuZXJpYyBldmVudCBoYW5kbGVyIGlmIHdlIHJlbW92ZWQgc29tZXRoaW5nIGFuZCBubyBtb3JlIGhhbmRsZXJzIGV4aXN0XHJcblx0XHRcdC8vIChhdm9pZHMgcG90ZW50aWFsIGZvciBlbmRsZXNzIHJlY3Vyc2lvbiBkdXJpbmcgcmVtb3ZhbCBvZiBzcGVjaWFsIGV2ZW50IGhhbmRsZXJzKVxyXG5cdFx0XHRpZiAoIG9yaWdDb3VudCAmJiAhaGFuZGxlcnMubGVuZ3RoICkge1xyXG5cdFx0XHRcdGlmICggIXNwZWNpYWwudGVhcmRvd24gfHxcclxuXHRcdFx0XHRcdHNwZWNpYWwudGVhcmRvd24uY2FsbCggZWxlbSwgbmFtZXNwYWNlcywgZWxlbURhdGEuaGFuZGxlICkgPT09IGZhbHNlICkge1xyXG5cclxuXHRcdFx0XHRcdGpRdWVyeS5yZW1vdmVFdmVudCggZWxlbSwgdHlwZSwgZWxlbURhdGEuaGFuZGxlICk7XHJcblx0XHRcdFx0fVxyXG5cclxuXHRcdFx0XHRkZWxldGUgZXZlbnRzWyB0eXBlIF07XHJcblx0XHRcdH1cclxuXHRcdH1cclxuXHJcblx0XHQvLyBSZW1vdmUgZGF0YSBhbmQgdGhlIGV4cGFuZG8gaWYgaXQncyBubyBsb25nZXIgdXNlZFxyXG5cdFx0aWYgKCBqUXVlcnkuaXNFbXB0eU9iamVjdCggZXZlbnRzICkgKSB7XHJcblx0XHRcdGRhdGFQcml2LnJlbW92ZSggZWxlbSwgXCJoYW5kbGUgZXZlbnRzXCIgKTtcclxuXHRcdH1cclxuXHR9LFxyXG5cclxuXHRkaXNwYXRjaDogZnVuY3Rpb24oIGV2ZW50ICkge1xyXG5cclxuXHRcdC8vIE1ha2UgYSB3cml0YWJsZSBqUXVlcnkuRXZlbnQgZnJvbSB0aGUgbmF0aXZlIGV2ZW50IG9iamVjdFxyXG5cdFx0ZXZlbnQgPSBqUXVlcnkuZXZlbnQuZml4KCBldmVudCApO1xyXG5cclxuXHRcdHZhciBpLCBqLCByZXQsIG1hdGNoZWQsIGhhbmRsZU9iaixcclxuXHRcdFx0aGFuZGxlclF1ZXVlID0gW10sXHJcblx0XHRcdGFyZ3MgPSBzbGljZS5jYWxsKCBhcmd1bWVudHMgKSxcclxuXHRcdFx0aGFuZGxlcnMgPSAoIGRhdGFQcml2LmdldCggdGhpcywgXCJldmVudHNcIiApIHx8IHt9IClbIGV2ZW50LnR5cGUgXSB8fCBbXSxcclxuXHRcdFx0c3BlY2lhbCA9IGpRdWVyeS5ldmVudC5zcGVjaWFsWyBldmVudC50eXBlIF0gfHwge307XHJcblxyXG5cdFx0Ly8gVXNlIHRoZSBmaXgtZWQgalF1ZXJ5LkV2ZW50IHJhdGhlciB0aGFuIHRoZSAocmVhZC1vbmx5KSBuYXRpdmUgZXZlbnRcclxuXHRcdGFyZ3NbIDAgXSA9IGV2ZW50O1xyXG5cdFx0ZXZlbnQuZGVsZWdhdGVUYXJnZXQgPSB0aGlzO1xyXG5cclxuXHRcdC8vIENhbGwgdGhlIHByZURpc3BhdGNoIGhvb2sgZm9yIHRoZSBtYXBwZWQgdHlwZSwgYW5kIGxldCBpdCBiYWlsIGlmIGRlc2lyZWRcclxuXHRcdGlmICggc3BlY2lhbC5wcmVEaXNwYXRjaCAmJiBzcGVjaWFsLnByZURpc3BhdGNoLmNhbGwoIHRoaXMsIGV2ZW50ICkgPT09IGZhbHNlICkge1xyXG5cdFx0XHRyZXR1cm47XHJcblx0XHR9XHJcblxyXG5cdFx0Ly8gRGV0ZXJtaW5lIGhhbmRsZXJzXHJcblx0XHRoYW5kbGVyUXVldWUgPSBqUXVlcnkuZXZlbnQuaGFuZGxlcnMuY2FsbCggdGhpcywgZXZlbnQsIGhhbmRsZXJzICk7XHJcblxyXG5cdFx0Ly8gUnVuIGRlbGVnYXRlcyBmaXJzdDsgdGhleSBtYXkgd2FudCB0byBzdG9wIHByb3BhZ2F0aW9uIGJlbmVhdGggdXNcclxuXHRcdGkgPSAwO1xyXG5cdFx0d2hpbGUgKCAoIG1hdGNoZWQgPSBoYW5kbGVyUXVldWVbIGkrKyBdICkgJiYgIWV2ZW50LmlzUHJvcGFnYXRpb25TdG9wcGVkKCkgKSB7XHJcblx0XHRcdGV2ZW50LmN1cnJlbnRUYXJnZXQgPSBtYXRjaGVkLmVsZW07XHJcblxyXG5cdFx0XHRqID0gMDtcclxuXHRcdFx0d2hpbGUgKCAoIGhhbmRsZU9iaiA9IG1hdGNoZWQuaGFuZGxlcnNbIGorKyBdICkgJiZcclxuXHRcdFx0XHQhZXZlbnQuaXNJbW1lZGlhdGVQcm9wYWdhdGlvblN0b3BwZWQoKSApIHtcclxuXHJcblx0XHRcdFx0Ly8gVHJpZ2dlcmVkIGV2ZW50IG11c3QgZWl0aGVyIDEpIGhhdmUgbm8gbmFtZXNwYWNlLCBvciAyKSBoYXZlIG5hbWVzcGFjZShzKVxyXG5cdFx0XHRcdC8vIGEgc3Vic2V0IG9yIGVxdWFsIHRvIHRob3NlIGluIHRoZSBib3VuZCBldmVudCAoYm90aCBjYW4gaGF2ZSBubyBuYW1lc3BhY2UpLlxyXG5cdFx0XHRcdGlmICggIWV2ZW50LnJuYW1lc3BhY2UgfHwgZXZlbnQucm5hbWVzcGFjZS50ZXN0KCBoYW5kbGVPYmoubmFtZXNwYWNlICkgKSB7XHJcblxyXG5cdFx0XHRcdFx0ZXZlbnQuaGFuZGxlT2JqID0gaGFuZGxlT2JqO1xyXG5cdFx0XHRcdFx0ZXZlbnQuZGF0YSA9IGhhbmRsZU9iai5kYXRhO1xyXG5cclxuXHRcdFx0XHRcdHJldCA9ICggKCBqUXVlcnkuZXZlbnQuc3BlY2lhbFsgaGFuZGxlT2JqLm9yaWdUeXBlIF0gfHwge30gKS5oYW5kbGUgfHxcclxuXHRcdFx0XHRcdFx0aGFuZGxlT2JqLmhhbmRsZXIgKS5hcHBseSggbWF0Y2hlZC5lbGVtLCBhcmdzICk7XHJcblxyXG5cdFx0XHRcdFx0aWYgKCByZXQgIT09IHVuZGVmaW5lZCApIHtcclxuXHRcdFx0XHRcdFx0aWYgKCAoIGV2ZW50LnJlc3VsdCA9IHJldCApID09PSBmYWxzZSApIHtcclxuXHRcdFx0XHRcdFx0XHRldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xyXG5cdFx0XHRcdFx0XHRcdGV2ZW50LnN0b3BQcm9wYWdhdGlvbigpO1xyXG5cdFx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHR9XHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9XHJcblx0XHR9XHJcblxyXG5cdFx0Ly8gQ2FsbCB0aGUgcG9zdERpc3BhdGNoIGhvb2sgZm9yIHRoZSBtYXBwZWQgdHlwZVxyXG5cdFx0aWYgKCBzcGVjaWFsLnBvc3REaXNwYXRjaCApIHtcclxuXHRcdFx0c3BlY2lhbC5wb3N0RGlzcGF0Y2guY2FsbCggdGhpcywgZXZlbnQgKTtcclxuXHRcdH1cclxuXHJcblx0XHRyZXR1cm4gZXZlbnQucmVzdWx0O1xyXG5cdH0sXHJcblxyXG5cdGhhbmRsZXJzOiBmdW5jdGlvbiggZXZlbnQsIGhhbmRsZXJzICkge1xyXG5cdFx0dmFyIGksIG1hdGNoZXMsIHNlbCwgaGFuZGxlT2JqLFxyXG5cdFx0XHRoYW5kbGVyUXVldWUgPSBbXSxcclxuXHRcdFx0ZGVsZWdhdGVDb3VudCA9IGhhbmRsZXJzLmRlbGVnYXRlQ291bnQsXHJcblx0XHRcdGN1ciA9IGV2ZW50LnRhcmdldDtcclxuXHJcblx0XHQvLyBTdXBwb3J0IChhdCBsZWFzdCk6IENocm9tZSwgSUU5XHJcblx0XHQvLyBGaW5kIGRlbGVnYXRlIGhhbmRsZXJzXHJcblx0XHQvLyBCbGFjay1ob2xlIFNWRyA8dXNlPiBpbnN0YW5jZSB0cmVlcyAoIzEzMTgwKVxyXG5cdFx0Ly9cclxuXHRcdC8vIFN1cHBvcnQ6IEZpcmVmb3g8PTQyK1xyXG5cdFx0Ly8gQXZvaWQgbm9uLWxlZnQtY2xpY2sgaW4gRkYgYnV0IGRvbid0IGJsb2NrIElFIHJhZGlvIGV2ZW50cyAoIzM4NjEsIGdoLTIzNDMpXHJcblx0XHRpZiAoIGRlbGVnYXRlQ291bnQgJiYgY3VyLm5vZGVUeXBlICYmXHJcblx0XHRcdCggZXZlbnQudHlwZSAhPT0gXCJjbGlja1wiIHx8IGlzTmFOKCBldmVudC5idXR0b24gKSB8fCBldmVudC5idXR0b24gPCAxICkgKSB7XHJcblxyXG5cdFx0XHRmb3IgKCA7IGN1ciAhPT0gdGhpczsgY3VyID0gY3VyLnBhcmVudE5vZGUgfHwgdGhpcyApIHtcclxuXHJcblx0XHRcdFx0Ly8gRG9uJ3QgY2hlY2sgbm9uLWVsZW1lbnRzICgjMTMyMDgpXHJcblx0XHRcdFx0Ly8gRG9uJ3QgcHJvY2VzcyBjbGlja3Mgb24gZGlzYWJsZWQgZWxlbWVudHMgKCM2OTExLCAjODE2NSwgIzExMzgyLCAjMTE3NjQpXHJcblx0XHRcdFx0aWYgKCBjdXIubm9kZVR5cGUgPT09IDEgJiYgKCBjdXIuZGlzYWJsZWQgIT09IHRydWUgfHwgZXZlbnQudHlwZSAhPT0gXCJjbGlja1wiICkgKSB7XHJcblx0XHRcdFx0XHRtYXRjaGVzID0gW107XHJcblx0XHRcdFx0XHRmb3IgKCBpID0gMDsgaSA8IGRlbGVnYXRlQ291bnQ7IGkrKyApIHtcclxuXHRcdFx0XHRcdFx0aGFuZGxlT2JqID0gaGFuZGxlcnNbIGkgXTtcclxuXHJcblx0XHRcdFx0XHRcdC8vIERvbid0IGNvbmZsaWN0IHdpdGggT2JqZWN0LnByb3RvdHlwZSBwcm9wZXJ0aWVzICgjMTMyMDMpXHJcblx0XHRcdFx0XHRcdHNlbCA9IGhhbmRsZU9iai5zZWxlY3RvciArIFwiIFwiO1xyXG5cclxuXHRcdFx0XHRcdFx0aWYgKCBtYXRjaGVzWyBzZWwgXSA9PT0gdW5kZWZpbmVkICkge1xyXG5cdFx0XHRcdFx0XHRcdG1hdGNoZXNbIHNlbCBdID0gaGFuZGxlT2JqLm5lZWRzQ29udGV4dCA/XHJcblx0XHRcdFx0XHRcdFx0XHRqUXVlcnkoIHNlbCwgdGhpcyApLmluZGV4KCBjdXIgKSA+IC0xIDpcclxuXHRcdFx0XHRcdFx0XHRcdGpRdWVyeS5maW5kKCBzZWwsIHRoaXMsIG51bGwsIFsgY3VyIF0gKS5sZW5ndGg7XHJcblx0XHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdFx0aWYgKCBtYXRjaGVzWyBzZWwgXSApIHtcclxuXHRcdFx0XHRcdFx0XHRtYXRjaGVzLnB1c2goIGhhbmRsZU9iaiApO1xyXG5cdFx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHRpZiAoIG1hdGNoZXMubGVuZ3RoICkge1xyXG5cdFx0XHRcdFx0XHRoYW5kbGVyUXVldWUucHVzaCggeyBlbGVtOiBjdXIsIGhhbmRsZXJzOiBtYXRjaGVzIH0gKTtcclxuXHRcdFx0XHRcdH1cclxuXHRcdFx0XHR9XHJcblx0XHRcdH1cclxuXHRcdH1cclxuXHJcblx0XHQvLyBBZGQgdGhlIHJlbWFpbmluZyAoZGlyZWN0bHktYm91bmQpIGhhbmRsZXJzXHJcblx0XHRpZiAoIGRlbGVnYXRlQ291bnQgPCBoYW5kbGVycy5sZW5ndGggKSB7XHJcblx0XHRcdGhhbmRsZXJRdWV1ZS5wdXNoKCB7IGVsZW06IHRoaXMsIGhhbmRsZXJzOiBoYW5kbGVycy5zbGljZSggZGVsZWdhdGVDb3VudCApIH0gKTtcclxuXHRcdH1cclxuXHJcblx0XHRyZXR1cm4gaGFuZGxlclF1ZXVlO1xyXG5cdH0sXHJcblxyXG5cdC8vIEluY2x1ZGVzIHNvbWUgZXZlbnQgcHJvcHMgc2hhcmVkIGJ5IEtleUV2ZW50IGFuZCBNb3VzZUV2ZW50XHJcblx0cHJvcHM6ICggXCJhbHRLZXkgYnViYmxlcyBjYW5jZWxhYmxlIGN0cmxLZXkgY3VycmVudFRhcmdldCBkZXRhaWwgZXZlbnRQaGFzZSBcIiArXHJcblx0XHRcIm1ldGFLZXkgcmVsYXRlZFRhcmdldCBzaGlmdEtleSB0YXJnZXQgdGltZVN0YW1wIHZpZXcgd2hpY2hcIiApLnNwbGl0KCBcIiBcIiApLFxyXG5cclxuXHRmaXhIb29rczoge30sXHJcblxyXG5cdGtleUhvb2tzOiB7XHJcblx0XHRwcm9wczogXCJjaGFyIGNoYXJDb2RlIGtleSBrZXlDb2RlXCIuc3BsaXQoIFwiIFwiICksXHJcblx0XHRmaWx0ZXI6IGZ1bmN0aW9uKCBldmVudCwgb3JpZ2luYWwgKSB7XHJcblxyXG5cdFx0XHQvLyBBZGQgd2hpY2ggZm9yIGtleSBldmVudHNcclxuXHRcdFx0aWYgKCBldmVudC53aGljaCA9PSBudWxsICkge1xyXG5cdFx0XHRcdGV2ZW50LndoaWNoID0gb3JpZ2luYWwuY2hhckNvZGUgIT0gbnVsbCA/IG9yaWdpbmFsLmNoYXJDb2RlIDogb3JpZ2luYWwua2V5Q29kZTtcclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0cmV0dXJuIGV2ZW50O1xyXG5cdFx0fVxyXG5cdH0sXHJcblxyXG5cdG1vdXNlSG9va3M6IHtcclxuXHRcdHByb3BzOiAoIFwiYnV0dG9uIGJ1dHRvbnMgY2xpZW50WCBjbGllbnRZIG9mZnNldFggb2Zmc2V0WSBwYWdlWCBwYWdlWSBcIiArXHJcblx0XHRcdFwic2NyZWVuWCBzY3JlZW5ZIHRvRWxlbWVudFwiICkuc3BsaXQoIFwiIFwiICksXHJcblx0XHRmaWx0ZXI6IGZ1bmN0aW9uKCBldmVudCwgb3JpZ2luYWwgKSB7XHJcblx0XHRcdHZhciBldmVudERvYywgZG9jLCBib2R5LFxyXG5cdFx0XHRcdGJ1dHRvbiA9IG9yaWdpbmFsLmJ1dHRvbjtcclxuXHJcblx0XHRcdC8vIENhbGN1bGF0ZSBwYWdlWC9ZIGlmIG1pc3NpbmcgYW5kIGNsaWVudFgvWSBhdmFpbGFibGVcclxuXHRcdFx0aWYgKCBldmVudC5wYWdlWCA9PSBudWxsICYmIG9yaWdpbmFsLmNsaWVudFggIT0gbnVsbCApIHtcclxuXHRcdFx0XHRldmVudERvYyA9IGV2ZW50LnRhcmdldC5vd25lckRvY3VtZW50IHx8IGRvY3VtZW50O1xyXG5cdFx0XHRcdGRvYyA9IGV2ZW50RG9jLmRvY3VtZW50RWxlbWVudDtcclxuXHRcdFx0XHRib2R5ID0gZXZlbnREb2MuYm9keTtcclxuXHJcblx0XHRcdFx0ZXZlbnQucGFnZVggPSBvcmlnaW5hbC5jbGllbnRYICtcclxuXHRcdFx0XHRcdCggZG9jICYmIGRvYy5zY3JvbGxMZWZ0IHx8IGJvZHkgJiYgYm9keS5zY3JvbGxMZWZ0IHx8IDAgKSAtXHJcblx0XHRcdFx0XHQoIGRvYyAmJiBkb2MuY2xpZW50TGVmdCB8fCBib2R5ICYmIGJvZHkuY2xpZW50TGVmdCB8fCAwICk7XHJcblx0XHRcdFx0ZXZlbnQucGFnZVkgPSBvcmlnaW5hbC5jbGllbnRZICtcclxuXHRcdFx0XHRcdCggZG9jICYmIGRvYy5zY3JvbGxUb3AgIHx8IGJvZHkgJiYgYm9keS5zY3JvbGxUb3AgIHx8IDAgKSAtXHJcblx0XHRcdFx0XHQoIGRvYyAmJiBkb2MuY2xpZW50VG9wICB8fCBib2R5ICYmIGJvZHkuY2xpZW50VG9wICB8fCAwICk7XHJcblx0XHRcdH1cclxuXHJcblx0XHRcdC8vIEFkZCB3aGljaCBmb3IgY2xpY2s6IDEgPT09IGxlZnQ7IDIgPT09IG1pZGRsZTsgMyA9PT0gcmlnaHRcclxuXHRcdFx0Ly8gTm90ZTogYnV0dG9uIGlzIG5vdCBub3JtYWxpemVkLCBzbyBkb24ndCB1c2UgaXRcclxuXHRcdFx0aWYgKCAhZXZlbnQud2hpY2ggJiYgYnV0dG9uICE9PSB1bmRlZmluZWQgKSB7XHJcblx0XHRcdFx0ZXZlbnQud2hpY2ggPSAoIGJ1dHRvbiAmIDEgPyAxIDogKCBidXR0b24gJiAyID8gMyA6ICggYnV0dG9uICYgNCA/IDIgOiAwICkgKSApO1xyXG5cdFx0XHR9XHJcblxyXG5cdFx0XHRyZXR1cm4gZXZlbnQ7XHJcblx0XHR9XHJcblx0fSxcclxuXHJcblx0Zml4OiBmdW5jdGlvbiggZXZlbnQgKSB7XHJcblx0XHRpZiAoIGV2ZW50WyBqUXVlcnkuZXhwYW5kbyBdICkge1xyXG5cdFx0XHRyZXR1cm4gZXZlbnQ7XHJcblx0XHR9XHJcblxyXG5cdFx0Ly8gQ3JlYXRlIGEgd3JpdGFibGUgY29weSBvZiB0aGUgZXZlbnQgb2JqZWN0IGFuZCBub3JtYWxpemUgc29tZSBwcm9wZXJ0aWVzXHJcblx0XHR2YXIgaSwgcHJvcCwgY29weSxcclxuXHRcdFx0dHlwZSA9IGV2ZW50LnR5cGUsXHJcblx0XHRcdG9yaWdpbmFsRXZlbnQgPSBldmVudCxcclxuXHRcdFx0Zml4SG9vayA9IHRoaXMuZml4SG9va3NbIHR5cGUgXTtcclxuXHJcblx0XHRpZiAoICFmaXhIb29rICkge1xyXG5cdFx0XHR0aGlzLmZpeEhvb2tzWyB0eXBlIF0gPSBmaXhIb29rID1cclxuXHRcdFx0XHRybW91c2VFdmVudC50ZXN0KCB0eXBlICkgPyB0aGlzLm1vdXNlSG9va3MgOlxyXG5cdFx0XHRcdHJrZXlFdmVudC50ZXN0KCB0eXBlICkgPyB0aGlzLmtleUhvb2tzIDpcclxuXHRcdFx0XHR7fTtcclxuXHRcdH1cclxuXHRcdGNvcHkgPSBmaXhIb29rLnByb3BzID8gdGhpcy5wcm9wcy5jb25jYXQoIGZpeEhvb2sucHJvcHMgKSA6IHRoaXMucHJvcHM7XHJcblxyXG5cdFx0ZXZlbnQgPSBuZXcgalF1ZXJ5LkV2ZW50KCBvcmlnaW5hbEV2ZW50ICk7XHJcblxyXG5cdFx0aSA9IGNvcHkubGVuZ3RoO1xyXG5cdFx0d2hpbGUgKCBpLS0gKSB7XHJcblx0XHRcdHByb3AgPSBjb3B5WyBpIF07XHJcblx0XHRcdGV2ZW50WyBwcm9wIF0gPSBvcmlnaW5hbEV2ZW50WyBwcm9wIF07XHJcblx0XHR9XHJcblxyXG5cdFx0Ly8gU3VwcG9ydDogQ29yZG92YSAyLjUgKFdlYktpdCkgKCMxMzI1NSlcclxuXHRcdC8vIEFsbCBldmVudHMgc2hvdWxkIGhhdmUgYSB0YXJnZXQ7IENvcmRvdmEgZGV2aWNlcmVhZHkgZG9lc24ndFxyXG5cdFx0aWYgKCAhZXZlbnQudGFyZ2V0ICkge1xyXG5cdFx0XHRldmVudC50YXJnZXQgPSBkb2N1bWVudDtcclxuXHRcdH1cclxuXHJcblx0XHQvLyBTdXBwb3J0OiBTYWZhcmkgNi4wKywgQ2hyb21lPDI4XHJcblx0XHQvLyBUYXJnZXQgc2hvdWxkIG5vdCBiZSBhIHRleHQgbm9kZSAoIzUwNCwgIzEzMTQzKVxyXG5cdFx0aWYgKCBldmVudC50YXJnZXQubm9kZVR5cGUgPT09IDMgKSB7XHJcblx0XHRcdGV2ZW50LnRhcmdldCA9IGV2ZW50LnRhcmdldC5wYXJlbnROb2RlO1xyXG5cdFx0fVxyXG5cclxuXHRcdHJldHVybiBmaXhIb29rLmZpbHRlciA/IGZpeEhvb2suZmlsdGVyKCBldmVudCwgb3JpZ2luYWxFdmVudCApIDogZXZlbnQ7XHJcblx0fSxcclxuXHJcblx0c3BlY2lhbDoge1xyXG5cdFx0bG9hZDoge1xyXG5cclxuXHRcdFx0Ly8gUHJldmVudCB0cmlnZ2VyZWQgaW1hZ2UubG9hZCBldmVudHMgZnJvbSBidWJibGluZyB0byB3aW5kb3cubG9hZFxyXG5cdFx0XHRub0J1YmJsZTogdHJ1ZVxyXG5cdFx0fSxcclxuXHRcdGZvY3VzOiB7XHJcblxyXG5cdFx0XHQvLyBGaXJlIG5hdGl2ZSBldmVudCBpZiBwb3NzaWJsZSBzbyBibHVyL2ZvY3VzIHNlcXVlbmNlIGlzIGNvcnJlY3RcclxuXHRcdFx0dHJpZ2dlcjogZnVuY3Rpb24oKSB7XHJcblx0XHRcdFx0aWYgKCB0aGlzICE9PSBzYWZlQWN0aXZlRWxlbWVudCgpICYmIHRoaXMuZm9jdXMgKSB7XHJcblx0XHRcdFx0XHR0aGlzLmZvY3VzKCk7XHJcblx0XHRcdFx0XHRyZXR1cm4gZmFsc2U7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9LFxyXG5cdFx0XHRkZWxlZ2F0ZVR5cGU6IFwiZm9jdXNpblwiXHJcblx0XHR9LFxyXG5cdFx0Ymx1cjoge1xyXG5cdFx0XHR0cmlnZ2VyOiBmdW5jdGlvbigpIHtcclxuXHRcdFx0XHRpZiAoIHRoaXMgPT09IHNhZmVBY3RpdmVFbGVtZW50KCkgJiYgdGhpcy5ibHVyICkge1xyXG5cdFx0XHRcdFx0dGhpcy5ibHVyKCk7XHJcblx0XHRcdFx0XHRyZXR1cm4gZmFsc2U7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9LFxyXG5cdFx0XHRkZWxlZ2F0ZVR5cGU6IFwiZm9jdXNvdXRcIlxyXG5cdFx0fSxcclxuXHRcdGNsaWNrOiB7XHJcblxyXG5cdFx0XHQvLyBGb3IgY2hlY2tib3gsIGZpcmUgbmF0aXZlIGV2ZW50IHNvIGNoZWNrZWQgc3RhdGUgd2lsbCBiZSByaWdodFxyXG5cdFx0XHR0cmlnZ2VyOiBmdW5jdGlvbigpIHtcclxuXHRcdFx0XHRpZiAoIHRoaXMudHlwZSA9PT0gXCJjaGVja2JveFwiICYmIHRoaXMuY2xpY2sgJiYgalF1ZXJ5Lm5vZGVOYW1lKCB0aGlzLCBcImlucHV0XCIgKSApIHtcclxuXHRcdFx0XHRcdHRoaXMuY2xpY2soKTtcclxuXHRcdFx0XHRcdHJldHVybiBmYWxzZTtcclxuXHRcdFx0XHR9XHJcblx0XHRcdH0sXHJcblxyXG5cdFx0XHQvLyBGb3IgY3Jvc3MtYnJvd3NlciBjb25zaXN0ZW5jeSwgZG9uJ3QgZmlyZSBuYXRpdmUgLmNsaWNrKCkgb24gbGlua3NcclxuXHRcdFx0X2RlZmF1bHQ6IGZ1bmN0aW9uKCBldmVudCApIHtcclxuXHRcdFx0XHRyZXR1cm4galF1ZXJ5Lm5vZGVOYW1lKCBldmVudC50YXJnZXQsIFwiYVwiICk7XHJcblx0XHRcdH1cclxuXHRcdH0sXHJcblxyXG5cdFx0YmVmb3JldW5sb2FkOiB7XHJcblx0XHRcdHBvc3REaXNwYXRjaDogZnVuY3Rpb24oIGV2ZW50ICkge1xyXG5cclxuXHRcdFx0XHQvLyBTdXBwb3J0OiBGaXJlZm94IDIwK1xyXG5cdFx0XHRcdC8vIEZpcmVmb3ggZG9lc24ndCBhbGVydCBpZiB0aGUgcmV0dXJuVmFsdWUgZmllbGQgaXMgbm90IHNldC5cclxuXHRcdFx0XHRpZiAoIGV2ZW50LnJlc3VsdCAhPT0gdW5kZWZpbmVkICYmIGV2ZW50Lm9yaWdpbmFsRXZlbnQgKSB7XHJcblx0XHRcdFx0XHRldmVudC5vcmlnaW5hbEV2ZW50LnJldHVyblZhbHVlID0gZXZlbnQucmVzdWx0O1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0fVxyXG5cdFx0fVxyXG5cdH1cclxufTtcclxuXHJcbmpRdWVyeS5yZW1vdmVFdmVudCA9IGZ1bmN0aW9uKCBlbGVtLCB0eXBlLCBoYW5kbGUgKSB7XHJcblxyXG5cdC8vIFRoaXMgXCJpZlwiIGlzIG5lZWRlZCBmb3IgcGxhaW4gb2JqZWN0c1xyXG5cdGlmICggZWxlbS5yZW1vdmVFdmVudExpc3RlbmVyICkge1xyXG5cdFx0ZWxlbS5yZW1vdmVFdmVudExpc3RlbmVyKCB0eXBlLCBoYW5kbGUgKTtcclxuXHR9XHJcbn07XHJcblxyXG5qUXVlcnkuRXZlbnQgPSBmdW5jdGlvbiggc3JjLCBwcm9wcyApIHtcclxuXHJcblx0Ly8gQWxsb3cgaW5zdGFudGlhdGlvbiB3aXRob3V0IHRoZSAnbmV3JyBrZXl3b3JkXHJcblx0aWYgKCAhKCB0aGlzIGluc3RhbmNlb2YgalF1ZXJ5LkV2ZW50ICkgKSB7XHJcblx0XHRyZXR1cm4gbmV3IGpRdWVyeS5FdmVudCggc3JjLCBwcm9wcyApO1xyXG5cdH1cclxuXHJcblx0Ly8gRXZlbnQgb2JqZWN0XHJcblx0aWYgKCBzcmMgJiYgc3JjLnR5cGUgKSB7XHJcblx0XHR0aGlzLm9yaWdpbmFsRXZlbnQgPSBzcmM7XHJcblx0XHR0aGlzLnR5cGUgPSBzcmMudHlwZTtcclxuXHJcblx0XHQvLyBFdmVudHMgYnViYmxpbmcgdXAgdGhlIGRvY3VtZW50IG1heSBoYXZlIGJlZW4gbWFya2VkIGFzIHByZXZlbnRlZFxyXG5cdFx0Ly8gYnkgYSBoYW5kbGVyIGxvd2VyIGRvd24gdGhlIHRyZWU7IHJlZmxlY3QgdGhlIGNvcnJlY3QgdmFsdWUuXHJcblx0XHR0aGlzLmlzRGVmYXVsdFByZXZlbnRlZCA9IHNyYy5kZWZhdWx0UHJldmVudGVkIHx8XHJcblx0XHRcdFx0c3JjLmRlZmF1bHRQcmV2ZW50ZWQgPT09IHVuZGVmaW5lZCAmJlxyXG5cclxuXHRcdFx0XHQvLyBTdXBwb3J0OiBBbmRyb2lkPDQuMFxyXG5cdFx0XHRcdHNyYy5yZXR1cm5WYWx1ZSA9PT0gZmFsc2UgP1xyXG5cdFx0XHRyZXR1cm5UcnVlIDpcclxuXHRcdFx0cmV0dXJuRmFsc2U7XHJcblxyXG5cdC8vIEV2ZW50IHR5cGVcclxuXHR9IGVsc2Uge1xyXG5cdFx0dGhpcy50eXBlID0gc3JjO1xyXG5cdH1cclxuXHJcblx0Ly8gUHV0IGV4cGxpY2l0bHkgcHJvdmlkZWQgcHJvcGVydGllcyBvbnRvIHRoZSBldmVudCBvYmplY3RcclxuXHRpZiAoIHByb3BzICkge1xyXG5cdFx0alF1ZXJ5LmV4dGVuZCggdGhpcywgcHJvcHMgKTtcclxuXHR9XHJcblxyXG5cdC8vIENyZWF0ZSBhIHRpbWVzdGFtcCBpZiBpbmNvbWluZyBldmVudCBkb2Vzbid0IGhhdmUgb25lXHJcblx0dGhpcy50aW1lU3RhbXAgPSBzcmMgJiYgc3JjLnRpbWVTdGFtcCB8fCBqUXVlcnkubm93KCk7XHJcblxyXG5cdC8vIE1hcmsgaXQgYXMgZml4ZWRcclxuXHR0aGlzWyBqUXVlcnkuZXhwYW5kbyBdID0gdHJ1ZTtcclxufTtcclxuXHJcbi8vIGpRdWVyeS5FdmVudCBpcyBiYXNlZCBvbiBET00zIEV2ZW50cyBhcyBzcGVjaWZpZWQgYnkgdGhlIEVDTUFTY3JpcHQgTGFuZ3VhZ2UgQmluZGluZ1xyXG4vLyBodHRwOi8vd3d3LnczLm9yZy9UUi8yMDAzL1dELURPTS1MZXZlbC0zLUV2ZW50cy0yMDAzMDMzMS9lY21hLXNjcmlwdC1iaW5kaW5nLmh0bWxcclxualF1ZXJ5LkV2ZW50LnByb3RvdHlwZSA9IHtcclxuXHRjb25zdHJ1Y3RvcjogalF1ZXJ5LkV2ZW50LFxyXG5cdGlzRGVmYXVsdFByZXZlbnRlZDogcmV0dXJuRmFsc2UsXHJcblx0aXNQcm9wYWdhdGlvblN0b3BwZWQ6IHJldHVybkZhbHNlLFxyXG5cdGlzSW1tZWRpYXRlUHJvcGFnYXRpb25TdG9wcGVkOiByZXR1cm5GYWxzZSxcclxuXHRpc1NpbXVsYXRlZDogZmFsc2UsXHJcblxyXG5cdHByZXZlbnREZWZhdWx0OiBmdW5jdGlvbigpIHtcclxuXHRcdHZhciBlID0gdGhpcy5vcmlnaW5hbEV2ZW50O1xyXG5cclxuXHRcdHRoaXMuaXNEZWZhdWx0UHJldmVudGVkID0gcmV0dXJuVHJ1ZTtcclxuXHJcblx0XHRpZiAoIGUgJiYgIXRoaXMuaXNTaW11bGF0ZWQgKSB7XHJcblx0XHRcdGUucHJldmVudERlZmF1bHQoKTtcclxuXHRcdH1cclxuXHR9LFxyXG5cdHN0b3BQcm9wYWdhdGlvbjogZnVuY3Rpb24oKSB7XHJcblx0XHR2YXIgZSA9IHRoaXMub3JpZ2luYWxFdmVudDtcclxuXHJcblx0XHR0aGlzLmlzUHJvcGFnYXRpb25TdG9wcGVkID0gcmV0dXJuVHJ1ZTtcclxuXHJcblx0XHRpZiAoIGUgJiYgIXRoaXMuaXNTaW11bGF0ZWQgKSB7XHJcblx0XHRcdGUuc3RvcFByb3BhZ2F0aW9uKCk7XHJcblx0XHR9XHJcblx0fSxcclxuXHRzdG9wSW1tZWRpYXRlUHJvcGFnYXRpb246IGZ1bmN0aW9uKCkge1xyXG5cdFx0dmFyIGUgPSB0aGlzLm9yaWdpbmFsRXZlbnQ7XHJcblxyXG5cdFx0dGhpcy5pc0ltbWVkaWF0ZVByb3BhZ2F0aW9uU3RvcHBlZCA9IHJldHVyblRydWU7XHJcblxyXG5cdFx0aWYgKCBlICYmICF0aGlzLmlzU2ltdWxhdGVkICkge1xyXG5cdFx0XHRlLnN0b3BJbW1lZGlhdGVQcm9wYWdhdGlvbigpO1xyXG5cdFx0fVxyXG5cclxuXHRcdHRoaXMuc3RvcFByb3BhZ2F0aW9uKCk7XHJcblx0fVxyXG59O1xyXG5cclxuLy8gQ3JlYXRlIG1vdXNlZW50ZXIvbGVhdmUgZXZlbnRzIHVzaW5nIG1vdXNlb3Zlci9vdXQgYW5kIGV2ZW50LXRpbWUgY2hlY2tzXHJcbi8vIHNvIHRoYXQgZXZlbnQgZGVsZWdhdGlvbiB3b3JrcyBpbiBqUXVlcnkuXHJcbi8vIERvIHRoZSBzYW1lIGZvciBwb2ludGVyZW50ZXIvcG9pbnRlcmxlYXZlIGFuZCBwb2ludGVyb3Zlci9wb2ludGVyb3V0XHJcbi8vXHJcbi8vIFN1cHBvcnQ6IFNhZmFyaSA3IG9ubHlcclxuLy8gU2FmYXJpIHNlbmRzIG1vdXNlZW50ZXIgdG9vIG9mdGVuOyBzZWU6XHJcbi8vIGh0dHBzOi8vY29kZS5nb29nbGUuY29tL3AvY2hyb21pdW0vaXNzdWVzL2RldGFpbD9pZD00NzAyNThcclxuLy8gZm9yIHRoZSBkZXNjcmlwdGlvbiBvZiB0aGUgYnVnIChpdCBleGlzdGVkIGluIG9sZGVyIENocm9tZSB2ZXJzaW9ucyBhcyB3ZWxsKS5cclxualF1ZXJ5LmVhY2goIHtcclxuXHRtb3VzZWVudGVyOiBcIm1vdXNlb3ZlclwiLFxyXG5cdG1vdXNlbGVhdmU6IFwibW91c2VvdXRcIixcclxuXHRwb2ludGVyZW50ZXI6IFwicG9pbnRlcm92ZXJcIixcclxuXHRwb2ludGVybGVhdmU6IFwicG9pbnRlcm91dFwiXHJcbn0sIGZ1bmN0aW9uKCBvcmlnLCBmaXggKSB7XHJcblx0alF1ZXJ5LmV2ZW50LnNwZWNpYWxbIG9yaWcgXSA9IHtcclxuXHRcdGRlbGVnYXRlVHlwZTogZml4LFxyXG5cdFx0YmluZFR5cGU6IGZpeCxcclxuXHJcblx0XHRoYW5kbGU6IGZ1bmN0aW9uKCBldmVudCApIHtcclxuXHRcdFx0dmFyIHJldCxcclxuXHRcdFx0XHR0YXJnZXQgPSB0aGlzLFxyXG5cdFx0XHRcdHJlbGF0ZWQgPSBldmVudC5yZWxhdGVkVGFyZ2V0LFxyXG5cdFx0XHRcdGhhbmRsZU9iaiA9IGV2ZW50LmhhbmRsZU9iajtcclxuXHJcblx0XHRcdC8vIEZvciBtb3VzZWVudGVyL2xlYXZlIGNhbGwgdGhlIGhhbmRsZXIgaWYgcmVsYXRlZCBpcyBvdXRzaWRlIHRoZSB0YXJnZXQuXHJcblx0XHRcdC8vIE5COiBObyByZWxhdGVkVGFyZ2V0IGlmIHRoZSBtb3VzZSBsZWZ0L2VudGVyZWQgdGhlIGJyb3dzZXIgd2luZG93XHJcblx0XHRcdGlmICggIXJlbGF0ZWQgfHwgKCByZWxhdGVkICE9PSB0YXJnZXQgJiYgIWpRdWVyeS5jb250YWlucyggdGFyZ2V0LCByZWxhdGVkICkgKSApIHtcclxuXHRcdFx0XHRldmVudC50eXBlID0gaGFuZGxlT2JqLm9yaWdUeXBlO1xyXG5cdFx0XHRcdHJldCA9IGhhbmRsZU9iai5oYW5kbGVyLmFwcGx5KCB0aGlzLCBhcmd1bWVudHMgKTtcclxuXHRcdFx0XHRldmVudC50eXBlID0gZml4O1xyXG5cdFx0XHR9XHJcblx0XHRcdHJldHVybiByZXQ7XHJcblx0XHR9XHJcblx0fTtcclxufSApO1xyXG5cclxualF1ZXJ5LmZuLmV4dGVuZCgge1xyXG5cdG9uOiBmdW5jdGlvbiggdHlwZXMsIHNlbGVjdG9yLCBkYXRhLCBmbiApIHtcclxuXHRcdHJldHVybiBvbiggdGhpcywgdHlwZXMsIHNlbGVjdG9yLCBkYXRhLCBmbiApO1xyXG5cdH0sXHJcblx0b25lOiBmdW5jdGlvbiggdHlwZXMsIHNlbGVjdG9yLCBkYXRhLCBmbiApIHtcclxuXHRcdHJldHVybiBvbiggdGhpcywgdHlwZXMsIHNlbGVjdG9yLCBkYXRhLCBmbiwgMSApO1xyXG5cdH0sXHJcblx0b2ZmOiBmdW5jdGlvbiggdHlwZXMsIHNlbGVjdG9yLCBmbiApIHtcclxuXHRcdHZhciBoYW5kbGVPYmosIHR5cGU7XHJcblx0XHRpZiAoIHR5cGVzICYmIHR5cGVzLnByZXZlbnREZWZhdWx0ICYmIHR5cGVzLmhhbmRsZU9iaiApIHtcclxuXHJcblx0XHRcdC8vICggZXZlbnQgKSAgZGlzcGF0Y2hlZCBqUXVlcnkuRXZlbnRcclxuXHRcdFx0aGFuZGxlT2JqID0gdHlwZXMuaGFuZGxlT2JqO1xyXG5cdFx0XHRqUXVlcnkoIHR5cGVzLmRlbGVnYXRlVGFyZ2V0ICkub2ZmKFxyXG5cdFx0XHRcdGhhbmRsZU9iai5uYW1lc3BhY2UgP1xyXG5cdFx0XHRcdFx0aGFuZGxlT2JqLm9yaWdUeXBlICsgXCIuXCIgKyBoYW5kbGVPYmoubmFtZXNwYWNlIDpcclxuXHRcdFx0XHRcdGhhbmRsZU9iai5vcmlnVHlwZSxcclxuXHRcdFx0XHRoYW5kbGVPYmouc2VsZWN0b3IsXHJcblx0XHRcdFx0aGFuZGxlT2JqLmhhbmRsZXJcclxuXHRcdFx0KTtcclxuXHRcdFx0cmV0dXJuIHRoaXM7XHJcblx0XHR9XHJcblx0XHRpZiAoIHR5cGVvZiB0eXBlcyA9PT0gXCJvYmplY3RcIiApIHtcclxuXHJcblx0XHRcdC8vICggdHlwZXMtb2JqZWN0IFssIHNlbGVjdG9yXSApXHJcblx0XHRcdGZvciAoIHR5cGUgaW4gdHlwZXMgKSB7XHJcblx0XHRcdFx0dGhpcy5vZmYoIHR5cGUsIHNlbGVjdG9yLCB0eXBlc1sgdHlwZSBdICk7XHJcblx0XHRcdH1cclxuXHRcdFx0cmV0dXJuIHRoaXM7XHJcblx0XHR9XHJcblx0XHRpZiAoIHNlbGVjdG9yID09PSBmYWxzZSB8fCB0eXBlb2Ygc2VsZWN0b3IgPT09IFwiZnVuY3Rpb25cIiApIHtcclxuXHJcblx0XHRcdC8vICggdHlwZXMgWywgZm5dIClcclxuXHRcdFx0Zm4gPSBzZWxlY3RvcjtcclxuXHRcdFx0c2VsZWN0b3IgPSB1bmRlZmluZWQ7XHJcblx0XHR9XHJcblx0XHRpZiAoIGZuID09PSBmYWxzZSApIHtcclxuXHRcdFx0Zm4gPSByZXR1cm5GYWxzZTtcclxuXHRcdH1cclxuXHRcdHJldHVybiB0aGlzLmVhY2goIGZ1bmN0aW9uKCkge1xyXG5cdFx0XHRqUXVlcnkuZXZlbnQucmVtb3ZlKCB0aGlzLCB0eXBlcywgZm4sIHNlbGVjdG9yICk7XHJcblx0XHR9ICk7XHJcblx0fVxyXG59ICk7XHJcblxyXG5cclxudmFyXHJcblx0cnhodG1sVGFnID0gLzwoPyFhcmVhfGJyfGNvbHxlbWJlZHxocnxpbWd8aW5wdXR8bGlua3xtZXRhfHBhcmFtKSgoW1xcdzotXSspW14+XSopXFwvPi9naSxcclxuXHJcblx0Ly8gU3VwcG9ydDogSUUgMTAtMTEsIEVkZ2UgMTAyNDArXHJcblx0Ly8gSW4gSUUvRWRnZSB1c2luZyByZWdleCBncm91cHMgaGVyZSBjYXVzZXMgc2V2ZXJlIHNsb3dkb3ducy5cclxuXHQvLyBTZWUgaHR0cHM6Ly9jb25uZWN0Lm1pY3Jvc29mdC5jb20vSUUvZmVlZGJhY2svZGV0YWlscy8xNzM2NTEyL1xyXG5cdHJub0lubmVyaHRtbCA9IC88c2NyaXB0fDxzdHlsZXw8bGluay9pLFxyXG5cclxuXHQvLyBjaGVja2VkPVwiY2hlY2tlZFwiIG9yIGNoZWNrZWRcclxuXHRyY2hlY2tlZCA9IC9jaGVja2VkXFxzKig/OltePV18PVxccyouY2hlY2tlZC4pL2ksXHJcblx0cnNjcmlwdFR5cGVNYXNrZWQgPSAvXnRydWVcXC8oLiopLyxcclxuXHRyY2xlYW5TY3JpcHQgPSAvXlxccyo8ISg/OlxcW0NEQVRBXFxbfC0tKXwoPzpcXF1cXF18LS0pPlxccyokL2c7XHJcblxyXG4vLyBNYW5pcHVsYXRpbmcgdGFibGVzIHJlcXVpcmVzIGEgdGJvZHlcclxuZnVuY3Rpb24gbWFuaXB1bGF0aW9uVGFyZ2V0KCBlbGVtLCBjb250ZW50ICkge1xyXG5cdHJldHVybiBqUXVlcnkubm9kZU5hbWUoIGVsZW0sIFwidGFibGVcIiApICYmXHJcblx0XHRqUXVlcnkubm9kZU5hbWUoIGNvbnRlbnQubm9kZVR5cGUgIT09IDExID8gY29udGVudCA6IGNvbnRlbnQuZmlyc3RDaGlsZCwgXCJ0clwiICkgP1xyXG5cclxuXHRcdGVsZW0uZ2V0RWxlbWVudHNCeVRhZ05hbWUoIFwidGJvZHlcIiApWyAwIF0gfHxcclxuXHRcdFx0ZWxlbS5hcHBlbmRDaGlsZCggZWxlbS5vd25lckRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoIFwidGJvZHlcIiApICkgOlxyXG5cdFx0ZWxlbTtcclxufVxyXG5cclxuLy8gUmVwbGFjZS9yZXN0b3JlIHRoZSB0eXBlIGF0dHJpYnV0ZSBvZiBzY3JpcHQgZWxlbWVudHMgZm9yIHNhZmUgRE9NIG1hbmlwdWxhdGlvblxyXG5mdW5jdGlvbiBkaXNhYmxlU2NyaXB0KCBlbGVtICkge1xyXG5cdGVsZW0udHlwZSA9ICggZWxlbS5nZXRBdHRyaWJ1dGUoIFwidHlwZVwiICkgIT09IG51bGwgKSArIFwiL1wiICsgZWxlbS50eXBlO1xyXG5cdHJldHVybiBlbGVtO1xyXG59XHJcbmZ1bmN0aW9uIHJlc3RvcmVTY3JpcHQoIGVsZW0gKSB7XHJcblx0dmFyIG1hdGNoID0gcnNjcmlwdFR5cGVNYXNrZWQuZXhlYyggZWxlbS50eXBlICk7XHJcblxyXG5cdGlmICggbWF0Y2ggKSB7XHJcblx0XHRlbGVtLnR5cGUgPSBtYXRjaFsgMSBdO1xyXG5cdH0gZWxzZSB7XHJcblx0XHRlbGVtLnJlbW92ZUF0dHJpYnV0ZSggXCJ0eXBlXCIgKTtcclxuXHR9XHJcblxyXG5cdHJldHVybiBlbGVtO1xyXG59XHJcblxyXG5mdW5jdGlvbiBjbG9uZUNvcHlFdmVudCggc3JjLCBkZXN0ICkge1xyXG5cdHZhciBpLCBsLCB0eXBlLCBwZGF0YU9sZCwgcGRhdGFDdXIsIHVkYXRhT2xkLCB1ZGF0YUN1ciwgZXZlbnRzO1xyXG5cclxuXHRpZiAoIGRlc3Qubm9kZVR5cGUgIT09IDEgKSB7XHJcblx0XHRyZXR1cm47XHJcblx0fVxyXG5cclxuXHQvLyAxLiBDb3B5IHByaXZhdGUgZGF0YTogZXZlbnRzLCBoYW5kbGVycywgZXRjLlxyXG5cdGlmICggZGF0YVByaXYuaGFzRGF0YSggc3JjICkgKSB7XHJcblx0XHRwZGF0YU9sZCA9IGRhdGFQcml2LmFjY2Vzcyggc3JjICk7XHJcblx0XHRwZGF0YUN1ciA9IGRhdGFQcml2LnNldCggZGVzdCwgcGRhdGFPbGQgKTtcclxuXHRcdGV2ZW50cyA9IHBkYXRhT2xkLmV2ZW50cztcclxuXHJcblx0XHRpZiAoIGV2ZW50cyApIHtcclxuXHRcdFx0ZGVsZXRlIHBkYXRhQ3VyLmhhbmRsZTtcclxuXHRcdFx0cGRhdGFDdXIuZXZlbnRzID0ge307XHJcblxyXG5cdFx0XHRmb3IgKCB0eXBlIGluIGV2ZW50cyApIHtcclxuXHRcdFx0XHRmb3IgKCBpID0gMCwgbCA9IGV2ZW50c1sgdHlwZSBdLmxlbmd0aDsgaSA8IGw7IGkrKyApIHtcclxuXHRcdFx0XHRcdGpRdWVyeS5ldmVudC5hZGQoIGRlc3QsIHR5cGUsIGV2ZW50c1sgdHlwZSBdWyBpIF0gKTtcclxuXHRcdFx0XHR9XHJcblx0XHRcdH1cclxuXHRcdH1cclxuXHR9XHJcblxyXG5cdC8vIDIuIENvcHkgdXNlciBkYXRhXHJcblx0aWYgKCBkYXRhVXNlci5oYXNEYXRhKCBzcmMgKSApIHtcclxuXHRcdHVkYXRhT2xkID0gZGF0YVVzZXIuYWNjZXNzKCBzcmMgKTtcclxuXHRcdHVkYXRhQ3VyID0galF1ZXJ5LmV4dGVuZCgge30sIHVkYXRhT2xkICk7XHJcblxyXG5cdFx0ZGF0YVVzZXIuc2V0KCBkZXN0LCB1ZGF0YUN1ciApO1xyXG5cdH1cclxufVxyXG5cclxuLy8gRml4IElFIGJ1Z3MsIHNlZSBzdXBwb3J0IHRlc3RzXHJcbmZ1bmN0aW9uIGZpeElucHV0KCBzcmMsIGRlc3QgKSB7XHJcblx0dmFyIG5vZGVOYW1lID0gZGVzdC5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpO1xyXG5cclxuXHQvLyBGYWlscyB0byBwZXJzaXN0IHRoZSBjaGVja2VkIHN0YXRlIG9mIGEgY2xvbmVkIGNoZWNrYm94IG9yIHJhZGlvIGJ1dHRvbi5cclxuXHRpZiAoIG5vZGVOYW1lID09PSBcImlucHV0XCIgJiYgcmNoZWNrYWJsZVR5cGUudGVzdCggc3JjLnR5cGUgKSApIHtcclxuXHRcdGRlc3QuY2hlY2tlZCA9IHNyYy5jaGVja2VkO1xyXG5cclxuXHQvLyBGYWlscyB0byByZXR1cm4gdGhlIHNlbGVjdGVkIG9wdGlvbiB0byB0aGUgZGVmYXVsdCBzZWxlY3RlZCBzdGF0ZSB3aGVuIGNsb25pbmcgb3B0aW9uc1xyXG5cdH0gZWxzZSBpZiAoIG5vZGVOYW1lID09PSBcImlucHV0XCIgfHwgbm9kZU5hbWUgPT09IFwidGV4dGFyZWFcIiApIHtcclxuXHRcdGRlc3QuZGVmYXVsdFZhbHVlID0gc3JjLmRlZmF1bHRWYWx1ZTtcclxuXHR9XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGRvbU1hbmlwKCBjb2xsZWN0aW9uLCBhcmdzLCBjYWxsYmFjaywgaWdub3JlZCApIHtcclxuXHJcblx0Ly8gRmxhdHRlbiBhbnkgbmVzdGVkIGFycmF5c1xyXG5cdGFyZ3MgPSBjb25jYXQuYXBwbHkoIFtdLCBhcmdzICk7XHJcblxyXG5cdHZhciBmcmFnbWVudCwgZmlyc3QsIHNjcmlwdHMsIGhhc1NjcmlwdHMsIG5vZGUsIGRvYyxcclxuXHRcdGkgPSAwLFxyXG5cdFx0bCA9IGNvbGxlY3Rpb24ubGVuZ3RoLFxyXG5cdFx0aU5vQ2xvbmUgPSBsIC0gMSxcclxuXHRcdHZhbHVlID0gYXJnc1sgMCBdLFxyXG5cdFx0aXNGdW5jdGlvbiA9IGpRdWVyeS5pc0Z1bmN0aW9uKCB2YWx1ZSApO1xyXG5cclxuXHQvLyBXZSBjYW4ndCBjbG9uZU5vZGUgZnJhZ21lbnRzIHRoYXQgY29udGFpbiBjaGVja2VkLCBpbiBXZWJLaXRcclxuXHRpZiAoIGlzRnVuY3Rpb24gfHxcclxuXHRcdFx0KCBsID4gMSAmJiB0eXBlb2YgdmFsdWUgPT09IFwic3RyaW5nXCIgJiZcclxuXHRcdFx0XHQhc3VwcG9ydC5jaGVja0Nsb25lICYmIHJjaGVja2VkLnRlc3QoIHZhbHVlICkgKSApIHtcclxuXHRcdHJldHVybiBjb2xsZWN0aW9uLmVhY2goIGZ1bmN0aW9uKCBpbmRleCApIHtcclxuXHRcdFx0dmFyIHNlbGYgPSBjb2xsZWN0aW9uLmVxKCBpbmRleCApO1xyXG5cdFx0XHRpZiAoIGlzRnVuY3Rpb24gKSB7XHJcblx0XHRcdFx0YXJnc1sgMCBdID0gdmFsdWUuY2FsbCggdGhpcywgaW5kZXgsIHNlbGYuaHRtbCgpICk7XHJcblx0XHRcdH1cclxuXHRcdFx0ZG9tTWFuaXAoIHNlbGYsIGFyZ3MsIGNhbGxiYWNrLCBpZ25vcmVkICk7XHJcblx0XHR9ICk7XHJcblx0fVxyXG5cclxuXHRpZiAoIGwgKSB7XHJcblx0XHRmcmFnbWVudCA9IGJ1aWxkRnJhZ21lbnQoIGFyZ3MsIGNvbGxlY3Rpb25bIDAgXS5vd25lckRvY3VtZW50LCBmYWxzZSwgY29sbGVjdGlvbiwgaWdub3JlZCApO1xyXG5cdFx0Zmlyc3QgPSBmcmFnbWVudC5maXJzdENoaWxkO1xyXG5cclxuXHRcdGlmICggZnJhZ21lbnQuY2hpbGROb2Rlcy5sZW5ndGggPT09IDEgKSB7XHJcblx0XHRcdGZyYWdtZW50ID0gZmlyc3Q7XHJcblx0XHR9XHJcblxyXG5cdFx0Ly8gUmVxdWlyZSBlaXRoZXIgbmV3IGNvbnRlbnQgb3IgYW4gaW50ZXJlc3QgaW4gaWdub3JlZCBlbGVtZW50cyB0byBpbnZva2UgdGhlIGNhbGxiYWNrXHJcblx0XHRpZiAoIGZpcnN0IHx8IGlnbm9yZWQgKSB7XHJcblx0XHRcdHNjcmlwdHMgPSBqUXVlcnkubWFwKCBnZXRBbGwoIGZyYWdtZW50LCBcInNjcmlwdFwiICksIGRpc2FibGVTY3JpcHQgKTtcclxuXHRcdFx0aGFzU2NyaXB0cyA9IHNjcmlwdHMubGVuZ3RoO1xyXG5cclxuXHRcdFx0Ly8gVXNlIHRoZSBvcmlnaW5hbCBmcmFnbWVudCBmb3IgdGhlIGxhc3QgaXRlbVxyXG5cdFx0XHQvLyBpbnN0ZWFkIG9mIHRoZSBmaXJzdCBiZWNhdXNlIGl0IGNhbiBlbmQgdXBcclxuXHRcdFx0Ly8gYmVpbmcgZW1wdGllZCBpbmNvcnJlY3RseSBpbiBjZXJ0YWluIHNpdHVhdGlvbnMgKCM4MDcwKS5cclxuXHRcdFx0Zm9yICggOyBpIDwgbDsgaSsrICkge1xyXG5cdFx0XHRcdG5vZGUgPSBmcmFnbWVudDtcclxuXHJcblx0XHRcdFx0aWYgKCBpICE9PSBpTm9DbG9uZSApIHtcclxuXHRcdFx0XHRcdG5vZGUgPSBqUXVlcnkuY2xvbmUoIG5vZGUsIHRydWUsIHRydWUgKTtcclxuXHJcblx0XHRcdFx0XHQvLyBLZWVwIHJlZmVyZW5jZXMgdG8gY2xvbmVkIHNjcmlwdHMgZm9yIGxhdGVyIHJlc3RvcmF0aW9uXHJcblx0XHRcdFx0XHRpZiAoIGhhc1NjcmlwdHMgKSB7XHJcblxyXG5cdFx0XHRcdFx0XHQvLyBTdXBwb3J0OiBBbmRyb2lkPDQuMSwgUGhhbnRvbUpTPDJcclxuXHRcdFx0XHRcdFx0Ly8gcHVzaC5hcHBseShfLCBhcnJheWxpa2UpIHRocm93cyBvbiBhbmNpZW50IFdlYktpdFxyXG5cdFx0XHRcdFx0XHRqUXVlcnkubWVyZ2UoIHNjcmlwdHMsIGdldEFsbCggbm9kZSwgXCJzY3JpcHRcIiApICk7XHJcblx0XHRcdFx0XHR9XHJcblx0XHRcdFx0fVxyXG5cclxuXHRcdFx0XHRjYWxsYmFjay5jYWxsKCBjb2xsZWN0aW9uWyBpIF0sIG5vZGUsIGkgKTtcclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0aWYgKCBoYXNTY3JpcHRzICkge1xyXG5cdFx0XHRcdGRvYyA9IHNjcmlwdHNbIHNjcmlwdHMubGVuZ3RoIC0gMSBdLm93bmVyRG9jdW1lbnQ7XHJcblxyXG5cdFx0XHRcdC8vIFJlZW5hYmxlIHNjcmlwdHNcclxuXHRcdFx0XHRqUXVlcnkubWFwKCBzY3JpcHRzLCByZXN0b3JlU2NyaXB0ICk7XHJcblxyXG5cdFx0XHRcdC8vIEV2YWx1YXRlIGV4ZWN1dGFibGUgc2NyaXB0cyBvbiBmaXJzdCBkb2N1bWVudCBpbnNlcnRpb25cclxuXHRcdFx0XHRmb3IgKCBpID0gMDsgaSA8IGhhc1NjcmlwdHM7IGkrKyApIHtcclxuXHRcdFx0XHRcdG5vZGUgPSBzY3JpcHRzWyBpIF07XHJcblx0XHRcdFx0XHRpZiAoIHJzY3JpcHRUeXBlLnRlc3QoIG5vZGUudHlwZSB8fCBcIlwiICkgJiZcclxuXHRcdFx0XHRcdFx0IWRhdGFQcml2LmFjY2Vzcyggbm9kZSwgXCJnbG9iYWxFdmFsXCIgKSAmJlxyXG5cdFx0XHRcdFx0XHRqUXVlcnkuY29udGFpbnMoIGRvYywgbm9kZSApICkge1xyXG5cclxuXHRcdFx0XHRcdFx0aWYgKCBub2RlLnNyYyApIHtcclxuXHJcblx0XHRcdFx0XHRcdFx0Ly8gT3B0aW9uYWwgQUpBWCBkZXBlbmRlbmN5LCBidXQgd29uJ3QgcnVuIHNjcmlwdHMgaWYgbm90IHByZXNlbnRcclxuXHRcdFx0XHRcdFx0XHRpZiAoIGpRdWVyeS5fZXZhbFVybCApIHtcclxuXHRcdFx0XHRcdFx0XHRcdGpRdWVyeS5fZXZhbFVybCggbm9kZS5zcmMgKTtcclxuXHRcdFx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHRcdH0gZWxzZSB7XHJcblx0XHRcdFx0XHRcdFx0alF1ZXJ5Lmdsb2JhbEV2YWwoIG5vZGUudGV4dENvbnRlbnQucmVwbGFjZSggcmNsZWFuU2NyaXB0LCBcIlwiICkgKTtcclxuXHRcdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0fVxyXG5cdFx0XHRcdH1cclxuXHRcdFx0fVxyXG5cdFx0fVxyXG5cdH1cclxuXHJcblx0cmV0dXJuIGNvbGxlY3Rpb247XHJcbn1cclxuXHJcbmZ1bmN0aW9uIHJlbW92ZSggZWxlbSwgc2VsZWN0b3IsIGtlZXBEYXRhICkge1xyXG5cdHZhciBub2RlLFxyXG5cdFx0bm9kZXMgPSBzZWxlY3RvciA/IGpRdWVyeS5maWx0ZXIoIHNlbGVjdG9yLCBlbGVtICkgOiBlbGVtLFxyXG5cdFx0aSA9IDA7XHJcblxyXG5cdGZvciAoIDsgKCBub2RlID0gbm9kZXNbIGkgXSApICE9IG51bGw7IGkrKyApIHtcclxuXHRcdGlmICggIWtlZXBEYXRhICYmIG5vZGUubm9kZVR5cGUgPT09IDEgKSB7XHJcblx0XHRcdGpRdWVyeS5jbGVhbkRhdGEoIGdldEFsbCggbm9kZSApICk7XHJcblx0XHR9XHJcblxyXG5cdFx0aWYgKCBub2RlLnBhcmVudE5vZGUgKSB7XHJcblx0XHRcdGlmICgga2VlcERhdGEgJiYgalF1ZXJ5LmNvbnRhaW5zKCBub2RlLm93bmVyRG9jdW1lbnQsIG5vZGUgKSApIHtcclxuXHRcdFx0XHRzZXRHbG9iYWxFdmFsKCBnZXRBbGwoIG5vZGUsIFwic2NyaXB0XCIgKSApO1xyXG5cdFx0XHR9XHJcblx0XHRcdG5vZGUucGFyZW50Tm9kZS5yZW1vdmVDaGlsZCggbm9kZSApO1xyXG5cdFx0fVxyXG5cdH1cclxuXHJcblx0cmV0dXJuIGVsZW07XHJcbn1cclxuXHJcbmpRdWVyeS5leHRlbmQoIHtcclxuXHRodG1sUHJlZmlsdGVyOiBmdW5jdGlvbiggaHRtbCApIHtcclxuXHRcdHJldHVybiBodG1sLnJlcGxhY2UoIHJ4aHRtbFRhZywgXCI8JDE+PC8kMj5cIiApO1xyXG5cdH0sXHJcblxyXG5cdGNsb25lOiBmdW5jdGlvbiggZWxlbSwgZGF0YUFuZEV2ZW50cywgZGVlcERhdGFBbmRFdmVudHMgKSB7XHJcblx0XHR2YXIgaSwgbCwgc3JjRWxlbWVudHMsIGRlc3RFbGVtZW50cyxcclxuXHRcdFx0Y2xvbmUgPSBlbGVtLmNsb25lTm9kZSggdHJ1ZSApLFxyXG5cdFx0XHRpblBhZ2UgPSBqUXVlcnkuY29udGFpbnMoIGVsZW0ub3duZXJEb2N1bWVudCwgZWxlbSApO1xyXG5cclxuXHRcdC8vIEZpeCBJRSBjbG9uaW5nIGlzc3Vlc1xyXG5cdFx0aWYgKCAhc3VwcG9ydC5ub0Nsb25lQ2hlY2tlZCAmJiAoIGVsZW0ubm9kZVR5cGUgPT09IDEgfHwgZWxlbS5ub2RlVHlwZSA9PT0gMTEgKSAmJlxyXG5cdFx0XHRcdCFqUXVlcnkuaXNYTUxEb2MoIGVsZW0gKSApIHtcclxuXHJcblx0XHRcdC8vIFdlIGVzY2hldyBTaXp6bGUgaGVyZSBmb3IgcGVyZm9ybWFuY2UgcmVhc29uczogaHR0cDovL2pzcGVyZi5jb20vZ2V0YWxsLXZzLXNpenpsZS8yXHJcblx0XHRcdGRlc3RFbGVtZW50cyA9IGdldEFsbCggY2xvbmUgKTtcclxuXHRcdFx0c3JjRWxlbWVudHMgPSBnZXRBbGwoIGVsZW0gKTtcclxuXHJcblx0XHRcdGZvciAoIGkgPSAwLCBsID0gc3JjRWxlbWVudHMubGVuZ3RoOyBpIDwgbDsgaSsrICkge1xyXG5cdFx0XHRcdGZpeElucHV0KCBzcmNFbGVtZW50c1sgaSBdLCBkZXN0RWxlbWVudHNbIGkgXSApO1xyXG5cdFx0XHR9XHJcblx0XHR9XHJcblxyXG5cdFx0Ly8gQ29weSB0aGUgZXZlbnRzIGZyb20gdGhlIG9yaWdpbmFsIHRvIHRoZSBjbG9uZVxyXG5cdFx0aWYgKCBkYXRhQW5kRXZlbnRzICkge1xyXG5cdFx0XHRpZiAoIGRlZXBEYXRhQW5kRXZlbnRzICkge1xyXG5cdFx0XHRcdHNyY0VsZW1lbnRzID0gc3JjRWxlbWVudHMgfHwgZ2V0QWxsKCBlbGVtICk7XHJcblx0XHRcdFx0ZGVzdEVsZW1lbnRzID0gZGVzdEVsZW1lbnRzIHx8IGdldEFsbCggY2xvbmUgKTtcclxuXHJcblx0XHRcdFx0Zm9yICggaSA9IDAsIGwgPSBzcmNFbGVtZW50cy5sZW5ndGg7IGkgPCBsOyBpKysgKSB7XHJcblx0XHRcdFx0XHRjbG9uZUNvcHlFdmVudCggc3JjRWxlbWVudHNbIGkgXSwgZGVzdEVsZW1lbnRzWyBpIF0gKTtcclxuXHRcdFx0XHR9XHJcblx0XHRcdH0gZWxzZSB7XHJcblx0XHRcdFx0Y2xvbmVDb3B5RXZlbnQoIGVsZW0sIGNsb25lICk7XHJcblx0XHRcdH1cclxuXHRcdH1cclxuXHJcblx0XHQvLyBQcmVzZXJ2ZSBzY3JpcHQgZXZhbHVhdGlvbiBoaXN0b3J5XHJcblx0XHRkZXN0RWxlbWVudHMgPSBnZXRBbGwoIGNsb25lLCBcInNjcmlwdFwiICk7XHJcblx0XHRpZiAoIGRlc3RFbGVtZW50cy5sZW5ndGggPiAwICkge1xyXG5cdFx0XHRzZXRHbG9iYWxFdmFsKCBkZXN0RWxlbWVudHMsICFpblBhZ2UgJiYgZ2V0QWxsKCBlbGVtLCBcInNjcmlwdFwiICkgKTtcclxuXHRcdH1cclxuXHJcblx0XHQvLyBSZXR1cm4gdGhlIGNsb25lZCBzZXRcclxuXHRcdHJldHVybiBjbG9uZTtcclxuXHR9LFxyXG5cclxuXHRjbGVhbkRhdGE6IGZ1bmN0aW9uKCBlbGVtcyApIHtcclxuXHRcdHZhciBkYXRhLCBlbGVtLCB0eXBlLFxyXG5cdFx0XHRzcGVjaWFsID0galF1ZXJ5LmV2ZW50LnNwZWNpYWwsXHJcblx0XHRcdGkgPSAwO1xyXG5cclxuXHRcdGZvciAoIDsgKCBlbGVtID0gZWxlbXNbIGkgXSApICE9PSB1bmRlZmluZWQ7IGkrKyApIHtcclxuXHRcdFx0aWYgKCBhY2NlcHREYXRhKCBlbGVtICkgKSB7XHJcblx0XHRcdFx0aWYgKCAoIGRhdGEgPSBlbGVtWyBkYXRhUHJpdi5leHBhbmRvIF0gKSApIHtcclxuXHRcdFx0XHRcdGlmICggZGF0YS5ldmVudHMgKSB7XHJcblx0XHRcdFx0XHRcdGZvciAoIHR5cGUgaW4gZGF0YS5ldmVudHMgKSB7XHJcblx0XHRcdFx0XHRcdFx0aWYgKCBzcGVjaWFsWyB0eXBlIF0gKSB7XHJcblx0XHRcdFx0XHRcdFx0XHRqUXVlcnkuZXZlbnQucmVtb3ZlKCBlbGVtLCB0eXBlICk7XHJcblxyXG5cdFx0XHRcdFx0XHRcdC8vIFRoaXMgaXMgYSBzaG9ydGN1dCB0byBhdm9pZCBqUXVlcnkuZXZlbnQucmVtb3ZlJ3Mgb3ZlcmhlYWRcclxuXHRcdFx0XHRcdFx0XHR9IGVsc2Uge1xyXG5cdFx0XHRcdFx0XHRcdFx0alF1ZXJ5LnJlbW92ZUV2ZW50KCBlbGVtLCB0eXBlLCBkYXRhLmhhbmRsZSApO1xyXG5cdFx0XHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0fVxyXG5cclxuXHRcdFx0XHRcdC8vIFN1cHBvcnQ6IENocm9tZSA8PSAzNS00NStcclxuXHRcdFx0XHRcdC8vIEFzc2lnbiB1bmRlZmluZWQgaW5zdGVhZCBvZiB1c2luZyBkZWxldGUsIHNlZSBEYXRhI3JlbW92ZVxyXG5cdFx0XHRcdFx0ZWxlbVsgZGF0YVByaXYuZXhwYW5kbyBdID0gdW5kZWZpbmVkO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0XHRpZiAoIGVsZW1bIGRhdGFVc2VyLmV4cGFuZG8gXSApIHtcclxuXHJcblx0XHRcdFx0XHQvLyBTdXBwb3J0OiBDaHJvbWUgPD0gMzUtNDUrXHJcblx0XHRcdFx0XHQvLyBBc3NpZ24gdW5kZWZpbmVkIGluc3RlYWQgb2YgdXNpbmcgZGVsZXRlLCBzZWUgRGF0YSNyZW1vdmVcclxuXHRcdFx0XHRcdGVsZW1bIGRhdGFVc2VyLmV4cGFuZG8gXSA9IHVuZGVmaW5lZDtcclxuXHRcdFx0XHR9XHJcblx0XHRcdH1cclxuXHRcdH1cclxuXHR9XHJcbn0gKTtcclxuXHJcbmpRdWVyeS5mbi5leHRlbmQoIHtcclxuXHJcblx0Ly8gS2VlcCBkb21NYW5pcCBleHBvc2VkIHVudGlsIDMuMCAoZ2gtMjIyNSlcclxuXHRkb21NYW5pcDogZG9tTWFuaXAsXHJcblxyXG5cdGRldGFjaDogZnVuY3Rpb24oIHNlbGVjdG9yICkge1xyXG5cdFx0cmV0dXJuIHJlbW92ZSggdGhpcywgc2VsZWN0b3IsIHRydWUgKTtcclxuXHR9LFxyXG5cclxuXHRyZW1vdmU6IGZ1bmN0aW9uKCBzZWxlY3RvciApIHtcclxuXHRcdHJldHVybiByZW1vdmUoIHRoaXMsIHNlbGVjdG9yICk7XHJcblx0fSxcclxuXHJcblx0dGV4dDogZnVuY3Rpb24oIHZhbHVlICkge1xyXG5cdFx0cmV0dXJuIGFjY2VzcyggdGhpcywgZnVuY3Rpb24oIHZhbHVlICkge1xyXG5cdFx0XHRyZXR1cm4gdmFsdWUgPT09IHVuZGVmaW5lZCA/XHJcblx0XHRcdFx0alF1ZXJ5LnRleHQoIHRoaXMgKSA6XHJcblx0XHRcdFx0dGhpcy5lbXB0eSgpLmVhY2goIGZ1bmN0aW9uKCkge1xyXG5cdFx0XHRcdFx0aWYgKCB0aGlzLm5vZGVUeXBlID09PSAxIHx8IHRoaXMubm9kZVR5cGUgPT09IDExIHx8IHRoaXMubm9kZVR5cGUgPT09IDkgKSB7XHJcblx0XHRcdFx0XHRcdHRoaXMudGV4dENvbnRlbnQgPSB2YWx1ZTtcclxuXHRcdFx0XHRcdH1cclxuXHRcdFx0XHR9ICk7XHJcblx0XHR9LCBudWxsLCB2YWx1ZSwgYXJndW1lbnRzLmxlbmd0aCApO1xyXG5cdH0sXHJcblxyXG5cdGFwcGVuZDogZnVuY3Rpb24oKSB7XHJcblx0XHRyZXR1cm4gZG9tTWFuaXAoIHRoaXMsIGFyZ3VtZW50cywgZnVuY3Rpb24oIGVsZW0gKSB7XHJcblx0XHRcdGlmICggdGhpcy5ub2RlVHlwZSA9PT0gMSB8fCB0aGlzLm5vZGVUeXBlID09PSAxMSB8fCB0aGlzLm5vZGVUeXBlID09PSA5ICkge1xyXG5cdFx0XHRcdHZhciB0YXJnZXQgPSBtYW5pcHVsYXRpb25UYXJnZXQoIHRoaXMsIGVsZW0gKTtcclxuXHRcdFx0XHR0YXJnZXQuYXBwZW5kQ2hpbGQoIGVsZW0gKTtcclxuXHRcdFx0fVxyXG5cdFx0fSApO1xyXG5cdH0sXHJcblxyXG5cdHByZXBlbmQ6IGZ1bmN0aW9uKCkge1xyXG5cdFx0cmV0dXJuIGRvbU1hbmlwKCB0aGlzLCBhcmd1bWVudHMsIGZ1bmN0aW9uKCBlbGVtICkge1xyXG5cdFx0XHRpZiAoIHRoaXMubm9kZVR5cGUgPT09IDEgfHwgdGhpcy5ub2RlVHlwZSA9PT0gMTEgfHwgdGhpcy5ub2RlVHlwZSA9PT0gOSApIHtcclxuXHRcdFx0XHR2YXIgdGFyZ2V0ID0gbWFuaXB1bGF0aW9uVGFyZ2V0KCB0aGlzLCBlbGVtICk7XHJcblx0XHRcdFx0dGFyZ2V0Lmluc2VydEJlZm9yZSggZWxlbSwgdGFyZ2V0LmZpcnN0Q2hpbGQgKTtcclxuXHRcdFx0fVxyXG5cdFx0fSApO1xyXG5cdH0sXHJcblxyXG5cdGJlZm9yZTogZnVuY3Rpb24oKSB7XHJcblx0XHRyZXR1cm4gZG9tTWFuaXAoIHRoaXMsIGFyZ3VtZW50cywgZnVuY3Rpb24oIGVsZW0gKSB7XHJcblx0XHRcdGlmICggdGhpcy5wYXJlbnROb2RlICkge1xyXG5cdFx0XHRcdHRoaXMucGFyZW50Tm9kZS5pbnNlcnRCZWZvcmUoIGVsZW0sIHRoaXMgKTtcclxuXHRcdFx0fVxyXG5cdFx0fSApO1xyXG5cdH0sXHJcblxyXG5cdGFmdGVyOiBmdW5jdGlvbigpIHtcclxuXHRcdHJldHVybiBkb21NYW5pcCggdGhpcywgYXJndW1lbnRzLCBmdW5jdGlvbiggZWxlbSApIHtcclxuXHRcdFx0aWYgKCB0aGlzLnBhcmVudE5vZGUgKSB7XHJcblx0XHRcdFx0dGhpcy5wYXJlbnROb2RlLmluc2VydEJlZm9yZSggZWxlbSwgdGhpcy5uZXh0U2libGluZyApO1xyXG5cdFx0XHR9XHJcblx0XHR9ICk7XHJcblx0fSxcclxuXHJcblx0ZW1wdHk6IGZ1bmN0aW9uKCkge1xyXG5cdFx0dmFyIGVsZW0sXHJcblx0XHRcdGkgPSAwO1xyXG5cclxuXHRcdGZvciAoIDsgKCBlbGVtID0gdGhpc1sgaSBdICkgIT0gbnVsbDsgaSsrICkge1xyXG5cdFx0XHRpZiAoIGVsZW0ubm9kZVR5cGUgPT09IDEgKSB7XHJcblxyXG5cdFx0XHRcdC8vIFByZXZlbnQgbWVtb3J5IGxlYWtzXHJcblx0XHRcdFx0alF1ZXJ5LmNsZWFuRGF0YSggZ2V0QWxsKCBlbGVtLCBmYWxzZSApICk7XHJcblxyXG5cdFx0XHRcdC8vIFJlbW92ZSBhbnkgcmVtYWluaW5nIG5vZGVzXHJcblx0XHRcdFx0ZWxlbS50ZXh0Q29udGVudCA9IFwiXCI7XHJcblx0XHRcdH1cclxuXHRcdH1cclxuXHJcblx0XHRyZXR1cm4gdGhpcztcclxuXHR9LFxyXG5cclxuXHRjbG9uZTogZnVuY3Rpb24oIGRhdGFBbmRFdmVudHMsIGRlZXBEYXRhQW5kRXZlbnRzICkge1xyXG5cdFx0ZGF0YUFuZEV2ZW50cyA9IGRhdGFBbmRFdmVudHMgPT0gbnVsbCA/IGZhbHNlIDogZGF0YUFuZEV2ZW50cztcclxuXHRcdGRlZXBEYXRhQW5kRXZlbnRzID0gZGVlcERhdGFBbmRFdmVudHMgPT0gbnVsbCA/IGRhdGFBbmRFdmVudHMgOiBkZWVwRGF0YUFuZEV2ZW50cztcclxuXHJcblx0XHRyZXR1cm4gdGhpcy5tYXAoIGZ1bmN0aW9uKCkge1xyXG5cdFx0XHRyZXR1cm4galF1ZXJ5LmNsb25lKCB0aGlzLCBkYXRhQW5kRXZlbnRzLCBkZWVwRGF0YUFuZEV2ZW50cyApO1xyXG5cdFx0fSApO1xyXG5cdH0sXHJcblxyXG5cdGh0bWw6IGZ1bmN0aW9uKCB2YWx1ZSApIHtcclxuXHRcdHJldHVybiBhY2Nlc3MoIHRoaXMsIGZ1bmN0aW9uKCB2YWx1ZSApIHtcclxuXHRcdFx0dmFyIGVsZW0gPSB0aGlzWyAwIF0gfHwge30sXHJcblx0XHRcdFx0aSA9IDAsXHJcblx0XHRcdFx0bCA9IHRoaXMubGVuZ3RoO1xyXG5cclxuXHRcdFx0aWYgKCB2YWx1ZSA9PT0gdW5kZWZpbmVkICYmIGVsZW0ubm9kZVR5cGUgPT09IDEgKSB7XHJcblx0XHRcdFx0cmV0dXJuIGVsZW0uaW5uZXJIVE1MO1xyXG5cdFx0XHR9XHJcblxyXG5cdFx0XHQvLyBTZWUgaWYgd2UgY2FuIHRha2UgYSBzaG9ydGN1dCBhbmQganVzdCB1c2UgaW5uZXJIVE1MXHJcblx0XHRcdGlmICggdHlwZW9mIHZhbHVlID09PSBcInN0cmluZ1wiICYmICFybm9Jbm5lcmh0bWwudGVzdCggdmFsdWUgKSAmJlxyXG5cdFx0XHRcdCF3cmFwTWFwWyAoIHJ0YWdOYW1lLmV4ZWMoIHZhbHVlICkgfHwgWyBcIlwiLCBcIlwiIF0gKVsgMSBdLnRvTG93ZXJDYXNlKCkgXSApIHtcclxuXHJcblx0XHRcdFx0dmFsdWUgPSBqUXVlcnkuaHRtbFByZWZpbHRlciggdmFsdWUgKTtcclxuXHJcblx0XHRcdFx0dHJ5IHtcclxuXHRcdFx0XHRcdGZvciAoIDsgaSA8IGw7IGkrKyApIHtcclxuXHRcdFx0XHRcdFx0ZWxlbSA9IHRoaXNbIGkgXSB8fCB7fTtcclxuXHJcblx0XHRcdFx0XHRcdC8vIFJlbW92ZSBlbGVtZW50IG5vZGVzIGFuZCBwcmV2ZW50IG1lbW9yeSBsZWFrc1xyXG5cdFx0XHRcdFx0XHRpZiAoIGVsZW0ubm9kZVR5cGUgPT09IDEgKSB7XHJcblx0XHRcdFx0XHRcdFx0alF1ZXJ5LmNsZWFuRGF0YSggZ2V0QWxsKCBlbGVtLCBmYWxzZSApICk7XHJcblx0XHRcdFx0XHRcdFx0ZWxlbS5pbm5lckhUTUwgPSB2YWx1ZTtcclxuXHRcdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0fVxyXG5cclxuXHRcdFx0XHRcdGVsZW0gPSAwO1xyXG5cclxuXHRcdFx0XHQvLyBJZiB1c2luZyBpbm5lckhUTUwgdGhyb3dzIGFuIGV4Y2VwdGlvbiwgdXNlIHRoZSBmYWxsYmFjayBtZXRob2RcclxuXHRcdFx0XHR9IGNhdGNoICggZSApIHt9XHJcblx0XHRcdH1cclxuXHJcblx0XHRcdGlmICggZWxlbSApIHtcclxuXHRcdFx0XHR0aGlzLmVtcHR5KCkuYXBwZW5kKCB2YWx1ZSApO1xyXG5cdFx0XHR9XHJcblx0XHR9LCBudWxsLCB2YWx1ZSwgYXJndW1lbnRzLmxlbmd0aCApO1xyXG5cdH0sXHJcblxyXG5cdHJlcGxhY2VXaXRoOiBmdW5jdGlvbigpIHtcclxuXHRcdHZhciBpZ25vcmVkID0gW107XHJcblxyXG5cdFx0Ly8gTWFrZSB0aGUgY2hhbmdlcywgcmVwbGFjaW5nIGVhY2ggbm9uLWlnbm9yZWQgY29udGV4dCBlbGVtZW50IHdpdGggdGhlIG5ldyBjb250ZW50XHJcblx0XHRyZXR1cm4gZG9tTWFuaXAoIHRoaXMsIGFyZ3VtZW50cywgZnVuY3Rpb24oIGVsZW0gKSB7XHJcblx0XHRcdHZhciBwYXJlbnQgPSB0aGlzLnBhcmVudE5vZGU7XHJcblxyXG5cdFx0XHRpZiAoIGpRdWVyeS5pbkFycmF5KCB0aGlzLCBpZ25vcmVkICkgPCAwICkge1xyXG5cdFx0XHRcdGpRdWVyeS5jbGVhbkRhdGEoIGdldEFsbCggdGhpcyApICk7XHJcblx0XHRcdFx0aWYgKCBwYXJlbnQgKSB7XHJcblx0XHRcdFx0XHRwYXJlbnQucmVwbGFjZUNoaWxkKCBlbGVtLCB0aGlzICk7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9XHJcblxyXG5cdFx0Ly8gRm9yY2UgY2FsbGJhY2sgaW52b2NhdGlvblxyXG5cdFx0fSwgaWdub3JlZCApO1xyXG5cdH1cclxufSApO1xyXG5cclxualF1ZXJ5LmVhY2goIHtcclxuXHRhcHBlbmRUbzogXCJhcHBlbmRcIixcclxuXHRwcmVwZW5kVG86IFwicHJlcGVuZFwiLFxyXG5cdGluc2VydEJlZm9yZTogXCJiZWZvcmVcIixcclxuXHRpbnNlcnRBZnRlcjogXCJhZnRlclwiLFxyXG5cdHJlcGxhY2VBbGw6IFwicmVwbGFjZVdpdGhcIlxyXG59LCBmdW5jdGlvbiggbmFtZSwgb3JpZ2luYWwgKSB7XHJcblx0alF1ZXJ5LmZuWyBuYW1lIF0gPSBmdW5jdGlvbiggc2VsZWN0b3IgKSB7XHJcblx0XHR2YXIgZWxlbXMsXHJcblx0XHRcdHJldCA9IFtdLFxyXG5cdFx0XHRpbnNlcnQgPSBqUXVlcnkoIHNlbGVjdG9yICksXHJcblx0XHRcdGxhc3QgPSBpbnNlcnQubGVuZ3RoIC0gMSxcclxuXHRcdFx0aSA9IDA7XHJcblxyXG5cdFx0Zm9yICggOyBpIDw9IGxhc3Q7IGkrKyApIHtcclxuXHRcdFx0ZWxlbXMgPSBpID09PSBsYXN0ID8gdGhpcyA6IHRoaXMuY2xvbmUoIHRydWUgKTtcclxuXHRcdFx0alF1ZXJ5KCBpbnNlcnRbIGkgXSApWyBvcmlnaW5hbCBdKCBlbGVtcyApO1xyXG5cclxuXHRcdFx0Ly8gU3VwcG9ydDogUXRXZWJLaXRcclxuXHRcdFx0Ly8gLmdldCgpIGJlY2F1c2UgcHVzaC5hcHBseShfLCBhcnJheWxpa2UpIHRocm93c1xyXG5cdFx0XHRwdXNoLmFwcGx5KCByZXQsIGVsZW1zLmdldCgpICk7XHJcblx0XHR9XHJcblxyXG5cdFx0cmV0dXJuIHRoaXMucHVzaFN0YWNrKCByZXQgKTtcclxuXHR9O1xyXG59ICk7XHJcblxyXG5cclxudmFyIGlmcmFtZSxcclxuXHRlbGVtZGlzcGxheSA9IHtcclxuXHJcblx0XHQvLyBTdXBwb3J0OiBGaXJlZm94XHJcblx0XHQvLyBXZSBoYXZlIHRvIHByZS1kZWZpbmUgdGhlc2UgdmFsdWVzIGZvciBGRiAoIzEwMjI3KVxyXG5cdFx0SFRNTDogXCJibG9ja1wiLFxyXG5cdFx0Qk9EWTogXCJibG9ja1wiXHJcblx0fTtcclxuXHJcbi8qKlxyXG4gKiBSZXRyaWV2ZSB0aGUgYWN0dWFsIGRpc3BsYXkgb2YgYSBlbGVtZW50XHJcbiAqIEBwYXJhbSB7U3RyaW5nfSBuYW1lIG5vZGVOYW1lIG9mIHRoZSBlbGVtZW50XHJcbiAqIEBwYXJhbSB7T2JqZWN0fSBkb2MgRG9jdW1lbnQgb2JqZWN0XHJcbiAqL1xyXG5cclxuLy8gQ2FsbGVkIG9ubHkgZnJvbSB3aXRoaW4gZGVmYXVsdERpc3BsYXlcclxuZnVuY3Rpb24gYWN0dWFsRGlzcGxheSggbmFtZSwgZG9jICkge1xyXG5cdHZhciBlbGVtID0galF1ZXJ5KCBkb2MuY3JlYXRlRWxlbWVudCggbmFtZSApICkuYXBwZW5kVG8oIGRvYy5ib2R5ICksXHJcblxyXG5cdFx0ZGlzcGxheSA9IGpRdWVyeS5jc3MoIGVsZW1bIDAgXSwgXCJkaXNwbGF5XCIgKTtcclxuXHJcblx0Ly8gV2UgZG9uJ3QgaGF2ZSBhbnkgZGF0YSBzdG9yZWQgb24gdGhlIGVsZW1lbnQsXHJcblx0Ly8gc28gdXNlIFwiZGV0YWNoXCIgbWV0aG9kIGFzIGZhc3Qgd2F5IHRvIGdldCByaWQgb2YgdGhlIGVsZW1lbnRcclxuXHRlbGVtLmRldGFjaCgpO1xyXG5cclxuXHRyZXR1cm4gZGlzcGxheTtcclxufVxyXG5cclxuLyoqXHJcbiAqIFRyeSB0byBkZXRlcm1pbmUgdGhlIGRlZmF1bHQgZGlzcGxheSB2YWx1ZSBvZiBhbiBlbGVtZW50XHJcbiAqIEBwYXJhbSB7U3RyaW5nfSBub2RlTmFtZVxyXG4gKi9cclxuZnVuY3Rpb24gZGVmYXVsdERpc3BsYXkoIG5vZGVOYW1lICkge1xyXG5cdHZhciBkb2MgPSBkb2N1bWVudCxcclxuXHRcdGRpc3BsYXkgPSBlbGVtZGlzcGxheVsgbm9kZU5hbWUgXTtcclxuXHJcblx0aWYgKCAhZGlzcGxheSApIHtcclxuXHRcdGRpc3BsYXkgPSBhY3R1YWxEaXNwbGF5KCBub2RlTmFtZSwgZG9jICk7XHJcblxyXG5cdFx0Ly8gSWYgdGhlIHNpbXBsZSB3YXkgZmFpbHMsIHJlYWQgZnJvbSBpbnNpZGUgYW4gaWZyYW1lXHJcblx0XHRpZiAoIGRpc3BsYXkgPT09IFwibm9uZVwiIHx8ICFkaXNwbGF5ICkge1xyXG5cclxuXHRcdFx0Ly8gVXNlIHRoZSBhbHJlYWR5LWNyZWF0ZWQgaWZyYW1lIGlmIHBvc3NpYmxlXHJcblx0XHRcdGlmcmFtZSA9ICggaWZyYW1lIHx8IGpRdWVyeSggXCI8aWZyYW1lIGZyYW1lYm9yZGVyPScwJyB3aWR0aD0nMCcgaGVpZ2h0PScwJy8+XCIgKSApXHJcblx0XHRcdFx0LmFwcGVuZFRvKCBkb2MuZG9jdW1lbnRFbGVtZW50ICk7XHJcblxyXG5cdFx0XHQvLyBBbHdheXMgd3JpdGUgYSBuZXcgSFRNTCBza2VsZXRvbiBzbyBXZWJraXQgYW5kIEZpcmVmb3ggZG9uJ3QgY2hva2Ugb24gcmV1c2VcclxuXHRcdFx0ZG9jID0gaWZyYW1lWyAwIF0uY29udGVudERvY3VtZW50O1xyXG5cclxuXHRcdFx0Ly8gU3VwcG9ydDogSUVcclxuXHRcdFx0ZG9jLndyaXRlKCk7XHJcblx0XHRcdGRvYy5jbG9zZSgpO1xyXG5cclxuXHRcdFx0ZGlzcGxheSA9IGFjdHVhbERpc3BsYXkoIG5vZGVOYW1lLCBkb2MgKTtcclxuXHRcdFx0aWZyYW1lLmRldGFjaCgpO1xyXG5cdFx0fVxyXG5cclxuXHRcdC8vIFN0b3JlIHRoZSBjb3JyZWN0IGRlZmF1bHQgZGlzcGxheVxyXG5cdFx0ZWxlbWRpc3BsYXlbIG5vZGVOYW1lIF0gPSBkaXNwbGF5O1xyXG5cdH1cclxuXHJcblx0cmV0dXJuIGRpc3BsYXk7XHJcbn1cclxudmFyIHJtYXJnaW4gPSAoIC9ebWFyZ2luLyApO1xyXG5cclxudmFyIHJudW1ub25weCA9IG5ldyBSZWdFeHAoIFwiXihcIiArIHBudW0gKyBcIikoPyFweClbYS16JV0rJFwiLCBcImlcIiApO1xyXG5cclxudmFyIGdldFN0eWxlcyA9IGZ1bmN0aW9uKCBlbGVtICkge1xyXG5cclxuXHRcdC8vIFN1cHBvcnQ6IElFPD0xMSssIEZpcmVmb3g8PTMwKyAoIzE1MDk4LCAjMTQxNTApXHJcblx0XHQvLyBJRSB0aHJvd3Mgb24gZWxlbWVudHMgY3JlYXRlZCBpbiBwb3B1cHNcclxuXHRcdC8vIEZGIG1lYW53aGlsZSB0aHJvd3Mgb24gZnJhbWUgZWxlbWVudHMgdGhyb3VnaCBcImRlZmF1bHRWaWV3LmdldENvbXB1dGVkU3R5bGVcIlxyXG5cdFx0dmFyIHZpZXcgPSBlbGVtLm93bmVyRG9jdW1lbnQuZGVmYXVsdFZpZXc7XHJcblxyXG5cdFx0aWYgKCAhdmlldyB8fCAhdmlldy5vcGVuZXIgKSB7XHJcblx0XHRcdHZpZXcgPSB3aW5kb3c7XHJcblx0XHR9XHJcblxyXG5cdFx0cmV0dXJuIHZpZXcuZ2V0Q29tcHV0ZWRTdHlsZSggZWxlbSApO1xyXG5cdH07XHJcblxyXG52YXIgc3dhcCA9IGZ1bmN0aW9uKCBlbGVtLCBvcHRpb25zLCBjYWxsYmFjaywgYXJncyApIHtcclxuXHR2YXIgcmV0LCBuYW1lLFxyXG5cdFx0b2xkID0ge307XHJcblxyXG5cdC8vIFJlbWVtYmVyIHRoZSBvbGQgdmFsdWVzLCBhbmQgaW5zZXJ0IHRoZSBuZXcgb25lc1xyXG5cdGZvciAoIG5hbWUgaW4gb3B0aW9ucyApIHtcclxuXHRcdG9sZFsgbmFtZSBdID0gZWxlbS5zdHlsZVsgbmFtZSBdO1xyXG5cdFx0ZWxlbS5zdHlsZVsgbmFtZSBdID0gb3B0aW9uc1sgbmFtZSBdO1xyXG5cdH1cclxuXHJcblx0cmV0ID0gY2FsbGJhY2suYXBwbHkoIGVsZW0sIGFyZ3MgfHwgW10gKTtcclxuXHJcblx0Ly8gUmV2ZXJ0IHRoZSBvbGQgdmFsdWVzXHJcblx0Zm9yICggbmFtZSBpbiBvcHRpb25zICkge1xyXG5cdFx0ZWxlbS5zdHlsZVsgbmFtZSBdID0gb2xkWyBuYW1lIF07XHJcblx0fVxyXG5cclxuXHRyZXR1cm4gcmV0O1xyXG59O1xyXG5cclxuXHJcbnZhciBkb2N1bWVudEVsZW1lbnQgPSBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQ7XHJcblxyXG5cclxuXHJcbiggZnVuY3Rpb24oKSB7XHJcblx0dmFyIHBpeGVsUG9zaXRpb25WYWwsIGJveFNpemluZ1JlbGlhYmxlVmFsLCBwaXhlbE1hcmdpblJpZ2h0VmFsLCByZWxpYWJsZU1hcmdpbkxlZnRWYWwsXHJcblx0XHRjb250YWluZXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCBcImRpdlwiICksXHJcblx0XHRkaXYgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCBcImRpdlwiICk7XHJcblxyXG5cdC8vIEZpbmlzaCBlYXJseSBpbiBsaW1pdGVkIChub24tYnJvd3NlcikgZW52aXJvbm1lbnRzXHJcblx0aWYgKCAhZGl2LnN0eWxlICkge1xyXG5cdFx0cmV0dXJuO1xyXG5cdH1cclxuXHJcblx0Ly8gU3VwcG9ydDogSUU5LTExK1xyXG5cdC8vIFN0eWxlIG9mIGNsb25lZCBlbGVtZW50IGFmZmVjdHMgc291cmNlIGVsZW1lbnQgY2xvbmVkICgjODkwOClcclxuXHRkaXYuc3R5bGUuYmFja2dyb3VuZENsaXAgPSBcImNvbnRlbnQtYm94XCI7XHJcblx0ZGl2LmNsb25lTm9kZSggdHJ1ZSApLnN0eWxlLmJhY2tncm91bmRDbGlwID0gXCJcIjtcclxuXHRzdXBwb3J0LmNsZWFyQ2xvbmVTdHlsZSA9IGRpdi5zdHlsZS5iYWNrZ3JvdW5kQ2xpcCA9PT0gXCJjb250ZW50LWJveFwiO1xyXG5cclxuXHRjb250YWluZXIuc3R5bGUuY3NzVGV4dCA9IFwiYm9yZGVyOjA7d2lkdGg6OHB4O2hlaWdodDowO3RvcDowO2xlZnQ6LTk5OTlweDtcIiArXHJcblx0XHRcInBhZGRpbmc6MDttYXJnaW4tdG9wOjFweDtwb3NpdGlvbjphYnNvbHV0ZVwiO1xyXG5cdGNvbnRhaW5lci5hcHBlbmRDaGlsZCggZGl2ICk7XHJcblxyXG5cdC8vIEV4ZWN1dGluZyBib3RoIHBpeGVsUG9zaXRpb24gJiBib3hTaXppbmdSZWxpYWJsZSB0ZXN0cyByZXF1aXJlIG9ubHkgb25lIGxheW91dFxyXG5cdC8vIHNvIHRoZXkncmUgZXhlY3V0ZWQgYXQgdGhlIHNhbWUgdGltZSB0byBzYXZlIHRoZSBzZWNvbmQgY29tcHV0YXRpb24uXHJcblx0ZnVuY3Rpb24gY29tcHV0ZVN0eWxlVGVzdHMoKSB7XHJcblx0XHRkaXYuc3R5bGUuY3NzVGV4dCA9XHJcblxyXG5cdFx0XHQvLyBTdXBwb3J0OiBGaXJlZm94PDI5LCBBbmRyb2lkIDIuM1xyXG5cdFx0XHQvLyBWZW5kb3ItcHJlZml4IGJveC1zaXppbmdcclxuXHRcdFx0XCItd2Via2l0LWJveC1zaXppbmc6Ym9yZGVyLWJveDstbW96LWJveC1zaXppbmc6Ym9yZGVyLWJveDtib3gtc2l6aW5nOmJvcmRlci1ib3g7XCIgK1xyXG5cdFx0XHRcInBvc2l0aW9uOnJlbGF0aXZlO2Rpc3BsYXk6YmxvY2s7XCIgK1xyXG5cdFx0XHRcIm1hcmdpbjphdXRvO2JvcmRlcjoxcHg7cGFkZGluZzoxcHg7XCIgK1xyXG5cdFx0XHRcInRvcDoxJTt3aWR0aDo1MCVcIjtcclxuXHRcdGRpdi5pbm5lckhUTUwgPSBcIlwiO1xyXG5cdFx0ZG9jdW1lbnRFbGVtZW50LmFwcGVuZENoaWxkKCBjb250YWluZXIgKTtcclxuXHJcblx0XHR2YXIgZGl2U3R5bGUgPSB3aW5kb3cuZ2V0Q29tcHV0ZWRTdHlsZSggZGl2ICk7XHJcblx0XHRwaXhlbFBvc2l0aW9uVmFsID0gZGl2U3R5bGUudG9wICE9PSBcIjElXCI7XHJcblx0XHRyZWxpYWJsZU1hcmdpbkxlZnRWYWwgPSBkaXZTdHlsZS5tYXJnaW5MZWZ0ID09PSBcIjJweFwiO1xyXG5cdFx0Ym94U2l6aW5nUmVsaWFibGVWYWwgPSBkaXZTdHlsZS53aWR0aCA9PT0gXCI0cHhcIjtcclxuXHJcblx0XHQvLyBTdXBwb3J0OiBBbmRyb2lkIDQuMCAtIDQuMyBvbmx5XHJcblx0XHQvLyBTb21lIHN0eWxlcyBjb21lIGJhY2sgd2l0aCBwZXJjZW50YWdlIHZhbHVlcywgZXZlbiB0aG91Z2ggdGhleSBzaG91bGRuJ3RcclxuXHRcdGRpdi5zdHlsZS5tYXJnaW5SaWdodCA9IFwiNTAlXCI7XHJcblx0XHRwaXhlbE1hcmdpblJpZ2h0VmFsID0gZGl2U3R5bGUubWFyZ2luUmlnaHQgPT09IFwiNHB4XCI7XHJcblxyXG5cdFx0ZG9jdW1lbnRFbGVtZW50LnJlbW92ZUNoaWxkKCBjb250YWluZXIgKTtcclxuXHR9XHJcblxyXG5cdGpRdWVyeS5leHRlbmQoIHN1cHBvcnQsIHtcclxuXHRcdHBpeGVsUG9zaXRpb246IGZ1bmN0aW9uKCkge1xyXG5cclxuXHRcdFx0Ly8gVGhpcyB0ZXN0IGlzIGV4ZWN1dGVkIG9ubHkgb25jZSBidXQgd2Ugc3RpbGwgZG8gbWVtb2l6aW5nXHJcblx0XHRcdC8vIHNpbmNlIHdlIGNhbiB1c2UgdGhlIGJveFNpemluZ1JlbGlhYmxlIHByZS1jb21wdXRpbmcuXHJcblx0XHRcdC8vIE5vIG5lZWQgdG8gY2hlY2sgaWYgdGhlIHRlc3Qgd2FzIGFscmVhZHkgcGVyZm9ybWVkLCB0aG91Z2guXHJcblx0XHRcdGNvbXB1dGVTdHlsZVRlc3RzKCk7XHJcblx0XHRcdHJldHVybiBwaXhlbFBvc2l0aW9uVmFsO1xyXG5cdFx0fSxcclxuXHRcdGJveFNpemluZ1JlbGlhYmxlOiBmdW5jdGlvbigpIHtcclxuXHRcdFx0aWYgKCBib3hTaXppbmdSZWxpYWJsZVZhbCA9PSBudWxsICkge1xyXG5cdFx0XHRcdGNvbXB1dGVTdHlsZVRlc3RzKCk7XHJcblx0XHRcdH1cclxuXHRcdFx0cmV0dXJuIGJveFNpemluZ1JlbGlhYmxlVmFsO1xyXG5cdFx0fSxcclxuXHRcdHBpeGVsTWFyZ2luUmlnaHQ6IGZ1bmN0aW9uKCkge1xyXG5cclxuXHRcdFx0Ly8gU3VwcG9ydDogQW5kcm9pZCA0LjAtNC4zXHJcblx0XHRcdC8vIFdlJ3JlIGNoZWNraW5nIGZvciBib3hTaXppbmdSZWxpYWJsZVZhbCBoZXJlIGluc3RlYWQgb2YgcGl4ZWxNYXJnaW5SaWdodFZhbFxyXG5cdFx0XHQvLyBzaW5jZSB0aGF0IGNvbXByZXNzZXMgYmV0dGVyIGFuZCB0aGV5J3JlIGNvbXB1dGVkIHRvZ2V0aGVyIGFueXdheS5cclxuXHRcdFx0aWYgKCBib3hTaXppbmdSZWxpYWJsZVZhbCA9PSBudWxsICkge1xyXG5cdFx0XHRcdGNvbXB1dGVTdHlsZVRlc3RzKCk7XHJcblx0XHRcdH1cclxuXHRcdFx0cmV0dXJuIHBpeGVsTWFyZ2luUmlnaHRWYWw7XHJcblx0XHR9LFxyXG5cdFx0cmVsaWFibGVNYXJnaW5MZWZ0OiBmdW5jdGlvbigpIHtcclxuXHJcblx0XHRcdC8vIFN1cHBvcnQ6IElFIDw9OCBvbmx5LCBBbmRyb2lkIDQuMCAtIDQuMyBvbmx5LCBGaXJlZm94IDw9MyAtIDM3XHJcblx0XHRcdGlmICggYm94U2l6aW5nUmVsaWFibGVWYWwgPT0gbnVsbCApIHtcclxuXHRcdFx0XHRjb21wdXRlU3R5bGVUZXN0cygpO1xyXG5cdFx0XHR9XHJcblx0XHRcdHJldHVybiByZWxpYWJsZU1hcmdpbkxlZnRWYWw7XHJcblx0XHR9LFxyXG5cdFx0cmVsaWFibGVNYXJnaW5SaWdodDogZnVuY3Rpb24oKSB7XHJcblxyXG5cdFx0XHQvLyBTdXBwb3J0OiBBbmRyb2lkIDIuM1xyXG5cdFx0XHQvLyBDaGVjayBpZiBkaXYgd2l0aCBleHBsaWNpdCB3aWR0aCBhbmQgbm8gbWFyZ2luLXJpZ2h0IGluY29ycmVjdGx5XHJcblx0XHRcdC8vIGdldHMgY29tcHV0ZWQgbWFyZ2luLXJpZ2h0IGJhc2VkIG9uIHdpZHRoIG9mIGNvbnRhaW5lci4gKCMzMzMzKVxyXG5cdFx0XHQvLyBXZWJLaXQgQnVnIDEzMzQzIC0gZ2V0Q29tcHV0ZWRTdHlsZSByZXR1cm5zIHdyb25nIHZhbHVlIGZvciBtYXJnaW4tcmlnaHRcclxuXHRcdFx0Ly8gVGhpcyBzdXBwb3J0IGZ1bmN0aW9uIGlzIG9ubHkgZXhlY3V0ZWQgb25jZSBzbyBubyBtZW1vaXppbmcgaXMgbmVlZGVkLlxyXG5cdFx0XHR2YXIgcmV0LFxyXG5cdFx0XHRcdG1hcmdpbkRpdiA9IGRpdi5hcHBlbmRDaGlsZCggZG9jdW1lbnQuY3JlYXRlRWxlbWVudCggXCJkaXZcIiApICk7XHJcblxyXG5cdFx0XHQvLyBSZXNldCBDU1M6IGJveC1zaXppbmc7IGRpc3BsYXk7IG1hcmdpbjsgYm9yZGVyOyBwYWRkaW5nXHJcblx0XHRcdG1hcmdpbkRpdi5zdHlsZS5jc3NUZXh0ID0gZGl2LnN0eWxlLmNzc1RleHQgPVxyXG5cclxuXHRcdFx0XHQvLyBTdXBwb3J0OiBBbmRyb2lkIDIuM1xyXG5cdFx0XHRcdC8vIFZlbmRvci1wcmVmaXggYm94LXNpemluZ1xyXG5cdFx0XHRcdFwiLXdlYmtpdC1ib3gtc2l6aW5nOmNvbnRlbnQtYm94O2JveC1zaXppbmc6Y29udGVudC1ib3g7XCIgK1xyXG5cdFx0XHRcdFwiZGlzcGxheTpibG9jazttYXJnaW46MDtib3JkZXI6MDtwYWRkaW5nOjBcIjtcclxuXHRcdFx0bWFyZ2luRGl2LnN0eWxlLm1hcmdpblJpZ2h0ID0gbWFyZ2luRGl2LnN0eWxlLndpZHRoID0gXCIwXCI7XHJcblx0XHRcdGRpdi5zdHlsZS53aWR0aCA9IFwiMXB4XCI7XHJcblx0XHRcdGRvY3VtZW50RWxlbWVudC5hcHBlbmRDaGlsZCggY29udGFpbmVyICk7XHJcblxyXG5cdFx0XHRyZXQgPSAhcGFyc2VGbG9hdCggd2luZG93LmdldENvbXB1dGVkU3R5bGUoIG1hcmdpbkRpdiApLm1hcmdpblJpZ2h0ICk7XHJcblxyXG5cdFx0XHRkb2N1bWVudEVsZW1lbnQucmVtb3ZlQ2hpbGQoIGNvbnRhaW5lciApO1xyXG5cdFx0XHRkaXYucmVtb3ZlQ2hpbGQoIG1hcmdpbkRpdiApO1xyXG5cclxuXHRcdFx0cmV0dXJuIHJldDtcclxuXHRcdH1cclxuXHR9ICk7XHJcbn0gKSgpO1xyXG5cclxuXHJcbmZ1bmN0aW9uIGN1ckNTUyggZWxlbSwgbmFtZSwgY29tcHV0ZWQgKSB7XHJcblx0dmFyIHdpZHRoLCBtaW5XaWR0aCwgbWF4V2lkdGgsIHJldCxcclxuXHRcdHN0eWxlID0gZWxlbS5zdHlsZTtcclxuXHJcblx0Y29tcHV0ZWQgPSBjb21wdXRlZCB8fCBnZXRTdHlsZXMoIGVsZW0gKTtcclxuXHRyZXQgPSBjb21wdXRlZCA/IGNvbXB1dGVkLmdldFByb3BlcnR5VmFsdWUoIG5hbWUgKSB8fCBjb21wdXRlZFsgbmFtZSBdIDogdW5kZWZpbmVkO1xyXG5cclxuXHQvLyBTdXBwb3J0OiBPcGVyYSAxMi4xeCBvbmx5XHJcblx0Ly8gRmFsbCBiYWNrIHRvIHN0eWxlIGV2ZW4gd2l0aG91dCBjb21wdXRlZFxyXG5cdC8vIGNvbXB1dGVkIGlzIHVuZGVmaW5lZCBmb3IgZWxlbXMgb24gZG9jdW1lbnQgZnJhZ21lbnRzXHJcblx0aWYgKCAoIHJldCA9PT0gXCJcIiB8fCByZXQgPT09IHVuZGVmaW5lZCApICYmICFqUXVlcnkuY29udGFpbnMoIGVsZW0ub3duZXJEb2N1bWVudCwgZWxlbSApICkge1xyXG5cdFx0cmV0ID0galF1ZXJ5LnN0eWxlKCBlbGVtLCBuYW1lICk7XHJcblx0fVxyXG5cclxuXHQvLyBTdXBwb3J0OiBJRTlcclxuXHQvLyBnZXRQcm9wZXJ0eVZhbHVlIGlzIG9ubHkgbmVlZGVkIGZvciAuY3NzKCdmaWx0ZXInKSAoIzEyNTM3KVxyXG5cdGlmICggY29tcHV0ZWQgKSB7XHJcblxyXG5cdFx0Ly8gQSB0cmlidXRlIHRvIHRoZSBcImF3ZXNvbWUgaGFjayBieSBEZWFuIEVkd2FyZHNcIlxyXG5cdFx0Ly8gQW5kcm9pZCBCcm93c2VyIHJldHVybnMgcGVyY2VudGFnZSBmb3Igc29tZSB2YWx1ZXMsXHJcblx0XHQvLyBidXQgd2lkdGggc2VlbXMgdG8gYmUgcmVsaWFibHkgcGl4ZWxzLlxyXG5cdFx0Ly8gVGhpcyBpcyBhZ2FpbnN0IHRoZSBDU1NPTSBkcmFmdCBzcGVjOlxyXG5cdFx0Ly8gaHR0cDovL2Rldi53My5vcmcvY3Nzd2cvY3Nzb20vI3Jlc29sdmVkLXZhbHVlc1xyXG5cdFx0aWYgKCAhc3VwcG9ydC5waXhlbE1hcmdpblJpZ2h0KCkgJiYgcm51bW5vbnB4LnRlc3QoIHJldCApICYmIHJtYXJnaW4udGVzdCggbmFtZSApICkge1xyXG5cclxuXHRcdFx0Ly8gUmVtZW1iZXIgdGhlIG9yaWdpbmFsIHZhbHVlc1xyXG5cdFx0XHR3aWR0aCA9IHN0eWxlLndpZHRoO1xyXG5cdFx0XHRtaW5XaWR0aCA9IHN0eWxlLm1pbldpZHRoO1xyXG5cdFx0XHRtYXhXaWR0aCA9IHN0eWxlLm1heFdpZHRoO1xyXG5cclxuXHRcdFx0Ly8gUHV0IGluIHRoZSBuZXcgdmFsdWVzIHRvIGdldCBhIGNvbXB1dGVkIHZhbHVlIG91dFxyXG5cdFx0XHRzdHlsZS5taW5XaWR0aCA9IHN0eWxlLm1heFdpZHRoID0gc3R5bGUud2lkdGggPSByZXQ7XHJcblx0XHRcdHJldCA9IGNvbXB1dGVkLndpZHRoO1xyXG5cclxuXHRcdFx0Ly8gUmV2ZXJ0IHRoZSBjaGFuZ2VkIHZhbHVlc1xyXG5cdFx0XHRzdHlsZS53aWR0aCA9IHdpZHRoO1xyXG5cdFx0XHRzdHlsZS5taW5XaWR0aCA9IG1pbldpZHRoO1xyXG5cdFx0XHRzdHlsZS5tYXhXaWR0aCA9IG1heFdpZHRoO1xyXG5cdFx0fVxyXG5cdH1cclxuXHJcblx0cmV0dXJuIHJldCAhPT0gdW5kZWZpbmVkID9cclxuXHJcblx0XHQvLyBTdXBwb3J0OiBJRTktMTErXHJcblx0XHQvLyBJRSByZXR1cm5zIHpJbmRleCB2YWx1ZSBhcyBhbiBpbnRlZ2VyLlxyXG5cdFx0cmV0ICsgXCJcIiA6XHJcblx0XHRyZXQ7XHJcbn1cclxuXHJcblxyXG5mdW5jdGlvbiBhZGRHZXRIb29rSWYoIGNvbmRpdGlvbkZuLCBob29rRm4gKSB7XHJcblxyXG5cdC8vIERlZmluZSB0aGUgaG9vaywgd2UnbGwgY2hlY2sgb24gdGhlIGZpcnN0IHJ1biBpZiBpdCdzIHJlYWxseSBuZWVkZWQuXHJcblx0cmV0dXJuIHtcclxuXHRcdGdldDogZnVuY3Rpb24oKSB7XHJcblx0XHRcdGlmICggY29uZGl0aW9uRm4oKSApIHtcclxuXHJcblx0XHRcdFx0Ly8gSG9vayBub3QgbmVlZGVkIChvciBpdCdzIG5vdCBwb3NzaWJsZSB0byB1c2UgaXQgZHVlXHJcblx0XHRcdFx0Ly8gdG8gbWlzc2luZyBkZXBlbmRlbmN5KSwgcmVtb3ZlIGl0LlxyXG5cdFx0XHRcdGRlbGV0ZSB0aGlzLmdldDtcclxuXHRcdFx0XHRyZXR1cm47XHJcblx0XHRcdH1cclxuXHJcblx0XHRcdC8vIEhvb2sgbmVlZGVkOyByZWRlZmluZSBpdCBzbyB0aGF0IHRoZSBzdXBwb3J0IHRlc3QgaXMgbm90IGV4ZWN1dGVkIGFnYWluLlxyXG5cdFx0XHRyZXR1cm4gKCB0aGlzLmdldCA9IGhvb2tGbiApLmFwcGx5KCB0aGlzLCBhcmd1bWVudHMgKTtcclxuXHRcdH1cclxuXHR9O1xyXG59XHJcblxyXG5cclxudmFyXHJcblxyXG5cdC8vIFN3YXBwYWJsZSBpZiBkaXNwbGF5IGlzIG5vbmUgb3Igc3RhcnRzIHdpdGggdGFibGVcclxuXHQvLyBleGNlcHQgXCJ0YWJsZVwiLCBcInRhYmxlLWNlbGxcIiwgb3IgXCJ0YWJsZS1jYXB0aW9uXCJcclxuXHQvLyBTZWUgaGVyZSBmb3IgZGlzcGxheSB2YWx1ZXM6IGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvQ1NTL2Rpc3BsYXlcclxuXHRyZGlzcGxheXN3YXAgPSAvXihub25lfHRhYmxlKD8hLWNbZWFdKS4rKS8sXHJcblxyXG5cdGNzc1Nob3cgPSB7IHBvc2l0aW9uOiBcImFic29sdXRlXCIsIHZpc2liaWxpdHk6IFwiaGlkZGVuXCIsIGRpc3BsYXk6IFwiYmxvY2tcIiB9LFxyXG5cdGNzc05vcm1hbFRyYW5zZm9ybSA9IHtcclxuXHRcdGxldHRlclNwYWNpbmc6IFwiMFwiLFxyXG5cdFx0Zm9udFdlaWdodDogXCI0MDBcIlxyXG5cdH0sXHJcblxyXG5cdGNzc1ByZWZpeGVzID0gWyBcIldlYmtpdFwiLCBcIk9cIiwgXCJNb3pcIiwgXCJtc1wiIF0sXHJcblx0ZW1wdHlTdHlsZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoIFwiZGl2XCIgKS5zdHlsZTtcclxuXHJcbi8vIFJldHVybiBhIGNzcyBwcm9wZXJ0eSBtYXBwZWQgdG8gYSBwb3RlbnRpYWxseSB2ZW5kb3IgcHJlZml4ZWQgcHJvcGVydHlcclxuZnVuY3Rpb24gdmVuZG9yUHJvcE5hbWUoIG5hbWUgKSB7XHJcblxyXG5cdC8vIFNob3J0Y3V0IGZvciBuYW1lcyB0aGF0IGFyZSBub3QgdmVuZG9yIHByZWZpeGVkXHJcblx0aWYgKCBuYW1lIGluIGVtcHR5U3R5bGUgKSB7XHJcblx0XHRyZXR1cm4gbmFtZTtcclxuXHR9XHJcblxyXG5cdC8vIENoZWNrIGZvciB2ZW5kb3IgcHJlZml4ZWQgbmFtZXNcclxuXHR2YXIgY2FwTmFtZSA9IG5hbWVbIDAgXS50b1VwcGVyQ2FzZSgpICsgbmFtZS5zbGljZSggMSApLFxyXG5cdFx0aSA9IGNzc1ByZWZpeGVzLmxlbmd0aDtcclxuXHJcblx0d2hpbGUgKCBpLS0gKSB7XHJcblx0XHRuYW1lID0gY3NzUHJlZml4ZXNbIGkgXSArIGNhcE5hbWU7XHJcblx0XHRpZiAoIG5hbWUgaW4gZW1wdHlTdHlsZSApIHtcclxuXHRcdFx0cmV0dXJuIG5hbWU7XHJcblx0XHR9XHJcblx0fVxyXG59XHJcblxyXG5mdW5jdGlvbiBzZXRQb3NpdGl2ZU51bWJlciggZWxlbSwgdmFsdWUsIHN1YnRyYWN0ICkge1xyXG5cclxuXHQvLyBBbnkgcmVsYXRpdmUgKCsvLSkgdmFsdWVzIGhhdmUgYWxyZWFkeSBiZWVuXHJcblx0Ly8gbm9ybWFsaXplZCBhdCB0aGlzIHBvaW50XHJcblx0dmFyIG1hdGNoZXMgPSByY3NzTnVtLmV4ZWMoIHZhbHVlICk7XHJcblx0cmV0dXJuIG1hdGNoZXMgP1xyXG5cclxuXHRcdC8vIEd1YXJkIGFnYWluc3QgdW5kZWZpbmVkIFwic3VidHJhY3RcIiwgZS5nLiwgd2hlbiB1c2VkIGFzIGluIGNzc0hvb2tzXHJcblx0XHRNYXRoLm1heCggMCwgbWF0Y2hlc1sgMiBdIC0gKCBzdWJ0cmFjdCB8fCAwICkgKSArICggbWF0Y2hlc1sgMyBdIHx8IFwicHhcIiApIDpcclxuXHRcdHZhbHVlO1xyXG59XHJcblxyXG5mdW5jdGlvbiBhdWdtZW50V2lkdGhPckhlaWdodCggZWxlbSwgbmFtZSwgZXh0cmEsIGlzQm9yZGVyQm94LCBzdHlsZXMgKSB7XHJcblx0dmFyIGkgPSBleHRyYSA9PT0gKCBpc0JvcmRlckJveCA/IFwiYm9yZGVyXCIgOiBcImNvbnRlbnRcIiApID9cclxuXHJcblx0XHQvLyBJZiB3ZSBhbHJlYWR5IGhhdmUgdGhlIHJpZ2h0IG1lYXN1cmVtZW50LCBhdm9pZCBhdWdtZW50YXRpb25cclxuXHRcdDQgOlxyXG5cclxuXHRcdC8vIE90aGVyd2lzZSBpbml0aWFsaXplIGZvciBob3Jpem9udGFsIG9yIHZlcnRpY2FsIHByb3BlcnRpZXNcclxuXHRcdG5hbWUgPT09IFwid2lkdGhcIiA/IDEgOiAwLFxyXG5cclxuXHRcdHZhbCA9IDA7XHJcblxyXG5cdGZvciAoIDsgaSA8IDQ7IGkgKz0gMiApIHtcclxuXHJcblx0XHQvLyBCb3RoIGJveCBtb2RlbHMgZXhjbHVkZSBtYXJnaW4sIHNvIGFkZCBpdCBpZiB3ZSB3YW50IGl0XHJcblx0XHRpZiAoIGV4dHJhID09PSBcIm1hcmdpblwiICkge1xyXG5cdFx0XHR2YWwgKz0galF1ZXJ5LmNzcyggZWxlbSwgZXh0cmEgKyBjc3NFeHBhbmRbIGkgXSwgdHJ1ZSwgc3R5bGVzICk7XHJcblx0XHR9XHJcblxyXG5cdFx0aWYgKCBpc0JvcmRlckJveCApIHtcclxuXHJcblx0XHRcdC8vIGJvcmRlci1ib3ggaW5jbHVkZXMgcGFkZGluZywgc28gcmVtb3ZlIGl0IGlmIHdlIHdhbnQgY29udGVudFxyXG5cdFx0XHRpZiAoIGV4dHJhID09PSBcImNvbnRlbnRcIiApIHtcclxuXHRcdFx0XHR2YWwgLT0galF1ZXJ5LmNzcyggZWxlbSwgXCJwYWRkaW5nXCIgKyBjc3NFeHBhbmRbIGkgXSwgdHJ1ZSwgc3R5bGVzICk7XHJcblx0XHRcdH1cclxuXHJcblx0XHRcdC8vIEF0IHRoaXMgcG9pbnQsIGV4dHJhIGlzbid0IGJvcmRlciBub3IgbWFyZ2luLCBzbyByZW1vdmUgYm9yZGVyXHJcblx0XHRcdGlmICggZXh0cmEgIT09IFwibWFyZ2luXCIgKSB7XHJcblx0XHRcdFx0dmFsIC09IGpRdWVyeS5jc3MoIGVsZW0sIFwiYm9yZGVyXCIgKyBjc3NFeHBhbmRbIGkgXSArIFwiV2lkdGhcIiwgdHJ1ZSwgc3R5bGVzICk7XHJcblx0XHRcdH1cclxuXHRcdH0gZWxzZSB7XHJcblxyXG5cdFx0XHQvLyBBdCB0aGlzIHBvaW50LCBleHRyYSBpc24ndCBjb250ZW50LCBzbyBhZGQgcGFkZGluZ1xyXG5cdFx0XHR2YWwgKz0galF1ZXJ5LmNzcyggZWxlbSwgXCJwYWRkaW5nXCIgKyBjc3NFeHBhbmRbIGkgXSwgdHJ1ZSwgc3R5bGVzICk7XHJcblxyXG5cdFx0XHQvLyBBdCB0aGlzIHBvaW50LCBleHRyYSBpc24ndCBjb250ZW50IG5vciBwYWRkaW5nLCBzbyBhZGQgYm9yZGVyXHJcblx0XHRcdGlmICggZXh0cmEgIT09IFwicGFkZGluZ1wiICkge1xyXG5cdFx0XHRcdHZhbCArPSBqUXVlcnkuY3NzKCBlbGVtLCBcImJvcmRlclwiICsgY3NzRXhwYW5kWyBpIF0gKyBcIldpZHRoXCIsIHRydWUsIHN0eWxlcyApO1xyXG5cdFx0XHR9XHJcblx0XHR9XHJcblx0fVxyXG5cclxuXHRyZXR1cm4gdmFsO1xyXG59XHJcblxyXG5mdW5jdGlvbiBnZXRXaWR0aE9ySGVpZ2h0KCBlbGVtLCBuYW1lLCBleHRyYSApIHtcclxuXHJcblx0Ly8gU3RhcnQgd2l0aCBvZmZzZXQgcHJvcGVydHksIHdoaWNoIGlzIGVxdWl2YWxlbnQgdG8gdGhlIGJvcmRlci1ib3ggdmFsdWVcclxuXHR2YXIgdmFsdWVJc0JvcmRlckJveCA9IHRydWUsXHJcblx0XHR2YWwgPSBuYW1lID09PSBcIndpZHRoXCIgPyBlbGVtLm9mZnNldFdpZHRoIDogZWxlbS5vZmZzZXRIZWlnaHQsXHJcblx0XHRzdHlsZXMgPSBnZXRTdHlsZXMoIGVsZW0gKSxcclxuXHRcdGlzQm9yZGVyQm94ID0galF1ZXJ5LmNzcyggZWxlbSwgXCJib3hTaXppbmdcIiwgZmFsc2UsIHN0eWxlcyApID09PSBcImJvcmRlci1ib3hcIjtcclxuXHJcblx0Ly8gU29tZSBub24taHRtbCBlbGVtZW50cyByZXR1cm4gdW5kZWZpbmVkIGZvciBvZmZzZXRXaWR0aCwgc28gY2hlY2sgZm9yIG51bGwvdW5kZWZpbmVkXHJcblx0Ly8gc3ZnIC0gaHR0cHM6Ly9idWd6aWxsYS5tb3ppbGxhLm9yZy9zaG93X2J1Zy5jZ2k/aWQ9NjQ5Mjg1XHJcblx0Ly8gTWF0aE1MIC0gaHR0cHM6Ly9idWd6aWxsYS5tb3ppbGxhLm9yZy9zaG93X2J1Zy5jZ2k/aWQ9NDkxNjY4XHJcblx0aWYgKCB2YWwgPD0gMCB8fCB2YWwgPT0gbnVsbCApIHtcclxuXHJcblx0XHQvLyBGYWxsIGJhY2sgdG8gY29tcHV0ZWQgdGhlbiB1bmNvbXB1dGVkIGNzcyBpZiBuZWNlc3NhcnlcclxuXHRcdHZhbCA9IGN1ckNTUyggZWxlbSwgbmFtZSwgc3R5bGVzICk7XHJcblx0XHRpZiAoIHZhbCA8IDAgfHwgdmFsID09IG51bGwgKSB7XHJcblx0XHRcdHZhbCA9IGVsZW0uc3R5bGVbIG5hbWUgXTtcclxuXHRcdH1cclxuXHJcblx0XHQvLyBDb21wdXRlZCB1bml0IGlzIG5vdCBwaXhlbHMuIFN0b3AgaGVyZSBhbmQgcmV0dXJuLlxyXG5cdFx0aWYgKCBybnVtbm9ucHgudGVzdCggdmFsICkgKSB7XHJcblx0XHRcdHJldHVybiB2YWw7XHJcblx0XHR9XHJcblxyXG5cdFx0Ly8gQ2hlY2sgZm9yIHN0eWxlIGluIGNhc2UgYSBicm93c2VyIHdoaWNoIHJldHVybnMgdW5yZWxpYWJsZSB2YWx1ZXNcclxuXHRcdC8vIGZvciBnZXRDb21wdXRlZFN0eWxlIHNpbGVudGx5IGZhbGxzIGJhY2sgdG8gdGhlIHJlbGlhYmxlIGVsZW0uc3R5bGVcclxuXHRcdHZhbHVlSXNCb3JkZXJCb3ggPSBpc0JvcmRlckJveCAmJlxyXG5cdFx0XHQoIHN1cHBvcnQuYm94U2l6aW5nUmVsaWFibGUoKSB8fCB2YWwgPT09IGVsZW0uc3R5bGVbIG5hbWUgXSApO1xyXG5cclxuXHRcdC8vIE5vcm1hbGl6ZSBcIlwiLCBhdXRvLCBhbmQgcHJlcGFyZSBmb3IgZXh0cmFcclxuXHRcdHZhbCA9IHBhcnNlRmxvYXQoIHZhbCApIHx8IDA7XHJcblx0fVxyXG5cclxuXHQvLyBVc2UgdGhlIGFjdGl2ZSBib3gtc2l6aW5nIG1vZGVsIHRvIGFkZC9zdWJ0cmFjdCBpcnJlbGV2YW50IHN0eWxlc1xyXG5cdHJldHVybiAoIHZhbCArXHJcblx0XHRhdWdtZW50V2lkdGhPckhlaWdodChcclxuXHRcdFx0ZWxlbSxcclxuXHRcdFx0bmFtZSxcclxuXHRcdFx0ZXh0cmEgfHwgKCBpc0JvcmRlckJveCA/IFwiYm9yZGVyXCIgOiBcImNvbnRlbnRcIiApLFxyXG5cdFx0XHR2YWx1ZUlzQm9yZGVyQm94LFxyXG5cdFx0XHRzdHlsZXNcclxuXHRcdClcclxuXHQpICsgXCJweFwiO1xyXG59XHJcblxyXG5mdW5jdGlvbiBzaG93SGlkZSggZWxlbWVudHMsIHNob3cgKSB7XHJcblx0dmFyIGRpc3BsYXksIGVsZW0sIGhpZGRlbixcclxuXHRcdHZhbHVlcyA9IFtdLFxyXG5cdFx0aW5kZXggPSAwLFxyXG5cdFx0bGVuZ3RoID0gZWxlbWVudHMubGVuZ3RoO1xyXG5cclxuXHRmb3IgKCA7IGluZGV4IDwgbGVuZ3RoOyBpbmRleCsrICkge1xyXG5cdFx0ZWxlbSA9IGVsZW1lbnRzWyBpbmRleCBdO1xyXG5cdFx0aWYgKCAhZWxlbS5zdHlsZSApIHtcclxuXHRcdFx0Y29udGludWU7XHJcblx0XHR9XHJcblxyXG5cdFx0dmFsdWVzWyBpbmRleCBdID0gZGF0YVByaXYuZ2V0KCBlbGVtLCBcIm9sZGRpc3BsYXlcIiApO1xyXG5cdFx0ZGlzcGxheSA9IGVsZW0uc3R5bGUuZGlzcGxheTtcclxuXHRcdGlmICggc2hvdyApIHtcclxuXHJcblx0XHRcdC8vIFJlc2V0IHRoZSBpbmxpbmUgZGlzcGxheSBvZiB0aGlzIGVsZW1lbnQgdG8gbGVhcm4gaWYgaXQgaXNcclxuXHRcdFx0Ly8gYmVpbmcgaGlkZGVuIGJ5IGNhc2NhZGVkIHJ1bGVzIG9yIG5vdFxyXG5cdFx0XHRpZiAoICF2YWx1ZXNbIGluZGV4IF0gJiYgZGlzcGxheSA9PT0gXCJub25lXCIgKSB7XHJcblx0XHRcdFx0ZWxlbS5zdHlsZS5kaXNwbGF5ID0gXCJcIjtcclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0Ly8gU2V0IGVsZW1lbnRzIHdoaWNoIGhhdmUgYmVlbiBvdmVycmlkZGVuIHdpdGggZGlzcGxheTogbm9uZVxyXG5cdFx0XHQvLyBpbiBhIHN0eWxlc2hlZXQgdG8gd2hhdGV2ZXIgdGhlIGRlZmF1bHQgYnJvd3NlciBzdHlsZSBpc1xyXG5cdFx0XHQvLyBmb3Igc3VjaCBhbiBlbGVtZW50XHJcblx0XHRcdGlmICggZWxlbS5zdHlsZS5kaXNwbGF5ID09PSBcIlwiICYmIGlzSGlkZGVuKCBlbGVtICkgKSB7XHJcblx0XHRcdFx0dmFsdWVzWyBpbmRleCBdID0gZGF0YVByaXYuYWNjZXNzKFxyXG5cdFx0XHRcdFx0ZWxlbSxcclxuXHRcdFx0XHRcdFwib2xkZGlzcGxheVwiLFxyXG5cdFx0XHRcdFx0ZGVmYXVsdERpc3BsYXkoIGVsZW0ubm9kZU5hbWUgKVxyXG5cdFx0XHRcdCk7XHJcblx0XHRcdH1cclxuXHRcdH0gZWxzZSB7XHJcblx0XHRcdGhpZGRlbiA9IGlzSGlkZGVuKCBlbGVtICk7XHJcblxyXG5cdFx0XHRpZiAoIGRpc3BsYXkgIT09IFwibm9uZVwiIHx8ICFoaWRkZW4gKSB7XHJcblx0XHRcdFx0ZGF0YVByaXYuc2V0KFxyXG5cdFx0XHRcdFx0ZWxlbSxcclxuXHRcdFx0XHRcdFwib2xkZGlzcGxheVwiLFxyXG5cdFx0XHRcdFx0aGlkZGVuID8gZGlzcGxheSA6IGpRdWVyeS5jc3MoIGVsZW0sIFwiZGlzcGxheVwiIClcclxuXHRcdFx0XHQpO1xyXG5cdFx0XHR9XHJcblx0XHR9XHJcblx0fVxyXG5cclxuXHQvLyBTZXQgdGhlIGRpc3BsYXkgb2YgbW9zdCBvZiB0aGUgZWxlbWVudHMgaW4gYSBzZWNvbmQgbG9vcFxyXG5cdC8vIHRvIGF2b2lkIHRoZSBjb25zdGFudCByZWZsb3dcclxuXHRmb3IgKCBpbmRleCA9IDA7IGluZGV4IDwgbGVuZ3RoOyBpbmRleCsrICkge1xyXG5cdFx0ZWxlbSA9IGVsZW1lbnRzWyBpbmRleCBdO1xyXG5cdFx0aWYgKCAhZWxlbS5zdHlsZSApIHtcclxuXHRcdFx0Y29udGludWU7XHJcblx0XHR9XHJcblx0XHRpZiAoICFzaG93IHx8IGVsZW0uc3R5bGUuZGlzcGxheSA9PT0gXCJub25lXCIgfHwgZWxlbS5zdHlsZS5kaXNwbGF5ID09PSBcIlwiICkge1xyXG5cdFx0XHRlbGVtLnN0eWxlLmRpc3BsYXkgPSBzaG93ID8gdmFsdWVzWyBpbmRleCBdIHx8IFwiXCIgOiBcIm5vbmVcIjtcclxuXHRcdH1cclxuXHR9XHJcblxyXG5cdHJldHVybiBlbGVtZW50cztcclxufVxyXG5cclxualF1ZXJ5LmV4dGVuZCgge1xyXG5cclxuXHQvLyBBZGQgaW4gc3R5bGUgcHJvcGVydHkgaG9va3MgZm9yIG92ZXJyaWRpbmcgdGhlIGRlZmF1bHRcclxuXHQvLyBiZWhhdmlvciBvZiBnZXR0aW5nIGFuZCBzZXR0aW5nIGEgc3R5bGUgcHJvcGVydHlcclxuXHRjc3NIb29rczoge1xyXG5cdFx0b3BhY2l0eToge1xyXG5cdFx0XHRnZXQ6IGZ1bmN0aW9uKCBlbGVtLCBjb21wdXRlZCApIHtcclxuXHRcdFx0XHRpZiAoIGNvbXB1dGVkICkge1xyXG5cclxuXHRcdFx0XHRcdC8vIFdlIHNob3VsZCBhbHdheXMgZ2V0IGEgbnVtYmVyIGJhY2sgZnJvbSBvcGFjaXR5XHJcblx0XHRcdFx0XHR2YXIgcmV0ID0gY3VyQ1NTKCBlbGVtLCBcIm9wYWNpdHlcIiApO1xyXG5cdFx0XHRcdFx0cmV0dXJuIHJldCA9PT0gXCJcIiA/IFwiMVwiIDogcmV0O1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0fVxyXG5cdFx0fVxyXG5cdH0sXHJcblxyXG5cdC8vIERvbid0IGF1dG9tYXRpY2FsbHkgYWRkIFwicHhcIiB0byB0aGVzZSBwb3NzaWJseS11bml0bGVzcyBwcm9wZXJ0aWVzXHJcblx0Y3NzTnVtYmVyOiB7XHJcblx0XHRcImFuaW1hdGlvbkl0ZXJhdGlvbkNvdW50XCI6IHRydWUsXHJcblx0XHRcImNvbHVtbkNvdW50XCI6IHRydWUsXHJcblx0XHRcImZpbGxPcGFjaXR5XCI6IHRydWUsXHJcblx0XHRcImZsZXhHcm93XCI6IHRydWUsXHJcblx0XHRcImZsZXhTaHJpbmtcIjogdHJ1ZSxcclxuXHRcdFwiZm9udFdlaWdodFwiOiB0cnVlLFxyXG5cdFx0XCJsaW5lSGVpZ2h0XCI6IHRydWUsXHJcblx0XHRcIm9wYWNpdHlcIjogdHJ1ZSxcclxuXHRcdFwib3JkZXJcIjogdHJ1ZSxcclxuXHRcdFwib3JwaGFuc1wiOiB0cnVlLFxyXG5cdFx0XCJ3aWRvd3NcIjogdHJ1ZSxcclxuXHRcdFwiekluZGV4XCI6IHRydWUsXHJcblx0XHRcInpvb21cIjogdHJ1ZVxyXG5cdH0sXHJcblxyXG5cdC8vIEFkZCBpbiBwcm9wZXJ0aWVzIHdob3NlIG5hbWVzIHlvdSB3aXNoIHRvIGZpeCBiZWZvcmVcclxuXHQvLyBzZXR0aW5nIG9yIGdldHRpbmcgdGhlIHZhbHVlXHJcblx0Y3NzUHJvcHM6IHtcclxuXHRcdFwiZmxvYXRcIjogXCJjc3NGbG9hdFwiXHJcblx0fSxcclxuXHJcblx0Ly8gR2V0IGFuZCBzZXQgdGhlIHN0eWxlIHByb3BlcnR5IG9uIGEgRE9NIE5vZGVcclxuXHRzdHlsZTogZnVuY3Rpb24oIGVsZW0sIG5hbWUsIHZhbHVlLCBleHRyYSApIHtcclxuXHJcblx0XHQvLyBEb24ndCBzZXQgc3R5bGVzIG9uIHRleHQgYW5kIGNvbW1lbnQgbm9kZXNcclxuXHRcdGlmICggIWVsZW0gfHwgZWxlbS5ub2RlVHlwZSA9PT0gMyB8fCBlbGVtLm5vZGVUeXBlID09PSA4IHx8ICFlbGVtLnN0eWxlICkge1xyXG5cdFx0XHRyZXR1cm47XHJcblx0XHR9XHJcblxyXG5cdFx0Ly8gTWFrZSBzdXJlIHRoYXQgd2UncmUgd29ya2luZyB3aXRoIHRoZSByaWdodCBuYW1lXHJcblx0XHR2YXIgcmV0LCB0eXBlLCBob29rcyxcclxuXHRcdFx0b3JpZ05hbWUgPSBqUXVlcnkuY2FtZWxDYXNlKCBuYW1lICksXHJcblx0XHRcdHN0eWxlID0gZWxlbS5zdHlsZTtcclxuXHJcblx0XHRuYW1lID0galF1ZXJ5LmNzc1Byb3BzWyBvcmlnTmFtZSBdIHx8XHJcblx0XHRcdCggalF1ZXJ5LmNzc1Byb3BzWyBvcmlnTmFtZSBdID0gdmVuZG9yUHJvcE5hbWUoIG9yaWdOYW1lICkgfHwgb3JpZ05hbWUgKTtcclxuXHJcblx0XHQvLyBHZXRzIGhvb2sgZm9yIHRoZSBwcmVmaXhlZCB2ZXJzaW9uLCB0aGVuIHVucHJlZml4ZWQgdmVyc2lvblxyXG5cdFx0aG9va3MgPSBqUXVlcnkuY3NzSG9va3NbIG5hbWUgXSB8fCBqUXVlcnkuY3NzSG9va3NbIG9yaWdOYW1lIF07XHJcblxyXG5cdFx0Ly8gQ2hlY2sgaWYgd2UncmUgc2V0dGluZyBhIHZhbHVlXHJcblx0XHRpZiAoIHZhbHVlICE9PSB1bmRlZmluZWQgKSB7XHJcblx0XHRcdHR5cGUgPSB0eXBlb2YgdmFsdWU7XHJcblxyXG5cdFx0XHQvLyBDb252ZXJ0IFwiKz1cIiBvciBcIi09XCIgdG8gcmVsYXRpdmUgbnVtYmVycyAoIzczNDUpXHJcblx0XHRcdGlmICggdHlwZSA9PT0gXCJzdHJpbmdcIiAmJiAoIHJldCA9IHJjc3NOdW0uZXhlYyggdmFsdWUgKSApICYmIHJldFsgMSBdICkge1xyXG5cdFx0XHRcdHZhbHVlID0gYWRqdXN0Q1NTKCBlbGVtLCBuYW1lLCByZXQgKTtcclxuXHJcblx0XHRcdFx0Ly8gRml4ZXMgYnVnICM5MjM3XHJcblx0XHRcdFx0dHlwZSA9IFwibnVtYmVyXCI7XHJcblx0XHRcdH1cclxuXHJcblx0XHRcdC8vIE1ha2Ugc3VyZSB0aGF0IG51bGwgYW5kIE5hTiB2YWx1ZXMgYXJlbid0IHNldCAoIzcxMTYpXHJcblx0XHRcdGlmICggdmFsdWUgPT0gbnVsbCB8fCB2YWx1ZSAhPT0gdmFsdWUgKSB7XHJcblx0XHRcdFx0cmV0dXJuO1xyXG5cdFx0XHR9XHJcblxyXG5cdFx0XHQvLyBJZiBhIG51bWJlciB3YXMgcGFzc2VkIGluLCBhZGQgdGhlIHVuaXQgKGV4Y2VwdCBmb3IgY2VydGFpbiBDU1MgcHJvcGVydGllcylcclxuXHRcdFx0aWYgKCB0eXBlID09PSBcIm51bWJlclwiICkge1xyXG5cdFx0XHRcdHZhbHVlICs9IHJldCAmJiByZXRbIDMgXSB8fCAoIGpRdWVyeS5jc3NOdW1iZXJbIG9yaWdOYW1lIF0gPyBcIlwiIDogXCJweFwiICk7XHJcblx0XHRcdH1cclxuXHJcblx0XHRcdC8vIFN1cHBvcnQ6IElFOS0xMStcclxuXHRcdFx0Ly8gYmFja2dyb3VuZC0qIHByb3BzIGFmZmVjdCBvcmlnaW5hbCBjbG9uZSdzIHZhbHVlc1xyXG5cdFx0XHRpZiAoICFzdXBwb3J0LmNsZWFyQ2xvbmVTdHlsZSAmJiB2YWx1ZSA9PT0gXCJcIiAmJiBuYW1lLmluZGV4T2YoIFwiYmFja2dyb3VuZFwiICkgPT09IDAgKSB7XHJcblx0XHRcdFx0c3R5bGVbIG5hbWUgXSA9IFwiaW5oZXJpdFwiO1xyXG5cdFx0XHR9XHJcblxyXG5cdFx0XHQvLyBJZiBhIGhvb2sgd2FzIHByb3ZpZGVkLCB1c2UgdGhhdCB2YWx1ZSwgb3RoZXJ3aXNlIGp1c3Qgc2V0IHRoZSBzcGVjaWZpZWQgdmFsdWVcclxuXHRcdFx0aWYgKCAhaG9va3MgfHwgISggXCJzZXRcIiBpbiBob29rcyApIHx8XHJcblx0XHRcdFx0KCB2YWx1ZSA9IGhvb2tzLnNldCggZWxlbSwgdmFsdWUsIGV4dHJhICkgKSAhPT0gdW5kZWZpbmVkICkge1xyXG5cclxuXHRcdFx0XHRzdHlsZVsgbmFtZSBdID0gdmFsdWU7XHJcblx0XHRcdH1cclxuXHJcblx0XHR9IGVsc2Uge1xyXG5cclxuXHRcdFx0Ly8gSWYgYSBob29rIHdhcyBwcm92aWRlZCBnZXQgdGhlIG5vbi1jb21wdXRlZCB2YWx1ZSBmcm9tIHRoZXJlXHJcblx0XHRcdGlmICggaG9va3MgJiYgXCJnZXRcIiBpbiBob29rcyAmJlxyXG5cdFx0XHRcdCggcmV0ID0gaG9va3MuZ2V0KCBlbGVtLCBmYWxzZSwgZXh0cmEgKSApICE9PSB1bmRlZmluZWQgKSB7XHJcblxyXG5cdFx0XHRcdHJldHVybiByZXQ7XHJcblx0XHRcdH1cclxuXHJcblx0XHRcdC8vIE90aGVyd2lzZSBqdXN0IGdldCB0aGUgdmFsdWUgZnJvbSB0aGUgc3R5bGUgb2JqZWN0XHJcblx0XHRcdHJldHVybiBzdHlsZVsgbmFtZSBdO1xyXG5cdFx0fVxyXG5cdH0sXHJcblxyXG5cdGNzczogZnVuY3Rpb24oIGVsZW0sIG5hbWUsIGV4dHJhLCBzdHlsZXMgKSB7XHJcblx0XHR2YXIgdmFsLCBudW0sIGhvb2tzLFxyXG5cdFx0XHRvcmlnTmFtZSA9IGpRdWVyeS5jYW1lbENhc2UoIG5hbWUgKTtcclxuXHJcblx0XHQvLyBNYWtlIHN1cmUgdGhhdCB3ZSdyZSB3b3JraW5nIHdpdGggdGhlIHJpZ2h0IG5hbWVcclxuXHRcdG5hbWUgPSBqUXVlcnkuY3NzUHJvcHNbIG9yaWdOYW1lIF0gfHxcclxuXHRcdFx0KCBqUXVlcnkuY3NzUHJvcHNbIG9yaWdOYW1lIF0gPSB2ZW5kb3JQcm9wTmFtZSggb3JpZ05hbWUgKSB8fCBvcmlnTmFtZSApO1xyXG5cclxuXHRcdC8vIFRyeSBwcmVmaXhlZCBuYW1lIGZvbGxvd2VkIGJ5IHRoZSB1bnByZWZpeGVkIG5hbWVcclxuXHRcdGhvb2tzID0galF1ZXJ5LmNzc0hvb2tzWyBuYW1lIF0gfHwgalF1ZXJ5LmNzc0hvb2tzWyBvcmlnTmFtZSBdO1xyXG5cclxuXHRcdC8vIElmIGEgaG9vayB3YXMgcHJvdmlkZWQgZ2V0IHRoZSBjb21wdXRlZCB2YWx1ZSBmcm9tIHRoZXJlXHJcblx0XHRpZiAoIGhvb2tzICYmIFwiZ2V0XCIgaW4gaG9va3MgKSB7XHJcblx0XHRcdHZhbCA9IGhvb2tzLmdldCggZWxlbSwgdHJ1ZSwgZXh0cmEgKTtcclxuXHRcdH1cclxuXHJcblx0XHQvLyBPdGhlcndpc2UsIGlmIGEgd2F5IHRvIGdldCB0aGUgY29tcHV0ZWQgdmFsdWUgZXhpc3RzLCB1c2UgdGhhdFxyXG5cdFx0aWYgKCB2YWwgPT09IHVuZGVmaW5lZCApIHtcclxuXHRcdFx0dmFsID0gY3VyQ1NTKCBlbGVtLCBuYW1lLCBzdHlsZXMgKTtcclxuXHRcdH1cclxuXHJcblx0XHQvLyBDb252ZXJ0IFwibm9ybWFsXCIgdG8gY29tcHV0ZWQgdmFsdWVcclxuXHRcdGlmICggdmFsID09PSBcIm5vcm1hbFwiICYmIG5hbWUgaW4gY3NzTm9ybWFsVHJhbnNmb3JtICkge1xyXG5cdFx0XHR2YWwgPSBjc3NOb3JtYWxUcmFuc2Zvcm1bIG5hbWUgXTtcclxuXHRcdH1cclxuXHJcblx0XHQvLyBNYWtlIG51bWVyaWMgaWYgZm9yY2VkIG9yIGEgcXVhbGlmaWVyIHdhcyBwcm92aWRlZCBhbmQgdmFsIGxvb2tzIG51bWVyaWNcclxuXHRcdGlmICggZXh0cmEgPT09IFwiXCIgfHwgZXh0cmEgKSB7XHJcblx0XHRcdG51bSA9IHBhcnNlRmxvYXQoIHZhbCApO1xyXG5cdFx0XHRyZXR1cm4gZXh0cmEgPT09IHRydWUgfHwgaXNGaW5pdGUoIG51bSApID8gbnVtIHx8IDAgOiB2YWw7XHJcblx0XHR9XHJcblx0XHRyZXR1cm4gdmFsO1xyXG5cdH1cclxufSApO1xyXG5cclxualF1ZXJ5LmVhY2goIFsgXCJoZWlnaHRcIiwgXCJ3aWR0aFwiIF0sIGZ1bmN0aW9uKCBpLCBuYW1lICkge1xyXG5cdGpRdWVyeS5jc3NIb29rc1sgbmFtZSBdID0ge1xyXG5cdFx0Z2V0OiBmdW5jdGlvbiggZWxlbSwgY29tcHV0ZWQsIGV4dHJhICkge1xyXG5cdFx0XHRpZiAoIGNvbXB1dGVkICkge1xyXG5cclxuXHRcdFx0XHQvLyBDZXJ0YWluIGVsZW1lbnRzIGNhbiBoYXZlIGRpbWVuc2lvbiBpbmZvIGlmIHdlIGludmlzaWJseSBzaG93IHRoZW1cclxuXHRcdFx0XHQvLyBidXQgaXQgbXVzdCBoYXZlIGEgY3VycmVudCBkaXNwbGF5IHN0eWxlIHRoYXQgd291bGQgYmVuZWZpdFxyXG5cdFx0XHRcdHJldHVybiByZGlzcGxheXN3YXAudGVzdCggalF1ZXJ5LmNzcyggZWxlbSwgXCJkaXNwbGF5XCIgKSApICYmXHJcblx0XHRcdFx0XHRlbGVtLm9mZnNldFdpZHRoID09PSAwID9cclxuXHRcdFx0XHRcdFx0c3dhcCggZWxlbSwgY3NzU2hvdywgZnVuY3Rpb24oKSB7XHJcblx0XHRcdFx0XHRcdFx0cmV0dXJuIGdldFdpZHRoT3JIZWlnaHQoIGVsZW0sIG5hbWUsIGV4dHJhICk7XHJcblx0XHRcdFx0XHRcdH0gKSA6XHJcblx0XHRcdFx0XHRcdGdldFdpZHRoT3JIZWlnaHQoIGVsZW0sIG5hbWUsIGV4dHJhICk7XHJcblx0XHRcdH1cclxuXHRcdH0sXHJcblxyXG5cdFx0c2V0OiBmdW5jdGlvbiggZWxlbSwgdmFsdWUsIGV4dHJhICkge1xyXG5cdFx0XHR2YXIgbWF0Y2hlcyxcclxuXHRcdFx0XHRzdHlsZXMgPSBleHRyYSAmJiBnZXRTdHlsZXMoIGVsZW0gKSxcclxuXHRcdFx0XHRzdWJ0cmFjdCA9IGV4dHJhICYmIGF1Z21lbnRXaWR0aE9ySGVpZ2h0KFxyXG5cdFx0XHRcdFx0ZWxlbSxcclxuXHRcdFx0XHRcdG5hbWUsXHJcblx0XHRcdFx0XHRleHRyYSxcclxuXHRcdFx0XHRcdGpRdWVyeS5jc3MoIGVsZW0sIFwiYm94U2l6aW5nXCIsIGZhbHNlLCBzdHlsZXMgKSA9PT0gXCJib3JkZXItYm94XCIsXHJcblx0XHRcdFx0XHRzdHlsZXNcclxuXHRcdFx0XHQpO1xyXG5cclxuXHRcdFx0Ly8gQ29udmVydCB0byBwaXhlbHMgaWYgdmFsdWUgYWRqdXN0bWVudCBpcyBuZWVkZWRcclxuXHRcdFx0aWYgKCBzdWJ0cmFjdCAmJiAoIG1hdGNoZXMgPSByY3NzTnVtLmV4ZWMoIHZhbHVlICkgKSAmJlxyXG5cdFx0XHRcdCggbWF0Y2hlc1sgMyBdIHx8IFwicHhcIiApICE9PSBcInB4XCIgKSB7XHJcblxyXG5cdFx0XHRcdGVsZW0uc3R5bGVbIG5hbWUgXSA9IHZhbHVlO1xyXG5cdFx0XHRcdHZhbHVlID0galF1ZXJ5LmNzcyggZWxlbSwgbmFtZSApO1xyXG5cdFx0XHR9XHJcblxyXG5cdFx0XHRyZXR1cm4gc2V0UG9zaXRpdmVOdW1iZXIoIGVsZW0sIHZhbHVlLCBzdWJ0cmFjdCApO1xyXG5cdFx0fVxyXG5cdH07XHJcbn0gKTtcclxuXHJcbmpRdWVyeS5jc3NIb29rcy5tYXJnaW5MZWZ0ID0gYWRkR2V0SG9va0lmKCBzdXBwb3J0LnJlbGlhYmxlTWFyZ2luTGVmdCxcclxuXHRmdW5jdGlvbiggZWxlbSwgY29tcHV0ZWQgKSB7XHJcblx0XHRpZiAoIGNvbXB1dGVkICkge1xyXG5cdFx0XHRyZXR1cm4gKCBwYXJzZUZsb2F0KCBjdXJDU1MoIGVsZW0sIFwibWFyZ2luTGVmdFwiICkgKSB8fFxyXG5cdFx0XHRcdGVsZW0uZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkubGVmdCAtXHJcblx0XHRcdFx0XHRzd2FwKCBlbGVtLCB7IG1hcmdpbkxlZnQ6IDAgfSwgZnVuY3Rpb24oKSB7XHJcblx0XHRcdFx0XHRcdHJldHVybiBlbGVtLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLmxlZnQ7XHJcblx0XHRcdFx0XHR9IClcclxuXHRcdFx0XHQpICsgXCJweFwiO1xyXG5cdFx0fVxyXG5cdH1cclxuKTtcclxuXHJcbi8vIFN1cHBvcnQ6IEFuZHJvaWQgMi4zXHJcbmpRdWVyeS5jc3NIb29rcy5tYXJnaW5SaWdodCA9IGFkZEdldEhvb2tJZiggc3VwcG9ydC5yZWxpYWJsZU1hcmdpblJpZ2h0LFxyXG5cdGZ1bmN0aW9uKCBlbGVtLCBjb21wdXRlZCApIHtcclxuXHRcdGlmICggY29tcHV0ZWQgKSB7XHJcblx0XHRcdHJldHVybiBzd2FwKCBlbGVtLCB7IFwiZGlzcGxheVwiOiBcImlubGluZS1ibG9ja1wiIH0sXHJcblx0XHRcdFx0Y3VyQ1NTLCBbIGVsZW0sIFwibWFyZ2luUmlnaHRcIiBdICk7XHJcblx0XHR9XHJcblx0fVxyXG4pO1xyXG5cclxuLy8gVGhlc2UgaG9va3MgYXJlIHVzZWQgYnkgYW5pbWF0ZSB0byBleHBhbmQgcHJvcGVydGllc1xyXG5qUXVlcnkuZWFjaCgge1xyXG5cdG1hcmdpbjogXCJcIixcclxuXHRwYWRkaW5nOiBcIlwiLFxyXG5cdGJvcmRlcjogXCJXaWR0aFwiXHJcbn0sIGZ1bmN0aW9uKCBwcmVmaXgsIHN1ZmZpeCApIHtcclxuXHRqUXVlcnkuY3NzSG9va3NbIHByZWZpeCArIHN1ZmZpeCBdID0ge1xyXG5cdFx0ZXhwYW5kOiBmdW5jdGlvbiggdmFsdWUgKSB7XHJcblx0XHRcdHZhciBpID0gMCxcclxuXHRcdFx0XHRleHBhbmRlZCA9IHt9LFxyXG5cclxuXHRcdFx0XHQvLyBBc3N1bWVzIGEgc2luZ2xlIG51bWJlciBpZiBub3QgYSBzdHJpbmdcclxuXHRcdFx0XHRwYXJ0cyA9IHR5cGVvZiB2YWx1ZSA9PT0gXCJzdHJpbmdcIiA/IHZhbHVlLnNwbGl0KCBcIiBcIiApIDogWyB2YWx1ZSBdO1xyXG5cclxuXHRcdFx0Zm9yICggOyBpIDwgNDsgaSsrICkge1xyXG5cdFx0XHRcdGV4cGFuZGVkWyBwcmVmaXggKyBjc3NFeHBhbmRbIGkgXSArIHN1ZmZpeCBdID1cclxuXHRcdFx0XHRcdHBhcnRzWyBpIF0gfHwgcGFydHNbIGkgLSAyIF0gfHwgcGFydHNbIDAgXTtcclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0cmV0dXJuIGV4cGFuZGVkO1xyXG5cdFx0fVxyXG5cdH07XHJcblxyXG5cdGlmICggIXJtYXJnaW4udGVzdCggcHJlZml4ICkgKSB7XHJcblx0XHRqUXVlcnkuY3NzSG9va3NbIHByZWZpeCArIHN1ZmZpeCBdLnNldCA9IHNldFBvc2l0aXZlTnVtYmVyO1xyXG5cdH1cclxufSApO1xyXG5cclxualF1ZXJ5LmZuLmV4dGVuZCgge1xyXG5cdGNzczogZnVuY3Rpb24oIG5hbWUsIHZhbHVlICkge1xyXG5cdFx0cmV0dXJuIGFjY2VzcyggdGhpcywgZnVuY3Rpb24oIGVsZW0sIG5hbWUsIHZhbHVlICkge1xyXG5cdFx0XHR2YXIgc3R5bGVzLCBsZW4sXHJcblx0XHRcdFx0bWFwID0ge30sXHJcblx0XHRcdFx0aSA9IDA7XHJcblxyXG5cdFx0XHRpZiAoIGpRdWVyeS5pc0FycmF5KCBuYW1lICkgKSB7XHJcblx0XHRcdFx0c3R5bGVzID0gZ2V0U3R5bGVzKCBlbGVtICk7XHJcblx0XHRcdFx0bGVuID0gbmFtZS5sZW5ndGg7XHJcblxyXG5cdFx0XHRcdGZvciAoIDsgaSA8IGxlbjsgaSsrICkge1xyXG5cdFx0XHRcdFx0bWFwWyBuYW1lWyBpIF0gXSA9IGpRdWVyeS5jc3MoIGVsZW0sIG5hbWVbIGkgXSwgZmFsc2UsIHN0eWxlcyApO1xyXG5cdFx0XHRcdH1cclxuXHJcblx0XHRcdFx0cmV0dXJuIG1hcDtcclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0cmV0dXJuIHZhbHVlICE9PSB1bmRlZmluZWQgP1xyXG5cdFx0XHRcdGpRdWVyeS5zdHlsZSggZWxlbSwgbmFtZSwgdmFsdWUgKSA6XHJcblx0XHRcdFx0alF1ZXJ5LmNzcyggZWxlbSwgbmFtZSApO1xyXG5cdFx0fSwgbmFtZSwgdmFsdWUsIGFyZ3VtZW50cy5sZW5ndGggPiAxICk7XHJcblx0fSxcclxuXHRzaG93OiBmdW5jdGlvbigpIHtcclxuXHRcdHJldHVybiBzaG93SGlkZSggdGhpcywgdHJ1ZSApO1xyXG5cdH0sXHJcblx0aGlkZTogZnVuY3Rpb24oKSB7XHJcblx0XHRyZXR1cm4gc2hvd0hpZGUoIHRoaXMgKTtcclxuXHR9LFxyXG5cdHRvZ2dsZTogZnVuY3Rpb24oIHN0YXRlICkge1xyXG5cdFx0aWYgKCB0eXBlb2Ygc3RhdGUgPT09IFwiYm9vbGVhblwiICkge1xyXG5cdFx0XHRyZXR1cm4gc3RhdGUgPyB0aGlzLnNob3coKSA6IHRoaXMuaGlkZSgpO1xyXG5cdFx0fVxyXG5cclxuXHRcdHJldHVybiB0aGlzLmVhY2goIGZ1bmN0aW9uKCkge1xyXG5cdFx0XHRpZiAoIGlzSGlkZGVuKCB0aGlzICkgKSB7XHJcblx0XHRcdFx0alF1ZXJ5KCB0aGlzICkuc2hvdygpO1xyXG5cdFx0XHR9IGVsc2Uge1xyXG5cdFx0XHRcdGpRdWVyeSggdGhpcyApLmhpZGUoKTtcclxuXHRcdFx0fVxyXG5cdFx0fSApO1xyXG5cdH1cclxufSApO1xyXG5cclxuXHJcbmZ1bmN0aW9uIFR3ZWVuKCBlbGVtLCBvcHRpb25zLCBwcm9wLCBlbmQsIGVhc2luZyApIHtcclxuXHRyZXR1cm4gbmV3IFR3ZWVuLnByb3RvdHlwZS5pbml0KCBlbGVtLCBvcHRpb25zLCBwcm9wLCBlbmQsIGVhc2luZyApO1xyXG59XHJcbmpRdWVyeS5Ud2VlbiA9IFR3ZWVuO1xyXG5cclxuVHdlZW4ucHJvdG90eXBlID0ge1xyXG5cdGNvbnN0cnVjdG9yOiBUd2VlbixcclxuXHRpbml0OiBmdW5jdGlvbiggZWxlbSwgb3B0aW9ucywgcHJvcCwgZW5kLCBlYXNpbmcsIHVuaXQgKSB7XHJcblx0XHR0aGlzLmVsZW0gPSBlbGVtO1xyXG5cdFx0dGhpcy5wcm9wID0gcHJvcDtcclxuXHRcdHRoaXMuZWFzaW5nID0gZWFzaW5nIHx8IGpRdWVyeS5lYXNpbmcuX2RlZmF1bHQ7XHJcblx0XHR0aGlzLm9wdGlvbnMgPSBvcHRpb25zO1xyXG5cdFx0dGhpcy5zdGFydCA9IHRoaXMubm93ID0gdGhpcy5jdXIoKTtcclxuXHRcdHRoaXMuZW5kID0gZW5kO1xyXG5cdFx0dGhpcy51bml0ID0gdW5pdCB8fCAoIGpRdWVyeS5jc3NOdW1iZXJbIHByb3AgXSA/IFwiXCIgOiBcInB4XCIgKTtcclxuXHR9LFxyXG5cdGN1cjogZnVuY3Rpb24oKSB7XHJcblx0XHR2YXIgaG9va3MgPSBUd2Vlbi5wcm9wSG9va3NbIHRoaXMucHJvcCBdO1xyXG5cclxuXHRcdHJldHVybiBob29rcyAmJiBob29rcy5nZXQgP1xyXG5cdFx0XHRob29rcy5nZXQoIHRoaXMgKSA6XHJcblx0XHRcdFR3ZWVuLnByb3BIb29rcy5fZGVmYXVsdC5nZXQoIHRoaXMgKTtcclxuXHR9LFxyXG5cdHJ1bjogZnVuY3Rpb24oIHBlcmNlbnQgKSB7XHJcblx0XHR2YXIgZWFzZWQsXHJcblx0XHRcdGhvb2tzID0gVHdlZW4ucHJvcEhvb2tzWyB0aGlzLnByb3AgXTtcclxuXHJcblx0XHRpZiAoIHRoaXMub3B0aW9ucy5kdXJhdGlvbiApIHtcclxuXHRcdFx0dGhpcy5wb3MgPSBlYXNlZCA9IGpRdWVyeS5lYXNpbmdbIHRoaXMuZWFzaW5nIF0oXHJcblx0XHRcdFx0cGVyY2VudCwgdGhpcy5vcHRpb25zLmR1cmF0aW9uICogcGVyY2VudCwgMCwgMSwgdGhpcy5vcHRpb25zLmR1cmF0aW9uXHJcblx0XHRcdCk7XHJcblx0XHR9IGVsc2Uge1xyXG5cdFx0XHR0aGlzLnBvcyA9IGVhc2VkID0gcGVyY2VudDtcclxuXHRcdH1cclxuXHRcdHRoaXMubm93ID0gKCB0aGlzLmVuZCAtIHRoaXMuc3RhcnQgKSAqIGVhc2VkICsgdGhpcy5zdGFydDtcclxuXHJcblx0XHRpZiAoIHRoaXMub3B0aW9ucy5zdGVwICkge1xyXG5cdFx0XHR0aGlzLm9wdGlvbnMuc3RlcC5jYWxsKCB0aGlzLmVsZW0sIHRoaXMubm93LCB0aGlzICk7XHJcblx0XHR9XHJcblxyXG5cdFx0aWYgKCBob29rcyAmJiBob29rcy5zZXQgKSB7XHJcblx0XHRcdGhvb2tzLnNldCggdGhpcyApO1xyXG5cdFx0fSBlbHNlIHtcclxuXHRcdFx0VHdlZW4ucHJvcEhvb2tzLl9kZWZhdWx0LnNldCggdGhpcyApO1xyXG5cdFx0fVxyXG5cdFx0cmV0dXJuIHRoaXM7XHJcblx0fVxyXG59O1xyXG5cclxuVHdlZW4ucHJvdG90eXBlLmluaXQucHJvdG90eXBlID0gVHdlZW4ucHJvdG90eXBlO1xyXG5cclxuVHdlZW4ucHJvcEhvb2tzID0ge1xyXG5cdF9kZWZhdWx0OiB7XHJcblx0XHRnZXQ6IGZ1bmN0aW9uKCB0d2VlbiApIHtcclxuXHRcdFx0dmFyIHJlc3VsdDtcclxuXHJcblx0XHRcdC8vIFVzZSBhIHByb3BlcnR5IG9uIHRoZSBlbGVtZW50IGRpcmVjdGx5IHdoZW4gaXQgaXMgbm90IGEgRE9NIGVsZW1lbnQsXHJcblx0XHRcdC8vIG9yIHdoZW4gdGhlcmUgaXMgbm8gbWF0Y2hpbmcgc3R5bGUgcHJvcGVydHkgdGhhdCBleGlzdHMuXHJcblx0XHRcdGlmICggdHdlZW4uZWxlbS5ub2RlVHlwZSAhPT0gMSB8fFxyXG5cdFx0XHRcdHR3ZWVuLmVsZW1bIHR3ZWVuLnByb3AgXSAhPSBudWxsICYmIHR3ZWVuLmVsZW0uc3R5bGVbIHR3ZWVuLnByb3AgXSA9PSBudWxsICkge1xyXG5cdFx0XHRcdHJldHVybiB0d2Vlbi5lbGVtWyB0d2Vlbi5wcm9wIF07XHJcblx0XHRcdH1cclxuXHJcblx0XHRcdC8vIFBhc3NpbmcgYW4gZW1wdHkgc3RyaW5nIGFzIGEgM3JkIHBhcmFtZXRlciB0byAuY3NzIHdpbGwgYXV0b21hdGljYWxseVxyXG5cdFx0XHQvLyBhdHRlbXB0IGEgcGFyc2VGbG9hdCBhbmQgZmFsbGJhY2sgdG8gYSBzdHJpbmcgaWYgdGhlIHBhcnNlIGZhaWxzLlxyXG5cdFx0XHQvLyBTaW1wbGUgdmFsdWVzIHN1Y2ggYXMgXCIxMHB4XCIgYXJlIHBhcnNlZCB0byBGbG9hdDtcclxuXHRcdFx0Ly8gY29tcGxleCB2YWx1ZXMgc3VjaCBhcyBcInJvdGF0ZSgxcmFkKVwiIGFyZSByZXR1cm5lZCBhcy1pcy5cclxuXHRcdFx0cmVzdWx0ID0galF1ZXJ5LmNzcyggdHdlZW4uZWxlbSwgdHdlZW4ucHJvcCwgXCJcIiApO1xyXG5cclxuXHRcdFx0Ly8gRW1wdHkgc3RyaW5ncywgbnVsbCwgdW5kZWZpbmVkIGFuZCBcImF1dG9cIiBhcmUgY29udmVydGVkIHRvIDAuXHJcblx0XHRcdHJldHVybiAhcmVzdWx0IHx8IHJlc3VsdCA9PT0gXCJhdXRvXCIgPyAwIDogcmVzdWx0O1xyXG5cdFx0fSxcclxuXHRcdHNldDogZnVuY3Rpb24oIHR3ZWVuICkge1xyXG5cclxuXHRcdFx0Ly8gVXNlIHN0ZXAgaG9vayBmb3IgYmFjayBjb21wYXQuXHJcblx0XHRcdC8vIFVzZSBjc3NIb29rIGlmIGl0cyB0aGVyZS5cclxuXHRcdFx0Ly8gVXNlIC5zdHlsZSBpZiBhdmFpbGFibGUgYW5kIHVzZSBwbGFpbiBwcm9wZXJ0aWVzIHdoZXJlIGF2YWlsYWJsZS5cclxuXHRcdFx0aWYgKCBqUXVlcnkuZnguc3RlcFsgdHdlZW4ucHJvcCBdICkge1xyXG5cdFx0XHRcdGpRdWVyeS5meC5zdGVwWyB0d2Vlbi5wcm9wIF0oIHR3ZWVuICk7XHJcblx0XHRcdH0gZWxzZSBpZiAoIHR3ZWVuLmVsZW0ubm9kZVR5cGUgPT09IDEgJiZcclxuXHRcdFx0XHQoIHR3ZWVuLmVsZW0uc3R5bGVbIGpRdWVyeS5jc3NQcm9wc1sgdHdlZW4ucHJvcCBdIF0gIT0gbnVsbCB8fFxyXG5cdFx0XHRcdFx0alF1ZXJ5LmNzc0hvb2tzWyB0d2Vlbi5wcm9wIF0gKSApIHtcclxuXHRcdFx0XHRqUXVlcnkuc3R5bGUoIHR3ZWVuLmVsZW0sIHR3ZWVuLnByb3AsIHR3ZWVuLm5vdyArIHR3ZWVuLnVuaXQgKTtcclxuXHRcdFx0fSBlbHNlIHtcclxuXHRcdFx0XHR0d2Vlbi5lbGVtWyB0d2Vlbi5wcm9wIF0gPSB0d2Vlbi5ub3c7XHJcblx0XHRcdH1cclxuXHRcdH1cclxuXHR9XHJcbn07XHJcblxyXG4vLyBTdXBwb3J0OiBJRTlcclxuLy8gUGFuaWMgYmFzZWQgYXBwcm9hY2ggdG8gc2V0dGluZyB0aGluZ3Mgb24gZGlzY29ubmVjdGVkIG5vZGVzXHJcblR3ZWVuLnByb3BIb29rcy5zY3JvbGxUb3AgPSBUd2Vlbi5wcm9wSG9va3Muc2Nyb2xsTGVmdCA9IHtcclxuXHRzZXQ6IGZ1bmN0aW9uKCB0d2VlbiApIHtcclxuXHRcdGlmICggdHdlZW4uZWxlbS5ub2RlVHlwZSAmJiB0d2Vlbi5lbGVtLnBhcmVudE5vZGUgKSB7XHJcblx0XHRcdHR3ZWVuLmVsZW1bIHR3ZWVuLnByb3AgXSA9IHR3ZWVuLm5vdztcclxuXHRcdH1cclxuXHR9XHJcbn07XHJcblxyXG5qUXVlcnkuZWFzaW5nID0ge1xyXG5cdGxpbmVhcjogZnVuY3Rpb24oIHAgKSB7XHJcblx0XHRyZXR1cm4gcDtcclxuXHR9LFxyXG5cdHN3aW5nOiBmdW5jdGlvbiggcCApIHtcclxuXHRcdHJldHVybiAwLjUgLSBNYXRoLmNvcyggcCAqIE1hdGguUEkgKSAvIDI7XHJcblx0fSxcclxuXHRfZGVmYXVsdDogXCJzd2luZ1wiXHJcbn07XHJcblxyXG5qUXVlcnkuZnggPSBUd2Vlbi5wcm90b3R5cGUuaW5pdDtcclxuXHJcbi8vIEJhY2sgQ29tcGF0IDwxLjggZXh0ZW5zaW9uIHBvaW50XHJcbmpRdWVyeS5meC5zdGVwID0ge307XHJcblxyXG5cclxuXHJcblxyXG52YXJcclxuXHRmeE5vdywgdGltZXJJZCxcclxuXHRyZnh0eXBlcyA9IC9eKD86dG9nZ2xlfHNob3d8aGlkZSkkLyxcclxuXHRycnVuID0gL3F1ZXVlSG9va3MkLztcclxuXHJcbi8vIEFuaW1hdGlvbnMgY3JlYXRlZCBzeW5jaHJvbm91c2x5IHdpbGwgcnVuIHN5bmNocm9ub3VzbHlcclxuZnVuY3Rpb24gY3JlYXRlRnhOb3coKSB7XHJcblx0d2luZG93LnNldFRpbWVvdXQoIGZ1bmN0aW9uKCkge1xyXG5cdFx0ZnhOb3cgPSB1bmRlZmluZWQ7XHJcblx0fSApO1xyXG5cdHJldHVybiAoIGZ4Tm93ID0galF1ZXJ5Lm5vdygpICk7XHJcbn1cclxuXHJcbi8vIEdlbmVyYXRlIHBhcmFtZXRlcnMgdG8gY3JlYXRlIGEgc3RhbmRhcmQgYW5pbWF0aW9uXHJcbmZ1bmN0aW9uIGdlbkZ4KCB0eXBlLCBpbmNsdWRlV2lkdGggKSB7XHJcblx0dmFyIHdoaWNoLFxyXG5cdFx0aSA9IDAsXHJcblx0XHRhdHRycyA9IHsgaGVpZ2h0OiB0eXBlIH07XHJcblxyXG5cdC8vIElmIHdlIGluY2x1ZGUgd2lkdGgsIHN0ZXAgdmFsdWUgaXMgMSB0byBkbyBhbGwgY3NzRXhwYW5kIHZhbHVlcyxcclxuXHQvLyBvdGhlcndpc2Ugc3RlcCB2YWx1ZSBpcyAyIHRvIHNraXAgb3ZlciBMZWZ0IGFuZCBSaWdodFxyXG5cdGluY2x1ZGVXaWR0aCA9IGluY2x1ZGVXaWR0aCA/IDEgOiAwO1xyXG5cdGZvciAoIDsgaSA8IDQgOyBpICs9IDIgLSBpbmNsdWRlV2lkdGggKSB7XHJcblx0XHR3aGljaCA9IGNzc0V4cGFuZFsgaSBdO1xyXG5cdFx0YXR0cnNbIFwibWFyZ2luXCIgKyB3aGljaCBdID0gYXR0cnNbIFwicGFkZGluZ1wiICsgd2hpY2ggXSA9IHR5cGU7XHJcblx0fVxyXG5cclxuXHRpZiAoIGluY2x1ZGVXaWR0aCApIHtcclxuXHRcdGF0dHJzLm9wYWNpdHkgPSBhdHRycy53aWR0aCA9IHR5cGU7XHJcblx0fVxyXG5cclxuXHRyZXR1cm4gYXR0cnM7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGNyZWF0ZVR3ZWVuKCB2YWx1ZSwgcHJvcCwgYW5pbWF0aW9uICkge1xyXG5cdHZhciB0d2VlbixcclxuXHRcdGNvbGxlY3Rpb24gPSAoIEFuaW1hdGlvbi50d2VlbmVyc1sgcHJvcCBdIHx8IFtdICkuY29uY2F0KCBBbmltYXRpb24udHdlZW5lcnNbIFwiKlwiIF0gKSxcclxuXHRcdGluZGV4ID0gMCxcclxuXHRcdGxlbmd0aCA9IGNvbGxlY3Rpb24ubGVuZ3RoO1xyXG5cdGZvciAoIDsgaW5kZXggPCBsZW5ndGg7IGluZGV4KysgKSB7XHJcblx0XHRpZiAoICggdHdlZW4gPSBjb2xsZWN0aW9uWyBpbmRleCBdLmNhbGwoIGFuaW1hdGlvbiwgcHJvcCwgdmFsdWUgKSApICkge1xyXG5cclxuXHRcdFx0Ly8gV2UncmUgZG9uZSB3aXRoIHRoaXMgcHJvcGVydHlcclxuXHRcdFx0cmV0dXJuIHR3ZWVuO1xyXG5cdFx0fVxyXG5cdH1cclxufVxyXG5cclxuZnVuY3Rpb24gZGVmYXVsdFByZWZpbHRlciggZWxlbSwgcHJvcHMsIG9wdHMgKSB7XHJcblx0LyoganNoaW50IHZhbGlkdGhpczogdHJ1ZSAqL1xyXG5cdHZhciBwcm9wLCB2YWx1ZSwgdG9nZ2xlLCB0d2VlbiwgaG9va3MsIG9sZGZpcmUsIGRpc3BsYXksIGNoZWNrRGlzcGxheSxcclxuXHRcdGFuaW0gPSB0aGlzLFxyXG5cdFx0b3JpZyA9IHt9LFxyXG5cdFx0c3R5bGUgPSBlbGVtLnN0eWxlLFxyXG5cdFx0aGlkZGVuID0gZWxlbS5ub2RlVHlwZSAmJiBpc0hpZGRlbiggZWxlbSApLFxyXG5cdFx0ZGF0YVNob3cgPSBkYXRhUHJpdi5nZXQoIGVsZW0sIFwiZnhzaG93XCIgKTtcclxuXHJcblx0Ly8gSGFuZGxlIHF1ZXVlOiBmYWxzZSBwcm9taXNlc1xyXG5cdGlmICggIW9wdHMucXVldWUgKSB7XHJcblx0XHRob29rcyA9IGpRdWVyeS5fcXVldWVIb29rcyggZWxlbSwgXCJmeFwiICk7XHJcblx0XHRpZiAoIGhvb2tzLnVucXVldWVkID09IG51bGwgKSB7XHJcblx0XHRcdGhvb2tzLnVucXVldWVkID0gMDtcclxuXHRcdFx0b2xkZmlyZSA9IGhvb2tzLmVtcHR5LmZpcmU7XHJcblx0XHRcdGhvb2tzLmVtcHR5LmZpcmUgPSBmdW5jdGlvbigpIHtcclxuXHRcdFx0XHRpZiAoICFob29rcy51bnF1ZXVlZCApIHtcclxuXHRcdFx0XHRcdG9sZGZpcmUoKTtcclxuXHRcdFx0XHR9XHJcblx0XHRcdH07XHJcblx0XHR9XHJcblx0XHRob29rcy51bnF1ZXVlZCsrO1xyXG5cclxuXHRcdGFuaW0uYWx3YXlzKCBmdW5jdGlvbigpIHtcclxuXHJcblx0XHRcdC8vIEVuc3VyZSB0aGUgY29tcGxldGUgaGFuZGxlciBpcyBjYWxsZWQgYmVmb3JlIHRoaXMgY29tcGxldGVzXHJcblx0XHRcdGFuaW0uYWx3YXlzKCBmdW5jdGlvbigpIHtcclxuXHRcdFx0XHRob29rcy51bnF1ZXVlZC0tO1xyXG5cdFx0XHRcdGlmICggIWpRdWVyeS5xdWV1ZSggZWxlbSwgXCJmeFwiICkubGVuZ3RoICkge1xyXG5cdFx0XHRcdFx0aG9va3MuZW1wdHkuZmlyZSgpO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0fSApO1xyXG5cdFx0fSApO1xyXG5cdH1cclxuXHJcblx0Ly8gSGVpZ2h0L3dpZHRoIG92ZXJmbG93IHBhc3NcclxuXHRpZiAoIGVsZW0ubm9kZVR5cGUgPT09IDEgJiYgKCBcImhlaWdodFwiIGluIHByb3BzIHx8IFwid2lkdGhcIiBpbiBwcm9wcyApICkge1xyXG5cclxuXHRcdC8vIE1ha2Ugc3VyZSB0aGF0IG5vdGhpbmcgc25lYWtzIG91dFxyXG5cdFx0Ly8gUmVjb3JkIGFsbCAzIG92ZXJmbG93IGF0dHJpYnV0ZXMgYmVjYXVzZSBJRTktMTAgZG8gbm90XHJcblx0XHQvLyBjaGFuZ2UgdGhlIG92ZXJmbG93IGF0dHJpYnV0ZSB3aGVuIG92ZXJmbG93WCBhbmRcclxuXHRcdC8vIG92ZXJmbG93WSBhcmUgc2V0IHRvIHRoZSBzYW1lIHZhbHVlXHJcblx0XHRvcHRzLm92ZXJmbG93ID0gWyBzdHlsZS5vdmVyZmxvdywgc3R5bGUub3ZlcmZsb3dYLCBzdHlsZS5vdmVyZmxvd1kgXTtcclxuXHJcblx0XHQvLyBTZXQgZGlzcGxheSBwcm9wZXJ0eSB0byBpbmxpbmUtYmxvY2sgZm9yIGhlaWdodC93aWR0aFxyXG5cdFx0Ly8gYW5pbWF0aW9ucyBvbiBpbmxpbmUgZWxlbWVudHMgdGhhdCBhcmUgaGF2aW5nIHdpZHRoL2hlaWdodCBhbmltYXRlZFxyXG5cdFx0ZGlzcGxheSA9IGpRdWVyeS5jc3MoIGVsZW0sIFwiZGlzcGxheVwiICk7XHJcblxyXG5cdFx0Ly8gVGVzdCBkZWZhdWx0IGRpc3BsYXkgaWYgZGlzcGxheSBpcyBjdXJyZW50bHkgXCJub25lXCJcclxuXHRcdGNoZWNrRGlzcGxheSA9IGRpc3BsYXkgPT09IFwibm9uZVwiID9cclxuXHRcdFx0ZGF0YVByaXYuZ2V0KCBlbGVtLCBcIm9sZGRpc3BsYXlcIiApIHx8IGRlZmF1bHREaXNwbGF5KCBlbGVtLm5vZGVOYW1lICkgOiBkaXNwbGF5O1xyXG5cclxuXHRcdGlmICggY2hlY2tEaXNwbGF5ID09PSBcImlubGluZVwiICYmIGpRdWVyeS5jc3MoIGVsZW0sIFwiZmxvYXRcIiApID09PSBcIm5vbmVcIiApIHtcclxuXHRcdFx0c3R5bGUuZGlzcGxheSA9IFwiaW5saW5lLWJsb2NrXCI7XHJcblx0XHR9XHJcblx0fVxyXG5cclxuXHRpZiAoIG9wdHMub3ZlcmZsb3cgKSB7XHJcblx0XHRzdHlsZS5vdmVyZmxvdyA9IFwiaGlkZGVuXCI7XHJcblx0XHRhbmltLmFsd2F5cyggZnVuY3Rpb24oKSB7XHJcblx0XHRcdHN0eWxlLm92ZXJmbG93ID0gb3B0cy5vdmVyZmxvd1sgMCBdO1xyXG5cdFx0XHRzdHlsZS5vdmVyZmxvd1ggPSBvcHRzLm92ZXJmbG93WyAxIF07XHJcblx0XHRcdHN0eWxlLm92ZXJmbG93WSA9IG9wdHMub3ZlcmZsb3dbIDIgXTtcclxuXHRcdH0gKTtcclxuXHR9XHJcblxyXG5cdC8vIHNob3cvaGlkZSBwYXNzXHJcblx0Zm9yICggcHJvcCBpbiBwcm9wcyApIHtcclxuXHRcdHZhbHVlID0gcHJvcHNbIHByb3AgXTtcclxuXHRcdGlmICggcmZ4dHlwZXMuZXhlYyggdmFsdWUgKSApIHtcclxuXHRcdFx0ZGVsZXRlIHByb3BzWyBwcm9wIF07XHJcblx0XHRcdHRvZ2dsZSA9IHRvZ2dsZSB8fCB2YWx1ZSA9PT0gXCJ0b2dnbGVcIjtcclxuXHRcdFx0aWYgKCB2YWx1ZSA9PT0gKCBoaWRkZW4gPyBcImhpZGVcIiA6IFwic2hvd1wiICkgKSB7XHJcblxyXG5cdFx0XHRcdC8vIElmIHRoZXJlIGlzIGRhdGFTaG93IGxlZnQgb3ZlciBmcm9tIGEgc3RvcHBlZCBoaWRlIG9yIHNob3dcclxuXHRcdFx0XHQvLyBhbmQgd2UgYXJlIGdvaW5nIHRvIHByb2NlZWQgd2l0aCBzaG93LCB3ZSBzaG91bGQgcHJldGVuZCB0byBiZSBoaWRkZW5cclxuXHRcdFx0XHRpZiAoIHZhbHVlID09PSBcInNob3dcIiAmJiBkYXRhU2hvdyAmJiBkYXRhU2hvd1sgcHJvcCBdICE9PSB1bmRlZmluZWQgKSB7XHJcblx0XHRcdFx0XHRoaWRkZW4gPSB0cnVlO1xyXG5cdFx0XHRcdH0gZWxzZSB7XHJcblx0XHRcdFx0XHRjb250aW51ZTtcclxuXHRcdFx0XHR9XHJcblx0XHRcdH1cclxuXHRcdFx0b3JpZ1sgcHJvcCBdID0gZGF0YVNob3cgJiYgZGF0YVNob3dbIHByb3AgXSB8fCBqUXVlcnkuc3R5bGUoIGVsZW0sIHByb3AgKTtcclxuXHJcblx0XHQvLyBBbnkgbm9uLWZ4IHZhbHVlIHN0b3BzIHVzIGZyb20gcmVzdG9yaW5nIHRoZSBvcmlnaW5hbCBkaXNwbGF5IHZhbHVlXHJcblx0XHR9IGVsc2Uge1xyXG5cdFx0XHRkaXNwbGF5ID0gdW5kZWZpbmVkO1xyXG5cdFx0fVxyXG5cdH1cclxuXHJcblx0aWYgKCAhalF1ZXJ5LmlzRW1wdHlPYmplY3QoIG9yaWcgKSApIHtcclxuXHRcdGlmICggZGF0YVNob3cgKSB7XHJcblx0XHRcdGlmICggXCJoaWRkZW5cIiBpbiBkYXRhU2hvdyApIHtcclxuXHRcdFx0XHRoaWRkZW4gPSBkYXRhU2hvdy5oaWRkZW47XHJcblx0XHRcdH1cclxuXHRcdH0gZWxzZSB7XHJcblx0XHRcdGRhdGFTaG93ID0gZGF0YVByaXYuYWNjZXNzKCBlbGVtLCBcImZ4c2hvd1wiLCB7fSApO1xyXG5cdFx0fVxyXG5cclxuXHRcdC8vIFN0b3JlIHN0YXRlIGlmIGl0cyB0b2dnbGUgLSBlbmFibGVzIC5zdG9wKCkudG9nZ2xlKCkgdG8gXCJyZXZlcnNlXCJcclxuXHRcdGlmICggdG9nZ2xlICkge1xyXG5cdFx0XHRkYXRhU2hvdy5oaWRkZW4gPSAhaGlkZGVuO1xyXG5cdFx0fVxyXG5cdFx0aWYgKCBoaWRkZW4gKSB7XHJcblx0XHRcdGpRdWVyeSggZWxlbSApLnNob3coKTtcclxuXHRcdH0gZWxzZSB7XHJcblx0XHRcdGFuaW0uZG9uZSggZnVuY3Rpb24oKSB7XHJcblx0XHRcdFx0alF1ZXJ5KCBlbGVtICkuaGlkZSgpO1xyXG5cdFx0XHR9ICk7XHJcblx0XHR9XHJcblx0XHRhbmltLmRvbmUoIGZ1bmN0aW9uKCkge1xyXG5cdFx0XHR2YXIgcHJvcDtcclxuXHJcblx0XHRcdGRhdGFQcml2LnJlbW92ZSggZWxlbSwgXCJmeHNob3dcIiApO1xyXG5cdFx0XHRmb3IgKCBwcm9wIGluIG9yaWcgKSB7XHJcblx0XHRcdFx0alF1ZXJ5LnN0eWxlKCBlbGVtLCBwcm9wLCBvcmlnWyBwcm9wIF0gKTtcclxuXHRcdFx0fVxyXG5cdFx0fSApO1xyXG5cdFx0Zm9yICggcHJvcCBpbiBvcmlnICkge1xyXG5cdFx0XHR0d2VlbiA9IGNyZWF0ZVR3ZWVuKCBoaWRkZW4gPyBkYXRhU2hvd1sgcHJvcCBdIDogMCwgcHJvcCwgYW5pbSApO1xyXG5cclxuXHRcdFx0aWYgKCAhKCBwcm9wIGluIGRhdGFTaG93ICkgKSB7XHJcblx0XHRcdFx0ZGF0YVNob3dbIHByb3AgXSA9IHR3ZWVuLnN0YXJ0O1xyXG5cdFx0XHRcdGlmICggaGlkZGVuICkge1xyXG5cdFx0XHRcdFx0dHdlZW4uZW5kID0gdHdlZW4uc3RhcnQ7XHJcblx0XHRcdFx0XHR0d2Vlbi5zdGFydCA9IHByb3AgPT09IFwid2lkdGhcIiB8fCBwcm9wID09PSBcImhlaWdodFwiID8gMSA6IDA7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9XHJcblx0XHR9XHJcblxyXG5cdC8vIElmIHRoaXMgaXMgYSBub29wIGxpa2UgLmhpZGUoKS5oaWRlKCksIHJlc3RvcmUgYW4gb3ZlcndyaXR0ZW4gZGlzcGxheSB2YWx1ZVxyXG5cdH0gZWxzZSBpZiAoICggZGlzcGxheSA9PT0gXCJub25lXCIgPyBkZWZhdWx0RGlzcGxheSggZWxlbS5ub2RlTmFtZSApIDogZGlzcGxheSApID09PSBcImlubGluZVwiICkge1xyXG5cdFx0c3R5bGUuZGlzcGxheSA9IGRpc3BsYXk7XHJcblx0fVxyXG59XHJcblxyXG5mdW5jdGlvbiBwcm9wRmlsdGVyKCBwcm9wcywgc3BlY2lhbEVhc2luZyApIHtcclxuXHR2YXIgaW5kZXgsIG5hbWUsIGVhc2luZywgdmFsdWUsIGhvb2tzO1xyXG5cclxuXHQvLyBjYW1lbENhc2UsIHNwZWNpYWxFYXNpbmcgYW5kIGV4cGFuZCBjc3NIb29rIHBhc3NcclxuXHRmb3IgKCBpbmRleCBpbiBwcm9wcyApIHtcclxuXHRcdG5hbWUgPSBqUXVlcnkuY2FtZWxDYXNlKCBpbmRleCApO1xyXG5cdFx0ZWFzaW5nID0gc3BlY2lhbEVhc2luZ1sgbmFtZSBdO1xyXG5cdFx0dmFsdWUgPSBwcm9wc1sgaW5kZXggXTtcclxuXHRcdGlmICggalF1ZXJ5LmlzQXJyYXkoIHZhbHVlICkgKSB7XHJcblx0XHRcdGVhc2luZyA9IHZhbHVlWyAxIF07XHJcblx0XHRcdHZhbHVlID0gcHJvcHNbIGluZGV4IF0gPSB2YWx1ZVsgMCBdO1xyXG5cdFx0fVxyXG5cclxuXHRcdGlmICggaW5kZXggIT09IG5hbWUgKSB7XHJcblx0XHRcdHByb3BzWyBuYW1lIF0gPSB2YWx1ZTtcclxuXHRcdFx0ZGVsZXRlIHByb3BzWyBpbmRleCBdO1xyXG5cdFx0fVxyXG5cclxuXHRcdGhvb2tzID0galF1ZXJ5LmNzc0hvb2tzWyBuYW1lIF07XHJcblx0XHRpZiAoIGhvb2tzICYmIFwiZXhwYW5kXCIgaW4gaG9va3MgKSB7XHJcblx0XHRcdHZhbHVlID0gaG9va3MuZXhwYW5kKCB2YWx1ZSApO1xyXG5cdFx0XHRkZWxldGUgcHJvcHNbIG5hbWUgXTtcclxuXHJcblx0XHRcdC8vIE5vdCBxdWl0ZSAkLmV4dGVuZCwgdGhpcyB3b24ndCBvdmVyd3JpdGUgZXhpc3Rpbmcga2V5cy5cclxuXHRcdFx0Ly8gUmV1c2luZyAnaW5kZXgnIGJlY2F1c2Ugd2UgaGF2ZSB0aGUgY29ycmVjdCBcIm5hbWVcIlxyXG5cdFx0XHRmb3IgKCBpbmRleCBpbiB2YWx1ZSApIHtcclxuXHRcdFx0XHRpZiAoICEoIGluZGV4IGluIHByb3BzICkgKSB7XHJcblx0XHRcdFx0XHRwcm9wc1sgaW5kZXggXSA9IHZhbHVlWyBpbmRleCBdO1xyXG5cdFx0XHRcdFx0c3BlY2lhbEVhc2luZ1sgaW5kZXggXSA9IGVhc2luZztcclxuXHRcdFx0XHR9XHJcblx0XHRcdH1cclxuXHRcdH0gZWxzZSB7XHJcblx0XHRcdHNwZWNpYWxFYXNpbmdbIG5hbWUgXSA9IGVhc2luZztcclxuXHRcdH1cclxuXHR9XHJcbn1cclxuXHJcbmZ1bmN0aW9uIEFuaW1hdGlvbiggZWxlbSwgcHJvcGVydGllcywgb3B0aW9ucyApIHtcclxuXHR2YXIgcmVzdWx0LFxyXG5cdFx0c3RvcHBlZCxcclxuXHRcdGluZGV4ID0gMCxcclxuXHRcdGxlbmd0aCA9IEFuaW1hdGlvbi5wcmVmaWx0ZXJzLmxlbmd0aCxcclxuXHRcdGRlZmVycmVkID0galF1ZXJ5LkRlZmVycmVkKCkuYWx3YXlzKCBmdW5jdGlvbigpIHtcclxuXHJcblx0XHRcdC8vIERvbid0IG1hdGNoIGVsZW0gaW4gdGhlIDphbmltYXRlZCBzZWxlY3RvclxyXG5cdFx0XHRkZWxldGUgdGljay5lbGVtO1xyXG5cdFx0fSApLFxyXG5cdFx0dGljayA9IGZ1bmN0aW9uKCkge1xyXG5cdFx0XHRpZiAoIHN0b3BwZWQgKSB7XHJcblx0XHRcdFx0cmV0dXJuIGZhbHNlO1xyXG5cdFx0XHR9XHJcblx0XHRcdHZhciBjdXJyZW50VGltZSA9IGZ4Tm93IHx8IGNyZWF0ZUZ4Tm93KCksXHJcblx0XHRcdFx0cmVtYWluaW5nID0gTWF0aC5tYXgoIDAsIGFuaW1hdGlvbi5zdGFydFRpbWUgKyBhbmltYXRpb24uZHVyYXRpb24gLSBjdXJyZW50VGltZSApLFxyXG5cclxuXHRcdFx0XHQvLyBTdXBwb3J0OiBBbmRyb2lkIDIuM1xyXG5cdFx0XHRcdC8vIEFyY2hhaWMgY3Jhc2ggYnVnIHdvbid0IGFsbG93IHVzIHRvIHVzZSBgMSAtICggMC41IHx8IDAgKWAgKCMxMjQ5NylcclxuXHRcdFx0XHR0ZW1wID0gcmVtYWluaW5nIC8gYW5pbWF0aW9uLmR1cmF0aW9uIHx8IDAsXHJcblx0XHRcdFx0cGVyY2VudCA9IDEgLSB0ZW1wLFxyXG5cdFx0XHRcdGluZGV4ID0gMCxcclxuXHRcdFx0XHRsZW5ndGggPSBhbmltYXRpb24udHdlZW5zLmxlbmd0aDtcclxuXHJcblx0XHRcdGZvciAoIDsgaW5kZXggPCBsZW5ndGggOyBpbmRleCsrICkge1xyXG5cdFx0XHRcdGFuaW1hdGlvbi50d2VlbnNbIGluZGV4IF0ucnVuKCBwZXJjZW50ICk7XHJcblx0XHRcdH1cclxuXHJcblx0XHRcdGRlZmVycmVkLm5vdGlmeVdpdGgoIGVsZW0sIFsgYW5pbWF0aW9uLCBwZXJjZW50LCByZW1haW5pbmcgXSApO1xyXG5cclxuXHRcdFx0aWYgKCBwZXJjZW50IDwgMSAmJiBsZW5ndGggKSB7XHJcblx0XHRcdFx0cmV0dXJuIHJlbWFpbmluZztcclxuXHRcdFx0fSBlbHNlIHtcclxuXHRcdFx0XHRkZWZlcnJlZC5yZXNvbHZlV2l0aCggZWxlbSwgWyBhbmltYXRpb24gXSApO1xyXG5cdFx0XHRcdHJldHVybiBmYWxzZTtcclxuXHRcdFx0fVxyXG5cdFx0fSxcclxuXHRcdGFuaW1hdGlvbiA9IGRlZmVycmVkLnByb21pc2UoIHtcclxuXHRcdFx0ZWxlbTogZWxlbSxcclxuXHRcdFx0cHJvcHM6IGpRdWVyeS5leHRlbmQoIHt9LCBwcm9wZXJ0aWVzICksXHJcblx0XHRcdG9wdHM6IGpRdWVyeS5leHRlbmQoIHRydWUsIHtcclxuXHRcdFx0XHRzcGVjaWFsRWFzaW5nOiB7fSxcclxuXHRcdFx0XHRlYXNpbmc6IGpRdWVyeS5lYXNpbmcuX2RlZmF1bHRcclxuXHRcdFx0fSwgb3B0aW9ucyApLFxyXG5cdFx0XHRvcmlnaW5hbFByb3BlcnRpZXM6IHByb3BlcnRpZXMsXHJcblx0XHRcdG9yaWdpbmFsT3B0aW9uczogb3B0aW9ucyxcclxuXHRcdFx0c3RhcnRUaW1lOiBmeE5vdyB8fCBjcmVhdGVGeE5vdygpLFxyXG5cdFx0XHRkdXJhdGlvbjogb3B0aW9ucy5kdXJhdGlvbixcclxuXHRcdFx0dHdlZW5zOiBbXSxcclxuXHRcdFx0Y3JlYXRlVHdlZW46IGZ1bmN0aW9uKCBwcm9wLCBlbmQgKSB7XHJcblx0XHRcdFx0dmFyIHR3ZWVuID0galF1ZXJ5LlR3ZWVuKCBlbGVtLCBhbmltYXRpb24ub3B0cywgcHJvcCwgZW5kLFxyXG5cdFx0XHRcdFx0XHRhbmltYXRpb24ub3B0cy5zcGVjaWFsRWFzaW5nWyBwcm9wIF0gfHwgYW5pbWF0aW9uLm9wdHMuZWFzaW5nICk7XHJcblx0XHRcdFx0YW5pbWF0aW9uLnR3ZWVucy5wdXNoKCB0d2VlbiApO1xyXG5cdFx0XHRcdHJldHVybiB0d2VlbjtcclxuXHRcdFx0fSxcclxuXHRcdFx0c3RvcDogZnVuY3Rpb24oIGdvdG9FbmQgKSB7XHJcblx0XHRcdFx0dmFyIGluZGV4ID0gMCxcclxuXHJcblx0XHRcdFx0XHQvLyBJZiB3ZSBhcmUgZ29pbmcgdG8gdGhlIGVuZCwgd2Ugd2FudCB0byBydW4gYWxsIHRoZSB0d2VlbnNcclxuXHRcdFx0XHRcdC8vIG90aGVyd2lzZSB3ZSBza2lwIHRoaXMgcGFydFxyXG5cdFx0XHRcdFx0bGVuZ3RoID0gZ290b0VuZCA/IGFuaW1hdGlvbi50d2VlbnMubGVuZ3RoIDogMDtcclxuXHRcdFx0XHRpZiAoIHN0b3BwZWQgKSB7XHJcblx0XHRcdFx0XHRyZXR1cm4gdGhpcztcclxuXHRcdFx0XHR9XHJcblx0XHRcdFx0c3RvcHBlZCA9IHRydWU7XHJcblx0XHRcdFx0Zm9yICggOyBpbmRleCA8IGxlbmd0aCA7IGluZGV4KysgKSB7XHJcblx0XHRcdFx0XHRhbmltYXRpb24udHdlZW5zWyBpbmRleCBdLnJ1biggMSApO1xyXG5cdFx0XHRcdH1cclxuXHJcblx0XHRcdFx0Ly8gUmVzb2x2ZSB3aGVuIHdlIHBsYXllZCB0aGUgbGFzdCBmcmFtZTsgb3RoZXJ3aXNlLCByZWplY3RcclxuXHRcdFx0XHRpZiAoIGdvdG9FbmQgKSB7XHJcblx0XHRcdFx0XHRkZWZlcnJlZC5ub3RpZnlXaXRoKCBlbGVtLCBbIGFuaW1hdGlvbiwgMSwgMCBdICk7XHJcblx0XHRcdFx0XHRkZWZlcnJlZC5yZXNvbHZlV2l0aCggZWxlbSwgWyBhbmltYXRpb24sIGdvdG9FbmQgXSApO1xyXG5cdFx0XHRcdH0gZWxzZSB7XHJcblx0XHRcdFx0XHRkZWZlcnJlZC5yZWplY3RXaXRoKCBlbGVtLCBbIGFuaW1hdGlvbiwgZ290b0VuZCBdICk7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHRcdHJldHVybiB0aGlzO1xyXG5cdFx0XHR9XHJcblx0XHR9ICksXHJcblx0XHRwcm9wcyA9IGFuaW1hdGlvbi5wcm9wcztcclxuXHJcblx0cHJvcEZpbHRlciggcHJvcHMsIGFuaW1hdGlvbi5vcHRzLnNwZWNpYWxFYXNpbmcgKTtcclxuXHJcblx0Zm9yICggOyBpbmRleCA8IGxlbmd0aCA7IGluZGV4KysgKSB7XHJcblx0XHRyZXN1bHQgPSBBbmltYXRpb24ucHJlZmlsdGVyc1sgaW5kZXggXS5jYWxsKCBhbmltYXRpb24sIGVsZW0sIHByb3BzLCBhbmltYXRpb24ub3B0cyApO1xyXG5cdFx0aWYgKCByZXN1bHQgKSB7XHJcblx0XHRcdGlmICggalF1ZXJ5LmlzRnVuY3Rpb24oIHJlc3VsdC5zdG9wICkgKSB7XHJcblx0XHRcdFx0alF1ZXJ5Ll9xdWV1ZUhvb2tzKCBhbmltYXRpb24uZWxlbSwgYW5pbWF0aW9uLm9wdHMucXVldWUgKS5zdG9wID1cclxuXHRcdFx0XHRcdGpRdWVyeS5wcm94eSggcmVzdWx0LnN0b3AsIHJlc3VsdCApO1xyXG5cdFx0XHR9XHJcblx0XHRcdHJldHVybiByZXN1bHQ7XHJcblx0XHR9XHJcblx0fVxyXG5cclxuXHRqUXVlcnkubWFwKCBwcm9wcywgY3JlYXRlVHdlZW4sIGFuaW1hdGlvbiApO1xyXG5cclxuXHRpZiAoIGpRdWVyeS5pc0Z1bmN0aW9uKCBhbmltYXRpb24ub3B0cy5zdGFydCApICkge1xyXG5cdFx0YW5pbWF0aW9uLm9wdHMuc3RhcnQuY2FsbCggZWxlbSwgYW5pbWF0aW9uICk7XHJcblx0fVxyXG5cclxuXHRqUXVlcnkuZngudGltZXIoXHJcblx0XHRqUXVlcnkuZXh0ZW5kKCB0aWNrLCB7XHJcblx0XHRcdGVsZW06IGVsZW0sXHJcblx0XHRcdGFuaW06IGFuaW1hdGlvbixcclxuXHRcdFx0cXVldWU6IGFuaW1hdGlvbi5vcHRzLnF1ZXVlXHJcblx0XHR9IClcclxuXHQpO1xyXG5cclxuXHQvLyBhdHRhY2ggY2FsbGJhY2tzIGZyb20gb3B0aW9uc1xyXG5cdHJldHVybiBhbmltYXRpb24ucHJvZ3Jlc3MoIGFuaW1hdGlvbi5vcHRzLnByb2dyZXNzIClcclxuXHRcdC5kb25lKCBhbmltYXRpb24ub3B0cy5kb25lLCBhbmltYXRpb24ub3B0cy5jb21wbGV0ZSApXHJcblx0XHQuZmFpbCggYW5pbWF0aW9uLm9wdHMuZmFpbCApXHJcblx0XHQuYWx3YXlzKCBhbmltYXRpb24ub3B0cy5hbHdheXMgKTtcclxufVxyXG5cclxualF1ZXJ5LkFuaW1hdGlvbiA9IGpRdWVyeS5leHRlbmQoIEFuaW1hdGlvbiwge1xyXG5cdHR3ZWVuZXJzOiB7XHJcblx0XHRcIipcIjogWyBmdW5jdGlvbiggcHJvcCwgdmFsdWUgKSB7XHJcblx0XHRcdHZhciB0d2VlbiA9IHRoaXMuY3JlYXRlVHdlZW4oIHByb3AsIHZhbHVlICk7XHJcblx0XHRcdGFkanVzdENTUyggdHdlZW4uZWxlbSwgcHJvcCwgcmNzc051bS5leGVjKCB2YWx1ZSApLCB0d2VlbiApO1xyXG5cdFx0XHRyZXR1cm4gdHdlZW47XHJcblx0XHR9IF1cclxuXHR9LFxyXG5cclxuXHR0d2VlbmVyOiBmdW5jdGlvbiggcHJvcHMsIGNhbGxiYWNrICkge1xyXG5cdFx0aWYgKCBqUXVlcnkuaXNGdW5jdGlvbiggcHJvcHMgKSApIHtcclxuXHRcdFx0Y2FsbGJhY2sgPSBwcm9wcztcclxuXHRcdFx0cHJvcHMgPSBbIFwiKlwiIF07XHJcblx0XHR9IGVsc2Uge1xyXG5cdFx0XHRwcm9wcyA9IHByb3BzLm1hdGNoKCBybm90d2hpdGUgKTtcclxuXHRcdH1cclxuXHJcblx0XHR2YXIgcHJvcCxcclxuXHRcdFx0aW5kZXggPSAwLFxyXG5cdFx0XHRsZW5ndGggPSBwcm9wcy5sZW5ndGg7XHJcblxyXG5cdFx0Zm9yICggOyBpbmRleCA8IGxlbmd0aCA7IGluZGV4KysgKSB7XHJcblx0XHRcdHByb3AgPSBwcm9wc1sgaW5kZXggXTtcclxuXHRcdFx0QW5pbWF0aW9uLnR3ZWVuZXJzWyBwcm9wIF0gPSBBbmltYXRpb24udHdlZW5lcnNbIHByb3AgXSB8fCBbXTtcclxuXHRcdFx0QW5pbWF0aW9uLnR3ZWVuZXJzWyBwcm9wIF0udW5zaGlmdCggY2FsbGJhY2sgKTtcclxuXHRcdH1cclxuXHR9LFxyXG5cclxuXHRwcmVmaWx0ZXJzOiBbIGRlZmF1bHRQcmVmaWx0ZXIgXSxcclxuXHJcblx0cHJlZmlsdGVyOiBmdW5jdGlvbiggY2FsbGJhY2ssIHByZXBlbmQgKSB7XHJcblx0XHRpZiAoIHByZXBlbmQgKSB7XHJcblx0XHRcdEFuaW1hdGlvbi5wcmVmaWx0ZXJzLnVuc2hpZnQoIGNhbGxiYWNrICk7XHJcblx0XHR9IGVsc2Uge1xyXG5cdFx0XHRBbmltYXRpb24ucHJlZmlsdGVycy5wdXNoKCBjYWxsYmFjayApO1xyXG5cdFx0fVxyXG5cdH1cclxufSApO1xyXG5cclxualF1ZXJ5LnNwZWVkID0gZnVuY3Rpb24oIHNwZWVkLCBlYXNpbmcsIGZuICkge1xyXG5cdHZhciBvcHQgPSBzcGVlZCAmJiB0eXBlb2Ygc3BlZWQgPT09IFwib2JqZWN0XCIgPyBqUXVlcnkuZXh0ZW5kKCB7fSwgc3BlZWQgKSA6IHtcclxuXHRcdGNvbXBsZXRlOiBmbiB8fCAhZm4gJiYgZWFzaW5nIHx8XHJcblx0XHRcdGpRdWVyeS5pc0Z1bmN0aW9uKCBzcGVlZCApICYmIHNwZWVkLFxyXG5cdFx0ZHVyYXRpb246IHNwZWVkLFxyXG5cdFx0ZWFzaW5nOiBmbiAmJiBlYXNpbmcgfHwgZWFzaW5nICYmICFqUXVlcnkuaXNGdW5jdGlvbiggZWFzaW5nICkgJiYgZWFzaW5nXHJcblx0fTtcclxuXHJcblx0b3B0LmR1cmF0aW9uID0galF1ZXJ5LmZ4Lm9mZiA/IDAgOiB0eXBlb2Ygb3B0LmR1cmF0aW9uID09PSBcIm51bWJlclwiID9cclxuXHRcdG9wdC5kdXJhdGlvbiA6IG9wdC5kdXJhdGlvbiBpbiBqUXVlcnkuZnguc3BlZWRzID9cclxuXHRcdFx0alF1ZXJ5LmZ4LnNwZWVkc1sgb3B0LmR1cmF0aW9uIF0gOiBqUXVlcnkuZnguc3BlZWRzLl9kZWZhdWx0O1xyXG5cclxuXHQvLyBOb3JtYWxpemUgb3B0LnF1ZXVlIC0gdHJ1ZS91bmRlZmluZWQvbnVsbCAtPiBcImZ4XCJcclxuXHRpZiAoIG9wdC5xdWV1ZSA9PSBudWxsIHx8IG9wdC5xdWV1ZSA9PT0gdHJ1ZSApIHtcclxuXHRcdG9wdC5xdWV1ZSA9IFwiZnhcIjtcclxuXHR9XHJcblxyXG5cdC8vIFF1ZXVlaW5nXHJcblx0b3B0Lm9sZCA9IG9wdC5jb21wbGV0ZTtcclxuXHJcblx0b3B0LmNvbXBsZXRlID0gZnVuY3Rpb24oKSB7XHJcblx0XHRpZiAoIGpRdWVyeS5pc0Z1bmN0aW9uKCBvcHQub2xkICkgKSB7XHJcblx0XHRcdG9wdC5vbGQuY2FsbCggdGhpcyApO1xyXG5cdFx0fVxyXG5cclxuXHRcdGlmICggb3B0LnF1ZXVlICkge1xyXG5cdFx0XHRqUXVlcnkuZGVxdWV1ZSggdGhpcywgb3B0LnF1ZXVlICk7XHJcblx0XHR9XHJcblx0fTtcclxuXHJcblx0cmV0dXJuIG9wdDtcclxufTtcclxuXHJcbmpRdWVyeS5mbi5leHRlbmQoIHtcclxuXHRmYWRlVG86IGZ1bmN0aW9uKCBzcGVlZCwgdG8sIGVhc2luZywgY2FsbGJhY2sgKSB7XHJcblxyXG5cdFx0Ly8gU2hvdyBhbnkgaGlkZGVuIGVsZW1lbnRzIGFmdGVyIHNldHRpbmcgb3BhY2l0eSB0byAwXHJcblx0XHRyZXR1cm4gdGhpcy5maWx0ZXIoIGlzSGlkZGVuICkuY3NzKCBcIm9wYWNpdHlcIiwgMCApLnNob3coKVxyXG5cclxuXHRcdFx0Ly8gQW5pbWF0ZSB0byB0aGUgdmFsdWUgc3BlY2lmaWVkXHJcblx0XHRcdC5lbmQoKS5hbmltYXRlKCB7IG9wYWNpdHk6IHRvIH0sIHNwZWVkLCBlYXNpbmcsIGNhbGxiYWNrICk7XHJcblx0fSxcclxuXHRhbmltYXRlOiBmdW5jdGlvbiggcHJvcCwgc3BlZWQsIGVhc2luZywgY2FsbGJhY2sgKSB7XHJcblx0XHR2YXIgZW1wdHkgPSBqUXVlcnkuaXNFbXB0eU9iamVjdCggcHJvcCApLFxyXG5cdFx0XHRvcHRhbGwgPSBqUXVlcnkuc3BlZWQoIHNwZWVkLCBlYXNpbmcsIGNhbGxiYWNrICksXHJcblx0XHRcdGRvQW5pbWF0aW9uID0gZnVuY3Rpb24oKSB7XHJcblxyXG5cdFx0XHRcdC8vIE9wZXJhdGUgb24gYSBjb3B5IG9mIHByb3Agc28gcGVyLXByb3BlcnR5IGVhc2luZyB3b24ndCBiZSBsb3N0XHJcblx0XHRcdFx0dmFyIGFuaW0gPSBBbmltYXRpb24oIHRoaXMsIGpRdWVyeS5leHRlbmQoIHt9LCBwcm9wICksIG9wdGFsbCApO1xyXG5cclxuXHRcdFx0XHQvLyBFbXB0eSBhbmltYXRpb25zLCBvciBmaW5pc2hpbmcgcmVzb2x2ZXMgaW1tZWRpYXRlbHlcclxuXHRcdFx0XHRpZiAoIGVtcHR5IHx8IGRhdGFQcml2LmdldCggdGhpcywgXCJmaW5pc2hcIiApICkge1xyXG5cdFx0XHRcdFx0YW5pbS5zdG9wKCB0cnVlICk7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9O1xyXG5cdFx0XHRkb0FuaW1hdGlvbi5maW5pc2ggPSBkb0FuaW1hdGlvbjtcclxuXHJcblx0XHRyZXR1cm4gZW1wdHkgfHwgb3B0YWxsLnF1ZXVlID09PSBmYWxzZSA/XHJcblx0XHRcdHRoaXMuZWFjaCggZG9BbmltYXRpb24gKSA6XHJcblx0XHRcdHRoaXMucXVldWUoIG9wdGFsbC5xdWV1ZSwgZG9BbmltYXRpb24gKTtcclxuXHR9LFxyXG5cdHN0b3A6IGZ1bmN0aW9uKCB0eXBlLCBjbGVhclF1ZXVlLCBnb3RvRW5kICkge1xyXG5cdFx0dmFyIHN0b3BRdWV1ZSA9IGZ1bmN0aW9uKCBob29rcyApIHtcclxuXHRcdFx0dmFyIHN0b3AgPSBob29rcy5zdG9wO1xyXG5cdFx0XHRkZWxldGUgaG9va3Muc3RvcDtcclxuXHRcdFx0c3RvcCggZ290b0VuZCApO1xyXG5cdFx0fTtcclxuXHJcblx0XHRpZiAoIHR5cGVvZiB0eXBlICE9PSBcInN0cmluZ1wiICkge1xyXG5cdFx0XHRnb3RvRW5kID0gY2xlYXJRdWV1ZTtcclxuXHRcdFx0Y2xlYXJRdWV1ZSA9IHR5cGU7XHJcblx0XHRcdHR5cGUgPSB1bmRlZmluZWQ7XHJcblx0XHR9XHJcblx0XHRpZiAoIGNsZWFyUXVldWUgJiYgdHlwZSAhPT0gZmFsc2UgKSB7XHJcblx0XHRcdHRoaXMucXVldWUoIHR5cGUgfHwgXCJmeFwiLCBbXSApO1xyXG5cdFx0fVxyXG5cclxuXHRcdHJldHVybiB0aGlzLmVhY2goIGZ1bmN0aW9uKCkge1xyXG5cdFx0XHR2YXIgZGVxdWV1ZSA9IHRydWUsXHJcblx0XHRcdFx0aW5kZXggPSB0eXBlICE9IG51bGwgJiYgdHlwZSArIFwicXVldWVIb29rc1wiLFxyXG5cdFx0XHRcdHRpbWVycyA9IGpRdWVyeS50aW1lcnMsXHJcblx0XHRcdFx0ZGF0YSA9IGRhdGFQcml2LmdldCggdGhpcyApO1xyXG5cclxuXHRcdFx0aWYgKCBpbmRleCApIHtcclxuXHRcdFx0XHRpZiAoIGRhdGFbIGluZGV4IF0gJiYgZGF0YVsgaW5kZXggXS5zdG9wICkge1xyXG5cdFx0XHRcdFx0c3RvcFF1ZXVlKCBkYXRhWyBpbmRleCBdICk7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9IGVsc2Uge1xyXG5cdFx0XHRcdGZvciAoIGluZGV4IGluIGRhdGEgKSB7XHJcblx0XHRcdFx0XHRpZiAoIGRhdGFbIGluZGV4IF0gJiYgZGF0YVsgaW5kZXggXS5zdG9wICYmIHJydW4udGVzdCggaW5kZXggKSApIHtcclxuXHRcdFx0XHRcdFx0c3RvcFF1ZXVlKCBkYXRhWyBpbmRleCBdICk7XHJcblx0XHRcdFx0XHR9XHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9XHJcblxyXG5cdFx0XHRmb3IgKCBpbmRleCA9IHRpbWVycy5sZW5ndGg7IGluZGV4LS07ICkge1xyXG5cdFx0XHRcdGlmICggdGltZXJzWyBpbmRleCBdLmVsZW0gPT09IHRoaXMgJiZcclxuXHRcdFx0XHRcdCggdHlwZSA9PSBudWxsIHx8IHRpbWVyc1sgaW5kZXggXS5xdWV1ZSA9PT0gdHlwZSApICkge1xyXG5cclxuXHRcdFx0XHRcdHRpbWVyc1sgaW5kZXggXS5hbmltLnN0b3AoIGdvdG9FbmQgKTtcclxuXHRcdFx0XHRcdGRlcXVldWUgPSBmYWxzZTtcclxuXHRcdFx0XHRcdHRpbWVycy5zcGxpY2UoIGluZGV4LCAxICk7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9XHJcblxyXG5cdFx0XHQvLyBTdGFydCB0aGUgbmV4dCBpbiB0aGUgcXVldWUgaWYgdGhlIGxhc3Qgc3RlcCB3YXNuJ3QgZm9yY2VkLlxyXG5cdFx0XHQvLyBUaW1lcnMgY3VycmVudGx5IHdpbGwgY2FsbCB0aGVpciBjb21wbGV0ZSBjYWxsYmFja3MsIHdoaWNoXHJcblx0XHRcdC8vIHdpbGwgZGVxdWV1ZSBidXQgb25seSBpZiB0aGV5IHdlcmUgZ290b0VuZC5cclxuXHRcdFx0aWYgKCBkZXF1ZXVlIHx8ICFnb3RvRW5kICkge1xyXG5cdFx0XHRcdGpRdWVyeS5kZXF1ZXVlKCB0aGlzLCB0eXBlICk7XHJcblx0XHRcdH1cclxuXHRcdH0gKTtcclxuXHR9LFxyXG5cdGZpbmlzaDogZnVuY3Rpb24oIHR5cGUgKSB7XHJcblx0XHRpZiAoIHR5cGUgIT09IGZhbHNlICkge1xyXG5cdFx0XHR0eXBlID0gdHlwZSB8fCBcImZ4XCI7XHJcblx0XHR9XHJcblx0XHRyZXR1cm4gdGhpcy5lYWNoKCBmdW5jdGlvbigpIHtcclxuXHRcdFx0dmFyIGluZGV4LFxyXG5cdFx0XHRcdGRhdGEgPSBkYXRhUHJpdi5nZXQoIHRoaXMgKSxcclxuXHRcdFx0XHRxdWV1ZSA9IGRhdGFbIHR5cGUgKyBcInF1ZXVlXCIgXSxcclxuXHRcdFx0XHRob29rcyA9IGRhdGFbIHR5cGUgKyBcInF1ZXVlSG9va3NcIiBdLFxyXG5cdFx0XHRcdHRpbWVycyA9IGpRdWVyeS50aW1lcnMsXHJcblx0XHRcdFx0bGVuZ3RoID0gcXVldWUgPyBxdWV1ZS5sZW5ndGggOiAwO1xyXG5cclxuXHRcdFx0Ly8gRW5hYmxlIGZpbmlzaGluZyBmbGFnIG9uIHByaXZhdGUgZGF0YVxyXG5cdFx0XHRkYXRhLmZpbmlzaCA9IHRydWU7XHJcblxyXG5cdFx0XHQvLyBFbXB0eSB0aGUgcXVldWUgZmlyc3RcclxuXHRcdFx0alF1ZXJ5LnF1ZXVlKCB0aGlzLCB0eXBlLCBbXSApO1xyXG5cclxuXHRcdFx0aWYgKCBob29rcyAmJiBob29rcy5zdG9wICkge1xyXG5cdFx0XHRcdGhvb2tzLnN0b3AuY2FsbCggdGhpcywgdHJ1ZSApO1xyXG5cdFx0XHR9XHJcblxyXG5cdFx0XHQvLyBMb29rIGZvciBhbnkgYWN0aXZlIGFuaW1hdGlvbnMsIGFuZCBmaW5pc2ggdGhlbVxyXG5cdFx0XHRmb3IgKCBpbmRleCA9IHRpbWVycy5sZW5ndGg7IGluZGV4LS07ICkge1xyXG5cdFx0XHRcdGlmICggdGltZXJzWyBpbmRleCBdLmVsZW0gPT09IHRoaXMgJiYgdGltZXJzWyBpbmRleCBdLnF1ZXVlID09PSB0eXBlICkge1xyXG5cdFx0XHRcdFx0dGltZXJzWyBpbmRleCBdLmFuaW0uc3RvcCggdHJ1ZSApO1xyXG5cdFx0XHRcdFx0dGltZXJzLnNwbGljZSggaW5kZXgsIDEgKTtcclxuXHRcdFx0XHR9XHJcblx0XHRcdH1cclxuXHJcblx0XHRcdC8vIExvb2sgZm9yIGFueSBhbmltYXRpb25zIGluIHRoZSBvbGQgcXVldWUgYW5kIGZpbmlzaCB0aGVtXHJcblx0XHRcdGZvciAoIGluZGV4ID0gMDsgaW5kZXggPCBsZW5ndGg7IGluZGV4KysgKSB7XHJcblx0XHRcdFx0aWYgKCBxdWV1ZVsgaW5kZXggXSAmJiBxdWV1ZVsgaW5kZXggXS5maW5pc2ggKSB7XHJcblx0XHRcdFx0XHRxdWV1ZVsgaW5kZXggXS5maW5pc2guY2FsbCggdGhpcyApO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0Ly8gVHVybiBvZmYgZmluaXNoaW5nIGZsYWdcclxuXHRcdFx0ZGVsZXRlIGRhdGEuZmluaXNoO1xyXG5cdFx0fSApO1xyXG5cdH1cclxufSApO1xyXG5cclxualF1ZXJ5LmVhY2goIFsgXCJ0b2dnbGVcIiwgXCJzaG93XCIsIFwiaGlkZVwiIF0sIGZ1bmN0aW9uKCBpLCBuYW1lICkge1xyXG5cdHZhciBjc3NGbiA9IGpRdWVyeS5mblsgbmFtZSBdO1xyXG5cdGpRdWVyeS5mblsgbmFtZSBdID0gZnVuY3Rpb24oIHNwZWVkLCBlYXNpbmcsIGNhbGxiYWNrICkge1xyXG5cdFx0cmV0dXJuIHNwZWVkID09IG51bGwgfHwgdHlwZW9mIHNwZWVkID09PSBcImJvb2xlYW5cIiA/XHJcblx0XHRcdGNzc0ZuLmFwcGx5KCB0aGlzLCBhcmd1bWVudHMgKSA6XHJcblx0XHRcdHRoaXMuYW5pbWF0ZSggZ2VuRngoIG5hbWUsIHRydWUgKSwgc3BlZWQsIGVhc2luZywgY2FsbGJhY2sgKTtcclxuXHR9O1xyXG59ICk7XHJcblxyXG4vLyBHZW5lcmF0ZSBzaG9ydGN1dHMgZm9yIGN1c3RvbSBhbmltYXRpb25zXHJcbmpRdWVyeS5lYWNoKCB7XHJcblx0c2xpZGVEb3duOiBnZW5GeCggXCJzaG93XCIgKSxcclxuXHRzbGlkZVVwOiBnZW5GeCggXCJoaWRlXCIgKSxcclxuXHRzbGlkZVRvZ2dsZTogZ2VuRngoIFwidG9nZ2xlXCIgKSxcclxuXHRmYWRlSW46IHsgb3BhY2l0eTogXCJzaG93XCIgfSxcclxuXHRmYWRlT3V0OiB7IG9wYWNpdHk6IFwiaGlkZVwiIH0sXHJcblx0ZmFkZVRvZ2dsZTogeyBvcGFjaXR5OiBcInRvZ2dsZVwiIH1cclxufSwgZnVuY3Rpb24oIG5hbWUsIHByb3BzICkge1xyXG5cdGpRdWVyeS5mblsgbmFtZSBdID0gZnVuY3Rpb24oIHNwZWVkLCBlYXNpbmcsIGNhbGxiYWNrICkge1xyXG5cdFx0cmV0dXJuIHRoaXMuYW5pbWF0ZSggcHJvcHMsIHNwZWVkLCBlYXNpbmcsIGNhbGxiYWNrICk7XHJcblx0fTtcclxufSApO1xyXG5cclxualF1ZXJ5LnRpbWVycyA9IFtdO1xyXG5qUXVlcnkuZngudGljayA9IGZ1bmN0aW9uKCkge1xyXG5cdHZhciB0aW1lcixcclxuXHRcdGkgPSAwLFxyXG5cdFx0dGltZXJzID0galF1ZXJ5LnRpbWVycztcclxuXHJcblx0ZnhOb3cgPSBqUXVlcnkubm93KCk7XHJcblxyXG5cdGZvciAoIDsgaSA8IHRpbWVycy5sZW5ndGg7IGkrKyApIHtcclxuXHRcdHRpbWVyID0gdGltZXJzWyBpIF07XHJcblxyXG5cdFx0Ly8gQ2hlY2tzIHRoZSB0aW1lciBoYXMgbm90IGFscmVhZHkgYmVlbiByZW1vdmVkXHJcblx0XHRpZiAoICF0aW1lcigpICYmIHRpbWVyc1sgaSBdID09PSB0aW1lciApIHtcclxuXHRcdFx0dGltZXJzLnNwbGljZSggaS0tLCAxICk7XHJcblx0XHR9XHJcblx0fVxyXG5cclxuXHRpZiAoICF0aW1lcnMubGVuZ3RoICkge1xyXG5cdFx0alF1ZXJ5LmZ4LnN0b3AoKTtcclxuXHR9XHJcblx0ZnhOb3cgPSB1bmRlZmluZWQ7XHJcbn07XHJcblxyXG5qUXVlcnkuZngudGltZXIgPSBmdW5jdGlvbiggdGltZXIgKSB7XHJcblx0alF1ZXJ5LnRpbWVycy5wdXNoKCB0aW1lciApO1xyXG5cdGlmICggdGltZXIoKSApIHtcclxuXHRcdGpRdWVyeS5meC5zdGFydCgpO1xyXG5cdH0gZWxzZSB7XHJcblx0XHRqUXVlcnkudGltZXJzLnBvcCgpO1xyXG5cdH1cclxufTtcclxuXHJcbmpRdWVyeS5meC5pbnRlcnZhbCA9IDEzO1xyXG5qUXVlcnkuZnguc3RhcnQgPSBmdW5jdGlvbigpIHtcclxuXHRpZiAoICF0aW1lcklkICkge1xyXG5cdFx0dGltZXJJZCA9IHdpbmRvdy5zZXRJbnRlcnZhbCggalF1ZXJ5LmZ4LnRpY2ssIGpRdWVyeS5meC5pbnRlcnZhbCApO1xyXG5cdH1cclxufTtcclxuXHJcbmpRdWVyeS5meC5zdG9wID0gZnVuY3Rpb24oKSB7XHJcblx0d2luZG93LmNsZWFySW50ZXJ2YWwoIHRpbWVySWQgKTtcclxuXHJcblx0dGltZXJJZCA9IG51bGw7XHJcbn07XHJcblxyXG5qUXVlcnkuZnguc3BlZWRzID0ge1xyXG5cdHNsb3c6IDYwMCxcclxuXHRmYXN0OiAyMDAsXHJcblxyXG5cdC8vIERlZmF1bHQgc3BlZWRcclxuXHRfZGVmYXVsdDogNDAwXHJcbn07XHJcblxyXG5cclxuLy8gQmFzZWQgb2ZmIG9mIHRoZSBwbHVnaW4gYnkgQ2xpbnQgSGVsZmVycywgd2l0aCBwZXJtaXNzaW9uLlxyXG4vLyBodHRwOi8vd2ViLmFyY2hpdmUub3JnL3dlYi8yMDEwMDMyNDAxNDc0Ny9odHRwOi8vYmxpbmRzaWduYWxzLmNvbS9pbmRleC5waHAvMjAwOS8wNy9qcXVlcnktZGVsYXkvXHJcbmpRdWVyeS5mbi5kZWxheSA9IGZ1bmN0aW9uKCB0aW1lLCB0eXBlICkge1xyXG5cdHRpbWUgPSBqUXVlcnkuZnggPyBqUXVlcnkuZnguc3BlZWRzWyB0aW1lIF0gfHwgdGltZSA6IHRpbWU7XHJcblx0dHlwZSA9IHR5cGUgfHwgXCJmeFwiO1xyXG5cclxuXHRyZXR1cm4gdGhpcy5xdWV1ZSggdHlwZSwgZnVuY3Rpb24oIG5leHQsIGhvb2tzICkge1xyXG5cdFx0dmFyIHRpbWVvdXQgPSB3aW5kb3cuc2V0VGltZW91dCggbmV4dCwgdGltZSApO1xyXG5cdFx0aG9va3Muc3RvcCA9IGZ1bmN0aW9uKCkge1xyXG5cdFx0XHR3aW5kb3cuY2xlYXJUaW1lb3V0KCB0aW1lb3V0ICk7XHJcblx0XHR9O1xyXG5cdH0gKTtcclxufTtcclxuXHJcblxyXG4oIGZ1bmN0aW9uKCkge1xyXG5cdHZhciBpbnB1dCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoIFwiaW5wdXRcIiApLFxyXG5cdFx0c2VsZWN0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCggXCJzZWxlY3RcIiApLFxyXG5cdFx0b3B0ID0gc2VsZWN0LmFwcGVuZENoaWxkKCBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCBcIm9wdGlvblwiICkgKTtcclxuXHJcblx0aW5wdXQudHlwZSA9IFwiY2hlY2tib3hcIjtcclxuXHJcblx0Ly8gU3VwcG9ydDogaU9TPD01LjEsIEFuZHJvaWQ8PTQuMitcclxuXHQvLyBEZWZhdWx0IHZhbHVlIGZvciBhIGNoZWNrYm94IHNob3VsZCBiZSBcIm9uXCJcclxuXHRzdXBwb3J0LmNoZWNrT24gPSBpbnB1dC52YWx1ZSAhPT0gXCJcIjtcclxuXHJcblx0Ly8gU3VwcG9ydDogSUU8PTExK1xyXG5cdC8vIE11c3QgYWNjZXNzIHNlbGVjdGVkSW5kZXggdG8gbWFrZSBkZWZhdWx0IG9wdGlvbnMgc2VsZWN0XHJcblx0c3VwcG9ydC5vcHRTZWxlY3RlZCA9IG9wdC5zZWxlY3RlZDtcclxuXHJcblx0Ly8gU3VwcG9ydDogQW5kcm9pZDw9Mi4zXHJcblx0Ly8gT3B0aW9ucyBpbnNpZGUgZGlzYWJsZWQgc2VsZWN0cyBhcmUgaW5jb3JyZWN0bHkgbWFya2VkIGFzIGRpc2FibGVkXHJcblx0c2VsZWN0LmRpc2FibGVkID0gdHJ1ZTtcclxuXHRzdXBwb3J0Lm9wdERpc2FibGVkID0gIW9wdC5kaXNhYmxlZDtcclxuXHJcblx0Ly8gU3VwcG9ydDogSUU8PTExK1xyXG5cdC8vIEFuIGlucHV0IGxvc2VzIGl0cyB2YWx1ZSBhZnRlciBiZWNvbWluZyBhIHJhZGlvXHJcblx0aW5wdXQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCBcImlucHV0XCIgKTtcclxuXHRpbnB1dC52YWx1ZSA9IFwidFwiO1xyXG5cdGlucHV0LnR5cGUgPSBcInJhZGlvXCI7XHJcblx0c3VwcG9ydC5yYWRpb1ZhbHVlID0gaW5wdXQudmFsdWUgPT09IFwidFwiO1xyXG59ICkoKTtcclxuXHJcblxyXG52YXIgYm9vbEhvb2ssXHJcblx0YXR0ckhhbmRsZSA9IGpRdWVyeS5leHByLmF0dHJIYW5kbGU7XHJcblxyXG5qUXVlcnkuZm4uZXh0ZW5kKCB7XHJcblx0YXR0cjogZnVuY3Rpb24oIG5hbWUsIHZhbHVlICkge1xyXG5cdFx0cmV0dXJuIGFjY2VzcyggdGhpcywgalF1ZXJ5LmF0dHIsIG5hbWUsIHZhbHVlLCBhcmd1bWVudHMubGVuZ3RoID4gMSApO1xyXG5cdH0sXHJcblxyXG5cdHJlbW92ZUF0dHI6IGZ1bmN0aW9uKCBuYW1lICkge1xyXG5cdFx0cmV0dXJuIHRoaXMuZWFjaCggZnVuY3Rpb24oKSB7XHJcblx0XHRcdGpRdWVyeS5yZW1vdmVBdHRyKCB0aGlzLCBuYW1lICk7XHJcblx0XHR9ICk7XHJcblx0fVxyXG59ICk7XHJcblxyXG5qUXVlcnkuZXh0ZW5kKCB7XHJcblx0YXR0cjogZnVuY3Rpb24oIGVsZW0sIG5hbWUsIHZhbHVlICkge1xyXG5cdFx0dmFyIHJldCwgaG9va3MsXHJcblx0XHRcdG5UeXBlID0gZWxlbS5ub2RlVHlwZTtcclxuXHJcblx0XHQvLyBEb24ndCBnZXQvc2V0IGF0dHJpYnV0ZXMgb24gdGV4dCwgY29tbWVudCBhbmQgYXR0cmlidXRlIG5vZGVzXHJcblx0XHRpZiAoIG5UeXBlID09PSAzIHx8IG5UeXBlID09PSA4IHx8IG5UeXBlID09PSAyICkge1xyXG5cdFx0XHRyZXR1cm47XHJcblx0XHR9XHJcblxyXG5cdFx0Ly8gRmFsbGJhY2sgdG8gcHJvcCB3aGVuIGF0dHJpYnV0ZXMgYXJlIG5vdCBzdXBwb3J0ZWRcclxuXHRcdGlmICggdHlwZW9mIGVsZW0uZ2V0QXR0cmlidXRlID09PSBcInVuZGVmaW5lZFwiICkge1xyXG5cdFx0XHRyZXR1cm4galF1ZXJ5LnByb3AoIGVsZW0sIG5hbWUsIHZhbHVlICk7XHJcblx0XHR9XHJcblxyXG5cdFx0Ly8gQWxsIGF0dHJpYnV0ZXMgYXJlIGxvd2VyY2FzZVxyXG5cdFx0Ly8gR3JhYiBuZWNlc3NhcnkgaG9vayBpZiBvbmUgaXMgZGVmaW5lZFxyXG5cdFx0aWYgKCBuVHlwZSAhPT0gMSB8fCAhalF1ZXJ5LmlzWE1MRG9jKCBlbGVtICkgKSB7XHJcblx0XHRcdG5hbWUgPSBuYW1lLnRvTG93ZXJDYXNlKCk7XHJcblx0XHRcdGhvb2tzID0galF1ZXJ5LmF0dHJIb29rc1sgbmFtZSBdIHx8XHJcblx0XHRcdFx0KCBqUXVlcnkuZXhwci5tYXRjaC5ib29sLnRlc3QoIG5hbWUgKSA/IGJvb2xIb29rIDogdW5kZWZpbmVkICk7XHJcblx0XHR9XHJcblxyXG5cdFx0aWYgKCB2YWx1ZSAhPT0gdW5kZWZpbmVkICkge1xyXG5cdFx0XHRpZiAoIHZhbHVlID09PSBudWxsICkge1xyXG5cdFx0XHRcdGpRdWVyeS5yZW1vdmVBdHRyKCBlbGVtLCBuYW1lICk7XHJcblx0XHRcdFx0cmV0dXJuO1xyXG5cdFx0XHR9XHJcblxyXG5cdFx0XHRpZiAoIGhvb2tzICYmIFwic2V0XCIgaW4gaG9va3MgJiZcclxuXHRcdFx0XHQoIHJldCA9IGhvb2tzLnNldCggZWxlbSwgdmFsdWUsIG5hbWUgKSApICE9PSB1bmRlZmluZWQgKSB7XHJcblx0XHRcdFx0cmV0dXJuIHJldDtcclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0ZWxlbS5zZXRBdHRyaWJ1dGUoIG5hbWUsIHZhbHVlICsgXCJcIiApO1xyXG5cdFx0XHRyZXR1cm4gdmFsdWU7XHJcblx0XHR9XHJcblxyXG5cdFx0aWYgKCBob29rcyAmJiBcImdldFwiIGluIGhvb2tzICYmICggcmV0ID0gaG9va3MuZ2V0KCBlbGVtLCBuYW1lICkgKSAhPT0gbnVsbCApIHtcclxuXHRcdFx0cmV0dXJuIHJldDtcclxuXHRcdH1cclxuXHJcblx0XHRyZXQgPSBqUXVlcnkuZmluZC5hdHRyKCBlbGVtLCBuYW1lICk7XHJcblxyXG5cdFx0Ly8gTm9uLWV4aXN0ZW50IGF0dHJpYnV0ZXMgcmV0dXJuIG51bGwsIHdlIG5vcm1hbGl6ZSB0byB1bmRlZmluZWRcclxuXHRcdHJldHVybiByZXQgPT0gbnVsbCA/IHVuZGVmaW5lZCA6IHJldDtcclxuXHR9LFxyXG5cclxuXHRhdHRySG9va3M6IHtcclxuXHRcdHR5cGU6IHtcclxuXHRcdFx0c2V0OiBmdW5jdGlvbiggZWxlbSwgdmFsdWUgKSB7XHJcblx0XHRcdFx0aWYgKCAhc3VwcG9ydC5yYWRpb1ZhbHVlICYmIHZhbHVlID09PSBcInJhZGlvXCIgJiZcclxuXHRcdFx0XHRcdGpRdWVyeS5ub2RlTmFtZSggZWxlbSwgXCJpbnB1dFwiICkgKSB7XHJcblx0XHRcdFx0XHR2YXIgdmFsID0gZWxlbS52YWx1ZTtcclxuXHRcdFx0XHRcdGVsZW0uc2V0QXR0cmlidXRlKCBcInR5cGVcIiwgdmFsdWUgKTtcclxuXHRcdFx0XHRcdGlmICggdmFsICkge1xyXG5cdFx0XHRcdFx0XHRlbGVtLnZhbHVlID0gdmFsO1xyXG5cdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0cmV0dXJuIHZhbHVlO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0fVxyXG5cdFx0fVxyXG5cdH0sXHJcblxyXG5cdHJlbW92ZUF0dHI6IGZ1bmN0aW9uKCBlbGVtLCB2YWx1ZSApIHtcclxuXHRcdHZhciBuYW1lLCBwcm9wTmFtZSxcclxuXHRcdFx0aSA9IDAsXHJcblx0XHRcdGF0dHJOYW1lcyA9IHZhbHVlICYmIHZhbHVlLm1hdGNoKCBybm90d2hpdGUgKTtcclxuXHJcblx0XHRpZiAoIGF0dHJOYW1lcyAmJiBlbGVtLm5vZGVUeXBlID09PSAxICkge1xyXG5cdFx0XHR3aGlsZSAoICggbmFtZSA9IGF0dHJOYW1lc1sgaSsrIF0gKSApIHtcclxuXHRcdFx0XHRwcm9wTmFtZSA9IGpRdWVyeS5wcm9wRml4WyBuYW1lIF0gfHwgbmFtZTtcclxuXHJcblx0XHRcdFx0Ly8gQm9vbGVhbiBhdHRyaWJ1dGVzIGdldCBzcGVjaWFsIHRyZWF0bWVudCAoIzEwODcwKVxyXG5cdFx0XHRcdGlmICggalF1ZXJ5LmV4cHIubWF0Y2guYm9vbC50ZXN0KCBuYW1lICkgKSB7XHJcblxyXG5cdFx0XHRcdFx0Ly8gU2V0IGNvcnJlc3BvbmRpbmcgcHJvcGVydHkgdG8gZmFsc2VcclxuXHRcdFx0XHRcdGVsZW1bIHByb3BOYW1lIF0gPSBmYWxzZTtcclxuXHRcdFx0XHR9XHJcblxyXG5cdFx0XHRcdGVsZW0ucmVtb3ZlQXR0cmlidXRlKCBuYW1lICk7XHJcblx0XHRcdH1cclxuXHRcdH1cclxuXHR9XHJcbn0gKTtcclxuXHJcbi8vIEhvb2tzIGZvciBib29sZWFuIGF0dHJpYnV0ZXNcclxuYm9vbEhvb2sgPSB7XHJcblx0c2V0OiBmdW5jdGlvbiggZWxlbSwgdmFsdWUsIG5hbWUgKSB7XHJcblx0XHRpZiAoIHZhbHVlID09PSBmYWxzZSApIHtcclxuXHJcblx0XHRcdC8vIFJlbW92ZSBib29sZWFuIGF0dHJpYnV0ZXMgd2hlbiBzZXQgdG8gZmFsc2VcclxuXHRcdFx0alF1ZXJ5LnJlbW92ZUF0dHIoIGVsZW0sIG5hbWUgKTtcclxuXHRcdH0gZWxzZSB7XHJcblx0XHRcdGVsZW0uc2V0QXR0cmlidXRlKCBuYW1lLCBuYW1lICk7XHJcblx0XHR9XHJcblx0XHRyZXR1cm4gbmFtZTtcclxuXHR9XHJcbn07XHJcbmpRdWVyeS5lYWNoKCBqUXVlcnkuZXhwci5tYXRjaC5ib29sLnNvdXJjZS5tYXRjaCggL1xcdysvZyApLCBmdW5jdGlvbiggaSwgbmFtZSApIHtcclxuXHR2YXIgZ2V0dGVyID0gYXR0ckhhbmRsZVsgbmFtZSBdIHx8IGpRdWVyeS5maW5kLmF0dHI7XHJcblxyXG5cdGF0dHJIYW5kbGVbIG5hbWUgXSA9IGZ1bmN0aW9uKCBlbGVtLCBuYW1lLCBpc1hNTCApIHtcclxuXHRcdHZhciByZXQsIGhhbmRsZTtcclxuXHRcdGlmICggIWlzWE1MICkge1xyXG5cclxuXHRcdFx0Ly8gQXZvaWQgYW4gaW5maW5pdGUgbG9vcCBieSB0ZW1wb3JhcmlseSByZW1vdmluZyB0aGlzIGZ1bmN0aW9uIGZyb20gdGhlIGdldHRlclxyXG5cdFx0XHRoYW5kbGUgPSBhdHRySGFuZGxlWyBuYW1lIF07XHJcblx0XHRcdGF0dHJIYW5kbGVbIG5hbWUgXSA9IHJldDtcclxuXHRcdFx0cmV0ID0gZ2V0dGVyKCBlbGVtLCBuYW1lLCBpc1hNTCApICE9IG51bGwgP1xyXG5cdFx0XHRcdG5hbWUudG9Mb3dlckNhc2UoKSA6XHJcblx0XHRcdFx0bnVsbDtcclxuXHRcdFx0YXR0ckhhbmRsZVsgbmFtZSBdID0gaGFuZGxlO1xyXG5cdFx0fVxyXG5cdFx0cmV0dXJuIHJldDtcclxuXHR9O1xyXG59ICk7XHJcblxyXG5cclxuXHJcblxyXG52YXIgcmZvY3VzYWJsZSA9IC9eKD86aW5wdXR8c2VsZWN0fHRleHRhcmVhfGJ1dHRvbikkL2ksXHJcblx0cmNsaWNrYWJsZSA9IC9eKD86YXxhcmVhKSQvaTtcclxuXHJcbmpRdWVyeS5mbi5leHRlbmQoIHtcclxuXHRwcm9wOiBmdW5jdGlvbiggbmFtZSwgdmFsdWUgKSB7XHJcblx0XHRyZXR1cm4gYWNjZXNzKCB0aGlzLCBqUXVlcnkucHJvcCwgbmFtZSwgdmFsdWUsIGFyZ3VtZW50cy5sZW5ndGggPiAxICk7XHJcblx0fSxcclxuXHJcblx0cmVtb3ZlUHJvcDogZnVuY3Rpb24oIG5hbWUgKSB7XHJcblx0XHRyZXR1cm4gdGhpcy5lYWNoKCBmdW5jdGlvbigpIHtcclxuXHRcdFx0ZGVsZXRlIHRoaXNbIGpRdWVyeS5wcm9wRml4WyBuYW1lIF0gfHwgbmFtZSBdO1xyXG5cdFx0fSApO1xyXG5cdH1cclxufSApO1xyXG5cclxualF1ZXJ5LmV4dGVuZCgge1xyXG5cdHByb3A6IGZ1bmN0aW9uKCBlbGVtLCBuYW1lLCB2YWx1ZSApIHtcclxuXHRcdHZhciByZXQsIGhvb2tzLFxyXG5cdFx0XHRuVHlwZSA9IGVsZW0ubm9kZVR5cGU7XHJcblxyXG5cdFx0Ly8gRG9uJ3QgZ2V0L3NldCBwcm9wZXJ0aWVzIG9uIHRleHQsIGNvbW1lbnQgYW5kIGF0dHJpYnV0ZSBub2Rlc1xyXG5cdFx0aWYgKCBuVHlwZSA9PT0gMyB8fCBuVHlwZSA9PT0gOCB8fCBuVHlwZSA9PT0gMiApIHtcclxuXHRcdFx0cmV0dXJuO1xyXG5cdFx0fVxyXG5cclxuXHRcdGlmICggblR5cGUgIT09IDEgfHwgIWpRdWVyeS5pc1hNTERvYyggZWxlbSApICkge1xyXG5cclxuXHRcdFx0Ly8gRml4IG5hbWUgYW5kIGF0dGFjaCBob29rc1xyXG5cdFx0XHRuYW1lID0galF1ZXJ5LnByb3BGaXhbIG5hbWUgXSB8fCBuYW1lO1xyXG5cdFx0XHRob29rcyA9IGpRdWVyeS5wcm9wSG9va3NbIG5hbWUgXTtcclxuXHRcdH1cclxuXHJcblx0XHRpZiAoIHZhbHVlICE9PSB1bmRlZmluZWQgKSB7XHJcblx0XHRcdGlmICggaG9va3MgJiYgXCJzZXRcIiBpbiBob29rcyAmJlxyXG5cdFx0XHRcdCggcmV0ID0gaG9va3Muc2V0KCBlbGVtLCB2YWx1ZSwgbmFtZSApICkgIT09IHVuZGVmaW5lZCApIHtcclxuXHRcdFx0XHRyZXR1cm4gcmV0O1xyXG5cdFx0XHR9XHJcblxyXG5cdFx0XHRyZXR1cm4gKCBlbGVtWyBuYW1lIF0gPSB2YWx1ZSApO1xyXG5cdFx0fVxyXG5cclxuXHRcdGlmICggaG9va3MgJiYgXCJnZXRcIiBpbiBob29rcyAmJiAoIHJldCA9IGhvb2tzLmdldCggZWxlbSwgbmFtZSApICkgIT09IG51bGwgKSB7XHJcblx0XHRcdHJldHVybiByZXQ7XHJcblx0XHR9XHJcblxyXG5cdFx0cmV0dXJuIGVsZW1bIG5hbWUgXTtcclxuXHR9LFxyXG5cclxuXHRwcm9wSG9va3M6IHtcclxuXHRcdHRhYkluZGV4OiB7XHJcblx0XHRcdGdldDogZnVuY3Rpb24oIGVsZW0gKSB7XHJcblxyXG5cdFx0XHRcdC8vIGVsZW0udGFiSW5kZXggZG9lc24ndCBhbHdheXMgcmV0dXJuIHRoZVxyXG5cdFx0XHRcdC8vIGNvcnJlY3QgdmFsdWUgd2hlbiBpdCBoYXNuJ3QgYmVlbiBleHBsaWNpdGx5IHNldFxyXG5cdFx0XHRcdC8vIGh0dHA6Ly9mbHVpZHByb2plY3Qub3JnL2Jsb2cvMjAwOC8wMS8wOS9nZXR0aW5nLXNldHRpbmctYW5kLXJlbW92aW5nLXRhYmluZGV4LXZhbHVlcy13aXRoLWphdmFzY3JpcHQvXHJcblx0XHRcdFx0Ly8gVXNlIHByb3BlciBhdHRyaWJ1dGUgcmV0cmlldmFsKCMxMjA3MilcclxuXHRcdFx0XHR2YXIgdGFiaW5kZXggPSBqUXVlcnkuZmluZC5hdHRyKCBlbGVtLCBcInRhYmluZGV4XCIgKTtcclxuXHJcblx0XHRcdFx0cmV0dXJuIHRhYmluZGV4ID9cclxuXHRcdFx0XHRcdHBhcnNlSW50KCB0YWJpbmRleCwgMTAgKSA6XHJcblx0XHRcdFx0XHRyZm9jdXNhYmxlLnRlc3QoIGVsZW0ubm9kZU5hbWUgKSB8fFxyXG5cdFx0XHRcdFx0XHRyY2xpY2thYmxlLnRlc3QoIGVsZW0ubm9kZU5hbWUgKSAmJiBlbGVtLmhyZWYgP1xyXG5cdFx0XHRcdFx0XHRcdDAgOlxyXG5cdFx0XHRcdFx0XHRcdC0xO1xyXG5cdFx0XHR9XHJcblx0XHR9XHJcblx0fSxcclxuXHJcblx0cHJvcEZpeDoge1xyXG5cdFx0XCJmb3JcIjogXCJodG1sRm9yXCIsXHJcblx0XHRcImNsYXNzXCI6IFwiY2xhc3NOYW1lXCJcclxuXHR9XHJcbn0gKTtcclxuXHJcbi8vIFN1cHBvcnQ6IElFIDw9MTEgb25seVxyXG4vLyBBY2Nlc3NpbmcgdGhlIHNlbGVjdGVkSW5kZXggcHJvcGVydHlcclxuLy8gZm9yY2VzIHRoZSBicm93c2VyIHRvIHJlc3BlY3Qgc2V0dGluZyBzZWxlY3RlZFxyXG4vLyBvbiB0aGUgb3B0aW9uXHJcbi8vIFRoZSBnZXR0ZXIgZW5zdXJlcyBhIGRlZmF1bHQgb3B0aW9uIGlzIHNlbGVjdGVkXHJcbi8vIHdoZW4gaW4gYW4gb3B0Z3JvdXBcclxuaWYgKCAhc3VwcG9ydC5vcHRTZWxlY3RlZCApIHtcclxuXHRqUXVlcnkucHJvcEhvb2tzLnNlbGVjdGVkID0ge1xyXG5cdFx0Z2V0OiBmdW5jdGlvbiggZWxlbSApIHtcclxuXHRcdFx0dmFyIHBhcmVudCA9IGVsZW0ucGFyZW50Tm9kZTtcclxuXHRcdFx0aWYgKCBwYXJlbnQgJiYgcGFyZW50LnBhcmVudE5vZGUgKSB7XHJcblx0XHRcdFx0cGFyZW50LnBhcmVudE5vZGUuc2VsZWN0ZWRJbmRleDtcclxuXHRcdFx0fVxyXG5cdFx0XHRyZXR1cm4gbnVsbDtcclxuXHRcdH0sXHJcblx0XHRzZXQ6IGZ1bmN0aW9uKCBlbGVtICkge1xyXG5cdFx0XHR2YXIgcGFyZW50ID0gZWxlbS5wYXJlbnROb2RlO1xyXG5cdFx0XHRpZiAoIHBhcmVudCApIHtcclxuXHRcdFx0XHRwYXJlbnQuc2VsZWN0ZWRJbmRleDtcclxuXHJcblx0XHRcdFx0aWYgKCBwYXJlbnQucGFyZW50Tm9kZSApIHtcclxuXHRcdFx0XHRcdHBhcmVudC5wYXJlbnROb2RlLnNlbGVjdGVkSW5kZXg7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9XHJcblx0XHR9XHJcblx0fTtcclxufVxyXG5cclxualF1ZXJ5LmVhY2goIFtcclxuXHRcInRhYkluZGV4XCIsXHJcblx0XCJyZWFkT25seVwiLFxyXG5cdFwibWF4TGVuZ3RoXCIsXHJcblx0XCJjZWxsU3BhY2luZ1wiLFxyXG5cdFwiY2VsbFBhZGRpbmdcIixcclxuXHRcInJvd1NwYW5cIixcclxuXHRcImNvbFNwYW5cIixcclxuXHRcInVzZU1hcFwiLFxyXG5cdFwiZnJhbWVCb3JkZXJcIixcclxuXHRcImNvbnRlbnRFZGl0YWJsZVwiXHJcbl0sIGZ1bmN0aW9uKCkge1xyXG5cdGpRdWVyeS5wcm9wRml4WyB0aGlzLnRvTG93ZXJDYXNlKCkgXSA9IHRoaXM7XHJcbn0gKTtcclxuXHJcblxyXG5cclxuXHJcbnZhciByY2xhc3MgPSAvW1xcdFxcclxcblxcZl0vZztcclxuXHJcbmZ1bmN0aW9uIGdldENsYXNzKCBlbGVtICkge1xyXG5cdHJldHVybiBlbGVtLmdldEF0dHJpYnV0ZSAmJiBlbGVtLmdldEF0dHJpYnV0ZSggXCJjbGFzc1wiICkgfHwgXCJcIjtcclxufVxyXG5cclxualF1ZXJ5LmZuLmV4dGVuZCgge1xyXG5cdGFkZENsYXNzOiBmdW5jdGlvbiggdmFsdWUgKSB7XHJcblx0XHR2YXIgY2xhc3NlcywgZWxlbSwgY3VyLCBjdXJWYWx1ZSwgY2xhenosIGosIGZpbmFsVmFsdWUsXHJcblx0XHRcdGkgPSAwO1xyXG5cclxuXHRcdGlmICggalF1ZXJ5LmlzRnVuY3Rpb24oIHZhbHVlICkgKSB7XHJcblx0XHRcdHJldHVybiB0aGlzLmVhY2goIGZ1bmN0aW9uKCBqICkge1xyXG5cdFx0XHRcdGpRdWVyeSggdGhpcyApLmFkZENsYXNzKCB2YWx1ZS5jYWxsKCB0aGlzLCBqLCBnZXRDbGFzcyggdGhpcyApICkgKTtcclxuXHRcdFx0fSApO1xyXG5cdFx0fVxyXG5cclxuXHRcdGlmICggdHlwZW9mIHZhbHVlID09PSBcInN0cmluZ1wiICYmIHZhbHVlICkge1xyXG5cdFx0XHRjbGFzc2VzID0gdmFsdWUubWF0Y2goIHJub3R3aGl0ZSApIHx8IFtdO1xyXG5cclxuXHRcdFx0d2hpbGUgKCAoIGVsZW0gPSB0aGlzWyBpKysgXSApICkge1xyXG5cdFx0XHRcdGN1clZhbHVlID0gZ2V0Q2xhc3MoIGVsZW0gKTtcclxuXHRcdFx0XHRjdXIgPSBlbGVtLm5vZGVUeXBlID09PSAxICYmXHJcblx0XHRcdFx0XHQoIFwiIFwiICsgY3VyVmFsdWUgKyBcIiBcIiApLnJlcGxhY2UoIHJjbGFzcywgXCIgXCIgKTtcclxuXHJcblx0XHRcdFx0aWYgKCBjdXIgKSB7XHJcblx0XHRcdFx0XHRqID0gMDtcclxuXHRcdFx0XHRcdHdoaWxlICggKCBjbGF6eiA9IGNsYXNzZXNbIGorKyBdICkgKSB7XHJcblx0XHRcdFx0XHRcdGlmICggY3VyLmluZGV4T2YoIFwiIFwiICsgY2xhenogKyBcIiBcIiApIDwgMCApIHtcclxuXHRcdFx0XHRcdFx0XHRjdXIgKz0gY2xhenogKyBcIiBcIjtcclxuXHRcdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0fVxyXG5cclxuXHRcdFx0XHRcdC8vIE9ubHkgYXNzaWduIGlmIGRpZmZlcmVudCB0byBhdm9pZCB1bm5lZWRlZCByZW5kZXJpbmcuXHJcblx0XHRcdFx0XHRmaW5hbFZhbHVlID0galF1ZXJ5LnRyaW0oIGN1ciApO1xyXG5cdFx0XHRcdFx0aWYgKCBjdXJWYWx1ZSAhPT0gZmluYWxWYWx1ZSApIHtcclxuXHRcdFx0XHRcdFx0ZWxlbS5zZXRBdHRyaWJ1dGUoIFwiY2xhc3NcIiwgZmluYWxWYWx1ZSApO1xyXG5cdFx0XHRcdFx0fVxyXG5cdFx0XHRcdH1cclxuXHRcdFx0fVxyXG5cdFx0fVxyXG5cclxuXHRcdHJldHVybiB0aGlzO1xyXG5cdH0sXHJcblxyXG5cdHJlbW92ZUNsYXNzOiBmdW5jdGlvbiggdmFsdWUgKSB7XHJcblx0XHR2YXIgY2xhc3NlcywgZWxlbSwgY3VyLCBjdXJWYWx1ZSwgY2xhenosIGosIGZpbmFsVmFsdWUsXHJcblx0XHRcdGkgPSAwO1xyXG5cclxuXHRcdGlmICggalF1ZXJ5LmlzRnVuY3Rpb24oIHZhbHVlICkgKSB7XHJcblx0XHRcdHJldHVybiB0aGlzLmVhY2goIGZ1bmN0aW9uKCBqICkge1xyXG5cdFx0XHRcdGpRdWVyeSggdGhpcyApLnJlbW92ZUNsYXNzKCB2YWx1ZS5jYWxsKCB0aGlzLCBqLCBnZXRDbGFzcyggdGhpcyApICkgKTtcclxuXHRcdFx0fSApO1xyXG5cdFx0fVxyXG5cclxuXHRcdGlmICggIWFyZ3VtZW50cy5sZW5ndGggKSB7XHJcblx0XHRcdHJldHVybiB0aGlzLmF0dHIoIFwiY2xhc3NcIiwgXCJcIiApO1xyXG5cdFx0fVxyXG5cclxuXHRcdGlmICggdHlwZW9mIHZhbHVlID09PSBcInN0cmluZ1wiICYmIHZhbHVlICkge1xyXG5cdFx0XHRjbGFzc2VzID0gdmFsdWUubWF0Y2goIHJub3R3aGl0ZSApIHx8IFtdO1xyXG5cclxuXHRcdFx0d2hpbGUgKCAoIGVsZW0gPSB0aGlzWyBpKysgXSApICkge1xyXG5cdFx0XHRcdGN1clZhbHVlID0gZ2V0Q2xhc3MoIGVsZW0gKTtcclxuXHJcblx0XHRcdFx0Ly8gVGhpcyBleHByZXNzaW9uIGlzIGhlcmUgZm9yIGJldHRlciBjb21wcmVzc2liaWxpdHkgKHNlZSBhZGRDbGFzcylcclxuXHRcdFx0XHRjdXIgPSBlbGVtLm5vZGVUeXBlID09PSAxICYmXHJcblx0XHRcdFx0XHQoIFwiIFwiICsgY3VyVmFsdWUgKyBcIiBcIiApLnJlcGxhY2UoIHJjbGFzcywgXCIgXCIgKTtcclxuXHJcblx0XHRcdFx0aWYgKCBjdXIgKSB7XHJcblx0XHRcdFx0XHRqID0gMDtcclxuXHRcdFx0XHRcdHdoaWxlICggKCBjbGF6eiA9IGNsYXNzZXNbIGorKyBdICkgKSB7XHJcblxyXG5cdFx0XHRcdFx0XHQvLyBSZW1vdmUgKmFsbCogaW5zdGFuY2VzXHJcblx0XHRcdFx0XHRcdHdoaWxlICggY3VyLmluZGV4T2YoIFwiIFwiICsgY2xhenogKyBcIiBcIiApID4gLTEgKSB7XHJcblx0XHRcdFx0XHRcdFx0Y3VyID0gY3VyLnJlcGxhY2UoIFwiIFwiICsgY2xhenogKyBcIiBcIiwgXCIgXCIgKTtcclxuXHRcdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0fVxyXG5cclxuXHRcdFx0XHRcdC8vIE9ubHkgYXNzaWduIGlmIGRpZmZlcmVudCB0byBhdm9pZCB1bm5lZWRlZCByZW5kZXJpbmcuXHJcblx0XHRcdFx0XHRmaW5hbFZhbHVlID0galF1ZXJ5LnRyaW0oIGN1ciApO1xyXG5cdFx0XHRcdFx0aWYgKCBjdXJWYWx1ZSAhPT0gZmluYWxWYWx1ZSApIHtcclxuXHRcdFx0XHRcdFx0ZWxlbS5zZXRBdHRyaWJ1dGUoIFwiY2xhc3NcIiwgZmluYWxWYWx1ZSApO1xyXG5cdFx0XHRcdFx0fVxyXG5cdFx0XHRcdH1cclxuXHRcdFx0fVxyXG5cdFx0fVxyXG5cclxuXHRcdHJldHVybiB0aGlzO1xyXG5cdH0sXHJcblxyXG5cdHRvZ2dsZUNsYXNzOiBmdW5jdGlvbiggdmFsdWUsIHN0YXRlVmFsICkge1xyXG5cdFx0dmFyIHR5cGUgPSB0eXBlb2YgdmFsdWU7XHJcblxyXG5cdFx0aWYgKCB0eXBlb2Ygc3RhdGVWYWwgPT09IFwiYm9vbGVhblwiICYmIHR5cGUgPT09IFwic3RyaW5nXCIgKSB7XHJcblx0XHRcdHJldHVybiBzdGF0ZVZhbCA/IHRoaXMuYWRkQ2xhc3MoIHZhbHVlICkgOiB0aGlzLnJlbW92ZUNsYXNzKCB2YWx1ZSApO1xyXG5cdFx0fVxyXG5cclxuXHRcdGlmICggalF1ZXJ5LmlzRnVuY3Rpb24oIHZhbHVlICkgKSB7XHJcblx0XHRcdHJldHVybiB0aGlzLmVhY2goIGZ1bmN0aW9uKCBpICkge1xyXG5cdFx0XHRcdGpRdWVyeSggdGhpcyApLnRvZ2dsZUNsYXNzKFxyXG5cdFx0XHRcdFx0dmFsdWUuY2FsbCggdGhpcywgaSwgZ2V0Q2xhc3MoIHRoaXMgKSwgc3RhdGVWYWwgKSxcclxuXHRcdFx0XHRcdHN0YXRlVmFsXHJcblx0XHRcdFx0KTtcclxuXHRcdFx0fSApO1xyXG5cdFx0fVxyXG5cclxuXHRcdHJldHVybiB0aGlzLmVhY2goIGZ1bmN0aW9uKCkge1xyXG5cdFx0XHR2YXIgY2xhc3NOYW1lLCBpLCBzZWxmLCBjbGFzc05hbWVzO1xyXG5cclxuXHRcdFx0aWYgKCB0eXBlID09PSBcInN0cmluZ1wiICkge1xyXG5cclxuXHRcdFx0XHQvLyBUb2dnbGUgaW5kaXZpZHVhbCBjbGFzcyBuYW1lc1xyXG5cdFx0XHRcdGkgPSAwO1xyXG5cdFx0XHRcdHNlbGYgPSBqUXVlcnkoIHRoaXMgKTtcclxuXHRcdFx0XHRjbGFzc05hbWVzID0gdmFsdWUubWF0Y2goIHJub3R3aGl0ZSApIHx8IFtdO1xyXG5cclxuXHRcdFx0XHR3aGlsZSAoICggY2xhc3NOYW1lID0gY2xhc3NOYW1lc1sgaSsrIF0gKSApIHtcclxuXHJcblx0XHRcdFx0XHQvLyBDaGVjayBlYWNoIGNsYXNzTmFtZSBnaXZlbiwgc3BhY2Ugc2VwYXJhdGVkIGxpc3RcclxuXHRcdFx0XHRcdGlmICggc2VsZi5oYXNDbGFzcyggY2xhc3NOYW1lICkgKSB7XHJcblx0XHRcdFx0XHRcdHNlbGYucmVtb3ZlQ2xhc3MoIGNsYXNzTmFtZSApO1xyXG5cdFx0XHRcdFx0fSBlbHNlIHtcclxuXHRcdFx0XHRcdFx0c2VsZi5hZGRDbGFzcyggY2xhc3NOYW1lICk7XHJcblx0XHRcdFx0XHR9XHJcblx0XHRcdFx0fVxyXG5cclxuXHRcdFx0Ly8gVG9nZ2xlIHdob2xlIGNsYXNzIG5hbWVcclxuXHRcdFx0fSBlbHNlIGlmICggdmFsdWUgPT09IHVuZGVmaW5lZCB8fCB0eXBlID09PSBcImJvb2xlYW5cIiApIHtcclxuXHRcdFx0XHRjbGFzc05hbWUgPSBnZXRDbGFzcyggdGhpcyApO1xyXG5cdFx0XHRcdGlmICggY2xhc3NOYW1lICkge1xyXG5cclxuXHRcdFx0XHRcdC8vIFN0b3JlIGNsYXNzTmFtZSBpZiBzZXRcclxuXHRcdFx0XHRcdGRhdGFQcml2LnNldCggdGhpcywgXCJfX2NsYXNzTmFtZV9fXCIsIGNsYXNzTmFtZSApO1xyXG5cdFx0XHRcdH1cclxuXHJcblx0XHRcdFx0Ly8gSWYgdGhlIGVsZW1lbnQgaGFzIGEgY2xhc3MgbmFtZSBvciBpZiB3ZSdyZSBwYXNzZWQgYGZhbHNlYCxcclxuXHRcdFx0XHQvLyB0aGVuIHJlbW92ZSB0aGUgd2hvbGUgY2xhc3NuYW1lIChpZiB0aGVyZSB3YXMgb25lLCB0aGUgYWJvdmUgc2F2ZWQgaXQpLlxyXG5cdFx0XHRcdC8vIE90aGVyd2lzZSBicmluZyBiYWNrIHdoYXRldmVyIHdhcyBwcmV2aW91c2x5IHNhdmVkIChpZiBhbnl0aGluZyksXHJcblx0XHRcdFx0Ly8gZmFsbGluZyBiYWNrIHRvIHRoZSBlbXB0eSBzdHJpbmcgaWYgbm90aGluZyB3YXMgc3RvcmVkLlxyXG5cdFx0XHRcdGlmICggdGhpcy5zZXRBdHRyaWJ1dGUgKSB7XHJcblx0XHRcdFx0XHR0aGlzLnNldEF0dHJpYnV0ZSggXCJjbGFzc1wiLFxyXG5cdFx0XHRcdFx0XHRjbGFzc05hbWUgfHwgdmFsdWUgPT09IGZhbHNlID9cclxuXHRcdFx0XHRcdFx0XCJcIiA6XHJcblx0XHRcdFx0XHRcdGRhdGFQcml2LmdldCggdGhpcywgXCJfX2NsYXNzTmFtZV9fXCIgKSB8fCBcIlwiXHJcblx0XHRcdFx0XHQpO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0fVxyXG5cdFx0fSApO1xyXG5cdH0sXHJcblxyXG5cdGhhc0NsYXNzOiBmdW5jdGlvbiggc2VsZWN0b3IgKSB7XHJcblx0XHR2YXIgY2xhc3NOYW1lLCBlbGVtLFxyXG5cdFx0XHRpID0gMDtcclxuXHJcblx0XHRjbGFzc05hbWUgPSBcIiBcIiArIHNlbGVjdG9yICsgXCIgXCI7XHJcblx0XHR3aGlsZSAoICggZWxlbSA9IHRoaXNbIGkrKyBdICkgKSB7XHJcblx0XHRcdGlmICggZWxlbS5ub2RlVHlwZSA9PT0gMSAmJlxyXG5cdFx0XHRcdCggXCIgXCIgKyBnZXRDbGFzcyggZWxlbSApICsgXCIgXCIgKS5yZXBsYWNlKCByY2xhc3MsIFwiIFwiIClcclxuXHRcdFx0XHRcdC5pbmRleE9mKCBjbGFzc05hbWUgKSA+IC0xXHJcblx0XHRcdCkge1xyXG5cdFx0XHRcdHJldHVybiB0cnVlO1xyXG5cdFx0XHR9XHJcblx0XHR9XHJcblxyXG5cdFx0cmV0dXJuIGZhbHNlO1xyXG5cdH1cclxufSApO1xyXG5cclxuXHJcblxyXG5cclxudmFyIHJyZXR1cm4gPSAvXFxyL2csXHJcblx0cnNwYWNlcyA9IC9bXFx4MjBcXHRcXHJcXG5cXGZdKy9nO1xyXG5cclxualF1ZXJ5LmZuLmV4dGVuZCgge1xyXG5cdHZhbDogZnVuY3Rpb24oIHZhbHVlICkge1xyXG5cdFx0dmFyIGhvb2tzLCByZXQsIGlzRnVuY3Rpb24sXHJcblx0XHRcdGVsZW0gPSB0aGlzWyAwIF07XHJcblxyXG5cdFx0aWYgKCAhYXJndW1lbnRzLmxlbmd0aCApIHtcclxuXHRcdFx0aWYgKCBlbGVtICkge1xyXG5cdFx0XHRcdGhvb2tzID0galF1ZXJ5LnZhbEhvb2tzWyBlbGVtLnR5cGUgXSB8fFxyXG5cdFx0XHRcdFx0alF1ZXJ5LnZhbEhvb2tzWyBlbGVtLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCkgXTtcclxuXHJcblx0XHRcdFx0aWYgKCBob29rcyAmJlxyXG5cdFx0XHRcdFx0XCJnZXRcIiBpbiBob29rcyAmJlxyXG5cdFx0XHRcdFx0KCByZXQgPSBob29rcy5nZXQoIGVsZW0sIFwidmFsdWVcIiApICkgIT09IHVuZGVmaW5lZFxyXG5cdFx0XHRcdCkge1xyXG5cdFx0XHRcdFx0cmV0dXJuIHJldDtcclxuXHRcdFx0XHR9XHJcblxyXG5cdFx0XHRcdHJldCA9IGVsZW0udmFsdWU7XHJcblxyXG5cdFx0XHRcdHJldHVybiB0eXBlb2YgcmV0ID09PSBcInN0cmluZ1wiID9cclxuXHJcblx0XHRcdFx0XHQvLyBIYW5kbGUgbW9zdCBjb21tb24gc3RyaW5nIGNhc2VzXHJcblx0XHRcdFx0XHRyZXQucmVwbGFjZSggcnJldHVybiwgXCJcIiApIDpcclxuXHJcblx0XHRcdFx0XHQvLyBIYW5kbGUgY2FzZXMgd2hlcmUgdmFsdWUgaXMgbnVsbC91bmRlZiBvciBudW1iZXJcclxuXHRcdFx0XHRcdHJldCA9PSBudWxsID8gXCJcIiA6IHJldDtcclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0cmV0dXJuO1xyXG5cdFx0fVxyXG5cclxuXHRcdGlzRnVuY3Rpb24gPSBqUXVlcnkuaXNGdW5jdGlvbiggdmFsdWUgKTtcclxuXHJcblx0XHRyZXR1cm4gdGhpcy5lYWNoKCBmdW5jdGlvbiggaSApIHtcclxuXHRcdFx0dmFyIHZhbDtcclxuXHJcblx0XHRcdGlmICggdGhpcy5ub2RlVHlwZSAhPT0gMSApIHtcclxuXHRcdFx0XHRyZXR1cm47XHJcblx0XHRcdH1cclxuXHJcblx0XHRcdGlmICggaXNGdW5jdGlvbiApIHtcclxuXHRcdFx0XHR2YWwgPSB2YWx1ZS5jYWxsKCB0aGlzLCBpLCBqUXVlcnkoIHRoaXMgKS52YWwoKSApO1xyXG5cdFx0XHR9IGVsc2Uge1xyXG5cdFx0XHRcdHZhbCA9IHZhbHVlO1xyXG5cdFx0XHR9XHJcblxyXG5cdFx0XHQvLyBUcmVhdCBudWxsL3VuZGVmaW5lZCBhcyBcIlwiOyBjb252ZXJ0IG51bWJlcnMgdG8gc3RyaW5nXHJcblx0XHRcdGlmICggdmFsID09IG51bGwgKSB7XHJcblx0XHRcdFx0dmFsID0gXCJcIjtcclxuXHJcblx0XHRcdH0gZWxzZSBpZiAoIHR5cGVvZiB2YWwgPT09IFwibnVtYmVyXCIgKSB7XHJcblx0XHRcdFx0dmFsICs9IFwiXCI7XHJcblxyXG5cdFx0XHR9IGVsc2UgaWYgKCBqUXVlcnkuaXNBcnJheSggdmFsICkgKSB7XHJcblx0XHRcdFx0dmFsID0galF1ZXJ5Lm1hcCggdmFsLCBmdW5jdGlvbiggdmFsdWUgKSB7XHJcblx0XHRcdFx0XHRyZXR1cm4gdmFsdWUgPT0gbnVsbCA/IFwiXCIgOiB2YWx1ZSArIFwiXCI7XHJcblx0XHRcdFx0fSApO1xyXG5cdFx0XHR9XHJcblxyXG5cdFx0XHRob29rcyA9IGpRdWVyeS52YWxIb29rc1sgdGhpcy50eXBlIF0gfHwgalF1ZXJ5LnZhbEhvb2tzWyB0aGlzLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCkgXTtcclxuXHJcblx0XHRcdC8vIElmIHNldCByZXR1cm5zIHVuZGVmaW5lZCwgZmFsbCBiYWNrIHRvIG5vcm1hbCBzZXR0aW5nXHJcblx0XHRcdGlmICggIWhvb2tzIHx8ICEoIFwic2V0XCIgaW4gaG9va3MgKSB8fCBob29rcy5zZXQoIHRoaXMsIHZhbCwgXCJ2YWx1ZVwiICkgPT09IHVuZGVmaW5lZCApIHtcclxuXHRcdFx0XHR0aGlzLnZhbHVlID0gdmFsO1xyXG5cdFx0XHR9XHJcblx0XHR9ICk7XHJcblx0fVxyXG59ICk7XHJcblxyXG5qUXVlcnkuZXh0ZW5kKCB7XHJcblx0dmFsSG9va3M6IHtcclxuXHRcdG9wdGlvbjoge1xyXG5cdFx0XHRnZXQ6IGZ1bmN0aW9uKCBlbGVtICkge1xyXG5cclxuXHRcdFx0XHR2YXIgdmFsID0galF1ZXJ5LmZpbmQuYXR0ciggZWxlbSwgXCJ2YWx1ZVwiICk7XHJcblx0XHRcdFx0cmV0dXJuIHZhbCAhPSBudWxsID9cclxuXHRcdFx0XHRcdHZhbCA6XHJcblxyXG5cdFx0XHRcdFx0Ly8gU3VwcG9ydDogSUUxMC0xMStcclxuXHRcdFx0XHRcdC8vIG9wdGlvbi50ZXh0IHRocm93cyBleGNlcHRpb25zICgjMTQ2ODYsICMxNDg1OClcclxuXHRcdFx0XHRcdC8vIFN0cmlwIGFuZCBjb2xsYXBzZSB3aGl0ZXNwYWNlXHJcblx0XHRcdFx0XHQvLyBodHRwczovL2h0bWwuc3BlYy53aGF0d2cub3JnLyNzdHJpcC1hbmQtY29sbGFwc2Utd2hpdGVzcGFjZVxyXG5cdFx0XHRcdFx0alF1ZXJ5LnRyaW0oIGpRdWVyeS50ZXh0KCBlbGVtICkgKS5yZXBsYWNlKCByc3BhY2VzLCBcIiBcIiApO1xyXG5cdFx0XHR9XHJcblx0XHR9LFxyXG5cdFx0c2VsZWN0OiB7XHJcblx0XHRcdGdldDogZnVuY3Rpb24oIGVsZW0gKSB7XHJcblx0XHRcdFx0dmFyIHZhbHVlLCBvcHRpb24sXHJcblx0XHRcdFx0XHRvcHRpb25zID0gZWxlbS5vcHRpb25zLFxyXG5cdFx0XHRcdFx0aW5kZXggPSBlbGVtLnNlbGVjdGVkSW5kZXgsXHJcblx0XHRcdFx0XHRvbmUgPSBlbGVtLnR5cGUgPT09IFwic2VsZWN0LW9uZVwiIHx8IGluZGV4IDwgMCxcclxuXHRcdFx0XHRcdHZhbHVlcyA9IG9uZSA/IG51bGwgOiBbXSxcclxuXHRcdFx0XHRcdG1heCA9IG9uZSA/IGluZGV4ICsgMSA6IG9wdGlvbnMubGVuZ3RoLFxyXG5cdFx0XHRcdFx0aSA9IGluZGV4IDwgMCA/XHJcblx0XHRcdFx0XHRcdG1heCA6XHJcblx0XHRcdFx0XHRcdG9uZSA/IGluZGV4IDogMDtcclxuXHJcblx0XHRcdFx0Ly8gTG9vcCB0aHJvdWdoIGFsbCB0aGUgc2VsZWN0ZWQgb3B0aW9uc1xyXG5cdFx0XHRcdGZvciAoIDsgaSA8IG1heDsgaSsrICkge1xyXG5cdFx0XHRcdFx0b3B0aW9uID0gb3B0aW9uc1sgaSBdO1xyXG5cclxuXHRcdFx0XHRcdC8vIElFOC05IGRvZXNuJ3QgdXBkYXRlIHNlbGVjdGVkIGFmdGVyIGZvcm0gcmVzZXQgKCMyNTUxKVxyXG5cdFx0XHRcdFx0aWYgKCAoIG9wdGlvbi5zZWxlY3RlZCB8fCBpID09PSBpbmRleCApICYmXHJcblxyXG5cdFx0XHRcdFx0XHRcdC8vIERvbid0IHJldHVybiBvcHRpb25zIHRoYXQgYXJlIGRpc2FibGVkIG9yIGluIGEgZGlzYWJsZWQgb3B0Z3JvdXBcclxuXHRcdFx0XHRcdFx0XHQoIHN1cHBvcnQub3B0RGlzYWJsZWQgP1xyXG5cdFx0XHRcdFx0XHRcdFx0IW9wdGlvbi5kaXNhYmxlZCA6IG9wdGlvbi5nZXRBdHRyaWJ1dGUoIFwiZGlzYWJsZWRcIiApID09PSBudWxsICkgJiZcclxuXHRcdFx0XHRcdFx0XHQoICFvcHRpb24ucGFyZW50Tm9kZS5kaXNhYmxlZCB8fFxyXG5cdFx0XHRcdFx0XHRcdFx0IWpRdWVyeS5ub2RlTmFtZSggb3B0aW9uLnBhcmVudE5vZGUsIFwib3B0Z3JvdXBcIiApICkgKSB7XHJcblxyXG5cdFx0XHRcdFx0XHQvLyBHZXQgdGhlIHNwZWNpZmljIHZhbHVlIGZvciB0aGUgb3B0aW9uXHJcblx0XHRcdFx0XHRcdHZhbHVlID0galF1ZXJ5KCBvcHRpb24gKS52YWwoKTtcclxuXHJcblx0XHRcdFx0XHRcdC8vIFdlIGRvbid0IG5lZWQgYW4gYXJyYXkgZm9yIG9uZSBzZWxlY3RzXHJcblx0XHRcdFx0XHRcdGlmICggb25lICkge1xyXG5cdFx0XHRcdFx0XHRcdHJldHVybiB2YWx1ZTtcclxuXHRcdFx0XHRcdFx0fVxyXG5cclxuXHRcdFx0XHRcdFx0Ly8gTXVsdGktU2VsZWN0cyByZXR1cm4gYW4gYXJyYXlcclxuXHRcdFx0XHRcdFx0dmFsdWVzLnB1c2goIHZhbHVlICk7XHJcblx0XHRcdFx0XHR9XHJcblx0XHRcdFx0fVxyXG5cclxuXHRcdFx0XHRyZXR1cm4gdmFsdWVzO1xyXG5cdFx0XHR9LFxyXG5cclxuXHRcdFx0c2V0OiBmdW5jdGlvbiggZWxlbSwgdmFsdWUgKSB7XHJcblx0XHRcdFx0dmFyIG9wdGlvblNldCwgb3B0aW9uLFxyXG5cdFx0XHRcdFx0b3B0aW9ucyA9IGVsZW0ub3B0aW9ucyxcclxuXHRcdFx0XHRcdHZhbHVlcyA9IGpRdWVyeS5tYWtlQXJyYXkoIHZhbHVlICksXHJcblx0XHRcdFx0XHRpID0gb3B0aW9ucy5sZW5ndGg7XHJcblxyXG5cdFx0XHRcdHdoaWxlICggaS0tICkge1xyXG5cdFx0XHRcdFx0b3B0aW9uID0gb3B0aW9uc1sgaSBdO1xyXG5cdFx0XHRcdFx0aWYgKCBvcHRpb24uc2VsZWN0ZWQgPVxyXG5cdFx0XHRcdFx0XHRqUXVlcnkuaW5BcnJheSggalF1ZXJ5LnZhbEhvb2tzLm9wdGlvbi5nZXQoIG9wdGlvbiApLCB2YWx1ZXMgKSA+IC0xXHJcblx0XHRcdFx0XHQpIHtcclxuXHRcdFx0XHRcdFx0b3B0aW9uU2V0ID0gdHJ1ZTtcclxuXHRcdFx0XHRcdH1cclxuXHRcdFx0XHR9XHJcblxyXG5cdFx0XHRcdC8vIEZvcmNlIGJyb3dzZXJzIHRvIGJlaGF2ZSBjb25zaXN0ZW50bHkgd2hlbiBub24tbWF0Y2hpbmcgdmFsdWUgaXMgc2V0XHJcblx0XHRcdFx0aWYgKCAhb3B0aW9uU2V0ICkge1xyXG5cdFx0XHRcdFx0ZWxlbS5zZWxlY3RlZEluZGV4ID0gLTE7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHRcdHJldHVybiB2YWx1ZXM7XHJcblx0XHRcdH1cclxuXHRcdH1cclxuXHR9XHJcbn0gKTtcclxuXHJcbi8vIFJhZGlvcyBhbmQgY2hlY2tib3hlcyBnZXR0ZXIvc2V0dGVyXHJcbmpRdWVyeS5lYWNoKCBbIFwicmFkaW9cIiwgXCJjaGVja2JveFwiIF0sIGZ1bmN0aW9uKCkge1xyXG5cdGpRdWVyeS52YWxIb29rc1sgdGhpcyBdID0ge1xyXG5cdFx0c2V0OiBmdW5jdGlvbiggZWxlbSwgdmFsdWUgKSB7XHJcblx0XHRcdGlmICggalF1ZXJ5LmlzQXJyYXkoIHZhbHVlICkgKSB7XHJcblx0XHRcdFx0cmV0dXJuICggZWxlbS5jaGVja2VkID0galF1ZXJ5LmluQXJyYXkoIGpRdWVyeSggZWxlbSApLnZhbCgpLCB2YWx1ZSApID4gLTEgKTtcclxuXHRcdFx0fVxyXG5cdFx0fVxyXG5cdH07XHJcblx0aWYgKCAhc3VwcG9ydC5jaGVja09uICkge1xyXG5cdFx0alF1ZXJ5LnZhbEhvb2tzWyB0aGlzIF0uZ2V0ID0gZnVuY3Rpb24oIGVsZW0gKSB7XHJcblx0XHRcdHJldHVybiBlbGVtLmdldEF0dHJpYnV0ZSggXCJ2YWx1ZVwiICkgPT09IG51bGwgPyBcIm9uXCIgOiBlbGVtLnZhbHVlO1xyXG5cdFx0fTtcclxuXHR9XHJcbn0gKTtcclxuXHJcblxyXG5cclxuXHJcbi8vIFJldHVybiBqUXVlcnkgZm9yIGF0dHJpYnV0ZXMtb25seSBpbmNsdXNpb25cclxuXHJcblxyXG52YXIgcmZvY3VzTW9ycGggPSAvXig/OmZvY3VzaW5mb2N1c3xmb2N1c291dGJsdXIpJC87XHJcblxyXG5qUXVlcnkuZXh0ZW5kKCBqUXVlcnkuZXZlbnQsIHtcclxuXHJcblx0dHJpZ2dlcjogZnVuY3Rpb24oIGV2ZW50LCBkYXRhLCBlbGVtLCBvbmx5SGFuZGxlcnMgKSB7XHJcblxyXG5cdFx0dmFyIGksIGN1ciwgdG1wLCBidWJibGVUeXBlLCBvbnR5cGUsIGhhbmRsZSwgc3BlY2lhbCxcclxuXHRcdFx0ZXZlbnRQYXRoID0gWyBlbGVtIHx8IGRvY3VtZW50IF0sXHJcblx0XHRcdHR5cGUgPSBoYXNPd24uY2FsbCggZXZlbnQsIFwidHlwZVwiICkgPyBldmVudC50eXBlIDogZXZlbnQsXHJcblx0XHRcdG5hbWVzcGFjZXMgPSBoYXNPd24uY2FsbCggZXZlbnQsIFwibmFtZXNwYWNlXCIgKSA/IGV2ZW50Lm5hbWVzcGFjZS5zcGxpdCggXCIuXCIgKSA6IFtdO1xyXG5cclxuXHRcdGN1ciA9IHRtcCA9IGVsZW0gPSBlbGVtIHx8IGRvY3VtZW50O1xyXG5cclxuXHRcdC8vIERvbid0IGRvIGV2ZW50cyBvbiB0ZXh0IGFuZCBjb21tZW50IG5vZGVzXHJcblx0XHRpZiAoIGVsZW0ubm9kZVR5cGUgPT09IDMgfHwgZWxlbS5ub2RlVHlwZSA9PT0gOCApIHtcclxuXHRcdFx0cmV0dXJuO1xyXG5cdFx0fVxyXG5cclxuXHRcdC8vIGZvY3VzL2JsdXIgbW9ycGhzIHRvIGZvY3VzaW4vb3V0OyBlbnN1cmUgd2UncmUgbm90IGZpcmluZyB0aGVtIHJpZ2h0IG5vd1xyXG5cdFx0aWYgKCByZm9jdXNNb3JwaC50ZXN0KCB0eXBlICsgalF1ZXJ5LmV2ZW50LnRyaWdnZXJlZCApICkge1xyXG5cdFx0XHRyZXR1cm47XHJcblx0XHR9XHJcblxyXG5cdFx0aWYgKCB0eXBlLmluZGV4T2YoIFwiLlwiICkgPiAtMSApIHtcclxuXHJcblx0XHRcdC8vIE5hbWVzcGFjZWQgdHJpZ2dlcjsgY3JlYXRlIGEgcmVnZXhwIHRvIG1hdGNoIGV2ZW50IHR5cGUgaW4gaGFuZGxlKClcclxuXHRcdFx0bmFtZXNwYWNlcyA9IHR5cGUuc3BsaXQoIFwiLlwiICk7XHJcblx0XHRcdHR5cGUgPSBuYW1lc3BhY2VzLnNoaWZ0KCk7XHJcblx0XHRcdG5hbWVzcGFjZXMuc29ydCgpO1xyXG5cdFx0fVxyXG5cdFx0b250eXBlID0gdHlwZS5pbmRleE9mKCBcIjpcIiApIDwgMCAmJiBcIm9uXCIgKyB0eXBlO1xyXG5cclxuXHRcdC8vIENhbGxlciBjYW4gcGFzcyBpbiBhIGpRdWVyeS5FdmVudCBvYmplY3QsIE9iamVjdCwgb3IganVzdCBhbiBldmVudCB0eXBlIHN0cmluZ1xyXG5cdFx0ZXZlbnQgPSBldmVudFsgalF1ZXJ5LmV4cGFuZG8gXSA/XHJcblx0XHRcdGV2ZW50IDpcclxuXHRcdFx0bmV3IGpRdWVyeS5FdmVudCggdHlwZSwgdHlwZW9mIGV2ZW50ID09PSBcIm9iamVjdFwiICYmIGV2ZW50ICk7XHJcblxyXG5cdFx0Ly8gVHJpZ2dlciBiaXRtYXNrOiAmIDEgZm9yIG5hdGl2ZSBoYW5kbGVyczsgJiAyIGZvciBqUXVlcnkgKGFsd2F5cyB0cnVlKVxyXG5cdFx0ZXZlbnQuaXNUcmlnZ2VyID0gb25seUhhbmRsZXJzID8gMiA6IDM7XHJcblx0XHRldmVudC5uYW1lc3BhY2UgPSBuYW1lc3BhY2VzLmpvaW4oIFwiLlwiICk7XHJcblx0XHRldmVudC5ybmFtZXNwYWNlID0gZXZlbnQubmFtZXNwYWNlID9cclxuXHRcdFx0bmV3IFJlZ0V4cCggXCIoXnxcXFxcLilcIiArIG5hbWVzcGFjZXMuam9pbiggXCJcXFxcLig/Oi4qXFxcXC58KVwiICkgKyBcIihcXFxcLnwkKVwiICkgOlxyXG5cdFx0XHRudWxsO1xyXG5cclxuXHRcdC8vIENsZWFuIHVwIHRoZSBldmVudCBpbiBjYXNlIGl0IGlzIGJlaW5nIHJldXNlZFxyXG5cdFx0ZXZlbnQucmVzdWx0ID0gdW5kZWZpbmVkO1xyXG5cdFx0aWYgKCAhZXZlbnQudGFyZ2V0ICkge1xyXG5cdFx0XHRldmVudC50YXJnZXQgPSBlbGVtO1xyXG5cdFx0fVxyXG5cclxuXHRcdC8vIENsb25lIGFueSBpbmNvbWluZyBkYXRhIGFuZCBwcmVwZW5kIHRoZSBldmVudCwgY3JlYXRpbmcgdGhlIGhhbmRsZXIgYXJnIGxpc3RcclxuXHRcdGRhdGEgPSBkYXRhID09IG51bGwgP1xyXG5cdFx0XHRbIGV2ZW50IF0gOlxyXG5cdFx0XHRqUXVlcnkubWFrZUFycmF5KCBkYXRhLCBbIGV2ZW50IF0gKTtcclxuXHJcblx0XHQvLyBBbGxvdyBzcGVjaWFsIGV2ZW50cyB0byBkcmF3IG91dHNpZGUgdGhlIGxpbmVzXHJcblx0XHRzcGVjaWFsID0galF1ZXJ5LmV2ZW50LnNwZWNpYWxbIHR5cGUgXSB8fCB7fTtcclxuXHRcdGlmICggIW9ubHlIYW5kbGVycyAmJiBzcGVjaWFsLnRyaWdnZXIgJiYgc3BlY2lhbC50cmlnZ2VyLmFwcGx5KCBlbGVtLCBkYXRhICkgPT09IGZhbHNlICkge1xyXG5cdFx0XHRyZXR1cm47XHJcblx0XHR9XHJcblxyXG5cdFx0Ly8gRGV0ZXJtaW5lIGV2ZW50IHByb3BhZ2F0aW9uIHBhdGggaW4gYWR2YW5jZSwgcGVyIFczQyBldmVudHMgc3BlYyAoIzk5NTEpXHJcblx0XHQvLyBCdWJibGUgdXAgdG8gZG9jdW1lbnQsIHRoZW4gdG8gd2luZG93OyB3YXRjaCBmb3IgYSBnbG9iYWwgb3duZXJEb2N1bWVudCB2YXIgKCM5NzI0KVxyXG5cdFx0aWYgKCAhb25seUhhbmRsZXJzICYmICFzcGVjaWFsLm5vQnViYmxlICYmICFqUXVlcnkuaXNXaW5kb3coIGVsZW0gKSApIHtcclxuXHJcblx0XHRcdGJ1YmJsZVR5cGUgPSBzcGVjaWFsLmRlbGVnYXRlVHlwZSB8fCB0eXBlO1xyXG5cdFx0XHRpZiAoICFyZm9jdXNNb3JwaC50ZXN0KCBidWJibGVUeXBlICsgdHlwZSApICkge1xyXG5cdFx0XHRcdGN1ciA9IGN1ci5wYXJlbnROb2RlO1xyXG5cdFx0XHR9XHJcblx0XHRcdGZvciAoIDsgY3VyOyBjdXIgPSBjdXIucGFyZW50Tm9kZSApIHtcclxuXHRcdFx0XHRldmVudFBhdGgucHVzaCggY3VyICk7XHJcblx0XHRcdFx0dG1wID0gY3VyO1xyXG5cdFx0XHR9XHJcblxyXG5cdFx0XHQvLyBPbmx5IGFkZCB3aW5kb3cgaWYgd2UgZ290IHRvIGRvY3VtZW50IChlLmcuLCBub3QgcGxhaW4gb2JqIG9yIGRldGFjaGVkIERPTSlcclxuXHRcdFx0aWYgKCB0bXAgPT09ICggZWxlbS5vd25lckRvY3VtZW50IHx8IGRvY3VtZW50ICkgKSB7XHJcblx0XHRcdFx0ZXZlbnRQYXRoLnB1c2goIHRtcC5kZWZhdWx0VmlldyB8fCB0bXAucGFyZW50V2luZG93IHx8IHdpbmRvdyApO1xyXG5cdFx0XHR9XHJcblx0XHR9XHJcblxyXG5cdFx0Ly8gRmlyZSBoYW5kbGVycyBvbiB0aGUgZXZlbnQgcGF0aFxyXG5cdFx0aSA9IDA7XHJcblx0XHR3aGlsZSAoICggY3VyID0gZXZlbnRQYXRoWyBpKysgXSApICYmICFldmVudC5pc1Byb3BhZ2F0aW9uU3RvcHBlZCgpICkge1xyXG5cclxuXHRcdFx0ZXZlbnQudHlwZSA9IGkgPiAxID9cclxuXHRcdFx0XHRidWJibGVUeXBlIDpcclxuXHRcdFx0XHRzcGVjaWFsLmJpbmRUeXBlIHx8IHR5cGU7XHJcblxyXG5cdFx0XHQvLyBqUXVlcnkgaGFuZGxlclxyXG5cdFx0XHRoYW5kbGUgPSAoIGRhdGFQcml2LmdldCggY3VyLCBcImV2ZW50c1wiICkgfHwge30gKVsgZXZlbnQudHlwZSBdICYmXHJcblx0XHRcdFx0ZGF0YVByaXYuZ2V0KCBjdXIsIFwiaGFuZGxlXCIgKTtcclxuXHRcdFx0aWYgKCBoYW5kbGUgKSB7XHJcblx0XHRcdFx0aGFuZGxlLmFwcGx5KCBjdXIsIGRhdGEgKTtcclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0Ly8gTmF0aXZlIGhhbmRsZXJcclxuXHRcdFx0aGFuZGxlID0gb250eXBlICYmIGN1clsgb250eXBlIF07XHJcblx0XHRcdGlmICggaGFuZGxlICYmIGhhbmRsZS5hcHBseSAmJiBhY2NlcHREYXRhKCBjdXIgKSApIHtcclxuXHRcdFx0XHRldmVudC5yZXN1bHQgPSBoYW5kbGUuYXBwbHkoIGN1ciwgZGF0YSApO1xyXG5cdFx0XHRcdGlmICggZXZlbnQucmVzdWx0ID09PSBmYWxzZSApIHtcclxuXHRcdFx0XHRcdGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9XHJcblx0XHR9XHJcblx0XHRldmVudC50eXBlID0gdHlwZTtcclxuXHJcblx0XHQvLyBJZiBub2JvZHkgcHJldmVudGVkIHRoZSBkZWZhdWx0IGFjdGlvbiwgZG8gaXQgbm93XHJcblx0XHRpZiAoICFvbmx5SGFuZGxlcnMgJiYgIWV2ZW50LmlzRGVmYXVsdFByZXZlbnRlZCgpICkge1xyXG5cclxuXHRcdFx0aWYgKCAoICFzcGVjaWFsLl9kZWZhdWx0IHx8XHJcblx0XHRcdFx0c3BlY2lhbC5fZGVmYXVsdC5hcHBseSggZXZlbnRQYXRoLnBvcCgpLCBkYXRhICkgPT09IGZhbHNlICkgJiZcclxuXHRcdFx0XHRhY2NlcHREYXRhKCBlbGVtICkgKSB7XHJcblxyXG5cdFx0XHRcdC8vIENhbGwgYSBuYXRpdmUgRE9NIG1ldGhvZCBvbiB0aGUgdGFyZ2V0IHdpdGggdGhlIHNhbWUgbmFtZSBuYW1lIGFzIHRoZSBldmVudC5cclxuXHRcdFx0XHQvLyBEb24ndCBkbyBkZWZhdWx0IGFjdGlvbnMgb24gd2luZG93LCB0aGF0J3Mgd2hlcmUgZ2xvYmFsIHZhcmlhYmxlcyBiZSAoIzYxNzApXHJcblx0XHRcdFx0aWYgKCBvbnR5cGUgJiYgalF1ZXJ5LmlzRnVuY3Rpb24oIGVsZW1bIHR5cGUgXSApICYmICFqUXVlcnkuaXNXaW5kb3coIGVsZW0gKSApIHtcclxuXHJcblx0XHRcdFx0XHQvLyBEb24ndCByZS10cmlnZ2VyIGFuIG9uRk9PIGV2ZW50IHdoZW4gd2UgY2FsbCBpdHMgRk9PKCkgbWV0aG9kXHJcblx0XHRcdFx0XHR0bXAgPSBlbGVtWyBvbnR5cGUgXTtcclxuXHJcblx0XHRcdFx0XHRpZiAoIHRtcCApIHtcclxuXHRcdFx0XHRcdFx0ZWxlbVsgb250eXBlIF0gPSBudWxsO1xyXG5cdFx0XHRcdFx0fVxyXG5cclxuXHRcdFx0XHRcdC8vIFByZXZlbnQgcmUtdHJpZ2dlcmluZyBvZiB0aGUgc2FtZSBldmVudCwgc2luY2Ugd2UgYWxyZWFkeSBidWJibGVkIGl0IGFib3ZlXHJcblx0XHRcdFx0XHRqUXVlcnkuZXZlbnQudHJpZ2dlcmVkID0gdHlwZTtcclxuXHRcdFx0XHRcdGVsZW1bIHR5cGUgXSgpO1xyXG5cdFx0XHRcdFx0alF1ZXJ5LmV2ZW50LnRyaWdnZXJlZCA9IHVuZGVmaW5lZDtcclxuXHJcblx0XHRcdFx0XHRpZiAoIHRtcCApIHtcclxuXHRcdFx0XHRcdFx0ZWxlbVsgb250eXBlIF0gPSB0bXA7XHJcblx0XHRcdFx0XHR9XHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9XHJcblx0XHR9XHJcblxyXG5cdFx0cmV0dXJuIGV2ZW50LnJlc3VsdDtcclxuXHR9LFxyXG5cclxuXHQvLyBQaWdneWJhY2sgb24gYSBkb25vciBldmVudCB0byBzaW11bGF0ZSBhIGRpZmZlcmVudCBvbmVcclxuXHQvLyBVc2VkIG9ubHkgZm9yIGBmb2N1cyhpbiB8IG91dClgIGV2ZW50c1xyXG5cdHNpbXVsYXRlOiBmdW5jdGlvbiggdHlwZSwgZWxlbSwgZXZlbnQgKSB7XHJcblx0XHR2YXIgZSA9IGpRdWVyeS5leHRlbmQoXHJcblx0XHRcdG5ldyBqUXVlcnkuRXZlbnQoKSxcclxuXHRcdFx0ZXZlbnQsXHJcblx0XHRcdHtcclxuXHRcdFx0XHR0eXBlOiB0eXBlLFxyXG5cdFx0XHRcdGlzU2ltdWxhdGVkOiB0cnVlXHJcblx0XHRcdH1cclxuXHRcdCk7XHJcblxyXG5cdFx0alF1ZXJ5LmV2ZW50LnRyaWdnZXIoIGUsIG51bGwsIGVsZW0gKTtcclxuXHR9XHJcblxyXG59ICk7XHJcblxyXG5qUXVlcnkuZm4uZXh0ZW5kKCB7XHJcblxyXG5cdHRyaWdnZXI6IGZ1bmN0aW9uKCB0eXBlLCBkYXRhICkge1xyXG5cdFx0cmV0dXJuIHRoaXMuZWFjaCggZnVuY3Rpb24oKSB7XHJcblx0XHRcdGpRdWVyeS5ldmVudC50cmlnZ2VyKCB0eXBlLCBkYXRhLCB0aGlzICk7XHJcblx0XHR9ICk7XHJcblx0fSxcclxuXHR0cmlnZ2VySGFuZGxlcjogZnVuY3Rpb24oIHR5cGUsIGRhdGEgKSB7XHJcblx0XHR2YXIgZWxlbSA9IHRoaXNbIDAgXTtcclxuXHRcdGlmICggZWxlbSApIHtcclxuXHRcdFx0cmV0dXJuIGpRdWVyeS5ldmVudC50cmlnZ2VyKCB0eXBlLCBkYXRhLCBlbGVtLCB0cnVlICk7XHJcblx0XHR9XHJcblx0fVxyXG59ICk7XHJcblxyXG5cclxualF1ZXJ5LmVhY2goICggXCJibHVyIGZvY3VzIGZvY3VzaW4gZm9jdXNvdXQgbG9hZCByZXNpemUgc2Nyb2xsIHVubG9hZCBjbGljayBkYmxjbGljayBcIiArXHJcblx0XCJtb3VzZWRvd24gbW91c2V1cCBtb3VzZW1vdmUgbW91c2VvdmVyIG1vdXNlb3V0IG1vdXNlZW50ZXIgbW91c2VsZWF2ZSBcIiArXHJcblx0XCJjaGFuZ2Ugc2VsZWN0IHN1Ym1pdCBrZXlkb3duIGtleXByZXNzIGtleXVwIGVycm9yIGNvbnRleHRtZW51XCIgKS5zcGxpdCggXCIgXCIgKSxcclxuXHRmdW5jdGlvbiggaSwgbmFtZSApIHtcclxuXHJcblx0Ly8gSGFuZGxlIGV2ZW50IGJpbmRpbmdcclxuXHRqUXVlcnkuZm5bIG5hbWUgXSA9IGZ1bmN0aW9uKCBkYXRhLCBmbiApIHtcclxuXHRcdHJldHVybiBhcmd1bWVudHMubGVuZ3RoID4gMCA/XHJcblx0XHRcdHRoaXMub24oIG5hbWUsIG51bGwsIGRhdGEsIGZuICkgOlxyXG5cdFx0XHR0aGlzLnRyaWdnZXIoIG5hbWUgKTtcclxuXHR9O1xyXG59ICk7XHJcblxyXG5qUXVlcnkuZm4uZXh0ZW5kKCB7XHJcblx0aG92ZXI6IGZ1bmN0aW9uKCBmbk92ZXIsIGZuT3V0ICkge1xyXG5cdFx0cmV0dXJuIHRoaXMubW91c2VlbnRlciggZm5PdmVyICkubW91c2VsZWF2ZSggZm5PdXQgfHwgZm5PdmVyICk7XHJcblx0fVxyXG59ICk7XHJcblxyXG5cclxuXHJcblxyXG5zdXBwb3J0LmZvY3VzaW4gPSBcIm9uZm9jdXNpblwiIGluIHdpbmRvdztcclxuXHJcblxyXG4vLyBTdXBwb3J0OiBGaXJlZm94XHJcbi8vIEZpcmVmb3ggZG9lc24ndCBoYXZlIGZvY3VzKGluIHwgb3V0KSBldmVudHNcclxuLy8gUmVsYXRlZCB0aWNrZXQgLSBodHRwczovL2J1Z3ppbGxhLm1vemlsbGEub3JnL3Nob3dfYnVnLmNnaT9pZD02ODc3ODdcclxuLy9cclxuLy8gU3VwcG9ydDogQ2hyb21lLCBTYWZhcmlcclxuLy8gZm9jdXMoaW4gfCBvdXQpIGV2ZW50cyBmaXJlIGFmdGVyIGZvY3VzICYgYmx1ciBldmVudHMsXHJcbi8vIHdoaWNoIGlzIHNwZWMgdmlvbGF0aW9uIC0gaHR0cDovL3d3dy53My5vcmcvVFIvRE9NLUxldmVsLTMtRXZlbnRzLyNldmVudHMtZm9jdXNldmVudC1ldmVudC1vcmRlclxyXG4vLyBSZWxhdGVkIHRpY2tldCAtIGh0dHBzOi8vY29kZS5nb29nbGUuY29tL3AvY2hyb21pdW0vaXNzdWVzL2RldGFpbD9pZD00NDk4NTdcclxuaWYgKCAhc3VwcG9ydC5mb2N1c2luICkge1xyXG5cdGpRdWVyeS5lYWNoKCB7IGZvY3VzOiBcImZvY3VzaW5cIiwgYmx1cjogXCJmb2N1c291dFwiIH0sIGZ1bmN0aW9uKCBvcmlnLCBmaXggKSB7XHJcblxyXG5cdFx0Ly8gQXR0YWNoIGEgc2luZ2xlIGNhcHR1cmluZyBoYW5kbGVyIG9uIHRoZSBkb2N1bWVudCB3aGlsZSBzb21lb25lIHdhbnRzIGZvY3VzaW4vZm9jdXNvdXRcclxuXHRcdHZhciBoYW5kbGVyID0gZnVuY3Rpb24oIGV2ZW50ICkge1xyXG5cdFx0XHRqUXVlcnkuZXZlbnQuc2ltdWxhdGUoIGZpeCwgZXZlbnQudGFyZ2V0LCBqUXVlcnkuZXZlbnQuZml4KCBldmVudCApICk7XHJcblx0XHR9O1xyXG5cclxuXHRcdGpRdWVyeS5ldmVudC5zcGVjaWFsWyBmaXggXSA9IHtcclxuXHRcdFx0c2V0dXA6IGZ1bmN0aW9uKCkge1xyXG5cdFx0XHRcdHZhciBkb2MgPSB0aGlzLm93bmVyRG9jdW1lbnQgfHwgdGhpcyxcclxuXHRcdFx0XHRcdGF0dGFjaGVzID0gZGF0YVByaXYuYWNjZXNzKCBkb2MsIGZpeCApO1xyXG5cclxuXHRcdFx0XHRpZiAoICFhdHRhY2hlcyApIHtcclxuXHRcdFx0XHRcdGRvYy5hZGRFdmVudExpc3RlbmVyKCBvcmlnLCBoYW5kbGVyLCB0cnVlICk7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHRcdGRhdGFQcml2LmFjY2VzcyggZG9jLCBmaXgsICggYXR0YWNoZXMgfHwgMCApICsgMSApO1xyXG5cdFx0XHR9LFxyXG5cdFx0XHR0ZWFyZG93bjogZnVuY3Rpb24oKSB7XHJcblx0XHRcdFx0dmFyIGRvYyA9IHRoaXMub3duZXJEb2N1bWVudCB8fCB0aGlzLFxyXG5cdFx0XHRcdFx0YXR0YWNoZXMgPSBkYXRhUHJpdi5hY2Nlc3MoIGRvYywgZml4ICkgLSAxO1xyXG5cclxuXHRcdFx0XHRpZiAoICFhdHRhY2hlcyApIHtcclxuXHRcdFx0XHRcdGRvYy5yZW1vdmVFdmVudExpc3RlbmVyKCBvcmlnLCBoYW5kbGVyLCB0cnVlICk7XHJcblx0XHRcdFx0XHRkYXRhUHJpdi5yZW1vdmUoIGRvYywgZml4ICk7XHJcblxyXG5cdFx0XHRcdH0gZWxzZSB7XHJcblx0XHRcdFx0XHRkYXRhUHJpdi5hY2Nlc3MoIGRvYywgZml4LCBhdHRhY2hlcyApO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0fVxyXG5cdFx0fTtcclxuXHR9ICk7XHJcbn1cclxudmFyIGxvY2F0aW9uID0gd2luZG93LmxvY2F0aW9uO1xyXG5cclxudmFyIG5vbmNlID0galF1ZXJ5Lm5vdygpO1xyXG5cclxudmFyIHJxdWVyeSA9ICggL1xcPy8gKTtcclxuXHJcblxyXG5cclxuLy8gU3VwcG9ydDogQW5kcm9pZCAyLjNcclxuLy8gV29ya2Fyb3VuZCBmYWlsdXJlIHRvIHN0cmluZy1jYXN0IG51bGwgaW5wdXRcclxualF1ZXJ5LnBhcnNlSlNPTiA9IGZ1bmN0aW9uKCBkYXRhICkge1xyXG5cdHJldHVybiBKU09OLnBhcnNlKCBkYXRhICsgXCJcIiApO1xyXG59O1xyXG5cclxuXHJcbi8vIENyb3NzLWJyb3dzZXIgeG1sIHBhcnNpbmdcclxualF1ZXJ5LnBhcnNlWE1MID0gZnVuY3Rpb24oIGRhdGEgKSB7XHJcblx0dmFyIHhtbDtcclxuXHRpZiAoICFkYXRhIHx8IHR5cGVvZiBkYXRhICE9PSBcInN0cmluZ1wiICkge1xyXG5cdFx0cmV0dXJuIG51bGw7XHJcblx0fVxyXG5cclxuXHQvLyBTdXBwb3J0OiBJRTlcclxuXHR0cnkge1xyXG5cdFx0eG1sID0gKCBuZXcgd2luZG93LkRPTVBhcnNlcigpICkucGFyc2VGcm9tU3RyaW5nKCBkYXRhLCBcInRleHQveG1sXCIgKTtcclxuXHR9IGNhdGNoICggZSApIHtcclxuXHRcdHhtbCA9IHVuZGVmaW5lZDtcclxuXHR9XHJcblxyXG5cdGlmICggIXhtbCB8fCB4bWwuZ2V0RWxlbWVudHNCeVRhZ05hbWUoIFwicGFyc2VyZXJyb3JcIiApLmxlbmd0aCApIHtcclxuXHRcdGpRdWVyeS5lcnJvciggXCJJbnZhbGlkIFhNTDogXCIgKyBkYXRhICk7XHJcblx0fVxyXG5cdHJldHVybiB4bWw7XHJcbn07XHJcblxyXG5cclxudmFyXHJcblx0cmhhc2ggPSAvIy4qJC8sXHJcblx0cnRzID0gLyhbPyZdKV89W14mXSovLFxyXG5cdHJoZWFkZXJzID0gL14oLio/KTpbIFxcdF0qKFteXFxyXFxuXSopJC9tZyxcclxuXHJcblx0Ly8gIzc2NTMsICM4MTI1LCAjODE1MjogbG9jYWwgcHJvdG9jb2wgZGV0ZWN0aW9uXHJcblx0cmxvY2FsUHJvdG9jb2wgPSAvXig/OmFib3V0fGFwcHxhcHAtc3RvcmFnZXwuKy1leHRlbnNpb258ZmlsZXxyZXN8d2lkZ2V0KTokLyxcclxuXHRybm9Db250ZW50ID0gL14oPzpHRVR8SEVBRCkkLyxcclxuXHRycHJvdG9jb2wgPSAvXlxcL1xcLy8sXHJcblxyXG5cdC8qIFByZWZpbHRlcnNcclxuXHQgKiAxKSBUaGV5IGFyZSB1c2VmdWwgdG8gaW50cm9kdWNlIGN1c3RvbSBkYXRhVHlwZXMgKHNlZSBhamF4L2pzb25wLmpzIGZvciBhbiBleGFtcGxlKVxyXG5cdCAqIDIpIFRoZXNlIGFyZSBjYWxsZWQ6XHJcblx0ICogICAgLSBCRUZPUkUgYXNraW5nIGZvciBhIHRyYW5zcG9ydFxyXG5cdCAqICAgIC0gQUZURVIgcGFyYW0gc2VyaWFsaXphdGlvbiAocy5kYXRhIGlzIGEgc3RyaW5nIGlmIHMucHJvY2Vzc0RhdGEgaXMgdHJ1ZSlcclxuXHQgKiAzKSBrZXkgaXMgdGhlIGRhdGFUeXBlXHJcblx0ICogNCkgdGhlIGNhdGNoYWxsIHN5bWJvbCBcIipcIiBjYW4gYmUgdXNlZFxyXG5cdCAqIDUpIGV4ZWN1dGlvbiB3aWxsIHN0YXJ0IHdpdGggdHJhbnNwb3J0IGRhdGFUeXBlIGFuZCBUSEVOIGNvbnRpbnVlIGRvd24gdG8gXCIqXCIgaWYgbmVlZGVkXHJcblx0ICovXHJcblx0cHJlZmlsdGVycyA9IHt9LFxyXG5cclxuXHQvKiBUcmFuc3BvcnRzIGJpbmRpbmdzXHJcblx0ICogMSkga2V5IGlzIHRoZSBkYXRhVHlwZVxyXG5cdCAqIDIpIHRoZSBjYXRjaGFsbCBzeW1ib2wgXCIqXCIgY2FuIGJlIHVzZWRcclxuXHQgKiAzKSBzZWxlY3Rpb24gd2lsbCBzdGFydCB3aXRoIHRyYW5zcG9ydCBkYXRhVHlwZSBhbmQgVEhFTiBnbyB0byBcIipcIiBpZiBuZWVkZWRcclxuXHQgKi9cclxuXHR0cmFuc3BvcnRzID0ge30sXHJcblxyXG5cdC8vIEF2b2lkIGNvbW1lbnQtcHJvbG9nIGNoYXIgc2VxdWVuY2UgKCMxMDA5OCk7IG11c3QgYXBwZWFzZSBsaW50IGFuZCBldmFkZSBjb21wcmVzc2lvblxyXG5cdGFsbFR5cGVzID0gXCIqL1wiLmNvbmNhdCggXCIqXCIgKSxcclxuXHJcblx0Ly8gQW5jaG9yIHRhZyBmb3IgcGFyc2luZyB0aGUgZG9jdW1lbnQgb3JpZ2luXHJcblx0b3JpZ2luQW5jaG9yID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCggXCJhXCIgKTtcclxuXHRvcmlnaW5BbmNob3IuaHJlZiA9IGxvY2F0aW9uLmhyZWY7XHJcblxyXG4vLyBCYXNlIFwiY29uc3RydWN0b3JcIiBmb3IgalF1ZXJ5LmFqYXhQcmVmaWx0ZXIgYW5kIGpRdWVyeS5hamF4VHJhbnNwb3J0XHJcbmZ1bmN0aW9uIGFkZFRvUHJlZmlsdGVyc09yVHJhbnNwb3J0cyggc3RydWN0dXJlICkge1xyXG5cclxuXHQvLyBkYXRhVHlwZUV4cHJlc3Npb24gaXMgb3B0aW9uYWwgYW5kIGRlZmF1bHRzIHRvIFwiKlwiXHJcblx0cmV0dXJuIGZ1bmN0aW9uKCBkYXRhVHlwZUV4cHJlc3Npb24sIGZ1bmMgKSB7XHJcblxyXG5cdFx0aWYgKCB0eXBlb2YgZGF0YVR5cGVFeHByZXNzaW9uICE9PSBcInN0cmluZ1wiICkge1xyXG5cdFx0XHRmdW5jID0gZGF0YVR5cGVFeHByZXNzaW9uO1xyXG5cdFx0XHRkYXRhVHlwZUV4cHJlc3Npb24gPSBcIipcIjtcclxuXHRcdH1cclxuXHJcblx0XHR2YXIgZGF0YVR5cGUsXHJcblx0XHRcdGkgPSAwLFxyXG5cdFx0XHRkYXRhVHlwZXMgPSBkYXRhVHlwZUV4cHJlc3Npb24udG9Mb3dlckNhc2UoKS5tYXRjaCggcm5vdHdoaXRlICkgfHwgW107XHJcblxyXG5cdFx0aWYgKCBqUXVlcnkuaXNGdW5jdGlvbiggZnVuYyApICkge1xyXG5cclxuXHRcdFx0Ly8gRm9yIGVhY2ggZGF0YVR5cGUgaW4gdGhlIGRhdGFUeXBlRXhwcmVzc2lvblxyXG5cdFx0XHR3aGlsZSAoICggZGF0YVR5cGUgPSBkYXRhVHlwZXNbIGkrKyBdICkgKSB7XHJcblxyXG5cdFx0XHRcdC8vIFByZXBlbmQgaWYgcmVxdWVzdGVkXHJcblx0XHRcdFx0aWYgKCBkYXRhVHlwZVsgMCBdID09PSBcIitcIiApIHtcclxuXHRcdFx0XHRcdGRhdGFUeXBlID0gZGF0YVR5cGUuc2xpY2UoIDEgKSB8fCBcIipcIjtcclxuXHRcdFx0XHRcdCggc3RydWN0dXJlWyBkYXRhVHlwZSBdID0gc3RydWN0dXJlWyBkYXRhVHlwZSBdIHx8IFtdICkudW5zaGlmdCggZnVuYyApO1xyXG5cclxuXHRcdFx0XHQvLyBPdGhlcndpc2UgYXBwZW5kXHJcblx0XHRcdFx0fSBlbHNlIHtcclxuXHRcdFx0XHRcdCggc3RydWN0dXJlWyBkYXRhVHlwZSBdID0gc3RydWN0dXJlWyBkYXRhVHlwZSBdIHx8IFtdICkucHVzaCggZnVuYyApO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0fVxyXG5cdFx0fVxyXG5cdH07XHJcbn1cclxuXHJcbi8vIEJhc2UgaW5zcGVjdGlvbiBmdW5jdGlvbiBmb3IgcHJlZmlsdGVycyBhbmQgdHJhbnNwb3J0c1xyXG5mdW5jdGlvbiBpbnNwZWN0UHJlZmlsdGVyc09yVHJhbnNwb3J0cyggc3RydWN0dXJlLCBvcHRpb25zLCBvcmlnaW5hbE9wdGlvbnMsIGpxWEhSICkge1xyXG5cclxuXHR2YXIgaW5zcGVjdGVkID0ge30sXHJcblx0XHRzZWVraW5nVHJhbnNwb3J0ID0gKCBzdHJ1Y3R1cmUgPT09IHRyYW5zcG9ydHMgKTtcclxuXHJcblx0ZnVuY3Rpb24gaW5zcGVjdCggZGF0YVR5cGUgKSB7XHJcblx0XHR2YXIgc2VsZWN0ZWQ7XHJcblx0XHRpbnNwZWN0ZWRbIGRhdGFUeXBlIF0gPSB0cnVlO1xyXG5cdFx0alF1ZXJ5LmVhY2goIHN0cnVjdHVyZVsgZGF0YVR5cGUgXSB8fCBbXSwgZnVuY3Rpb24oIF8sIHByZWZpbHRlck9yRmFjdG9yeSApIHtcclxuXHRcdFx0dmFyIGRhdGFUeXBlT3JUcmFuc3BvcnQgPSBwcmVmaWx0ZXJPckZhY3RvcnkoIG9wdGlvbnMsIG9yaWdpbmFsT3B0aW9ucywganFYSFIgKTtcclxuXHRcdFx0aWYgKCB0eXBlb2YgZGF0YVR5cGVPclRyYW5zcG9ydCA9PT0gXCJzdHJpbmdcIiAmJlxyXG5cdFx0XHRcdCFzZWVraW5nVHJhbnNwb3J0ICYmICFpbnNwZWN0ZWRbIGRhdGFUeXBlT3JUcmFuc3BvcnQgXSApIHtcclxuXHJcblx0XHRcdFx0b3B0aW9ucy5kYXRhVHlwZXMudW5zaGlmdCggZGF0YVR5cGVPclRyYW5zcG9ydCApO1xyXG5cdFx0XHRcdGluc3BlY3QoIGRhdGFUeXBlT3JUcmFuc3BvcnQgKTtcclxuXHRcdFx0XHRyZXR1cm4gZmFsc2U7XHJcblx0XHRcdH0gZWxzZSBpZiAoIHNlZWtpbmdUcmFuc3BvcnQgKSB7XHJcblx0XHRcdFx0cmV0dXJuICEoIHNlbGVjdGVkID0gZGF0YVR5cGVPclRyYW5zcG9ydCApO1xyXG5cdFx0XHR9XHJcblx0XHR9ICk7XHJcblx0XHRyZXR1cm4gc2VsZWN0ZWQ7XHJcblx0fVxyXG5cclxuXHRyZXR1cm4gaW5zcGVjdCggb3B0aW9ucy5kYXRhVHlwZXNbIDAgXSApIHx8ICFpbnNwZWN0ZWRbIFwiKlwiIF0gJiYgaW5zcGVjdCggXCIqXCIgKTtcclxufVxyXG5cclxuLy8gQSBzcGVjaWFsIGV4dGVuZCBmb3IgYWpheCBvcHRpb25zXHJcbi8vIHRoYXQgdGFrZXMgXCJmbGF0XCIgb3B0aW9ucyAobm90IHRvIGJlIGRlZXAgZXh0ZW5kZWQpXHJcbi8vIEZpeGVzICM5ODg3XHJcbmZ1bmN0aW9uIGFqYXhFeHRlbmQoIHRhcmdldCwgc3JjICkge1xyXG5cdHZhciBrZXksIGRlZXAsXHJcblx0XHRmbGF0T3B0aW9ucyA9IGpRdWVyeS5hamF4U2V0dGluZ3MuZmxhdE9wdGlvbnMgfHwge307XHJcblxyXG5cdGZvciAoIGtleSBpbiBzcmMgKSB7XHJcblx0XHRpZiAoIHNyY1sga2V5IF0gIT09IHVuZGVmaW5lZCApIHtcclxuXHRcdFx0KCBmbGF0T3B0aW9uc1sga2V5IF0gPyB0YXJnZXQgOiAoIGRlZXAgfHwgKCBkZWVwID0ge30gKSApIClbIGtleSBdID0gc3JjWyBrZXkgXTtcclxuXHRcdH1cclxuXHR9XHJcblx0aWYgKCBkZWVwICkge1xyXG5cdFx0alF1ZXJ5LmV4dGVuZCggdHJ1ZSwgdGFyZ2V0LCBkZWVwICk7XHJcblx0fVxyXG5cclxuXHRyZXR1cm4gdGFyZ2V0O1xyXG59XHJcblxyXG4vKiBIYW5kbGVzIHJlc3BvbnNlcyB0byBhbiBhamF4IHJlcXVlc3Q6XHJcbiAqIC0gZmluZHMgdGhlIHJpZ2h0IGRhdGFUeXBlIChtZWRpYXRlcyBiZXR3ZWVuIGNvbnRlbnQtdHlwZSBhbmQgZXhwZWN0ZWQgZGF0YVR5cGUpXHJcbiAqIC0gcmV0dXJucyB0aGUgY29ycmVzcG9uZGluZyByZXNwb25zZVxyXG4gKi9cclxuZnVuY3Rpb24gYWpheEhhbmRsZVJlc3BvbnNlcyggcywganFYSFIsIHJlc3BvbnNlcyApIHtcclxuXHJcblx0dmFyIGN0LCB0eXBlLCBmaW5hbERhdGFUeXBlLCBmaXJzdERhdGFUeXBlLFxyXG5cdFx0Y29udGVudHMgPSBzLmNvbnRlbnRzLFxyXG5cdFx0ZGF0YVR5cGVzID0gcy5kYXRhVHlwZXM7XHJcblxyXG5cdC8vIFJlbW92ZSBhdXRvIGRhdGFUeXBlIGFuZCBnZXQgY29udGVudC10eXBlIGluIHRoZSBwcm9jZXNzXHJcblx0d2hpbGUgKCBkYXRhVHlwZXNbIDAgXSA9PT0gXCIqXCIgKSB7XHJcblx0XHRkYXRhVHlwZXMuc2hpZnQoKTtcclxuXHRcdGlmICggY3QgPT09IHVuZGVmaW5lZCApIHtcclxuXHRcdFx0Y3QgPSBzLm1pbWVUeXBlIHx8IGpxWEhSLmdldFJlc3BvbnNlSGVhZGVyKCBcIkNvbnRlbnQtVHlwZVwiICk7XHJcblx0XHR9XHJcblx0fVxyXG5cclxuXHQvLyBDaGVjayBpZiB3ZSdyZSBkZWFsaW5nIHdpdGggYSBrbm93biBjb250ZW50LXR5cGVcclxuXHRpZiAoIGN0ICkge1xyXG5cdFx0Zm9yICggdHlwZSBpbiBjb250ZW50cyApIHtcclxuXHRcdFx0aWYgKCBjb250ZW50c1sgdHlwZSBdICYmIGNvbnRlbnRzWyB0eXBlIF0udGVzdCggY3QgKSApIHtcclxuXHRcdFx0XHRkYXRhVHlwZXMudW5zaGlmdCggdHlwZSApO1xyXG5cdFx0XHRcdGJyZWFrO1xyXG5cdFx0XHR9XHJcblx0XHR9XHJcblx0fVxyXG5cclxuXHQvLyBDaGVjayB0byBzZWUgaWYgd2UgaGF2ZSBhIHJlc3BvbnNlIGZvciB0aGUgZXhwZWN0ZWQgZGF0YVR5cGVcclxuXHRpZiAoIGRhdGFUeXBlc1sgMCBdIGluIHJlc3BvbnNlcyApIHtcclxuXHRcdGZpbmFsRGF0YVR5cGUgPSBkYXRhVHlwZXNbIDAgXTtcclxuXHR9IGVsc2Uge1xyXG5cclxuXHRcdC8vIFRyeSBjb252ZXJ0aWJsZSBkYXRhVHlwZXNcclxuXHRcdGZvciAoIHR5cGUgaW4gcmVzcG9uc2VzICkge1xyXG5cdFx0XHRpZiAoICFkYXRhVHlwZXNbIDAgXSB8fCBzLmNvbnZlcnRlcnNbIHR5cGUgKyBcIiBcIiArIGRhdGFUeXBlc1sgMCBdIF0gKSB7XHJcblx0XHRcdFx0ZmluYWxEYXRhVHlwZSA9IHR5cGU7XHJcblx0XHRcdFx0YnJlYWs7XHJcblx0XHRcdH1cclxuXHRcdFx0aWYgKCAhZmlyc3REYXRhVHlwZSApIHtcclxuXHRcdFx0XHRmaXJzdERhdGFUeXBlID0gdHlwZTtcclxuXHRcdFx0fVxyXG5cdFx0fVxyXG5cclxuXHRcdC8vIE9yIGp1c3QgdXNlIGZpcnN0IG9uZVxyXG5cdFx0ZmluYWxEYXRhVHlwZSA9IGZpbmFsRGF0YVR5cGUgfHwgZmlyc3REYXRhVHlwZTtcclxuXHR9XHJcblxyXG5cdC8vIElmIHdlIGZvdW5kIGEgZGF0YVR5cGVcclxuXHQvLyBXZSBhZGQgdGhlIGRhdGFUeXBlIHRvIHRoZSBsaXN0IGlmIG5lZWRlZFxyXG5cdC8vIGFuZCByZXR1cm4gdGhlIGNvcnJlc3BvbmRpbmcgcmVzcG9uc2VcclxuXHRpZiAoIGZpbmFsRGF0YVR5cGUgKSB7XHJcblx0XHRpZiAoIGZpbmFsRGF0YVR5cGUgIT09IGRhdGFUeXBlc1sgMCBdICkge1xyXG5cdFx0XHRkYXRhVHlwZXMudW5zaGlmdCggZmluYWxEYXRhVHlwZSApO1xyXG5cdFx0fVxyXG5cdFx0cmV0dXJuIHJlc3BvbnNlc1sgZmluYWxEYXRhVHlwZSBdO1xyXG5cdH1cclxufVxyXG5cclxuLyogQ2hhaW4gY29udmVyc2lvbnMgZ2l2ZW4gdGhlIHJlcXVlc3QgYW5kIHRoZSBvcmlnaW5hbCByZXNwb25zZVxyXG4gKiBBbHNvIHNldHMgdGhlIHJlc3BvbnNlWFhYIGZpZWxkcyBvbiB0aGUganFYSFIgaW5zdGFuY2VcclxuICovXHJcbmZ1bmN0aW9uIGFqYXhDb252ZXJ0KCBzLCByZXNwb25zZSwganFYSFIsIGlzU3VjY2VzcyApIHtcclxuXHR2YXIgY29udjIsIGN1cnJlbnQsIGNvbnYsIHRtcCwgcHJldixcclxuXHRcdGNvbnZlcnRlcnMgPSB7fSxcclxuXHJcblx0XHQvLyBXb3JrIHdpdGggYSBjb3B5IG9mIGRhdGFUeXBlcyBpbiBjYXNlIHdlIG5lZWQgdG8gbW9kaWZ5IGl0IGZvciBjb252ZXJzaW9uXHJcblx0XHRkYXRhVHlwZXMgPSBzLmRhdGFUeXBlcy5zbGljZSgpO1xyXG5cclxuXHQvLyBDcmVhdGUgY29udmVydGVycyBtYXAgd2l0aCBsb3dlcmNhc2VkIGtleXNcclxuXHRpZiAoIGRhdGFUeXBlc1sgMSBdICkge1xyXG5cdFx0Zm9yICggY29udiBpbiBzLmNvbnZlcnRlcnMgKSB7XHJcblx0XHRcdGNvbnZlcnRlcnNbIGNvbnYudG9Mb3dlckNhc2UoKSBdID0gcy5jb252ZXJ0ZXJzWyBjb252IF07XHJcblx0XHR9XHJcblx0fVxyXG5cclxuXHRjdXJyZW50ID0gZGF0YVR5cGVzLnNoaWZ0KCk7XHJcblxyXG5cdC8vIENvbnZlcnQgdG8gZWFjaCBzZXF1ZW50aWFsIGRhdGFUeXBlXHJcblx0d2hpbGUgKCBjdXJyZW50ICkge1xyXG5cclxuXHRcdGlmICggcy5yZXNwb25zZUZpZWxkc1sgY3VycmVudCBdICkge1xyXG5cdFx0XHRqcVhIUlsgcy5yZXNwb25zZUZpZWxkc1sgY3VycmVudCBdIF0gPSByZXNwb25zZTtcclxuXHRcdH1cclxuXHJcblx0XHQvLyBBcHBseSB0aGUgZGF0YUZpbHRlciBpZiBwcm92aWRlZFxyXG5cdFx0aWYgKCAhcHJldiAmJiBpc1N1Y2Nlc3MgJiYgcy5kYXRhRmlsdGVyICkge1xyXG5cdFx0XHRyZXNwb25zZSA9IHMuZGF0YUZpbHRlciggcmVzcG9uc2UsIHMuZGF0YVR5cGUgKTtcclxuXHRcdH1cclxuXHJcblx0XHRwcmV2ID0gY3VycmVudDtcclxuXHRcdGN1cnJlbnQgPSBkYXRhVHlwZXMuc2hpZnQoKTtcclxuXHJcblx0XHRpZiAoIGN1cnJlbnQgKSB7XHJcblxyXG5cdFx0Ly8gVGhlcmUncyBvbmx5IHdvcmsgdG8gZG8gaWYgY3VycmVudCBkYXRhVHlwZSBpcyBub24tYXV0b1xyXG5cdFx0XHRpZiAoIGN1cnJlbnQgPT09IFwiKlwiICkge1xyXG5cclxuXHRcdFx0XHRjdXJyZW50ID0gcHJldjtcclxuXHJcblx0XHRcdC8vIENvbnZlcnQgcmVzcG9uc2UgaWYgcHJldiBkYXRhVHlwZSBpcyBub24tYXV0byBhbmQgZGlmZmVycyBmcm9tIGN1cnJlbnRcclxuXHRcdFx0fSBlbHNlIGlmICggcHJldiAhPT0gXCIqXCIgJiYgcHJldiAhPT0gY3VycmVudCApIHtcclxuXHJcblx0XHRcdFx0Ly8gU2VlayBhIGRpcmVjdCBjb252ZXJ0ZXJcclxuXHRcdFx0XHRjb252ID0gY29udmVydGVyc1sgcHJldiArIFwiIFwiICsgY3VycmVudCBdIHx8IGNvbnZlcnRlcnNbIFwiKiBcIiArIGN1cnJlbnQgXTtcclxuXHJcblx0XHRcdFx0Ly8gSWYgbm9uZSBmb3VuZCwgc2VlayBhIHBhaXJcclxuXHRcdFx0XHRpZiAoICFjb252ICkge1xyXG5cdFx0XHRcdFx0Zm9yICggY29udjIgaW4gY29udmVydGVycyApIHtcclxuXHJcblx0XHRcdFx0XHRcdC8vIElmIGNvbnYyIG91dHB1dHMgY3VycmVudFxyXG5cdFx0XHRcdFx0XHR0bXAgPSBjb252Mi5zcGxpdCggXCIgXCIgKTtcclxuXHRcdFx0XHRcdFx0aWYgKCB0bXBbIDEgXSA9PT0gY3VycmVudCApIHtcclxuXHJcblx0XHRcdFx0XHRcdFx0Ly8gSWYgcHJldiBjYW4gYmUgY29udmVydGVkIHRvIGFjY2VwdGVkIGlucHV0XHJcblx0XHRcdFx0XHRcdFx0Y29udiA9IGNvbnZlcnRlcnNbIHByZXYgKyBcIiBcIiArIHRtcFsgMCBdIF0gfHxcclxuXHRcdFx0XHRcdFx0XHRcdGNvbnZlcnRlcnNbIFwiKiBcIiArIHRtcFsgMCBdIF07XHJcblx0XHRcdFx0XHRcdFx0aWYgKCBjb252ICkge1xyXG5cclxuXHRcdFx0XHRcdFx0XHRcdC8vIENvbmRlbnNlIGVxdWl2YWxlbmNlIGNvbnZlcnRlcnNcclxuXHRcdFx0XHRcdFx0XHRcdGlmICggY29udiA9PT0gdHJ1ZSApIHtcclxuXHRcdFx0XHRcdFx0XHRcdFx0Y29udiA9IGNvbnZlcnRlcnNbIGNvbnYyIF07XHJcblxyXG5cdFx0XHRcdFx0XHRcdFx0Ly8gT3RoZXJ3aXNlLCBpbnNlcnQgdGhlIGludGVybWVkaWF0ZSBkYXRhVHlwZVxyXG5cdFx0XHRcdFx0XHRcdFx0fSBlbHNlIGlmICggY29udmVydGVyc1sgY29udjIgXSAhPT0gdHJ1ZSApIHtcclxuXHRcdFx0XHRcdFx0XHRcdFx0Y3VycmVudCA9IHRtcFsgMCBdO1xyXG5cdFx0XHRcdFx0XHRcdFx0XHRkYXRhVHlwZXMudW5zaGlmdCggdG1wWyAxIF0gKTtcclxuXHRcdFx0XHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdFx0XHRcdGJyZWFrO1xyXG5cdFx0XHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0fVxyXG5cdFx0XHRcdH1cclxuXHJcblx0XHRcdFx0Ly8gQXBwbHkgY29udmVydGVyIChpZiBub3QgYW4gZXF1aXZhbGVuY2UpXHJcblx0XHRcdFx0aWYgKCBjb252ICE9PSB0cnVlICkge1xyXG5cclxuXHRcdFx0XHRcdC8vIFVubGVzcyBlcnJvcnMgYXJlIGFsbG93ZWQgdG8gYnViYmxlLCBjYXRjaCBhbmQgcmV0dXJuIHRoZW1cclxuXHRcdFx0XHRcdGlmICggY29udiAmJiBzLnRocm93cyApIHtcclxuXHRcdFx0XHRcdFx0cmVzcG9uc2UgPSBjb252KCByZXNwb25zZSApO1xyXG5cdFx0XHRcdFx0fSBlbHNlIHtcclxuXHRcdFx0XHRcdFx0dHJ5IHtcclxuXHRcdFx0XHRcdFx0XHRyZXNwb25zZSA9IGNvbnYoIHJlc3BvbnNlICk7XHJcblx0XHRcdFx0XHRcdH0gY2F0Y2ggKCBlICkge1xyXG5cdFx0XHRcdFx0XHRcdHJldHVybiB7XHJcblx0XHRcdFx0XHRcdFx0XHRzdGF0ZTogXCJwYXJzZXJlcnJvclwiLFxyXG5cdFx0XHRcdFx0XHRcdFx0ZXJyb3I6IGNvbnYgPyBlIDogXCJObyBjb252ZXJzaW9uIGZyb20gXCIgKyBwcmV2ICsgXCIgdG8gXCIgKyBjdXJyZW50XHJcblx0XHRcdFx0XHRcdFx0fTtcclxuXHRcdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0fVxyXG5cdFx0XHRcdH1cclxuXHRcdFx0fVxyXG5cdFx0fVxyXG5cdH1cclxuXHJcblx0cmV0dXJuIHsgc3RhdGU6IFwic3VjY2Vzc1wiLCBkYXRhOiByZXNwb25zZSB9O1xyXG59XHJcblxyXG5qUXVlcnkuZXh0ZW5kKCB7XHJcblxyXG5cdC8vIENvdW50ZXIgZm9yIGhvbGRpbmcgdGhlIG51bWJlciBvZiBhY3RpdmUgcXVlcmllc1xyXG5cdGFjdGl2ZTogMCxcclxuXHJcblx0Ly8gTGFzdC1Nb2RpZmllZCBoZWFkZXIgY2FjaGUgZm9yIG5leHQgcmVxdWVzdFxyXG5cdGxhc3RNb2RpZmllZDoge30sXHJcblx0ZXRhZzoge30sXHJcblxyXG5cdGFqYXhTZXR0aW5nczoge1xyXG5cdFx0dXJsOiBsb2NhdGlvbi5ocmVmLFxyXG5cdFx0dHlwZTogXCJHRVRcIixcclxuXHRcdGlzTG9jYWw6IHJsb2NhbFByb3RvY29sLnRlc3QoIGxvY2F0aW9uLnByb3RvY29sICksXHJcblx0XHRnbG9iYWw6IHRydWUsXHJcblx0XHRwcm9jZXNzRGF0YTogdHJ1ZSxcclxuXHRcdGFzeW5jOiB0cnVlLFxyXG5cdFx0Y29udGVudFR5cGU6IFwiYXBwbGljYXRpb24veC13d3ctZm9ybS11cmxlbmNvZGVkOyBjaGFyc2V0PVVURi04XCIsXHJcblx0XHQvKlxyXG5cdFx0dGltZW91dDogMCxcclxuXHRcdGRhdGE6IG51bGwsXHJcblx0XHRkYXRhVHlwZTogbnVsbCxcclxuXHRcdHVzZXJuYW1lOiBudWxsLFxyXG5cdFx0cGFzc3dvcmQ6IG51bGwsXHJcblx0XHRjYWNoZTogbnVsbCxcclxuXHRcdHRocm93czogZmFsc2UsXHJcblx0XHR0cmFkaXRpb25hbDogZmFsc2UsXHJcblx0XHRoZWFkZXJzOiB7fSxcclxuXHRcdCovXHJcblxyXG5cdFx0YWNjZXB0czoge1xyXG5cdFx0XHRcIipcIjogYWxsVHlwZXMsXHJcblx0XHRcdHRleHQ6IFwidGV4dC9wbGFpblwiLFxyXG5cdFx0XHRodG1sOiBcInRleHQvaHRtbFwiLFxyXG5cdFx0XHR4bWw6IFwiYXBwbGljYXRpb24veG1sLCB0ZXh0L3htbFwiLFxyXG5cdFx0XHRqc29uOiBcImFwcGxpY2F0aW9uL2pzb24sIHRleHQvamF2YXNjcmlwdFwiXHJcblx0XHR9LFxyXG5cclxuXHRcdGNvbnRlbnRzOiB7XHJcblx0XHRcdHhtbDogL1xcYnhtbFxcYi8sXHJcblx0XHRcdGh0bWw6IC9cXGJodG1sLyxcclxuXHRcdFx0anNvbjogL1xcYmpzb25cXGIvXHJcblx0XHR9LFxyXG5cclxuXHRcdHJlc3BvbnNlRmllbGRzOiB7XHJcblx0XHRcdHhtbDogXCJyZXNwb25zZVhNTFwiLFxyXG5cdFx0XHR0ZXh0OiBcInJlc3BvbnNlVGV4dFwiLFxyXG5cdFx0XHRqc29uOiBcInJlc3BvbnNlSlNPTlwiXHJcblx0XHR9LFxyXG5cclxuXHRcdC8vIERhdGEgY29udmVydGVyc1xyXG5cdFx0Ly8gS2V5cyBzZXBhcmF0ZSBzb3VyY2UgKG9yIGNhdGNoYWxsIFwiKlwiKSBhbmQgZGVzdGluYXRpb24gdHlwZXMgd2l0aCBhIHNpbmdsZSBzcGFjZVxyXG5cdFx0Y29udmVydGVyczoge1xyXG5cclxuXHRcdFx0Ly8gQ29udmVydCBhbnl0aGluZyB0byB0ZXh0XHJcblx0XHRcdFwiKiB0ZXh0XCI6IFN0cmluZyxcclxuXHJcblx0XHRcdC8vIFRleHQgdG8gaHRtbCAodHJ1ZSA9IG5vIHRyYW5zZm9ybWF0aW9uKVxyXG5cdFx0XHRcInRleHQgaHRtbFwiOiB0cnVlLFxyXG5cclxuXHRcdFx0Ly8gRXZhbHVhdGUgdGV4dCBhcyBhIGpzb24gZXhwcmVzc2lvblxyXG5cdFx0XHRcInRleHQganNvblwiOiBqUXVlcnkucGFyc2VKU09OLFxyXG5cclxuXHRcdFx0Ly8gUGFyc2UgdGV4dCBhcyB4bWxcclxuXHRcdFx0XCJ0ZXh0IHhtbFwiOiBqUXVlcnkucGFyc2VYTUxcclxuXHRcdH0sXHJcblxyXG5cdFx0Ly8gRm9yIG9wdGlvbnMgdGhhdCBzaG91bGRuJ3QgYmUgZGVlcCBleHRlbmRlZDpcclxuXHRcdC8vIHlvdSBjYW4gYWRkIHlvdXIgb3duIGN1c3RvbSBvcHRpb25zIGhlcmUgaWZcclxuXHRcdC8vIGFuZCB3aGVuIHlvdSBjcmVhdGUgb25lIHRoYXQgc2hvdWxkbid0IGJlXHJcblx0XHQvLyBkZWVwIGV4dGVuZGVkIChzZWUgYWpheEV4dGVuZClcclxuXHRcdGZsYXRPcHRpb25zOiB7XHJcblx0XHRcdHVybDogdHJ1ZSxcclxuXHRcdFx0Y29udGV4dDogdHJ1ZVxyXG5cdFx0fVxyXG5cdH0sXHJcblxyXG5cdC8vIENyZWF0ZXMgYSBmdWxsIGZsZWRnZWQgc2V0dGluZ3Mgb2JqZWN0IGludG8gdGFyZ2V0XHJcblx0Ly8gd2l0aCBib3RoIGFqYXhTZXR0aW5ncyBhbmQgc2V0dGluZ3MgZmllbGRzLlxyXG5cdC8vIElmIHRhcmdldCBpcyBvbWl0dGVkLCB3cml0ZXMgaW50byBhamF4U2V0dGluZ3MuXHJcblx0YWpheFNldHVwOiBmdW5jdGlvbiggdGFyZ2V0LCBzZXR0aW5ncyApIHtcclxuXHRcdHJldHVybiBzZXR0aW5ncyA/XHJcblxyXG5cdFx0XHQvLyBCdWlsZGluZyBhIHNldHRpbmdzIG9iamVjdFxyXG5cdFx0XHRhamF4RXh0ZW5kKCBhamF4RXh0ZW5kKCB0YXJnZXQsIGpRdWVyeS5hamF4U2V0dGluZ3MgKSwgc2V0dGluZ3MgKSA6XHJcblxyXG5cdFx0XHQvLyBFeHRlbmRpbmcgYWpheFNldHRpbmdzXHJcblx0XHRcdGFqYXhFeHRlbmQoIGpRdWVyeS5hamF4U2V0dGluZ3MsIHRhcmdldCApO1xyXG5cdH0sXHJcblxyXG5cdGFqYXhQcmVmaWx0ZXI6IGFkZFRvUHJlZmlsdGVyc09yVHJhbnNwb3J0cyggcHJlZmlsdGVycyApLFxyXG5cdGFqYXhUcmFuc3BvcnQ6IGFkZFRvUHJlZmlsdGVyc09yVHJhbnNwb3J0cyggdHJhbnNwb3J0cyApLFxyXG5cclxuXHQvLyBNYWluIG1ldGhvZFxyXG5cdGFqYXg6IGZ1bmN0aW9uKCB1cmwsIG9wdGlvbnMgKSB7XHJcblxyXG5cdFx0Ly8gSWYgdXJsIGlzIGFuIG9iamVjdCwgc2ltdWxhdGUgcHJlLTEuNSBzaWduYXR1cmVcclxuXHRcdGlmICggdHlwZW9mIHVybCA9PT0gXCJvYmplY3RcIiApIHtcclxuXHRcdFx0b3B0aW9ucyA9IHVybDtcclxuXHRcdFx0dXJsID0gdW5kZWZpbmVkO1xyXG5cdFx0fVxyXG5cclxuXHRcdC8vIEZvcmNlIG9wdGlvbnMgdG8gYmUgYW4gb2JqZWN0XHJcblx0XHRvcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcclxuXHJcblx0XHR2YXIgdHJhbnNwb3J0LFxyXG5cclxuXHRcdFx0Ly8gVVJMIHdpdGhvdXQgYW50aS1jYWNoZSBwYXJhbVxyXG5cdFx0XHRjYWNoZVVSTCxcclxuXHJcblx0XHRcdC8vIFJlc3BvbnNlIGhlYWRlcnNcclxuXHRcdFx0cmVzcG9uc2VIZWFkZXJzU3RyaW5nLFxyXG5cdFx0XHRyZXNwb25zZUhlYWRlcnMsXHJcblxyXG5cdFx0XHQvLyB0aW1lb3V0IGhhbmRsZVxyXG5cdFx0XHR0aW1lb3V0VGltZXIsXHJcblxyXG5cdFx0XHQvLyBVcmwgY2xlYW51cCB2YXJcclxuXHRcdFx0dXJsQW5jaG9yLFxyXG5cclxuXHRcdFx0Ly8gVG8ga25vdyBpZiBnbG9iYWwgZXZlbnRzIGFyZSB0byBiZSBkaXNwYXRjaGVkXHJcblx0XHRcdGZpcmVHbG9iYWxzLFxyXG5cclxuXHRcdFx0Ly8gTG9vcCB2YXJpYWJsZVxyXG5cdFx0XHRpLFxyXG5cclxuXHRcdFx0Ly8gQ3JlYXRlIHRoZSBmaW5hbCBvcHRpb25zIG9iamVjdFxyXG5cdFx0XHRzID0galF1ZXJ5LmFqYXhTZXR1cCgge30sIG9wdGlvbnMgKSxcclxuXHJcblx0XHRcdC8vIENhbGxiYWNrcyBjb250ZXh0XHJcblx0XHRcdGNhbGxiYWNrQ29udGV4dCA9IHMuY29udGV4dCB8fCBzLFxyXG5cclxuXHRcdFx0Ly8gQ29udGV4dCBmb3IgZ2xvYmFsIGV2ZW50cyBpcyBjYWxsYmFja0NvbnRleHQgaWYgaXQgaXMgYSBET00gbm9kZSBvciBqUXVlcnkgY29sbGVjdGlvblxyXG5cdFx0XHRnbG9iYWxFdmVudENvbnRleHQgPSBzLmNvbnRleHQgJiZcclxuXHRcdFx0XHQoIGNhbGxiYWNrQ29udGV4dC5ub2RlVHlwZSB8fCBjYWxsYmFja0NvbnRleHQuanF1ZXJ5ICkgP1xyXG5cdFx0XHRcdFx0alF1ZXJ5KCBjYWxsYmFja0NvbnRleHQgKSA6XHJcblx0XHRcdFx0XHRqUXVlcnkuZXZlbnQsXHJcblxyXG5cdFx0XHQvLyBEZWZlcnJlZHNcclxuXHRcdFx0ZGVmZXJyZWQgPSBqUXVlcnkuRGVmZXJyZWQoKSxcclxuXHRcdFx0Y29tcGxldGVEZWZlcnJlZCA9IGpRdWVyeS5DYWxsYmFja3MoIFwib25jZSBtZW1vcnlcIiApLFxyXG5cclxuXHRcdFx0Ly8gU3RhdHVzLWRlcGVuZGVudCBjYWxsYmFja3NcclxuXHRcdFx0c3RhdHVzQ29kZSA9IHMuc3RhdHVzQ29kZSB8fCB7fSxcclxuXHJcblx0XHRcdC8vIEhlYWRlcnMgKHRoZXkgYXJlIHNlbnQgYWxsIGF0IG9uY2UpXHJcblx0XHRcdHJlcXVlc3RIZWFkZXJzID0ge30sXHJcblx0XHRcdHJlcXVlc3RIZWFkZXJzTmFtZXMgPSB7fSxcclxuXHJcblx0XHRcdC8vIFRoZSBqcVhIUiBzdGF0ZVxyXG5cdFx0XHRzdGF0ZSA9IDAsXHJcblxyXG5cdFx0XHQvLyBEZWZhdWx0IGFib3J0IG1lc3NhZ2VcclxuXHRcdFx0c3RyQWJvcnQgPSBcImNhbmNlbGVkXCIsXHJcblxyXG5cdFx0XHQvLyBGYWtlIHhoclxyXG5cdFx0XHRqcVhIUiA9IHtcclxuXHRcdFx0XHRyZWFkeVN0YXRlOiAwLFxyXG5cclxuXHRcdFx0XHQvLyBCdWlsZHMgaGVhZGVycyBoYXNodGFibGUgaWYgbmVlZGVkXHJcblx0XHRcdFx0Z2V0UmVzcG9uc2VIZWFkZXI6IGZ1bmN0aW9uKCBrZXkgKSB7XHJcblx0XHRcdFx0XHR2YXIgbWF0Y2g7XHJcblx0XHRcdFx0XHRpZiAoIHN0YXRlID09PSAyICkge1xyXG5cdFx0XHRcdFx0XHRpZiAoICFyZXNwb25zZUhlYWRlcnMgKSB7XHJcblx0XHRcdFx0XHRcdFx0cmVzcG9uc2VIZWFkZXJzID0ge307XHJcblx0XHRcdFx0XHRcdFx0d2hpbGUgKCAoIG1hdGNoID0gcmhlYWRlcnMuZXhlYyggcmVzcG9uc2VIZWFkZXJzU3RyaW5nICkgKSApIHtcclxuXHRcdFx0XHRcdFx0XHRcdHJlc3BvbnNlSGVhZGVyc1sgbWF0Y2hbIDEgXS50b0xvd2VyQ2FzZSgpIF0gPSBtYXRjaFsgMiBdO1xyXG5cdFx0XHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0XHRtYXRjaCA9IHJlc3BvbnNlSGVhZGVyc1sga2V5LnRvTG93ZXJDYXNlKCkgXTtcclxuXHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdHJldHVybiBtYXRjaCA9PSBudWxsID8gbnVsbCA6IG1hdGNoO1xyXG5cdFx0XHRcdH0sXHJcblxyXG5cdFx0XHRcdC8vIFJhdyBzdHJpbmdcclxuXHRcdFx0XHRnZXRBbGxSZXNwb25zZUhlYWRlcnM6IGZ1bmN0aW9uKCkge1xyXG5cdFx0XHRcdFx0cmV0dXJuIHN0YXRlID09PSAyID8gcmVzcG9uc2VIZWFkZXJzU3RyaW5nIDogbnVsbDtcclxuXHRcdFx0XHR9LFxyXG5cclxuXHRcdFx0XHQvLyBDYWNoZXMgdGhlIGhlYWRlclxyXG5cdFx0XHRcdHNldFJlcXVlc3RIZWFkZXI6IGZ1bmN0aW9uKCBuYW1lLCB2YWx1ZSApIHtcclxuXHRcdFx0XHRcdHZhciBsbmFtZSA9IG5hbWUudG9Mb3dlckNhc2UoKTtcclxuXHRcdFx0XHRcdGlmICggIXN0YXRlICkge1xyXG5cdFx0XHRcdFx0XHRuYW1lID0gcmVxdWVzdEhlYWRlcnNOYW1lc1sgbG5hbWUgXSA9IHJlcXVlc3RIZWFkZXJzTmFtZXNbIGxuYW1lIF0gfHwgbmFtZTtcclxuXHRcdFx0XHRcdFx0cmVxdWVzdEhlYWRlcnNbIG5hbWUgXSA9IHZhbHVlO1xyXG5cdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0cmV0dXJuIHRoaXM7XHJcblx0XHRcdFx0fSxcclxuXHJcblx0XHRcdFx0Ly8gT3ZlcnJpZGVzIHJlc3BvbnNlIGNvbnRlbnQtdHlwZSBoZWFkZXJcclxuXHRcdFx0XHRvdmVycmlkZU1pbWVUeXBlOiBmdW5jdGlvbiggdHlwZSApIHtcclxuXHRcdFx0XHRcdGlmICggIXN0YXRlICkge1xyXG5cdFx0XHRcdFx0XHRzLm1pbWVUeXBlID0gdHlwZTtcclxuXHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdHJldHVybiB0aGlzO1xyXG5cdFx0XHRcdH0sXHJcblxyXG5cdFx0XHRcdC8vIFN0YXR1cy1kZXBlbmRlbnQgY2FsbGJhY2tzXHJcblx0XHRcdFx0c3RhdHVzQ29kZTogZnVuY3Rpb24oIG1hcCApIHtcclxuXHRcdFx0XHRcdHZhciBjb2RlO1xyXG5cdFx0XHRcdFx0aWYgKCBtYXAgKSB7XHJcblx0XHRcdFx0XHRcdGlmICggc3RhdGUgPCAyICkge1xyXG5cdFx0XHRcdFx0XHRcdGZvciAoIGNvZGUgaW4gbWFwICkge1xyXG5cclxuXHRcdFx0XHRcdFx0XHRcdC8vIExhenktYWRkIHRoZSBuZXcgY2FsbGJhY2sgaW4gYSB3YXkgdGhhdCBwcmVzZXJ2ZXMgb2xkIG9uZXNcclxuXHRcdFx0XHRcdFx0XHRcdHN0YXR1c0NvZGVbIGNvZGUgXSA9IFsgc3RhdHVzQ29kZVsgY29kZSBdLCBtYXBbIGNvZGUgXSBdO1xyXG5cdFx0XHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdFx0fSBlbHNlIHtcclxuXHJcblx0XHRcdFx0XHRcdFx0Ly8gRXhlY3V0ZSB0aGUgYXBwcm9wcmlhdGUgY2FsbGJhY2tzXHJcblx0XHRcdFx0XHRcdFx0anFYSFIuYWx3YXlzKCBtYXBbIGpxWEhSLnN0YXR1cyBdICk7XHJcblx0XHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdHJldHVybiB0aGlzO1xyXG5cdFx0XHRcdH0sXHJcblxyXG5cdFx0XHRcdC8vIENhbmNlbCB0aGUgcmVxdWVzdFxyXG5cdFx0XHRcdGFib3J0OiBmdW5jdGlvbiggc3RhdHVzVGV4dCApIHtcclxuXHRcdFx0XHRcdHZhciBmaW5hbFRleHQgPSBzdGF0dXNUZXh0IHx8IHN0ckFib3J0O1xyXG5cdFx0XHRcdFx0aWYgKCB0cmFuc3BvcnQgKSB7XHJcblx0XHRcdFx0XHRcdHRyYW5zcG9ydC5hYm9ydCggZmluYWxUZXh0ICk7XHJcblx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHRkb25lKCAwLCBmaW5hbFRleHQgKTtcclxuXHRcdFx0XHRcdHJldHVybiB0aGlzO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0fTtcclxuXHJcblx0XHQvLyBBdHRhY2ggZGVmZXJyZWRzXHJcblx0XHRkZWZlcnJlZC5wcm9taXNlKCBqcVhIUiApLmNvbXBsZXRlID0gY29tcGxldGVEZWZlcnJlZC5hZGQ7XHJcblx0XHRqcVhIUi5zdWNjZXNzID0ganFYSFIuZG9uZTtcclxuXHRcdGpxWEhSLmVycm9yID0ganFYSFIuZmFpbDtcclxuXHJcblx0XHQvLyBSZW1vdmUgaGFzaCBjaGFyYWN0ZXIgKCM3NTMxOiBhbmQgc3RyaW5nIHByb21vdGlvbilcclxuXHRcdC8vIEFkZCBwcm90b2NvbCBpZiBub3QgcHJvdmlkZWQgKHByZWZpbHRlcnMgbWlnaHQgZXhwZWN0IGl0KVxyXG5cdFx0Ly8gSGFuZGxlIGZhbHN5IHVybCBpbiB0aGUgc2V0dGluZ3Mgb2JqZWN0ICgjMTAwOTM6IGNvbnNpc3RlbmN5IHdpdGggb2xkIHNpZ25hdHVyZSlcclxuXHRcdC8vIFdlIGFsc28gdXNlIHRoZSB1cmwgcGFyYW1ldGVyIGlmIGF2YWlsYWJsZVxyXG5cdFx0cy51cmwgPSAoICggdXJsIHx8IHMudXJsIHx8IGxvY2F0aW9uLmhyZWYgKSArIFwiXCIgKS5yZXBsYWNlKCByaGFzaCwgXCJcIiApXHJcblx0XHRcdC5yZXBsYWNlKCBycHJvdG9jb2wsIGxvY2F0aW9uLnByb3RvY29sICsgXCIvL1wiICk7XHJcblxyXG5cdFx0Ly8gQWxpYXMgbWV0aG9kIG9wdGlvbiB0byB0eXBlIGFzIHBlciB0aWNrZXQgIzEyMDA0XHJcblx0XHRzLnR5cGUgPSBvcHRpb25zLm1ldGhvZCB8fCBvcHRpb25zLnR5cGUgfHwgcy5tZXRob2QgfHwgcy50eXBlO1xyXG5cclxuXHRcdC8vIEV4dHJhY3QgZGF0YVR5cGVzIGxpc3RcclxuXHRcdHMuZGF0YVR5cGVzID0galF1ZXJ5LnRyaW0oIHMuZGF0YVR5cGUgfHwgXCIqXCIgKS50b0xvd2VyQ2FzZSgpLm1hdGNoKCBybm90d2hpdGUgKSB8fCBbIFwiXCIgXTtcclxuXHJcblx0XHQvLyBBIGNyb3NzLWRvbWFpbiByZXF1ZXN0IGlzIGluIG9yZGVyIHdoZW4gdGhlIG9yaWdpbiBkb2Vzbid0IG1hdGNoIHRoZSBjdXJyZW50IG9yaWdpbi5cclxuXHRcdGlmICggcy5jcm9zc0RvbWFpbiA9PSBudWxsICkge1xyXG5cdFx0XHR1cmxBbmNob3IgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCBcImFcIiApO1xyXG5cclxuXHRcdFx0Ly8gU3VwcG9ydDogSUU4LTExK1xyXG5cdFx0XHQvLyBJRSB0aHJvd3MgZXhjZXB0aW9uIGlmIHVybCBpcyBtYWxmb3JtZWQsIGUuZy4gaHR0cDovL2V4YW1wbGUuY29tOjgweC9cclxuXHRcdFx0dHJ5IHtcclxuXHRcdFx0XHR1cmxBbmNob3IuaHJlZiA9IHMudXJsO1xyXG5cclxuXHRcdFx0XHQvLyBTdXBwb3J0OiBJRTgtMTErXHJcblx0XHRcdFx0Ly8gQW5jaG9yJ3MgaG9zdCBwcm9wZXJ0eSBpc24ndCBjb3JyZWN0bHkgc2V0IHdoZW4gcy51cmwgaXMgcmVsYXRpdmVcclxuXHRcdFx0XHR1cmxBbmNob3IuaHJlZiA9IHVybEFuY2hvci5ocmVmO1xyXG5cdFx0XHRcdHMuY3Jvc3NEb21haW4gPSBvcmlnaW5BbmNob3IucHJvdG9jb2wgKyBcIi8vXCIgKyBvcmlnaW5BbmNob3IuaG9zdCAhPT1cclxuXHRcdFx0XHRcdHVybEFuY2hvci5wcm90b2NvbCArIFwiLy9cIiArIHVybEFuY2hvci5ob3N0O1xyXG5cdFx0XHR9IGNhdGNoICggZSApIHtcclxuXHJcblx0XHRcdFx0Ly8gSWYgdGhlcmUgaXMgYW4gZXJyb3IgcGFyc2luZyB0aGUgVVJMLCBhc3N1bWUgaXQgaXMgY3Jvc3NEb21haW4sXHJcblx0XHRcdFx0Ly8gaXQgY2FuIGJlIHJlamVjdGVkIGJ5IHRoZSB0cmFuc3BvcnQgaWYgaXQgaXMgaW52YWxpZFxyXG5cdFx0XHRcdHMuY3Jvc3NEb21haW4gPSB0cnVlO1xyXG5cdFx0XHR9XHJcblx0XHR9XHJcblxyXG5cdFx0Ly8gQ29udmVydCBkYXRhIGlmIG5vdCBhbHJlYWR5IGEgc3RyaW5nXHJcblx0XHRpZiAoIHMuZGF0YSAmJiBzLnByb2Nlc3NEYXRhICYmIHR5cGVvZiBzLmRhdGEgIT09IFwic3RyaW5nXCIgKSB7XHJcblx0XHRcdHMuZGF0YSA9IGpRdWVyeS5wYXJhbSggcy5kYXRhLCBzLnRyYWRpdGlvbmFsICk7XHJcblx0XHR9XHJcblxyXG5cdFx0Ly8gQXBwbHkgcHJlZmlsdGVyc1xyXG5cdFx0aW5zcGVjdFByZWZpbHRlcnNPclRyYW5zcG9ydHMoIHByZWZpbHRlcnMsIHMsIG9wdGlvbnMsIGpxWEhSICk7XHJcblxyXG5cdFx0Ly8gSWYgcmVxdWVzdCB3YXMgYWJvcnRlZCBpbnNpZGUgYSBwcmVmaWx0ZXIsIHN0b3AgdGhlcmVcclxuXHRcdGlmICggc3RhdGUgPT09IDIgKSB7XHJcblx0XHRcdHJldHVybiBqcVhIUjtcclxuXHRcdH1cclxuXHJcblx0XHQvLyBXZSBjYW4gZmlyZSBnbG9iYWwgZXZlbnRzIGFzIG9mIG5vdyBpZiBhc2tlZCB0b1xyXG5cdFx0Ly8gRG9uJ3QgZmlyZSBldmVudHMgaWYgalF1ZXJ5LmV2ZW50IGlzIHVuZGVmaW5lZCBpbiBhbiBBTUQtdXNhZ2Ugc2NlbmFyaW8gKCMxNTExOClcclxuXHRcdGZpcmVHbG9iYWxzID0galF1ZXJ5LmV2ZW50ICYmIHMuZ2xvYmFsO1xyXG5cclxuXHRcdC8vIFdhdGNoIGZvciBhIG5ldyBzZXQgb2YgcmVxdWVzdHNcclxuXHRcdGlmICggZmlyZUdsb2JhbHMgJiYgalF1ZXJ5LmFjdGl2ZSsrID09PSAwICkge1xyXG5cdFx0XHRqUXVlcnkuZXZlbnQudHJpZ2dlciggXCJhamF4U3RhcnRcIiApO1xyXG5cdFx0fVxyXG5cclxuXHRcdC8vIFVwcGVyY2FzZSB0aGUgdHlwZVxyXG5cdFx0cy50eXBlID0gcy50eXBlLnRvVXBwZXJDYXNlKCk7XHJcblxyXG5cdFx0Ly8gRGV0ZXJtaW5lIGlmIHJlcXVlc3QgaGFzIGNvbnRlbnRcclxuXHRcdHMuaGFzQ29udGVudCA9ICFybm9Db250ZW50LnRlc3QoIHMudHlwZSApO1xyXG5cclxuXHRcdC8vIFNhdmUgdGhlIFVSTCBpbiBjYXNlIHdlJ3JlIHRveWluZyB3aXRoIHRoZSBJZi1Nb2RpZmllZC1TaW5jZVxyXG5cdFx0Ly8gYW5kL29yIElmLU5vbmUtTWF0Y2ggaGVhZGVyIGxhdGVyIG9uXHJcblx0XHRjYWNoZVVSTCA9IHMudXJsO1xyXG5cclxuXHRcdC8vIE1vcmUgb3B0aW9ucyBoYW5kbGluZyBmb3IgcmVxdWVzdHMgd2l0aCBubyBjb250ZW50XHJcblx0XHRpZiAoICFzLmhhc0NvbnRlbnQgKSB7XHJcblxyXG5cdFx0XHQvLyBJZiBkYXRhIGlzIGF2YWlsYWJsZSwgYXBwZW5kIGRhdGEgdG8gdXJsXHJcblx0XHRcdGlmICggcy5kYXRhICkge1xyXG5cdFx0XHRcdGNhY2hlVVJMID0gKCBzLnVybCArPSAoIHJxdWVyeS50ZXN0KCBjYWNoZVVSTCApID8gXCImXCIgOiBcIj9cIiApICsgcy5kYXRhICk7XHJcblxyXG5cdFx0XHRcdC8vICM5NjgyOiByZW1vdmUgZGF0YSBzbyB0aGF0IGl0J3Mgbm90IHVzZWQgaW4gYW4gZXZlbnR1YWwgcmV0cnlcclxuXHRcdFx0XHRkZWxldGUgcy5kYXRhO1xyXG5cdFx0XHR9XHJcblxyXG5cdFx0XHQvLyBBZGQgYW50aS1jYWNoZSBpbiB1cmwgaWYgbmVlZGVkXHJcblx0XHRcdGlmICggcy5jYWNoZSA9PT0gZmFsc2UgKSB7XHJcblx0XHRcdFx0cy51cmwgPSBydHMudGVzdCggY2FjaGVVUkwgKSA/XHJcblxyXG5cdFx0XHRcdFx0Ly8gSWYgdGhlcmUgaXMgYWxyZWFkeSBhICdfJyBwYXJhbWV0ZXIsIHNldCBpdHMgdmFsdWVcclxuXHRcdFx0XHRcdGNhY2hlVVJMLnJlcGxhY2UoIHJ0cywgXCIkMV89XCIgKyBub25jZSsrICkgOlxyXG5cclxuXHRcdFx0XHRcdC8vIE90aGVyd2lzZSBhZGQgb25lIHRvIHRoZSBlbmRcclxuXHRcdFx0XHRcdGNhY2hlVVJMICsgKCBycXVlcnkudGVzdCggY2FjaGVVUkwgKSA/IFwiJlwiIDogXCI/XCIgKSArIFwiXz1cIiArIG5vbmNlKys7XHJcblx0XHRcdH1cclxuXHRcdH1cclxuXHJcblx0XHQvLyBTZXQgdGhlIElmLU1vZGlmaWVkLVNpbmNlIGFuZC9vciBJZi1Ob25lLU1hdGNoIGhlYWRlciwgaWYgaW4gaWZNb2RpZmllZCBtb2RlLlxyXG5cdFx0aWYgKCBzLmlmTW9kaWZpZWQgKSB7XHJcblx0XHRcdGlmICggalF1ZXJ5Lmxhc3RNb2RpZmllZFsgY2FjaGVVUkwgXSApIHtcclxuXHRcdFx0XHRqcVhIUi5zZXRSZXF1ZXN0SGVhZGVyKCBcIklmLU1vZGlmaWVkLVNpbmNlXCIsIGpRdWVyeS5sYXN0TW9kaWZpZWRbIGNhY2hlVVJMIF0gKTtcclxuXHRcdFx0fVxyXG5cdFx0XHRpZiAoIGpRdWVyeS5ldGFnWyBjYWNoZVVSTCBdICkge1xyXG5cdFx0XHRcdGpxWEhSLnNldFJlcXVlc3RIZWFkZXIoIFwiSWYtTm9uZS1NYXRjaFwiLCBqUXVlcnkuZXRhZ1sgY2FjaGVVUkwgXSApO1xyXG5cdFx0XHR9XHJcblx0XHR9XHJcblxyXG5cdFx0Ly8gU2V0IHRoZSBjb3JyZWN0IGhlYWRlciwgaWYgZGF0YSBpcyBiZWluZyBzZW50XHJcblx0XHRpZiAoIHMuZGF0YSAmJiBzLmhhc0NvbnRlbnQgJiYgcy5jb250ZW50VHlwZSAhPT0gZmFsc2UgfHwgb3B0aW9ucy5jb250ZW50VHlwZSApIHtcclxuXHRcdFx0anFYSFIuc2V0UmVxdWVzdEhlYWRlciggXCJDb250ZW50LVR5cGVcIiwgcy5jb250ZW50VHlwZSApO1xyXG5cdFx0fVxyXG5cclxuXHRcdC8vIFNldCB0aGUgQWNjZXB0cyBoZWFkZXIgZm9yIHRoZSBzZXJ2ZXIsIGRlcGVuZGluZyBvbiB0aGUgZGF0YVR5cGVcclxuXHRcdGpxWEhSLnNldFJlcXVlc3RIZWFkZXIoXHJcblx0XHRcdFwiQWNjZXB0XCIsXHJcblx0XHRcdHMuZGF0YVR5cGVzWyAwIF0gJiYgcy5hY2NlcHRzWyBzLmRhdGFUeXBlc1sgMCBdIF0gP1xyXG5cdFx0XHRcdHMuYWNjZXB0c1sgcy5kYXRhVHlwZXNbIDAgXSBdICtcclxuXHRcdFx0XHRcdCggcy5kYXRhVHlwZXNbIDAgXSAhPT0gXCIqXCIgPyBcIiwgXCIgKyBhbGxUeXBlcyArIFwiOyBxPTAuMDFcIiA6IFwiXCIgKSA6XHJcblx0XHRcdFx0cy5hY2NlcHRzWyBcIipcIiBdXHJcblx0XHQpO1xyXG5cclxuXHRcdC8vIENoZWNrIGZvciBoZWFkZXJzIG9wdGlvblxyXG5cdFx0Zm9yICggaSBpbiBzLmhlYWRlcnMgKSB7XHJcblx0XHRcdGpxWEhSLnNldFJlcXVlc3RIZWFkZXIoIGksIHMuaGVhZGVyc1sgaSBdICk7XHJcblx0XHR9XHJcblxyXG5cdFx0Ly8gQWxsb3cgY3VzdG9tIGhlYWRlcnMvbWltZXR5cGVzIGFuZCBlYXJseSBhYm9ydFxyXG5cdFx0aWYgKCBzLmJlZm9yZVNlbmQgJiZcclxuXHRcdFx0KCBzLmJlZm9yZVNlbmQuY2FsbCggY2FsbGJhY2tDb250ZXh0LCBqcVhIUiwgcyApID09PSBmYWxzZSB8fCBzdGF0ZSA9PT0gMiApICkge1xyXG5cclxuXHRcdFx0Ly8gQWJvcnQgaWYgbm90IGRvbmUgYWxyZWFkeSBhbmQgcmV0dXJuXHJcblx0XHRcdHJldHVybiBqcVhIUi5hYm9ydCgpO1xyXG5cdFx0fVxyXG5cclxuXHRcdC8vIEFib3J0aW5nIGlzIG5vIGxvbmdlciBhIGNhbmNlbGxhdGlvblxyXG5cdFx0c3RyQWJvcnQgPSBcImFib3J0XCI7XHJcblxyXG5cdFx0Ly8gSW5zdGFsbCBjYWxsYmFja3Mgb24gZGVmZXJyZWRzXHJcblx0XHRmb3IgKCBpIGluIHsgc3VjY2VzczogMSwgZXJyb3I6IDEsIGNvbXBsZXRlOiAxIH0gKSB7XHJcblx0XHRcdGpxWEhSWyBpIF0oIHNbIGkgXSApO1xyXG5cdFx0fVxyXG5cclxuXHRcdC8vIEdldCB0cmFuc3BvcnRcclxuXHRcdHRyYW5zcG9ydCA9IGluc3BlY3RQcmVmaWx0ZXJzT3JUcmFuc3BvcnRzKCB0cmFuc3BvcnRzLCBzLCBvcHRpb25zLCBqcVhIUiApO1xyXG5cclxuXHRcdC8vIElmIG5vIHRyYW5zcG9ydCwgd2UgYXV0by1hYm9ydFxyXG5cdFx0aWYgKCAhdHJhbnNwb3J0ICkge1xyXG5cdFx0XHRkb25lKCAtMSwgXCJObyBUcmFuc3BvcnRcIiApO1xyXG5cdFx0fSBlbHNlIHtcclxuXHRcdFx0anFYSFIucmVhZHlTdGF0ZSA9IDE7XHJcblxyXG5cdFx0XHQvLyBTZW5kIGdsb2JhbCBldmVudFxyXG5cdFx0XHRpZiAoIGZpcmVHbG9iYWxzICkge1xyXG5cdFx0XHRcdGdsb2JhbEV2ZW50Q29udGV4dC50cmlnZ2VyKCBcImFqYXhTZW5kXCIsIFsganFYSFIsIHMgXSApO1xyXG5cdFx0XHR9XHJcblxyXG5cdFx0XHQvLyBJZiByZXF1ZXN0IHdhcyBhYm9ydGVkIGluc2lkZSBhamF4U2VuZCwgc3RvcCB0aGVyZVxyXG5cdFx0XHRpZiAoIHN0YXRlID09PSAyICkge1xyXG5cdFx0XHRcdHJldHVybiBqcVhIUjtcclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0Ly8gVGltZW91dFxyXG5cdFx0XHRpZiAoIHMuYXN5bmMgJiYgcy50aW1lb3V0ID4gMCApIHtcclxuXHRcdFx0XHR0aW1lb3V0VGltZXIgPSB3aW5kb3cuc2V0VGltZW91dCggZnVuY3Rpb24oKSB7XHJcblx0XHRcdFx0XHRqcVhIUi5hYm9ydCggXCJ0aW1lb3V0XCIgKTtcclxuXHRcdFx0XHR9LCBzLnRpbWVvdXQgKTtcclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0dHJ5IHtcclxuXHRcdFx0XHRzdGF0ZSA9IDE7XHJcblx0XHRcdFx0dHJhbnNwb3J0LnNlbmQoIHJlcXVlc3RIZWFkZXJzLCBkb25lICk7XHJcblx0XHRcdH0gY2F0Y2ggKCBlICkge1xyXG5cclxuXHRcdFx0XHQvLyBQcm9wYWdhdGUgZXhjZXB0aW9uIGFzIGVycm9yIGlmIG5vdCBkb25lXHJcblx0XHRcdFx0aWYgKCBzdGF0ZSA8IDIgKSB7XHJcblx0XHRcdFx0XHRkb25lKCAtMSwgZSApO1xyXG5cclxuXHRcdFx0XHQvLyBTaW1wbHkgcmV0aHJvdyBvdGhlcndpc2VcclxuXHRcdFx0XHR9IGVsc2Uge1xyXG5cdFx0XHRcdFx0dGhyb3cgZTtcclxuXHRcdFx0XHR9XHJcblx0XHRcdH1cclxuXHRcdH1cclxuXHJcblx0XHQvLyBDYWxsYmFjayBmb3Igd2hlbiBldmVyeXRoaW5nIGlzIGRvbmVcclxuXHRcdGZ1bmN0aW9uIGRvbmUoIHN0YXR1cywgbmF0aXZlU3RhdHVzVGV4dCwgcmVzcG9uc2VzLCBoZWFkZXJzICkge1xyXG5cdFx0XHR2YXIgaXNTdWNjZXNzLCBzdWNjZXNzLCBlcnJvciwgcmVzcG9uc2UsIG1vZGlmaWVkLFxyXG5cdFx0XHRcdHN0YXR1c1RleHQgPSBuYXRpdmVTdGF0dXNUZXh0O1xyXG5cclxuXHRcdFx0Ly8gQ2FsbGVkIG9uY2VcclxuXHRcdFx0aWYgKCBzdGF0ZSA9PT0gMiApIHtcclxuXHRcdFx0XHRyZXR1cm47XHJcblx0XHRcdH1cclxuXHJcblx0XHRcdC8vIFN0YXRlIGlzIFwiZG9uZVwiIG5vd1xyXG5cdFx0XHRzdGF0ZSA9IDI7XHJcblxyXG5cdFx0XHQvLyBDbGVhciB0aW1lb3V0IGlmIGl0IGV4aXN0c1xyXG5cdFx0XHRpZiAoIHRpbWVvdXRUaW1lciApIHtcclxuXHRcdFx0XHR3aW5kb3cuY2xlYXJUaW1lb3V0KCB0aW1lb3V0VGltZXIgKTtcclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0Ly8gRGVyZWZlcmVuY2UgdHJhbnNwb3J0IGZvciBlYXJseSBnYXJiYWdlIGNvbGxlY3Rpb25cclxuXHRcdFx0Ly8gKG5vIG1hdHRlciBob3cgbG9uZyB0aGUganFYSFIgb2JqZWN0IHdpbGwgYmUgdXNlZClcclxuXHRcdFx0dHJhbnNwb3J0ID0gdW5kZWZpbmVkO1xyXG5cclxuXHRcdFx0Ly8gQ2FjaGUgcmVzcG9uc2UgaGVhZGVyc1xyXG5cdFx0XHRyZXNwb25zZUhlYWRlcnNTdHJpbmcgPSBoZWFkZXJzIHx8IFwiXCI7XHJcblxyXG5cdFx0XHQvLyBTZXQgcmVhZHlTdGF0ZVxyXG5cdFx0XHRqcVhIUi5yZWFkeVN0YXRlID0gc3RhdHVzID4gMCA/IDQgOiAwO1xyXG5cclxuXHRcdFx0Ly8gRGV0ZXJtaW5lIGlmIHN1Y2Nlc3NmdWxcclxuXHRcdFx0aXNTdWNjZXNzID0gc3RhdHVzID49IDIwMCAmJiBzdGF0dXMgPCAzMDAgfHwgc3RhdHVzID09PSAzMDQ7XHJcblxyXG5cdFx0XHQvLyBHZXQgcmVzcG9uc2UgZGF0YVxyXG5cdFx0XHRpZiAoIHJlc3BvbnNlcyApIHtcclxuXHRcdFx0XHRyZXNwb25zZSA9IGFqYXhIYW5kbGVSZXNwb25zZXMoIHMsIGpxWEhSLCByZXNwb25zZXMgKTtcclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0Ly8gQ29udmVydCBubyBtYXR0ZXIgd2hhdCAodGhhdCB3YXkgcmVzcG9uc2VYWFggZmllbGRzIGFyZSBhbHdheXMgc2V0KVxyXG5cdFx0XHRyZXNwb25zZSA9IGFqYXhDb252ZXJ0KCBzLCByZXNwb25zZSwganFYSFIsIGlzU3VjY2VzcyApO1xyXG5cclxuXHRcdFx0Ly8gSWYgc3VjY2Vzc2Z1bCwgaGFuZGxlIHR5cGUgY2hhaW5pbmdcclxuXHRcdFx0aWYgKCBpc1N1Y2Nlc3MgKSB7XHJcblxyXG5cdFx0XHRcdC8vIFNldCB0aGUgSWYtTW9kaWZpZWQtU2luY2UgYW5kL29yIElmLU5vbmUtTWF0Y2ggaGVhZGVyLCBpZiBpbiBpZk1vZGlmaWVkIG1vZGUuXHJcblx0XHRcdFx0aWYgKCBzLmlmTW9kaWZpZWQgKSB7XHJcblx0XHRcdFx0XHRtb2RpZmllZCA9IGpxWEhSLmdldFJlc3BvbnNlSGVhZGVyKCBcIkxhc3QtTW9kaWZpZWRcIiApO1xyXG5cdFx0XHRcdFx0aWYgKCBtb2RpZmllZCApIHtcclxuXHRcdFx0XHRcdFx0alF1ZXJ5Lmxhc3RNb2RpZmllZFsgY2FjaGVVUkwgXSA9IG1vZGlmaWVkO1xyXG5cdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0bW9kaWZpZWQgPSBqcVhIUi5nZXRSZXNwb25zZUhlYWRlciggXCJldGFnXCIgKTtcclxuXHRcdFx0XHRcdGlmICggbW9kaWZpZWQgKSB7XHJcblx0XHRcdFx0XHRcdGpRdWVyeS5ldGFnWyBjYWNoZVVSTCBdID0gbW9kaWZpZWQ7XHJcblx0XHRcdFx0XHR9XHJcblx0XHRcdFx0fVxyXG5cclxuXHRcdFx0XHQvLyBpZiBubyBjb250ZW50XHJcblx0XHRcdFx0aWYgKCBzdGF0dXMgPT09IDIwNCB8fCBzLnR5cGUgPT09IFwiSEVBRFwiICkge1xyXG5cdFx0XHRcdFx0c3RhdHVzVGV4dCA9IFwibm9jb250ZW50XCI7XHJcblxyXG5cdFx0XHRcdC8vIGlmIG5vdCBtb2RpZmllZFxyXG5cdFx0XHRcdH0gZWxzZSBpZiAoIHN0YXR1cyA9PT0gMzA0ICkge1xyXG5cdFx0XHRcdFx0c3RhdHVzVGV4dCA9IFwibm90bW9kaWZpZWRcIjtcclxuXHJcblx0XHRcdFx0Ly8gSWYgd2UgaGF2ZSBkYXRhLCBsZXQncyBjb252ZXJ0IGl0XHJcblx0XHRcdFx0fSBlbHNlIHtcclxuXHRcdFx0XHRcdHN0YXR1c1RleHQgPSByZXNwb25zZS5zdGF0ZTtcclxuXHRcdFx0XHRcdHN1Y2Nlc3MgPSByZXNwb25zZS5kYXRhO1xyXG5cdFx0XHRcdFx0ZXJyb3IgPSByZXNwb25zZS5lcnJvcjtcclxuXHRcdFx0XHRcdGlzU3VjY2VzcyA9ICFlcnJvcjtcclxuXHRcdFx0XHR9XHJcblx0XHRcdH0gZWxzZSB7XHJcblxyXG5cdFx0XHRcdC8vIEV4dHJhY3QgZXJyb3IgZnJvbSBzdGF0dXNUZXh0IGFuZCBub3JtYWxpemUgZm9yIG5vbi1hYm9ydHNcclxuXHRcdFx0XHRlcnJvciA9IHN0YXR1c1RleHQ7XHJcblx0XHRcdFx0aWYgKCBzdGF0dXMgfHwgIXN0YXR1c1RleHQgKSB7XHJcblx0XHRcdFx0XHRzdGF0dXNUZXh0ID0gXCJlcnJvclwiO1xyXG5cdFx0XHRcdFx0aWYgKCBzdGF0dXMgPCAwICkge1xyXG5cdFx0XHRcdFx0XHRzdGF0dXMgPSAwO1xyXG5cdFx0XHRcdFx0fVxyXG5cdFx0XHRcdH1cclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0Ly8gU2V0IGRhdGEgZm9yIHRoZSBmYWtlIHhociBvYmplY3RcclxuXHRcdFx0anFYSFIuc3RhdHVzID0gc3RhdHVzO1xyXG5cdFx0XHRqcVhIUi5zdGF0dXNUZXh0ID0gKCBuYXRpdmVTdGF0dXNUZXh0IHx8IHN0YXR1c1RleHQgKSArIFwiXCI7XHJcblxyXG5cdFx0XHQvLyBTdWNjZXNzL0Vycm9yXHJcblx0XHRcdGlmICggaXNTdWNjZXNzICkge1xyXG5cdFx0XHRcdGRlZmVycmVkLnJlc29sdmVXaXRoKCBjYWxsYmFja0NvbnRleHQsIFsgc3VjY2Vzcywgc3RhdHVzVGV4dCwganFYSFIgXSApO1xyXG5cdFx0XHR9IGVsc2Uge1xyXG5cdFx0XHRcdGRlZmVycmVkLnJlamVjdFdpdGgoIGNhbGxiYWNrQ29udGV4dCwgWyBqcVhIUiwgc3RhdHVzVGV4dCwgZXJyb3IgXSApO1xyXG5cdFx0XHR9XHJcblxyXG5cdFx0XHQvLyBTdGF0dXMtZGVwZW5kZW50IGNhbGxiYWNrc1xyXG5cdFx0XHRqcVhIUi5zdGF0dXNDb2RlKCBzdGF0dXNDb2RlICk7XHJcblx0XHRcdHN0YXR1c0NvZGUgPSB1bmRlZmluZWQ7XHJcblxyXG5cdFx0XHRpZiAoIGZpcmVHbG9iYWxzICkge1xyXG5cdFx0XHRcdGdsb2JhbEV2ZW50Q29udGV4dC50cmlnZ2VyKCBpc1N1Y2Nlc3MgPyBcImFqYXhTdWNjZXNzXCIgOiBcImFqYXhFcnJvclwiLFxyXG5cdFx0XHRcdFx0WyBqcVhIUiwgcywgaXNTdWNjZXNzID8gc3VjY2VzcyA6IGVycm9yIF0gKTtcclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0Ly8gQ29tcGxldGVcclxuXHRcdFx0Y29tcGxldGVEZWZlcnJlZC5maXJlV2l0aCggY2FsbGJhY2tDb250ZXh0LCBbIGpxWEhSLCBzdGF0dXNUZXh0IF0gKTtcclxuXHJcblx0XHRcdGlmICggZmlyZUdsb2JhbHMgKSB7XHJcblx0XHRcdFx0Z2xvYmFsRXZlbnRDb250ZXh0LnRyaWdnZXIoIFwiYWpheENvbXBsZXRlXCIsIFsganFYSFIsIHMgXSApO1xyXG5cclxuXHRcdFx0XHQvLyBIYW5kbGUgdGhlIGdsb2JhbCBBSkFYIGNvdW50ZXJcclxuXHRcdFx0XHRpZiAoICEoIC0talF1ZXJ5LmFjdGl2ZSApICkge1xyXG5cdFx0XHRcdFx0alF1ZXJ5LmV2ZW50LnRyaWdnZXIoIFwiYWpheFN0b3BcIiApO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0fVxyXG5cdFx0fVxyXG5cclxuXHRcdHJldHVybiBqcVhIUjtcclxuXHR9LFxyXG5cclxuXHRnZXRKU09OOiBmdW5jdGlvbiggdXJsLCBkYXRhLCBjYWxsYmFjayApIHtcclxuXHRcdHJldHVybiBqUXVlcnkuZ2V0KCB1cmwsIGRhdGEsIGNhbGxiYWNrLCBcImpzb25cIiApO1xyXG5cdH0sXHJcblxyXG5cdGdldFNjcmlwdDogZnVuY3Rpb24oIHVybCwgY2FsbGJhY2sgKSB7XHJcblx0XHRyZXR1cm4galF1ZXJ5LmdldCggdXJsLCB1bmRlZmluZWQsIGNhbGxiYWNrLCBcInNjcmlwdFwiICk7XHJcblx0fVxyXG59ICk7XHJcblxyXG5qUXVlcnkuZWFjaCggWyBcImdldFwiLCBcInBvc3RcIiBdLCBmdW5jdGlvbiggaSwgbWV0aG9kICkge1xyXG5cdGpRdWVyeVsgbWV0aG9kIF0gPSBmdW5jdGlvbiggdXJsLCBkYXRhLCBjYWxsYmFjaywgdHlwZSApIHtcclxuXHJcblx0XHQvLyBTaGlmdCBhcmd1bWVudHMgaWYgZGF0YSBhcmd1bWVudCB3YXMgb21pdHRlZFxyXG5cdFx0aWYgKCBqUXVlcnkuaXNGdW5jdGlvbiggZGF0YSApICkge1xyXG5cdFx0XHR0eXBlID0gdHlwZSB8fCBjYWxsYmFjaztcclxuXHRcdFx0Y2FsbGJhY2sgPSBkYXRhO1xyXG5cdFx0XHRkYXRhID0gdW5kZWZpbmVkO1xyXG5cdFx0fVxyXG5cclxuXHRcdC8vIFRoZSB1cmwgY2FuIGJlIGFuIG9wdGlvbnMgb2JqZWN0ICh3aGljaCB0aGVuIG11c3QgaGF2ZSAudXJsKVxyXG5cdFx0cmV0dXJuIGpRdWVyeS5hamF4KCBqUXVlcnkuZXh0ZW5kKCB7XHJcblx0XHRcdHVybDogdXJsLFxyXG5cdFx0XHR0eXBlOiBtZXRob2QsXHJcblx0XHRcdGRhdGFUeXBlOiB0eXBlLFxyXG5cdFx0XHRkYXRhOiBkYXRhLFxyXG5cdFx0XHRzdWNjZXNzOiBjYWxsYmFja1xyXG5cdFx0fSwgalF1ZXJ5LmlzUGxhaW5PYmplY3QoIHVybCApICYmIHVybCApICk7XHJcblx0fTtcclxufSApO1xyXG5cclxuXHJcbmpRdWVyeS5fZXZhbFVybCA9IGZ1bmN0aW9uKCB1cmwgKSB7XHJcblx0cmV0dXJuIGpRdWVyeS5hamF4KCB7XHJcblx0XHR1cmw6IHVybCxcclxuXHJcblx0XHQvLyBNYWtlIHRoaXMgZXhwbGljaXQsIHNpbmNlIHVzZXIgY2FuIG92ZXJyaWRlIHRoaXMgdGhyb3VnaCBhamF4U2V0dXAgKCMxMTI2NClcclxuXHRcdHR5cGU6IFwiR0VUXCIsXHJcblx0XHRkYXRhVHlwZTogXCJzY3JpcHRcIixcclxuXHRcdGFzeW5jOiBmYWxzZSxcclxuXHRcdGdsb2JhbDogZmFsc2UsXHJcblx0XHRcInRocm93c1wiOiB0cnVlXHJcblx0fSApO1xyXG59O1xyXG5cclxuXHJcbmpRdWVyeS5mbi5leHRlbmQoIHtcclxuXHR3cmFwQWxsOiBmdW5jdGlvbiggaHRtbCApIHtcclxuXHRcdHZhciB3cmFwO1xyXG5cclxuXHRcdGlmICggalF1ZXJ5LmlzRnVuY3Rpb24oIGh0bWwgKSApIHtcclxuXHRcdFx0cmV0dXJuIHRoaXMuZWFjaCggZnVuY3Rpb24oIGkgKSB7XHJcblx0XHRcdFx0alF1ZXJ5KCB0aGlzICkud3JhcEFsbCggaHRtbC5jYWxsKCB0aGlzLCBpICkgKTtcclxuXHRcdFx0fSApO1xyXG5cdFx0fVxyXG5cclxuXHRcdGlmICggdGhpc1sgMCBdICkge1xyXG5cclxuXHRcdFx0Ly8gVGhlIGVsZW1lbnRzIHRvIHdyYXAgdGhlIHRhcmdldCBhcm91bmRcclxuXHRcdFx0d3JhcCA9IGpRdWVyeSggaHRtbCwgdGhpc1sgMCBdLm93bmVyRG9jdW1lbnQgKS5lcSggMCApLmNsb25lKCB0cnVlICk7XHJcblxyXG5cdFx0XHRpZiAoIHRoaXNbIDAgXS5wYXJlbnROb2RlICkge1xyXG5cdFx0XHRcdHdyYXAuaW5zZXJ0QmVmb3JlKCB0aGlzWyAwIF0gKTtcclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0d3JhcC5tYXAoIGZ1bmN0aW9uKCkge1xyXG5cdFx0XHRcdHZhciBlbGVtID0gdGhpcztcclxuXHJcblx0XHRcdFx0d2hpbGUgKCBlbGVtLmZpcnN0RWxlbWVudENoaWxkICkge1xyXG5cdFx0XHRcdFx0ZWxlbSA9IGVsZW0uZmlyc3RFbGVtZW50Q2hpbGQ7XHJcblx0XHRcdFx0fVxyXG5cclxuXHRcdFx0XHRyZXR1cm4gZWxlbTtcclxuXHRcdFx0fSApLmFwcGVuZCggdGhpcyApO1xyXG5cdFx0fVxyXG5cclxuXHRcdHJldHVybiB0aGlzO1xyXG5cdH0sXHJcblxyXG5cdHdyYXBJbm5lcjogZnVuY3Rpb24oIGh0bWwgKSB7XHJcblx0XHRpZiAoIGpRdWVyeS5pc0Z1bmN0aW9uKCBodG1sICkgKSB7XHJcblx0XHRcdHJldHVybiB0aGlzLmVhY2goIGZ1bmN0aW9uKCBpICkge1xyXG5cdFx0XHRcdGpRdWVyeSggdGhpcyApLndyYXBJbm5lciggaHRtbC5jYWxsKCB0aGlzLCBpICkgKTtcclxuXHRcdFx0fSApO1xyXG5cdFx0fVxyXG5cclxuXHRcdHJldHVybiB0aGlzLmVhY2goIGZ1bmN0aW9uKCkge1xyXG5cdFx0XHR2YXIgc2VsZiA9IGpRdWVyeSggdGhpcyApLFxyXG5cdFx0XHRcdGNvbnRlbnRzID0gc2VsZi5jb250ZW50cygpO1xyXG5cclxuXHRcdFx0aWYgKCBjb250ZW50cy5sZW5ndGggKSB7XHJcblx0XHRcdFx0Y29udGVudHMud3JhcEFsbCggaHRtbCApO1xyXG5cclxuXHRcdFx0fSBlbHNlIHtcclxuXHRcdFx0XHRzZWxmLmFwcGVuZCggaHRtbCApO1xyXG5cdFx0XHR9XHJcblx0XHR9ICk7XHJcblx0fSxcclxuXHJcblx0d3JhcDogZnVuY3Rpb24oIGh0bWwgKSB7XHJcblx0XHR2YXIgaXNGdW5jdGlvbiA9IGpRdWVyeS5pc0Z1bmN0aW9uKCBodG1sICk7XHJcblxyXG5cdFx0cmV0dXJuIHRoaXMuZWFjaCggZnVuY3Rpb24oIGkgKSB7XHJcblx0XHRcdGpRdWVyeSggdGhpcyApLndyYXBBbGwoIGlzRnVuY3Rpb24gPyBodG1sLmNhbGwoIHRoaXMsIGkgKSA6IGh0bWwgKTtcclxuXHRcdH0gKTtcclxuXHR9LFxyXG5cclxuXHR1bndyYXA6IGZ1bmN0aW9uKCkge1xyXG5cdFx0cmV0dXJuIHRoaXMucGFyZW50KCkuZWFjaCggZnVuY3Rpb24oKSB7XHJcblx0XHRcdGlmICggIWpRdWVyeS5ub2RlTmFtZSggdGhpcywgXCJib2R5XCIgKSApIHtcclxuXHRcdFx0XHRqUXVlcnkoIHRoaXMgKS5yZXBsYWNlV2l0aCggdGhpcy5jaGlsZE5vZGVzICk7XHJcblx0XHRcdH1cclxuXHRcdH0gKS5lbmQoKTtcclxuXHR9XHJcbn0gKTtcclxuXHJcblxyXG5qUXVlcnkuZXhwci5maWx0ZXJzLmhpZGRlbiA9IGZ1bmN0aW9uKCBlbGVtICkge1xyXG5cdHJldHVybiAhalF1ZXJ5LmV4cHIuZmlsdGVycy52aXNpYmxlKCBlbGVtICk7XHJcbn07XHJcbmpRdWVyeS5leHByLmZpbHRlcnMudmlzaWJsZSA9IGZ1bmN0aW9uKCBlbGVtICkge1xyXG5cclxuXHQvLyBTdXBwb3J0OiBPcGVyYSA8PSAxMi4xMlxyXG5cdC8vIE9wZXJhIHJlcG9ydHMgb2Zmc2V0V2lkdGhzIGFuZCBvZmZzZXRIZWlnaHRzIGxlc3MgdGhhbiB6ZXJvIG9uIHNvbWUgZWxlbWVudHNcclxuXHQvLyBVc2UgT1IgaW5zdGVhZCBvZiBBTkQgYXMgdGhlIGVsZW1lbnQgaXMgbm90IHZpc2libGUgaWYgZWl0aGVyIGlzIHRydWVcclxuXHQvLyBTZWUgdGlja2V0cyAjMTA0MDYgYW5kICMxMzEzMlxyXG5cdHJldHVybiBlbGVtLm9mZnNldFdpZHRoID4gMCB8fCBlbGVtLm9mZnNldEhlaWdodCA+IDAgfHwgZWxlbS5nZXRDbGllbnRSZWN0cygpLmxlbmd0aCA+IDA7XHJcbn07XHJcblxyXG5cclxuXHJcblxyXG52YXIgcjIwID0gLyUyMC9nLFxyXG5cdHJicmFja2V0ID0gL1xcW1xcXSQvLFxyXG5cdHJDUkxGID0gL1xccj9cXG4vZyxcclxuXHRyc3VibWl0dGVyVHlwZXMgPSAvXig/OnN1Ym1pdHxidXR0b258aW1hZ2V8cmVzZXR8ZmlsZSkkL2ksXHJcblx0cnN1Ym1pdHRhYmxlID0gL14oPzppbnB1dHxzZWxlY3R8dGV4dGFyZWF8a2V5Z2VuKS9pO1xyXG5cclxuZnVuY3Rpb24gYnVpbGRQYXJhbXMoIHByZWZpeCwgb2JqLCB0cmFkaXRpb25hbCwgYWRkICkge1xyXG5cdHZhciBuYW1lO1xyXG5cclxuXHRpZiAoIGpRdWVyeS5pc0FycmF5KCBvYmogKSApIHtcclxuXHJcblx0XHQvLyBTZXJpYWxpemUgYXJyYXkgaXRlbS5cclxuXHRcdGpRdWVyeS5lYWNoKCBvYmosIGZ1bmN0aW9uKCBpLCB2ICkge1xyXG5cdFx0XHRpZiAoIHRyYWRpdGlvbmFsIHx8IHJicmFja2V0LnRlc3QoIHByZWZpeCApICkge1xyXG5cclxuXHRcdFx0XHQvLyBUcmVhdCBlYWNoIGFycmF5IGl0ZW0gYXMgYSBzY2FsYXIuXHJcblx0XHRcdFx0YWRkKCBwcmVmaXgsIHYgKTtcclxuXHJcblx0XHRcdH0gZWxzZSB7XHJcblxyXG5cdFx0XHRcdC8vIEl0ZW0gaXMgbm9uLXNjYWxhciAoYXJyYXkgb3Igb2JqZWN0KSwgZW5jb2RlIGl0cyBudW1lcmljIGluZGV4LlxyXG5cdFx0XHRcdGJ1aWxkUGFyYW1zKFxyXG5cdFx0XHRcdFx0cHJlZml4ICsgXCJbXCIgKyAoIHR5cGVvZiB2ID09PSBcIm9iamVjdFwiICYmIHYgIT0gbnVsbCA/IGkgOiBcIlwiICkgKyBcIl1cIixcclxuXHRcdFx0XHRcdHYsXHJcblx0XHRcdFx0XHR0cmFkaXRpb25hbCxcclxuXHRcdFx0XHRcdGFkZFxyXG5cdFx0XHRcdCk7XHJcblx0XHRcdH1cclxuXHRcdH0gKTtcclxuXHJcblx0fSBlbHNlIGlmICggIXRyYWRpdGlvbmFsICYmIGpRdWVyeS50eXBlKCBvYmogKSA9PT0gXCJvYmplY3RcIiApIHtcclxuXHJcblx0XHQvLyBTZXJpYWxpemUgb2JqZWN0IGl0ZW0uXHJcblx0XHRmb3IgKCBuYW1lIGluIG9iaiApIHtcclxuXHRcdFx0YnVpbGRQYXJhbXMoIHByZWZpeCArIFwiW1wiICsgbmFtZSArIFwiXVwiLCBvYmpbIG5hbWUgXSwgdHJhZGl0aW9uYWwsIGFkZCApO1xyXG5cdFx0fVxyXG5cclxuXHR9IGVsc2Uge1xyXG5cclxuXHRcdC8vIFNlcmlhbGl6ZSBzY2FsYXIgaXRlbS5cclxuXHRcdGFkZCggcHJlZml4LCBvYmogKTtcclxuXHR9XHJcbn1cclxuXHJcbi8vIFNlcmlhbGl6ZSBhbiBhcnJheSBvZiBmb3JtIGVsZW1lbnRzIG9yIGEgc2V0IG9mXHJcbi8vIGtleS92YWx1ZXMgaW50byBhIHF1ZXJ5IHN0cmluZ1xyXG5qUXVlcnkucGFyYW0gPSBmdW5jdGlvbiggYSwgdHJhZGl0aW9uYWwgKSB7XHJcblx0dmFyIHByZWZpeCxcclxuXHRcdHMgPSBbXSxcclxuXHRcdGFkZCA9IGZ1bmN0aW9uKCBrZXksIHZhbHVlICkge1xyXG5cclxuXHRcdFx0Ly8gSWYgdmFsdWUgaXMgYSBmdW5jdGlvbiwgaW52b2tlIGl0IGFuZCByZXR1cm4gaXRzIHZhbHVlXHJcblx0XHRcdHZhbHVlID0galF1ZXJ5LmlzRnVuY3Rpb24oIHZhbHVlICkgPyB2YWx1ZSgpIDogKCB2YWx1ZSA9PSBudWxsID8gXCJcIiA6IHZhbHVlICk7XHJcblx0XHRcdHNbIHMubGVuZ3RoIF0gPSBlbmNvZGVVUklDb21wb25lbnQoIGtleSApICsgXCI9XCIgKyBlbmNvZGVVUklDb21wb25lbnQoIHZhbHVlICk7XHJcblx0XHR9O1xyXG5cclxuXHQvLyBTZXQgdHJhZGl0aW9uYWwgdG8gdHJ1ZSBmb3IgalF1ZXJ5IDw9IDEuMy4yIGJlaGF2aW9yLlxyXG5cdGlmICggdHJhZGl0aW9uYWwgPT09IHVuZGVmaW5lZCApIHtcclxuXHRcdHRyYWRpdGlvbmFsID0galF1ZXJ5LmFqYXhTZXR0aW5ncyAmJiBqUXVlcnkuYWpheFNldHRpbmdzLnRyYWRpdGlvbmFsO1xyXG5cdH1cclxuXHJcblx0Ly8gSWYgYW4gYXJyYXkgd2FzIHBhc3NlZCBpbiwgYXNzdW1lIHRoYXQgaXQgaXMgYW4gYXJyYXkgb2YgZm9ybSBlbGVtZW50cy5cclxuXHRpZiAoIGpRdWVyeS5pc0FycmF5KCBhICkgfHwgKCBhLmpxdWVyeSAmJiAhalF1ZXJ5LmlzUGxhaW5PYmplY3QoIGEgKSApICkge1xyXG5cclxuXHRcdC8vIFNlcmlhbGl6ZSB0aGUgZm9ybSBlbGVtZW50c1xyXG5cdFx0alF1ZXJ5LmVhY2goIGEsIGZ1bmN0aW9uKCkge1xyXG5cdFx0XHRhZGQoIHRoaXMubmFtZSwgdGhpcy52YWx1ZSApO1xyXG5cdFx0fSApO1xyXG5cclxuXHR9IGVsc2Uge1xyXG5cclxuXHRcdC8vIElmIHRyYWRpdGlvbmFsLCBlbmNvZGUgdGhlIFwib2xkXCIgd2F5ICh0aGUgd2F5IDEuMy4yIG9yIG9sZGVyXHJcblx0XHQvLyBkaWQgaXQpLCBvdGhlcndpc2UgZW5jb2RlIHBhcmFtcyByZWN1cnNpdmVseS5cclxuXHRcdGZvciAoIHByZWZpeCBpbiBhICkge1xyXG5cdFx0XHRidWlsZFBhcmFtcyggcHJlZml4LCBhWyBwcmVmaXggXSwgdHJhZGl0aW9uYWwsIGFkZCApO1xyXG5cdFx0fVxyXG5cdH1cclxuXHJcblx0Ly8gUmV0dXJuIHRoZSByZXN1bHRpbmcgc2VyaWFsaXphdGlvblxyXG5cdHJldHVybiBzLmpvaW4oIFwiJlwiICkucmVwbGFjZSggcjIwLCBcIitcIiApO1xyXG59O1xyXG5cclxualF1ZXJ5LmZuLmV4dGVuZCgge1xyXG5cdHNlcmlhbGl6ZTogZnVuY3Rpb24oKSB7XHJcblx0XHRyZXR1cm4galF1ZXJ5LnBhcmFtKCB0aGlzLnNlcmlhbGl6ZUFycmF5KCkgKTtcclxuXHR9LFxyXG5cdHNlcmlhbGl6ZUFycmF5OiBmdW5jdGlvbigpIHtcclxuXHRcdHJldHVybiB0aGlzLm1hcCggZnVuY3Rpb24oKSB7XHJcblxyXG5cdFx0XHQvLyBDYW4gYWRkIHByb3BIb29rIGZvciBcImVsZW1lbnRzXCIgdG8gZmlsdGVyIG9yIGFkZCBmb3JtIGVsZW1lbnRzXHJcblx0XHRcdHZhciBlbGVtZW50cyA9IGpRdWVyeS5wcm9wKCB0aGlzLCBcImVsZW1lbnRzXCIgKTtcclxuXHRcdFx0cmV0dXJuIGVsZW1lbnRzID8galF1ZXJ5Lm1ha2VBcnJheSggZWxlbWVudHMgKSA6IHRoaXM7XHJcblx0XHR9IClcclxuXHRcdC5maWx0ZXIoIGZ1bmN0aW9uKCkge1xyXG5cdFx0XHR2YXIgdHlwZSA9IHRoaXMudHlwZTtcclxuXHJcblx0XHRcdC8vIFVzZSAuaXMoIFwiOmRpc2FibGVkXCIgKSBzbyB0aGF0IGZpZWxkc2V0W2Rpc2FibGVkXSB3b3Jrc1xyXG5cdFx0XHRyZXR1cm4gdGhpcy5uYW1lICYmICFqUXVlcnkoIHRoaXMgKS5pcyggXCI6ZGlzYWJsZWRcIiApICYmXHJcblx0XHRcdFx0cnN1Ym1pdHRhYmxlLnRlc3QoIHRoaXMubm9kZU5hbWUgKSAmJiAhcnN1Ym1pdHRlclR5cGVzLnRlc3QoIHR5cGUgKSAmJlxyXG5cdFx0XHRcdCggdGhpcy5jaGVja2VkIHx8ICFyY2hlY2thYmxlVHlwZS50ZXN0KCB0eXBlICkgKTtcclxuXHRcdH0gKVxyXG5cdFx0Lm1hcCggZnVuY3Rpb24oIGksIGVsZW0gKSB7XHJcblx0XHRcdHZhciB2YWwgPSBqUXVlcnkoIHRoaXMgKS52YWwoKTtcclxuXHJcblx0XHRcdHJldHVybiB2YWwgPT0gbnVsbCA/XHJcblx0XHRcdFx0bnVsbCA6XHJcblx0XHRcdFx0alF1ZXJ5LmlzQXJyYXkoIHZhbCApID9cclxuXHRcdFx0XHRcdGpRdWVyeS5tYXAoIHZhbCwgZnVuY3Rpb24oIHZhbCApIHtcclxuXHRcdFx0XHRcdFx0cmV0dXJuIHsgbmFtZTogZWxlbS5uYW1lLCB2YWx1ZTogdmFsLnJlcGxhY2UoIHJDUkxGLCBcIlxcclxcblwiICkgfTtcclxuXHRcdFx0XHRcdH0gKSA6XHJcblx0XHRcdFx0XHR7IG5hbWU6IGVsZW0ubmFtZSwgdmFsdWU6IHZhbC5yZXBsYWNlKCByQ1JMRiwgXCJcXHJcXG5cIiApIH07XHJcblx0XHR9ICkuZ2V0KCk7XHJcblx0fVxyXG59ICk7XHJcblxyXG5cclxualF1ZXJ5LmFqYXhTZXR0aW5ncy54aHIgPSBmdW5jdGlvbigpIHtcclxuXHR0cnkge1xyXG5cdFx0cmV0dXJuIG5ldyB3aW5kb3cuWE1MSHR0cFJlcXVlc3QoKTtcclxuXHR9IGNhdGNoICggZSApIHt9XHJcbn07XHJcblxyXG52YXIgeGhyU3VjY2Vzc1N0YXR1cyA9IHtcclxuXHJcblx0XHQvLyBGaWxlIHByb3RvY29sIGFsd2F5cyB5aWVsZHMgc3RhdHVzIGNvZGUgMCwgYXNzdW1lIDIwMFxyXG5cdFx0MDogMjAwLFxyXG5cclxuXHRcdC8vIFN1cHBvcnQ6IElFOVxyXG5cdFx0Ly8gIzE0NTA6IHNvbWV0aW1lcyBJRSByZXR1cm5zIDEyMjMgd2hlbiBpdCBzaG91bGQgYmUgMjA0XHJcblx0XHQxMjIzOiAyMDRcclxuXHR9LFxyXG5cdHhoclN1cHBvcnRlZCA9IGpRdWVyeS5hamF4U2V0dGluZ3MueGhyKCk7XHJcblxyXG5zdXBwb3J0LmNvcnMgPSAhIXhoclN1cHBvcnRlZCAmJiAoIFwid2l0aENyZWRlbnRpYWxzXCIgaW4geGhyU3VwcG9ydGVkICk7XHJcbnN1cHBvcnQuYWpheCA9IHhoclN1cHBvcnRlZCA9ICEheGhyU3VwcG9ydGVkO1xyXG5cclxualF1ZXJ5LmFqYXhUcmFuc3BvcnQoIGZ1bmN0aW9uKCBvcHRpb25zICkge1xyXG5cdHZhciBjYWxsYmFjaywgZXJyb3JDYWxsYmFjaztcclxuXHJcblx0Ly8gQ3Jvc3MgZG9tYWluIG9ubHkgYWxsb3dlZCBpZiBzdXBwb3J0ZWQgdGhyb3VnaCBYTUxIdHRwUmVxdWVzdFxyXG5cdGlmICggc3VwcG9ydC5jb3JzIHx8IHhoclN1cHBvcnRlZCAmJiAhb3B0aW9ucy5jcm9zc0RvbWFpbiApIHtcclxuXHRcdHJldHVybiB7XHJcblx0XHRcdHNlbmQ6IGZ1bmN0aW9uKCBoZWFkZXJzLCBjb21wbGV0ZSApIHtcclxuXHRcdFx0XHR2YXIgaSxcclxuXHRcdFx0XHRcdHhociA9IG9wdGlvbnMueGhyKCk7XHJcblxyXG5cdFx0XHRcdHhoci5vcGVuKFxyXG5cdFx0XHRcdFx0b3B0aW9ucy50eXBlLFxyXG5cdFx0XHRcdFx0b3B0aW9ucy51cmwsXHJcblx0XHRcdFx0XHRvcHRpb25zLmFzeW5jLFxyXG5cdFx0XHRcdFx0b3B0aW9ucy51c2VybmFtZSxcclxuXHRcdFx0XHRcdG9wdGlvbnMucGFzc3dvcmRcclxuXHRcdFx0XHQpO1xyXG5cclxuXHRcdFx0XHQvLyBBcHBseSBjdXN0b20gZmllbGRzIGlmIHByb3ZpZGVkXHJcblx0XHRcdFx0aWYgKCBvcHRpb25zLnhockZpZWxkcyApIHtcclxuXHRcdFx0XHRcdGZvciAoIGkgaW4gb3B0aW9ucy54aHJGaWVsZHMgKSB7XHJcblx0XHRcdFx0XHRcdHhoclsgaSBdID0gb3B0aW9ucy54aHJGaWVsZHNbIGkgXTtcclxuXHRcdFx0XHRcdH1cclxuXHRcdFx0XHR9XHJcblxyXG5cdFx0XHRcdC8vIE92ZXJyaWRlIG1pbWUgdHlwZSBpZiBuZWVkZWRcclxuXHRcdFx0XHRpZiAoIG9wdGlvbnMubWltZVR5cGUgJiYgeGhyLm92ZXJyaWRlTWltZVR5cGUgKSB7XHJcblx0XHRcdFx0XHR4aHIub3ZlcnJpZGVNaW1lVHlwZSggb3B0aW9ucy5taW1lVHlwZSApO1xyXG5cdFx0XHRcdH1cclxuXHJcblx0XHRcdFx0Ly8gWC1SZXF1ZXN0ZWQtV2l0aCBoZWFkZXJcclxuXHRcdFx0XHQvLyBGb3IgY3Jvc3MtZG9tYWluIHJlcXVlc3RzLCBzZWVpbmcgYXMgY29uZGl0aW9ucyBmb3IgYSBwcmVmbGlnaHQgYXJlXHJcblx0XHRcdFx0Ly8gYWtpbiB0byBhIGppZ3NhdyBwdXp6bGUsIHdlIHNpbXBseSBuZXZlciBzZXQgaXQgdG8gYmUgc3VyZS5cclxuXHRcdFx0XHQvLyAoaXQgY2FuIGFsd2F5cyBiZSBzZXQgb24gYSBwZXItcmVxdWVzdCBiYXNpcyBvciBldmVuIHVzaW5nIGFqYXhTZXR1cClcclxuXHRcdFx0XHQvLyBGb3Igc2FtZS1kb21haW4gcmVxdWVzdHMsIHdvbid0IGNoYW5nZSBoZWFkZXIgaWYgYWxyZWFkeSBwcm92aWRlZC5cclxuXHRcdFx0XHRpZiAoICFvcHRpb25zLmNyb3NzRG9tYWluICYmICFoZWFkZXJzWyBcIlgtUmVxdWVzdGVkLVdpdGhcIiBdICkge1xyXG5cdFx0XHRcdFx0aGVhZGVyc1sgXCJYLVJlcXVlc3RlZC1XaXRoXCIgXSA9IFwiWE1MSHR0cFJlcXVlc3RcIjtcclxuXHRcdFx0XHR9XHJcblxyXG5cdFx0XHRcdC8vIFNldCBoZWFkZXJzXHJcblx0XHRcdFx0Zm9yICggaSBpbiBoZWFkZXJzICkge1xyXG5cdFx0XHRcdFx0eGhyLnNldFJlcXVlc3RIZWFkZXIoIGksIGhlYWRlcnNbIGkgXSApO1xyXG5cdFx0XHRcdH1cclxuXHJcblx0XHRcdFx0Ly8gQ2FsbGJhY2tcclxuXHRcdFx0XHRjYWxsYmFjayA9IGZ1bmN0aW9uKCB0eXBlICkge1xyXG5cdFx0XHRcdFx0cmV0dXJuIGZ1bmN0aW9uKCkge1xyXG5cdFx0XHRcdFx0XHRpZiAoIGNhbGxiYWNrICkge1xyXG5cdFx0XHRcdFx0XHRcdGNhbGxiYWNrID0gZXJyb3JDYWxsYmFjayA9IHhoci5vbmxvYWQgPVxyXG5cdFx0XHRcdFx0XHRcdFx0eGhyLm9uZXJyb3IgPSB4aHIub25hYm9ydCA9IHhoci5vbnJlYWR5c3RhdGVjaGFuZ2UgPSBudWxsO1xyXG5cclxuXHRcdFx0XHRcdFx0XHRpZiAoIHR5cGUgPT09IFwiYWJvcnRcIiApIHtcclxuXHRcdFx0XHRcdFx0XHRcdHhoci5hYm9ydCgpO1xyXG5cdFx0XHRcdFx0XHRcdH0gZWxzZSBpZiAoIHR5cGUgPT09IFwiZXJyb3JcIiApIHtcclxuXHJcblx0XHRcdFx0XHRcdFx0XHQvLyBTdXBwb3J0OiBJRTlcclxuXHRcdFx0XHRcdFx0XHRcdC8vIE9uIGEgbWFudWFsIG5hdGl2ZSBhYm9ydCwgSUU5IHRocm93c1xyXG5cdFx0XHRcdFx0XHRcdFx0Ly8gZXJyb3JzIG9uIGFueSBwcm9wZXJ0eSBhY2Nlc3MgdGhhdCBpcyBub3QgcmVhZHlTdGF0ZVxyXG5cdFx0XHRcdFx0XHRcdFx0aWYgKCB0eXBlb2YgeGhyLnN0YXR1cyAhPT0gXCJudW1iZXJcIiApIHtcclxuXHRcdFx0XHRcdFx0XHRcdFx0Y29tcGxldGUoIDAsIFwiZXJyb3JcIiApO1xyXG5cdFx0XHRcdFx0XHRcdFx0fSBlbHNlIHtcclxuXHRcdFx0XHRcdFx0XHRcdFx0Y29tcGxldGUoXHJcblxyXG5cdFx0XHRcdFx0XHRcdFx0XHRcdC8vIEZpbGU6IHByb3RvY29sIGFsd2F5cyB5aWVsZHMgc3RhdHVzIDA7IHNlZSAjODYwNSwgIzE0MjA3XHJcblx0XHRcdFx0XHRcdFx0XHRcdFx0eGhyLnN0YXR1cyxcclxuXHRcdFx0XHRcdFx0XHRcdFx0XHR4aHIuc3RhdHVzVGV4dFxyXG5cdFx0XHRcdFx0XHRcdFx0XHQpO1xyXG5cdFx0XHRcdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0XHRcdH0gZWxzZSB7XHJcblx0XHRcdFx0XHRcdFx0XHRjb21wbGV0ZShcclxuXHRcdFx0XHRcdFx0XHRcdFx0eGhyU3VjY2Vzc1N0YXR1c1sgeGhyLnN0YXR1cyBdIHx8IHhoci5zdGF0dXMsXHJcblx0XHRcdFx0XHRcdFx0XHRcdHhoci5zdGF0dXNUZXh0LFxyXG5cclxuXHRcdFx0XHRcdFx0XHRcdFx0Ly8gU3VwcG9ydDogSUU5IG9ubHlcclxuXHRcdFx0XHRcdFx0XHRcdFx0Ly8gSUU5IGhhcyBubyBYSFIyIGJ1dCB0aHJvd3Mgb24gYmluYXJ5ICh0cmFjLTExNDI2KVxyXG5cdFx0XHRcdFx0XHRcdFx0XHQvLyBGb3IgWEhSMiBub24tdGV4dCwgbGV0IHRoZSBjYWxsZXIgaGFuZGxlIGl0IChnaC0yNDk4KVxyXG5cdFx0XHRcdFx0XHRcdFx0XHQoIHhoci5yZXNwb25zZVR5cGUgfHwgXCJ0ZXh0XCIgKSAhPT0gXCJ0ZXh0XCIgIHx8XHJcblx0XHRcdFx0XHRcdFx0XHRcdHR5cGVvZiB4aHIucmVzcG9uc2VUZXh0ICE9PSBcInN0cmluZ1wiID9cclxuXHRcdFx0XHRcdFx0XHRcdFx0XHR7IGJpbmFyeTogeGhyLnJlc3BvbnNlIH0gOlxyXG5cdFx0XHRcdFx0XHRcdFx0XHRcdHsgdGV4dDogeGhyLnJlc3BvbnNlVGV4dCB9LFxyXG5cdFx0XHRcdFx0XHRcdFx0XHR4aHIuZ2V0QWxsUmVzcG9uc2VIZWFkZXJzKClcclxuXHRcdFx0XHRcdFx0XHRcdCk7XHJcblx0XHRcdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHR9O1xyXG5cdFx0XHRcdH07XHJcblxyXG5cdFx0XHRcdC8vIExpc3RlbiB0byBldmVudHNcclxuXHRcdFx0XHR4aHIub25sb2FkID0gY2FsbGJhY2soKTtcclxuXHRcdFx0XHRlcnJvckNhbGxiYWNrID0geGhyLm9uZXJyb3IgPSBjYWxsYmFjayggXCJlcnJvclwiICk7XHJcblxyXG5cdFx0XHRcdC8vIFN1cHBvcnQ6IElFOVxyXG5cdFx0XHRcdC8vIFVzZSBvbnJlYWR5c3RhdGVjaGFuZ2UgdG8gcmVwbGFjZSBvbmFib3J0XHJcblx0XHRcdFx0Ly8gdG8gaGFuZGxlIHVuY2F1Z2h0IGFib3J0c1xyXG5cdFx0XHRcdGlmICggeGhyLm9uYWJvcnQgIT09IHVuZGVmaW5lZCApIHtcclxuXHRcdFx0XHRcdHhoci5vbmFib3J0ID0gZXJyb3JDYWxsYmFjaztcclxuXHRcdFx0XHR9IGVsc2Uge1xyXG5cdFx0XHRcdFx0eGhyLm9ucmVhZHlzdGF0ZWNoYW5nZSA9IGZ1bmN0aW9uKCkge1xyXG5cclxuXHRcdFx0XHRcdFx0Ly8gQ2hlY2sgcmVhZHlTdGF0ZSBiZWZvcmUgdGltZW91dCBhcyBpdCBjaGFuZ2VzXHJcblx0XHRcdFx0XHRcdGlmICggeGhyLnJlYWR5U3RhdGUgPT09IDQgKSB7XHJcblxyXG5cdFx0XHRcdFx0XHRcdC8vIEFsbG93IG9uZXJyb3IgdG8gYmUgY2FsbGVkIGZpcnN0LFxyXG5cdFx0XHRcdFx0XHRcdC8vIGJ1dCB0aGF0IHdpbGwgbm90IGhhbmRsZSBhIG5hdGl2ZSBhYm9ydFxyXG5cdFx0XHRcdFx0XHRcdC8vIEFsc28sIHNhdmUgZXJyb3JDYWxsYmFjayB0byBhIHZhcmlhYmxlXHJcblx0XHRcdFx0XHRcdFx0Ly8gYXMgeGhyLm9uZXJyb3IgY2Fubm90IGJlIGFjY2Vzc2VkXHJcblx0XHRcdFx0XHRcdFx0d2luZG93LnNldFRpbWVvdXQoIGZ1bmN0aW9uKCkge1xyXG5cdFx0XHRcdFx0XHRcdFx0aWYgKCBjYWxsYmFjayApIHtcclxuXHRcdFx0XHRcdFx0XHRcdFx0ZXJyb3JDYWxsYmFjaygpO1xyXG5cdFx0XHRcdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0XHRcdH0gKTtcclxuXHRcdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0fTtcclxuXHRcdFx0XHR9XHJcblxyXG5cdFx0XHRcdC8vIENyZWF0ZSB0aGUgYWJvcnQgY2FsbGJhY2tcclxuXHRcdFx0XHRjYWxsYmFjayA9IGNhbGxiYWNrKCBcImFib3J0XCIgKTtcclxuXHJcblx0XHRcdFx0dHJ5IHtcclxuXHJcblx0XHRcdFx0XHQvLyBEbyBzZW5kIHRoZSByZXF1ZXN0ICh0aGlzIG1heSByYWlzZSBhbiBleGNlcHRpb24pXHJcblx0XHRcdFx0XHR4aHIuc2VuZCggb3B0aW9ucy5oYXNDb250ZW50ICYmIG9wdGlvbnMuZGF0YSB8fCBudWxsICk7XHJcblx0XHRcdFx0fSBjYXRjaCAoIGUgKSB7XHJcblxyXG5cdFx0XHRcdFx0Ly8gIzE0NjgzOiBPbmx5IHJldGhyb3cgaWYgdGhpcyBoYXNuJ3QgYmVlbiBub3RpZmllZCBhcyBhbiBlcnJvciB5ZXRcclxuXHRcdFx0XHRcdGlmICggY2FsbGJhY2sgKSB7XHJcblx0XHRcdFx0XHRcdHRocm93IGU7XHJcblx0XHRcdFx0XHR9XHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9LFxyXG5cclxuXHRcdFx0YWJvcnQ6IGZ1bmN0aW9uKCkge1xyXG5cdFx0XHRcdGlmICggY2FsbGJhY2sgKSB7XHJcblx0XHRcdFx0XHRjYWxsYmFjaygpO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0fVxyXG5cdFx0fTtcclxuXHR9XHJcbn0gKTtcclxuXHJcblxyXG5cclxuXHJcbi8vIEluc3RhbGwgc2NyaXB0IGRhdGFUeXBlXHJcbmpRdWVyeS5hamF4U2V0dXAoIHtcclxuXHRhY2NlcHRzOiB7XHJcblx0XHRzY3JpcHQ6IFwidGV4dC9qYXZhc2NyaXB0LCBhcHBsaWNhdGlvbi9qYXZhc2NyaXB0LCBcIiArXHJcblx0XHRcdFwiYXBwbGljYXRpb24vZWNtYXNjcmlwdCwgYXBwbGljYXRpb24veC1lY21hc2NyaXB0XCJcclxuXHR9LFxyXG5cdGNvbnRlbnRzOiB7XHJcblx0XHRzY3JpcHQ6IC9cXGIoPzpqYXZhfGVjbWEpc2NyaXB0XFxiL1xyXG5cdH0sXHJcblx0Y29udmVydGVyczoge1xyXG5cdFx0XCJ0ZXh0IHNjcmlwdFwiOiBmdW5jdGlvbiggdGV4dCApIHtcclxuXHRcdFx0alF1ZXJ5Lmdsb2JhbEV2YWwoIHRleHQgKTtcclxuXHRcdFx0cmV0dXJuIHRleHQ7XHJcblx0XHR9XHJcblx0fVxyXG59ICk7XHJcblxyXG4vLyBIYW5kbGUgY2FjaGUncyBzcGVjaWFsIGNhc2UgYW5kIGNyb3NzRG9tYWluXHJcbmpRdWVyeS5hamF4UHJlZmlsdGVyKCBcInNjcmlwdFwiLCBmdW5jdGlvbiggcyApIHtcclxuXHRpZiAoIHMuY2FjaGUgPT09IHVuZGVmaW5lZCApIHtcclxuXHRcdHMuY2FjaGUgPSBmYWxzZTtcclxuXHR9XHJcblx0aWYgKCBzLmNyb3NzRG9tYWluICkge1xyXG5cdFx0cy50eXBlID0gXCJHRVRcIjtcclxuXHR9XHJcbn0gKTtcclxuXHJcbi8vIEJpbmQgc2NyaXB0IHRhZyBoYWNrIHRyYW5zcG9ydFxyXG5qUXVlcnkuYWpheFRyYW5zcG9ydCggXCJzY3JpcHRcIiwgZnVuY3Rpb24oIHMgKSB7XHJcblxyXG5cdC8vIFRoaXMgdHJhbnNwb3J0IG9ubHkgZGVhbHMgd2l0aCBjcm9zcyBkb21haW4gcmVxdWVzdHNcclxuXHRpZiAoIHMuY3Jvc3NEb21haW4gKSB7XHJcblx0XHR2YXIgc2NyaXB0LCBjYWxsYmFjaztcclxuXHRcdHJldHVybiB7XHJcblx0XHRcdHNlbmQ6IGZ1bmN0aW9uKCBfLCBjb21wbGV0ZSApIHtcclxuXHRcdFx0XHRzY3JpcHQgPSBqUXVlcnkoIFwiPHNjcmlwdD5cIiApLnByb3AoIHtcclxuXHRcdFx0XHRcdGNoYXJzZXQ6IHMuc2NyaXB0Q2hhcnNldCxcclxuXHRcdFx0XHRcdHNyYzogcy51cmxcclxuXHRcdFx0XHR9ICkub24oXHJcblx0XHRcdFx0XHRcImxvYWQgZXJyb3JcIixcclxuXHRcdFx0XHRcdGNhbGxiYWNrID0gZnVuY3Rpb24oIGV2dCApIHtcclxuXHRcdFx0XHRcdFx0c2NyaXB0LnJlbW92ZSgpO1xyXG5cdFx0XHRcdFx0XHRjYWxsYmFjayA9IG51bGw7XHJcblx0XHRcdFx0XHRcdGlmICggZXZ0ICkge1xyXG5cdFx0XHRcdFx0XHRcdGNvbXBsZXRlKCBldnQudHlwZSA9PT0gXCJlcnJvclwiID8gNDA0IDogMjAwLCBldnQudHlwZSApO1xyXG5cdFx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHR9XHJcblx0XHRcdFx0KTtcclxuXHJcblx0XHRcdFx0Ly8gVXNlIG5hdGl2ZSBET00gbWFuaXB1bGF0aW9uIHRvIGF2b2lkIG91ciBkb21NYW5pcCBBSkFYIHRyaWNrZXJ5XHJcblx0XHRcdFx0ZG9jdW1lbnQuaGVhZC5hcHBlbmRDaGlsZCggc2NyaXB0WyAwIF0gKTtcclxuXHRcdFx0fSxcclxuXHRcdFx0YWJvcnQ6IGZ1bmN0aW9uKCkge1xyXG5cdFx0XHRcdGlmICggY2FsbGJhY2sgKSB7XHJcblx0XHRcdFx0XHRjYWxsYmFjaygpO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0fVxyXG5cdFx0fTtcclxuXHR9XHJcbn0gKTtcclxuXHJcblxyXG5cclxuXHJcbnZhciBvbGRDYWxsYmFja3MgPSBbXSxcclxuXHRyanNvbnAgPSAvKD0pXFw/KD89JnwkKXxcXD9cXD8vO1xyXG5cclxuLy8gRGVmYXVsdCBqc29ucCBzZXR0aW5nc1xyXG5qUXVlcnkuYWpheFNldHVwKCB7XHJcblx0anNvbnA6IFwiY2FsbGJhY2tcIixcclxuXHRqc29ucENhbGxiYWNrOiBmdW5jdGlvbigpIHtcclxuXHRcdHZhciBjYWxsYmFjayA9IG9sZENhbGxiYWNrcy5wb3AoKSB8fCAoIGpRdWVyeS5leHBhbmRvICsgXCJfXCIgKyAoIG5vbmNlKysgKSApO1xyXG5cdFx0dGhpc1sgY2FsbGJhY2sgXSA9IHRydWU7XHJcblx0XHRyZXR1cm4gY2FsbGJhY2s7XHJcblx0fVxyXG59ICk7XHJcblxyXG4vLyBEZXRlY3QsIG5vcm1hbGl6ZSBvcHRpb25zIGFuZCBpbnN0YWxsIGNhbGxiYWNrcyBmb3IganNvbnAgcmVxdWVzdHNcclxualF1ZXJ5LmFqYXhQcmVmaWx0ZXIoIFwianNvbiBqc29ucFwiLCBmdW5jdGlvbiggcywgb3JpZ2luYWxTZXR0aW5ncywganFYSFIgKSB7XHJcblxyXG5cdHZhciBjYWxsYmFja05hbWUsIG92ZXJ3cml0dGVuLCByZXNwb25zZUNvbnRhaW5lcixcclxuXHRcdGpzb25Qcm9wID0gcy5qc29ucCAhPT0gZmFsc2UgJiYgKCByanNvbnAudGVzdCggcy51cmwgKSA/XHJcblx0XHRcdFwidXJsXCIgOlxyXG5cdFx0XHR0eXBlb2Ygcy5kYXRhID09PSBcInN0cmluZ1wiICYmXHJcblx0XHRcdFx0KCBzLmNvbnRlbnRUeXBlIHx8IFwiXCIgKVxyXG5cdFx0XHRcdFx0LmluZGV4T2YoIFwiYXBwbGljYXRpb24veC13d3ctZm9ybS11cmxlbmNvZGVkXCIgKSA9PT0gMCAmJlxyXG5cdFx0XHRcdHJqc29ucC50ZXN0KCBzLmRhdGEgKSAmJiBcImRhdGFcIlxyXG5cdFx0KTtcclxuXHJcblx0Ly8gSGFuZGxlIGlmZiB0aGUgZXhwZWN0ZWQgZGF0YSB0eXBlIGlzIFwianNvbnBcIiBvciB3ZSBoYXZlIGEgcGFyYW1ldGVyIHRvIHNldFxyXG5cdGlmICgganNvblByb3AgfHwgcy5kYXRhVHlwZXNbIDAgXSA9PT0gXCJqc29ucFwiICkge1xyXG5cclxuXHRcdC8vIEdldCBjYWxsYmFjayBuYW1lLCByZW1lbWJlcmluZyBwcmVleGlzdGluZyB2YWx1ZSBhc3NvY2lhdGVkIHdpdGggaXRcclxuXHRcdGNhbGxiYWNrTmFtZSA9IHMuanNvbnBDYWxsYmFjayA9IGpRdWVyeS5pc0Z1bmN0aW9uKCBzLmpzb25wQ2FsbGJhY2sgKSA/XHJcblx0XHRcdHMuanNvbnBDYWxsYmFjaygpIDpcclxuXHRcdFx0cy5qc29ucENhbGxiYWNrO1xyXG5cclxuXHRcdC8vIEluc2VydCBjYWxsYmFjayBpbnRvIHVybCBvciBmb3JtIGRhdGFcclxuXHRcdGlmICgganNvblByb3AgKSB7XHJcblx0XHRcdHNbIGpzb25Qcm9wIF0gPSBzWyBqc29uUHJvcCBdLnJlcGxhY2UoIHJqc29ucCwgXCIkMVwiICsgY2FsbGJhY2tOYW1lICk7XHJcblx0XHR9IGVsc2UgaWYgKCBzLmpzb25wICE9PSBmYWxzZSApIHtcclxuXHRcdFx0cy51cmwgKz0gKCBycXVlcnkudGVzdCggcy51cmwgKSA/IFwiJlwiIDogXCI/XCIgKSArIHMuanNvbnAgKyBcIj1cIiArIGNhbGxiYWNrTmFtZTtcclxuXHRcdH1cclxuXHJcblx0XHQvLyBVc2UgZGF0YSBjb252ZXJ0ZXIgdG8gcmV0cmlldmUganNvbiBhZnRlciBzY3JpcHQgZXhlY3V0aW9uXHJcblx0XHRzLmNvbnZlcnRlcnNbIFwic2NyaXB0IGpzb25cIiBdID0gZnVuY3Rpb24oKSB7XHJcblx0XHRcdGlmICggIXJlc3BvbnNlQ29udGFpbmVyICkge1xyXG5cdFx0XHRcdGpRdWVyeS5lcnJvciggY2FsbGJhY2tOYW1lICsgXCIgd2FzIG5vdCBjYWxsZWRcIiApO1xyXG5cdFx0XHR9XHJcblx0XHRcdHJldHVybiByZXNwb25zZUNvbnRhaW5lclsgMCBdO1xyXG5cdFx0fTtcclxuXHJcblx0XHQvLyBGb3JjZSBqc29uIGRhdGFUeXBlXHJcblx0XHRzLmRhdGFUeXBlc1sgMCBdID0gXCJqc29uXCI7XHJcblxyXG5cdFx0Ly8gSW5zdGFsbCBjYWxsYmFja1xyXG5cdFx0b3ZlcndyaXR0ZW4gPSB3aW5kb3dbIGNhbGxiYWNrTmFtZSBdO1xyXG5cdFx0d2luZG93WyBjYWxsYmFja05hbWUgXSA9IGZ1bmN0aW9uKCkge1xyXG5cdFx0XHRyZXNwb25zZUNvbnRhaW5lciA9IGFyZ3VtZW50cztcclxuXHRcdH07XHJcblxyXG5cdFx0Ly8gQ2xlYW4tdXAgZnVuY3Rpb24gKGZpcmVzIGFmdGVyIGNvbnZlcnRlcnMpXHJcblx0XHRqcVhIUi5hbHdheXMoIGZ1bmN0aW9uKCkge1xyXG5cclxuXHRcdFx0Ly8gSWYgcHJldmlvdXMgdmFsdWUgZGlkbid0IGV4aXN0IC0gcmVtb3ZlIGl0XHJcblx0XHRcdGlmICggb3ZlcndyaXR0ZW4gPT09IHVuZGVmaW5lZCApIHtcclxuXHRcdFx0XHRqUXVlcnkoIHdpbmRvdyApLnJlbW92ZVByb3AoIGNhbGxiYWNrTmFtZSApO1xyXG5cclxuXHRcdFx0Ly8gT3RoZXJ3aXNlIHJlc3RvcmUgcHJlZXhpc3RpbmcgdmFsdWVcclxuXHRcdFx0fSBlbHNlIHtcclxuXHRcdFx0XHR3aW5kb3dbIGNhbGxiYWNrTmFtZSBdID0gb3ZlcndyaXR0ZW47XHJcblx0XHRcdH1cclxuXHJcblx0XHRcdC8vIFNhdmUgYmFjayBhcyBmcmVlXHJcblx0XHRcdGlmICggc1sgY2FsbGJhY2tOYW1lIF0gKSB7XHJcblxyXG5cdFx0XHRcdC8vIE1ha2Ugc3VyZSB0aGF0IHJlLXVzaW5nIHRoZSBvcHRpb25zIGRvZXNuJ3Qgc2NyZXcgdGhpbmdzIGFyb3VuZFxyXG5cdFx0XHRcdHMuanNvbnBDYWxsYmFjayA9IG9yaWdpbmFsU2V0dGluZ3MuanNvbnBDYWxsYmFjaztcclxuXHJcblx0XHRcdFx0Ly8gU2F2ZSB0aGUgY2FsbGJhY2sgbmFtZSBmb3IgZnV0dXJlIHVzZVxyXG5cdFx0XHRcdG9sZENhbGxiYWNrcy5wdXNoKCBjYWxsYmFja05hbWUgKTtcclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0Ly8gQ2FsbCBpZiBpdCB3YXMgYSBmdW5jdGlvbiBhbmQgd2UgaGF2ZSBhIHJlc3BvbnNlXHJcblx0XHRcdGlmICggcmVzcG9uc2VDb250YWluZXIgJiYgalF1ZXJ5LmlzRnVuY3Rpb24oIG92ZXJ3cml0dGVuICkgKSB7XHJcblx0XHRcdFx0b3ZlcndyaXR0ZW4oIHJlc3BvbnNlQ29udGFpbmVyWyAwIF0gKTtcclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0cmVzcG9uc2VDb250YWluZXIgPSBvdmVyd3JpdHRlbiA9IHVuZGVmaW5lZDtcclxuXHRcdH0gKTtcclxuXHJcblx0XHQvLyBEZWxlZ2F0ZSB0byBzY3JpcHRcclxuXHRcdHJldHVybiBcInNjcmlwdFwiO1xyXG5cdH1cclxufSApO1xyXG5cclxuXHJcblxyXG5cclxuLy8gQXJndW1lbnQgXCJkYXRhXCIgc2hvdWxkIGJlIHN0cmluZyBvZiBodG1sXHJcbi8vIGNvbnRleHQgKG9wdGlvbmFsKTogSWYgc3BlY2lmaWVkLCB0aGUgZnJhZ21lbnQgd2lsbCBiZSBjcmVhdGVkIGluIHRoaXMgY29udGV4dCxcclxuLy8gZGVmYXVsdHMgdG8gZG9jdW1lbnRcclxuLy8ga2VlcFNjcmlwdHMgKG9wdGlvbmFsKTogSWYgdHJ1ZSwgd2lsbCBpbmNsdWRlIHNjcmlwdHMgcGFzc2VkIGluIHRoZSBodG1sIHN0cmluZ1xyXG5qUXVlcnkucGFyc2VIVE1MID0gZnVuY3Rpb24oIGRhdGEsIGNvbnRleHQsIGtlZXBTY3JpcHRzICkge1xyXG5cdGlmICggIWRhdGEgfHwgdHlwZW9mIGRhdGEgIT09IFwic3RyaW5nXCIgKSB7XHJcblx0XHRyZXR1cm4gbnVsbDtcclxuXHR9XHJcblx0aWYgKCB0eXBlb2YgY29udGV4dCA9PT0gXCJib29sZWFuXCIgKSB7XHJcblx0XHRrZWVwU2NyaXB0cyA9IGNvbnRleHQ7XHJcblx0XHRjb250ZXh0ID0gZmFsc2U7XHJcblx0fVxyXG5cdGNvbnRleHQgPSBjb250ZXh0IHx8IGRvY3VtZW50O1xyXG5cclxuXHR2YXIgcGFyc2VkID0gcnNpbmdsZVRhZy5leGVjKCBkYXRhICksXHJcblx0XHRzY3JpcHRzID0gIWtlZXBTY3JpcHRzICYmIFtdO1xyXG5cclxuXHQvLyBTaW5nbGUgdGFnXHJcblx0aWYgKCBwYXJzZWQgKSB7XHJcblx0XHRyZXR1cm4gWyBjb250ZXh0LmNyZWF0ZUVsZW1lbnQoIHBhcnNlZFsgMSBdICkgXTtcclxuXHR9XHJcblxyXG5cdHBhcnNlZCA9IGJ1aWxkRnJhZ21lbnQoIFsgZGF0YSBdLCBjb250ZXh0LCBzY3JpcHRzICk7XHJcblxyXG5cdGlmICggc2NyaXB0cyAmJiBzY3JpcHRzLmxlbmd0aCApIHtcclxuXHRcdGpRdWVyeSggc2NyaXB0cyApLnJlbW92ZSgpO1xyXG5cdH1cclxuXHJcblx0cmV0dXJuIGpRdWVyeS5tZXJnZSggW10sIHBhcnNlZC5jaGlsZE5vZGVzICk7XHJcbn07XHJcblxyXG5cclxuLy8gS2VlcCBhIGNvcHkgb2YgdGhlIG9sZCBsb2FkIG1ldGhvZFxyXG52YXIgX2xvYWQgPSBqUXVlcnkuZm4ubG9hZDtcclxuXHJcbi8qKlxyXG4gKiBMb2FkIGEgdXJsIGludG8gYSBwYWdlXHJcbiAqL1xyXG5qUXVlcnkuZm4ubG9hZCA9IGZ1bmN0aW9uKCB1cmwsIHBhcmFtcywgY2FsbGJhY2sgKSB7XHJcblx0aWYgKCB0eXBlb2YgdXJsICE9PSBcInN0cmluZ1wiICYmIF9sb2FkICkge1xyXG5cdFx0cmV0dXJuIF9sb2FkLmFwcGx5KCB0aGlzLCBhcmd1bWVudHMgKTtcclxuXHR9XHJcblxyXG5cdHZhciBzZWxlY3RvciwgdHlwZSwgcmVzcG9uc2UsXHJcblx0XHRzZWxmID0gdGhpcyxcclxuXHRcdG9mZiA9IHVybC5pbmRleE9mKCBcIiBcIiApO1xyXG5cclxuXHRpZiAoIG9mZiA+IC0xICkge1xyXG5cdFx0c2VsZWN0b3IgPSBqUXVlcnkudHJpbSggdXJsLnNsaWNlKCBvZmYgKSApO1xyXG5cdFx0dXJsID0gdXJsLnNsaWNlKCAwLCBvZmYgKTtcclxuXHR9XHJcblxyXG5cdC8vIElmIGl0J3MgYSBmdW5jdGlvblxyXG5cdGlmICggalF1ZXJ5LmlzRnVuY3Rpb24oIHBhcmFtcyApICkge1xyXG5cclxuXHRcdC8vIFdlIGFzc3VtZSB0aGF0IGl0J3MgdGhlIGNhbGxiYWNrXHJcblx0XHRjYWxsYmFjayA9IHBhcmFtcztcclxuXHRcdHBhcmFtcyA9IHVuZGVmaW5lZDtcclxuXHJcblx0Ly8gT3RoZXJ3aXNlLCBidWlsZCBhIHBhcmFtIHN0cmluZ1xyXG5cdH0gZWxzZSBpZiAoIHBhcmFtcyAmJiB0eXBlb2YgcGFyYW1zID09PSBcIm9iamVjdFwiICkge1xyXG5cdFx0dHlwZSA9IFwiUE9TVFwiO1xyXG5cdH1cclxuXHJcblx0Ly8gSWYgd2UgaGF2ZSBlbGVtZW50cyB0byBtb2RpZnksIG1ha2UgdGhlIHJlcXVlc3RcclxuXHRpZiAoIHNlbGYubGVuZ3RoID4gMCApIHtcclxuXHRcdGpRdWVyeS5hamF4KCB7XHJcblx0XHRcdHVybDogdXJsLFxyXG5cclxuXHRcdFx0Ly8gSWYgXCJ0eXBlXCIgdmFyaWFibGUgaXMgdW5kZWZpbmVkLCB0aGVuIFwiR0VUXCIgbWV0aG9kIHdpbGwgYmUgdXNlZC5cclxuXHRcdFx0Ly8gTWFrZSB2YWx1ZSBvZiB0aGlzIGZpZWxkIGV4cGxpY2l0IHNpbmNlXHJcblx0XHRcdC8vIHVzZXIgY2FuIG92ZXJyaWRlIGl0IHRocm91Z2ggYWpheFNldHVwIG1ldGhvZFxyXG5cdFx0XHR0eXBlOiB0eXBlIHx8IFwiR0VUXCIsXHJcblx0XHRcdGRhdGFUeXBlOiBcImh0bWxcIixcclxuXHRcdFx0ZGF0YTogcGFyYW1zXHJcblx0XHR9ICkuZG9uZSggZnVuY3Rpb24oIHJlc3BvbnNlVGV4dCApIHtcclxuXHJcblx0XHRcdC8vIFNhdmUgcmVzcG9uc2UgZm9yIHVzZSBpbiBjb21wbGV0ZSBjYWxsYmFja1xyXG5cdFx0XHRyZXNwb25zZSA9IGFyZ3VtZW50cztcclxuXHJcblx0XHRcdHNlbGYuaHRtbCggc2VsZWN0b3IgP1xyXG5cclxuXHRcdFx0XHQvLyBJZiBhIHNlbGVjdG9yIHdhcyBzcGVjaWZpZWQsIGxvY2F0ZSB0aGUgcmlnaHQgZWxlbWVudHMgaW4gYSBkdW1teSBkaXZcclxuXHRcdFx0XHQvLyBFeGNsdWRlIHNjcmlwdHMgdG8gYXZvaWQgSUUgJ1Blcm1pc3Npb24gRGVuaWVkJyBlcnJvcnNcclxuXHRcdFx0XHRqUXVlcnkoIFwiPGRpdj5cIiApLmFwcGVuZCggalF1ZXJ5LnBhcnNlSFRNTCggcmVzcG9uc2VUZXh0ICkgKS5maW5kKCBzZWxlY3RvciApIDpcclxuXHJcblx0XHRcdFx0Ly8gT3RoZXJ3aXNlIHVzZSB0aGUgZnVsbCByZXN1bHRcclxuXHRcdFx0XHRyZXNwb25zZVRleHQgKTtcclxuXHJcblx0XHQvLyBJZiB0aGUgcmVxdWVzdCBzdWNjZWVkcywgdGhpcyBmdW5jdGlvbiBnZXRzIFwiZGF0YVwiLCBcInN0YXR1c1wiLCBcImpxWEhSXCJcclxuXHRcdC8vIGJ1dCB0aGV5IGFyZSBpZ25vcmVkIGJlY2F1c2UgcmVzcG9uc2Ugd2FzIHNldCBhYm92ZS5cclxuXHRcdC8vIElmIGl0IGZhaWxzLCB0aGlzIGZ1bmN0aW9uIGdldHMgXCJqcVhIUlwiLCBcInN0YXR1c1wiLCBcImVycm9yXCJcclxuXHRcdH0gKS5hbHdheXMoIGNhbGxiYWNrICYmIGZ1bmN0aW9uKCBqcVhIUiwgc3RhdHVzICkge1xyXG5cdFx0XHRzZWxmLmVhY2goIGZ1bmN0aW9uKCkge1xyXG5cdFx0XHRcdGNhbGxiYWNrLmFwcGx5KCB0aGlzLCByZXNwb25zZSB8fCBbIGpxWEhSLnJlc3BvbnNlVGV4dCwgc3RhdHVzLCBqcVhIUiBdICk7XHJcblx0XHRcdH0gKTtcclxuXHRcdH0gKTtcclxuXHR9XHJcblxyXG5cdHJldHVybiB0aGlzO1xyXG59O1xyXG5cclxuXHJcblxyXG5cclxuLy8gQXR0YWNoIGEgYnVuY2ggb2YgZnVuY3Rpb25zIGZvciBoYW5kbGluZyBjb21tb24gQUpBWCBldmVudHNcclxualF1ZXJ5LmVhY2goIFtcclxuXHRcImFqYXhTdGFydFwiLFxyXG5cdFwiYWpheFN0b3BcIixcclxuXHRcImFqYXhDb21wbGV0ZVwiLFxyXG5cdFwiYWpheEVycm9yXCIsXHJcblx0XCJhamF4U3VjY2Vzc1wiLFxyXG5cdFwiYWpheFNlbmRcIlxyXG5dLCBmdW5jdGlvbiggaSwgdHlwZSApIHtcclxuXHRqUXVlcnkuZm5bIHR5cGUgXSA9IGZ1bmN0aW9uKCBmbiApIHtcclxuXHRcdHJldHVybiB0aGlzLm9uKCB0eXBlLCBmbiApO1xyXG5cdH07XHJcbn0gKTtcclxuXHJcblxyXG5cclxuXHJcbmpRdWVyeS5leHByLmZpbHRlcnMuYW5pbWF0ZWQgPSBmdW5jdGlvbiggZWxlbSApIHtcclxuXHRyZXR1cm4galF1ZXJ5LmdyZXAoIGpRdWVyeS50aW1lcnMsIGZ1bmN0aW9uKCBmbiApIHtcclxuXHRcdHJldHVybiBlbGVtID09PSBmbi5lbGVtO1xyXG5cdH0gKS5sZW5ndGg7XHJcbn07XHJcblxyXG5cclxuXHJcblxyXG4vKipcclxuICogR2V0cyBhIHdpbmRvdyBmcm9tIGFuIGVsZW1lbnRcclxuICovXHJcbmZ1bmN0aW9uIGdldFdpbmRvdyggZWxlbSApIHtcclxuXHRyZXR1cm4galF1ZXJ5LmlzV2luZG93KCBlbGVtICkgPyBlbGVtIDogZWxlbS5ub2RlVHlwZSA9PT0gOSAmJiBlbGVtLmRlZmF1bHRWaWV3O1xyXG59XHJcblxyXG5qUXVlcnkub2Zmc2V0ID0ge1xyXG5cdHNldE9mZnNldDogZnVuY3Rpb24oIGVsZW0sIG9wdGlvbnMsIGkgKSB7XHJcblx0XHR2YXIgY3VyUG9zaXRpb24sIGN1ckxlZnQsIGN1ckNTU1RvcCwgY3VyVG9wLCBjdXJPZmZzZXQsIGN1ckNTU0xlZnQsIGNhbGN1bGF0ZVBvc2l0aW9uLFxyXG5cdFx0XHRwb3NpdGlvbiA9IGpRdWVyeS5jc3MoIGVsZW0sIFwicG9zaXRpb25cIiApLFxyXG5cdFx0XHRjdXJFbGVtID0galF1ZXJ5KCBlbGVtICksXHJcblx0XHRcdHByb3BzID0ge307XHJcblxyXG5cdFx0Ly8gU2V0IHBvc2l0aW9uIGZpcnN0LCBpbi1jYXNlIHRvcC9sZWZ0IGFyZSBzZXQgZXZlbiBvbiBzdGF0aWMgZWxlbVxyXG5cdFx0aWYgKCBwb3NpdGlvbiA9PT0gXCJzdGF0aWNcIiApIHtcclxuXHRcdFx0ZWxlbS5zdHlsZS5wb3NpdGlvbiA9IFwicmVsYXRpdmVcIjtcclxuXHRcdH1cclxuXHJcblx0XHRjdXJPZmZzZXQgPSBjdXJFbGVtLm9mZnNldCgpO1xyXG5cdFx0Y3VyQ1NTVG9wID0galF1ZXJ5LmNzcyggZWxlbSwgXCJ0b3BcIiApO1xyXG5cdFx0Y3VyQ1NTTGVmdCA9IGpRdWVyeS5jc3MoIGVsZW0sIFwibGVmdFwiICk7XHJcblx0XHRjYWxjdWxhdGVQb3NpdGlvbiA9ICggcG9zaXRpb24gPT09IFwiYWJzb2x1dGVcIiB8fCBwb3NpdGlvbiA9PT0gXCJmaXhlZFwiICkgJiZcclxuXHRcdFx0KCBjdXJDU1NUb3AgKyBjdXJDU1NMZWZ0ICkuaW5kZXhPZiggXCJhdXRvXCIgKSA+IC0xO1xyXG5cclxuXHRcdC8vIE5lZWQgdG8gYmUgYWJsZSB0byBjYWxjdWxhdGUgcG9zaXRpb24gaWYgZWl0aGVyXHJcblx0XHQvLyB0b3Agb3IgbGVmdCBpcyBhdXRvIGFuZCBwb3NpdGlvbiBpcyBlaXRoZXIgYWJzb2x1dGUgb3IgZml4ZWRcclxuXHRcdGlmICggY2FsY3VsYXRlUG9zaXRpb24gKSB7XHJcblx0XHRcdGN1clBvc2l0aW9uID0gY3VyRWxlbS5wb3NpdGlvbigpO1xyXG5cdFx0XHRjdXJUb3AgPSBjdXJQb3NpdGlvbi50b3A7XHJcblx0XHRcdGN1ckxlZnQgPSBjdXJQb3NpdGlvbi5sZWZ0O1xyXG5cclxuXHRcdH0gZWxzZSB7XHJcblx0XHRcdGN1clRvcCA9IHBhcnNlRmxvYXQoIGN1ckNTU1RvcCApIHx8IDA7XHJcblx0XHRcdGN1ckxlZnQgPSBwYXJzZUZsb2F0KCBjdXJDU1NMZWZ0ICkgfHwgMDtcclxuXHRcdH1cclxuXHJcblx0XHRpZiAoIGpRdWVyeS5pc0Z1bmN0aW9uKCBvcHRpb25zICkgKSB7XHJcblxyXG5cdFx0XHQvLyBVc2UgalF1ZXJ5LmV4dGVuZCBoZXJlIHRvIGFsbG93IG1vZGlmaWNhdGlvbiBvZiBjb29yZGluYXRlcyBhcmd1bWVudCAoZ2gtMTg0OClcclxuXHRcdFx0b3B0aW9ucyA9IG9wdGlvbnMuY2FsbCggZWxlbSwgaSwgalF1ZXJ5LmV4dGVuZCgge30sIGN1ck9mZnNldCApICk7XHJcblx0XHR9XHJcblxyXG5cdFx0aWYgKCBvcHRpb25zLnRvcCAhPSBudWxsICkge1xyXG5cdFx0XHRwcm9wcy50b3AgPSAoIG9wdGlvbnMudG9wIC0gY3VyT2Zmc2V0LnRvcCApICsgY3VyVG9wO1xyXG5cdFx0fVxyXG5cdFx0aWYgKCBvcHRpb25zLmxlZnQgIT0gbnVsbCApIHtcclxuXHRcdFx0cHJvcHMubGVmdCA9ICggb3B0aW9ucy5sZWZ0IC0gY3VyT2Zmc2V0LmxlZnQgKSArIGN1ckxlZnQ7XHJcblx0XHR9XHJcblxyXG5cdFx0aWYgKCBcInVzaW5nXCIgaW4gb3B0aW9ucyApIHtcclxuXHRcdFx0b3B0aW9ucy51c2luZy5jYWxsKCBlbGVtLCBwcm9wcyApO1xyXG5cclxuXHRcdH0gZWxzZSB7XHJcblx0XHRcdGN1ckVsZW0uY3NzKCBwcm9wcyApO1xyXG5cdFx0fVxyXG5cdH1cclxufTtcclxuXHJcbmpRdWVyeS5mbi5leHRlbmQoIHtcclxuXHRvZmZzZXQ6IGZ1bmN0aW9uKCBvcHRpb25zICkge1xyXG5cdFx0aWYgKCBhcmd1bWVudHMubGVuZ3RoICkge1xyXG5cdFx0XHRyZXR1cm4gb3B0aW9ucyA9PT0gdW5kZWZpbmVkID9cclxuXHRcdFx0XHR0aGlzIDpcclxuXHRcdFx0XHR0aGlzLmVhY2goIGZ1bmN0aW9uKCBpICkge1xyXG5cdFx0XHRcdFx0alF1ZXJ5Lm9mZnNldC5zZXRPZmZzZXQoIHRoaXMsIG9wdGlvbnMsIGkgKTtcclxuXHRcdFx0XHR9ICk7XHJcblx0XHR9XHJcblxyXG5cdFx0dmFyIGRvY0VsZW0sIHdpbixcclxuXHRcdFx0ZWxlbSA9IHRoaXNbIDAgXSxcclxuXHRcdFx0Ym94ID0geyB0b3A6IDAsIGxlZnQ6IDAgfSxcclxuXHRcdFx0ZG9jID0gZWxlbSAmJiBlbGVtLm93bmVyRG9jdW1lbnQ7XHJcblxyXG5cdFx0aWYgKCAhZG9jICkge1xyXG5cdFx0XHRyZXR1cm47XHJcblx0XHR9XHJcblxyXG5cdFx0ZG9jRWxlbSA9IGRvYy5kb2N1bWVudEVsZW1lbnQ7XHJcblxyXG5cdFx0Ly8gTWFrZSBzdXJlIGl0J3Mgbm90IGEgZGlzY29ubmVjdGVkIERPTSBub2RlXHJcblx0XHRpZiAoICFqUXVlcnkuY29udGFpbnMoIGRvY0VsZW0sIGVsZW0gKSApIHtcclxuXHRcdFx0cmV0dXJuIGJveDtcclxuXHRcdH1cclxuXHJcblx0XHRib3ggPSBlbGVtLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xyXG5cdFx0d2luID0gZ2V0V2luZG93KCBkb2MgKTtcclxuXHRcdHJldHVybiB7XHJcblx0XHRcdHRvcDogYm94LnRvcCArIHdpbi5wYWdlWU9mZnNldCAtIGRvY0VsZW0uY2xpZW50VG9wLFxyXG5cdFx0XHRsZWZ0OiBib3gubGVmdCArIHdpbi5wYWdlWE9mZnNldCAtIGRvY0VsZW0uY2xpZW50TGVmdFxyXG5cdFx0fTtcclxuXHR9LFxyXG5cclxuXHRwb3NpdGlvbjogZnVuY3Rpb24oKSB7XHJcblx0XHRpZiAoICF0aGlzWyAwIF0gKSB7XHJcblx0XHRcdHJldHVybjtcclxuXHRcdH1cclxuXHJcblx0XHR2YXIgb2Zmc2V0UGFyZW50LCBvZmZzZXQsXHJcblx0XHRcdGVsZW0gPSB0aGlzWyAwIF0sXHJcblx0XHRcdHBhcmVudE9mZnNldCA9IHsgdG9wOiAwLCBsZWZ0OiAwIH07XHJcblxyXG5cdFx0Ly8gRml4ZWQgZWxlbWVudHMgYXJlIG9mZnNldCBmcm9tIHdpbmRvdyAocGFyZW50T2Zmc2V0ID0ge3RvcDowLCBsZWZ0OiAwfSxcclxuXHRcdC8vIGJlY2F1c2UgaXQgaXMgaXRzIG9ubHkgb2Zmc2V0IHBhcmVudFxyXG5cdFx0aWYgKCBqUXVlcnkuY3NzKCBlbGVtLCBcInBvc2l0aW9uXCIgKSA9PT0gXCJmaXhlZFwiICkge1xyXG5cclxuXHRcdFx0Ly8gQXNzdW1lIGdldEJvdW5kaW5nQ2xpZW50UmVjdCBpcyB0aGVyZSB3aGVuIGNvbXB1dGVkIHBvc2l0aW9uIGlzIGZpeGVkXHJcblx0XHRcdG9mZnNldCA9IGVsZW0uZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XHJcblxyXG5cdFx0fSBlbHNlIHtcclxuXHJcblx0XHRcdC8vIEdldCAqcmVhbCogb2Zmc2V0UGFyZW50XHJcblx0XHRcdG9mZnNldFBhcmVudCA9IHRoaXMub2Zmc2V0UGFyZW50KCk7XHJcblxyXG5cdFx0XHQvLyBHZXQgY29ycmVjdCBvZmZzZXRzXHJcblx0XHRcdG9mZnNldCA9IHRoaXMub2Zmc2V0KCk7XHJcblx0XHRcdGlmICggIWpRdWVyeS5ub2RlTmFtZSggb2Zmc2V0UGFyZW50WyAwIF0sIFwiaHRtbFwiICkgKSB7XHJcblx0XHRcdFx0cGFyZW50T2Zmc2V0ID0gb2Zmc2V0UGFyZW50Lm9mZnNldCgpO1xyXG5cdFx0XHR9XHJcblxyXG5cdFx0XHQvLyBBZGQgb2Zmc2V0UGFyZW50IGJvcmRlcnNcclxuXHRcdFx0cGFyZW50T2Zmc2V0LnRvcCArPSBqUXVlcnkuY3NzKCBvZmZzZXRQYXJlbnRbIDAgXSwgXCJib3JkZXJUb3BXaWR0aFwiLCB0cnVlICk7XHJcblx0XHRcdHBhcmVudE9mZnNldC5sZWZ0ICs9IGpRdWVyeS5jc3MoIG9mZnNldFBhcmVudFsgMCBdLCBcImJvcmRlckxlZnRXaWR0aFwiLCB0cnVlICk7XHJcblx0XHR9XHJcblxyXG5cdFx0Ly8gU3VidHJhY3QgcGFyZW50IG9mZnNldHMgYW5kIGVsZW1lbnQgbWFyZ2luc1xyXG5cdFx0cmV0dXJuIHtcclxuXHRcdFx0dG9wOiBvZmZzZXQudG9wIC0gcGFyZW50T2Zmc2V0LnRvcCAtIGpRdWVyeS5jc3MoIGVsZW0sIFwibWFyZ2luVG9wXCIsIHRydWUgKSxcclxuXHRcdFx0bGVmdDogb2Zmc2V0LmxlZnQgLSBwYXJlbnRPZmZzZXQubGVmdCAtIGpRdWVyeS5jc3MoIGVsZW0sIFwibWFyZ2luTGVmdFwiLCB0cnVlIClcclxuXHRcdH07XHJcblx0fSxcclxuXHJcblx0Ly8gVGhpcyBtZXRob2Qgd2lsbCByZXR1cm4gZG9jdW1lbnRFbGVtZW50IGluIHRoZSBmb2xsb3dpbmcgY2FzZXM6XHJcblx0Ly8gMSkgRm9yIHRoZSBlbGVtZW50IGluc2lkZSB0aGUgaWZyYW1lIHdpdGhvdXQgb2Zmc2V0UGFyZW50LCB0aGlzIG1ldGhvZCB3aWxsIHJldHVyblxyXG5cdC8vICAgIGRvY3VtZW50RWxlbWVudCBvZiB0aGUgcGFyZW50IHdpbmRvd1xyXG5cdC8vIDIpIEZvciB0aGUgaGlkZGVuIG9yIGRldGFjaGVkIGVsZW1lbnRcclxuXHQvLyAzKSBGb3IgYm9keSBvciBodG1sIGVsZW1lbnQsIGkuZS4gaW4gY2FzZSBvZiB0aGUgaHRtbCBub2RlIC0gaXQgd2lsbCByZXR1cm4gaXRzZWxmXHJcblx0Ly9cclxuXHQvLyBidXQgdGhvc2UgZXhjZXB0aW9ucyB3ZXJlIG5ldmVyIHByZXNlbnRlZCBhcyBhIHJlYWwgbGlmZSB1c2UtY2FzZXNcclxuXHQvLyBhbmQgbWlnaHQgYmUgY29uc2lkZXJlZCBhcyBtb3JlIHByZWZlcmFibGUgcmVzdWx0cy5cclxuXHQvL1xyXG5cdC8vIFRoaXMgbG9naWMsIGhvd2V2ZXIsIGlzIG5vdCBndWFyYW50ZWVkIGFuZCBjYW4gY2hhbmdlIGF0IGFueSBwb2ludCBpbiB0aGUgZnV0dXJlXHJcblx0b2Zmc2V0UGFyZW50OiBmdW5jdGlvbigpIHtcclxuXHRcdHJldHVybiB0aGlzLm1hcCggZnVuY3Rpb24oKSB7XHJcblx0XHRcdHZhciBvZmZzZXRQYXJlbnQgPSB0aGlzLm9mZnNldFBhcmVudDtcclxuXHJcblx0XHRcdHdoaWxlICggb2Zmc2V0UGFyZW50ICYmIGpRdWVyeS5jc3MoIG9mZnNldFBhcmVudCwgXCJwb3NpdGlvblwiICkgPT09IFwic3RhdGljXCIgKSB7XHJcblx0XHRcdFx0b2Zmc2V0UGFyZW50ID0gb2Zmc2V0UGFyZW50Lm9mZnNldFBhcmVudDtcclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0cmV0dXJuIG9mZnNldFBhcmVudCB8fCBkb2N1bWVudEVsZW1lbnQ7XHJcblx0XHR9ICk7XHJcblx0fVxyXG59ICk7XHJcblxyXG4vLyBDcmVhdGUgc2Nyb2xsTGVmdCBhbmQgc2Nyb2xsVG9wIG1ldGhvZHNcclxualF1ZXJ5LmVhY2goIHsgc2Nyb2xsTGVmdDogXCJwYWdlWE9mZnNldFwiLCBzY3JvbGxUb3A6IFwicGFnZVlPZmZzZXRcIiB9LCBmdW5jdGlvbiggbWV0aG9kLCBwcm9wICkge1xyXG5cdHZhciB0b3AgPSBcInBhZ2VZT2Zmc2V0XCIgPT09IHByb3A7XHJcblxyXG5cdGpRdWVyeS5mblsgbWV0aG9kIF0gPSBmdW5jdGlvbiggdmFsICkge1xyXG5cdFx0cmV0dXJuIGFjY2VzcyggdGhpcywgZnVuY3Rpb24oIGVsZW0sIG1ldGhvZCwgdmFsICkge1xyXG5cdFx0XHR2YXIgd2luID0gZ2V0V2luZG93KCBlbGVtICk7XHJcblxyXG5cdFx0XHRpZiAoIHZhbCA9PT0gdW5kZWZpbmVkICkge1xyXG5cdFx0XHRcdHJldHVybiB3aW4gPyB3aW5bIHByb3AgXSA6IGVsZW1bIG1ldGhvZCBdO1xyXG5cdFx0XHR9XHJcblxyXG5cdFx0XHRpZiAoIHdpbiApIHtcclxuXHRcdFx0XHR3aW4uc2Nyb2xsVG8oXHJcblx0XHRcdFx0XHQhdG9wID8gdmFsIDogd2luLnBhZ2VYT2Zmc2V0LFxyXG5cdFx0XHRcdFx0dG9wID8gdmFsIDogd2luLnBhZ2VZT2Zmc2V0XHJcblx0XHRcdFx0KTtcclxuXHJcblx0XHRcdH0gZWxzZSB7XHJcblx0XHRcdFx0ZWxlbVsgbWV0aG9kIF0gPSB2YWw7XHJcblx0XHRcdH1cclxuXHRcdH0sIG1ldGhvZCwgdmFsLCBhcmd1bWVudHMubGVuZ3RoICk7XHJcblx0fTtcclxufSApO1xyXG5cclxuLy8gU3VwcG9ydDogU2FmYXJpPDctOCssIENocm9tZTwzNy00NCtcclxuLy8gQWRkIHRoZSB0b3AvbGVmdCBjc3NIb29rcyB1c2luZyBqUXVlcnkuZm4ucG9zaXRpb25cclxuLy8gV2Via2l0IGJ1ZzogaHR0cHM6Ly9idWdzLndlYmtpdC5vcmcvc2hvd19idWcuY2dpP2lkPTI5MDg0XHJcbi8vIEJsaW5rIGJ1ZzogaHR0cHM6Ly9jb2RlLmdvb2dsZS5jb20vcC9jaHJvbWl1bS9pc3N1ZXMvZGV0YWlsP2lkPTIyOTI4MFxyXG4vLyBnZXRDb21wdXRlZFN0eWxlIHJldHVybnMgcGVyY2VudCB3aGVuIHNwZWNpZmllZCBmb3IgdG9wL2xlZnQvYm90dG9tL3JpZ2h0O1xyXG4vLyByYXRoZXIgdGhhbiBtYWtlIHRoZSBjc3MgbW9kdWxlIGRlcGVuZCBvbiB0aGUgb2Zmc2V0IG1vZHVsZSwganVzdCBjaGVjayBmb3IgaXQgaGVyZVxyXG5qUXVlcnkuZWFjaCggWyBcInRvcFwiLCBcImxlZnRcIiBdLCBmdW5jdGlvbiggaSwgcHJvcCApIHtcclxuXHRqUXVlcnkuY3NzSG9va3NbIHByb3AgXSA9IGFkZEdldEhvb2tJZiggc3VwcG9ydC5waXhlbFBvc2l0aW9uLFxyXG5cdFx0ZnVuY3Rpb24oIGVsZW0sIGNvbXB1dGVkICkge1xyXG5cdFx0XHRpZiAoIGNvbXB1dGVkICkge1xyXG5cdFx0XHRcdGNvbXB1dGVkID0gY3VyQ1NTKCBlbGVtLCBwcm9wICk7XHJcblxyXG5cdFx0XHRcdC8vIElmIGN1ckNTUyByZXR1cm5zIHBlcmNlbnRhZ2UsIGZhbGxiYWNrIHRvIG9mZnNldFxyXG5cdFx0XHRcdHJldHVybiBybnVtbm9ucHgudGVzdCggY29tcHV0ZWQgKSA/XHJcblx0XHRcdFx0XHRqUXVlcnkoIGVsZW0gKS5wb3NpdGlvbigpWyBwcm9wIF0gKyBcInB4XCIgOlxyXG5cdFx0XHRcdFx0Y29tcHV0ZWQ7XHJcblx0XHRcdH1cclxuXHRcdH1cclxuXHQpO1xyXG59ICk7XHJcblxyXG5cclxuLy8gQ3JlYXRlIGlubmVySGVpZ2h0LCBpbm5lcldpZHRoLCBoZWlnaHQsIHdpZHRoLCBvdXRlckhlaWdodCBhbmQgb3V0ZXJXaWR0aCBtZXRob2RzXHJcbmpRdWVyeS5lYWNoKCB7IEhlaWdodDogXCJoZWlnaHRcIiwgV2lkdGg6IFwid2lkdGhcIiB9LCBmdW5jdGlvbiggbmFtZSwgdHlwZSApIHtcclxuXHRqUXVlcnkuZWFjaCggeyBwYWRkaW5nOiBcImlubmVyXCIgKyBuYW1lLCBjb250ZW50OiB0eXBlLCBcIlwiOiBcIm91dGVyXCIgKyBuYW1lIH0sXHJcblx0XHRmdW5jdGlvbiggZGVmYXVsdEV4dHJhLCBmdW5jTmFtZSApIHtcclxuXHJcblx0XHQvLyBNYXJnaW4gaXMgb25seSBmb3Igb3V0ZXJIZWlnaHQsIG91dGVyV2lkdGhcclxuXHRcdGpRdWVyeS5mblsgZnVuY05hbWUgXSA9IGZ1bmN0aW9uKCBtYXJnaW4sIHZhbHVlICkge1xyXG5cdFx0XHR2YXIgY2hhaW5hYmxlID0gYXJndW1lbnRzLmxlbmd0aCAmJiAoIGRlZmF1bHRFeHRyYSB8fCB0eXBlb2YgbWFyZ2luICE9PSBcImJvb2xlYW5cIiApLFxyXG5cdFx0XHRcdGV4dHJhID0gZGVmYXVsdEV4dHJhIHx8ICggbWFyZ2luID09PSB0cnVlIHx8IHZhbHVlID09PSB0cnVlID8gXCJtYXJnaW5cIiA6IFwiYm9yZGVyXCIgKTtcclxuXHJcblx0XHRcdHJldHVybiBhY2Nlc3MoIHRoaXMsIGZ1bmN0aW9uKCBlbGVtLCB0eXBlLCB2YWx1ZSApIHtcclxuXHRcdFx0XHR2YXIgZG9jO1xyXG5cclxuXHRcdFx0XHRpZiAoIGpRdWVyeS5pc1dpbmRvdyggZWxlbSApICkge1xyXG5cclxuXHRcdFx0XHRcdC8vIEFzIG9mIDUvOC8yMDEyIHRoaXMgd2lsbCB5aWVsZCBpbmNvcnJlY3QgcmVzdWx0cyBmb3IgTW9iaWxlIFNhZmFyaSwgYnV0IHRoZXJlXHJcblx0XHRcdFx0XHQvLyBpc24ndCBhIHdob2xlIGxvdCB3ZSBjYW4gZG8uIFNlZSBwdWxsIHJlcXVlc3QgYXQgdGhpcyBVUkwgZm9yIGRpc2N1c3Npb246XHJcblx0XHRcdFx0XHQvLyBodHRwczovL2dpdGh1Yi5jb20vanF1ZXJ5L2pxdWVyeS9wdWxsLzc2NFxyXG5cdFx0XHRcdFx0cmV0dXJuIGVsZW0uZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50WyBcImNsaWVudFwiICsgbmFtZSBdO1xyXG5cdFx0XHRcdH1cclxuXHJcblx0XHRcdFx0Ly8gR2V0IGRvY3VtZW50IHdpZHRoIG9yIGhlaWdodFxyXG5cdFx0XHRcdGlmICggZWxlbS5ub2RlVHlwZSA9PT0gOSApIHtcclxuXHRcdFx0XHRcdGRvYyA9IGVsZW0uZG9jdW1lbnRFbGVtZW50O1xyXG5cclxuXHRcdFx0XHRcdC8vIEVpdGhlciBzY3JvbGxbV2lkdGgvSGVpZ2h0XSBvciBvZmZzZXRbV2lkdGgvSGVpZ2h0XSBvciBjbGllbnRbV2lkdGgvSGVpZ2h0XSxcclxuXHRcdFx0XHRcdC8vIHdoaWNoZXZlciBpcyBncmVhdGVzdFxyXG5cdFx0XHRcdFx0cmV0dXJuIE1hdGgubWF4KFxyXG5cdFx0XHRcdFx0XHRlbGVtLmJvZHlbIFwic2Nyb2xsXCIgKyBuYW1lIF0sIGRvY1sgXCJzY3JvbGxcIiArIG5hbWUgXSxcclxuXHRcdFx0XHRcdFx0ZWxlbS5ib2R5WyBcIm9mZnNldFwiICsgbmFtZSBdLCBkb2NbIFwib2Zmc2V0XCIgKyBuYW1lIF0sXHJcblx0XHRcdFx0XHRcdGRvY1sgXCJjbGllbnRcIiArIG5hbWUgXVxyXG5cdFx0XHRcdFx0KTtcclxuXHRcdFx0XHR9XHJcblxyXG5cdFx0XHRcdHJldHVybiB2YWx1ZSA9PT0gdW5kZWZpbmVkID9cclxuXHJcblx0XHRcdFx0XHQvLyBHZXQgd2lkdGggb3IgaGVpZ2h0IG9uIHRoZSBlbGVtZW50LCByZXF1ZXN0aW5nIGJ1dCBub3QgZm9yY2luZyBwYXJzZUZsb2F0XHJcblx0XHRcdFx0XHRqUXVlcnkuY3NzKCBlbGVtLCB0eXBlLCBleHRyYSApIDpcclxuXHJcblx0XHRcdFx0XHQvLyBTZXQgd2lkdGggb3IgaGVpZ2h0IG9uIHRoZSBlbGVtZW50XHJcblx0XHRcdFx0XHRqUXVlcnkuc3R5bGUoIGVsZW0sIHR5cGUsIHZhbHVlLCBleHRyYSApO1xyXG5cdFx0XHR9LCB0eXBlLCBjaGFpbmFibGUgPyBtYXJnaW4gOiB1bmRlZmluZWQsIGNoYWluYWJsZSwgbnVsbCApO1xyXG5cdFx0fTtcclxuXHR9ICk7XHJcbn0gKTtcclxuXHJcblxyXG5qUXVlcnkuZm4uZXh0ZW5kKCB7XHJcblxyXG5cdGJpbmQ6IGZ1bmN0aW9uKCB0eXBlcywgZGF0YSwgZm4gKSB7XHJcblx0XHRyZXR1cm4gdGhpcy5vbiggdHlwZXMsIG51bGwsIGRhdGEsIGZuICk7XHJcblx0fSxcclxuXHR1bmJpbmQ6IGZ1bmN0aW9uKCB0eXBlcywgZm4gKSB7XHJcblx0XHRyZXR1cm4gdGhpcy5vZmYoIHR5cGVzLCBudWxsLCBmbiApO1xyXG5cdH0sXHJcblxyXG5cdGRlbGVnYXRlOiBmdW5jdGlvbiggc2VsZWN0b3IsIHR5cGVzLCBkYXRhLCBmbiApIHtcclxuXHRcdHJldHVybiB0aGlzLm9uKCB0eXBlcywgc2VsZWN0b3IsIGRhdGEsIGZuICk7XHJcblx0fSxcclxuXHR1bmRlbGVnYXRlOiBmdW5jdGlvbiggc2VsZWN0b3IsIHR5cGVzLCBmbiApIHtcclxuXHJcblx0XHQvLyAoIG5hbWVzcGFjZSApIG9yICggc2VsZWN0b3IsIHR5cGVzIFssIGZuXSApXHJcblx0XHRyZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA9PT0gMSA/XHJcblx0XHRcdHRoaXMub2ZmKCBzZWxlY3RvciwgXCIqKlwiICkgOlxyXG5cdFx0XHR0aGlzLm9mZiggdHlwZXMsIHNlbGVjdG9yIHx8IFwiKipcIiwgZm4gKTtcclxuXHR9LFxyXG5cdHNpemU6IGZ1bmN0aW9uKCkge1xyXG5cdFx0cmV0dXJuIHRoaXMubGVuZ3RoO1xyXG5cdH1cclxufSApO1xyXG5cclxualF1ZXJ5LmZuLmFuZFNlbGYgPSBqUXVlcnkuZm4uYWRkQmFjaztcclxuXHJcblxyXG5cclxuXHJcbi8vIFJlZ2lzdGVyIGFzIGEgbmFtZWQgQU1EIG1vZHVsZSwgc2luY2UgalF1ZXJ5IGNhbiBiZSBjb25jYXRlbmF0ZWQgd2l0aCBvdGhlclxyXG4vLyBmaWxlcyB0aGF0IG1heSB1c2UgZGVmaW5lLCBidXQgbm90IHZpYSBhIHByb3BlciBjb25jYXRlbmF0aW9uIHNjcmlwdCB0aGF0XHJcbi8vIHVuZGVyc3RhbmRzIGFub255bW91cyBBTUQgbW9kdWxlcy4gQSBuYW1lZCBBTUQgaXMgc2FmZXN0IGFuZCBtb3N0IHJvYnVzdFxyXG4vLyB3YXkgdG8gcmVnaXN0ZXIuIExvd2VyY2FzZSBqcXVlcnkgaXMgdXNlZCBiZWNhdXNlIEFNRCBtb2R1bGUgbmFtZXMgYXJlXHJcbi8vIGRlcml2ZWQgZnJvbSBmaWxlIG5hbWVzLCBhbmQgalF1ZXJ5IGlzIG5vcm1hbGx5IGRlbGl2ZXJlZCBpbiBhIGxvd2VyY2FzZVxyXG4vLyBmaWxlIG5hbWUuIERvIHRoaXMgYWZ0ZXIgY3JlYXRpbmcgdGhlIGdsb2JhbCBzbyB0aGF0IGlmIGFuIEFNRCBtb2R1bGUgd2FudHNcclxuLy8gdG8gY2FsbCBub0NvbmZsaWN0IHRvIGhpZGUgdGhpcyB2ZXJzaW9uIG9mIGpRdWVyeSwgaXQgd2lsbCB3b3JrLlxyXG5cclxuLy8gTm90ZSB0aGF0IGZvciBtYXhpbXVtIHBvcnRhYmlsaXR5LCBsaWJyYXJpZXMgdGhhdCBhcmUgbm90IGpRdWVyeSBzaG91bGRcclxuLy8gZGVjbGFyZSB0aGVtc2VsdmVzIGFzIGFub255bW91cyBtb2R1bGVzLCBhbmQgYXZvaWQgc2V0dGluZyBhIGdsb2JhbCBpZiBhblxyXG4vLyBBTUQgbG9hZGVyIGlzIHByZXNlbnQuIGpRdWVyeSBpcyBhIHNwZWNpYWwgY2FzZS4gRm9yIG1vcmUgaW5mb3JtYXRpb24sIHNlZVxyXG4vLyBodHRwczovL2dpdGh1Yi5jb20vanJidXJrZS9yZXF1aXJlanMvd2lraS9VcGRhdGluZy1leGlzdGluZy1saWJyYXJpZXMjd2lraS1hbm9uXHJcblxyXG5pZiAoIHR5cGVvZiBkZWZpbmUgPT09IFwiZnVuY3Rpb25cIiAmJiBkZWZpbmUuYW1kICkge1xyXG5cdGRlZmluZSggXCJqcXVlcnlcIiwgW10sIGZ1bmN0aW9uKCkge1xyXG5cdFx0cmV0dXJuIGpRdWVyeTtcclxuXHR9ICk7XHJcbn1cclxuXHJcblxyXG5cclxudmFyXHJcblxyXG5cdC8vIE1hcCBvdmVyIGpRdWVyeSBpbiBjYXNlIG9mIG92ZXJ3cml0ZVxyXG5cdF9qUXVlcnkgPSB3aW5kb3cualF1ZXJ5LFxyXG5cclxuXHQvLyBNYXAgb3ZlciB0aGUgJCBpbiBjYXNlIG9mIG92ZXJ3cml0ZVxyXG5cdF8kID0gd2luZG93LiQ7XHJcblxyXG5qUXVlcnkubm9Db25mbGljdCA9IGZ1bmN0aW9uKCBkZWVwICkge1xyXG5cdGlmICggd2luZG93LiQgPT09IGpRdWVyeSApIHtcclxuXHRcdHdpbmRvdy4kID0gXyQ7XHJcblx0fVxyXG5cclxuXHRpZiAoIGRlZXAgJiYgd2luZG93LmpRdWVyeSA9PT0galF1ZXJ5ICkge1xyXG5cdFx0d2luZG93LmpRdWVyeSA9IF9qUXVlcnk7XHJcblx0fVxyXG5cclxuXHRyZXR1cm4galF1ZXJ5O1xyXG59O1xyXG5cclxuLy8gRXhwb3NlIGpRdWVyeSBhbmQgJCBpZGVudGlmaWVycywgZXZlbiBpbiBBTURcclxuLy8gKCM3MTAyI2NvbW1lbnQ6MTAsIGh0dHBzOi8vZ2l0aHViLmNvbS9qcXVlcnkvanF1ZXJ5L3B1bGwvNTU3KVxyXG4vLyBhbmQgQ29tbW9uSlMgZm9yIGJyb3dzZXIgZW11bGF0b3JzICgjMTM1NjYpXHJcbmlmICggIW5vR2xvYmFsICkge1xyXG5cdHdpbmRvdy5qUXVlcnkgPSB3aW5kb3cuJCA9IGpRdWVyeTtcclxufVxyXG5cclxucmV0dXJuIGpRdWVyeTtcclxufSkpO1xyXG4oZnVuY3Rpb24gKGZhY3RvcnkpIHtcclxuXHJcbiAgICBpZiAoIHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCApIHtcclxuXHJcbiAgICAgICAgLy8gQU1ELiBSZWdpc3RlciBhcyBhbiBhbm9ueW1vdXMgbW9kdWxlLlxyXG4gICAgICAgIGRlZmluZShbXSwgZmFjdG9yeSk7XHJcblxyXG4gICAgfSBlbHNlIGlmICggdHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnICkge1xyXG5cclxuICAgICAgICAvLyBOb2RlL0NvbW1vbkpTXHJcbiAgICAgICAgbW9kdWxlLmV4cG9ydHMgPSBmYWN0b3J5KCk7XHJcblxyXG4gICAgfSBlbHNlIHtcclxuXHJcbiAgICAgICAgLy8gQnJvd3NlciBnbG9iYWxzXHJcbiAgICAgICAgd2luZG93LndOdW1iID0gZmFjdG9yeSgpO1xyXG4gICAgfVxyXG5cclxufShmdW5jdGlvbigpe1xyXG5cclxuXHQndXNlIHN0cmljdCc7XHJcblxyXG52YXIgRm9ybWF0T3B0aW9ucyA9IFtcclxuXHQnZGVjaW1hbHMnLFxyXG5cdCd0aG91c2FuZCcsXHJcblx0J21hcmsnLFxyXG5cdCdwcmVmaXgnLFxyXG5cdCdzdWZmaXgnLFxyXG5cdCdlbmNvZGVyJyxcclxuXHQnZGVjb2RlcicsXHJcblx0J25lZ2F0aXZlQmVmb3JlJyxcclxuXHQnbmVnYXRpdmUnLFxyXG5cdCdlZGl0JyxcclxuXHQndW5kbydcclxuXTtcclxuXHJcbi8vIEdlbmVyYWxcclxuXHJcblx0Ly8gUmV2ZXJzZSBhIHN0cmluZ1xyXG5cdGZ1bmN0aW9uIHN0clJldmVyc2UgKCBhICkge1xyXG5cdFx0cmV0dXJuIGEuc3BsaXQoJycpLnJldmVyc2UoKS5qb2luKCcnKTtcclxuXHR9XHJcblxyXG5cdC8vIENoZWNrIGlmIGEgc3RyaW5nIHN0YXJ0cyB3aXRoIGEgc3BlY2lmaWVkIHByZWZpeC5cclxuXHRmdW5jdGlvbiBzdHJTdGFydHNXaXRoICggaW5wdXQsIG1hdGNoICkge1xyXG5cdFx0cmV0dXJuIGlucHV0LnN1YnN0cmluZygwLCBtYXRjaC5sZW5ndGgpID09PSBtYXRjaDtcclxuXHR9XHJcblxyXG5cdC8vIENoZWNrIGlzIGEgc3RyaW5nIGVuZHMgaW4gYSBzcGVjaWZpZWQgc3VmZml4LlxyXG5cdGZ1bmN0aW9uIHN0ckVuZHNXaXRoICggaW5wdXQsIG1hdGNoICkge1xyXG5cdFx0cmV0dXJuIGlucHV0LnNsaWNlKC0xICogbWF0Y2gubGVuZ3RoKSA9PT0gbWF0Y2g7XHJcblx0fVxyXG5cclxuXHQvLyBUaHJvdyBhbiBlcnJvciBpZiBmb3JtYXR0aW5nIG9wdGlvbnMgYXJlIGluY29tcGF0aWJsZS5cclxuXHRmdW5jdGlvbiB0aHJvd0VxdWFsRXJyb3IoIEYsIGEsIGIgKSB7XHJcblx0XHRpZiAoIChGW2FdIHx8IEZbYl0pICYmIChGW2FdID09PSBGW2JdKSApIHtcclxuXHRcdFx0dGhyb3cgbmV3IEVycm9yKGEpO1xyXG5cdFx0fVxyXG5cdH1cclxuXHJcblx0Ly8gQ2hlY2sgaWYgYSBudW1iZXIgaXMgZmluaXRlIGFuZCBub3QgTmFOXHJcblx0ZnVuY3Rpb24gaXNWYWxpZE51bWJlciAoIGlucHV0ICkge1xyXG5cdFx0cmV0dXJuIHR5cGVvZiBpbnB1dCA9PT0gJ251bWJlcicgJiYgaXNGaW5pdGUoIGlucHV0ICk7XHJcblx0fVxyXG5cclxuXHQvLyBQcm92aWRlIHJvdW5kaW5nLWFjY3VyYXRlIHRvRml4ZWQgbWV0aG9kLlxyXG5cdC8vIEJvcnJvd2VkOiBodHRwOi8vc3RhY2tvdmVyZmxvdy5jb20vYS8yMTMyMzMzMC83NzUyNjVcclxuXHRmdW5jdGlvbiB0b0ZpeGVkICggdmFsdWUsIGV4cCApIHtcclxuXHRcdHZhbHVlID0gdmFsdWUudG9TdHJpbmcoKS5zcGxpdCgnZScpO1xyXG5cdFx0dmFsdWUgPSBNYXRoLnJvdW5kKCsodmFsdWVbMF0gKyAnZScgKyAodmFsdWVbMV0gPyAoK3ZhbHVlWzFdICsgZXhwKSA6IGV4cCkpKTtcclxuXHRcdHZhbHVlID0gdmFsdWUudG9TdHJpbmcoKS5zcGxpdCgnZScpO1xyXG5cdFx0cmV0dXJuICgrKHZhbHVlWzBdICsgJ2UnICsgKHZhbHVlWzFdID8gKCt2YWx1ZVsxXSAtIGV4cCkgOiAtZXhwKSkpLnRvRml4ZWQoZXhwKTtcclxuXHR9XHJcblxyXG5cclxuLy8gRm9ybWF0dGluZ1xyXG5cclxuXHQvLyBBY2NlcHQgYSBudW1iZXIgYXMgaW5wdXQsIG91dHB1dCBmb3JtYXR0ZWQgc3RyaW5nLlxyXG5cdGZ1bmN0aW9uIGZvcm1hdFRvICggZGVjaW1hbHMsIHRob3VzYW5kLCBtYXJrLCBwcmVmaXgsIHN1ZmZpeCwgZW5jb2RlciwgZGVjb2RlciwgbmVnYXRpdmVCZWZvcmUsIG5lZ2F0aXZlLCBlZGl0LCB1bmRvLCBpbnB1dCApIHtcclxuXHJcblx0XHR2YXIgb3JpZ2luYWxJbnB1dCA9IGlucHV0LCBpbnB1dElzTmVnYXRpdmUsIGlucHV0UGllY2VzLCBpbnB1dEJhc2UsIGlucHV0RGVjaW1hbHMgPSAnJywgb3V0cHV0ID0gJyc7XHJcblxyXG5cdFx0Ly8gQXBwbHkgdXNlciBlbmNvZGVyIHRvIHRoZSBpbnB1dC5cclxuXHRcdC8vIEV4cGVjdGVkIG91dGNvbWU6IG51bWJlci5cclxuXHRcdGlmICggZW5jb2RlciApIHtcclxuXHRcdFx0aW5wdXQgPSBlbmNvZGVyKGlucHV0KTtcclxuXHRcdH1cclxuXHJcblx0XHQvLyBTdG9wIGlmIG5vIHZhbGlkIG51bWJlciB3YXMgcHJvdmlkZWQsIHRoZSBudW1iZXIgaXMgaW5maW5pdGUgb3IgTmFOLlxyXG5cdFx0aWYgKCAhaXNWYWxpZE51bWJlcihpbnB1dCkgKSB7XHJcblx0XHRcdHJldHVybiBmYWxzZTtcclxuXHRcdH1cclxuXHJcblx0XHQvLyBSb3VuZGluZyBhd2F5IGRlY2ltYWxzIG1pZ2h0IGNhdXNlIGEgdmFsdWUgb2YgLTBcclxuXHRcdC8vIHdoZW4gdXNpbmcgdmVyeSBzbWFsbCByYW5nZXMuIFJlbW92ZSB0aG9zZSBjYXNlcy5cclxuXHRcdGlmICggZGVjaW1hbHMgIT09IGZhbHNlICYmIHBhcnNlRmxvYXQoaW5wdXQudG9GaXhlZChkZWNpbWFscykpID09PSAwICkge1xyXG5cdFx0XHRpbnB1dCA9IDA7XHJcblx0XHR9XHJcblxyXG5cdFx0Ly8gRm9ybWF0dGluZyBpcyBkb25lIG9uIGFic29sdXRlIG51bWJlcnMsXHJcblx0XHQvLyBkZWNvcmF0ZWQgYnkgYW4gb3B0aW9uYWwgbmVnYXRpdmUgc3ltYm9sLlxyXG5cdFx0aWYgKCBpbnB1dCA8IDAgKSB7XHJcblx0XHRcdGlucHV0SXNOZWdhdGl2ZSA9IHRydWU7XHJcblx0XHRcdGlucHV0ID0gTWF0aC5hYnMoaW5wdXQpO1xyXG5cdFx0fVxyXG5cclxuXHRcdC8vIFJlZHVjZSB0aGUgbnVtYmVyIG9mIGRlY2ltYWxzIHRvIHRoZSBzcGVjaWZpZWQgb3B0aW9uLlxyXG5cdFx0aWYgKCBkZWNpbWFscyAhPT0gZmFsc2UgKSB7XHJcblx0XHRcdGlucHV0ID0gdG9GaXhlZCggaW5wdXQsIGRlY2ltYWxzICk7XHJcblx0XHR9XHJcblxyXG5cdFx0Ly8gVHJhbnNmb3JtIHRoZSBudW1iZXIgaW50byBhIHN0cmluZywgc28gaXQgY2FuIGJlIHNwbGl0LlxyXG5cdFx0aW5wdXQgPSBpbnB1dC50b1N0cmluZygpO1xyXG5cclxuXHRcdC8vIEJyZWFrIHRoZSBudW1iZXIgb24gdGhlIGRlY2ltYWwgc2VwYXJhdG9yLlxyXG5cdFx0aWYgKCBpbnB1dC5pbmRleE9mKCcuJykgIT09IC0xICkge1xyXG5cdFx0XHRpbnB1dFBpZWNlcyA9IGlucHV0LnNwbGl0KCcuJyk7XHJcblxyXG5cdFx0XHRpbnB1dEJhc2UgPSBpbnB1dFBpZWNlc1swXTtcclxuXHJcblx0XHRcdGlmICggbWFyayApIHtcclxuXHRcdFx0XHRpbnB1dERlY2ltYWxzID0gbWFyayArIGlucHV0UGllY2VzWzFdO1xyXG5cdFx0XHR9XHJcblxyXG5cdFx0fSBlbHNlIHtcclxuXHJcblx0XHQvLyBJZiBpdCBpc24ndCBzcGxpdCwgdGhlIGVudGlyZSBudW1iZXIgd2lsbCBkby5cclxuXHRcdFx0aW5wdXRCYXNlID0gaW5wdXQ7XHJcblx0XHR9XHJcblxyXG5cdFx0Ly8gR3JvdXAgbnVtYmVycyBpbiBzZXRzIG9mIHRocmVlLlxyXG5cdFx0aWYgKCB0aG91c2FuZCApIHtcclxuXHRcdFx0aW5wdXRCYXNlID0gc3RyUmV2ZXJzZShpbnB1dEJhc2UpLm1hdGNoKC8uezEsM30vZyk7XHJcblx0XHRcdGlucHV0QmFzZSA9IHN0clJldmVyc2UoaW5wdXRCYXNlLmpvaW4oIHN0clJldmVyc2UoIHRob3VzYW5kICkgKSk7XHJcblx0XHR9XHJcblxyXG5cdFx0Ly8gSWYgdGhlIG51bWJlciBpcyBuZWdhdGl2ZSwgcHJlZml4IHdpdGggbmVnYXRpb24gc3ltYm9sLlxyXG5cdFx0aWYgKCBpbnB1dElzTmVnYXRpdmUgJiYgbmVnYXRpdmVCZWZvcmUgKSB7XHJcblx0XHRcdG91dHB1dCArPSBuZWdhdGl2ZUJlZm9yZTtcclxuXHRcdH1cclxuXHJcblx0XHQvLyBQcmVmaXggdGhlIG51bWJlclxyXG5cdFx0aWYgKCBwcmVmaXggKSB7XHJcblx0XHRcdG91dHB1dCArPSBwcmVmaXg7XHJcblx0XHR9XHJcblxyXG5cdFx0Ly8gTm9ybWFsIG5lZ2F0aXZlIG9wdGlvbiBjb21lcyBhZnRlciB0aGUgcHJlZml4LiBEZWZhdWx0cyB0byAnLScuXHJcblx0XHRpZiAoIGlucHV0SXNOZWdhdGl2ZSAmJiBuZWdhdGl2ZSApIHtcclxuXHRcdFx0b3V0cHV0ICs9IG5lZ2F0aXZlO1xyXG5cdFx0fVxyXG5cclxuXHRcdC8vIEFwcGVuZCB0aGUgYWN0dWFsIG51bWJlci5cclxuXHRcdG91dHB1dCArPSBpbnB1dEJhc2U7XHJcblx0XHRvdXRwdXQgKz0gaW5wdXREZWNpbWFscztcclxuXHJcblx0XHQvLyBBcHBseSB0aGUgc3VmZml4LlxyXG5cdFx0aWYgKCBzdWZmaXggKSB7XHJcblx0XHRcdG91dHB1dCArPSBzdWZmaXg7XHJcblx0XHR9XHJcblxyXG5cdFx0Ly8gUnVuIHRoZSBvdXRwdXQgdGhyb3VnaCBhIHVzZXItc3BlY2lmaWVkIHBvc3QtZm9ybWF0dGVyLlxyXG5cdFx0aWYgKCBlZGl0ICkge1xyXG5cdFx0XHRvdXRwdXQgPSBlZGl0ICggb3V0cHV0LCBvcmlnaW5hbElucHV0ICk7XHJcblx0XHR9XHJcblxyXG5cdFx0Ly8gQWxsIGRvbmUuXHJcblx0XHRyZXR1cm4gb3V0cHV0O1xyXG5cdH1cclxuXHJcblx0Ly8gQWNjZXB0IGEgc3RpbmcgYXMgaW5wdXQsIG91dHB1dCBkZWNvZGVkIG51bWJlci5cclxuXHRmdW5jdGlvbiBmb3JtYXRGcm9tICggZGVjaW1hbHMsIHRob3VzYW5kLCBtYXJrLCBwcmVmaXgsIHN1ZmZpeCwgZW5jb2RlciwgZGVjb2RlciwgbmVnYXRpdmVCZWZvcmUsIG5lZ2F0aXZlLCBlZGl0LCB1bmRvLCBpbnB1dCApIHtcclxuXHJcblx0XHR2YXIgb3JpZ2luYWxJbnB1dCA9IGlucHV0LCBpbnB1dElzTmVnYXRpdmUsIG91dHB1dCA9ICcnO1xyXG5cclxuXHRcdC8vIFVzZXIgZGVmaW5lZCBwcmUtZGVjb2Rlci4gUmVzdWx0IG11c3QgYmUgYSBub24gZW1wdHkgc3RyaW5nLlxyXG5cdFx0aWYgKCB1bmRvICkge1xyXG5cdFx0XHRpbnB1dCA9IHVuZG8oaW5wdXQpO1xyXG5cdFx0fVxyXG5cclxuXHRcdC8vIFRlc3QgdGhlIGlucHV0LiBDYW4ndCBiZSBlbXB0eS5cclxuXHRcdGlmICggIWlucHV0IHx8IHR5cGVvZiBpbnB1dCAhPT0gJ3N0cmluZycgKSB7XHJcblx0XHRcdHJldHVybiBmYWxzZTtcclxuXHRcdH1cclxuXHJcblx0XHQvLyBJZiB0aGUgc3RyaW5nIHN0YXJ0cyB3aXRoIHRoZSBuZWdhdGl2ZUJlZm9yZSB2YWx1ZTogcmVtb3ZlIGl0LlxyXG5cdFx0Ly8gUmVtZW1iZXIgaXMgd2FzIHRoZXJlLCB0aGUgbnVtYmVyIGlzIG5lZ2F0aXZlLlxyXG5cdFx0aWYgKCBuZWdhdGl2ZUJlZm9yZSAmJiBzdHJTdGFydHNXaXRoKGlucHV0LCBuZWdhdGl2ZUJlZm9yZSkgKSB7XHJcblx0XHRcdGlucHV0ID0gaW5wdXQucmVwbGFjZShuZWdhdGl2ZUJlZm9yZSwgJycpO1xyXG5cdFx0XHRpbnB1dElzTmVnYXRpdmUgPSB0cnVlO1xyXG5cdFx0fVxyXG5cclxuXHRcdC8vIFJlcGVhdCB0aGUgc2FtZSBwcm9jZWR1cmUgZm9yIHRoZSBwcmVmaXguXHJcblx0XHRpZiAoIHByZWZpeCAmJiBzdHJTdGFydHNXaXRoKGlucHV0LCBwcmVmaXgpICkge1xyXG5cdFx0XHRpbnB1dCA9IGlucHV0LnJlcGxhY2UocHJlZml4LCAnJyk7XHJcblx0XHR9XHJcblxyXG5cdFx0Ly8gQW5kIGFnYWluIGZvciBuZWdhdGl2ZS5cclxuXHRcdGlmICggbmVnYXRpdmUgJiYgc3RyU3RhcnRzV2l0aChpbnB1dCwgbmVnYXRpdmUpICkge1xyXG5cdFx0XHRpbnB1dCA9IGlucHV0LnJlcGxhY2UobmVnYXRpdmUsICcnKTtcclxuXHRcdFx0aW5wdXRJc05lZ2F0aXZlID0gdHJ1ZTtcclxuXHRcdH1cclxuXHJcblx0XHQvLyBSZW1vdmUgdGhlIHN1ZmZpeC5cclxuXHRcdC8vIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0phdmFTY3JpcHQvUmVmZXJlbmNlL0dsb2JhbF9PYmplY3RzL1N0cmluZy9zbGljZVxyXG5cdFx0aWYgKCBzdWZmaXggJiYgc3RyRW5kc1dpdGgoaW5wdXQsIHN1ZmZpeCkgKSB7XHJcblx0XHRcdGlucHV0ID0gaW5wdXQuc2xpY2UoMCwgLTEgKiBzdWZmaXgubGVuZ3RoKTtcclxuXHRcdH1cclxuXHJcblx0XHQvLyBSZW1vdmUgdGhlIHRob3VzYW5kIGdyb3VwaW5nLlxyXG5cdFx0aWYgKCB0aG91c2FuZCApIHtcclxuXHRcdFx0aW5wdXQgPSBpbnB1dC5zcGxpdCh0aG91c2FuZCkuam9pbignJyk7XHJcblx0XHR9XHJcblxyXG5cdFx0Ly8gU2V0IHRoZSBkZWNpbWFsIHNlcGFyYXRvciBiYWNrIHRvIHBlcmlvZC5cclxuXHRcdGlmICggbWFyayApIHtcclxuXHRcdFx0aW5wdXQgPSBpbnB1dC5yZXBsYWNlKG1hcmssICcuJyk7XHJcblx0XHR9XHJcblxyXG5cdFx0Ly8gUHJlcGVuZCB0aGUgbmVnYXRpdmUgc3ltYm9sLlxyXG5cdFx0aWYgKCBpbnB1dElzTmVnYXRpdmUgKSB7XHJcblx0XHRcdG91dHB1dCArPSAnLSc7XHJcblx0XHR9XHJcblxyXG5cdFx0Ly8gQWRkIHRoZSBudW1iZXJcclxuXHRcdG91dHB1dCArPSBpbnB1dDtcclxuXHJcblx0XHQvLyBUcmltIGFsbCBub24tbnVtZXJpYyBjaGFyYWN0ZXJzIChhbGxvdyAnLicgYW5kICctJyk7XHJcblx0XHRvdXRwdXQgPSBvdXRwdXQucmVwbGFjZSgvW14wLTlcXC5cXC0uXS9nLCAnJyk7XHJcblxyXG5cdFx0Ly8gVGhlIHZhbHVlIGNvbnRhaW5zIG5vIHBhcnNlLWFibGUgbnVtYmVyLlxyXG5cdFx0aWYgKCBvdXRwdXQgPT09ICcnICkge1xyXG5cdFx0XHRyZXR1cm4gZmFsc2U7XHJcblx0XHR9XHJcblxyXG5cdFx0Ly8gQ292ZXJ0IHRvIG51bWJlci5cclxuXHRcdG91dHB1dCA9IE51bWJlcihvdXRwdXQpO1xyXG5cclxuXHRcdC8vIFJ1biB0aGUgdXNlci1zcGVjaWZpZWQgcG9zdC1kZWNvZGVyLlxyXG5cdFx0aWYgKCBkZWNvZGVyICkge1xyXG5cdFx0XHRvdXRwdXQgPSBkZWNvZGVyKG91dHB1dCk7XHJcblx0XHR9XHJcblxyXG5cdFx0Ly8gQ2hlY2sgaXMgdGhlIG91dHB1dCBpcyB2YWxpZCwgb3RoZXJ3aXNlOiByZXR1cm4gZmFsc2UuXHJcblx0XHRpZiAoICFpc1ZhbGlkTnVtYmVyKG91dHB1dCkgKSB7XHJcblx0XHRcdHJldHVybiBmYWxzZTtcclxuXHRcdH1cclxuXHJcblx0XHRyZXR1cm4gb3V0cHV0O1xyXG5cdH1cclxuXHJcblxyXG4vLyBGcmFtZXdvcmtcclxuXHJcblx0Ly8gVmFsaWRhdGUgZm9ybWF0dGluZyBvcHRpb25zXHJcblx0ZnVuY3Rpb24gdmFsaWRhdGUgKCBpbnB1dE9wdGlvbnMgKSB7XHJcblxyXG5cdFx0dmFyIGksIG9wdGlvbk5hbWUsIG9wdGlvblZhbHVlLFxyXG5cdFx0XHRmaWx0ZXJlZE9wdGlvbnMgPSB7fTtcclxuXHJcblx0XHRpZiAoIGlucHV0T3B0aW9uc1snc3VmZml4J10gPT09IHVuZGVmaW5lZCApIHtcclxuXHRcdFx0aW5wdXRPcHRpb25zWydzdWZmaXgnXSA9IGlucHV0T3B0aW9uc1sncG9zdGZpeCddO1xyXG5cdFx0fVxyXG5cclxuXHRcdGZvciAoIGkgPSAwOyBpIDwgRm9ybWF0T3B0aW9ucy5sZW5ndGg7IGkrPTEgKSB7XHJcblxyXG5cdFx0XHRvcHRpb25OYW1lID0gRm9ybWF0T3B0aW9uc1tpXTtcclxuXHRcdFx0b3B0aW9uVmFsdWUgPSBpbnB1dE9wdGlvbnNbb3B0aW9uTmFtZV07XHJcblxyXG5cdFx0XHRpZiAoIG9wdGlvblZhbHVlID09PSB1bmRlZmluZWQgKSB7XHJcblxyXG5cdFx0XHRcdC8vIE9ubHkgZGVmYXVsdCBpZiBuZWdhdGl2ZUJlZm9yZSBpc24ndCBzZXQuXHJcblx0XHRcdFx0aWYgKCBvcHRpb25OYW1lID09PSAnbmVnYXRpdmUnICYmICFmaWx0ZXJlZE9wdGlvbnMubmVnYXRpdmVCZWZvcmUgKSB7XHJcblx0XHRcdFx0XHRmaWx0ZXJlZE9wdGlvbnNbb3B0aW9uTmFtZV0gPSAnLSc7XHJcblx0XHRcdFx0Ly8gRG9uJ3Qgc2V0IGEgZGVmYXVsdCBmb3IgbWFyayB3aGVuICd0aG91c2FuZCcgaXMgc2V0LlxyXG5cdFx0XHRcdH0gZWxzZSBpZiAoIG9wdGlvbk5hbWUgPT09ICdtYXJrJyAmJiBmaWx0ZXJlZE9wdGlvbnMudGhvdXNhbmQgIT09ICcuJyApIHtcclxuXHRcdFx0XHRcdGZpbHRlcmVkT3B0aW9uc1tvcHRpb25OYW1lXSA9ICcuJztcclxuXHRcdFx0XHR9IGVsc2Uge1xyXG5cdFx0XHRcdFx0ZmlsdGVyZWRPcHRpb25zW29wdGlvbk5hbWVdID0gZmFsc2U7XHJcblx0XHRcdFx0fVxyXG5cclxuXHRcdFx0Ly8gRmxvYXRpbmcgcG9pbnRzIGluIEpTIGFyZSBzdGFibGUgdXAgdG8gNyBkZWNpbWFscy5cclxuXHRcdFx0fSBlbHNlIGlmICggb3B0aW9uTmFtZSA9PT0gJ2RlY2ltYWxzJyApIHtcclxuXHRcdFx0XHRpZiAoIG9wdGlvblZhbHVlID49IDAgJiYgb3B0aW9uVmFsdWUgPCA4ICkge1xyXG5cdFx0XHRcdFx0ZmlsdGVyZWRPcHRpb25zW29wdGlvbk5hbWVdID0gb3B0aW9uVmFsdWU7XHJcblx0XHRcdFx0fSBlbHNlIHtcclxuXHRcdFx0XHRcdHRocm93IG5ldyBFcnJvcihvcHRpb25OYW1lKTtcclxuXHRcdFx0XHR9XHJcblxyXG5cdFx0XHQvLyBUaGVzZSBvcHRpb25zLCB3aGVuIHByb3ZpZGVkLCBtdXN0IGJlIGZ1bmN0aW9ucy5cclxuXHRcdFx0fSBlbHNlIGlmICggb3B0aW9uTmFtZSA9PT0gJ2VuY29kZXInIHx8IG9wdGlvbk5hbWUgPT09ICdkZWNvZGVyJyB8fCBvcHRpb25OYW1lID09PSAnZWRpdCcgfHwgb3B0aW9uTmFtZSA9PT0gJ3VuZG8nICkge1xyXG5cdFx0XHRcdGlmICggdHlwZW9mIG9wdGlvblZhbHVlID09PSAnZnVuY3Rpb24nICkge1xyXG5cdFx0XHRcdFx0ZmlsdGVyZWRPcHRpb25zW29wdGlvbk5hbWVdID0gb3B0aW9uVmFsdWU7XHJcblx0XHRcdFx0fSBlbHNlIHtcclxuXHRcdFx0XHRcdHRocm93IG5ldyBFcnJvcihvcHRpb25OYW1lKTtcclxuXHRcdFx0XHR9XHJcblxyXG5cdFx0XHQvLyBPdGhlciBvcHRpb25zIGFyZSBzdHJpbmdzLlxyXG5cdFx0XHR9IGVsc2Uge1xyXG5cclxuXHRcdFx0XHRpZiAoIHR5cGVvZiBvcHRpb25WYWx1ZSA9PT0gJ3N0cmluZycgKSB7XHJcblx0XHRcdFx0XHRmaWx0ZXJlZE9wdGlvbnNbb3B0aW9uTmFtZV0gPSBvcHRpb25WYWx1ZTtcclxuXHRcdFx0XHR9IGVsc2Uge1xyXG5cdFx0XHRcdFx0dGhyb3cgbmV3IEVycm9yKG9wdGlvbk5hbWUpO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0fVxyXG5cdFx0fVxyXG5cclxuXHRcdC8vIFNvbWUgdmFsdWVzIGNhbid0IGJlIGV4dHJhY3RlZCBmcm9tIGFcclxuXHRcdC8vIHN0cmluZyBpZiBjZXJ0YWluIGNvbWJpbmF0aW9ucyBhcmUgcHJlc2VudC5cclxuXHRcdHRocm93RXF1YWxFcnJvcihmaWx0ZXJlZE9wdGlvbnMsICdtYXJrJywgJ3Rob3VzYW5kJyk7XHJcblx0XHR0aHJvd0VxdWFsRXJyb3IoZmlsdGVyZWRPcHRpb25zLCAncHJlZml4JywgJ25lZ2F0aXZlJyk7XHJcblx0XHR0aHJvd0VxdWFsRXJyb3IoZmlsdGVyZWRPcHRpb25zLCAncHJlZml4JywgJ25lZ2F0aXZlQmVmb3JlJyk7XHJcblxyXG5cdFx0cmV0dXJuIGZpbHRlcmVkT3B0aW9ucztcclxuXHR9XHJcblxyXG5cdC8vIFBhc3MgYWxsIG9wdGlvbnMgYXMgZnVuY3Rpb24gYXJndW1lbnRzXHJcblx0ZnVuY3Rpb24gcGFzc0FsbCAoIG9wdGlvbnMsIG1ldGhvZCwgaW5wdXQgKSB7XHJcblx0XHR2YXIgaSwgYXJncyA9IFtdO1xyXG5cclxuXHRcdC8vIEFkZCBhbGwgb3B0aW9ucyBpbiBvcmRlciBvZiBGb3JtYXRPcHRpb25zXHJcblx0XHRmb3IgKCBpID0gMDsgaSA8IEZvcm1hdE9wdGlvbnMubGVuZ3RoOyBpKz0xICkge1xyXG5cdFx0XHRhcmdzLnB1c2gob3B0aW9uc1tGb3JtYXRPcHRpb25zW2ldXSk7XHJcblx0XHR9XHJcblxyXG5cdFx0Ly8gQXBwZW5kIHRoZSBpbnB1dCwgdGhlbiBjYWxsIHRoZSBtZXRob2QsIHByZXNlbnRpbmcgYWxsXHJcblx0XHQvLyBvcHRpb25zIGFzIGFyZ3VtZW50cy5cclxuXHRcdGFyZ3MucHVzaChpbnB1dCk7XHJcblx0XHRyZXR1cm4gbWV0aG9kLmFwcGx5KCcnLCBhcmdzKTtcclxuXHR9XHJcblxyXG5cdGZ1bmN0aW9uIHdOdW1iICggb3B0aW9ucyApIHtcclxuXHJcblx0XHRpZiAoICEodGhpcyBpbnN0YW5jZW9mIHdOdW1iKSApIHtcclxuXHRcdFx0cmV0dXJuIG5ldyB3TnVtYiAoIG9wdGlvbnMgKTtcclxuXHRcdH1cclxuXHJcblx0XHRpZiAoIHR5cGVvZiBvcHRpb25zICE9PSBcIm9iamVjdFwiICkge1xyXG5cdFx0XHRyZXR1cm47XHJcblx0XHR9XHJcblxyXG5cdFx0b3B0aW9ucyA9IHZhbGlkYXRlKG9wdGlvbnMpO1xyXG5cclxuXHRcdC8vIENhbGwgJ2Zvcm1hdFRvJyB3aXRoIHByb3BlciBhcmd1bWVudHMuXHJcblx0XHR0aGlzLnRvID0gZnVuY3Rpb24gKCBpbnB1dCApIHtcclxuXHRcdFx0cmV0dXJuIHBhc3NBbGwob3B0aW9ucywgZm9ybWF0VG8sIGlucHV0KTtcclxuXHRcdH07XHJcblxyXG5cdFx0Ly8gQ2FsbCAnZm9ybWF0RnJvbScgd2l0aCBwcm9wZXIgYXJndW1lbnRzLlxyXG5cdFx0dGhpcy5mcm9tID0gZnVuY3Rpb24gKCBpbnB1dCApIHtcclxuXHRcdFx0cmV0dXJuIHBhc3NBbGwob3B0aW9ucywgZm9ybWF0RnJvbSwgaW5wdXQpO1xyXG5cdFx0fTtcclxuXHR9XHJcblxyXG5cdHJldHVybiB3TnVtYjtcclxuXHJcbn0pKTtcclxuLyohIG5vdWlzbGlkZXIgLSAxMi4xLjAgLSAxMC8yNS8yMDE4ICovXHJcbiFmdW5jdGlvbih0KXtcImZ1bmN0aW9uXCI9PXR5cGVvZiBkZWZpbmUmJmRlZmluZS5hbWQ/ZGVmaW5lKFtdLHQpOlwib2JqZWN0XCI9PXR5cGVvZiBleHBvcnRzP21vZHVsZS5leHBvcnRzPXQoKTp3aW5kb3cubm9VaVNsaWRlcj10KCl9KGZ1bmN0aW9uKCl7XCJ1c2Ugc3RyaWN0XCI7dmFyIGV0PVwiMTIuMS4wXCI7ZnVuY3Rpb24gcyh0KXtyZXR1cm4gbnVsbCE9dH1mdW5jdGlvbiBydCh0KXt0LnByZXZlbnREZWZhdWx0KCl9ZnVuY3Rpb24gaSh0KXtyZXR1cm5cIm51bWJlclwiPT10eXBlb2YgdCYmIWlzTmFOKHQpJiZpc0Zpbml0ZSh0KX1mdW5jdGlvbiBudCh0LGUscil7MDxyJiYoYXQodCxlKSxzZXRUaW1lb3V0KGZ1bmN0aW9uKCl7c3QodCxlKX0scikpfWZ1bmN0aW9uIGl0KHQpe3JldHVybiBNYXRoLm1heChNYXRoLm1pbih0LDEwMCksMCl9ZnVuY3Rpb24gb3QodCl7cmV0dXJuIEFycmF5LmlzQXJyYXkodCk/dDpbdF19ZnVuY3Rpb24gZSh0KXt2YXIgZT0odD1TdHJpbmcodCkpLnNwbGl0KFwiLlwiKTtyZXR1cm4gMTxlLmxlbmd0aD9lWzFdLmxlbmd0aDowfWZ1bmN0aW9uIGF0KHQsZSl7dC5jbGFzc0xpc3Q/dC5jbGFzc0xpc3QuYWRkKGUpOnQuY2xhc3NOYW1lKz1cIiBcIitlfWZ1bmN0aW9uIHN0KHQsZSl7dC5jbGFzc0xpc3Q/dC5jbGFzc0xpc3QucmVtb3ZlKGUpOnQuY2xhc3NOYW1lPXQuY2xhc3NOYW1lLnJlcGxhY2UobmV3IFJlZ0V4cChcIihefFxcXFxiKVwiK2Uuc3BsaXQoXCIgXCIpLmpvaW4oXCJ8XCIpK1wiKFxcXFxifCQpXCIsXCJnaVwiKSxcIiBcIil9ZnVuY3Rpb24gbHQodCl7dmFyIGU9dm9pZCAwIT09d2luZG93LnBhZ2VYT2Zmc2V0LHI9XCJDU1MxQ29tcGF0XCI9PT0odC5jb21wYXRNb2RlfHxcIlwiKTtyZXR1cm57eDplP3dpbmRvdy5wYWdlWE9mZnNldDpyP3QuZG9jdW1lbnRFbGVtZW50LnNjcm9sbExlZnQ6dC5ib2R5LnNjcm9sbExlZnQseTplP3dpbmRvdy5wYWdlWU9mZnNldDpyP3QuZG9jdW1lbnRFbGVtZW50LnNjcm9sbFRvcDp0LmJvZHkuc2Nyb2xsVG9wfX1mdW5jdGlvbiBjKHQsZSl7cmV0dXJuIDEwMC8oZS10KX1mdW5jdGlvbiBwKHQsZSl7cmV0dXJuIDEwMCplLyh0WzFdLXRbMF0pfWZ1bmN0aW9uIGYodCxlKXtmb3IodmFyIHI9MTt0Pj1lW3JdOylyKz0xO3JldHVybiByfWZ1bmN0aW9uIHIodCxlLHIpe2lmKHI+PXQuc2xpY2UoLTEpWzBdKXJldHVybiAxMDA7dmFyIG4saSxvPWYocix0KSxhPXRbby0xXSxzPXRbb10sbD1lW28tMV0sdT1lW29dO3JldHVybiBsKyhpPXIscChuPVthLHNdLG5bMF08MD9pK01hdGguYWJzKG5bMF0pOmktblswXSkvYyhsLHUpKX1mdW5jdGlvbiBuKHQsZSxyLG4pe2lmKDEwMD09PW4pcmV0dXJuIG47dmFyIGksbyxhPWYobix0KSxzPXRbYS0xXSxsPXRbYV07cmV0dXJuIHI/KGwtcykvMjxuLXM/bDpzOmVbYS0xXT90W2EtMV0rKGk9bi10W2EtMV0sbz1lW2EtMV0sTWF0aC5yb3VuZChpL28pKm8pOm59ZnVuY3Rpb24gbyh0LGUscil7dmFyIG47aWYoXCJudW1iZXJcIj09dHlwZW9mIGUmJihlPVtlXSksIUFycmF5LmlzQXJyYXkoZSkpdGhyb3cgbmV3IEVycm9yKFwibm9VaVNsaWRlciAoXCIrZXQrXCIpOiAncmFuZ2UnIGNvbnRhaW5zIGludmFsaWQgdmFsdWUuXCIpO2lmKCFpKG49XCJtaW5cIj09PXQ/MDpcIm1heFwiPT09dD8xMDA6cGFyc2VGbG9hdCh0KSl8fCFpKGVbMF0pKXRocm93IG5ldyBFcnJvcihcIm5vVWlTbGlkZXIgKFwiK2V0K1wiKTogJ3JhbmdlJyB2YWx1ZSBpc24ndCBudW1lcmljLlwiKTtyLnhQY3QucHVzaChuKSxyLnhWYWwucHVzaChlWzBdKSxuP3IueFN0ZXBzLnB1c2goIWlzTmFOKGVbMV0pJiZlWzFdKTppc05hTihlWzFdKXx8KHIueFN0ZXBzWzBdPWVbMV0pLHIueEhpZ2hlc3RDb21wbGV0ZVN0ZXAucHVzaCgwKX1mdW5jdGlvbiBhKHQsZSxyKXtpZighZSlyZXR1cm4hMDtyLnhTdGVwc1t0XT1wKFtyLnhWYWxbdF0sci54VmFsW3QrMV1dLGUpL2Moci54UGN0W3RdLHIueFBjdFt0KzFdKTt2YXIgbj0oci54VmFsW3QrMV0tci54VmFsW3RdKS9yLnhOdW1TdGVwc1t0XSxpPU1hdGguY2VpbChOdW1iZXIobi50b0ZpeGVkKDMpKS0xKSxvPXIueFZhbFt0XStyLnhOdW1TdGVwc1t0XSppO3IueEhpZ2hlc3RDb21wbGV0ZVN0ZXBbdF09b31mdW5jdGlvbiBsKHQsZSxyKXt2YXIgbjt0aGlzLnhQY3Q9W10sdGhpcy54VmFsPVtdLHRoaXMueFN0ZXBzPVtyfHwhMV0sdGhpcy54TnVtU3RlcHM9WyExXSx0aGlzLnhIaWdoZXN0Q29tcGxldGVTdGVwPVtdLHRoaXMuc25hcD1lO3ZhciBpPVtdO2ZvcihuIGluIHQpdC5oYXNPd25Qcm9wZXJ0eShuKSYmaS5wdXNoKFt0W25dLG5dKTtmb3IoaS5sZW5ndGgmJlwib2JqZWN0XCI9PXR5cGVvZiBpWzBdWzBdP2kuc29ydChmdW5jdGlvbih0LGUpe3JldHVybiB0WzBdWzBdLWVbMF1bMF19KTppLnNvcnQoZnVuY3Rpb24odCxlKXtyZXR1cm4gdFswXS1lWzBdfSksbj0wO248aS5sZW5ndGg7bisrKW8oaVtuXVsxXSxpW25dWzBdLHRoaXMpO2Zvcih0aGlzLnhOdW1TdGVwcz10aGlzLnhTdGVwcy5zbGljZSgwKSxuPTA7bjx0aGlzLnhOdW1TdGVwcy5sZW5ndGg7bisrKWEobix0aGlzLnhOdW1TdGVwc1tuXSx0aGlzKX1sLnByb3RvdHlwZS5nZXRNYXJnaW49ZnVuY3Rpb24odCl7dmFyIGU9dGhpcy54TnVtU3RlcHNbMF07aWYoZSYmdC9lJTEhPTApdGhyb3cgbmV3IEVycm9yKFwibm9VaVNsaWRlciAoXCIrZXQrXCIpOiAnbGltaXQnLCAnbWFyZ2luJyBhbmQgJ3BhZGRpbmcnIG11c3QgYmUgZGl2aXNpYmxlIGJ5IHN0ZXAuXCIpO3JldHVybiAyPT09dGhpcy54UGN0Lmxlbmd0aCYmcCh0aGlzLnhWYWwsdCl9LGwucHJvdG90eXBlLnRvU3RlcHBpbmc9ZnVuY3Rpb24odCl7cmV0dXJuIHQ9cih0aGlzLnhWYWwsdGhpcy54UGN0LHQpfSxsLnByb3RvdHlwZS5mcm9tU3RlcHBpbmc9ZnVuY3Rpb24odCl7cmV0dXJuIGZ1bmN0aW9uKHQsZSxyKXtpZigxMDA8PXIpcmV0dXJuIHQuc2xpY2UoLTEpWzBdO3ZhciBuLGk9ZihyLGUpLG89dFtpLTFdLGE9dFtpXSxzPWVbaS0xXSxsPWVbaV07cmV0dXJuIG49W28sYV0sKHItcykqYyhzLGwpKihuWzFdLW5bMF0pLzEwMCtuWzBdfSh0aGlzLnhWYWwsdGhpcy54UGN0LHQpfSxsLnByb3RvdHlwZS5nZXRTdGVwPWZ1bmN0aW9uKHQpe3JldHVybiB0PW4odGhpcy54UGN0LHRoaXMueFN0ZXBzLHRoaXMuc25hcCx0KX0sbC5wcm90b3R5cGUuZ2V0TmVhcmJ5U3RlcHM9ZnVuY3Rpb24odCl7dmFyIGU9Zih0LHRoaXMueFBjdCk7cmV0dXJue3N0ZXBCZWZvcmU6e3N0YXJ0VmFsdWU6dGhpcy54VmFsW2UtMl0sc3RlcDp0aGlzLnhOdW1TdGVwc1tlLTJdLGhpZ2hlc3RTdGVwOnRoaXMueEhpZ2hlc3RDb21wbGV0ZVN0ZXBbZS0yXX0sdGhpc1N0ZXA6e3N0YXJ0VmFsdWU6dGhpcy54VmFsW2UtMV0sc3RlcDp0aGlzLnhOdW1TdGVwc1tlLTFdLGhpZ2hlc3RTdGVwOnRoaXMueEhpZ2hlc3RDb21wbGV0ZVN0ZXBbZS0xXX0sc3RlcEFmdGVyOntzdGFydFZhbHVlOnRoaXMueFZhbFtlXSxzdGVwOnRoaXMueE51bVN0ZXBzW2VdLGhpZ2hlc3RTdGVwOnRoaXMueEhpZ2hlc3RDb21wbGV0ZVN0ZXBbZV19fX0sbC5wcm90b3R5cGUuY291bnRTdGVwRGVjaW1hbHM9ZnVuY3Rpb24oKXt2YXIgdD10aGlzLnhOdW1TdGVwcy5tYXAoZSk7cmV0dXJuIE1hdGgubWF4LmFwcGx5KG51bGwsdCl9LGwucHJvdG90eXBlLmNvbnZlcnQ9ZnVuY3Rpb24odCl7cmV0dXJuIHRoaXMuZ2V0U3RlcCh0aGlzLnRvU3RlcHBpbmcodCkpfTt2YXIgdT17dG86ZnVuY3Rpb24odCl7cmV0dXJuIHZvaWQgMCE9PXQmJnQudG9GaXhlZCgyKX0sZnJvbTpOdW1iZXJ9O2Z1bmN0aW9uIGQodCl7aWYoXCJvYmplY3RcIj09dHlwZW9mKGU9dCkmJlwiZnVuY3Rpb25cIj09dHlwZW9mIGUudG8mJlwiZnVuY3Rpb25cIj09dHlwZW9mIGUuZnJvbSlyZXR1cm4hMDt2YXIgZTt0aHJvdyBuZXcgRXJyb3IoXCJub1VpU2xpZGVyIChcIitldCtcIik6ICdmb3JtYXQnIHJlcXVpcmVzICd0bycgYW5kICdmcm9tJyBtZXRob2RzLlwiKX1mdW5jdGlvbiBoKHQsZSl7aWYoIWkoZSkpdGhyb3cgbmV3IEVycm9yKFwibm9VaVNsaWRlciAoXCIrZXQrXCIpOiAnc3RlcCcgaXMgbm90IG51bWVyaWMuXCIpO3Quc2luZ2xlU3RlcD1lfWZ1bmN0aW9uIG0odCxlKXtpZihcIm9iamVjdFwiIT10eXBlb2YgZXx8QXJyYXkuaXNBcnJheShlKSl0aHJvdyBuZXcgRXJyb3IoXCJub1VpU2xpZGVyIChcIitldCtcIik6ICdyYW5nZScgaXMgbm90IGFuIG9iamVjdC5cIik7aWYodm9pZCAwPT09ZS5taW58fHZvaWQgMD09PWUubWF4KXRocm93IG5ldyBFcnJvcihcIm5vVWlTbGlkZXIgKFwiK2V0K1wiKTogTWlzc2luZyAnbWluJyBvciAnbWF4JyBpbiAncmFuZ2UnLlwiKTtpZihlLm1pbj09PWUubWF4KXRocm93IG5ldyBFcnJvcihcIm5vVWlTbGlkZXIgKFwiK2V0K1wiKTogJ3JhbmdlJyAnbWluJyBhbmQgJ21heCcgY2Fubm90IGJlIGVxdWFsLlwiKTt0LnNwZWN0cnVtPW5ldyBsKGUsdC5zbmFwLHQuc2luZ2xlU3RlcCl9ZnVuY3Rpb24gZyh0LGUpe2lmKGU9b3QoZSksIUFycmF5LmlzQXJyYXkoZSl8fCFlLmxlbmd0aCl0aHJvdyBuZXcgRXJyb3IoXCJub1VpU2xpZGVyIChcIitldCtcIik6ICdzdGFydCcgb3B0aW9uIGlzIGluY29ycmVjdC5cIik7dC5oYW5kbGVzPWUubGVuZ3RoLHQuc3RhcnQ9ZX1mdW5jdGlvbiB2KHQsZSl7aWYoXCJib29sZWFuXCIhPXR5cGVvZih0LnNuYXA9ZSkpdGhyb3cgbmV3IEVycm9yKFwibm9VaVNsaWRlciAoXCIrZXQrXCIpOiAnc25hcCcgb3B0aW9uIG11c3QgYmUgYSBib29sZWFuLlwiKX1mdW5jdGlvbiBiKHQsZSl7aWYoXCJib29sZWFuXCIhPXR5cGVvZih0LmFuaW1hdGU9ZSkpdGhyb3cgbmV3IEVycm9yKFwibm9VaVNsaWRlciAoXCIrZXQrXCIpOiAnYW5pbWF0ZScgb3B0aW9uIG11c3QgYmUgYSBib29sZWFuLlwiKX1mdW5jdGlvbiBTKHQsZSl7aWYoXCJudW1iZXJcIiE9dHlwZW9mKHQuYW5pbWF0aW9uRHVyYXRpb249ZSkpdGhyb3cgbmV3IEVycm9yKFwibm9VaVNsaWRlciAoXCIrZXQrXCIpOiAnYW5pbWF0aW9uRHVyYXRpb24nIG9wdGlvbiBtdXN0IGJlIGEgbnVtYmVyLlwiKX1mdW5jdGlvbiB3KHQsZSl7dmFyIHIsbj1bITFdO2lmKFwibG93ZXJcIj09PWU/ZT1bITAsITFdOlwidXBwZXJcIj09PWUmJihlPVshMSwhMF0pLCEwPT09ZXx8ITE9PT1lKXtmb3Iocj0xO3I8dC5oYW5kbGVzO3IrKyluLnB1c2goZSk7bi5wdXNoKCExKX1lbHNle2lmKCFBcnJheS5pc0FycmF5KGUpfHwhZS5sZW5ndGh8fGUubGVuZ3RoIT09dC5oYW5kbGVzKzEpdGhyb3cgbmV3IEVycm9yKFwibm9VaVNsaWRlciAoXCIrZXQrXCIpOiAnY29ubmVjdCcgb3B0aW9uIGRvZXNuJ3QgbWF0Y2ggaGFuZGxlIGNvdW50LlwiKTtuPWV9dC5jb25uZWN0PW59ZnVuY3Rpb24geCh0LGUpe3N3aXRjaChlKXtjYXNlXCJob3Jpem9udGFsXCI6dC5vcnQ9MDticmVhaztjYXNlXCJ2ZXJ0aWNhbFwiOnQub3J0PTE7YnJlYWs7ZGVmYXVsdDp0aHJvdyBuZXcgRXJyb3IoXCJub1VpU2xpZGVyIChcIitldCtcIik6ICdvcmllbnRhdGlvbicgb3B0aW9uIGlzIGludmFsaWQuXCIpfX1mdW5jdGlvbiB5KHQsZSl7aWYoIWkoZSkpdGhyb3cgbmV3IEVycm9yKFwibm9VaVNsaWRlciAoXCIrZXQrXCIpOiAnbWFyZ2luJyBvcHRpb24gbXVzdCBiZSBudW1lcmljLlwiKTtpZigwIT09ZSYmKHQubWFyZ2luPXQuc3BlY3RydW0uZ2V0TWFyZ2luKGUpLCF0Lm1hcmdpbikpdGhyb3cgbmV3IEVycm9yKFwibm9VaVNsaWRlciAoXCIrZXQrXCIpOiAnbWFyZ2luJyBvcHRpb24gaXMgb25seSBzdXBwb3J0ZWQgb24gbGluZWFyIHNsaWRlcnMuXCIpfWZ1bmN0aW9uIEUodCxlKXtpZighaShlKSl0aHJvdyBuZXcgRXJyb3IoXCJub1VpU2xpZGVyIChcIitldCtcIik6ICdsaW1pdCcgb3B0aW9uIG11c3QgYmUgbnVtZXJpYy5cIik7aWYodC5saW1pdD10LnNwZWN0cnVtLmdldE1hcmdpbihlKSwhdC5saW1pdHx8dC5oYW5kbGVzPDIpdGhyb3cgbmV3IEVycm9yKFwibm9VaVNsaWRlciAoXCIrZXQrXCIpOiAnbGltaXQnIG9wdGlvbiBpcyBvbmx5IHN1cHBvcnRlZCBvbiBsaW5lYXIgc2xpZGVycyB3aXRoIDIgb3IgbW9yZSBoYW5kbGVzLlwiKX1mdW5jdGlvbiBDKHQsZSl7aWYoIWkoZSkmJiFBcnJheS5pc0FycmF5KGUpKXRocm93IG5ldyBFcnJvcihcIm5vVWlTbGlkZXIgKFwiK2V0K1wiKTogJ3BhZGRpbmcnIG9wdGlvbiBtdXN0IGJlIG51bWVyaWMgb3IgYXJyYXkgb2YgZXhhY3RseSAyIG51bWJlcnMuXCIpO2lmKEFycmF5LmlzQXJyYXkoZSkmJjIhPT1lLmxlbmd0aCYmIWkoZVswXSkmJiFpKGVbMV0pKXRocm93IG5ldyBFcnJvcihcIm5vVWlTbGlkZXIgKFwiK2V0K1wiKTogJ3BhZGRpbmcnIG9wdGlvbiBtdXN0IGJlIG51bWVyaWMgb3IgYXJyYXkgb2YgZXhhY3RseSAyIG51bWJlcnMuXCIpO2lmKDAhPT1lKXtpZihBcnJheS5pc0FycmF5KGUpfHwoZT1bZSxlXSksISh0LnBhZGRpbmc9W3Quc3BlY3RydW0uZ2V0TWFyZ2luKGVbMF0pLHQuc3BlY3RydW0uZ2V0TWFyZ2luKGVbMV0pXSk9PT10LnBhZGRpbmdbMF18fCExPT09dC5wYWRkaW5nWzFdKXRocm93IG5ldyBFcnJvcihcIm5vVWlTbGlkZXIgKFwiK2V0K1wiKTogJ3BhZGRpbmcnIG9wdGlvbiBpcyBvbmx5IHN1cHBvcnRlZCBvbiBsaW5lYXIgc2xpZGVycy5cIik7aWYodC5wYWRkaW5nWzBdPDB8fHQucGFkZGluZ1sxXTwwKXRocm93IG5ldyBFcnJvcihcIm5vVWlTbGlkZXIgKFwiK2V0K1wiKTogJ3BhZGRpbmcnIG9wdGlvbiBtdXN0IGJlIGEgcG9zaXRpdmUgbnVtYmVyKHMpLlwiKTtpZigxMDA8PXQucGFkZGluZ1swXSt0LnBhZGRpbmdbMV0pdGhyb3cgbmV3IEVycm9yKFwibm9VaVNsaWRlciAoXCIrZXQrXCIpOiAncGFkZGluZycgb3B0aW9uIG11c3Qgbm90IGV4Y2VlZCAxMDAlIG9mIHRoZSByYW5nZS5cIil9fWZ1bmN0aW9uIE4odCxlKXtzd2l0Y2goZSl7Y2FzZVwibHRyXCI6dC5kaXI9MDticmVhaztjYXNlXCJydGxcIjp0LmRpcj0xO2JyZWFrO2RlZmF1bHQ6dGhyb3cgbmV3IEVycm9yKFwibm9VaVNsaWRlciAoXCIrZXQrXCIpOiAnZGlyZWN0aW9uJyBvcHRpb24gd2FzIG5vdCByZWNvZ25pemVkLlwiKX19ZnVuY3Rpb24gVSh0LGUpe2lmKFwic3RyaW5nXCIhPXR5cGVvZiBlKXRocm93IG5ldyBFcnJvcihcIm5vVWlTbGlkZXIgKFwiK2V0K1wiKTogJ2JlaGF2aW91cicgbXVzdCBiZSBhIHN0cmluZyBjb250YWluaW5nIG9wdGlvbnMuXCIpO3ZhciByPTA8PWUuaW5kZXhPZihcInRhcFwiKSxuPTA8PWUuaW5kZXhPZihcImRyYWdcIiksaT0wPD1lLmluZGV4T2YoXCJmaXhlZFwiKSxvPTA8PWUuaW5kZXhPZihcInNuYXBcIiksYT0wPD1lLmluZGV4T2YoXCJob3ZlclwiKSxzPTA8PWUuaW5kZXhPZihcInVuY29uc3RyYWluZWRcIik7aWYoaSl7aWYoMiE9PXQuaGFuZGxlcyl0aHJvdyBuZXcgRXJyb3IoXCJub1VpU2xpZGVyIChcIitldCtcIik6ICdmaXhlZCcgYmVoYXZpb3VyIG11c3QgYmUgdXNlZCB3aXRoIDIgaGFuZGxlc1wiKTt5KHQsdC5zdGFydFsxXS10LnN0YXJ0WzBdKX1pZihzJiYodC5tYXJnaW58fHQubGltaXQpKXRocm93IG5ldyBFcnJvcihcIm5vVWlTbGlkZXIgKFwiK2V0K1wiKTogJ3VuY29uc3RyYWluZWQnIGJlaGF2aW91ciBjYW5ub3QgYmUgdXNlZCB3aXRoIG1hcmdpbiBvciBsaW1pdFwiKTt0LmV2ZW50cz17dGFwOnJ8fG8sZHJhZzpuLGZpeGVkOmksc25hcDpvLGhvdmVyOmEsdW5jb25zdHJhaW5lZDpzfX1mdW5jdGlvbiBrKHQsZSl7aWYoITEhPT1lKWlmKCEwPT09ZSl7dC50b29sdGlwcz1bXTtmb3IodmFyIHI9MDtyPHQuaGFuZGxlcztyKyspdC50b29sdGlwcy5wdXNoKCEwKX1lbHNle2lmKHQudG9vbHRpcHM9b3QoZSksdC50b29sdGlwcy5sZW5ndGghPT10LmhhbmRsZXMpdGhyb3cgbmV3IEVycm9yKFwibm9VaVNsaWRlciAoXCIrZXQrXCIpOiBtdXN0IHBhc3MgYSBmb3JtYXR0ZXIgZm9yIGFsbCBoYW5kbGVzLlwiKTt0LnRvb2x0aXBzLmZvckVhY2goZnVuY3Rpb24odCl7aWYoXCJib29sZWFuXCIhPXR5cGVvZiB0JiYoXCJvYmplY3RcIiE9dHlwZW9mIHR8fFwiZnVuY3Rpb25cIiE9dHlwZW9mIHQudG8pKXRocm93IG5ldyBFcnJvcihcIm5vVWlTbGlkZXIgKFwiK2V0K1wiKTogJ3Rvb2x0aXBzJyBtdXN0IGJlIHBhc3NlZCBhIGZvcm1hdHRlciBvciAnZmFsc2UnLlwiKX0pfX1mdW5jdGlvbiBQKHQsZSl7ZCh0LmFyaWFGb3JtYXQ9ZSl9ZnVuY3Rpb24gQSh0LGUpe2QodC5mb3JtYXQ9ZSl9ZnVuY3Rpb24gTSh0LGUpe2lmKFwiYm9vbGVhblwiIT10eXBlb2YodC5rZXlib2FyZFN1cHBvcnQ9ZSkpdGhyb3cgbmV3IEVycm9yKFwibm9VaVNsaWRlciAoXCIrZXQrXCIpOiAna2V5Ym9hcmRTdXBwb3J0JyBvcHRpb24gbXVzdCBiZSBhIGJvb2xlYW4uXCIpfWZ1bmN0aW9uIFYodCxlKXt0LmRvY3VtZW50RWxlbWVudD1lfWZ1bmN0aW9uIE8odCxlKXtpZihcInN0cmluZ1wiIT10eXBlb2YgZSYmITEhPT1lKXRocm93IG5ldyBFcnJvcihcIm5vVWlTbGlkZXIgKFwiK2V0K1wiKTogJ2Nzc1ByZWZpeCcgbXVzdCBiZSBhIHN0cmluZyBvciBgZmFsc2VgLlwiKTt0LmNzc1ByZWZpeD1lfWZ1bmN0aW9uIEwodCxlKXtpZihcIm9iamVjdFwiIT10eXBlb2YgZSl0aHJvdyBuZXcgRXJyb3IoXCJub1VpU2xpZGVyIChcIitldCtcIik6ICdjc3NDbGFzc2VzJyBtdXN0IGJlIGFuIG9iamVjdC5cIik7aWYoXCJzdHJpbmdcIj09dHlwZW9mIHQuY3NzUHJlZml4KWZvcih2YXIgciBpbiB0LmNzc0NsYXNzZXM9e30sZSllLmhhc093blByb3BlcnR5KHIpJiYodC5jc3NDbGFzc2VzW3JdPXQuY3NzUHJlZml4K2Vbcl0pO2Vsc2UgdC5jc3NDbGFzc2VzPWV9ZnVuY3Rpb24gdXQoZSl7dmFyIHI9e21hcmdpbjowLGxpbWl0OjAscGFkZGluZzowLGFuaW1hdGU6ITAsYW5pbWF0aW9uRHVyYXRpb246MzAwLGFyaWFGb3JtYXQ6dSxmb3JtYXQ6dX0sbj17c3RlcDp7cjohMSx0Omh9LHN0YXJ0OntyOiEwLHQ6Z30sY29ubmVjdDp7cjohMCx0Ond9LGRpcmVjdGlvbjp7cjohMCx0Ok59LHNuYXA6e3I6ITEsdDp2fSxhbmltYXRlOntyOiExLHQ6Yn0sYW5pbWF0aW9uRHVyYXRpb246e3I6ITEsdDpTfSxyYW5nZTp7cjohMCx0Om19LG9yaWVudGF0aW9uOntyOiExLHQ6eH0sbWFyZ2luOntyOiExLHQ6eX0sbGltaXQ6e3I6ITEsdDpFfSxwYWRkaW5nOntyOiExLHQ6Q30sYmVoYXZpb3VyOntyOiEwLHQ6VX0sYXJpYUZvcm1hdDp7cjohMSx0OlB9LGZvcm1hdDp7cjohMSx0OkF9LHRvb2x0aXBzOntyOiExLHQ6a30sa2V5Ym9hcmRTdXBwb3J0OntyOiEwLHQ6TX0sZG9jdW1lbnRFbGVtZW50OntyOiExLHQ6Vn0sY3NzUHJlZml4OntyOiEwLHQ6T30sY3NzQ2xhc3Nlczp7cjohMCx0Okx9fSxpPXtjb25uZWN0OiExLGRpcmVjdGlvbjpcImx0clwiLGJlaGF2aW91cjpcInRhcFwiLG9yaWVudGF0aW9uOlwiaG9yaXpvbnRhbFwiLGtleWJvYXJkU3VwcG9ydDohMCxjc3NQcmVmaXg6XCJub1VpLVwiLGNzc0NsYXNzZXM6e3RhcmdldDpcInRhcmdldFwiLGJhc2U6XCJiYXNlXCIsb3JpZ2luOlwib3JpZ2luXCIsaGFuZGxlOlwiaGFuZGxlXCIsaGFuZGxlTG93ZXI6XCJoYW5kbGUtbG93ZXJcIixoYW5kbGVVcHBlcjpcImhhbmRsZS11cHBlclwiLGhvcml6b250YWw6XCJob3Jpem9udGFsXCIsdmVydGljYWw6XCJ2ZXJ0aWNhbFwiLGJhY2tncm91bmQ6XCJiYWNrZ3JvdW5kXCIsY29ubmVjdDpcImNvbm5lY3RcIixjb25uZWN0czpcImNvbm5lY3RzXCIsbHRyOlwibHRyXCIscnRsOlwicnRsXCIsZHJhZ2dhYmxlOlwiZHJhZ2dhYmxlXCIsZHJhZzpcInN0YXRlLWRyYWdcIix0YXA6XCJzdGF0ZS10YXBcIixhY3RpdmU6XCJhY3RpdmVcIix0b29sdGlwOlwidG9vbHRpcFwiLHBpcHM6XCJwaXBzXCIscGlwc0hvcml6b250YWw6XCJwaXBzLWhvcml6b250YWxcIixwaXBzVmVydGljYWw6XCJwaXBzLXZlcnRpY2FsXCIsbWFya2VyOlwibWFya2VyXCIsbWFya2VySG9yaXpvbnRhbDpcIm1hcmtlci1ob3Jpem9udGFsXCIsbWFya2VyVmVydGljYWw6XCJtYXJrZXItdmVydGljYWxcIixtYXJrZXJOb3JtYWw6XCJtYXJrZXItbm9ybWFsXCIsbWFya2VyTGFyZ2U6XCJtYXJrZXItbGFyZ2VcIixtYXJrZXJTdWI6XCJtYXJrZXItc3ViXCIsdmFsdWU6XCJ2YWx1ZVwiLHZhbHVlSG9yaXpvbnRhbDpcInZhbHVlLWhvcml6b250YWxcIix2YWx1ZVZlcnRpY2FsOlwidmFsdWUtdmVydGljYWxcIix2YWx1ZU5vcm1hbDpcInZhbHVlLW5vcm1hbFwiLHZhbHVlTGFyZ2U6XCJ2YWx1ZS1sYXJnZVwiLHZhbHVlU3ViOlwidmFsdWUtc3ViXCJ9fTtlLmZvcm1hdCYmIWUuYXJpYUZvcm1hdCYmKGUuYXJpYUZvcm1hdD1lLmZvcm1hdCksT2JqZWN0LmtleXMobikuZm9yRWFjaChmdW5jdGlvbih0KXtpZighcyhlW3RdKSYmdm9pZCAwPT09aVt0XSl7aWYoblt0XS5yKXRocm93IG5ldyBFcnJvcihcIm5vVWlTbGlkZXIgKFwiK2V0K1wiKTogJ1wiK3QrXCInIGlzIHJlcXVpcmVkLlwiKTtyZXR1cm4hMH1uW3RdLnQocixzKGVbdF0pP2VbdF06aVt0XSl9KSxyLnBpcHM9ZS5waXBzO3ZhciB0PWRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiksbz12b2lkIDAhPT10LnN0eWxlLm1zVHJhbnNmb3JtLGE9dm9pZCAwIT09dC5zdHlsZS50cmFuc2Zvcm07ci50cmFuc2Zvcm1SdWxlPWE/XCJ0cmFuc2Zvcm1cIjpvP1wibXNUcmFuc2Zvcm1cIjpcIndlYmtpdFRyYW5zZm9ybVwiO3JldHVybiByLnN0eWxlPVtbXCJsZWZ0XCIsXCJ0b3BcIl0sW1wicmlnaHRcIixcImJvdHRvbVwiXV1bci5kaXJdW3Iub3J0XSxyfWZ1bmN0aW9uIHoodCxmLG8pe3ZhciBsLHUscyxhLGMsZSxwLGksZD13aW5kb3cubmF2aWdhdG9yLnBvaW50ZXJFbmFibGVkP3tzdGFydDpcInBvaW50ZXJkb3duXCIsbW92ZTpcInBvaW50ZXJtb3ZlXCIsZW5kOlwicG9pbnRlcnVwXCJ9OndpbmRvdy5uYXZpZ2F0b3IubXNQb2ludGVyRW5hYmxlZD97c3RhcnQ6XCJNU1BvaW50ZXJEb3duXCIsbW92ZTpcIk1TUG9pbnRlck1vdmVcIixlbmQ6XCJNU1BvaW50ZXJVcFwifTp7c3RhcnQ6XCJtb3VzZWRvd24gdG91Y2hzdGFydFwiLG1vdmU6XCJtb3VzZW1vdmUgdG91Y2htb3ZlXCIsZW5kOlwibW91c2V1cCB0b3VjaGVuZFwifSxoPXdpbmRvdy5DU1MmJkNTUy5zdXBwb3J0cyYmQ1NTLnN1cHBvcnRzKFwidG91Y2gtYWN0aW9uXCIsXCJub25lXCIpJiZmdW5jdGlvbigpe3ZhciB0PSExO3RyeXt2YXIgZT1PYmplY3QuZGVmaW5lUHJvcGVydHkoe30sXCJwYXNzaXZlXCIse2dldDpmdW5jdGlvbigpe3Q9ITB9fSk7d2luZG93LmFkZEV2ZW50TGlzdGVuZXIoXCJ0ZXN0XCIsbnVsbCxlKX1jYXRjaCh0KXt9cmV0dXJuIHR9KCkseT10LG09W10sZz1bXSx2PTAsRT1mLnNwZWN0cnVtLGI9W10sUz17fSx3PXQub3duZXJEb2N1bWVudCx4PWYuZG9jdW1lbnRFbGVtZW50fHx3LmRvY3VtZW50RWxlbWVudCxDPXcuYm9keSxOPS0xLFU9MCxrPTEsUD0yLEE9XCJydGxcIj09PXcuZGlyfHwxPT09Zi5vcnQ/MDoxMDA7ZnVuY3Rpb24gTSh0LGUpe3ZhciByPXcuY3JlYXRlRWxlbWVudChcImRpdlwiKTtyZXR1cm4gZSYmYXQocixlKSx0LmFwcGVuZENoaWxkKHIpLHJ9ZnVuY3Rpb24gVih0LGUpe3JldHVybiEhZSYmTSh0LGYuY3NzQ2xhc3Nlcy5jb25uZWN0KX1mdW5jdGlvbiByKHQsZSl7cmV0dXJuISFmLnRvb2x0aXBzW2VdJiZNKHQuZmlyc3RDaGlsZCxmLmNzc0NsYXNzZXMudG9vbHRpcCl9ZnVuY3Rpb24gTyhlLGksbyl7dmFyIGE9dy5jcmVhdGVFbGVtZW50KFwiZGl2XCIpLHM9W107c1tVXT1mLmNzc0NsYXNzZXMudmFsdWVOb3JtYWwsc1trXT1mLmNzc0NsYXNzZXMudmFsdWVMYXJnZSxzW1BdPWYuY3NzQ2xhc3Nlcy52YWx1ZVN1Yjt2YXIgbD1bXTtsW1VdPWYuY3NzQ2xhc3Nlcy5tYXJrZXJOb3JtYWwsbFtrXT1mLmNzc0NsYXNzZXMubWFya2VyTGFyZ2UsbFtQXT1mLmNzc0NsYXNzZXMubWFya2VyU3ViO3ZhciB1PVtmLmNzc0NsYXNzZXMudmFsdWVIb3Jpem9udGFsLGYuY3NzQ2xhc3Nlcy52YWx1ZVZlcnRpY2FsXSxjPVtmLmNzc0NsYXNzZXMubWFya2VySG9yaXpvbnRhbCxmLmNzc0NsYXNzZXMubWFya2VyVmVydGljYWxdO2Z1bmN0aW9uIHAodCxlKXt2YXIgcj1lPT09Zi5jc3NDbGFzc2VzLnZhbHVlLG49cj9zOmw7cmV0dXJuIGUrXCIgXCIrKHI/dTpjKVtmLm9ydF0rXCIgXCIrblt0XX1yZXR1cm4gYXQoYSxmLmNzc0NsYXNzZXMucGlwcyksYXQoYSwwPT09Zi5vcnQ/Zi5jc3NDbGFzc2VzLnBpcHNIb3Jpem9udGFsOmYuY3NzQ2xhc3Nlcy5waXBzVmVydGljYWwpLE9iamVjdC5rZXlzKGUpLmZvckVhY2goZnVuY3Rpb24odCl7IWZ1bmN0aW9uKHQsZSxyKXtpZigocj1pP2koZSxyKTpyKSE9PU4pe3ZhciBuPU0oYSwhMSk7bi5jbGFzc05hbWU9cChyLGYuY3NzQ2xhc3Nlcy5tYXJrZXIpLG4uc3R5bGVbZi5zdHlsZV09dCtcIiVcIixVPHImJigobj1NKGEsITEpKS5jbGFzc05hbWU9cChyLGYuY3NzQ2xhc3Nlcy52YWx1ZSksbi5zZXRBdHRyaWJ1dGUoXCJkYXRhLXZhbHVlXCIsZSksbi5zdHlsZVtmLnN0eWxlXT10K1wiJVwiLG4uaW5uZXJIVE1MPW8udG8oZSkpfX0odCxlW3RdWzBdLGVbdF1bMV0pfSksYX1mdW5jdGlvbiBMKCl7dmFyIHQ7YyYmKCh0PWMpLnBhcmVudEVsZW1lbnQucmVtb3ZlQ2hpbGQodCksYz1udWxsKX1mdW5jdGlvbiB6KHQpe0woKTt2YXIgbSxnLHYsYixlLHIsUyx3LHgsbj10Lm1vZGUsaT10LmRlbnNpdHl8fDEsbz10LmZpbHRlcnx8ITEsYT1mdW5jdGlvbih0LGUscil7aWYoXCJyYW5nZVwiPT09dHx8XCJzdGVwc1wiPT09dClyZXR1cm4gRS54VmFsO2lmKFwiY291bnRcIj09PXQpe2lmKGU8Mil0aHJvdyBuZXcgRXJyb3IoXCJub1VpU2xpZGVyIChcIitldCtcIik6ICd2YWx1ZXMnICg+PSAyKSByZXF1aXJlZCBmb3IgbW9kZSAnY291bnQnLlwiKTt2YXIgbj1lLTEsaT0xMDAvbjtmb3IoZT1bXTtuLS07KWVbbl09bippO2UucHVzaCgxMDApLHQ9XCJwb3NpdGlvbnNcIn1yZXR1cm5cInBvc2l0aW9uc1wiPT09dD9lLm1hcChmdW5jdGlvbih0KXtyZXR1cm4gRS5mcm9tU3RlcHBpbmcocj9FLmdldFN0ZXAodCk6dCl9KTpcInZhbHVlc1wiPT09dD9yP2UubWFwKGZ1bmN0aW9uKHQpe3JldHVybiBFLmZyb21TdGVwcGluZyhFLmdldFN0ZXAoRS50b1N0ZXBwaW5nKHQpKSl9KTplOnZvaWQgMH0obix0LnZhbHVlc3x8ITEsdC5zdGVwcGVkfHwhMSkscz0obT1pLGc9bix2PWEsYj17fSxlPUUueFZhbFswXSxyPUUueFZhbFtFLnhWYWwubGVuZ3RoLTFdLHc9Uz0hMSx4PTAsKHY9di5zbGljZSgpLnNvcnQoZnVuY3Rpb24odCxlKXtyZXR1cm4gdC1lfSkuZmlsdGVyKGZ1bmN0aW9uKHQpe3JldHVybiF0aGlzW3RdJiYodGhpc1t0XT0hMCl9LHt9KSlbMF0hPT1lJiYodi51bnNoaWZ0KGUpLFM9ITApLHZbdi5sZW5ndGgtMV0hPT1yJiYodi5wdXNoKHIpLHc9ITApLHYuZm9yRWFjaChmdW5jdGlvbih0LGUpe3ZhciByLG4saSxvLGEscyxsLHUsYyxwLGY9dCxkPXZbZSsxXSxoPVwic3RlcHNcIj09PWc7aWYoaCYmKHI9RS54TnVtU3RlcHNbZV0pLHJ8fChyPWQtZiksITEhPT1mJiZ2b2lkIDAhPT1kKWZvcihyPU1hdGgubWF4KHIsMWUtNyksbj1mO248PWQ7bj0obityKS50b0ZpeGVkKDcpLzEpe2Zvcih1PShhPShvPUUudG9TdGVwcGluZyhuKSkteCkvbSxwPWEvKGM9TWF0aC5yb3VuZCh1KSksaT0xO2k8PWM7aSs9MSliWyhzPXgraSpwKS50b0ZpeGVkKDUpXT1bRS5mcm9tU3RlcHBpbmcocyksMF07bD0tMTx2LmluZGV4T2Yobik/azpoP1A6VSwhZSYmUyYmKGw9MCksbj09PWQmJnd8fChiW28udG9GaXhlZCg1KV09W24sbF0pLHg9b319KSxiKSxsPXQuZm9ybWF0fHx7dG86TWF0aC5yb3VuZH07cmV0dXJuIGM9eS5hcHBlbmRDaGlsZChPKHMsbyxsKSl9ZnVuY3Rpb24gaigpe3ZhciB0PWwuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCksZT1cIm9mZnNldFwiK1tcIldpZHRoXCIsXCJIZWlnaHRcIl1bZi5vcnRdO3JldHVybiAwPT09Zi5vcnQ/dC53aWR0aHx8bFtlXTp0LmhlaWdodHx8bFtlXX1mdW5jdGlvbiBGKG4saSxvLGEpe3ZhciBlPWZ1bmN0aW9uKHQpe3JldHVybiEhKHQ9ZnVuY3Rpb24odCxlLHIpe3ZhciBuLGksbz0wPT09dC50eXBlLmluZGV4T2YoXCJ0b3VjaFwiKSxhPTA9PT10LnR5cGUuaW5kZXhPZihcIm1vdXNlXCIpLHM9MD09PXQudHlwZS5pbmRleE9mKFwicG9pbnRlclwiKTswPT09dC50eXBlLmluZGV4T2YoXCJNU1BvaW50ZXJcIikmJihzPSEwKTtpZihvKXt2YXIgbD1mdW5jdGlvbih0KXtyZXR1cm4gdC50YXJnZXQ9PT1yfHxyLmNvbnRhaW5zKHQudGFyZ2V0KX07aWYoXCJ0b3VjaHN0YXJ0XCI9PT10LnR5cGUpe3ZhciB1PUFycmF5LnByb3RvdHlwZS5maWx0ZXIuY2FsbCh0LnRvdWNoZXMsbCk7aWYoMTx1Lmxlbmd0aClyZXR1cm4hMTtuPXVbMF0ucGFnZVgsaT11WzBdLnBhZ2VZfWVsc2V7dmFyIGM9QXJyYXkucHJvdG90eXBlLmZpbmQuY2FsbCh0LmNoYW5nZWRUb3VjaGVzLGwpO2lmKCFjKXJldHVybiExO249Yy5wYWdlWCxpPWMucGFnZVl9fWU9ZXx8bHQodyksKGF8fHMpJiYobj10LmNsaWVudFgrZS54LGk9dC5jbGllbnRZK2UueSk7cmV0dXJuIHQucGFnZU9mZnNldD1lLHQucG9pbnRzPVtuLGldLHQuY3Vyc29yPWF8fHMsdH0odCxhLnBhZ2VPZmZzZXQsYS50YXJnZXR8fGkpKSYmKCEoeS5oYXNBdHRyaWJ1dGUoXCJkaXNhYmxlZFwiKSYmIWEuZG9Ob3RSZWplY3QpJiYoZT15LHI9Zi5jc3NDbGFzc2VzLnRhcCwhKChlLmNsYXNzTGlzdD9lLmNsYXNzTGlzdC5jb250YWlucyhyKTpuZXcgUmVnRXhwKFwiXFxcXGJcIityK1wiXFxcXGJcIikudGVzdChlLmNsYXNzTmFtZSkpJiYhYS5kb05vdFJlamVjdCkmJighKG49PT1kLnN0YXJ0JiZ2b2lkIDAhPT10LmJ1dHRvbnMmJjE8dC5idXR0b25zKSYmKCghYS5ob3Zlcnx8IXQuYnV0dG9ucykmJihofHx0LnByZXZlbnREZWZhdWx0KCksdC5jYWxjUG9pbnQ9dC5wb2ludHNbZi5vcnRdLHZvaWQgbyh0LGEpKSkpKSk7dmFyIGUscn0scj1bXTtyZXR1cm4gbi5zcGxpdChcIiBcIikuZm9yRWFjaChmdW5jdGlvbih0KXtpLmFkZEV2ZW50TGlzdGVuZXIodCxlLCEhaCYme3Bhc3NpdmU6ITB9KSxyLnB1c2goW3QsZV0pfSkscn1mdW5jdGlvbiBIKHQpe3ZhciBlLHIsbixpLG8sYSxzPTEwMCoodC0oZT1sLHI9Zi5vcnQsbj1lLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLGk9ZS5vd25lckRvY3VtZW50LG89aS5kb2N1bWVudEVsZW1lbnQsYT1sdChpKSwvd2Via2l0LipDaHJvbWUuKk1vYmlsZS9pLnRlc3QobmF2aWdhdG9yLnVzZXJBZ2VudCkmJihhLng9MCkscj9uLnRvcCthLnktby5jbGllbnRUb3A6bi5sZWZ0K2EueC1vLmNsaWVudExlZnQpKS9qKCk7cmV0dXJuIHM9aXQocyksZi5kaXI/MTAwLXM6c31mdW5jdGlvbiBEKHQsZSl7XCJtb3VzZW91dFwiPT09dC50eXBlJiZcIkhUTUxcIj09PXQudGFyZ2V0Lm5vZGVOYW1lJiZudWxsPT09dC5yZWxhdGVkVGFyZ2V0JiZSKHQsZSl9ZnVuY3Rpb24gVCh0LGUpe2lmKC0xPT09bmF2aWdhdG9yLmFwcFZlcnNpb24uaW5kZXhPZihcIk1TSUUgOVwiKSYmMD09PXQuYnV0dG9ucyYmMCE9PWUuYnV0dG9uc1Byb3BlcnR5KXJldHVybiBSKHQsZSk7dmFyIHI9KGYuZGlyPy0xOjEpKih0LmNhbGNQb2ludC1lLnN0YXJ0Q2FsY1BvaW50KTskKDA8ciwxMDAqci9lLmJhc2VTaXplLGUubG9jYXRpb25zLGUuaGFuZGxlTnVtYmVycyl9ZnVuY3Rpb24gUih0LGUpe2UuaGFuZGxlJiYoc3QoZS5oYW5kbGUsZi5jc3NDbGFzc2VzLmFjdGl2ZSksdi09MSksZS5saXN0ZW5lcnMuZm9yRWFjaChmdW5jdGlvbih0KXt4LnJlbW92ZUV2ZW50TGlzdGVuZXIodFswXSx0WzFdKX0pLDA9PT12JiYoc3QoeSxmLmNzc0NsYXNzZXMuZHJhZyksSigpLHQuY3Vyc29yJiYoQy5zdHlsZS5jdXJzb3I9XCJcIixDLnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJzZWxlY3RzdGFydFwiLHJ0KSkpLGUuaGFuZGxlTnVtYmVycy5mb3JFYWNoKGZ1bmN0aW9uKHQpe1koXCJjaGFuZ2VcIix0KSxZKFwic2V0XCIsdCksWShcImVuZFwiLHQpfSl9ZnVuY3Rpb24gcSh0LGUpe3ZhciByO2lmKDE9PT1lLmhhbmRsZU51bWJlcnMubGVuZ3RoKXt2YXIgbj11W2UuaGFuZGxlTnVtYmVyc1swXV07aWYobi5oYXNBdHRyaWJ1dGUoXCJkaXNhYmxlZFwiKSlyZXR1cm4hMTtyPW4uY2hpbGRyZW5bMF0sdis9MSxhdChyLGYuY3NzQ2xhc3Nlcy5hY3RpdmUpfXQuc3RvcFByb3BhZ2F0aW9uKCk7dmFyIGk9W10sbz1GKGQubW92ZSx4LFQse3RhcmdldDp0LnRhcmdldCxoYW5kbGU6cixsaXN0ZW5lcnM6aSxzdGFydENhbGNQb2ludDp0LmNhbGNQb2ludCxiYXNlU2l6ZTpqKCkscGFnZU9mZnNldDp0LnBhZ2VPZmZzZXQsaGFuZGxlTnVtYmVyczplLmhhbmRsZU51bWJlcnMsYnV0dG9uc1Byb3BlcnR5OnQuYnV0dG9ucyxsb2NhdGlvbnM6bS5zbGljZSgpfSksYT1GKGQuZW5kLHgsUix7dGFyZ2V0OnQudGFyZ2V0LGhhbmRsZTpyLGxpc3RlbmVyczppLGRvTm90UmVqZWN0OiEwLGhhbmRsZU51bWJlcnM6ZS5oYW5kbGVOdW1iZXJzfSkscz1GKFwibW91c2VvdXRcIix4LEQse3RhcmdldDp0LnRhcmdldCxoYW5kbGU6cixsaXN0ZW5lcnM6aSxkb05vdFJlamVjdDohMCxoYW5kbGVOdW1iZXJzOmUuaGFuZGxlTnVtYmVyc30pO2kucHVzaC5hcHBseShpLG8uY29uY2F0KGEscykpLHQuY3Vyc29yJiYoQy5zdHlsZS5jdXJzb3I9Z2V0Q29tcHV0ZWRTdHlsZSh0LnRhcmdldCkuY3Vyc29yLDE8dS5sZW5ndGgmJmF0KHksZi5jc3NDbGFzc2VzLmRyYWcpLEMuYWRkRXZlbnRMaXN0ZW5lcihcInNlbGVjdHN0YXJ0XCIscnQsITEpKSxlLmhhbmRsZU51bWJlcnMuZm9yRWFjaChmdW5jdGlvbih0KXtZKFwic3RhcnRcIix0KX0pfWZ1bmN0aW9uIG4odCl7dC5zdG9wUHJvcGFnYXRpb24oKTt2YXIgbixpLG8sZT1IKHQuY2FsY1BvaW50KSxyPShuPWUsbz0hKGk9MTAwKSx1LmZvckVhY2goZnVuY3Rpb24odCxlKXtpZighdC5oYXNBdHRyaWJ1dGUoXCJkaXNhYmxlZFwiKSl7dmFyIHI9TWF0aC5hYnMobVtlXS1uKTsocjxpfHwxMDA9PT1yJiYxMDA9PT1pKSYmKG89ZSxpPXIpfX0pLG8pO2lmKCExPT09cilyZXR1cm4hMTtmLmV2ZW50cy5zbmFwfHxudCh5LGYuY3NzQ2xhc3Nlcy50YXAsZi5hbmltYXRpb25EdXJhdGlvbiksSyhyLGUsITAsITApLEooKSxZKFwic2xpZGVcIixyLCEwKSxZKFwidXBkYXRlXCIsciwhMCksWShcImNoYW5nZVwiLHIsITApLFkoXCJzZXRcIixyLCEwKSxmLmV2ZW50cy5zbmFwJiZxKHQse2hhbmRsZU51bWJlcnM6W3JdfSl9ZnVuY3Rpb24gQih0KXt2YXIgZT1IKHQuY2FsY1BvaW50KSxyPUUuZ2V0U3RlcChlKSxuPUUuZnJvbVN0ZXBwaW5nKHIpO09iamVjdC5rZXlzKFMpLmZvckVhY2goZnVuY3Rpb24odCl7XCJob3ZlclwiPT09dC5zcGxpdChcIi5cIilbMF0mJlNbdF0uZm9yRWFjaChmdW5jdGlvbih0KXt0LmNhbGwoYSxuKX0pfSl9ZnVuY3Rpb24gWCh0LGUpe1NbdF09U1t0XXx8W10sU1t0XS5wdXNoKGUpLFwidXBkYXRlXCI9PT10LnNwbGl0KFwiLlwiKVswXSYmdS5mb3JFYWNoKGZ1bmN0aW9uKHQsZSl7WShcInVwZGF0ZVwiLGUpfSl9ZnVuY3Rpb24gWShyLG4saSl7T2JqZWN0LmtleXMoUykuZm9yRWFjaChmdW5jdGlvbih0KXt2YXIgZT10LnNwbGl0KFwiLlwiKVswXTtyPT09ZSYmU1t0XS5mb3JFYWNoKGZ1bmN0aW9uKHQpe3QuY2FsbChhLGIubWFwKGYuZm9ybWF0LnRvKSxuLGIuc2xpY2UoKSxpfHwhMSxtLnNsaWNlKCkpfSl9KX1mdW5jdGlvbiBfKHQpe3JldHVybiB0K1wiJVwifWZ1bmN0aW9uIEkodCxlLHIsbixpLG8pe3JldHVybiAxPHUubGVuZ3RoJiYhZi5ldmVudHMudW5jb25zdHJhaW5lZCYmKG4mJjA8ZSYmKHI9TWF0aC5tYXgocix0W2UtMV0rZi5tYXJnaW4pKSxpJiZlPHUubGVuZ3RoLTEmJihyPU1hdGgubWluKHIsdFtlKzFdLWYubWFyZ2luKSkpLDE8dS5sZW5ndGgmJmYubGltaXQmJihuJiYwPGUmJihyPU1hdGgubWluKHIsdFtlLTFdK2YubGltaXQpKSxpJiZlPHUubGVuZ3RoLTEmJihyPU1hdGgubWF4KHIsdFtlKzFdLWYubGltaXQpKSksZi5wYWRkaW5nJiYoMD09PWUmJihyPU1hdGgubWF4KHIsZi5wYWRkaW5nWzBdKSksZT09PXUubGVuZ3RoLTEmJihyPU1hdGgubWluKHIsMTAwLWYucGFkZGluZ1sxXSkpKSwhKChyPWl0KHI9RS5nZXRTdGVwKHIpKSk9PT10W2VdJiYhbykmJnJ9ZnVuY3Rpb24gVyh0LGUpe3ZhciByPWYub3J0O3JldHVybihyP2U6dCkrXCIsIFwiKyhyP3Q6ZSl9ZnVuY3Rpb24gJCh0LG4scixlKXt2YXIgaT1yLnNsaWNlKCksbz1bIXQsdF0sYT1bdCwhdF07ZT1lLnNsaWNlKCksdCYmZS5yZXZlcnNlKCksMTxlLmxlbmd0aD9lLmZvckVhY2goZnVuY3Rpb24odCxlKXt2YXIgcj1JKGksdCxpW3RdK24sb1tlXSxhW2VdLCExKTshMT09PXI/bj0wOihuPXItaVt0XSxpW3RdPXIpfSk6bz1hPVshMF07dmFyIHM9ITE7ZS5mb3JFYWNoKGZ1bmN0aW9uKHQsZSl7cz1LKHQsclt0XStuLG9bZV0sYVtlXSl8fHN9KSxzJiZlLmZvckVhY2goZnVuY3Rpb24odCl7WShcInVwZGF0ZVwiLHQpLFkoXCJzbGlkZVwiLHQpfSl9ZnVuY3Rpb24gRyh0LGUpe3JldHVybiBmLmRpcj8xMDAtdC1lOnR9ZnVuY3Rpb24gSigpe2cuZm9yRWFjaChmdW5jdGlvbih0KXt2YXIgZT01MDxtW3RdPy0xOjEscj0zKyh1Lmxlbmd0aCtlKnQpO3VbdF0uc3R5bGUuekluZGV4PXJ9KX1mdW5jdGlvbiBLKHQsZSxyLG4pe3JldHVybiExIT09KGU9SShtLHQsZSxyLG4sITEpKSYmKGZ1bmN0aW9uKHQsZSl7bVt0XT1lLGJbdF09RS5mcm9tU3RlcHBpbmcoZSk7dmFyIHI9XCJ0cmFuc2xhdGUoXCIrVyhfKEcoZSwwKS1BKSxcIjBcIikrXCIpXCI7dVt0XS5zdHlsZVtmLnRyYW5zZm9ybVJ1bGVdPXIsUSh0KSxRKHQrMSl9KHQsZSksITApfWZ1bmN0aW9uIFEodCl7aWYoc1t0XSl7dmFyIGU9MCxyPTEwMDswIT09dCYmKGU9bVt0LTFdKSx0IT09cy5sZW5ndGgtMSYmKHI9bVt0XSk7dmFyIG49ci1lLGk9XCJ0cmFuc2xhdGUoXCIrVyhfKEcoZSxuKSksXCIwXCIpK1wiKVwiLG89XCJzY2FsZShcIitXKG4vMTAwLFwiMVwiKStcIilcIjtzW3RdLnN0eWxlW2YudHJhbnNmb3JtUnVsZV09aStcIiBcIitvfX1mdW5jdGlvbiBaKHQsZSl7dmFyIG49b3QodCkscj12b2lkIDA9PT1tWzBdO2U9dm9pZCAwPT09ZXx8ISFlLGYuYW5pbWF0ZSYmIXImJm50KHksZi5jc3NDbGFzc2VzLnRhcCxmLmFuaW1hdGlvbkR1cmF0aW9uKSxnLmZvckVhY2goZnVuY3Rpb24odCl7dmFyIGUscjtLKHQsKGU9blt0XSxyPXQsbnVsbD09PWV8fCExPT09ZXx8dm9pZCAwPT09ZT9tW3JdOihcIm51bWJlclwiPT10eXBlb2YgZSYmKGU9U3RyaW5nKGUpKSxlPWYuZm9ybWF0LmZyb20oZSksITE9PT0oZT1FLnRvU3RlcHBpbmcoZSkpfHxpc05hTihlKT9tW3JdOmUpKSwhMCwhMSl9KSxnLmZvckVhY2goZnVuY3Rpb24odCl7Syh0LG1bdF0sITAsITApfSksSigpLGcuZm9yRWFjaChmdW5jdGlvbih0KXtZKFwidXBkYXRlXCIsdCksbnVsbCE9PW5bdF0mJmUmJlkoXCJzZXRcIix0KX0pfWZ1bmN0aW9uIHR0KCl7dmFyIHQ9Yi5tYXAoZi5mb3JtYXQudG8pO3JldHVybiAxPT09dC5sZW5ndGg/dFswXTp0fXJldHVybiBhdChlPXksZi5jc3NDbGFzc2VzLnRhcmdldCksMD09PWYuZGlyP2F0KGUsZi5jc3NDbGFzc2VzLmx0cik6YXQoZSxmLmNzc0NsYXNzZXMucnRsKSwwPT09Zi5vcnQ/YXQoZSxmLmNzc0NsYXNzZXMuaG9yaXpvbnRhbCk6YXQoZSxmLmNzc0NsYXNzZXMudmVydGljYWwpLGw9TShlLGYuY3NzQ2xhc3Nlcy5iYXNlKSxmdW5jdGlvbih0LGUpe3ZhciByLG4saSxvPU0oZSxmLmNzc0NsYXNzZXMuY29ubmVjdHMpO3U9W10sKHM9W10pLnB1c2goVihvLHRbMF0pKTtmb3IodmFyIGE9MDthPGYuaGFuZGxlczthKyspdS5wdXNoKChyPWEsaT12b2lkIDAsbj1NKGUsZi5jc3NDbGFzc2VzLm9yaWdpbiksKGk9TShuLGYuY3NzQ2xhc3Nlcy5oYW5kbGUpKS5zZXRBdHRyaWJ1dGUoXCJkYXRhLWhhbmRsZVwiLHIpLGYua2V5Ym9hcmRTdXBwb3J0JiZpLnNldEF0dHJpYnV0ZShcInRhYmluZGV4XCIsXCIwXCIpLGkuc2V0QXR0cmlidXRlKFwicm9sZVwiLFwic2xpZGVyXCIpLGkuc2V0QXR0cmlidXRlKFwiYXJpYS1vcmllbnRhdGlvblwiLGYub3J0P1widmVydGljYWxcIjpcImhvcml6b250YWxcIiksMD09PXI/YXQoaSxmLmNzc0NsYXNzZXMuaGFuZGxlTG93ZXIpOnI9PT1mLmhhbmRsZXMtMSYmYXQoaSxmLmNzc0NsYXNzZXMuaGFuZGxlVXBwZXIpLG4pKSxnW2FdPWEscy5wdXNoKFYobyx0W2ErMV0pKX0oZi5jb25uZWN0LGwpLChwPWYuZXZlbnRzKS5maXhlZHx8dS5mb3JFYWNoKGZ1bmN0aW9uKHQsZSl7RihkLnN0YXJ0LHQuY2hpbGRyZW5bMF0scSx7aGFuZGxlTnVtYmVyczpbZV19KX0pLHAudGFwJiZGKGQuc3RhcnQsbCxuLHt9KSxwLmhvdmVyJiZGKGQubW92ZSxsLEIse2hvdmVyOiEwfSkscC5kcmFnJiZzLmZvckVhY2goZnVuY3Rpb24odCxlKXtpZighMSE9PXQmJjAhPT1lJiZlIT09cy5sZW5ndGgtMSl7dmFyIHI9dVtlLTFdLG49dVtlXSxpPVt0XTthdCh0LGYuY3NzQ2xhc3Nlcy5kcmFnZ2FibGUpLHAuZml4ZWQmJihpLnB1c2goci5jaGlsZHJlblswXSksaS5wdXNoKG4uY2hpbGRyZW5bMF0pKSxpLmZvckVhY2goZnVuY3Rpb24odCl7RihkLnN0YXJ0LHQscSx7aGFuZGxlczpbcixuXSxoYW5kbGVOdW1iZXJzOltlLTEsZV19KX0pfX0pLFooZi5zdGFydCksYT17ZGVzdHJveTpmdW5jdGlvbigpe2Zvcih2YXIgdCBpbiBmLmNzc0NsYXNzZXMpZi5jc3NDbGFzc2VzLmhhc093blByb3BlcnR5KHQpJiZzdCh5LGYuY3NzQ2xhc3Nlc1t0XSk7Zm9yKDt5LmZpcnN0Q2hpbGQ7KXkucmVtb3ZlQ2hpbGQoeS5maXJzdENoaWxkKTtkZWxldGUgeS5ub1VpU2xpZGVyfSxzdGVwczpmdW5jdGlvbigpe3JldHVybiBtLm1hcChmdW5jdGlvbih0LGUpe3ZhciByPUUuZ2V0TmVhcmJ5U3RlcHModCksbj1iW2VdLGk9ci50aGlzU3RlcC5zdGVwLG89bnVsbDshMSE9PWkmJm4raT5yLnN0ZXBBZnRlci5zdGFydFZhbHVlJiYoaT1yLnN0ZXBBZnRlci5zdGFydFZhbHVlLW4pLG89bj5yLnRoaXNTdGVwLnN0YXJ0VmFsdWU/ci50aGlzU3RlcC5zdGVwOiExIT09ci5zdGVwQmVmb3JlLnN0ZXAmJm4tci5zdGVwQmVmb3JlLmhpZ2hlc3RTdGVwLDEwMD09PXQ/aT1udWxsOjA9PT10JiYobz1udWxsKTt2YXIgYT1FLmNvdW50U3RlcERlY2ltYWxzKCk7cmV0dXJuIG51bGwhPT1pJiYhMSE9PWkmJihpPU51bWJlcihpLnRvRml4ZWQoYSkpKSxudWxsIT09byYmITEhPT1vJiYobz1OdW1iZXIoby50b0ZpeGVkKGEpKSksW28saV19KX0sb246WCxvZmY6ZnVuY3Rpb24odCl7dmFyIG49dCYmdC5zcGxpdChcIi5cIilbMF0saT1uJiZ0LnN1YnN0cmluZyhuLmxlbmd0aCk7T2JqZWN0LmtleXMoUykuZm9yRWFjaChmdW5jdGlvbih0KXt2YXIgZT10LnNwbGl0KFwiLlwiKVswXSxyPXQuc3Vic3RyaW5nKGUubGVuZ3RoKTtuJiZuIT09ZXx8aSYmaSE9PXJ8fGRlbGV0ZSBTW3RdfSl9LGdldDp0dCxzZXQ6WixzZXRIYW5kbGU6ZnVuY3Rpb24odCxlLHIpe3ZhciBuPVtdO2lmKCEoMDw9KHQ9TnVtYmVyKHQpKSYmdDxnLmxlbmd0aCkpdGhyb3cgbmV3IEVycm9yKFwibm9VaVNsaWRlciAoXCIrZXQrXCIpOiBpbnZhbGlkIGhhbmRsZSBudW1iZXIsIGdvdDogXCIrdCk7Zm9yKHZhciBpPTA7aTxnLmxlbmd0aDtpKyspbltpXT1udWxsO25bdF09ZSxaKG4scil9LHJlc2V0OmZ1bmN0aW9uKHQpe1ooZi5zdGFydCx0KX0sX19tb3ZlSGFuZGxlczpmdW5jdGlvbih0LGUscil7JCh0LGUsbSxyKX0sb3B0aW9uczpvLHVwZGF0ZU9wdGlvbnM6ZnVuY3Rpb24oZSx0KXt2YXIgcj10dCgpLG49W1wibWFyZ2luXCIsXCJsaW1pdFwiLFwicGFkZGluZ1wiLFwicmFuZ2VcIixcImFuaW1hdGVcIixcInNuYXBcIixcInN0ZXBcIixcImZvcm1hdFwiXTtuLmZvckVhY2goZnVuY3Rpb24odCl7dm9pZCAwIT09ZVt0XSYmKG9bdF09ZVt0XSl9KTt2YXIgaT11dChvKTtuLmZvckVhY2goZnVuY3Rpb24odCl7dm9pZCAwIT09ZVt0XSYmKGZbdF09aVt0XSl9KSxFPWkuc3BlY3RydW0sZi5tYXJnaW49aS5tYXJnaW4sZi5saW1pdD1pLmxpbWl0LGYucGFkZGluZz1pLnBhZGRpbmcsZi5waXBzJiZ6KGYucGlwcyksbT1bXSxaKGUuc3RhcnR8fHIsdCl9LHRhcmdldDp5LHJlbW92ZVBpcHM6TCxwaXBzOnp9LGYucGlwcyYmeihmLnBpcHMpLGYudG9vbHRpcHMmJihpPXUubWFwKHIpLFgoXCJ1cGRhdGVcIixmdW5jdGlvbih0LGUscil7aWYoaVtlXSl7dmFyIG49dFtlXTshMCE9PWYudG9vbHRpcHNbZV0mJihuPWYudG9vbHRpcHNbZV0udG8ocltlXSkpLGlbZV0uaW5uZXJIVE1MPW59fSkpLFgoXCJ1cGRhdGVcIixmdW5jdGlvbih0LGUsYSxyLHMpe2cuZm9yRWFjaChmdW5jdGlvbih0KXt2YXIgZT11W3RdLHI9SShtLHQsMCwhMCwhMCwhMCksbj1JKG0sdCwxMDAsITAsITAsITApLGk9c1t0XSxvPWYuYXJpYUZvcm1hdC50byhhW3RdKTtyPUUuZnJvbVN0ZXBwaW5nKHIpLnRvRml4ZWQoMSksbj1FLmZyb21TdGVwcGluZyhuKS50b0ZpeGVkKDEpLGk9RS5mcm9tU3RlcHBpbmcoaSkudG9GaXhlZCgxKSxlLmNoaWxkcmVuWzBdLnNldEF0dHJpYnV0ZShcImFyaWEtdmFsdWVtaW5cIixyKSxlLmNoaWxkcmVuWzBdLnNldEF0dHJpYnV0ZShcImFyaWEtdmFsdWVtYXhcIixuKSxlLmNoaWxkcmVuWzBdLnNldEF0dHJpYnV0ZShcImFyaWEtdmFsdWVub3dcIixpKSxlLmNoaWxkcmVuWzBdLnNldEF0dHJpYnV0ZShcImFyaWEtdmFsdWV0ZXh0XCIsbyl9KX0pLGF9cmV0dXJue19fc3BlY3RydW06bCx2ZXJzaW9uOmV0LGNyZWF0ZTpmdW5jdGlvbih0LGUpe2lmKCF0fHwhdC5ub2RlTmFtZSl0aHJvdyBuZXcgRXJyb3IoXCJub1VpU2xpZGVyIChcIitldCtcIik6IGNyZWF0ZSByZXF1aXJlcyBhIHNpbmdsZSBlbGVtZW50LCBnb3Q6IFwiK3QpO2lmKHQubm9VaVNsaWRlcil0aHJvdyBuZXcgRXJyb3IoXCJub1VpU2xpZGVyIChcIitldCtcIik6IFNsaWRlciB3YXMgYWxyZWFkeSBpbml0aWFsaXplZC5cIik7dmFyIHI9eih0LHV0KGUpLGUpO3JldHVybiB0Lm5vVWlTbGlkZXI9cn19fSk7XHJcbi8qIVxyXG4qIHNsaWNrLmpzXHJcbiogdjEuMC4xIC0gMjAxMy0xMi0yMFxyXG4qIGh0dHBzOi8vZ2l0aHViLmNvbS9zaGFzaGFua21laHRhL3NsaWNrLmpzXHJcbiogKGMpIFNoYXNoYW5rIE1laHRhOyBNSVQgTGljZW5zZVxyXG4qL1xyXG4hZnVuY3Rpb24oYSl7XCJ1c2Ugc3RyaWN0XCI7YS5mbi5leGlzdHM9ZnVuY3Rpb24oKXtyZXR1cm4gMCE9PXRoaXMubGVuZ3RofTt2YXIgYj1mdW5jdGlvbihhLGIpe3RoaXMub3B0aW9ucz17c291cmNlOnZvaWQgMCxzdGFydDp2b2lkIDAsZW5kOnZvaWQgMCxrZXlDb250cm9sOiEwLGNvbnRlbnQ6dm9pZCAwLHRoZW1lOntjb250YWluZXI6YSxjb250ZW50OlwiLnNsaWNrLWNvbnRlbnRcIixjdXJyZW50Tm86XCIuY3VycmVudC1ub1wiLHRvdGFsTm86XCIudG90YWxcIixuZXh0OlwiLm5leHRcIixwcmV2OlwiLnByZXZcIn19O2Zvcih2YXIgYyBpbiB0aGlzLm9wdGlvbnMpdGhpcy5vcHRpb25zLmhhc093blByb3BlcnR5KGMpJiZcInRoZW1lXCIhPT1jJiYodGhpcy5vcHRpb25zW2NdPXZvaWQgMCE9PWJbY10/YltjXTp0aGlzLm9wdGlvbnNbY10pO2lmKHZvaWQgMCE9PWIudGhlbWUpZm9yKHZhciBkIGluIHRoaXMub3B0aW9ucy50aGVtZSl0aGlzLm9wdGlvbnMudGhlbWUuaGFzT3duUHJvcGVydHkoZCkmJih0aGlzLm9wdGlvbnMudGhlbWVbZF09dm9pZCAwIT09Yi50aGVtZVtkXT9iLnRoZW1lW2RdOnRoaXMub3B0aW9ucy50aGVtZVtkXSk7dGhpcy5vcHRpb25zLmNvbnRlbnQ9dGhpcy5vcHRpb25zLnRoZW1lLmNvbnRhaW5lcitcIiBcIit0aGlzLm9wdGlvbnMudGhlbWUuY29udGVudCx0aGlzLnN0YXRlPXtjdXJyZW50OnRoaXMub3B0aW9ucy5zdGFydC0xLHN0YXJ0OnRoaXMub3B0aW9ucy5zdGFydCxlbmQ6dGhpcy5vcHRpb25zLmVuZCxzbGlkZTp7Y3VycmVudDowLGRpZmZlcmVuY2U6dGhpcy5vcHRpb25zLnN0YXJ0LTEsdG90YWw6dGhpcy5vcHRpb25zLmVuZC10aGlzLm9wdGlvbnMuc3RhcnQrMSxtYXhIaXQ6MH19LHRoaXMuaW5pdC5hcHBseSh0aGlzKX0sYz1iLnByb3RvdHlwZTtjLmhvb2tzPXtuZXh0OmZ1bmN0aW9uKCl7dmFyIGE9dGhpcztpZihhLnN0YXRlLnNsaWRlLmN1cnJlbnQ8YS5zdGF0ZS5zbGlkZS50b3RhbCl7dmFyIGI9KythLnN0YXRlLnNsaWRlLmN1cnJlbnQrYS5zdGF0ZS5zbGlkZS5kaWZmZXJlbmNlO2EuaG9va3Muc2V0U2xpZGUuYXBwbHkodGhpcyxbYl0pfX0scHJldjpmdW5jdGlvbigpe3ZhciBhPXRoaXM7aWYoYS5zdGF0ZS5zbGlkZS5jdXJyZW50PjEpe3ZhciBiPS0tYS5zdGF0ZS5zbGlkZS5jdXJyZW50K2Euc3RhdGUuc2xpZGUuZGlmZmVyZW5jZTthLmhvb2tzLnNldFNsaWRlLmFwcGx5KHRoaXMsW2JdKX19LHNldFNsaWRlOmZ1bmN0aW9uKGIpe3ZhciBjPXRoaXMsZD1jLmhvb2tzLnNsaWRlU3RhdHVzLmFwcGx5KGMsW2JdKTtyZXR1cm4gYy5zdGF0ZS5zbGlkZS5jdXJyZW50PWItYy5zdGF0ZS5zbGlkZS5kaWZmZXJlbmNlLDE9PT1jLnN0YXRlLnNsaWRlLmN1cnJlbnQmJmEoYy5vcHRpb25zLnRoZW1lLmNvbnRhaW5lcikuYW5pbWF0ZSh7b3BhY2l0eTpcIjFcIn0sNTAwKSxhKGMub3B0aW9ucy50aGVtZS5jb250YWluZXIrXCIgLnNraXBcIitjLm9wdGlvbnMudGhlbWUuY3VycmVudE5vKS5pcyhcIjppbnB1dFwiKT9hKGMub3B0aW9ucy50aGVtZS5jb250YWluZXIrXCIgXCIrYy5vcHRpb25zLnRoZW1lLmN1cnJlbnRObykudmFsKGMuc3RhdGUuc2xpZGUuY3VycmVudCk6KGEoYy5vcHRpb25zLnRoZW1lLmNvbnRhaW5lcitcIiAuc2tpcFwiKS52YWwoYy5zdGF0ZS5zbGlkZS5jdXJyZW50KSxhKGMub3B0aW9ucy50aGVtZS5jb250YWluZXIrXCIgXCIrYy5vcHRpb25zLnRoZW1lLmN1cnJlbnRObykuaHRtbChjLnN0YXRlLnNsaWRlLmN1cnJlbnQpKSwxPT09ZD8oYShjLm9wdGlvbnMuY29udGVudCtcIiBpbWcuY3VycmVudFwiKS5yZW1vdmVDbGFzcyhcImN1cnJlbnRcIikuYWRkQ2xhc3MoXCJjYWNoZWQtc2xpZGVcIikuaGlkZSgpLGEoYy5vcHRpb25zLmNvbnRlbnQrXCIgaW1nW2RhdGEtc2xpZGU9XCIrYitcIl1cIikucmVtb3ZlQ2xhc3MoXCJjYWNoZWQtc2xpZGVcIikuYWRkQ2xhc3MoXCJjdXJyZW50XCIpLnNob3coKSxjLnN0YXRlLmN1cnJlbnQ9YixhKGMub3B0aW9ucy50aGVtZS5jb250YWluZXIrXCIgLmxlbmd0aFwiKS53aWR0aCgxMDAqYy5zdGF0ZS5zbGlkZS5jdXJyZW50L2Muc3RhdGUuc2xpZGUudG90YWwrXCIlXCIpLGMuaG9va3MuZ2V0U2xpZGUuYXBwbHkoYyxbYisxXSksdm9pZCAwKTooMj09PWQ/Yy5ob29rcy5zbGlkZVN3aXRjaC5hcHBseSh0aGlzLFtiXSk6MD09PWQmJihhKGMub3B0aW9ucy5jb250ZW50K1wiIGltZy5sb2FkaW5nXCIpLm9mZihcImxvYWQuc2xpZGVTd2l0Y2hcIikucmVtb3ZlKCksYy5ob29rcy5nZXRTbGlkZS5hcHBseShjLFtiXSksYy5ob29rcy5zbGlkZVN3aXRjaC5hcHBseSh0aGlzLFtiXSkpLHZvaWQgMCl9LGdldFNsaWRlOmZ1bmN0aW9uKGIpe3ZhciBjPXRoaXM7MD09PWMuaG9va3Muc2xpZGVTdGF0dXMuYXBwbHkodGhpcyxbYl0pJiZiPD1jLnN0YXRlLmVuZCYmKGEoYy5vcHRpb25zLmNvbnRlbnQpLmFwcGVuZCgnPGltZyBzcmM9XCInK2MuaG9va3MuaW1hZ2VQYXRoLmFwcGx5KGMsW2JdKSsnXCIgZGF0YS1zbGlkZT0nK2IrJyBjbGFzcz1cImxvYWRpbmdcIj4nKSxhKGMub3B0aW9ucy5jb250ZW50K1wiIGltZy5sb2FkaW5nXCIpLmhpZGUoKSxhKGMub3B0aW9ucy5jb250ZW50K1wiIGltZy5sb2FkaW5nXCIpLmxvYWQoZnVuY3Rpb24oKXthKHRoaXMpLnJlbW92ZUNsYXNzKFwibG9hZGluZ1wiKS5hZGRDbGFzcyhcImNhY2hlZC1zbGlkZVwiKX0pKX0sc2xpZGVTd2l0Y2g6ZnVuY3Rpb24oYil7dmFyIGM9dGhpczthKGMub3B0aW9ucy5jb250ZW50K1wiIGltZ1tkYXRhLXNsaWRlPVwiK2IrXCJdXCIpLm9uKFwibG9hZC5zbGlkZVN3aXRjaFwiLGZ1bmN0aW9uKCl7YShjLm9wdGlvbnMuY29udGVudCtcIiBpbWcuY3VycmVudFwiKS5yZW1vdmVDbGFzcyhcImN1cnJlbnRcIikuYWRkQ2xhc3MoXCJjYWNoZWQtc2xpZGVcIikuaGlkZSgpLGEodGhpcykucmVtb3ZlQ2xhc3MoXCJjYWNoZWQtc2xpZGVcIikuYWRkQ2xhc3MoXCJjdXJyZW50XCIpLnNob3coKSxjLnN0YXRlLmN1cnJlbnQ9YixhKGMub3B0aW9ucy50aGVtZS5jb250YWluZXIrXCIgLmxlbmd0aFwiKS53aWR0aCgxMDAqKGIrMSkvYy5zdGF0ZS5zbGlkZS50b3RhbCtcIiVcIiksYy5ob29rcy5nZXRTbGlkZS5hcHBseShjLFtiKzFdKX0pfSxzbGlkZVN0YXR1czpmdW5jdGlvbihiKXt2YXIgYz10aGlzLGQ9Yy5vcHRpb25zLmNvbnRlbnQrXCIgaW1nW2RhdGEtc2xpZGU9XCIrYitcIl1cIjtyZXR1cm4gYShkKS5leGlzdHMoKT9hKGQpLmhhc0NsYXNzKFwibG9hZGluZ1wiKT8yOjE6MH0saW1hZ2VQYXRoOmZ1bmN0aW9uKGEpe3ZhciBiPXRoaXMub3B0aW9ucy5zb3VyY2Uuc3BsaXQoXCIqXCIpO3JldHVybiBiWzBdK2ErYlsxXX0sc2tpcDpmdW5jdGlvbihiKXtpZihhLmlzTnVtZXJpYyhiKSl7dmFyIGM9dGhpcyxkPXBhcnNlSW50KGIpK2Muc3RhdGUuc2xpZGUuZGlmZmVyZW5jZTtjLmhvb2tzLmdldFNsaWRlLmFwcGx5KGMsW2RdKSxjLmhvb2tzLnNldFNsaWRlLmFwcGx5KGMsW2RdKX19fSxjLmluaXQ9ZnVuY3Rpb24oKXt2YXIgYj10aGlzO2EoYi5vcHRpb25zLnRoZW1lLmNvbnRhaW5lcikuY3NzKFwib3BhY2l0eVwiLFwiMFwiKSxcInN0cmluZ1wiPT10eXBlb2YgYi5vcHRpb25zLnNvdXJjZSYmYi5ob29rcy5uZXh0LmFwcGx5KGIpLGEoYi5vcHRpb25zLnRoZW1lLmNvbnRhaW5lcitcIiBcIitiLm9wdGlvbnMudGhlbWUubmV4dCkuY2xpY2soZnVuY3Rpb24oYSl7YS5wcmV2ZW50RGVmYXVsdCgpLGIuaG9va3MubmV4dC5hcHBseShiKX0pLGEoYi5vcHRpb25zLnRoZW1lLmNvbnRhaW5lcitcIiBcIitiLm9wdGlvbnMudGhlbWUucHJldikuY2xpY2soZnVuY3Rpb24oYSl7YS5wcmV2ZW50RGVmYXVsdCgpLGIuaG9va3MucHJldi5hcHBseShiKX0pLGEoYi5vcHRpb25zLnRoZW1lLmNvbnRhaW5lcitcIiBcIitiLm9wdGlvbnMudGhlbWUudG90YWxObykuaHRtbChiLnN0YXRlLmVuZC1iLnN0YXRlLnN0YXJ0KzEpLGIub3B0aW9ucy5rZXlDb250cm9sJiZhKGRvY3VtZW50KS5rZXl1cChmdW5jdGlvbihjKXszOSE9PWMua2V5Q29kZXx8YShcImlucHV0OmZvY3VzXCIpLmV4aXN0cygpfHxiLmhvb2tzLm5leHQuYXBwbHkoYiksMzchPT1jLmtleUNvZGV8fGEoXCJpbnB1dDpmb2N1c1wiKS5leGlzdHMoKXx8Yi5ob29rcy5wcmV2LmFwcGx5KGIpfSksYShiLm9wdGlvbnMudGhlbWUuY29udGFpbmVyK1wiIC5za2lwXCIpLmtleXByZXNzKGZ1bmN0aW9uKGMpezEzPT09Yy5rZXlDb2RlJiYoYi5ob29rcy5za2lwLmFwcGx5KGIsW2EodGhpcykudmFsKCldKSxhKHRoaXMpLmJsdXIoKSl9KX0sd2luZG93LlNsaWNrPWIsYi5uZXh0PWZ1bmN0aW9uKGEpe2EuY29uc3RydWN0b3I9PT1iJiZhLmhvb2tzLm5leHQuYXBwbHkoYSl9LGIucHJldj1mdW5jdGlvbihhKXthLmNvbnN0cnVjdG9yPT09YiYmYS5ob29rcy5wcmV2LmFwcGx5KGEpfSxiLnNraXA9ZnVuY3Rpb24oYSxjKXthLmNvbnN0cnVjdG9yPT09YiYmYS5ob29rcy5za2lwLmFwcGx5KGEsW2NdKX19KGpRdWVyeSx3aW5kb3cpO1xyXG4vKiAgalF1ZXJ5IE5pY2UgU2VsZWN0IC0gdjEuMFxyXG4gICAgaHR0cHM6Ly9naXRodWIuY29tL2hlcm5hbnNhcnRvcmlvL2pxdWVyeS1uaWNlLXNlbGVjdFxyXG4gICAgTWFkZSBieSBIZXJuw6FuIFNhcnRvcmlvICAqL1xyXG4hZnVuY3Rpb24oZSl7ZS5mbi5uaWNlU2VsZWN0PWZ1bmN0aW9uKHQpe2Z1bmN0aW9uIHModCl7dC5hZnRlcihlKFwiPGRpdj48L2Rpdj5cIikuYWRkQ2xhc3MoXCJuaWNlLXNlbGVjdFwiKS5hZGRDbGFzcyh0LmF0dHIoXCJjbGFzc1wiKXx8XCJcIikuYWRkQ2xhc3ModC5hdHRyKFwiZGlzYWJsZWRcIik/XCJkaXNhYmxlZFwiOlwiXCIpLmF0dHIoXCJ0YWJpbmRleFwiLHQuYXR0cihcImRpc2FibGVkXCIpP251bGw6XCIwXCIpLmh0bWwoJzxzcGFuIGNsYXNzPVwiY3VycmVudFwiPjwvc3Bhbj48dWwgY2xhc3M9XCJsaXN0XCI+PC91bD4nKSk7dmFyIHM9dC5uZXh0KCksbj10LmZpbmQoXCJvcHRpb25cIiksaT10LmZpbmQoXCJvcHRpb246c2VsZWN0ZWRcIik7cy5maW5kKFwiLmN1cnJlbnRcIikuaHRtbChpLmRhdGEoXCJkaXNwbGF5XCIpfHxpLnRleHQoKSksbi5lYWNoKGZ1bmN0aW9uKHQpe3ZhciBuPWUodGhpcyksaT1uLmRhdGEoXCJkaXNwbGF5XCIpO3MuZmluZChcInVsXCIpLmFwcGVuZChlKFwiPGxpPjwvbGk+XCIpLmF0dHIoXCJkYXRhLXZhbHVlXCIsbi52YWwoKSkuYXR0cihcImRhdGEtZGlzcGxheVwiLGl8fG51bGwpLmFkZENsYXNzKFwib3B0aW9uXCIrKG4uaXMoXCI6c2VsZWN0ZWRcIik/XCIgc2VsZWN0ZWRcIjpcIlwiKSsobi5pcyhcIjpkaXNhYmxlZFwiKT9cIiBkaXNhYmxlZFwiOlwiXCIpKS5odG1sKG4udGV4dCgpKSl9KX1pZihcInN0cmluZ1wiPT10eXBlb2YgdClyZXR1cm5cInVwZGF0ZVwiPT10P3RoaXMuZWFjaChmdW5jdGlvbigpe3ZhciB0PWUodGhpcyksbj1lKHRoaXMpLm5leHQoXCIubmljZS1zZWxlY3RcIiksaT1uLmhhc0NsYXNzKFwib3BlblwiKTtuLmxlbmd0aCYmKG4ucmVtb3ZlKCkscyh0KSxpJiZ0Lm5leHQoKS50cmlnZ2VyKFwiY2xpY2tcIikpfSk6XCJkZXN0cm95XCI9PXQ/KHRoaXMuZWFjaChmdW5jdGlvbigpe3ZhciB0PWUodGhpcykscz1lKHRoaXMpLm5leHQoXCIubmljZS1zZWxlY3RcIik7cy5sZW5ndGgmJihzLnJlbW92ZSgpLHQuY3NzKFwiZGlzcGxheVwiLFwiXCIpKX0pLDA9PWUoXCIubmljZS1zZWxlY3RcIikubGVuZ3RoJiZlKGRvY3VtZW50KS5vZmYoXCIubmljZV9zZWxlY3RcIikpOmNvbnNvbGUubG9nKCdNZXRob2QgXCInK3QrJ1wiIGRvZXMgbm90IGV4aXN0LicpLHRoaXM7dGhpcy5oaWRlKCksdGhpcy5lYWNoKGZ1bmN0aW9uKCl7dmFyIHQ9ZSh0aGlzKTt0Lm5leHQoKS5oYXNDbGFzcyhcIm5pY2Utc2VsZWN0XCIpfHxzKHQpfSksZShkb2N1bWVudCkub2ZmKFwiLm5pY2Vfc2VsZWN0XCIpLGUoZG9jdW1lbnQpLm9uKFwiY2xpY2submljZV9zZWxlY3RcIixcIi5uaWNlLXNlbGVjdFwiLGZ1bmN0aW9uKHQpe3ZhciBzPWUodGhpcyk7ZShcIi5uaWNlLXNlbGVjdFwiKS5ub3QocykucmVtb3ZlQ2xhc3MoXCJvcGVuXCIpLHMudG9nZ2xlQ2xhc3MoXCJvcGVuXCIpLHMuaGFzQ2xhc3MoXCJvcGVuXCIpPyhzLmZpbmQoXCIub3B0aW9uXCIpLHMuZmluZChcIi5mb2N1c1wiKS5yZW1vdmVDbGFzcyhcImZvY3VzXCIpLHMuZmluZChcIi5zZWxlY3RlZFwiKS5hZGRDbGFzcyhcImZvY3VzXCIpKTpzLmZvY3VzKCl9KSxlKGRvY3VtZW50KS5vbihcImNsaWNrLm5pY2Vfc2VsZWN0XCIsZnVuY3Rpb24odCl7MD09PWUodC50YXJnZXQpLmNsb3Nlc3QoXCIubmljZS1zZWxlY3RcIikubGVuZ3RoJiZlKFwiLm5pY2Utc2VsZWN0XCIpLnJlbW92ZUNsYXNzKFwib3BlblwiKS5maW5kKFwiLm9wdGlvblwiKX0pLGUoZG9jdW1lbnQpLm9uKFwiY2xpY2submljZV9zZWxlY3RcIixcIi5uaWNlLXNlbGVjdCAub3B0aW9uOm5vdCguZGlzYWJsZWQpXCIsZnVuY3Rpb24odCl7dmFyIHM9ZSh0aGlzKSxuPXMuY2xvc2VzdChcIi5uaWNlLXNlbGVjdFwiKTtuLmZpbmQoXCIuc2VsZWN0ZWRcIikucmVtb3ZlQ2xhc3MoXCJzZWxlY3RlZFwiKSxzLmFkZENsYXNzKFwic2VsZWN0ZWRcIik7dmFyIGk9cy5kYXRhKFwiZGlzcGxheVwiKXx8cy50ZXh0KCk7bi5maW5kKFwiLmN1cnJlbnRcIikudGV4dChpKSxuLnByZXYoXCJzZWxlY3RcIikudmFsKHMuZGF0YShcInZhbHVlXCIpKS50cmlnZ2VyKFwiY2hhbmdlXCIpfSksZShkb2N1bWVudCkub24oXCJrZXlkb3duLm5pY2Vfc2VsZWN0XCIsXCIubmljZS1zZWxlY3RcIixmdW5jdGlvbih0KXt2YXIgcz1lKHRoaXMpLG49ZShzLmZpbmQoXCIuZm9jdXNcIil8fHMuZmluZChcIi5saXN0IC5vcHRpb24uc2VsZWN0ZWRcIikpO2lmKDMyPT10LmtleUNvZGV8fDEzPT10LmtleUNvZGUpcmV0dXJuIHMuaGFzQ2xhc3MoXCJvcGVuXCIpP24udHJpZ2dlcihcImNsaWNrXCIpOnMudHJpZ2dlcihcImNsaWNrXCIpLCExO2lmKDQwPT10LmtleUNvZGUpe2lmKHMuaGFzQ2xhc3MoXCJvcGVuXCIpKXt2YXIgaT1uLm5leHRBbGwoXCIub3B0aW9uOm5vdCguZGlzYWJsZWQpXCIpLmZpcnN0KCk7aS5sZW5ndGg+MCYmKHMuZmluZChcIi5mb2N1c1wiKS5yZW1vdmVDbGFzcyhcImZvY3VzXCIpLGkuYWRkQ2xhc3MoXCJmb2N1c1wiKSl9ZWxzZSBzLnRyaWdnZXIoXCJjbGlja1wiKTtyZXR1cm4hMX1pZigzOD09dC5rZXlDb2RlKXtpZihzLmhhc0NsYXNzKFwib3BlblwiKSl7dmFyIGw9bi5wcmV2QWxsKFwiLm9wdGlvbjpub3QoLmRpc2FibGVkKVwiKS5maXJzdCgpO2wubGVuZ3RoPjAmJihzLmZpbmQoXCIuZm9jdXNcIikucmVtb3ZlQ2xhc3MoXCJmb2N1c1wiKSxsLmFkZENsYXNzKFwiZm9jdXNcIikpfWVsc2Ugcy50cmlnZ2VyKFwiY2xpY2tcIik7cmV0dXJuITF9aWYoMjc9PXQua2V5Q29kZSlzLmhhc0NsYXNzKFwib3BlblwiKSYmcy50cmlnZ2VyKFwiY2xpY2tcIik7ZWxzZSBpZig5PT10LmtleUNvZGUmJnMuaGFzQ2xhc3MoXCJvcGVuXCIpKXJldHVybiExfSk7dmFyIG49ZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImFcIikuc3R5bGU7cmV0dXJuIG4uY3NzVGV4dD1cInBvaW50ZXItZXZlbnRzOmF1dG9cIixcImF1dG9cIiE9PW4ucG9pbnRlckV2ZW50cyYmZShcImh0bWxcIikuYWRkQ2xhc3MoXCJuby1jc3Nwb2ludGVyZXZlbnRzXCIpLHRoaXN9fShqUXVlcnkpO1xyXG4vKiFcclxuKiBqcXVlcnkuaW5wdXRtYXNrLmJ1bmRsZS5qc1xyXG4qIGh0dHBzOi8vZ2l0aHViLmNvbS9Sb2JpbkhlcmJvdHMvSW5wdXRtYXNrXHJcbiogQ29weXJpZ2h0IChjKSAyMDEwIC0gMjAxOSBSb2JpbiBIZXJib3RzXHJcbiogTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIChodHRwOi8vd3d3Lm9wZW5zb3VyY2Uub3JnL2xpY2Vuc2VzL21pdC1saWNlbnNlLnBocClcclxuKiBWZXJzaW9uOiA0LjAuNlxyXG4qL1xyXG5cclxuKGZ1bmN0aW9uKG1vZHVsZXMpIHtcclxuICAgIHZhciBpbnN0YWxsZWRNb2R1bGVzID0ge307XHJcbiAgICBmdW5jdGlvbiBfX3dlYnBhY2tfcmVxdWlyZV9fKG1vZHVsZUlkKSB7XHJcbiAgICAgICAgaWYgKGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXS5leHBvcnRzO1xyXG4gICAgICAgIH1cclxuICAgICAgICB2YXIgbW9kdWxlID0gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0gPSB7XHJcbiAgICAgICAgICAgIGk6IG1vZHVsZUlkLFxyXG4gICAgICAgICAgICBsOiBmYWxzZSxcclxuICAgICAgICAgICAgZXhwb3J0czoge31cclxuICAgICAgICB9O1xyXG4gICAgICAgIG1vZHVsZXNbbW9kdWxlSWRdLmNhbGwobW9kdWxlLmV4cG9ydHMsIG1vZHVsZSwgbW9kdWxlLmV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pO1xyXG4gICAgICAgIG1vZHVsZS5sID0gdHJ1ZTtcclxuICAgICAgICByZXR1cm4gbW9kdWxlLmV4cG9ydHM7XHJcbiAgICB9XHJcbiAgICBfX3dlYnBhY2tfcmVxdWlyZV9fLm0gPSBtb2R1bGVzO1xyXG4gICAgX193ZWJwYWNrX3JlcXVpcmVfXy5jID0gaW5zdGFsbGVkTW9kdWxlcztcclxuICAgIF9fd2VicGFja19yZXF1aXJlX18uZCA9IGZ1bmN0aW9uKGV4cG9ydHMsIG5hbWUsIGdldHRlcikge1xyXG4gICAgICAgIGlmICghX193ZWJwYWNrX3JlcXVpcmVfXy5vKGV4cG9ydHMsIG5hbWUpKSB7XHJcbiAgICAgICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBuYW1lLCB7XHJcbiAgICAgICAgICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxyXG4gICAgICAgICAgICAgICAgZ2V0OiBnZXR0ZXJcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIF9fd2VicGFja19yZXF1aXJlX18uciA9IGZ1bmN0aW9uKGV4cG9ydHMpIHtcclxuICAgICAgICBpZiAodHlwZW9mIFN5bWJvbCAhPT0gXCJ1bmRlZmluZWRcIiAmJiBTeW1ib2wudG9TdHJpbmdUYWcpIHtcclxuICAgICAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFN5bWJvbC50b1N0cmluZ1RhZywge1xyXG4gICAgICAgICAgICAgICAgdmFsdWU6IFwiTW9kdWxlXCJcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xyXG4gICAgICAgICAgICB2YWx1ZTogdHJ1ZVxyXG4gICAgICAgIH0pO1xyXG4gICAgfTtcclxuICAgIF9fd2VicGFja19yZXF1aXJlX18udCA9IGZ1bmN0aW9uKHZhbHVlLCBtb2RlKSB7XHJcbiAgICAgICAgaWYgKG1vZGUgJiAxKSB2YWx1ZSA9IF9fd2VicGFja19yZXF1aXJlX18odmFsdWUpO1xyXG4gICAgICAgIGlmIChtb2RlICYgOCkgcmV0dXJuIHZhbHVlO1xyXG4gICAgICAgIGlmIChtb2RlICYgNCAmJiB0eXBlb2YgdmFsdWUgPT09IFwib2JqZWN0XCIgJiYgdmFsdWUgJiYgdmFsdWUuX19lc01vZHVsZSkgcmV0dXJuIHZhbHVlO1xyXG4gICAgICAgIHZhciBucyA9IE9iamVjdC5jcmVhdGUobnVsbCk7XHJcbiAgICAgICAgX193ZWJwYWNrX3JlcXVpcmVfXy5yKG5zKTtcclxuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkobnMsIFwiZGVmYXVsdFwiLCB7XHJcbiAgICAgICAgICAgIGVudW1lcmFibGU6IHRydWUsXHJcbiAgICAgICAgICAgIHZhbHVlOiB2YWx1ZVxyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIGlmIChtb2RlICYgMiAmJiB0eXBlb2YgdmFsdWUgIT0gXCJzdHJpbmdcIikgZm9yICh2YXIga2V5IGluIHZhbHVlKSBfX3dlYnBhY2tfcmVxdWlyZV9fLmQobnMsIGtleSwgZnVuY3Rpb24oa2V5KSB7XHJcbiAgICAgICAgICAgIHJldHVybiB2YWx1ZVtrZXldO1xyXG4gICAgICAgIH0uYmluZChudWxsLCBrZXkpKTtcclxuICAgICAgICByZXR1cm4gbnM7XHJcbiAgICB9O1xyXG4gICAgX193ZWJwYWNrX3JlcXVpcmVfXy5uID0gZnVuY3Rpb24obW9kdWxlKSB7XHJcbiAgICAgICAgdmFyIGdldHRlciA9IG1vZHVsZSAmJiBtb2R1bGUuX19lc01vZHVsZSA/IGZ1bmN0aW9uIGdldERlZmF1bHQoKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBtb2R1bGVbXCJkZWZhdWx0XCJdO1xyXG4gICAgICAgIH0gOiBmdW5jdGlvbiBnZXRNb2R1bGVFeHBvcnRzKCkge1xyXG4gICAgICAgICAgICByZXR1cm4gbW9kdWxlO1xyXG4gICAgICAgIH07XHJcbiAgICAgICAgX193ZWJwYWNrX3JlcXVpcmVfXy5kKGdldHRlciwgXCJhXCIsIGdldHRlcik7XHJcbiAgICAgICAgcmV0dXJuIGdldHRlcjtcclxuICAgIH07XHJcbiAgICBfX3dlYnBhY2tfcmVxdWlyZV9fLm8gPSBmdW5jdGlvbihvYmplY3QsIHByb3BlcnR5KSB7XHJcbiAgICAgICAgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmplY3QsIHByb3BlcnR5KTtcclxuICAgIH07XHJcbiAgICBfX3dlYnBhY2tfcmVxdWlyZV9fLnAgPSBcIlwiO1xyXG4gICAgcmV0dXJuIF9fd2VicGFja19yZXF1aXJlX18oX193ZWJwYWNrX3JlcXVpcmVfXy5zID0gMCk7XHJcbn0pKFsgZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XHJcbiAgICBcInVzZSBzdHJpY3RcIjtcclxuICAgIF9fd2VicGFja19yZXF1aXJlX18oMSk7XHJcbiAgICBfX3dlYnBhY2tfcmVxdWlyZV9fKDYpO1xyXG4gICAgX193ZWJwYWNrX3JlcXVpcmVfXyg3KTtcclxuICAgIHZhciBfaW5wdXRtYXNrID0gX193ZWJwYWNrX3JlcXVpcmVfXygyKTtcclxuICAgIHZhciBfaW5wdXRtYXNrMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2lucHV0bWFzayk7XHJcbiAgICB2YXIgX2lucHV0bWFzazMgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDMpO1xyXG4gICAgdmFyIF9pbnB1dG1hc2s0ID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfaW5wdXRtYXNrMyk7XHJcbiAgICB2YXIgX2pxdWVyeSA9IF9fd2VicGFja19yZXF1aXJlX18oNCk7XHJcbiAgICB2YXIgX2pxdWVyeTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9qcXVlcnkpO1xyXG4gICAgZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHtcclxuICAgICAgICByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDoge1xyXG4gICAgICAgICAgICBkZWZhdWx0OiBvYmpcclxuICAgICAgICB9O1xyXG4gICAgfVxyXG4gICAgaWYgKF9pbnB1dG1hc2s0LmRlZmF1bHQgPT09IF9qcXVlcnkyLmRlZmF1bHQpIHtcclxuICAgICAgICBfX3dlYnBhY2tfcmVxdWlyZV9fKDgpO1xyXG4gICAgfVxyXG4gICAgd2luZG93LklucHV0bWFzayA9IF9pbnB1dG1hc2syLmRlZmF1bHQ7XHJcbn0sIGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xyXG4gICAgXCJ1c2Ugc3RyaWN0XCI7XHJcbiAgICB2YXIgX19XRUJQQUNLX0FNRF9ERUZJTkVfRkFDVE9SWV9fLCBfX1dFQlBBQ0tfQU1EX0RFRklORV9BUlJBWV9fLCBfX1dFQlBBQ0tfQU1EX0RFRklORV9SRVNVTFRfXztcclxuICAgIHZhciBfdHlwZW9mID0gdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIHR5cGVvZiBTeW1ib2wuaXRlcmF0b3IgPT09IFwic3ltYm9sXCIgPyBmdW5jdGlvbihvYmopIHtcclxuICAgICAgICByZXR1cm4gdHlwZW9mIG9iajtcclxuICAgIH0gOiBmdW5jdGlvbihvYmopIHtcclxuICAgICAgICByZXR1cm4gb2JqICYmIHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiBvYmouY29uc3RydWN0b3IgPT09IFN5bWJvbCAmJiBvYmogIT09IFN5bWJvbC5wcm90b3R5cGUgPyBcInN5bWJvbFwiIDogdHlwZW9mIG9iajtcclxuICAgIH07XHJcbiAgICAoZnVuY3Rpb24oZmFjdG9yeSkge1xyXG4gICAgICAgIGlmICh0cnVlKSB7XHJcbiAgICAgICAgICAgICEoX19XRUJQQUNLX0FNRF9ERUZJTkVfQVJSQVlfXyA9IFsgX193ZWJwYWNrX3JlcXVpcmVfXygyKSBdLCBfX1dFQlBBQ0tfQU1EX0RFRklORV9GQUNUT1JZX18gPSBmYWN0b3J5LCBcclxuICAgICAgICAgICAgX19XRUJQQUNLX0FNRF9ERUZJTkVfUkVTVUxUX18gPSB0eXBlb2YgX19XRUJQQUNLX0FNRF9ERUZJTkVfRkFDVE9SWV9fID09PSBcImZ1bmN0aW9uXCIgPyBfX1dFQlBBQ0tfQU1EX0RFRklORV9GQUNUT1JZX18uYXBwbHkoZXhwb3J0cywgX19XRUJQQUNLX0FNRF9ERUZJTkVfQVJSQVlfXykgOiBfX1dFQlBBQ0tfQU1EX0RFRklORV9GQUNUT1JZX18sIFxyXG4gICAgICAgICAgICBfX1dFQlBBQ0tfQU1EX0RFRklORV9SRVNVTFRfXyAhPT0gdW5kZWZpbmVkICYmIChtb2R1bGUuZXhwb3J0cyA9IF9fV0VCUEFDS19BTURfREVGSU5FX1JFU1VMVF9fKSk7XHJcbiAgICAgICAgfSBlbHNlIHt9XHJcbiAgICB9KShmdW5jdGlvbihJbnB1dG1hc2spIHtcclxuICAgICAgICBJbnB1dG1hc2suZXh0ZW5kRGVmaW5pdGlvbnMoe1xyXG4gICAgICAgICAgICBBOiB7XHJcbiAgICAgICAgICAgICAgICB2YWxpZGF0b3I6IFwiW0EtWmEtelxcdTA0MTAtXFx1MDQ0ZlxcdTA0MDFcXHUwNDUxXFx4YzAtXFx4ZmZcXHhiNV1cIixcclxuICAgICAgICAgICAgICAgIGNhc2luZzogXCJ1cHBlclwiXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIFwiJlwiOiB7XHJcbiAgICAgICAgICAgICAgICB2YWxpZGF0b3I6IFwiWzAtOUEtWmEtelxcdTA0MTAtXFx1MDQ0ZlxcdTA0MDFcXHUwNDUxXFx4YzAtXFx4ZmZcXHhiNV1cIixcclxuICAgICAgICAgICAgICAgIGNhc2luZzogXCJ1cHBlclwiXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIFwiI1wiOiB7XHJcbiAgICAgICAgICAgICAgICB2YWxpZGF0b3I6IFwiWzAtOUEtRmEtZl1cIixcclxuICAgICAgICAgICAgICAgIGNhc2luZzogXCJ1cHBlclwiXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuICAgICAgICBJbnB1dG1hc2suZXh0ZW5kQWxpYXNlcyh7XHJcbiAgICAgICAgICAgIGNzc3VuaXQ6IHtcclxuICAgICAgICAgICAgICAgIHJlZ2V4OiBcIlsrLV0/WzAtOV0rXFxcXC4/KFswLTldKyk/KHB4fGVtfHJlbXxleHwlfGlufGNtfG1tfHB0fHBjKVwiXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIHVybDoge1xyXG4gICAgICAgICAgICAgICAgcmVnZXg6IFwiKGh0dHBzP3xmdHApLy8uKlwiLFxyXG4gICAgICAgICAgICAgICAgYXV0b1VubWFzazogZmFsc2VcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgaXA6IHtcclxuICAgICAgICAgICAgICAgIG1hc2s6IFwiaVtpW2ldXS5pW2lbaV1dLmlbaVtpXV0uaVtpW2ldXVwiLFxyXG4gICAgICAgICAgICAgICAgZGVmaW5pdGlvbnM6IHtcclxuICAgICAgICAgICAgICAgICAgICBpOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhbGlkYXRvcjogZnVuY3Rpb24gdmFsaWRhdG9yKGNocnMsIG1hc2tzZXQsIHBvcywgc3RyaWN0LCBvcHRzKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAocG9zIC0gMSA+IC0xICYmIG1hc2tzZXQuYnVmZmVyW3BvcyAtIDFdICE9PSBcIi5cIikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNocnMgPSBtYXNrc2V0LmJ1ZmZlcltwb3MgLSAxXSArIGNocnM7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHBvcyAtIDIgPiAtMSAmJiBtYXNrc2V0LmJ1ZmZlcltwb3MgLSAyXSAhPT0gXCIuXCIpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2hycyA9IG1hc2tzZXQuYnVmZmVyW3BvcyAtIDJdICsgY2hycztcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgY2hycyA9IFwiMFwiICsgY2hycztcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSBjaHJzID0gXCIwMFwiICsgY2hycztcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBuZXcgUmVnRXhwKFwiMjVbMC01XXwyWzAtNF1bMC05XXxbMDFdWzAtOV1bMC05XVwiKS50ZXN0KGNocnMpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgIG9uVW5NYXNrOiBmdW5jdGlvbiBvblVuTWFzayhtYXNrZWRWYWx1ZSwgdW5tYXNrZWRWYWx1ZSwgb3B0cykge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBtYXNrZWRWYWx1ZTtcclxuICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICBpbnB1dG1vZGU6IFwibnVtZXJpY1wiXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIGVtYWlsOiB7XHJcbiAgICAgICAgICAgICAgICBtYXNrOiBcIip7MSw2NH1bLip7MSw2NH1dWy4qezEsNjR9XVsuKnsxLDYzfV1ALXsxLDYzfS4tezEsNjN9Wy4tezEsNjN9XVsuLXsxLDYzfV1cIixcclxuICAgICAgICAgICAgICAgIGdyZWVkeTogZmFsc2UsXHJcbiAgICAgICAgICAgICAgICBjYXNpbmc6IFwibG93ZXJcIixcclxuICAgICAgICAgICAgICAgIG9uQmVmb3JlUGFzdGU6IGZ1bmN0aW9uIG9uQmVmb3JlUGFzdGUocGFzdGVkVmFsdWUsIG9wdHMpIHtcclxuICAgICAgICAgICAgICAgICAgICBwYXN0ZWRWYWx1ZSA9IHBhc3RlZFZhbHVlLnRvTG93ZXJDYXNlKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHBhc3RlZFZhbHVlLnJlcGxhY2UoXCJtYWlsdG86XCIsIFwiXCIpO1xyXG4gICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgIGRlZmluaXRpb25zOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgXCIqXCI6IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFsaWRhdG9yOiBcIlswLTlcXHVmZjExLVxcdWZmMTlBLVphLXpcXHUwNDEwLVxcdTA0NGZcXHUwNDAxXFx1MDQ1MVxceGMwLVxceGZmXFx4YjUhIyQlJicqKy89P15fYHt8fX4tXVwiXHJcbiAgICAgICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgICAgICBcIi1cIjoge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YWxpZGF0b3I6IFwiWzAtOUEtWmEtei1dXCJcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgb25Vbk1hc2s6IGZ1bmN0aW9uIG9uVW5NYXNrKG1hc2tlZFZhbHVlLCB1bm1hc2tlZFZhbHVlLCBvcHRzKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG1hc2tlZFZhbHVlO1xyXG4gICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgIGlucHV0bW9kZTogXCJlbWFpbFwiXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIG1hYzoge1xyXG4gICAgICAgICAgICAgICAgbWFzazogXCIjIzojIzojIzojIzojIzojI1wiXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIHZpbjoge1xyXG4gICAgICAgICAgICAgICAgbWFzazogXCJWezEzfTl7NH1cIixcclxuICAgICAgICAgICAgICAgIGRlZmluaXRpb25zOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgVjoge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YWxpZGF0b3I6IFwiW0EtSEotTlBSLVphLWhqLW5wci16XFxcXGRdXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2luZzogXCJ1cHBlclwiXHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgIGNsZWFySW5jb21wbGV0ZTogdHJ1ZSxcclxuICAgICAgICAgICAgICAgIGF1dG9Vbm1hc2s6IHRydWVcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIHJldHVybiBJbnB1dG1hc2s7XHJcbiAgICB9KTtcclxufSwgZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XHJcbiAgICBcInVzZSBzdHJpY3RcIjtcclxuICAgIHZhciBfX1dFQlBBQ0tfQU1EX0RFRklORV9GQUNUT1JZX18sIF9fV0VCUEFDS19BTURfREVGSU5FX0FSUkFZX18sIF9fV0VCUEFDS19BTURfREVGSU5FX1JFU1VMVF9fO1xyXG4gICAgdmFyIF90eXBlb2YgPSB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgdHlwZW9mIFN5bWJvbC5pdGVyYXRvciA9PT0gXCJzeW1ib2xcIiA/IGZ1bmN0aW9uKG9iaikge1xyXG4gICAgICAgIHJldHVybiB0eXBlb2Ygb2JqO1xyXG4gICAgfSA6IGZ1bmN0aW9uKG9iaikge1xyXG4gICAgICAgIHJldHVybiBvYmogJiYgdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIG9iai5jb25zdHJ1Y3RvciA9PT0gU3ltYm9sICYmIG9iaiAhPT0gU3ltYm9sLnByb3RvdHlwZSA/IFwic3ltYm9sXCIgOiB0eXBlb2Ygb2JqO1xyXG4gICAgfTtcclxuICAgIChmdW5jdGlvbihmYWN0b3J5KSB7XHJcbiAgICAgICAgaWYgKHRydWUpIHtcclxuICAgICAgICAgICAgIShfX1dFQlBBQ0tfQU1EX0RFRklORV9BUlJBWV9fID0gWyBfX3dlYnBhY2tfcmVxdWlyZV9fKDMpLCBfX3dlYnBhY2tfcmVxdWlyZV9fKDUpIF0sIFxyXG4gICAgICAgICAgICBfX1dFQlBBQ0tfQU1EX0RFRklORV9GQUNUT1JZX18gPSBmYWN0b3J5LCBfX1dFQlBBQ0tfQU1EX0RFRklORV9SRVNVTFRfXyA9IHR5cGVvZiBfX1dFQlBBQ0tfQU1EX0RFRklORV9GQUNUT1JZX18gPT09IFwiZnVuY3Rpb25cIiA/IF9fV0VCUEFDS19BTURfREVGSU5FX0ZBQ1RPUllfXy5hcHBseShleHBvcnRzLCBfX1dFQlBBQ0tfQU1EX0RFRklORV9BUlJBWV9fKSA6IF9fV0VCUEFDS19BTURfREVGSU5FX0ZBQ1RPUllfXywgXHJcbiAgICAgICAgICAgIF9fV0VCUEFDS19BTURfREVGSU5FX1JFU1VMVF9fICE9PSB1bmRlZmluZWQgJiYgKG1vZHVsZS5leHBvcnRzID0gX19XRUJQQUNLX0FNRF9ERUZJTkVfUkVTVUxUX18pKTtcclxuICAgICAgICB9IGVsc2Uge31cclxuICAgIH0pKGZ1bmN0aW9uKCQsIHdpbmRvdywgdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgdmFyIGRvY3VtZW50ID0gd2luZG93LmRvY3VtZW50LCB1YSA9IG5hdmlnYXRvci51c2VyQWdlbnQsIGllID0gdWEuaW5kZXhPZihcIk1TSUUgXCIpID4gMCB8fCB1YS5pbmRleE9mKFwiVHJpZGVudC9cIikgPiAwLCBtb2JpbGUgPSBpc0lucHV0RXZlbnRTdXBwb3J0ZWQoXCJ0b3VjaHN0YXJ0XCIpLCBpZW1vYmlsZSA9IC9pZW1vYmlsZS9pLnRlc3QodWEpLCBpcGhvbmUgPSAvaXBob25lL2kudGVzdCh1YSkgJiYgIWllbW9iaWxlO1xyXG4gICAgICAgIGZ1bmN0aW9uIElucHV0bWFzayhhbGlhcywgb3B0aW9ucywgaW50ZXJuYWwpIHtcclxuICAgICAgICAgICAgaWYgKCEodGhpcyBpbnN0YW5jZW9mIElucHV0bWFzaykpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBuZXcgSW5wdXRtYXNrKGFsaWFzLCBvcHRpb25zLCBpbnRlcm5hbCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgdGhpcy5lbCA9IHVuZGVmaW5lZDtcclxuICAgICAgICAgICAgdGhpcy5ldmVudHMgPSB7fTtcclxuICAgICAgICAgICAgdGhpcy5tYXNrc2V0ID0gdW5kZWZpbmVkO1xyXG4gICAgICAgICAgICB0aGlzLnJlZnJlc2hWYWx1ZSA9IGZhbHNlO1xyXG4gICAgICAgICAgICBpZiAoaW50ZXJuYWwgIT09IHRydWUpIHtcclxuICAgICAgICAgICAgICAgIGlmICgkLmlzUGxhaW5PYmplY3QoYWxpYXMpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgb3B0aW9ucyA9IGFsaWFzO1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoYWxpYXMpIG9wdGlvbnMuYWxpYXMgPSBhbGlhcztcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIHRoaXMub3B0cyA9ICQuZXh0ZW5kKHRydWUsIHt9LCB0aGlzLmRlZmF1bHRzLCBvcHRpb25zKTtcclxuICAgICAgICAgICAgICAgIHRoaXMubm9NYXNrc0NhY2hlID0gb3B0aW9ucyAmJiBvcHRpb25zLmRlZmluaXRpb25zICE9PSB1bmRlZmluZWQ7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnVzZXJPcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcclxuICAgICAgICAgICAgICAgIHRoaXMuaXNSVEwgPSB0aGlzLm9wdHMubnVtZXJpY0lucHV0O1xyXG4gICAgICAgICAgICAgICAgcmVzb2x2ZUFsaWFzKHRoaXMub3B0cy5hbGlhcywgb3B0aW9ucywgdGhpcy5vcHRzKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICBJbnB1dG1hc2sucHJvdG90eXBlID0ge1xyXG4gICAgICAgICAgICBkYXRhQXR0cmlidXRlOiBcImRhdGEtaW5wdXRtYXNrXCIsXHJcbiAgICAgICAgICAgIGRlZmF1bHRzOiB7XHJcbiAgICAgICAgICAgICAgICBwbGFjZWhvbGRlcjogXCJfXCIsXHJcbiAgICAgICAgICAgICAgICBvcHRpb25hbG1hcmtlcjogWyBcIltcIiwgXCJdXCIgXSxcclxuICAgICAgICAgICAgICAgIHF1YW50aWZpZXJtYXJrZXI6IFsgXCJ7XCIsIFwifVwiIF0sXHJcbiAgICAgICAgICAgICAgICBncm91cG1hcmtlcjogWyBcIihcIiwgXCIpXCIgXSxcclxuICAgICAgICAgICAgICAgIGFsdGVybmF0b3JtYXJrZXI6IFwifFwiLFxyXG4gICAgICAgICAgICAgICAgZXNjYXBlQ2hhcjogXCJcXFxcXCIsXHJcbiAgICAgICAgICAgICAgICBtYXNrOiBudWxsLFxyXG4gICAgICAgICAgICAgICAgcmVnZXg6IG51bGwsXHJcbiAgICAgICAgICAgICAgICBvbmNvbXBsZXRlOiAkLm5vb3AsXHJcbiAgICAgICAgICAgICAgICBvbmluY29tcGxldGU6ICQubm9vcCxcclxuICAgICAgICAgICAgICAgIG9uY2xlYXJlZDogJC5ub29wLFxyXG4gICAgICAgICAgICAgICAgcmVwZWF0OiAwLFxyXG4gICAgICAgICAgICAgICAgZ3JlZWR5OiBmYWxzZSxcclxuICAgICAgICAgICAgICAgIGF1dG9Vbm1hc2s6IGZhbHNlLFxyXG4gICAgICAgICAgICAgICAgcmVtb3ZlTWFza09uU3VibWl0OiBmYWxzZSxcclxuICAgICAgICAgICAgICAgIGNsZWFyTWFza09uTG9zdEZvY3VzOiB0cnVlLFxyXG4gICAgICAgICAgICAgICAgaW5zZXJ0TW9kZTogdHJ1ZSxcclxuICAgICAgICAgICAgICAgIGNsZWFySW5jb21wbGV0ZTogZmFsc2UsXHJcbiAgICAgICAgICAgICAgICBhbGlhczogbnVsbCxcclxuICAgICAgICAgICAgICAgIG9uS2V5RG93bjogJC5ub29wLFxyXG4gICAgICAgICAgICAgICAgb25CZWZvcmVNYXNrOiBudWxsLFxyXG4gICAgICAgICAgICAgICAgb25CZWZvcmVQYXN0ZTogZnVuY3Rpb24gb25CZWZvcmVQYXN0ZShwYXN0ZWRWYWx1ZSwgb3B0cykge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAkLmlzRnVuY3Rpb24ob3B0cy5vbkJlZm9yZU1hc2spID8gb3B0cy5vbkJlZm9yZU1hc2suY2FsbCh0aGlzLCBwYXN0ZWRWYWx1ZSwgb3B0cykgOiBwYXN0ZWRWYWx1ZTtcclxuICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICBvbkJlZm9yZVdyaXRlOiBudWxsLFxyXG4gICAgICAgICAgICAgICAgb25Vbk1hc2s6IG51bGwsXHJcbiAgICAgICAgICAgICAgICBzaG93TWFza09uRm9jdXM6IHRydWUsXHJcbiAgICAgICAgICAgICAgICBzaG93TWFza09uSG92ZXI6IHRydWUsXHJcbiAgICAgICAgICAgICAgICBvbktleVZhbGlkYXRpb246ICQubm9vcCxcclxuICAgICAgICAgICAgICAgIHNraXBPcHRpb25hbFBhcnRDaGFyYWN0ZXI6IFwiIFwiLFxyXG4gICAgICAgICAgICAgICAgbnVtZXJpY0lucHV0OiBmYWxzZSxcclxuICAgICAgICAgICAgICAgIHJpZ2h0QWxpZ246IGZhbHNlLFxyXG4gICAgICAgICAgICAgICAgdW5kb09uRXNjYXBlOiB0cnVlLFxyXG4gICAgICAgICAgICAgICAgcmFkaXhQb2ludDogXCJcIixcclxuICAgICAgICAgICAgICAgIF9yYWRpeERhbmNlOiBmYWxzZSxcclxuICAgICAgICAgICAgICAgIGdyb3VwU2VwYXJhdG9yOiBcIlwiLFxyXG4gICAgICAgICAgICAgICAga2VlcFN0YXRpYzogbnVsbCxcclxuICAgICAgICAgICAgICAgIHBvc2l0aW9uQ2FyZXRPblRhYjogdHJ1ZSxcclxuICAgICAgICAgICAgICAgIHRhYlRocm91Z2g6IGZhbHNlLFxyXG4gICAgICAgICAgICAgICAgc3VwcG9ydHNJbnB1dFR5cGU6IFsgXCJ0ZXh0XCIsIFwidGVsXCIsIFwidXJsXCIsIFwicGFzc3dvcmRcIiwgXCJzZWFyY2hcIiBdLFxyXG4gICAgICAgICAgICAgICAgaWdub3JhYmxlczogWyA4LCA5LCAxMywgMTksIDI3LCAzMywgMzQsIDM1LCAzNiwgMzcsIDM4LCAzOSwgNDAsIDQ1LCA0NiwgOTMsIDExMiwgMTEzLCAxMTQsIDExNSwgMTE2LCAxMTcsIDExOCwgMTE5LCAxMjAsIDEyMSwgMTIyLCAxMjMsIDAsIDIyOSBdLFxyXG4gICAgICAgICAgICAgICAgaXNDb21wbGV0ZTogbnVsbCxcclxuICAgICAgICAgICAgICAgIHByZVZhbGlkYXRpb246IG51bGwsXHJcbiAgICAgICAgICAgICAgICBwb3N0VmFsaWRhdGlvbjogbnVsbCxcclxuICAgICAgICAgICAgICAgIHN0YXRpY0RlZmluaXRpb25TeW1ib2w6IHVuZGVmaW5lZCxcclxuICAgICAgICAgICAgICAgIGppdE1hc2tpbmc6IGZhbHNlLFxyXG4gICAgICAgICAgICAgICAgbnVsbGFibGU6IHRydWUsXHJcbiAgICAgICAgICAgICAgICBpbnB1dEV2ZW50T25seTogZmFsc2UsXHJcbiAgICAgICAgICAgICAgICBub1ZhbHVlUGF0Y2hpbmc6IGZhbHNlLFxyXG4gICAgICAgICAgICAgICAgcG9zaXRpb25DYXJldE9uQ2xpY2s6IFwibHZwXCIsXHJcbiAgICAgICAgICAgICAgICBjYXNpbmc6IG51bGwsXHJcbiAgICAgICAgICAgICAgICBpbnB1dG1vZGU6IFwidmVyYmF0aW1cIixcclxuICAgICAgICAgICAgICAgIGNvbG9yTWFzazogZmFsc2UsXHJcbiAgICAgICAgICAgICAgICBkaXNhYmxlUHJlZGljdGl2ZVRleHQ6IGZhbHNlLFxyXG4gICAgICAgICAgICAgICAgaW1wb3J0RGF0YUF0dHJpYnV0ZXM6IHRydWUsXHJcbiAgICAgICAgICAgICAgICBzaGlmdFBvc2l0aW9uczogdHJ1ZVxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBkZWZpbml0aW9uczoge1xyXG4gICAgICAgICAgICAgICAgOToge1xyXG4gICAgICAgICAgICAgICAgICAgIHZhbGlkYXRvcjogXCJbMC05XFx1ZmYxMS1cXHVmZjE5XVwiLFxyXG4gICAgICAgICAgICAgICAgICAgIGRlZmluaXRpb25TeW1ib2w6IFwiKlwiXHJcbiAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgYToge1xyXG4gICAgICAgICAgICAgICAgICAgIHZhbGlkYXRvcjogXCJbQS1aYS16XFx1MDQxMC1cXHUwNDRmXFx1MDQwMVxcdTA0NTFcXHhjMC1cXHhmZlxceGI1XVwiLFxyXG4gICAgICAgICAgICAgICAgICAgIGRlZmluaXRpb25TeW1ib2w6IFwiKlwiXHJcbiAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgXCIqXCI6IHtcclxuICAgICAgICAgICAgICAgICAgICB2YWxpZGF0b3I6IFwiWzAtOVxcdWZmMTEtXFx1ZmYxOUEtWmEtelxcdTA0MTAtXFx1MDQ0ZlxcdTA0MDFcXHUwNDUxXFx4YzAtXFx4ZmZcXHhiNV1cIlxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBhbGlhc2VzOiB7fSxcclxuICAgICAgICAgICAgbWFza3NDYWNoZToge30sXHJcbiAgICAgICAgICAgIG1hc2s6IGZ1bmN0aW9uIG1hc2soZWxlbXMpIHtcclxuICAgICAgICAgICAgICAgIHZhciB0aGF0ID0gdGhpcztcclxuICAgICAgICAgICAgICAgIGZ1bmN0aW9uIGltcG9ydEF0dHJpYnV0ZU9wdGlvbnMobnB0LCBvcHRzLCB1c2VyT3B0aW9ucywgZGF0YUF0dHJpYnV0ZSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChvcHRzLmltcG9ydERhdGFBdHRyaWJ1dGVzID09PSB0cnVlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBpbXBvcnRPcHRpb24gPSBmdW5jdGlvbiBpbXBvcnRPcHRpb24ob3B0aW9uLCBvcHRpb25EYXRhKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBvcHRpb25EYXRhID0gb3B0aW9uRGF0YSAhPT0gdW5kZWZpbmVkID8gb3B0aW9uRGF0YSA6IG5wdC5nZXRBdHRyaWJ1dGUoZGF0YUF0dHJpYnV0ZSArIFwiLVwiICsgb3B0aW9uKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChvcHRpb25EYXRhICE9PSBudWxsKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBvcHRpb25EYXRhID09PSBcInN0cmluZ1wiKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChvcHRpb24uaW5kZXhPZihcIm9uXCIpID09PSAwKSBvcHRpb25EYXRhID0gd2luZG93W29wdGlvbkRhdGFdOyBlbHNlIGlmIChvcHRpb25EYXRhID09PSBcImZhbHNlXCIpIG9wdGlvbkRhdGEgPSBmYWxzZTsgZWxzZSBpZiAob3B0aW9uRGF0YSA9PT0gXCJ0cnVlXCIpIG9wdGlvbkRhdGEgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB1c2VyT3B0aW9uc1tvcHRpb25dID0gb3B0aW9uRGF0YTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGF0dHJPcHRpb25zID0gbnB0LmdldEF0dHJpYnV0ZShkYXRhQXR0cmlidXRlKSwgb3B0aW9uLCBkYXRhb3B0aW9ucywgb3B0aW9uRGF0YSwgcDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGF0dHJPcHRpb25zICYmIGF0dHJPcHRpb25zICE9PSBcIlwiKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhdHRyT3B0aW9ucyA9IGF0dHJPcHRpb25zLnJlcGxhY2UoLycvZywgJ1wiJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhb3B0aW9ucyA9IEpTT04ucGFyc2UoXCJ7XCIgKyBhdHRyT3B0aW9ucyArIFwifVwiKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoZGF0YW9wdGlvbnMpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9wdGlvbkRhdGEgPSB1bmRlZmluZWQ7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3IgKHAgaW4gZGF0YW9wdGlvbnMpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAocC50b0xvd2VyQ2FzZSgpID09PSBcImFsaWFzXCIpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb3B0aW9uRGF0YSA9IGRhdGFvcHRpb25zW3BdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgaW1wb3J0T3B0aW9uKFwiYWxpYXNcIiwgb3B0aW9uRGF0YSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh1c2VyT3B0aW9ucy5hbGlhcykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVzb2x2ZUFsaWFzKHVzZXJPcHRpb25zLmFsaWFzLCB1c2VyT3B0aW9ucywgb3B0cyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgZm9yIChvcHRpb24gaW4gb3B0cykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGRhdGFvcHRpb25zKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb3B0aW9uRGF0YSA9IHVuZGVmaW5lZDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3IgKHAgaW4gZGF0YW9wdGlvbnMpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHAudG9Mb3dlckNhc2UoKSA9PT0gb3B0aW9uLnRvTG93ZXJDYXNlKCkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9wdGlvbkRhdGEgPSBkYXRhb3B0aW9uc1twXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaW1wb3J0T3B0aW9uKG9wdGlvbiwgb3B0aW9uRGF0YSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgJC5leHRlbmQodHJ1ZSwgb3B0cywgdXNlck9wdGlvbnMpO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChucHQuZGlyID09PSBcInJ0bFwiIHx8IG9wdHMucmlnaHRBbGlnbikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBucHQuc3R5bGUudGV4dEFsaWduID0gXCJyaWdodFwiO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBpZiAobnB0LmRpciA9PT0gXCJydGxcIiB8fCBvcHRzLm51bWVyaWNJbnB1dCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBucHQuZGlyID0gXCJsdHJcIjtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbnB0LnJlbW92ZUF0dHJpYnV0ZShcImRpclwiKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgb3B0cy5pc1JUTCA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBPYmplY3Qua2V5cyh1c2VyT3B0aW9ucykubGVuZ3RoO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBlbGVtcyA9PT0gXCJzdHJpbmdcIikge1xyXG4gICAgICAgICAgICAgICAgICAgIGVsZW1zID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoZWxlbXMpIHx8IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoZWxlbXMpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZWxlbXMgPSBlbGVtcy5ub2RlTmFtZSA/IFsgZWxlbXMgXSA6IGVsZW1zO1xyXG4gICAgICAgICAgICAgICAgJC5lYWNoKGVsZW1zLCBmdW5jdGlvbihuZHgsIGVsKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIHNjb3BlZE9wdHMgPSAkLmV4dGVuZCh0cnVlLCB7fSwgdGhhdC5vcHRzKTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoaW1wb3J0QXR0cmlidXRlT3B0aW9ucyhlbCwgc2NvcGVkT3B0cywgJC5leHRlbmQodHJ1ZSwge30sIHRoYXQudXNlck9wdGlvbnMpLCB0aGF0LmRhdGFBdHRyaWJ1dGUpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBtYXNrc2V0ID0gZ2VuZXJhdGVNYXNrU2V0KHNjb3BlZE9wdHMsIHRoYXQubm9NYXNrc0NhY2hlKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG1hc2tzZXQgIT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGVsLmlucHV0bWFzayAhPT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZWwuaW5wdXRtYXNrLm9wdHMuYXV0b1VubWFzayA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZWwuaW5wdXRtYXNrLnJlbW92ZSgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZWwuaW5wdXRtYXNrID0gbmV3IElucHV0bWFzayh1bmRlZmluZWQsIHVuZGVmaW5lZCwgdHJ1ZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbC5pbnB1dG1hc2sub3B0cyA9IHNjb3BlZE9wdHM7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbC5pbnB1dG1hc2subm9NYXNrc0NhY2hlID0gdGhhdC5ub01hc2tzQ2FjaGU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbC5pbnB1dG1hc2sudXNlck9wdGlvbnMgPSAkLmV4dGVuZCh0cnVlLCB7fSwgdGhhdC51c2VyT3B0aW9ucyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbC5pbnB1dG1hc2suaXNSVEwgPSBzY29wZWRPcHRzLmlzUlRMIHx8IHNjb3BlZE9wdHMubnVtZXJpY0lucHV0O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZWwuaW5wdXRtYXNrLmVsID0gZWw7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbC5pbnB1dG1hc2subWFza3NldCA9IG1hc2tzZXQ7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkLmRhdGEoZWwsIFwiX2lucHV0bWFza19vcHRzXCIsIHNjb3BlZE9wdHMpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbWFza1Njb3BlLmNhbGwoZWwuaW5wdXRtYXNrLCB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYWN0aW9uOiBcIm1hc2tcIlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgIHJldHVybiBlbGVtcyAmJiBlbGVtc1swXSA/IGVsZW1zWzBdLmlucHV0bWFzayB8fCB0aGlzIDogdGhpcztcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgb3B0aW9uOiBmdW5jdGlvbiBvcHRpb24ob3B0aW9ucywgbm9yZW1hc2spIHtcclxuICAgICAgICAgICAgICAgIGlmICh0eXBlb2Ygb3B0aW9ucyA9PT0gXCJzdHJpbmdcIikge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLm9wdHNbb3B0aW9uc107XHJcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKCh0eXBlb2Ygb3B0aW9ucyA9PT0gXCJ1bmRlZmluZWRcIiA/IFwidW5kZWZpbmVkXCIgOiBfdHlwZW9mKG9wdGlvbnMpKSA9PT0gXCJvYmplY3RcIikge1xyXG4gICAgICAgICAgICAgICAgICAgICQuZXh0ZW5kKHRoaXMudXNlck9wdGlvbnMsIG9wdGlvbnMpO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLmVsICYmIG5vcmVtYXNrICE9PSB0cnVlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMubWFzayh0aGlzLmVsKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIHVubWFza2VkdmFsdWU6IGZ1bmN0aW9uIHVubWFza2VkdmFsdWUodmFsdWUpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMubWFza3NldCA9IHRoaXMubWFza3NldCB8fCBnZW5lcmF0ZU1hc2tTZXQodGhpcy5vcHRzLCB0aGlzLm5vTWFza3NDYWNoZSk7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gbWFza1Njb3BlLmNhbGwodGhpcywge1xyXG4gICAgICAgICAgICAgICAgICAgIGFjdGlvbjogXCJ1bm1hc2tlZHZhbHVlXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgdmFsdWU6IHZhbHVlXHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgcmVtb3ZlOiBmdW5jdGlvbiByZW1vdmUoKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gbWFza1Njb3BlLmNhbGwodGhpcywge1xyXG4gICAgICAgICAgICAgICAgICAgIGFjdGlvbjogXCJyZW1vdmVcIlxyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIGdldGVtcHR5bWFzazogZnVuY3Rpb24gZ2V0ZW1wdHltYXNrKCkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5tYXNrc2V0ID0gdGhpcy5tYXNrc2V0IHx8IGdlbmVyYXRlTWFza1NldCh0aGlzLm9wdHMsIHRoaXMubm9NYXNrc0NhY2hlKTtcclxuICAgICAgICAgICAgICAgIHJldHVybiBtYXNrU2NvcGUuY2FsbCh0aGlzLCB7XHJcbiAgICAgICAgICAgICAgICAgICAgYWN0aW9uOiBcImdldGVtcHR5bWFza1wiXHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgaGFzTWFza2VkVmFsdWU6IGZ1bmN0aW9uIGhhc01hc2tlZFZhbHVlKCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuICF0aGlzLm9wdHMuYXV0b1VubWFzaztcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgaXNDb21wbGV0ZTogZnVuY3Rpb24gaXNDb21wbGV0ZSgpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMubWFza3NldCA9IHRoaXMubWFza3NldCB8fCBnZW5lcmF0ZU1hc2tTZXQodGhpcy5vcHRzLCB0aGlzLm5vTWFza3NDYWNoZSk7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gbWFza1Njb3BlLmNhbGwodGhpcywge1xyXG4gICAgICAgICAgICAgICAgICAgIGFjdGlvbjogXCJpc0NvbXBsZXRlXCJcclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBnZXRtZXRhZGF0YTogZnVuY3Rpb24gZ2V0bWV0YWRhdGEoKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLm1hc2tzZXQgPSB0aGlzLm1hc2tzZXQgfHwgZ2VuZXJhdGVNYXNrU2V0KHRoaXMub3B0cywgdGhpcy5ub01hc2tzQ2FjaGUpO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIG1hc2tTY29wZS5jYWxsKHRoaXMsIHtcclxuICAgICAgICAgICAgICAgICAgICBhY3Rpb246IFwiZ2V0bWV0YWRhdGFcIlxyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIGlzVmFsaWQ6IGZ1bmN0aW9uIGlzVmFsaWQodmFsdWUpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMubWFza3NldCA9IHRoaXMubWFza3NldCB8fCBnZW5lcmF0ZU1hc2tTZXQodGhpcy5vcHRzLCB0aGlzLm5vTWFza3NDYWNoZSk7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gbWFza1Njb3BlLmNhbGwodGhpcywge1xyXG4gICAgICAgICAgICAgICAgICAgIGFjdGlvbjogXCJpc1ZhbGlkXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgdmFsdWU6IHZhbHVlXHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgZm9ybWF0OiBmdW5jdGlvbiBmb3JtYXQodmFsdWUsIG1ldGFkYXRhKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLm1hc2tzZXQgPSB0aGlzLm1hc2tzZXQgfHwgZ2VuZXJhdGVNYXNrU2V0KHRoaXMub3B0cywgdGhpcy5ub01hc2tzQ2FjaGUpO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIG1hc2tTY29wZS5jYWxsKHRoaXMsIHtcclxuICAgICAgICAgICAgICAgICAgICBhY3Rpb246IFwiZm9ybWF0XCIsXHJcbiAgICAgICAgICAgICAgICAgICAgdmFsdWU6IHZhbHVlLFxyXG4gICAgICAgICAgICAgICAgICAgIG1ldGFkYXRhOiBtZXRhZGF0YVxyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIHNldFZhbHVlOiBmdW5jdGlvbiBzZXRWYWx1ZSh2YWx1ZSkge1xyXG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuZWwpIHtcclxuICAgICAgICAgICAgICAgICAgICAkKHRoaXMuZWwpLnRyaWdnZXIoXCJzZXR2YWx1ZVwiLCBbIHZhbHVlIF0pO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBhbmFseXNlTWFzazogZnVuY3Rpb24gYW5hbHlzZU1hc2sobWFzaywgcmVnZXhNYXNrLCBvcHRzKSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgdG9rZW5pemVyID0gLyg/Ols/KitdfFxce1swLTlcXCtcXCpdKyg/OixbMC05XFwrXFwqXSopPyg/OlxcfFswLTlcXCtcXCpdKik/XFx9KXxbXi4/KiteJHtbXSgpfFxcXFxdK3wuL2csIHJlZ2V4VG9rZW5pemVyID0gL1xcW1xcXj9dPyg/OlteXFxcXFxcXV0rfFxcXFxbXFxTXFxzXT8pKl0/fFxcXFwoPzowKD86WzAtM11bMC03XXswLDJ9fFs0LTddWzAtN10/KT98WzEtOV1bMC05XSp8eFswLTlBLUZhLWZdezJ9fHVbMC05QS1GYS1mXXs0fXxjW0EtWmEtel18W1xcU1xcc10/KXxcXCgoPzpcXD9bOj0hXT8pP3woPzpbPyorXXxcXHtbMC05XSsoPzosWzAtOV0qKT9cXH0pXFw/P3xbXi4/KiteJHtbKCl8XFxcXF0rfC4vZywgZXNjYXBlZCA9IGZhbHNlLCBjdXJyZW50VG9rZW4gPSBuZXcgTWFza1Rva2VuKCksIG1hdGNoLCBtLCBvcGVuZW5pbmdzID0gW10sIG1hc2tUb2tlbnMgPSBbXSwgb3BlbmluZ1Rva2VuLCBjdXJyZW50T3BlbmluZ1Rva2VuLCBhbHRlcm5hdG9yLCBsYXN0TWF0Y2gsIGdyb3VwVG9rZW47XHJcbiAgICAgICAgICAgICAgICBmdW5jdGlvbiBNYXNrVG9rZW4oaXNHcm91cCwgaXNPcHRpb25hbCwgaXNRdWFudGlmaWVyLCBpc0FsdGVybmF0b3IpIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLm1hdGNoZXMgPSBbXTtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLm9wZW5Hcm91cCA9IGlzR3JvdXAgfHwgZmFsc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5hbHRlcm5hdG9yR3JvdXAgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLmlzR3JvdXAgPSBpc0dyb3VwIHx8IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuaXNPcHRpb25hbCA9IGlzT3B0aW9uYWwgfHwgZmFsc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5pc1F1YW50aWZpZXIgPSBpc1F1YW50aWZpZXIgfHwgZmFsc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5pc0FsdGVybmF0b3IgPSBpc0FsdGVybmF0b3IgfHwgZmFsc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5xdWFudGlmaWVyID0ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBtaW46IDEsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG1heDogMVxyXG4gICAgICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBmdW5jdGlvbiBpbnNlcnRUZXN0RGVmaW5pdGlvbihtdG9rZW4sIGVsZW1lbnQsIHBvc2l0aW9uKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcG9zaXRpb24gPSBwb3NpdGlvbiAhPT0gdW5kZWZpbmVkID8gcG9zaXRpb24gOiBtdG9rZW4ubWF0Y2hlcy5sZW5ndGg7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIHByZXZNYXRjaCA9IG10b2tlbi5tYXRjaGVzW3Bvc2l0aW9uIC0gMV07XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHJlZ2V4TWFzaykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoZWxlbWVudC5pbmRleE9mKFwiW1wiKSA9PT0gMCB8fCBlc2NhcGVkICYmIC9cXFxcZHxcXFxcc3xcXFxcd10vaS50ZXN0KGVsZW1lbnQpIHx8IGVsZW1lbnQgPT09IFwiLlwiKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtdG9rZW4ubWF0Y2hlcy5zcGxpY2UocG9zaXRpb24rKywgMCwge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZuOiBuZXcgUmVnRXhwKGVsZW1lbnQsIG9wdHMuY2FzaW5nID8gXCJpXCIgOiBcIlwiKSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvcHRpb25hbGl0eTogZmFsc2UsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbmV3QmxvY2tNYXJrZXI6IHByZXZNYXRjaCA9PT0gdW5kZWZpbmVkID8gXCJtYXN0ZXJcIiA6IHByZXZNYXRjaC5kZWYgIT09IGVsZW1lbnQsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzaW5nOiBudWxsLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRlZjogZWxlbWVudCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwbGFjZWhvbGRlcjogdW5kZWZpbmVkLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5hdGl2ZURlZjogZWxlbWVudFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoZXNjYXBlZCkgZWxlbWVudCA9IGVsZW1lbnRbZWxlbWVudC5sZW5ndGggLSAxXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICQuZWFjaChlbGVtZW50LnNwbGl0KFwiXCIpLCBmdW5jdGlvbihuZHgsIGxtbnQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwcmV2TWF0Y2ggPSBtdG9rZW4ubWF0Y2hlc1twb3NpdGlvbiAtIDFdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG10b2tlbi5tYXRjaGVzLnNwbGljZShwb3NpdGlvbisrLCAwLCB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZuOiBudWxsLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvcHRpb25hbGl0eTogZmFsc2UsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5ld0Jsb2NrTWFya2VyOiBwcmV2TWF0Y2ggPT09IHVuZGVmaW5lZCA/IFwibWFzdGVyXCIgOiBwcmV2TWF0Y2guZGVmICE9PSBsbW50ICYmIHByZXZNYXRjaC5mbiAhPT0gbnVsbCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzaW5nOiBudWxsLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkZWY6IG9wdHMuc3RhdGljRGVmaW5pdGlvblN5bWJvbCB8fCBsbW50LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwbGFjZWhvbGRlcjogb3B0cy5zdGF0aWNEZWZpbml0aW9uU3ltYm9sICE9PSB1bmRlZmluZWQgPyBsbW50IDogdW5kZWZpbmVkLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuYXRpdmVEZWY6IChlc2NhcGVkID8gXCInXCIgOiBcIlwiKSArIGxtbnRcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGVzY2FwZWQgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgbWFza2RlZiA9IChvcHRzLmRlZmluaXRpb25zID8gb3B0cy5kZWZpbml0aW9uc1tlbGVtZW50XSA6IHVuZGVmaW5lZCkgfHwgSW5wdXRtYXNrLnByb3RvdHlwZS5kZWZpbml0aW9uc1tlbGVtZW50XTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG1hc2tkZWYgJiYgIWVzY2FwZWQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG10b2tlbi5tYXRjaGVzLnNwbGljZShwb3NpdGlvbisrLCAwLCB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZm46IG1hc2tkZWYudmFsaWRhdG9yID8gdHlwZW9mIG1hc2tkZWYudmFsaWRhdG9yID09IFwic3RyaW5nXCIgPyBuZXcgUmVnRXhwKG1hc2tkZWYudmFsaWRhdG9yLCBvcHRzLmNhc2luZyA/IFwiaVwiIDogXCJcIikgOiBuZXcgZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMudGVzdCA9IG1hc2tkZWYudmFsaWRhdG9yO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0oKSA6IG5ldyBSZWdFeHAoXCIuXCIpLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9wdGlvbmFsaXR5OiBmYWxzZSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuZXdCbG9ja01hcmtlcjogcHJldk1hdGNoID09PSB1bmRlZmluZWQgPyBcIm1hc3RlclwiIDogcHJldk1hdGNoLmRlZiAhPT0gKG1hc2tkZWYuZGVmaW5pdGlvblN5bWJvbCB8fCBlbGVtZW50KSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNpbmc6IG1hc2tkZWYuY2FzaW5nLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRlZjogbWFza2RlZi5kZWZpbml0aW9uU3ltYm9sIHx8IGVsZW1lbnQsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcGxhY2Vob2xkZXI6IG1hc2tkZWYucGxhY2Vob2xkZXIsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbmF0aXZlRGVmOiBlbGVtZW50XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG10b2tlbi5tYXRjaGVzLnNwbGljZShwb3NpdGlvbisrLCAwLCB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZm46IG51bGwsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb3B0aW9uYWxpdHk6IGZhbHNlLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5ld0Jsb2NrTWFya2VyOiBwcmV2TWF0Y2ggPT09IHVuZGVmaW5lZCA/IFwibWFzdGVyXCIgOiBwcmV2TWF0Y2guZGVmICE9PSBlbGVtZW50ICYmIHByZXZNYXRjaC5mbiAhPT0gbnVsbCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNpbmc6IG51bGwsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGVmOiBvcHRzLnN0YXRpY0RlZmluaXRpb25TeW1ib2wgfHwgZWxlbWVudCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwbGFjZWhvbGRlcjogb3B0cy5zdGF0aWNEZWZpbml0aW9uU3ltYm9sICE9PSB1bmRlZmluZWQgPyBlbGVtZW50IDogdW5kZWZpbmVkLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5hdGl2ZURlZjogKGVzY2FwZWQgPyBcIidcIiA6IFwiXCIpICsgZWxlbWVudFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlc2NhcGVkID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBmdW5jdGlvbiB2ZXJpZnlHcm91cE1hcmtlcihtYXNrVG9rZW4pIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAobWFza1Rva2VuICYmIG1hc2tUb2tlbi5tYXRjaGVzKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICQuZWFjaChtYXNrVG9rZW4ubWF0Y2hlcywgZnVuY3Rpb24obmR4LCB0b2tlbikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIG5leHRUb2tlbiA9IG1hc2tUb2tlbi5tYXRjaGVzW25keCArIDFdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKChuZXh0VG9rZW4gPT09IHVuZGVmaW5lZCB8fCBuZXh0VG9rZW4ubWF0Y2hlcyA9PT0gdW5kZWZpbmVkIHx8IG5leHRUb2tlbi5pc1F1YW50aWZpZXIgPT09IGZhbHNlKSAmJiB0b2tlbiAmJiB0b2tlbi5pc0dyb3VwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdG9rZW4uaXNHcm91cCA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICghcmVnZXhNYXNrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGluc2VydFRlc3REZWZpbml0aW9uKHRva2VuLCBvcHRzLmdyb3VwbWFya2VyWzBdLCAwKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRva2VuLm9wZW5Hcm91cCAhPT0gdHJ1ZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaW5zZXJ0VGVzdERlZmluaXRpb24odG9rZW4sIG9wdHMuZ3JvdXBtYXJrZXJbMV0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmVyaWZ5R3JvdXBNYXJrZXIodG9rZW4pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBmdW5jdGlvbiBkZWZhdWx0Q2FzZSgpIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAob3BlbmVuaW5ncy5sZW5ndGggPiAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGN1cnJlbnRPcGVuaW5nVG9rZW4gPSBvcGVuZW5pbmdzW29wZW5lbmluZ3MubGVuZ3RoIC0gMV07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGluc2VydFRlc3REZWZpbml0aW9uKGN1cnJlbnRPcGVuaW5nVG9rZW4sIG0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoY3VycmVudE9wZW5pbmdUb2tlbi5pc0FsdGVybmF0b3IpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFsdGVybmF0b3IgPSBvcGVuZW5pbmdzLnBvcCgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgbW5keCA9IDA7IG1uZHggPCBhbHRlcm5hdG9yLm1hdGNoZXMubGVuZ3RoOyBtbmR4KyspIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoYWx0ZXJuYXRvci5tYXRjaGVzW21uZHhdLmlzR3JvdXApIGFsdGVybmF0b3IubWF0Y2hlc1ttbmR4XS5pc0dyb3VwID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAob3BlbmVuaW5ncy5sZW5ndGggPiAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY3VycmVudE9wZW5pbmdUb2tlbiA9IG9wZW5lbmluZ3Nbb3BlbmVuaW5ncy5sZW5ndGggLSAxXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjdXJyZW50T3BlbmluZ1Rva2VuLm1hdGNoZXMucHVzaChhbHRlcm5hdG9yKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY3VycmVudFRva2VuLm1hdGNoZXMucHVzaChhbHRlcm5hdG9yKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGluc2VydFRlc3REZWZpbml0aW9uKGN1cnJlbnRUb2tlbiwgbSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZnVuY3Rpb24gcmV2ZXJzZVRva2VucyhtYXNrVG9rZW4pIHtcclxuICAgICAgICAgICAgICAgICAgICBmdW5jdGlvbiByZXZlcnNlU3RhdGljKHN0KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChzdCA9PT0gb3B0cy5vcHRpb25hbG1hcmtlclswXSkgc3QgPSBvcHRzLm9wdGlvbmFsbWFya2VyWzFdOyBlbHNlIGlmIChzdCA9PT0gb3B0cy5vcHRpb25hbG1hcmtlclsxXSkgc3QgPSBvcHRzLm9wdGlvbmFsbWFya2VyWzBdOyBlbHNlIGlmIChzdCA9PT0gb3B0cy5ncm91cG1hcmtlclswXSkgc3QgPSBvcHRzLmdyb3VwbWFya2VyWzFdOyBlbHNlIGlmIChzdCA9PT0gb3B0cy5ncm91cG1hcmtlclsxXSkgc3QgPSBvcHRzLmdyb3VwbWFya2VyWzBdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gc3Q7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIG1hc2tUb2tlbi5tYXRjaGVzID0gbWFza1Rva2VuLm1hdGNoZXMucmV2ZXJzZSgpO1xyXG4gICAgICAgICAgICAgICAgICAgIGZvciAodmFyIG1hdGNoIGluIG1hc2tUb2tlbi5tYXRjaGVzKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChtYXNrVG9rZW4ubWF0Y2hlcy5oYXNPd25Qcm9wZXJ0eShtYXRjaCkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBpbnRNYXRjaCA9IHBhcnNlSW50KG1hdGNoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChtYXNrVG9rZW4ubWF0Y2hlc1ttYXRjaF0uaXNRdWFudGlmaWVyICYmIG1hc2tUb2tlbi5tYXRjaGVzW2ludE1hdGNoICsgMV0gJiYgbWFza1Rva2VuLm1hdGNoZXNbaW50TWF0Y2ggKyAxXS5pc0dyb3VwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHF0ID0gbWFza1Rva2VuLm1hdGNoZXNbbWF0Y2hdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1hc2tUb2tlbi5tYXRjaGVzLnNwbGljZShtYXRjaCwgMSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbWFza1Rva2VuLm1hdGNoZXMuc3BsaWNlKGludE1hdGNoICsgMSwgMCwgcXQpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG1hc2tUb2tlbi5tYXRjaGVzW21hdGNoXS5tYXRjaGVzICE9PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtYXNrVG9rZW4ubWF0Y2hlc1ttYXRjaF0gPSByZXZlcnNlVG9rZW5zKG1hc2tUb2tlbi5tYXRjaGVzW21hdGNoXSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1hc2tUb2tlbi5tYXRjaGVzW21hdGNoXSA9IHJldmVyc2VTdGF0aWMobWFza1Rva2VuLm1hdGNoZXNbbWF0Y2hdKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gbWFza1Rva2VuO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZnVuY3Rpb24gZ3JvdXBpZnkobWF0Y2hlcykge1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBncm91cFRva2VuID0gbmV3IE1hc2tUb2tlbih0cnVlKTtcclxuICAgICAgICAgICAgICAgICAgICBncm91cFRva2VuLm9wZW5Hcm91cCA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgICAgIGdyb3VwVG9rZW4ubWF0Y2hlcyA9IG1hdGNoZXM7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGdyb3VwVG9rZW47XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBpZiAocmVnZXhNYXNrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgb3B0cy5vcHRpb25hbG1hcmtlclswXSA9IHVuZGVmaW5lZDtcclxuICAgICAgICAgICAgICAgICAgICBvcHRzLm9wdGlvbmFsbWFya2VyWzFdID0gdW5kZWZpbmVkO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgd2hpbGUgKG1hdGNoID0gcmVnZXhNYXNrID8gcmVnZXhUb2tlbml6ZXIuZXhlYyhtYXNrKSA6IHRva2VuaXplci5leGVjKG1hc2spKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgbSA9IG1hdGNoWzBdO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChyZWdleE1hc2spIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgc3dpdGNoIChtLmNoYXJBdCgwKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgXCI/XCI6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtID0gXCJ7MCwxfVwiO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgXCIrXCI6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSBcIipcIjpcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG0gPSBcIntcIiArIG0gKyBcIn1cIjtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGlmIChlc2NhcGVkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGRlZmF1bHRDYXNlKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBzd2l0Y2ggKG0uY2hhckF0KDApKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICBjYXNlIFwiKD89XCI6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgIGNhc2UgXCIoPyFcIjpcclxuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgY2FzZSBcIig/PD1cIjpcclxuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgY2FzZSBcIig/PCFcIjpcclxuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgY2FzZSBvcHRzLmVzY2FwZUNoYXI6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGVzY2FwZWQgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAocmVnZXhNYXNrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkZWZhdWx0Q2FzZSgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgIGNhc2Ugb3B0cy5vcHRpb25hbG1hcmtlclsxXTpcclxuICAgICAgICAgICAgICAgICAgICAgIGNhc2Ugb3B0cy5ncm91cG1hcmtlclsxXTpcclxuICAgICAgICAgICAgICAgICAgICAgICAgb3BlbmluZ1Rva2VuID0gb3BlbmVuaW5ncy5wb3AoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgb3BlbmluZ1Rva2VuLm9wZW5Hcm91cCA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAob3BlbmluZ1Rva2VuICE9PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChvcGVuZW5pbmdzLmxlbmd0aCA+IDApIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjdXJyZW50T3BlbmluZ1Rva2VuID0gb3BlbmVuaW5nc1tvcGVuZW5pbmdzLmxlbmd0aCAtIDFdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGN1cnJlbnRPcGVuaW5nVG9rZW4ubWF0Y2hlcy5wdXNoKG9wZW5pbmdUb2tlbik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGN1cnJlbnRPcGVuaW5nVG9rZW4uaXNBbHRlcm5hdG9yKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFsdGVybmF0b3IgPSBvcGVuZW5pbmdzLnBvcCgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBtbmR4ID0gMDsgbW5keCA8IGFsdGVybmF0b3IubWF0Y2hlcy5sZW5ndGg7IG1uZHgrKykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYWx0ZXJuYXRvci5tYXRjaGVzW21uZHhdLmlzR3JvdXAgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFsdGVybmF0b3IubWF0Y2hlc1ttbmR4XS5hbHRlcm5hdG9yR3JvdXAgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAob3BlbmVuaW5ncy5sZW5ndGggPiAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjdXJyZW50T3BlbmluZ1Rva2VuID0gb3BlbmVuaW5nc1tvcGVuZW5pbmdzLmxlbmd0aCAtIDFdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY3VycmVudE9wZW5pbmdUb2tlbi5tYXRjaGVzLnB1c2goYWx0ZXJuYXRvcik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjdXJyZW50VG9rZW4ubWF0Y2hlcy5wdXNoKGFsdGVybmF0b3IpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjdXJyZW50VG9rZW4ubWF0Y2hlcy5wdXNoKG9wZW5pbmdUb2tlbik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSBkZWZhdWx0Q2FzZSgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICBjYXNlIG9wdHMub3B0aW9uYWxtYXJrZXJbMF06XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG9wZW5lbmluZ3MucHVzaChuZXcgTWFza1Rva2VuKGZhbHNlLCB0cnVlKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgIGNhc2Ugb3B0cy5ncm91cG1hcmtlclswXTpcclxuICAgICAgICAgICAgICAgICAgICAgICAgb3BlbmVuaW5ncy5wdXNoKG5ldyBNYXNrVG9rZW4odHJ1ZSkpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICBjYXNlIG9wdHMucXVhbnRpZmllcm1hcmtlclswXTpcclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHF1YW50aWZpZXIgPSBuZXcgTWFza1Rva2VuKGZhbHNlLCBmYWxzZSwgdHJ1ZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG0gPSBtLnJlcGxhY2UoL1t7fV0vZywgXCJcIik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBtcWogPSBtLnNwbGl0KFwifFwiKSwgbXEgPSBtcWpbMF0uc3BsaXQoXCIsXCIpLCBtcTAgPSBpc05hTihtcVswXSkgPyBtcVswXSA6IHBhcnNlSW50KG1xWzBdKSwgbXExID0gbXEubGVuZ3RoID09PSAxID8gbXEwIDogaXNOYU4obXFbMV0pID8gbXFbMV0gOiBwYXJzZUludChtcVsxXSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChtcTAgPT09IFwiKlwiIHx8IG1xMCA9PT0gXCIrXCIpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1xMCA9IG1xMSA9PT0gXCIqXCIgPyAwIDogMTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBxdWFudGlmaWVyLnF1YW50aWZpZXIgPSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtaW46IG1xMCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1heDogbXExLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaml0OiBtcWpbMV1cclxuICAgICAgICAgICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIG1hdGNoZXMgPSBvcGVuZW5pbmdzLmxlbmd0aCA+IDAgPyBvcGVuZW5pbmdzW29wZW5lbmluZ3MubGVuZ3RoIC0gMV0ubWF0Y2hlcyA6IGN1cnJlbnRUb2tlbi5tYXRjaGVzO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBtYXRjaCA9IG1hdGNoZXMucG9wKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChtYXRjaC5pc0FsdGVybmF0b3IpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1hdGNoZXMucHVzaChtYXRjaCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtYXRjaGVzID0gbWF0Y2gubWF0Y2hlcztcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBncm91cFRva2VuID0gbmV3IE1hc2tUb2tlbih0cnVlKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciB0bXBNYXRjaCA9IG1hdGNoZXMucG9wKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtYXRjaGVzLnB1c2goZ3JvdXBUb2tlbik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtYXRjaGVzID0gZ3JvdXBUb2tlbi5tYXRjaGVzO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbWF0Y2ggPSB0bXBNYXRjaDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIW1hdGNoLmlzR3JvdXApIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1hdGNoID0gZ3JvdXBpZnkoWyBtYXRjaCBdKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBtYXRjaGVzLnB1c2gobWF0Y2gpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBtYXRjaGVzLnB1c2gocXVhbnRpZmllcik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgIGNhc2Ugb3B0cy5hbHRlcm5hdG9ybWFya2VyOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgZ3JvdXBRdWFudGlmaWVyID0gZnVuY3Rpb24gZ3JvdXBRdWFudGlmaWVyKG1hdGNoZXMpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBsYXN0TWF0Y2ggPSBtYXRjaGVzLnBvcCgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGxhc3RNYXRjaC5pc1F1YW50aWZpZXIpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsYXN0TWF0Y2ggPSBncm91cGlmeShbIG1hdGNoZXMucG9wKCksIGxhc3RNYXRjaCBdKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBsYXN0TWF0Y2g7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChvcGVuZW5pbmdzLmxlbmd0aCA+IDApIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGN1cnJlbnRPcGVuaW5nVG9rZW4gPSBvcGVuZW5pbmdzW29wZW5lbmluZ3MubGVuZ3RoIC0gMV07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgc3ViVG9rZW4gPSBjdXJyZW50T3BlbmluZ1Rva2VuLm1hdGNoZXNbY3VycmVudE9wZW5pbmdUb2tlbi5tYXRjaGVzLmxlbmd0aCAtIDFdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGN1cnJlbnRPcGVuaW5nVG9rZW4ub3Blbkdyb3VwICYmIChzdWJUb2tlbi5tYXRjaGVzID09PSB1bmRlZmluZWQgfHwgc3ViVG9rZW4uaXNHcm91cCA9PT0gZmFsc2UgJiYgc3ViVG9rZW4uaXNBbHRlcm5hdG9yID09PSBmYWxzZSkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsYXN0TWF0Y2ggPSBvcGVuZW5pbmdzLnBvcCgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsYXN0TWF0Y2ggPSBncm91cFF1YW50aWZpZXIoY3VycmVudE9wZW5pbmdUb2tlbi5tYXRjaGVzKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxhc3RNYXRjaCA9IGdyb3VwUXVhbnRpZmllcihjdXJyZW50VG9rZW4ubWF0Y2hlcyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGxhc3RNYXRjaC5pc0FsdGVybmF0b3IpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9wZW5lbmluZ3MucHVzaChsYXN0TWF0Y2gpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGxhc3RNYXRjaC5hbHRlcm5hdG9yR3JvdXApIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhbHRlcm5hdG9yID0gb3BlbmVuaW5ncy5wb3AoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsYXN0TWF0Y2guYWx0ZXJuYXRvckdyb3VwID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFsdGVybmF0b3IgPSBuZXcgTWFza1Rva2VuKGZhbHNlLCBmYWxzZSwgZmFsc2UsIHRydWUpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYWx0ZXJuYXRvci5tYXRjaGVzLnB1c2gobGFzdE1hdGNoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9wZW5lbmluZ3MucHVzaChhbHRlcm5hdG9yKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChsYXN0TWF0Y2gub3Blbkdyb3VwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGFzdE1hdGNoLm9wZW5Hcm91cCA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBhbHRlcm5hdG9yR3JvdXAgPSBuZXcgTWFza1Rva2VuKHRydWUpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFsdGVybmF0b3JHcm91cC5hbHRlcm5hdG9yR3JvdXAgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9wZW5lbmluZ3MucHVzaChhbHRlcm5hdG9yR3JvdXApO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgIGRlZmF1bHQ6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGRlZmF1bHRDYXNlKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgd2hpbGUgKG9wZW5lbmluZ3MubGVuZ3RoID4gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgIG9wZW5pbmdUb2tlbiA9IG9wZW5lbmluZ3MucG9wKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgY3VycmVudFRva2VuLm1hdGNoZXMucHVzaChvcGVuaW5nVG9rZW4pO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgaWYgKGN1cnJlbnRUb2tlbi5tYXRjaGVzLmxlbmd0aCA+IDApIHtcclxuICAgICAgICAgICAgICAgICAgICB2ZXJpZnlHcm91cE1hcmtlcihjdXJyZW50VG9rZW4pO1xyXG4gICAgICAgICAgICAgICAgICAgIG1hc2tUb2tlbnMucHVzaChjdXJyZW50VG9rZW4pO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgaWYgKG9wdHMubnVtZXJpY0lucHV0IHx8IG9wdHMuaXNSVEwpIHtcclxuICAgICAgICAgICAgICAgICAgICByZXZlcnNlVG9rZW5zKG1hc2tUb2tlbnNbMF0pO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIG1hc2tUb2tlbnM7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9O1xyXG4gICAgICAgIElucHV0bWFzay5leHRlbmREZWZhdWx0cyA9IGZ1bmN0aW9uKG9wdGlvbnMpIHtcclxuICAgICAgICAgICAgJC5leHRlbmQodHJ1ZSwgSW5wdXRtYXNrLnByb3RvdHlwZS5kZWZhdWx0cywgb3B0aW9ucyk7XHJcbiAgICAgICAgfTtcclxuICAgICAgICBJbnB1dG1hc2suZXh0ZW5kRGVmaW5pdGlvbnMgPSBmdW5jdGlvbihkZWZpbml0aW9uKSB7XHJcbiAgICAgICAgICAgICQuZXh0ZW5kKHRydWUsIElucHV0bWFzay5wcm90b3R5cGUuZGVmaW5pdGlvbnMsIGRlZmluaXRpb24pO1xyXG4gICAgICAgIH07XHJcbiAgICAgICAgSW5wdXRtYXNrLmV4dGVuZEFsaWFzZXMgPSBmdW5jdGlvbihhbGlhcykge1xyXG4gICAgICAgICAgICAkLmV4dGVuZCh0cnVlLCBJbnB1dG1hc2sucHJvdG90eXBlLmFsaWFzZXMsIGFsaWFzKTtcclxuICAgICAgICB9O1xyXG4gICAgICAgIElucHV0bWFzay5mb3JtYXQgPSBmdW5jdGlvbih2YWx1ZSwgb3B0aW9ucywgbWV0YWRhdGEpIHtcclxuICAgICAgICAgICAgcmV0dXJuIElucHV0bWFzayhvcHRpb25zKS5mb3JtYXQodmFsdWUsIG1ldGFkYXRhKTtcclxuICAgICAgICB9O1xyXG4gICAgICAgIElucHV0bWFzay51bm1hc2sgPSBmdW5jdGlvbih2YWx1ZSwgb3B0aW9ucykge1xyXG4gICAgICAgICAgICByZXR1cm4gSW5wdXRtYXNrKG9wdGlvbnMpLnVubWFza2VkdmFsdWUodmFsdWUpO1xyXG4gICAgICAgIH07XHJcbiAgICAgICAgSW5wdXRtYXNrLmlzVmFsaWQgPSBmdW5jdGlvbih2YWx1ZSwgb3B0aW9ucykge1xyXG4gICAgICAgICAgICByZXR1cm4gSW5wdXRtYXNrKG9wdGlvbnMpLmlzVmFsaWQodmFsdWUpO1xyXG4gICAgICAgIH07XHJcbiAgICAgICAgSW5wdXRtYXNrLnJlbW92ZSA9IGZ1bmN0aW9uKGVsZW1zKSB7XHJcbiAgICAgICAgICAgIGlmICh0eXBlb2YgZWxlbXMgPT09IFwic3RyaW5nXCIpIHtcclxuICAgICAgICAgICAgICAgIGVsZW1zID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoZWxlbXMpIHx8IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoZWxlbXMpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsZW1zID0gZWxlbXMubm9kZU5hbWUgPyBbIGVsZW1zIF0gOiBlbGVtcztcclxuICAgICAgICAgICAgJC5lYWNoKGVsZW1zLCBmdW5jdGlvbihuZHgsIGVsKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoZWwuaW5wdXRtYXNrKSBlbC5pbnB1dG1hc2sucmVtb3ZlKCk7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH07XHJcbiAgICAgICAgSW5wdXRtYXNrLnNldFZhbHVlID0gZnVuY3Rpb24oZWxlbXMsIHZhbHVlKSB7XHJcbiAgICAgICAgICAgIGlmICh0eXBlb2YgZWxlbXMgPT09IFwic3RyaW5nXCIpIHtcclxuICAgICAgICAgICAgICAgIGVsZW1zID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoZWxlbXMpIHx8IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoZWxlbXMpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsZW1zID0gZWxlbXMubm9kZU5hbWUgPyBbIGVsZW1zIF0gOiBlbGVtcztcclxuICAgICAgICAgICAgJC5lYWNoKGVsZW1zLCBmdW5jdGlvbihuZHgsIGVsKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoZWwuaW5wdXRtYXNrKSBlbC5pbnB1dG1hc2suc2V0VmFsdWUodmFsdWUpOyBlbHNlICQoZWwpLnRyaWdnZXIoXCJzZXR2YWx1ZVwiLCBbIHZhbHVlIF0pO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9O1xyXG4gICAgICAgIElucHV0bWFzay5lc2NhcGVSZWdleCA9IGZ1bmN0aW9uKHN0cikge1xyXG4gICAgICAgICAgICB2YXIgc3BlY2lhbHMgPSBbIFwiL1wiLCBcIi5cIiwgXCIqXCIsIFwiK1wiLCBcIj9cIiwgXCJ8XCIsIFwiKFwiLCBcIilcIiwgXCJbXCIsIFwiXVwiLCBcIntcIiwgXCJ9XCIsIFwiXFxcXFwiLCBcIiRcIiwgXCJeXCIgXTtcclxuICAgICAgICAgICAgcmV0dXJuIHN0ci5yZXBsYWNlKG5ldyBSZWdFeHAoXCIoXFxcXFwiICsgc3BlY2lhbHMuam9pbihcInxcXFxcXCIpICsgXCIpXCIsIFwiZ2ltXCIpLCBcIlxcXFwkMVwiKTtcclxuICAgICAgICB9O1xyXG4gICAgICAgIElucHV0bWFzay5rZXlDb2RlID0ge1xyXG4gICAgICAgICAgICBCQUNLU1BBQ0U6IDgsXHJcbiAgICAgICAgICAgIEJBQ0tTUEFDRV9TQUZBUkk6IDEyNyxcclxuICAgICAgICAgICAgREVMRVRFOiA0NixcclxuICAgICAgICAgICAgRE9XTjogNDAsXHJcbiAgICAgICAgICAgIEVORDogMzUsXHJcbiAgICAgICAgICAgIEVOVEVSOiAxMyxcclxuICAgICAgICAgICAgRVNDQVBFOiAyNyxcclxuICAgICAgICAgICAgSE9NRTogMzYsXHJcbiAgICAgICAgICAgIElOU0VSVDogNDUsXHJcbiAgICAgICAgICAgIExFRlQ6IDM3LFxyXG4gICAgICAgICAgICBQQUdFX0RPV046IDM0LFxyXG4gICAgICAgICAgICBQQUdFX1VQOiAzMyxcclxuICAgICAgICAgICAgUklHSFQ6IDM5LFxyXG4gICAgICAgICAgICBTUEFDRTogMzIsXHJcbiAgICAgICAgICAgIFRBQjogOSxcclxuICAgICAgICAgICAgVVA6IDM4LFxyXG4gICAgICAgICAgICBYOiA4OCxcclxuICAgICAgICAgICAgQ09OVFJPTDogMTdcclxuICAgICAgICB9O1xyXG4gICAgICAgIElucHV0bWFzay5kZXBlbmRlbmN5TGliID0gJDtcclxuICAgICAgICBmdW5jdGlvbiByZXNvbHZlQWxpYXMoYWxpYXNTdHIsIG9wdGlvbnMsIG9wdHMpIHtcclxuICAgICAgICAgICAgdmFyIGFsaWFzRGVmaW5pdGlvbiA9IElucHV0bWFzay5wcm90b3R5cGUuYWxpYXNlc1thbGlhc1N0cl07XHJcbiAgICAgICAgICAgIGlmIChhbGlhc0RlZmluaXRpb24pIHtcclxuICAgICAgICAgICAgICAgIGlmIChhbGlhc0RlZmluaXRpb24uYWxpYXMpIHJlc29sdmVBbGlhcyhhbGlhc0RlZmluaXRpb24uYWxpYXMsIHVuZGVmaW5lZCwgb3B0cyk7XHJcbiAgICAgICAgICAgICAgICAkLmV4dGVuZCh0cnVlLCBvcHRzLCBhbGlhc0RlZmluaXRpb24pO1xyXG4gICAgICAgICAgICAgICAgJC5leHRlbmQodHJ1ZSwgb3B0cywgb3B0aW9ucyk7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgICAgICAgICAgfSBlbHNlIGlmIChvcHRzLm1hc2sgPT09IG51bGwpIHtcclxuICAgICAgICAgICAgICAgIG9wdHMubWFzayA9IGFsaWFzU3RyO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZnVuY3Rpb24gZ2VuZXJhdGVNYXNrU2V0KG9wdHMsIG5vY2FjaGUpIHtcclxuICAgICAgICAgICAgZnVuY3Rpb24gZ2VuZXJhdGVNYXNrKG1hc2ssIG1ldGFkYXRhLCBvcHRzKSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgcmVnZXhNYXNrID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICBpZiAobWFzayA9PT0gbnVsbCB8fCBtYXNrID09PSBcIlwiKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmVnZXhNYXNrID0gb3B0cy5yZWdleCAhPT0gbnVsbDtcclxuICAgICAgICAgICAgICAgICAgICBpZiAocmVnZXhNYXNrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG1hc2sgPSBvcHRzLnJlZ2V4O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBtYXNrID0gbWFzay5yZXBsYWNlKC9eKFxcXikoLiopKFxcJCkkLywgXCIkMlwiKTtcclxuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZWdleE1hc2sgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBtYXNrID0gXCIuKlwiO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGlmIChtYXNrLmxlbmd0aCA9PT0gMSAmJiBvcHRzLmdyZWVkeSA9PT0gZmFsc2UgJiYgb3B0cy5yZXBlYXQgIT09IDApIHtcclxuICAgICAgICAgICAgICAgICAgICBvcHRzLnBsYWNlaG9sZGVyID0gXCJcIjtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGlmIChvcHRzLnJlcGVhdCA+IDAgfHwgb3B0cy5yZXBlYXQgPT09IFwiKlwiIHx8IG9wdHMucmVwZWF0ID09PSBcIitcIikge1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciByZXBlYXRTdGFydCA9IG9wdHMucmVwZWF0ID09PSBcIipcIiA/IDAgOiBvcHRzLnJlcGVhdCA9PT0gXCIrXCIgPyAxIDogb3B0cy5yZXBlYXQ7XHJcbiAgICAgICAgICAgICAgICAgICAgbWFzayA9IG9wdHMuZ3JvdXBtYXJrZXJbMF0gKyBtYXNrICsgb3B0cy5ncm91cG1hcmtlclsxXSArIG9wdHMucXVhbnRpZmllcm1hcmtlclswXSArIHJlcGVhdFN0YXJ0ICsgXCIsXCIgKyBvcHRzLnJlcGVhdCArIG9wdHMucXVhbnRpZmllcm1hcmtlclsxXTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIHZhciBtYXNrc2V0RGVmaW5pdGlvbiwgbWFza2RlZktleSA9IHJlZ2V4TWFzayA/IFwicmVnZXhfXCIgKyBvcHRzLnJlZ2V4IDogb3B0cy5udW1lcmljSW5wdXQgPyBtYXNrLnNwbGl0KFwiXCIpLnJldmVyc2UoKS5qb2luKFwiXCIpIDogbWFzaztcclxuICAgICAgICAgICAgICAgIGlmIChJbnB1dG1hc2sucHJvdG90eXBlLm1hc2tzQ2FjaGVbbWFza2RlZktleV0gPT09IHVuZGVmaW5lZCB8fCBub2NhY2hlID09PSB0cnVlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgbWFza3NldERlZmluaXRpb24gPSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG1hc2s6IG1hc2ssXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG1hc2tUb2tlbjogSW5wdXRtYXNrLnByb3RvdHlwZS5hbmFseXNlTWFzayhtYXNrLCByZWdleE1hc2ssIG9wdHMpLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YWxpZFBvc2l0aW9uczoge30sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIF9idWZmZXI6IHVuZGVmaW5lZCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgYnVmZmVyOiB1bmRlZmluZWQsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRlc3RzOiB7fSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgZXhjbHVkZXM6IHt9LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBtZXRhZGF0YTogbWV0YWRhdGEsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG1hc2tMZW5ndGg6IHVuZGVmaW5lZCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgaml0T2Zmc2V0OiB7fVxyXG4gICAgICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKG5vY2FjaGUgIT09IHRydWUpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgSW5wdXRtYXNrLnByb3RvdHlwZS5tYXNrc0NhY2hlW21hc2tkZWZLZXldID0gbWFza3NldERlZmluaXRpb247XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG1hc2tzZXREZWZpbml0aW9uID0gJC5leHRlbmQodHJ1ZSwge30sIElucHV0bWFzay5wcm90b3R5cGUubWFza3NDYWNoZVttYXNrZGVmS2V5XSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfSBlbHNlIG1hc2tzZXREZWZpbml0aW9uID0gJC5leHRlbmQodHJ1ZSwge30sIElucHV0bWFzay5wcm90b3R5cGUubWFza3NDYWNoZVttYXNrZGVmS2V5XSk7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gbWFza3NldERlZmluaXRpb247XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgdmFyIG1zO1xyXG4gICAgICAgICAgICBpZiAoJC5pc0Z1bmN0aW9uKG9wdHMubWFzaykpIHtcclxuICAgICAgICAgICAgICAgIG9wdHMubWFzayA9IG9wdHMubWFzayhvcHRzKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAoJC5pc0FycmF5KG9wdHMubWFzaykpIHtcclxuICAgICAgICAgICAgICAgIGlmIChvcHRzLm1hc2subGVuZ3RoID4gMSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChvcHRzLmtlZXBTdGF0aWMgPT09IG51bGwpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgb3B0cy5rZWVwU3RhdGljID0gXCJhdXRvXCI7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgb3B0cy5tYXNrLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAob3B0cy5tYXNrW2ldLmNoYXJBdCgwKSAhPT0gb3B0cy5tYXNrWzBdLmNoYXJBdCgwKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9wdHMua2VlcFN0YXRpYyA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIGFsdE1hc2sgPSBvcHRzLmdyb3VwbWFya2VyWzBdO1xyXG4gICAgICAgICAgICAgICAgICAgICQuZWFjaChvcHRzLmlzUlRMID8gb3B0cy5tYXNrLnJldmVyc2UoKSA6IG9wdHMubWFzaywgZnVuY3Rpb24obmR4LCBtc2spIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGFsdE1hc2subGVuZ3RoID4gMSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYWx0TWFzayArPSBvcHRzLmdyb3VwbWFya2VyWzFdICsgb3B0cy5hbHRlcm5hdG9ybWFya2VyICsgb3B0cy5ncm91cG1hcmtlclswXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAobXNrLm1hc2sgIT09IHVuZGVmaW5lZCAmJiAhJC5pc0Z1bmN0aW9uKG1zay5tYXNrKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYWx0TWFzayArPSBtc2subWFzaztcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFsdE1hc2sgKz0gbXNrO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgYWx0TWFzayArPSBvcHRzLmdyb3VwbWFya2VyWzFdO1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBnZW5lcmF0ZU1hc2soYWx0TWFzaywgb3B0cy5tYXNrLCBvcHRzKTtcclxuICAgICAgICAgICAgICAgIH0gZWxzZSBvcHRzLm1hc2sgPSBvcHRzLm1hc2sucG9wKCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYgKG9wdHMubWFzayAmJiBvcHRzLm1hc2subWFzayAhPT0gdW5kZWZpbmVkICYmICEkLmlzRnVuY3Rpb24ob3B0cy5tYXNrLm1hc2spKSB7XHJcbiAgICAgICAgICAgICAgICBtcyA9IGdlbmVyYXRlTWFzayhvcHRzLm1hc2subWFzaywgb3B0cy5tYXNrLCBvcHRzKTtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIG1zID0gZ2VuZXJhdGVNYXNrKG9wdHMubWFzaywgb3B0cy5tYXNrLCBvcHRzKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICByZXR1cm4gbXM7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGZ1bmN0aW9uIGlzSW5wdXRFdmVudFN1cHBvcnRlZChldmVudE5hbWUpIHtcclxuICAgICAgICAgICAgdmFyIGVsID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImlucHV0XCIpLCBldk5hbWUgPSBcIm9uXCIgKyBldmVudE5hbWUsIGlzU3VwcG9ydGVkID0gZXZOYW1lIGluIGVsO1xyXG4gICAgICAgICAgICBpZiAoIWlzU3VwcG9ydGVkKSB7XHJcbiAgICAgICAgICAgICAgICBlbC5zZXRBdHRyaWJ1dGUoZXZOYW1lLCBcInJldHVybjtcIik7XHJcbiAgICAgICAgICAgICAgICBpc1N1cHBvcnRlZCA9IHR5cGVvZiBlbFtldk5hbWVdID09PSBcImZ1bmN0aW9uXCI7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWwgPSBudWxsO1xyXG4gICAgICAgICAgICByZXR1cm4gaXNTdXBwb3J0ZWQ7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGZ1bmN0aW9uIG1hc2tTY29wZShhY3Rpb25PYmosIG1hc2tzZXQsIG9wdHMpIHtcclxuICAgICAgICAgICAgbWFza3NldCA9IG1hc2tzZXQgfHwgdGhpcy5tYXNrc2V0O1xyXG4gICAgICAgICAgICBvcHRzID0gb3B0cyB8fCB0aGlzLm9wdHM7XHJcbiAgICAgICAgICAgIHZhciBpbnB1dG1hc2sgPSB0aGlzLCBlbCA9IHRoaXMuZWwsIGlzUlRMID0gdGhpcy5pc1JUTCwgdW5kb1ZhbHVlLCAkZWwsIHNraXBLZXlQcmVzc0V2ZW50ID0gZmFsc2UsIHNraXBJbnB1dEV2ZW50ID0gZmFsc2UsIGlnbm9yYWJsZSA9IGZhbHNlLCBtYXhMZW5ndGgsIG1vdXNlRW50ZXIgPSBmYWxzZSwgY29sb3JNYXNrLCBvcmlnaW5hbFBsYWNlaG9sZGVyO1xyXG4gICAgICAgICAgICBmdW5jdGlvbiBnZXRNYXNrVGVtcGxhdGUoYmFzZU9uSW5wdXQsIG1pbmltYWxQb3MsIGluY2x1ZGVNb2RlLCBub0ppdCwgY2xlYXJPcHRpb25hbFRhaWwpIHtcclxuICAgICAgICAgICAgICAgIHZhciBncmVlZHkgPSBvcHRzLmdyZWVkeTtcclxuICAgICAgICAgICAgICAgIGlmIChjbGVhck9wdGlvbmFsVGFpbCkgb3B0cy5ncmVlZHkgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgIG1pbmltYWxQb3MgPSBtaW5pbWFsUG9zIHx8IDA7XHJcbiAgICAgICAgICAgICAgICB2YXIgbWFza1RlbXBsYXRlID0gW10sIG5keEludGx6ciwgcG9zID0gMCwgdGVzdCwgdGVzdFBvcywgbHZwID0gZ2V0TGFzdFZhbGlkUG9zaXRpb24oKTtcclxuICAgICAgICAgICAgICAgIGRvIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoYmFzZU9uSW5wdXQgPT09IHRydWUgJiYgZ2V0TWFza1NldCgpLnZhbGlkUG9zaXRpb25zW3Bvc10pIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGVzdFBvcyA9IGNsZWFyT3B0aW9uYWxUYWlsICYmIGdldE1hc2tTZXQoKS52YWxpZFBvc2l0aW9uc1twb3NdLm1hdGNoLm9wdGlvbmFsaXR5ID09PSB0cnVlICYmIGdldE1hc2tTZXQoKS52YWxpZFBvc2l0aW9uc1twb3MgKyAxXSA9PT0gdW5kZWZpbmVkICYmIChnZXRNYXNrU2V0KCkudmFsaWRQb3NpdGlvbnNbcG9zXS5nZW5lcmF0ZWRJbnB1dCA9PT0gdHJ1ZSB8fCBnZXRNYXNrU2V0KCkudmFsaWRQb3NpdGlvbnNbcG9zXS5pbnB1dCA9PSBvcHRzLnNraXBPcHRpb25hbFBhcnRDaGFyYWN0ZXIgJiYgcG9zID4gMCkgPyBkZXRlcm1pbmVUZXN0VGVtcGxhdGUocG9zLCBnZXRUZXN0cyhwb3MsIG5keEludGx6ciwgcG9zIC0gMSkpIDogZ2V0TWFza1NldCgpLnZhbGlkUG9zaXRpb25zW3Bvc107XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRlc3QgPSB0ZXN0UG9zLm1hdGNoO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBuZHhJbnRsenIgPSB0ZXN0UG9zLmxvY2F0b3Iuc2xpY2UoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbWFza1RlbXBsYXRlLnB1c2goaW5jbHVkZU1vZGUgPT09IHRydWUgPyB0ZXN0UG9zLmlucHV0IDogaW5jbHVkZU1vZGUgPT09IGZhbHNlID8gdGVzdC5uYXRpdmVEZWYgOiBnZXRQbGFjZWhvbGRlcihwb3MsIHRlc3QpKTtcclxuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0ZXN0UG9zID0gZ2V0VGVzdFRlbXBsYXRlKHBvcywgbmR4SW50bHpyLCBwb3MgLSAxKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGVzdCA9IHRlc3RQb3MubWF0Y2g7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG5keEludGx6ciA9IHRlc3RQb3MubG9jYXRvci5zbGljZSgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgaml0TWFza2luZyA9IG5vSml0ID09PSB0cnVlID8gZmFsc2UgOiBvcHRzLmppdE1hc2tpbmcgIT09IGZhbHNlID8gb3B0cy5qaXRNYXNraW5nIDogdGVzdC5qaXQ7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChqaXRNYXNraW5nID09PSBmYWxzZSB8fCBqaXRNYXNraW5nID09PSB1bmRlZmluZWQgfHwgdHlwZW9mIGppdE1hc2tpbmcgPT09IFwibnVtYmVyXCIgJiYgaXNGaW5pdGUoaml0TWFza2luZykgJiYgaml0TWFza2luZyA+IHBvcykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbWFza1RlbXBsYXRlLnB1c2goaW5jbHVkZU1vZGUgPT09IGZhbHNlID8gdGVzdC5uYXRpdmVEZWYgOiBnZXRQbGFjZWhvbGRlcihwb3MsIHRlc3QpKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBpZiAob3B0cy5rZWVwU3RhdGljID09PSBcImF1dG9cIikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAodGVzdC5uZXdCbG9ja01hcmtlciAmJiB0ZXN0LmZuICE9PSBudWxsKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBvcHRzLmtlZXBTdGF0aWMgPSBwb3MgLSAxO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIHBvcysrO1xyXG4gICAgICAgICAgICAgICAgfSB3aGlsZSAoKG1heExlbmd0aCA9PT0gdW5kZWZpbmVkIHx8IHBvcyA8IG1heExlbmd0aCkgJiYgKHRlc3QuZm4gIT09IG51bGwgfHwgdGVzdC5kZWYgIT09IFwiXCIpIHx8IG1pbmltYWxQb3MgPiBwb3MpO1xyXG4gICAgICAgICAgICAgICAgaWYgKG1hc2tUZW1wbGF0ZVttYXNrVGVtcGxhdGUubGVuZ3RoIC0gMV0gPT09IFwiXCIpIHtcclxuICAgICAgICAgICAgICAgICAgICBtYXNrVGVtcGxhdGUucG9wKCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBpZiAoaW5jbHVkZU1vZGUgIT09IGZhbHNlIHx8IGdldE1hc2tTZXQoKS5tYXNrTGVuZ3RoID09PSB1bmRlZmluZWQpIGdldE1hc2tTZXQoKS5tYXNrTGVuZ3RoID0gcG9zIC0gMTtcclxuICAgICAgICAgICAgICAgIG9wdHMuZ3JlZWR5ID0gZ3JlZWR5O1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIG1hc2tUZW1wbGF0ZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBmdW5jdGlvbiBnZXRNYXNrU2V0KCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIG1hc2tzZXQ7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZnVuY3Rpb24gcmVzZXRNYXNrU2V0KHNvZnQpIHtcclxuICAgICAgICAgICAgICAgIHZhciBtYXNrc2V0ID0gZ2V0TWFza1NldCgpO1xyXG4gICAgICAgICAgICAgICAgbWFza3NldC5idWZmZXIgPSB1bmRlZmluZWQ7XHJcbiAgICAgICAgICAgICAgICBpZiAoc29mdCAhPT0gdHJ1ZSkge1xyXG4gICAgICAgICAgICAgICAgICAgIG1hc2tzZXQudmFsaWRQb3NpdGlvbnMgPSB7fTtcclxuICAgICAgICAgICAgICAgICAgICBtYXNrc2V0LnAgPSAwO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGZ1bmN0aW9uIGdldExhc3RWYWxpZFBvc2l0aW9uKGNsb3Nlc3RUbywgc3RyaWN0LCB2YWxpZFBvc2l0aW9ucykge1xyXG4gICAgICAgICAgICAgICAgdmFyIGJlZm9yZSA9IC0xLCBhZnRlciA9IC0xLCB2YWxpZHMgPSB2YWxpZFBvc2l0aW9ucyB8fCBnZXRNYXNrU2V0KCkudmFsaWRQb3NpdGlvbnM7XHJcbiAgICAgICAgICAgICAgICBpZiAoY2xvc2VzdFRvID09PSB1bmRlZmluZWQpIGNsb3Nlc3RUbyA9IC0xO1xyXG4gICAgICAgICAgICAgICAgZm9yICh2YXIgcG9zTmR4IGluIHZhbGlkcykge1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBwc05keCA9IHBhcnNlSW50KHBvc05keCk7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHZhbGlkc1twc05keF0gJiYgKHN0cmljdCB8fCB2YWxpZHNbcHNOZHhdLmdlbmVyYXRlZElucHV0ICE9PSB0cnVlKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAocHNOZHggPD0gY2xvc2VzdFRvKSBiZWZvcmUgPSBwc05keDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHBzTmR4ID49IGNsb3Nlc3RUbykgYWZ0ZXIgPSBwc05keDtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gYmVmb3JlID09PSAtMSB8fCBiZWZvcmUgPT0gY2xvc2VzdFRvID8gYWZ0ZXIgOiBhZnRlciA9PSAtMSA/IGJlZm9yZSA6IGNsb3Nlc3RUbyAtIGJlZm9yZSA8IGFmdGVyIC0gY2xvc2VzdFRvID8gYmVmb3JlIDogYWZ0ZXI7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZnVuY3Rpb24gZ2V0RGVjaXNpb25UYWtlcih0c3QpIHtcclxuICAgICAgICAgICAgICAgIHZhciBkZWNpc2lvblRha2VyID0gdHN0LmxvY2F0b3JbdHN0LmFsdGVybmF0aW9uXTtcclxuICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgZGVjaXNpb25UYWtlciA9PSBcInN0cmluZ1wiICYmIGRlY2lzaW9uVGFrZXIubGVuZ3RoID4gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGRlY2lzaW9uVGFrZXIgPSBkZWNpc2lvblRha2VyLnNwbGl0KFwiLFwiKVswXTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIHJldHVybiBkZWNpc2lvblRha2VyICE9PSB1bmRlZmluZWQgPyBkZWNpc2lvblRha2VyLnRvU3RyaW5nKCkgOiBcIlwiO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGZ1bmN0aW9uIGdldExvY2F0b3IodHN0LCBhbGlnbikge1xyXG4gICAgICAgICAgICAgICAgdmFyIGxvY2F0b3IgPSAodHN0LmFsdGVybmF0aW9uICE9IHVuZGVmaW5lZCA/IHRzdC5tbG9jW2dldERlY2lzaW9uVGFrZXIodHN0KV0gOiB0c3QubG9jYXRvcikuam9pbihcIlwiKTtcclxuICAgICAgICAgICAgICAgIGlmIChsb2NhdG9yICE9PSBcIlwiKSB3aGlsZSAobG9jYXRvci5sZW5ndGggPCBhbGlnbikge1xyXG4gICAgICAgICAgICAgICAgICAgIGxvY2F0b3IgKz0gXCIwXCI7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gbG9jYXRvcjtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBmdW5jdGlvbiBkZXRlcm1pbmVUZXN0VGVtcGxhdGUocG9zLCB0ZXN0cykge1xyXG4gICAgICAgICAgICAgICAgcG9zID0gcG9zID4gMCA/IHBvcyAtIDEgOiAwO1xyXG4gICAgICAgICAgICAgICAgdmFyIGFsdFRlc3QgPSBnZXRUZXN0KHBvcyksIHRhcmdldExvY2F0b3IgPSBnZXRMb2NhdG9yKGFsdFRlc3QpLCB0c3RMb2NhdG9yLCBjbG9zZXN0LCBiZXN0TWF0Y2g7XHJcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBuZHggPSAwOyBuZHggPCB0ZXN0cy5sZW5ndGg7IG5keCsrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIHRzdCA9IHRlc3RzW25keF07XHJcbiAgICAgICAgICAgICAgICAgICAgdHN0TG9jYXRvciA9IGdldExvY2F0b3IodHN0LCB0YXJnZXRMb2NhdG9yLmxlbmd0aCk7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIGRpc3RhbmNlID0gTWF0aC5hYnModHN0TG9jYXRvciAtIHRhcmdldExvY2F0b3IpO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChjbG9zZXN0ID09PSB1bmRlZmluZWQgfHwgdHN0TG9jYXRvciAhPT0gXCJcIiAmJiBkaXN0YW5jZSA8IGNsb3Nlc3QgfHwgYmVzdE1hdGNoICYmICFvcHRzLmdyZWVkeSAmJiBiZXN0TWF0Y2gubWF0Y2gub3B0aW9uYWxpdHkgJiYgYmVzdE1hdGNoLm1hdGNoLm5ld0Jsb2NrTWFya2VyID09PSBcIm1hc3RlclwiICYmICghdHN0Lm1hdGNoLm9wdGlvbmFsaXR5IHx8ICF0c3QubWF0Y2gubmV3QmxvY2tNYXJrZXIpIHx8IGJlc3RNYXRjaCAmJiBiZXN0TWF0Y2gubWF0Y2gub3B0aW9uYWxRdWFudGlmaWVyICYmICF0c3QubWF0Y2gub3B0aW9uYWxRdWFudGlmaWVyKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNsb3Nlc3QgPSBkaXN0YW5jZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYmVzdE1hdGNoID0gdHN0O1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIHJldHVybiBiZXN0TWF0Y2g7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZnVuY3Rpb24gZ2V0VGVzdFRlbXBsYXRlKHBvcywgbmR4SW50bHpyLCB0c3RQcykge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGdldE1hc2tTZXQoKS52YWxpZFBvc2l0aW9uc1twb3NdIHx8IGRldGVybWluZVRlc3RUZW1wbGF0ZShwb3MsIGdldFRlc3RzKHBvcywgbmR4SW50bHpyID8gbmR4SW50bHpyLnNsaWNlKCkgOiBuZHhJbnRsenIsIHRzdFBzKSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZnVuY3Rpb24gZ2V0VGVzdChwb3MsIHRlc3RzKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoZ2V0TWFza1NldCgpLnZhbGlkUG9zaXRpb25zW3Bvc10pIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZ2V0TWFza1NldCgpLnZhbGlkUG9zaXRpb25zW3Bvc107XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gKHRlc3RzIHx8IGdldFRlc3RzKHBvcykpWzBdO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGZ1bmN0aW9uIHBvc2l0aW9uQ2FuTWF0Y2hEZWZpbml0aW9uKHBvcywgZGVmKSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgdmFsaWQgPSBmYWxzZSwgdGVzdHMgPSBnZXRUZXN0cyhwb3MpO1xyXG4gICAgICAgICAgICAgICAgZm9yICh2YXIgdG5keCA9IDA7IHRuZHggPCB0ZXN0cy5sZW5ndGg7IHRuZHgrKykge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICh0ZXN0c1t0bmR4XS5tYXRjaCAmJiB0ZXN0c1t0bmR4XS5tYXRjaC5kZWYgPT09IGRlZikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YWxpZCA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIHJldHVybiB2YWxpZDtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBmdW5jdGlvbiBnZXRUZXN0cyhwb3MsIG5keEludGx6ciwgdHN0UHMpIHtcclxuICAgICAgICAgICAgICAgIHZhciBtYXNrVG9rZW5zID0gZ2V0TWFza1NldCgpLm1hc2tUb2tlbiwgdGVzdFBvcyA9IG5keEludGx6ciA/IHRzdFBzIDogMCwgbmR4SW5pdGlhbGl6ZXIgPSBuZHhJbnRsenIgPyBuZHhJbnRsenIuc2xpY2UoKSA6IFsgMCBdLCBtYXRjaGVzID0gW10sIGluc2VydFN0b3AgPSBmYWxzZSwgbGF0ZXN0TWF0Y2gsIGNhY2hlRGVwZW5kZW5jeSA9IG5keEludGx6ciA/IG5keEludGx6ci5qb2luKFwiXCIpIDogXCJcIjtcclxuICAgICAgICAgICAgICAgIGZ1bmN0aW9uIHJlc29sdmVUZXN0RnJvbVRva2VuKG1hc2tUb2tlbiwgbmR4SW5pdGlhbGl6ZXIsIGxvb3BOZHgsIHF1YW50aWZpZXJSZWN1cnNlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgZnVuY3Rpb24gaGFuZGxlTWF0Y2gobWF0Y2gsIGxvb3BOZHgsIHF1YW50aWZpZXJSZWN1cnNlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGZ1bmN0aW9uIGlzRmlyc3RNYXRjaChsYXRlc3RNYXRjaCwgdG9rZW5Hcm91cCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGZpcnN0TWF0Y2ggPSAkLmluQXJyYXkobGF0ZXN0TWF0Y2gsIHRva2VuR3JvdXAubWF0Y2hlcykgPT09IDA7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoIWZpcnN0TWF0Y2gpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkLmVhY2godG9rZW5Hcm91cC5tYXRjaGVzLCBmdW5jdGlvbihuZHgsIG1hdGNoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChtYXRjaC5pc1F1YW50aWZpZXIgPT09IHRydWUpIGZpcnN0TWF0Y2ggPSBpc0ZpcnN0TWF0Y2gobGF0ZXN0TWF0Y2gsIHRva2VuR3JvdXAubWF0Y2hlc1tuZHggLSAxXSk7IGVsc2UgaWYgKG1hdGNoLmhhc093blByb3BlcnR5KFwibWF0Y2hlc1wiKSkgZmlyc3RNYXRjaCA9IGlzRmlyc3RNYXRjaChsYXRlc3RNYXRjaCwgbWF0Y2gpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoZmlyc3RNYXRjaCkgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZpcnN0TWF0Y2g7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgZnVuY3Rpb24gcmVzb2x2ZU5keEluaXRpYWxpemVyKHBvcywgYWx0ZXJuYXRlTmR4LCB0YXJnZXRBbHRlcm5hdGlvbikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGJlc3RNYXRjaCwgaW5kZXhQb3M7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoZ2V0TWFza1NldCgpLnRlc3RzW3Bvc10gfHwgZ2V0TWFza1NldCgpLnZhbGlkUG9zaXRpb25zW3Bvc10pIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkLmVhY2goZ2V0TWFza1NldCgpLnRlc3RzW3Bvc10gfHwgWyBnZXRNYXNrU2V0KCkudmFsaWRQb3NpdGlvbnNbcG9zXSBdLCBmdW5jdGlvbihuZHgsIGxtbnQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGxtbnQubWxvY1thbHRlcm5hdGVOZHhdKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBiZXN0TWF0Y2ggPSBsbW50O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBhbHRlcm5hdGlvbiA9IHRhcmdldEFsdGVybmF0aW9uICE9PSB1bmRlZmluZWQgPyB0YXJnZXRBbHRlcm5hdGlvbiA6IGxtbnQuYWx0ZXJuYXRpb24sIG5keFBvcyA9IGxtbnQubG9jYXRvclthbHRlcm5hdGlvbl0gIT09IHVuZGVmaW5lZCA/IGxtbnQubG9jYXRvclthbHRlcm5hdGlvbl0udG9TdHJpbmcoKS5pbmRleE9mKGFsdGVybmF0ZU5keCkgOiAtMTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKChpbmRleFBvcyA9PT0gdW5kZWZpbmVkIHx8IG5keFBvcyA8IGluZGV4UG9zKSAmJiBuZHhQb3MgIT09IC0xKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBiZXN0TWF0Y2ggPSBsbW50O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaW5kZXhQb3MgPSBuZHhQb3M7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChiZXN0TWF0Y2gpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgYmVzdE1hdGNoQWx0SW5kZXggPSBiZXN0TWF0Y2gubG9jYXRvcltiZXN0TWF0Y2guYWx0ZXJuYXRpb25dO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBsb2NhdG9yID0gYmVzdE1hdGNoLm1sb2NbYWx0ZXJuYXRlTmR4XSB8fCBiZXN0TWF0Y2gubWxvY1tiZXN0TWF0Y2hBbHRJbmRleF0gfHwgYmVzdE1hdGNoLmxvY2F0b3I7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGxvY2F0b3Iuc2xpY2UoKHRhcmdldEFsdGVybmF0aW9uICE9PSB1bmRlZmluZWQgPyB0YXJnZXRBbHRlcm5hdGlvbiA6IGJlc3RNYXRjaC5hbHRlcm5hdGlvbikgKyAxKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRhcmdldEFsdGVybmF0aW9uICE9PSB1bmRlZmluZWQgPyByZXNvbHZlTmR4SW5pdGlhbGl6ZXIocG9zLCBhbHRlcm5hdGVOZHgpIDogdW5kZWZpbmVkO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGZ1bmN0aW9uIGlzU3Vic2V0T2Yoc291cmNlLCB0YXJnZXQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZ1bmN0aW9uIGV4cGFuZChwYXR0ZXJuKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGV4cGFuZGVkID0gW10sIHN0YXJ0LCBlbmQ7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IDAsIGwgPSBwYXR0ZXJuLmxlbmd0aDsgaSA8IGw7IGkrKykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAocGF0dGVybi5jaGFyQXQoaSkgPT09IFwiLVwiKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbmQgPSBwYXR0ZXJuLmNoYXJDb2RlQXQoaSArIDEpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgd2hpbGUgKCsrc3RhcnQgPCBlbmQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBleHBhbmRlZC5wdXNoKFN0cmluZy5mcm9tQ2hhckNvZGUoc3RhcnQpKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0YXJ0ID0gcGF0dGVybi5jaGFyQ29kZUF0KGkpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZXhwYW5kZWQucHVzaChwYXR0ZXJuLmNoYXJBdChpKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGV4cGFuZGVkLmpvaW4oXCJcIik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAob3B0cy5yZWdleCAmJiBzb3VyY2UubWF0Y2guZm4gIT09IG51bGwgJiYgdGFyZ2V0Lm1hdGNoLmZuICE9PSBudWxsKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGV4cGFuZCh0YXJnZXQubWF0Y2guZGVmLnJlcGxhY2UoL1tcXFtcXF1dL2csIFwiXCIpKS5pbmRleE9mKGV4cGFuZChzb3VyY2UubWF0Y2guZGVmLnJlcGxhY2UoL1tcXFtcXF1dL2csIFwiXCIpKSkgIT09IC0xO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHNvdXJjZS5tYXRjaC5kZWYgPT09IHRhcmdldC5tYXRjaC5uYXRpdmVEZWY7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgZnVuY3Rpb24gc3RhdGljQ2FuTWF0Y2hEZWZpbml0aW9uKHNvdXJjZSwgdGFyZ2V0KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgc2xvYyA9IHNvdXJjZS5sb2NhdG9yLnNsaWNlKHNvdXJjZS5hbHRlcm5hdGlvbikuam9pbihcIlwiKSwgdGxvYyA9IHRhcmdldC5sb2NhdG9yLnNsaWNlKHRhcmdldC5hbHRlcm5hdGlvbikuam9pbihcIlwiKSwgY2FuTWF0Y2ggPSBzbG9jID09IHRsb2M7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYW5NYXRjaCA9IGNhbk1hdGNoICYmIHNvdXJjZS5tYXRjaC5mbiA9PT0gbnVsbCAmJiB0YXJnZXQubWF0Y2guZm4gIT09IG51bGwgPyB0YXJnZXQubWF0Y2guZm4udGVzdChzb3VyY2UubWF0Y2guZGVmLCBnZXRNYXNrU2V0KCksIHBvcywgZmFsc2UsIG9wdHMsIGZhbHNlKSA6IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGNhbk1hdGNoO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGZ1bmN0aW9uIHNldE1lcmdlTG9jYXRvcnModGFyZ2V0TWF0Y2gsIGFsdE1hdGNoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoYWx0TWF0Y2ggPT09IHVuZGVmaW5lZCB8fCB0YXJnZXRNYXRjaC5hbHRlcm5hdGlvbiA9PT0gYWx0TWF0Y2guYWx0ZXJuYXRpb24gJiYgdGFyZ2V0TWF0Y2gubG9jYXRvclt0YXJnZXRNYXRjaC5hbHRlcm5hdGlvbl0udG9TdHJpbmcoKS5pbmRleE9mKGFsdE1hdGNoLmxvY2F0b3JbYWx0TWF0Y2guYWx0ZXJuYXRpb25dKSA9PT0gLTEpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0YXJnZXRNYXRjaC5tbG9jID0gdGFyZ2V0TWF0Y2gubWxvYyB8fCB7fTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgbG9jTmR4ID0gdGFyZ2V0TWF0Y2gubG9jYXRvclt0YXJnZXRNYXRjaC5hbHRlcm5hdGlvbl07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGxvY05keCA9PT0gdW5kZWZpbmVkKSB0YXJnZXRNYXRjaC5hbHRlcm5hdGlvbiA9IHVuZGVmaW5lZDsgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgbG9jTmR4ID09PSBcInN0cmluZ1wiKSBsb2NOZHggPSBsb2NOZHguc3BsaXQoXCIsXCIpWzBdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodGFyZ2V0TWF0Y2gubWxvY1tsb2NOZHhdID09PSB1bmRlZmluZWQpIHRhcmdldE1hdGNoLm1sb2NbbG9jTmR4XSA9IHRhcmdldE1hdGNoLmxvY2F0b3Iuc2xpY2UoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGFsdE1hdGNoICE9PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvciAodmFyIG5keCBpbiBhbHRNYXRjaC5tbG9jKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBuZHggPT09IFwic3RyaW5nXCIpIG5keCA9IG5keC5zcGxpdChcIixcIilbMF07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRhcmdldE1hdGNoLm1sb2NbbmR4XSA9PT0gdW5kZWZpbmVkKSB0YXJnZXRNYXRjaC5tbG9jW25keF0gPSBhbHRNYXRjaC5tbG9jW25keF07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0YXJnZXRNYXRjaC5sb2NhdG9yW3RhcmdldE1hdGNoLmFsdGVybmF0aW9uXSA9IE9iamVjdC5rZXlzKHRhcmdldE1hdGNoLm1sb2MpLmpvaW4oXCIsXCIpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAodGVzdFBvcyA+IDUwMCAmJiBxdWFudGlmaWVyUmVjdXJzZSAhPT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aHJvdyBcIklucHV0bWFzazogVGhlcmUgaXMgcHJvYmFibHkgYW4gZXJyb3IgaW4geW91ciBtYXNrIGRlZmluaXRpb24gb3IgaW4gdGhlIGNvZGUuIENyZWF0ZSBhbiBpc3N1ZSBvbiBnaXRodWIgd2l0aCBhbiBleGFtcGxlIG9mIHRoZSBtYXNrIHlvdSBhcmUgdXNpbmcuIFwiICsgZ2V0TWFza1NldCgpLm1hc2s7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRlc3RQb3MgPT09IHBvcyAmJiBtYXRjaC5tYXRjaGVzID09PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1hdGNoZXMucHVzaCh7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbWF0Y2g6IG1hdGNoLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxvY2F0b3I6IGxvb3BOZHgucmV2ZXJzZSgpLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNkOiBjYWNoZURlcGVuZGVuY3ksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbWxvYzoge31cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAobWF0Y2gubWF0Y2hlcyAhPT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAobWF0Y2guaXNHcm91cCAmJiBxdWFudGlmaWVyUmVjdXJzZSAhPT0gbWF0Y2gpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtYXRjaCA9IGhhbmRsZU1hdGNoKG1hc2tUb2tlbi5tYXRjaGVzWyQuaW5BcnJheShtYXRjaCwgbWFza1Rva2VuLm1hdGNoZXMpICsgMV0sIGxvb3BOZHgsIHF1YW50aWZpZXJSZWN1cnNlKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAobWF0Y2gpIHJldHVybiB0cnVlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChtYXRjaC5pc09wdGlvbmFsKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIG9wdGlvbmFsVG9rZW4gPSBtYXRjaDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtYXRjaCA9IHJlc29sdmVUZXN0RnJvbVRva2VuKG1hdGNoLCBuZHhJbml0aWFsaXplciwgbG9vcE5keCwgcXVhbnRpZmllclJlY3Vyc2UpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChtYXRjaCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkLmVhY2gobWF0Y2hlcywgZnVuY3Rpb24obmR4LCBtdGNoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtdGNoLm1hdGNoLm9wdGlvbmFsaXR5ID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxhdGVzdE1hdGNoID0gbWF0Y2hlc1ttYXRjaGVzLmxlbmd0aCAtIDFdLm1hdGNoO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAocXVhbnRpZmllclJlY3Vyc2UgPT09IHVuZGVmaW5lZCAmJiBpc0ZpcnN0TWF0Y2gobGF0ZXN0TWF0Y2gsIG9wdGlvbmFsVG9rZW4pKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbnNlcnRTdG9wID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRlc3RQb3MgPSBwb3M7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSByZXR1cm4gdHJ1ZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKG1hdGNoLmlzQWx0ZXJuYXRvcikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBhbHRlcm5hdGVUb2tlbiA9IG1hdGNoLCBtYWx0ZXJuYXRlTWF0Y2hlcyA9IFtdLCBtYWx0TWF0Y2hlcywgY3VycmVudE1hdGNoZXMgPSBtYXRjaGVzLnNsaWNlKCksIGxvb3BOZHhDbnQgPSBsb29wTmR4Lmxlbmd0aDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgYWx0SW5kZXggPSBuZHhJbml0aWFsaXplci5sZW5ndGggPiAwID8gbmR4SW5pdGlhbGl6ZXIuc2hpZnQoKSA6IC0xO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChhbHRJbmRleCA9PT0gLTEgfHwgdHlwZW9mIGFsdEluZGV4ID09PSBcInN0cmluZ1wiKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBjdXJyZW50UG9zID0gdGVzdFBvcywgbmR4SW5pdGlhbGl6ZXJDbG9uZSA9IG5keEluaXRpYWxpemVyLnNsaWNlKCksIGFsdEluZGV4QXJyID0gW10sIGFtbmR4O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodHlwZW9mIGFsdEluZGV4ID09IFwic3RyaW5nXCIpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFsdEluZGV4QXJyID0gYWx0SW5kZXguc3BsaXQoXCIsXCIpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yIChhbW5keCA9IDA7IGFtbmR4IDwgYWx0ZXJuYXRlVG9rZW4ubWF0Y2hlcy5sZW5ndGg7IGFtbmR4KyspIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhbHRJbmRleEFyci5wdXNoKGFtbmR4LnRvU3RyaW5nKCkpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChnZXRNYXNrU2V0KCkuZXhjbHVkZXNbcG9zXSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGFsdEluZGV4QXJyQ2xvbmUgPSBhbHRJbmRleEFyci5zbGljZSgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IDAsIGVsID0gZ2V0TWFza1NldCgpLmV4Y2x1ZGVzW3Bvc10ubGVuZ3RoOyBpIDwgZWw7IGkrKykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFsdEluZGV4QXJyLnNwbGljZShhbHRJbmRleEFyci5pbmRleE9mKGdldE1hc2tTZXQoKS5leGNsdWRlc1twb3NdW2ldLnRvU3RyaW5nKCkpLCAxKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChhbHRJbmRleEFyci5sZW5ndGggPT09IDApIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBnZXRNYXNrU2V0KCkuZXhjbHVkZXNbcG9zXSA9IHVuZGVmaW5lZDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhbHRJbmRleEFyciA9IGFsdEluZGV4QXJyQ2xvbmU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG9wdHMua2VlcFN0YXRpYyA9PT0gdHJ1ZSB8fCBpc0Zpbml0ZShwYXJzZUludChvcHRzLmtlZXBTdGF0aWMpKSAmJiBjdXJyZW50UG9zID49IG9wdHMua2VlcFN0YXRpYykgYWx0SW5kZXhBcnIgPSBhbHRJbmRleEFyci5zbGljZSgwLCAxKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHVuTWF0Y2hlZEFsdGVybmF0aW9uID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvciAodmFyIG5keCA9IDA7IG5keCA8IGFsdEluZGV4QXJyLmxlbmd0aDsgbmR4KyspIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFtbmR4ID0gcGFyc2VJbnQoYWx0SW5kZXhBcnJbbmR4XSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtYXRjaGVzID0gW107XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuZHhJbml0aWFsaXplciA9IHR5cGVvZiBhbHRJbmRleCA9PT0gXCJzdHJpbmdcIiA/IHJlc29sdmVOZHhJbml0aWFsaXplcih0ZXN0UG9zLCBhbW5keCwgbG9vcE5keENudCkgfHwgbmR4SW5pdGlhbGl6ZXJDbG9uZS5zbGljZSgpIDogbmR4SW5pdGlhbGl6ZXJDbG9uZS5zbGljZSgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGFsdGVybmF0ZVRva2VuLm1hdGNoZXNbYW1uZHhdICYmIGhhbmRsZU1hdGNoKGFsdGVybmF0ZVRva2VuLm1hdGNoZXNbYW1uZHhdLCBbIGFtbmR4IF0uY29uY2F0KGxvb3BOZHgpLCBxdWFudGlmaWVyUmVjdXJzZSkpIG1hdGNoID0gdHJ1ZTsgZWxzZSBpZiAobmR4ID09PSAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdW5NYXRjaGVkQWx0ZXJuYXRpb24gPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbWFsdE1hdGNoZXMgPSBtYXRjaGVzLnNsaWNlKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0ZXN0UG9zID0gY3VycmVudFBvcztcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1hdGNoZXMgPSBbXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvciAodmFyIG5keDEgPSAwOyBuZHgxIDwgbWFsdE1hdGNoZXMubGVuZ3RoOyBuZHgxKyspIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgYWx0TWF0Y2ggPSBtYWx0TWF0Y2hlc1tuZHgxXSwgZHJvcE1hdGNoID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYWx0TWF0Y2gubWF0Y2guaml0ID0gYWx0TWF0Y2gubWF0Y2guaml0IHx8IHVuTWF0Y2hlZEFsdGVybmF0aW9uO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFsdE1hdGNoLmFsdGVybmF0aW9uID0gYWx0TWF0Y2guYWx0ZXJuYXRpb24gfHwgbG9vcE5keENudDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZXRNZXJnZUxvY2F0b3JzKGFsdE1hdGNoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBuZHgyID0gMDsgbmR4MiA8IG1hbHRlcm5hdGVNYXRjaGVzLmxlbmd0aDsgbmR4MisrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBhbHRNYXRjaDIgPSBtYWx0ZXJuYXRlTWF0Y2hlc1tuZHgyXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBhbHRJbmRleCAhPT0gXCJzdHJpbmdcIiB8fCBhbHRNYXRjaC5hbHRlcm5hdGlvbiAhPT0gdW5kZWZpbmVkICYmICQuaW5BcnJheShhbHRNYXRjaC5sb2NhdG9yW2FsdE1hdGNoLmFsdGVybmF0aW9uXS50b1N0cmluZygpLCBhbHRJbmRleEFycikgIT09IC0xKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoYWx0TWF0Y2gubWF0Y2gubmF0aXZlRGVmID09PSBhbHRNYXRjaDIubWF0Y2gubmF0aXZlRGVmKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZHJvcE1hdGNoID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZXRNZXJnZUxvY2F0b3JzKGFsdE1hdGNoMiwgYWx0TWF0Y2gpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChpc1N1YnNldE9mKGFsdE1hdGNoLCBhbHRNYXRjaDIpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHNldE1lcmdlTG9jYXRvcnMoYWx0TWF0Y2gsIGFsdE1hdGNoMikpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZHJvcE1hdGNoID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbWFsdGVybmF0ZU1hdGNoZXMuc3BsaWNlKG1hbHRlcm5hdGVNYXRjaGVzLmluZGV4T2YoYWx0TWF0Y2gyKSwgMCwgYWx0TWF0Y2gpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoaXNTdWJzZXRPZihhbHRNYXRjaDIsIGFsdE1hdGNoKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNldE1lcmdlTG9jYXRvcnMoYWx0TWF0Y2gyLCBhbHRNYXRjaCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKHN0YXRpY0Nhbk1hdGNoRGVmaW5pdGlvbihhbHRNYXRjaCwgYWx0TWF0Y2gyKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChzZXRNZXJnZUxvY2F0b3JzKGFsdE1hdGNoLCBhbHRNYXRjaDIpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRyb3BNYXRjaCA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1hbHRlcm5hdGVNYXRjaGVzLnNwbGljZShtYWx0ZXJuYXRlTWF0Y2hlcy5pbmRleE9mKGFsdE1hdGNoMiksIDAsIGFsdE1hdGNoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFkcm9wTWF0Y2gpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbWFsdGVybmF0ZU1hdGNoZXMucHVzaChhbHRNYXRjaCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1hdGNoZXMgPSBjdXJyZW50TWF0Y2hlcy5jb25jYXQobWFsdGVybmF0ZU1hdGNoZXMpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0ZXN0UG9zID0gcG9zO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbnNlcnRTdG9wID0gbWF0Y2hlcy5sZW5ndGggPiAwO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtYXRjaCA9IG1hbHRlcm5hdGVNYXRjaGVzLmxlbmd0aCA+IDA7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5keEluaXRpYWxpemVyID0gbmR4SW5pdGlhbGl6ZXJDbG9uZS5zbGljZSgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSBtYXRjaCA9IGhhbmRsZU1hdGNoKGFsdGVybmF0ZVRva2VuLm1hdGNoZXNbYWx0SW5kZXhdIHx8IG1hc2tUb2tlbi5tYXRjaGVzW2FsdEluZGV4XSwgWyBhbHRJbmRleCBdLmNvbmNhdChsb29wTmR4KSwgcXVhbnRpZmllclJlY3Vyc2UpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChtYXRjaCkgcmV0dXJuIHRydWU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKG1hdGNoLmlzUXVhbnRpZmllciAmJiBxdWFudGlmaWVyUmVjdXJzZSAhPT0gbWFza1Rva2VuLm1hdGNoZXNbJC5pbkFycmF5KG1hdGNoLCBtYXNrVG9rZW4ubWF0Y2hlcykgLSAxXSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBxdCA9IG1hdGNoO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvciAodmFyIHFuZHggPSBuZHhJbml0aWFsaXplci5sZW5ndGggPiAwID8gbmR4SW5pdGlhbGl6ZXIuc2hpZnQoKSA6IDA7IHFuZHggPCAoaXNOYU4ocXQucXVhbnRpZmllci5tYXgpID8gcW5keCArIDEgOiBxdC5xdWFudGlmaWVyLm1heCkgJiYgdGVzdFBvcyA8PSBwb3M7IHFuZHgrKykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgdG9rZW5Hcm91cCA9IG1hc2tUb2tlbi5tYXRjaGVzWyQuaW5BcnJheShxdCwgbWFza1Rva2VuLm1hdGNoZXMpIC0gMV07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1hdGNoID0gaGFuZGxlTWF0Y2godG9rZW5Hcm91cCwgWyBxbmR4IF0uY29uY2F0KGxvb3BOZHgpLCB0b2tlbkdyb3VwKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG1hdGNoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsYXRlc3RNYXRjaCA9IG1hdGNoZXNbbWF0Y2hlcy5sZW5ndGggLSAxXS5tYXRjaDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxhdGVzdE1hdGNoLm9wdGlvbmFsUXVhbnRpZmllciA9IHFuZHggPj0gcXQucXVhbnRpZmllci5taW47XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsYXRlc3RNYXRjaC5qaXQgPSAocW5keCB8fCAxKSAqIHRva2VuR3JvdXAubWF0Y2hlcy5pbmRleE9mKGxhdGVzdE1hdGNoKSA+PSBxdC5xdWFudGlmaWVyLmppdDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChsYXRlc3RNYXRjaC5vcHRpb25hbFF1YW50aWZpZXIgJiYgaXNGaXJzdE1hdGNoKGxhdGVzdE1hdGNoLCB0b2tlbkdyb3VwKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGluc2VydFN0b3AgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRlc3RQb3MgPSBwb3M7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAobGF0ZXN0TWF0Y2guaml0KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZ2V0TWFza1NldCgpLmppdE9mZnNldFtwb3NdID0gdG9rZW5Hcm91cC5tYXRjaGVzLmluZGV4T2YobGF0ZXN0TWF0Y2gpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1hdGNoID0gcmVzb2x2ZVRlc3RGcm9tVG9rZW4obWF0Y2gsIG5keEluaXRpYWxpemVyLCBsb29wTmR4LCBxdWFudGlmaWVyUmVjdXJzZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG1hdGNoKSByZXR1cm4gdHJ1ZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRlc3RQb3MrKztcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciB0bmR4ID0gbmR4SW5pdGlhbGl6ZXIubGVuZ3RoID4gMCA/IG5keEluaXRpYWxpemVyLnNoaWZ0KCkgOiAwOyB0bmR4IDwgbWFza1Rva2VuLm1hdGNoZXMubGVuZ3RoOyB0bmR4KyspIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG1hc2tUb2tlbi5tYXRjaGVzW3RuZHhdLmlzUXVhbnRpZmllciAhPT0gdHJ1ZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIG1hdGNoID0gaGFuZGxlTWF0Y2gobWFza1Rva2VuLm1hdGNoZXNbdG5keF0sIFsgdG5keCBdLmNvbmNhdChsb29wTmR4KSwgcXVhbnRpZmllclJlY3Vyc2UpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG1hdGNoICYmIHRlc3RQb3MgPT09IHBvcykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBtYXRjaDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAodGVzdFBvcyA+IHBvcykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZnVuY3Rpb24gbWVyZ2VMb2NhdG9ycyhwb3MsIHRlc3RzKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIGxvY2F0b3IgPSBbXTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoISQuaXNBcnJheSh0ZXN0cykpIHRlc3RzID0gWyB0ZXN0cyBdO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICh0ZXN0cy5sZW5ndGggPiAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0ZXN0c1swXS5hbHRlcm5hdGlvbiA9PT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsb2NhdG9yID0gZGV0ZXJtaW5lVGVzdFRlbXBsYXRlKHBvcywgdGVzdHMuc2xpY2UoKSkubG9jYXRvci5zbGljZSgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGxvY2F0b3IubGVuZ3RoID09PSAwKSBsb2NhdG9yID0gdGVzdHNbMF0ubG9jYXRvci5zbGljZSgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJC5lYWNoKHRlc3RzLCBmdW5jdGlvbihuZHgsIHRzdCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0c3QuZGVmICE9PSBcIlwiKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChsb2NhdG9yLmxlbmd0aCA9PT0gMCkgbG9jYXRvciA9IHRzdC5sb2NhdG9yLnNsaWNlKCk7IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsb2NhdG9yLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRzdC5sb2NhdG9yW2ldICYmIGxvY2F0b3JbaV0udG9TdHJpbmcoKS5pbmRleE9mKHRzdC5sb2NhdG9yW2ldKSA9PT0gLTEpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbG9jYXRvcltpXSArPSBcIixcIiArIHRzdC5sb2NhdG9yW2ldO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBsb2NhdG9yO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgaWYgKHBvcyA+IC0xKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKG5keEludGx6ciA9PT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBwcmV2aW91c1BvcyA9IHBvcyAtIDEsIHRlc3Q7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHdoaWxlICgodGVzdCA9IGdldE1hc2tTZXQoKS52YWxpZFBvc2l0aW9uc1twcmV2aW91c1Bvc10gfHwgZ2V0TWFza1NldCgpLnRlc3RzW3ByZXZpb3VzUG9zXSkgPT09IHVuZGVmaW5lZCAmJiBwcmV2aW91c1BvcyA+IC0xKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwcmV2aW91c1Bvcy0tO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0ZXN0ICE9PSB1bmRlZmluZWQgJiYgcHJldmlvdXNQb3MgPiAtMSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbmR4SW5pdGlhbGl6ZXIgPSBtZXJnZUxvY2F0b3JzKHByZXZpb3VzUG9zLCB0ZXN0KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhY2hlRGVwZW5kZW5jeSA9IG5keEluaXRpYWxpemVyLmpvaW4oXCJcIik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0ZXN0UG9zID0gcHJldmlvdXNQb3M7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGdldE1hc2tTZXQoKS50ZXN0c1twb3NdICYmIGdldE1hc2tTZXQoKS50ZXN0c1twb3NdWzBdLmNkID09PSBjYWNoZURlcGVuZGVuY3kpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGdldE1hc2tTZXQoKS50ZXN0c1twb3NdO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBtdG5keCA9IG5keEluaXRpYWxpemVyLnNoaWZ0KCk7IG10bmR4IDwgbWFza1Rva2Vucy5sZW5ndGg7IG10bmR4KyspIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIG1hdGNoID0gcmVzb2x2ZVRlc3RGcm9tVG9rZW4obWFza1Rva2Vuc1ttdG5keF0sIG5keEluaXRpYWxpemVyLCBbIG10bmR4IF0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAobWF0Y2ggJiYgdGVzdFBvcyA9PT0gcG9zIHx8IHRlc3RQb3MgPiBwb3MpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgaWYgKG1hdGNoZXMubGVuZ3RoID09PSAwIHx8IGluc2VydFN0b3ApIHtcclxuICAgICAgICAgICAgICAgICAgICBtYXRjaGVzLnB1c2goe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBtYXRjaDoge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZm46IG51bGwsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBvcHRpb25hbGl0eTogZmFsc2UsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNpbmc6IG51bGwsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkZWY6IFwiXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwbGFjZWhvbGRlcjogXCJcIlxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBsb2NhdG9yOiBbXSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgbWxvYzoge30sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNkOiBjYWNoZURlcGVuZGVuY3lcclxuICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGlmIChuZHhJbnRsenIgIT09IHVuZGVmaW5lZCAmJiBnZXRNYXNrU2V0KCkudGVzdHNbcG9zXSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAkLmV4dGVuZCh0cnVlLCBbXSwgbWF0Y2hlcyk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBnZXRNYXNrU2V0KCkudGVzdHNbcG9zXSA9ICQuZXh0ZW5kKHRydWUsIFtdLCBtYXRjaGVzKTtcclxuICAgICAgICAgICAgICAgIHJldHVybiBnZXRNYXNrU2V0KCkudGVzdHNbcG9zXTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBmdW5jdGlvbiBnZXRCdWZmZXJUZW1wbGF0ZSgpIHtcclxuICAgICAgICAgICAgICAgIGlmIChnZXRNYXNrU2V0KCkuX2J1ZmZlciA9PT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgZ2V0TWFza1NldCgpLl9idWZmZXIgPSBnZXRNYXNrVGVtcGxhdGUoZmFsc2UsIDEpO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChnZXRNYXNrU2V0KCkuYnVmZmVyID09PSB1bmRlZmluZWQpIGdldE1hc2tTZXQoKS5idWZmZXIgPSBnZXRNYXNrU2V0KCkuX2J1ZmZlci5zbGljZSgpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGdldE1hc2tTZXQoKS5fYnVmZmVyO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGZ1bmN0aW9uIGdldEJ1ZmZlcihub0NhY2hlKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoZ2V0TWFza1NldCgpLmJ1ZmZlciA9PT0gdW5kZWZpbmVkIHx8IG5vQ2FjaGUgPT09IHRydWUpIHtcclxuICAgICAgICAgICAgICAgICAgICBnZXRNYXNrU2V0KCkuYnVmZmVyID0gZ2V0TWFza1RlbXBsYXRlKHRydWUsIGdldExhc3RWYWxpZFBvc2l0aW9uKCksIHRydWUpO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChnZXRNYXNrU2V0KCkuX2J1ZmZlciA9PT0gdW5kZWZpbmVkKSBnZXRNYXNrU2V0KCkuX2J1ZmZlciA9IGdldE1hc2tTZXQoKS5idWZmZXIuc2xpY2UoKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIHJldHVybiBnZXRNYXNrU2V0KCkuYnVmZmVyO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGZ1bmN0aW9uIHJlZnJlc2hGcm9tQnVmZmVyKHN0YXJ0LCBlbmQsIGJ1ZmZlcikge1xyXG4gICAgICAgICAgICAgICAgdmFyIGksIHA7XHJcbiAgICAgICAgICAgICAgICBpZiAoc3RhcnQgPT09IHRydWUpIHtcclxuICAgICAgICAgICAgICAgICAgICByZXNldE1hc2tTZXQoKTtcclxuICAgICAgICAgICAgICAgICAgICBzdGFydCA9IDA7XHJcbiAgICAgICAgICAgICAgICAgICAgZW5kID0gYnVmZmVyLmxlbmd0aDtcclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgZm9yIChpID0gc3RhcnQ7IGkgPCBlbmQ7IGkrKykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBkZWxldGUgZ2V0TWFza1NldCgpLnZhbGlkUG9zaXRpb25zW2ldO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIHAgPSBzdGFydDtcclxuICAgICAgICAgICAgICAgIGZvciAoaSA9IHN0YXJ0OyBpIDwgZW5kOyBpKyspIHtcclxuICAgICAgICAgICAgICAgICAgICByZXNldE1hc2tTZXQodHJ1ZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGJ1ZmZlcltpXSAhPT0gb3B0cy5za2lwT3B0aW9uYWxQYXJ0Q2hhcmFjdGVyKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciB2YWxSZXN1bHQgPSBpc1ZhbGlkKHAsIGJ1ZmZlcltpXSwgdHJ1ZSwgdHJ1ZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh2YWxSZXN1bHQgIT09IGZhbHNlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXNldE1hc2tTZXQodHJ1ZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwID0gdmFsUmVzdWx0LmNhcmV0ICE9PSB1bmRlZmluZWQgPyB2YWxSZXN1bHQuY2FyZXQgOiB2YWxSZXN1bHQucG9zICsgMTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBmdW5jdGlvbiBjYXNpbmcoZWxlbSwgdGVzdCwgcG9zKSB7XHJcbiAgICAgICAgICAgICAgICBzd2l0Y2ggKG9wdHMuY2FzaW5nIHx8IHRlc3QuY2FzaW5nKSB7XHJcbiAgICAgICAgICAgICAgICAgIGNhc2UgXCJ1cHBlclwiOlxyXG4gICAgICAgICAgICAgICAgICAgIGVsZW0gPSBlbGVtLnRvVXBwZXJDYXNlKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcblxyXG4gICAgICAgICAgICAgICAgICBjYXNlIFwibG93ZXJcIjpcclxuICAgICAgICAgICAgICAgICAgICBlbGVtID0gZWxlbS50b0xvd2VyQ2FzZSgpO1xyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG5cclxuICAgICAgICAgICAgICAgICAgY2FzZSBcInRpdGxlXCI6XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIHBvc0JlZm9yZSA9IGdldE1hc2tTZXQoKS52YWxpZFBvc2l0aW9uc1twb3MgLSAxXTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAocG9zID09PSAwIHx8IHBvc0JlZm9yZSAmJiBwb3NCZWZvcmUuaW5wdXQgPT09IFN0cmluZy5mcm9tQ2hhckNvZGUoSW5wdXRtYXNrLmtleUNvZGUuU1BBQ0UpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGVsZW0gPSBlbGVtLnRvVXBwZXJDYXNlKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZWxlbSA9IGVsZW0udG9Mb3dlckNhc2UoKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcblxyXG4gICAgICAgICAgICAgICAgICBkZWZhdWx0OlxyXG4gICAgICAgICAgICAgICAgICAgIGlmICgkLmlzRnVuY3Rpb24ob3B0cy5jYXNpbmcpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBhcmdzID0gQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoYXJndW1lbnRzKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYXJncy5wdXNoKGdldE1hc2tTZXQoKS52YWxpZFBvc2l0aW9ucyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGVsZW0gPSBvcHRzLmNhc2luZy5hcHBseSh0aGlzLCBhcmdzKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gZWxlbTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBmdW5jdGlvbiBjaGVja0FsdGVybmF0aW9uTWF0Y2goYWx0QXJyMSwgYWx0QXJyMiwgbmEpIHtcclxuICAgICAgICAgICAgICAgIHZhciBhbHRBcnJDID0gb3B0cy5ncmVlZHkgPyBhbHRBcnIyIDogYWx0QXJyMi5zbGljZSgwLCAxKSwgaXNNYXRjaCA9IGZhbHNlLCBuYUFyciA9IG5hICE9PSB1bmRlZmluZWQgPyBuYS5zcGxpdChcIixcIikgOiBbXSwgbmFOZHg7XHJcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IG5hQXJyLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKChuYU5keCA9IGFsdEFycjEuaW5kZXhPZihuYUFycltpXSkpICE9PSAtMSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBhbHRBcnIxLnNwbGljZShuYU5keCwgMSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZm9yICh2YXIgYWxuZHggPSAwOyBhbG5keCA8IGFsdEFycjEubGVuZ3RoOyBhbG5keCsrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKCQuaW5BcnJheShhbHRBcnIxW2FsbmR4XSwgYWx0QXJyQykgIT09IC0xKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlzTWF0Y2ggPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gaXNNYXRjaDtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBmdW5jdGlvbiBhbHRlcm5hdGUocG9zLCBjLCBzdHJpY3QsIGZyb21TZXRWYWxpZCwgckFsdFBvcykge1xyXG4gICAgICAgICAgICAgICAgdmFyIHZhbGlkUHNDbG9uZSA9ICQuZXh0ZW5kKHRydWUsIHt9LCBnZXRNYXNrU2V0KCkudmFsaWRQb3NpdGlvbnMpLCBsYXN0QWx0LCBhbHRlcm5hdGlvbiwgaXNWYWxpZFJzbHQgPSBmYWxzZSwgYWx0UG9zLCBwcmV2QWx0UG9zLCBpLCB2YWxpZFBvcywgZGVjaXNpb25Qb3MsIGxBbHRQb3MgPSByQWx0UG9zICE9PSB1bmRlZmluZWQgPyByQWx0UG9zIDogZ2V0TGFzdFZhbGlkUG9zaXRpb24oKTtcclxuICAgICAgICAgICAgICAgIGlmIChsQWx0UG9zID09PSAtMSAmJiByQWx0UG9zID09PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgICAgICAgICBsYXN0QWx0ID0gMDtcclxuICAgICAgICAgICAgICAgICAgICBwcmV2QWx0UG9zID0gZ2V0VGVzdChsYXN0QWx0KTtcclxuICAgICAgICAgICAgICAgICAgICBhbHRlcm5hdGlvbiA9IHByZXZBbHRQb3MuYWx0ZXJuYXRpb247XHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIGZvciAoO2xBbHRQb3MgPj0gMDsgbEFsdFBvcy0tKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGFsdFBvcyA9IGdldE1hc2tTZXQoKS52YWxpZFBvc2l0aW9uc1tsQWx0UG9zXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGFsdFBvcyAmJiBhbHRQb3MuYWx0ZXJuYXRpb24gIT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHByZXZBbHRQb3MgJiYgcHJldkFsdFBvcy5sb2NhdG9yW2FsdFBvcy5hbHRlcm5hdGlvbl0gIT09IGFsdFBvcy5sb2NhdG9yW2FsdFBvcy5hbHRlcm5hdGlvbl0pIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxhc3RBbHQgPSBsQWx0UG9zO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYWx0ZXJuYXRpb24gPSBnZXRNYXNrU2V0KCkudmFsaWRQb3NpdGlvbnNbbGFzdEFsdF0uYWx0ZXJuYXRpb247XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwcmV2QWx0UG9zID0gYWx0UG9zO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgaWYgKGFsdGVybmF0aW9uICE9PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgICAgICAgICBkZWNpc2lvblBvcyA9IHBhcnNlSW50KGxhc3RBbHQpO1xyXG4gICAgICAgICAgICAgICAgICAgIGdldE1hc2tTZXQoKS5leGNsdWRlc1tkZWNpc2lvblBvc10gPSBnZXRNYXNrU2V0KCkuZXhjbHVkZXNbZGVjaXNpb25Qb3NdIHx8IFtdO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChwb3MgIT09IHRydWUpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZ2V0TWFza1NldCgpLmV4Y2x1ZGVzW2RlY2lzaW9uUG9zXS5wdXNoKGdldERlY2lzaW9uVGFrZXIocHJldkFsdFBvcykpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB2YXIgdmFsaWRJbnB1dHNDbG9uZSA9IFtdLCBzdGF0aWNJbnB1dHNCZWZvcmVQb3MgPSAwO1xyXG4gICAgICAgICAgICAgICAgICAgIGZvciAoaSA9IGRlY2lzaW9uUG9zOyBpIDwgZ2V0TGFzdFZhbGlkUG9zaXRpb24odW5kZWZpbmVkLCB0cnVlKSArIDE7IGkrKykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YWxpZFBvcyA9IGdldE1hc2tTZXQoKS52YWxpZFBvc2l0aW9uc1tpXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHZhbGlkUG9zICYmIHZhbGlkUG9zLmdlbmVyYXRlZElucHV0ICE9PSB0cnVlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWxpZElucHV0c0Nsb25lLnB1c2godmFsaWRQb3MuaW5wdXQpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGkgPCBwb3MpIHN0YXRpY0lucHV0c0JlZm9yZVBvcysrO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBkZWxldGUgZ2V0TWFza1NldCgpLnZhbGlkUG9zaXRpb25zW2ldO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB3aGlsZSAoZ2V0TWFza1NldCgpLmV4Y2x1ZGVzW2RlY2lzaW9uUG9zXSAmJiBnZXRNYXNrU2V0KCkuZXhjbHVkZXNbZGVjaXNpb25Qb3NdLmxlbmd0aCA8IDEwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBwb3NPZmZzZXQgPSBzdGF0aWNJbnB1dHNCZWZvcmVQb3MgKiAtMSwgdmFsaWRJbnB1dHMgPSB2YWxpZElucHV0c0Nsb25lLnNsaWNlKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGdldE1hc2tTZXQoKS50ZXN0c1tkZWNpc2lvblBvc10gPSB1bmRlZmluZWQ7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlc2V0TWFza1NldCh0cnVlKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaXNWYWxpZFJzbHQgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB3aGlsZSAodmFsaWRJbnB1dHMubGVuZ3RoID4gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGlucHV0ID0gdmFsaWRJbnB1dHMuc2hpZnQoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICghKGlzVmFsaWRSc2x0ID0gaXNWYWxpZChnZXRMYXN0VmFsaWRQb3NpdGlvbih1bmRlZmluZWQsIHRydWUpICsgMSwgaW5wdXQsIGZhbHNlLCBmcm9tU2V0VmFsaWQsIHRydWUpKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChpc1ZhbGlkUnNsdCAmJiBjICE9PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciB0YXJnZXRMdnAgPSBnZXRMYXN0VmFsaWRQb3NpdGlvbihwb3MpICsgMTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvciAoaSA9IGRlY2lzaW9uUG9zOyBpIDwgZ2V0TGFzdFZhbGlkUG9zaXRpb24oKSArIDE7IGkrKykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbGlkUG9zID0gZ2V0TWFza1NldCgpLnZhbGlkUG9zaXRpb25zW2ldO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICgodmFsaWRQb3MgPT09IHVuZGVmaW5lZCB8fCB2YWxpZFBvcy5tYXRjaC5mbiA9PSBudWxsKSAmJiBpIDwgcG9zICsgcG9zT2Zmc2V0KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBvc09mZnNldCsrO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBvcyA9IHBvcyArIHBvc09mZnNldDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlzVmFsaWRSc2x0ID0gaXNWYWxpZChwb3MgPiB0YXJnZXRMdnAgPyB0YXJnZXRMdnAgOiBwb3MsIGMsIHN0cmljdCwgZnJvbVNldFZhbGlkLCB0cnVlKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIWlzVmFsaWRSc2x0KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXNldE1hc2tTZXQoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHByZXZBbHRQb3MgPSBnZXRUZXN0KGRlY2lzaW9uUG9zKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGdldE1hc2tTZXQoKS52YWxpZFBvc2l0aW9ucyA9ICQuZXh0ZW5kKHRydWUsIHt9LCB2YWxpZFBzQ2xvbmUpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGdldE1hc2tTZXQoKS5leGNsdWRlc1tkZWNpc2lvblBvc10pIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgZGVjaXNpb25UYWtlciA9IGdldERlY2lzaW9uVGFrZXIocHJldkFsdFBvcyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGdldE1hc2tTZXQoKS5leGNsdWRlc1tkZWNpc2lvblBvc10uaW5kZXhPZihkZWNpc2lvblRha2VyKSAhPT0gLTEpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaXNWYWxpZFJzbHQgPSBhbHRlcm5hdGUocG9zLCBjLCBzdHJpY3QsIGZyb21TZXRWYWxpZCwgZGVjaXNpb25Qb3MgLSAxKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGdldE1hc2tTZXQoKS5leGNsdWRlc1tkZWNpc2lvblBvc10ucHVzaChkZWNpc2lvblRha2VyKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3IgKGkgPSBkZWNpc2lvblBvczsgaSA8IGdldExhc3RWYWxpZFBvc2l0aW9uKHVuZGVmaW5lZCwgdHJ1ZSkgKyAxOyBpKyspIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGVsZXRlIGdldE1hc2tTZXQoKS52YWxpZFBvc2l0aW9uc1tpXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlzVmFsaWRSc2x0ID0gYWx0ZXJuYXRlKHBvcywgYywgc3RyaWN0LCBmcm9tU2V0VmFsaWQsIGRlY2lzaW9uUG9zIC0gMSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSBicmVhaztcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBnZXRNYXNrU2V0KCkuZXhjbHVkZXNbZGVjaXNpb25Qb3NdID0gdW5kZWZpbmVkO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGlzVmFsaWRSc2x0O1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGZ1bmN0aW9uIGlzVmFsaWQocG9zLCBjLCBzdHJpY3QsIGZyb21TZXRWYWxpZCwgZnJvbUFsdGVybmF0ZSwgdmFsaWRhdGVPbmx5KSB7XHJcbiAgICAgICAgICAgICAgICBmdW5jdGlvbiBpc1NlbGVjdGlvbihwb3NPYmopIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gaXNSVEwgPyBwb3NPYmouYmVnaW4gLSBwb3NPYmouZW5kID4gMSB8fCBwb3NPYmouYmVnaW4gLSBwb3NPYmouZW5kID09PSAxIDogcG9zT2JqLmVuZCAtIHBvc09iai5iZWdpbiA+IDEgfHwgcG9zT2JqLmVuZCAtIHBvc09iai5iZWdpbiA9PT0gMTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIHN0cmljdCA9IHN0cmljdCA9PT0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgIHZhciBtYXNrUG9zID0gcG9zO1xyXG4gICAgICAgICAgICAgICAgaWYgKHBvcy5iZWdpbiAhPT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgbWFza1BvcyA9IGlzUlRMID8gcG9zLmVuZCA6IHBvcy5iZWdpbjtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGZ1bmN0aW9uIF9pc1ZhbGlkKHBvc2l0aW9uLCBjLCBzdHJpY3QpIHtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgcnNsdCA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgICAgICQuZWFjaChnZXRUZXN0cyhwb3NpdGlvbiksIGZ1bmN0aW9uKG5keCwgdHN0KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciB0ZXN0ID0gdHN0Lm1hdGNoO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBnZXRCdWZmZXIodHJ1ZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJzbHQgPSB0ZXN0LmZuICE9IG51bGwgPyB0ZXN0LmZuLnRlc3QoYywgZ2V0TWFza1NldCgpLCBwb3NpdGlvbiwgc3RyaWN0LCBvcHRzLCBpc1NlbGVjdGlvbihwb3MpKSA6IChjID09PSB0ZXN0LmRlZiB8fCBjID09PSBvcHRzLnNraXBPcHRpb25hbFBhcnRDaGFyYWN0ZXIpICYmIHRlc3QuZGVmICE9PSBcIlwiID8ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYzogZ2V0UGxhY2Vob2xkZXIocG9zaXRpb24sIHRlc3QsIHRydWUpIHx8IHRlc3QuZGVmLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcG9zOiBwb3NpdGlvblxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9IDogZmFsc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChyc2x0ICE9PSBmYWxzZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGVsZW0gPSByc2x0LmMgIT09IHVuZGVmaW5lZCA/IHJzbHQuYyA6IGMsIHZhbGlkYXRlZFBvcyA9IHBvc2l0aW9uO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxlbSA9IGVsZW0gPT09IG9wdHMuc2tpcE9wdGlvbmFsUGFydENoYXJhY3RlciAmJiB0ZXN0LmZuID09PSBudWxsID8gZ2V0UGxhY2Vob2xkZXIocG9zaXRpb24sIHRlc3QsIHRydWUpIHx8IHRlc3QuZGVmIDogZWxlbTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChyc2x0LnJlbW92ZSAhPT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCEkLmlzQXJyYXkocnNsdC5yZW1vdmUpKSByc2x0LnJlbW92ZSA9IFsgcnNsdC5yZW1vdmUgXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkLmVhY2gocnNsdC5yZW1vdmUuc29ydChmdW5jdGlvbihhLCBiKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBiIC0gYTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KSwgZnVuY3Rpb24obmR4LCBsbW50KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldmFsaWRhdGVNYXNrKHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJlZ2luOiBsbW50LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZW5kOiBsbW50ICsgMVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChyc2x0Lmluc2VydCAhPT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCEkLmlzQXJyYXkocnNsdC5pbnNlcnQpKSByc2x0Lmluc2VydCA9IFsgcnNsdC5pbnNlcnQgXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkLmVhY2gocnNsdC5pbnNlcnQuc29ydChmdW5jdGlvbihhLCBiKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBhIC0gYjtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KSwgZnVuY3Rpb24obmR4LCBsbW50KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlzVmFsaWQobG1udC5wb3MsIGxtbnQuYywgdHJ1ZSwgZnJvbVNldFZhbGlkKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChyc2x0ICE9PSB0cnVlICYmIHJzbHQucG9zICE9PSB1bmRlZmluZWQgJiYgcnNsdC5wb3MgIT09IHBvc2l0aW9uKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsaWRhdGVkUG9zID0gcnNsdC5wb3M7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAocnNsdCAhPT0gdHJ1ZSAmJiByc2x0LnBvcyA9PT0gdW5kZWZpbmVkICYmIHJzbHQuYyA9PT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFyZXZhbGlkYXRlTWFzayhwb3MsICQuZXh0ZW5kKHt9LCB0c3QsIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbnB1dDogY2FzaW5nKGVsZW0sIHRlc3QsIHZhbGlkYXRlZFBvcylcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pLCBmcm9tU2V0VmFsaWQsIHZhbGlkYXRlZFBvcykpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByc2x0ID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gcnNsdDtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIHZhciByZXN1bHQgPSB0cnVlLCBwb3NpdGlvbnNDbG9uZSA9ICQuZXh0ZW5kKHRydWUsIHt9LCBnZXRNYXNrU2V0KCkudmFsaWRQb3NpdGlvbnMpO1xyXG4gICAgICAgICAgICAgICAgaWYgKCQuaXNGdW5jdGlvbihvcHRzLnByZVZhbGlkYXRpb24pICYmICFzdHJpY3QgJiYgZnJvbVNldFZhbGlkICE9PSB0cnVlICYmIHZhbGlkYXRlT25seSAhPT0gdHJ1ZSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHJlc3VsdCA9IG9wdHMucHJlVmFsaWRhdGlvbihnZXRCdWZmZXIoKSwgbWFza1BvcywgYywgaXNTZWxlY3Rpb24ocG9zKSwgb3B0cywgZ2V0TWFza1NldCgpKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGlmIChyZXN1bHQgPT09IHRydWUpIHtcclxuICAgICAgICAgICAgICAgICAgICB0cmFja2JhY2tQb3NpdGlvbnModW5kZWZpbmVkLCBtYXNrUG9zLCB0cnVlKTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAobWF4TGVuZ3RoID09PSB1bmRlZmluZWQgfHwgbWFza1BvcyA8IG1heExlbmd0aCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXN1bHQgPSBfaXNWYWxpZChtYXNrUG9zLCBjLCBzdHJpY3QpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoKCFzdHJpY3QgfHwgZnJvbVNldFZhbGlkID09PSB0cnVlKSAmJiByZXN1bHQgPT09IGZhbHNlICYmIHZhbGlkYXRlT25seSAhPT0gdHJ1ZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGN1cnJlbnRQb3NWYWxpZCA9IGdldE1hc2tTZXQoKS52YWxpZFBvc2l0aW9uc1ttYXNrUG9zXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChjdXJyZW50UG9zVmFsaWQgJiYgY3VycmVudFBvc1ZhbGlkLm1hdGNoLmZuID09PSBudWxsICYmIChjdXJyZW50UG9zVmFsaWQubWF0Y2guZGVmID09PSBjIHx8IGMgPT09IG9wdHMuc2tpcE9wdGlvbmFsUGFydENoYXJhY3RlcikpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXN1bHQgPSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhcmV0OiBzZWVrTmV4dChtYXNrUG9zKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICgob3B0cy5pbnNlcnRNb2RlIHx8IGdldE1hc2tTZXQoKS52YWxpZFBvc2l0aW9uc1tzZWVrTmV4dChtYXNrUG9zKV0gPT09IHVuZGVmaW5lZCkgJiYgKCFpc01hc2sobWFza1BvcywgdHJ1ZSkgfHwgZ2V0TWFza1NldCgpLmppdE9mZnNldFttYXNrUG9zXSkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGdldE1hc2tTZXQoKS5qaXRPZmZzZXRbbWFza1Bvc10gJiYgZ2V0TWFza1NldCgpLnZhbGlkUG9zaXRpb25zW3NlZWtOZXh0KG1hc2tQb3MpXSA9PT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXN1bHQgPSBpc1ZhbGlkKG1hc2tQb3MgKyBnZXRNYXNrU2V0KCkuaml0T2Zmc2V0W21hc2tQb3NdLCBjLCBzdHJpY3QpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHJlc3VsdCAhPT0gZmFsc2UpIHJlc3VsdC5jYXJldCA9IG1hc2tQb3M7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSBmb3IgKHZhciBuUG9zID0gbWFza1BvcyArIDEsIHNuUG9zID0gc2Vla05leHQobWFza1Bvcyk7IG5Qb3MgPD0gc25Qb3M7IG5Qb3MrKykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVzdWx0ID0gX2lzVmFsaWQoblBvcywgYywgc3RyaWN0KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChyZXN1bHQgIT09IGZhbHNlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVzdWx0ID0gdHJhY2tiYWNrUG9zaXRpb25zKG1hc2tQb3MsIHJlc3VsdC5wb3MgIT09IHVuZGVmaW5lZCA/IHJlc3VsdC5wb3MgOiBuUG9zKSB8fCByZXN1bHQ7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbWFza1BvcyA9IG5Qb3M7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHJlc3VsdCA9PT0gZmFsc2UgJiYgb3B0cy5rZWVwU3RhdGljICE9PSBmYWxzZSAmJiAob3B0cy5yZWdleCA9PSBudWxsIHx8IGlzQ29tcGxldGUoZ2V0QnVmZmVyKCkpKSAmJiAhc3RyaWN0ICYmIGZyb21BbHRlcm5hdGUgIT09IHRydWUpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmVzdWx0ID0gYWx0ZXJuYXRlKG1hc2tQb3MsIGMsIHN0cmljdCwgZnJvbVNldFZhbGlkKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHJlc3VsdCA9PT0gdHJ1ZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXN1bHQgPSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwb3M6IG1hc2tQb3NcclxuICAgICAgICAgICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBpZiAoJC5pc0Z1bmN0aW9uKG9wdHMucG9zdFZhbGlkYXRpb24pICYmIHJlc3VsdCAhPT0gZmFsc2UgJiYgIXN0cmljdCAmJiBmcm9tU2V0VmFsaWQgIT09IHRydWUgJiYgdmFsaWRhdGVPbmx5ICE9PSB0cnVlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIHBvc3RSZXN1bHQgPSBvcHRzLnBvc3RWYWxpZGF0aW9uKGdldEJ1ZmZlcih0cnVlKSwgcG9zLmJlZ2luICE9PSB1bmRlZmluZWQgPyBpc1JUTCA/IHBvcy5lbmQgOiBwb3MuYmVnaW4gOiBwb3MsIHJlc3VsdCwgb3B0cyk7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHBvc3RSZXN1bHQgIT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAocG9zdFJlc3VsdC5yZWZyZXNoRnJvbUJ1ZmZlciAmJiBwb3N0UmVzdWx0LmJ1ZmZlcikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHJlZnJlc2ggPSBwb3N0UmVzdWx0LnJlZnJlc2hGcm9tQnVmZmVyO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVmcmVzaEZyb21CdWZmZXIocmVmcmVzaCA9PT0gdHJ1ZSA/IHJlZnJlc2ggOiByZWZyZXNoLnN0YXJ0LCByZWZyZXNoLmVuZCwgcG9zdFJlc3VsdC5idWZmZXIpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlc3VsdCA9IHBvc3RSZXN1bHQgPT09IHRydWUgPyByZXN1bHQgOiBwb3N0UmVzdWx0O1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGlmIChyZXN1bHQgJiYgcmVzdWx0LnBvcyA9PT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmVzdWx0LnBvcyA9IG1hc2tQb3M7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBpZiAocmVzdWx0ID09PSBmYWxzZSB8fCB2YWxpZGF0ZU9ubHkgPT09IHRydWUpIHtcclxuICAgICAgICAgICAgICAgICAgICByZXNldE1hc2tTZXQodHJ1ZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgZ2V0TWFza1NldCgpLnZhbGlkUG9zaXRpb25zID0gJC5leHRlbmQodHJ1ZSwge30sIHBvc2l0aW9uc0Nsb25lKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIHJldHVybiByZXN1bHQ7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZnVuY3Rpb24gdHJhY2tiYWNrUG9zaXRpb25zKG9yaWdpbmFsUG9zLCBuZXdQb3MsIGZpbGxPbmx5KSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgcmVzdWx0O1xyXG4gICAgICAgICAgICAgICAgaWYgKG9yaWdpbmFsUG9zID09PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgICAgICAgICBmb3IgKG9yaWdpbmFsUG9zID0gbmV3UG9zIC0gMTsgb3JpZ2luYWxQb3MgPiAwOyBvcmlnaW5hbFBvcy0tKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChnZXRNYXNrU2V0KCkudmFsaWRQb3NpdGlvbnNbb3JpZ2luYWxQb3NdKSBicmVhaztcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBwcyA9IG9yaWdpbmFsUG9zOyBwcyA8IG5ld1BvczsgcHMrKykge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChnZXRNYXNrU2V0KCkudmFsaWRQb3NpdGlvbnNbcHNdID09PSB1bmRlZmluZWQgJiYgIWlzTWFzayhwcywgdHJ1ZSkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHZwID0gcHMgPT0gMCA/IGdldFRlc3QocHMpIDogZ2V0TWFza1NldCgpLnZhbGlkUG9zaXRpb25zW3BzIC0gMV07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh2cCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHRlc3RzID0gZ2V0VGVzdHMocHMpLnNsaWNlKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodGVzdHNbdGVzdHMubGVuZ3RoIC0gMV0ubWF0Y2guZGVmID09PSBcIlwiKSB0ZXN0cy5wb3AoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBiZXN0TWF0Y2ggPSBkZXRlcm1pbmVUZXN0VGVtcGxhdGUocHMsIHRlc3RzKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJlc3RNYXRjaCA9ICQuZXh0ZW5kKHt9LCBiZXN0TWF0Y2gsIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbnB1dDogZ2V0UGxhY2Vob2xkZXIocHMsIGJlc3RNYXRjaC5tYXRjaCwgdHJ1ZSkgfHwgYmVzdE1hdGNoLm1hdGNoLmRlZlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBiZXN0TWF0Y2guZ2VuZXJhdGVkSW5wdXQgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV2YWxpZGF0ZU1hc2socHMsIGJlc3RNYXRjaCwgdHJ1ZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoZmlsbE9ubHkgIT09IHRydWUpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgY3ZwSW5wdXQgPSBnZXRNYXNrU2V0KCkudmFsaWRQb3NpdGlvbnNbbmV3UG9zXS5pbnB1dDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBnZXRNYXNrU2V0KCkudmFsaWRQb3NpdGlvbnNbbmV3UG9zXSA9IHVuZGVmaW5lZDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXN1bHQgPSBpc1ZhbGlkKG5ld1BvcywgY3ZwSW5wdXQsIHRydWUsIHRydWUpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHJlc3VsdDtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBmdW5jdGlvbiByZXZhbGlkYXRlTWFzayhwb3MsIHZhbGlkVGVzdCwgZnJvbVNldFZhbGlkLCB2YWxpZGF0ZWRQb3MpIHtcclxuICAgICAgICAgICAgICAgIGZ1bmN0aW9uIElzRW5jbG9zZWRTdGF0aWMocG9zLCB2YWxpZHMsIHNlbGVjdGlvbikge1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBwb3NNYXRjaCA9IHZhbGlkc1twb3NdO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChwb3NNYXRjaCAhPT0gdW5kZWZpbmVkICYmIChwb3NNYXRjaC5tYXRjaC5mbiA9PT0gbnVsbCAmJiBwb3NNYXRjaC5tYXRjaC5vcHRpb25hbGl0eSAhPT0gdHJ1ZSB8fCBwb3NNYXRjaC5pbnB1dCA9PT0gb3B0cy5yYWRpeFBvaW50KSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgcHJldk1hdGNoID0gc2VsZWN0aW9uLmJlZ2luIDw9IHBvcyAtIDEgPyB2YWxpZHNbcG9zIC0gMV0gJiYgdmFsaWRzW3BvcyAtIDFdLm1hdGNoLmZuID09PSBudWxsICYmIHZhbGlkc1twb3MgLSAxXSA6IHZhbGlkc1twb3MgLSAxXSwgbmV4dE1hdGNoID0gc2VsZWN0aW9uLmVuZCA+IHBvcyArIDEgPyB2YWxpZHNbcG9zICsgMV0gJiYgdmFsaWRzW3BvcyArIDFdLm1hdGNoLmZuID09PSBudWxsICYmIHZhbGlkc1twb3MgKyAxXSA6IHZhbGlkc1twb3MgKyAxXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHByZXZNYXRjaCAmJiBuZXh0TWF0Y2g7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIHZhciBiZWdpbiA9IHBvcy5iZWdpbiAhPT0gdW5kZWZpbmVkID8gcG9zLmJlZ2luIDogcG9zLCBlbmQgPSBwb3MuZW5kICE9PSB1bmRlZmluZWQgPyBwb3MuZW5kIDogcG9zO1xyXG4gICAgICAgICAgICAgICAgaWYgKHBvcy5iZWdpbiA+IHBvcy5lbmQpIHtcclxuICAgICAgICAgICAgICAgICAgICBiZWdpbiA9IHBvcy5lbmQ7XHJcbiAgICAgICAgICAgICAgICAgICAgZW5kID0gcG9zLmJlZ2luO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgdmFsaWRhdGVkUG9zID0gdmFsaWRhdGVkUG9zICE9PSB1bmRlZmluZWQgPyB2YWxpZGF0ZWRQb3MgOiBiZWdpbjtcclxuICAgICAgICAgICAgICAgIGlmIChiZWdpbiAhPT0gZW5kIHx8IG9wdHMuaW5zZXJ0TW9kZSAmJiBnZXRNYXNrU2V0KCkudmFsaWRQb3NpdGlvbnNbdmFsaWRhdGVkUG9zXSAhPT0gdW5kZWZpbmVkICYmIGZyb21TZXRWYWxpZCA9PT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIHBvc2l0aW9uc0Nsb25lID0gJC5leHRlbmQodHJ1ZSwge30sIGdldE1hc2tTZXQoKS52YWxpZFBvc2l0aW9ucyksIGx2cCA9IGdldExhc3RWYWxpZFBvc2l0aW9uKHVuZGVmaW5lZCwgdHJ1ZSksIGk7XHJcbiAgICAgICAgICAgICAgICAgICAgZ2V0TWFza1NldCgpLnAgPSBiZWdpbjtcclxuICAgICAgICAgICAgICAgICAgICBmb3IgKGkgPSBsdnA7IGkgPj0gYmVnaW47IGktLSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoZ2V0TWFza1NldCgpLnZhbGlkUG9zaXRpb25zW2ldICYmIGdldE1hc2tTZXQoKS52YWxpZFBvc2l0aW9uc1tpXS5tYXRjaC5uYXRpdmVEZWYgPT09IFwiK1wiKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBvcHRzLmlzTmVnYXRpdmUgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBkZWxldGUgZ2V0TWFza1NldCgpLnZhbGlkUG9zaXRpb25zW2ldO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB2YXIgdmFsaWQgPSB0cnVlLCBqID0gdmFsaWRhdGVkUG9zLCB2cHMgPSBnZXRNYXNrU2V0KCkudmFsaWRQb3NpdGlvbnMsIG5lZWRzVmFsaWRhdGlvbiA9IGZhbHNlLCBwb3NNYXRjaCA9IGosIGkgPSBqO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICh2YWxpZFRlc3QpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZ2V0TWFza1NldCgpLnZhbGlkUG9zaXRpb25zW3ZhbGlkYXRlZFBvc10gPSAkLmV4dGVuZCh0cnVlLCB7fSwgdmFsaWRUZXN0KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcG9zTWF0Y2grKztcclxuICAgICAgICAgICAgICAgICAgICAgICAgaisrO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoYmVnaW4gPCBlbmQpIGkrKztcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgZm9yICg7aSA8PSBsdnA7IGkrKykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgdCA9IHBvc2l0aW9uc0Nsb25lW2ldO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAodCAhPT0gdW5kZWZpbmVkICYmIChpID49IGVuZCB8fCBpID49IGJlZ2luICYmIHQuZ2VuZXJhdGVkSW5wdXQgIT09IHRydWUgJiYgSXNFbmNsb3NlZFN0YXRpYyhpLCBwb3NpdGlvbnNDbG9uZSwge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYmVnaW46IGJlZ2luLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZW5kOiBlbmRcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSkpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB3aGlsZSAoZ2V0VGVzdChwb3NNYXRjaCkubWF0Y2guZGVmICE9PSBcIlwiKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG5lZWRzVmFsaWRhdGlvbiA9PT0gZmFsc2UgJiYgcG9zaXRpb25zQ2xvbmVbcG9zTWF0Y2hdICYmIHBvc2l0aW9uc0Nsb25lW3Bvc01hdGNoXS5tYXRjaC5uYXRpdmVEZWYgPT09IHQubWF0Y2gubmF0aXZlRGVmKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGdldE1hc2tTZXQoKS52YWxpZFBvc2l0aW9uc1twb3NNYXRjaF0gPSAkLmV4dGVuZCh0cnVlLCB7fSwgcG9zaXRpb25zQ2xvbmVbcG9zTWF0Y2hdKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZ2V0TWFza1NldCgpLnZhbGlkUG9zaXRpb25zW3Bvc01hdGNoXS5pbnB1dCA9IHQuaW5wdXQ7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRyYWNrYmFja1Bvc2l0aW9ucyh1bmRlZmluZWQsIHBvc01hdGNoLCB0cnVlKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaiA9IHBvc01hdGNoICsgMTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsaWQgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAob3B0cy5zaGlmdFBvc2l0aW9ucyAmJiBwb3NpdGlvbkNhbk1hdGNoRGVmaW5pdGlvbihwb3NNYXRjaCwgdC5tYXRjaC5kZWYpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciByZXN1bHQgPSBpc1ZhbGlkKHBvc01hdGNoLCB0LmlucHV0LCB0cnVlLCB0cnVlKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsaWQgPSByZXN1bHQgIT09IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBqID0gcmVzdWx0LmNhcmV0IHx8IHJlc3VsdC5pbnNlcnQgPyBnZXRMYXN0VmFsaWRQb3NpdGlvbigpIDogcG9zTWF0Y2ggKyAxO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuZWVkc1ZhbGlkYXRpb24gPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbGlkID0gdC5nZW5lcmF0ZWRJbnB1dCA9PT0gdHJ1ZSB8fCB0LmlucHV0ID09PSBvcHRzLnJhZGl4UG9pbnQgJiYgb3B0cy5udW1lcmljSW5wdXQgPT09IHRydWU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh2YWxpZCkgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCF2YWxpZCAmJiBwb3NNYXRjaCA+IGVuZCAmJiBpc01hc2socG9zTWF0Y2gsIHRydWUpICYmICh0Lm1hdGNoLmZuICE9PSBudWxsIHx8IHBvc01hdGNoID4gZ2V0TWFza1NldCgpLm1hc2tMZW5ndGgpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwb3NNYXRjaCsrO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGdldFRlc3QocG9zTWF0Y2gpLm1hdGNoLmRlZiA9PSBcIlwiKSB2YWxpZCA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcG9zTWF0Y2ggPSBqO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghdmFsaWQpIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBpZiAoIXZhbGlkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGdldE1hc2tTZXQoKS52YWxpZFBvc2l0aW9ucyA9ICQuZXh0ZW5kKHRydWUsIHt9LCBwb3NpdGlvbnNDbG9uZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlc2V0TWFza1NldCh0cnVlKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAodmFsaWRUZXN0KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgZ2V0TWFza1NldCgpLnZhbGlkUG9zaXRpb25zW3ZhbGlkYXRlZFBvc10gPSAkLmV4dGVuZCh0cnVlLCB7fSwgdmFsaWRUZXN0KTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIHJlc2V0TWFza1NldCh0cnVlKTtcclxuICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGZ1bmN0aW9uIGlzTWFzayhwb3MsIHN0cmljdCkge1xyXG4gICAgICAgICAgICAgICAgdmFyIHRlc3QgPSBnZXRUZXN0VGVtcGxhdGUocG9zKS5tYXRjaDtcclxuICAgICAgICAgICAgICAgIGlmICh0ZXN0LmRlZiA9PT0gXCJcIikgdGVzdCA9IGdldFRlc3QocG9zKS5tYXRjaDtcclxuICAgICAgICAgICAgICAgIGlmICh0ZXN0LmZuICE9IG51bGwpIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGVzdC5mbjtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGlmIChzdHJpY3QgIT09IHRydWUgJiYgcG9zID4gLTEpIHtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgdGVzdHMgPSBnZXRUZXN0cyhwb3MpO1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0ZXN0cy5sZW5ndGggPiAxICsgKHRlc3RzW3Rlc3RzLmxlbmd0aCAtIDFdLm1hdGNoLmRlZiA9PT0gXCJcIiA/IDEgOiAwKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBmdW5jdGlvbiBzZWVrTmV4dChwb3MsIG5ld0Jsb2NrKSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgcG9zaXRpb24gPSBwb3MgKyAxO1xyXG4gICAgICAgICAgICAgICAgd2hpbGUgKGdldFRlc3QocG9zaXRpb24pLm1hdGNoLmRlZiAhPT0gXCJcIiAmJiAobmV3QmxvY2sgPT09IHRydWUgJiYgKGdldFRlc3QocG9zaXRpb24pLm1hdGNoLm5ld0Jsb2NrTWFya2VyICE9PSB0cnVlIHx8ICFpc01hc2socG9zaXRpb24pKSB8fCBuZXdCbG9jayAhPT0gdHJ1ZSAmJiAhaXNNYXNrKHBvc2l0aW9uKSkpIHtcclxuICAgICAgICAgICAgICAgICAgICBwb3NpdGlvbisrO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHBvc2l0aW9uO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGZ1bmN0aW9uIHNlZWtQcmV2aW91cyhwb3MsIG5ld0Jsb2NrKSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgcG9zaXRpb24gPSBwb3MsIHRlc3RzO1xyXG4gICAgICAgICAgICAgICAgaWYgKHBvc2l0aW9uIDw9IDApIHJldHVybiAwO1xyXG4gICAgICAgICAgICAgICAgd2hpbGUgKC0tcG9zaXRpb24gPiAwICYmIChuZXdCbG9jayA9PT0gdHJ1ZSAmJiBnZXRUZXN0KHBvc2l0aW9uKS5tYXRjaC5uZXdCbG9ja01hcmtlciAhPT0gdHJ1ZSB8fCBuZXdCbG9jayAhPT0gdHJ1ZSAmJiAhaXNNYXNrKHBvc2l0aW9uKSAmJiAodGVzdHMgPSBnZXRUZXN0cyhwb3NpdGlvbiksIFxyXG4gICAgICAgICAgICAgICAgdGVzdHMubGVuZ3RoIDwgMiB8fCB0ZXN0cy5sZW5ndGggPT09IDIgJiYgdGVzdHNbMV0ubWF0Y2guZGVmID09PSBcIlwiKSkpIHt9XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gcG9zaXRpb247XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZnVuY3Rpb24gd3JpdGVCdWZmZXIoaW5wdXQsIGJ1ZmZlciwgY2FyZXRQb3MsIGV2ZW50LCB0cmlnZ2VyRXZlbnRzKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoZXZlbnQgJiYgJC5pc0Z1bmN0aW9uKG9wdHMub25CZWZvcmVXcml0ZSkpIHtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgcmVzdWx0ID0gb3B0cy5vbkJlZm9yZVdyaXRlLmNhbGwoaW5wdXRtYXNrLCBldmVudCwgYnVmZmVyLCBjYXJldFBvcywgb3B0cyk7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHJlc3VsdCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAocmVzdWx0LnJlZnJlc2hGcm9tQnVmZmVyKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgcmVmcmVzaCA9IHJlc3VsdC5yZWZyZXNoRnJvbUJ1ZmZlcjtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlZnJlc2hGcm9tQnVmZmVyKHJlZnJlc2ggPT09IHRydWUgPyByZWZyZXNoIDogcmVmcmVzaC5zdGFydCwgcmVmcmVzaC5lbmQsIHJlc3VsdC5idWZmZXIgfHwgYnVmZmVyKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJ1ZmZlciA9IGdldEJ1ZmZlcih0cnVlKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoY2FyZXRQb3MgIT09IHVuZGVmaW5lZCkgY2FyZXRQb3MgPSByZXN1bHQuY2FyZXQgIT09IHVuZGVmaW5lZCA/IHJlc3VsdC5jYXJldCA6IGNhcmV0UG9zO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGlmIChpbnB1dCAhPT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaW5wdXQuaW5wdXRtYXNrLl92YWx1ZVNldChidWZmZXIuam9pbihcIlwiKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGNhcmV0UG9zICE9PSB1bmRlZmluZWQgJiYgKGV2ZW50ID09PSB1bmRlZmluZWQgfHwgZXZlbnQudHlwZSAhPT0gXCJibHVyXCIpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhcmV0KGlucHV0LCBjYXJldFBvcyk7XHJcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHJlbmRlckNvbG9yTWFzayhpbnB1dCwgY2FyZXRQb3MsIGJ1ZmZlci5sZW5ndGggPT09IDApO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICh0cmlnZ2VyRXZlbnRzID09PSB0cnVlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciAkaW5wdXQgPSAkKGlucHV0KSwgbnB0VmFsID0gaW5wdXQuaW5wdXRtYXNrLl92YWx1ZUdldCgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBza2lwSW5wdXRFdmVudCA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICRpbnB1dC50cmlnZ2VyKFwiaW5wdXRcIik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAobnB0VmFsID09PSBnZXRCdWZmZXJUZW1wbGF0ZSgpLmpvaW4oXCJcIikpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkaW5wdXQudHJpZ2dlcihcImNsZWFyZWRcIik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGlzQ29tcGxldGUoYnVmZmVyKSA9PT0gdHJ1ZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRpbnB1dC50cmlnZ2VyKFwiY29tcGxldGVcIik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sIDApO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBmdW5jdGlvbiBnZXRQbGFjZWhvbGRlcihwb3MsIHRlc3QsIHJldHVyblBMKSB7XHJcbiAgICAgICAgICAgICAgICB0ZXN0ID0gdGVzdCB8fCBnZXRUZXN0KHBvcykubWF0Y2g7XHJcbiAgICAgICAgICAgICAgICBpZiAodGVzdC5wbGFjZWhvbGRlciAhPT0gdW5kZWZpbmVkIHx8IHJldHVyblBMID09PSB0cnVlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuICQuaXNGdW5jdGlvbih0ZXN0LnBsYWNlaG9sZGVyKSA/IHRlc3QucGxhY2Vob2xkZXIob3B0cykgOiB0ZXN0LnBsYWNlaG9sZGVyO1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmICh0ZXN0LmZuID09PSBudWxsKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHBvcyA+IC0xICYmIGdldE1hc2tTZXQoKS52YWxpZFBvc2l0aW9uc1twb3NdID09PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHRlc3RzID0gZ2V0VGVzdHMocG9zKSwgc3RhdGljQWx0ZXJuYXRpb25zID0gW10sIHByZXZUZXN0O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAodGVzdHMubGVuZ3RoID4gMSArICh0ZXN0c1t0ZXN0cy5sZW5ndGggLSAxXS5tYXRjaC5kZWYgPT09IFwiXCIgPyAxIDogMCkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdGVzdHMubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodGVzdHNbaV0ubWF0Y2gub3B0aW9uYWxpdHkgIT09IHRydWUgJiYgdGVzdHNbaV0ubWF0Y2gub3B0aW9uYWxRdWFudGlmaWVyICE9PSB0cnVlICYmICh0ZXN0c1tpXS5tYXRjaC5mbiA9PT0gbnVsbCB8fCBwcmV2VGVzdCA9PT0gdW5kZWZpbmVkIHx8IHRlc3RzW2ldLm1hdGNoLmZuLnRlc3QocHJldlRlc3QubWF0Y2guZGVmLCBnZXRNYXNrU2V0KCksIHBvcywgdHJ1ZSwgb3B0cykgIT09IGZhbHNlKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdGF0aWNBbHRlcm5hdGlvbnMucHVzaCh0ZXN0c1tpXSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0ZXN0c1tpXS5tYXRjaC5mbiA9PT0gbnVsbCkgcHJldlRlc3QgPSB0ZXN0c1tpXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHN0YXRpY0FsdGVybmF0aW9ucy5sZW5ndGggPiAxKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoL1swLTlhLWJBLVpdLy50ZXN0KHN0YXRpY0FsdGVybmF0aW9uc1swXS5tYXRjaC5kZWYpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG9wdHMucGxhY2Vob2xkZXIuY2hhckF0KHBvcyAlIG9wdHMucGxhY2Vob2xkZXIubGVuZ3RoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGVzdC5kZWY7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gb3B0cy5wbGFjZWhvbGRlci5jaGFyQXQocG9zICUgb3B0cy5wbGFjZWhvbGRlci5sZW5ndGgpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGZ1bmN0aW9uIEhhbmRsZU5hdGl2ZVBsYWNlaG9sZGVyKG5wdCwgdmFsdWUpIHtcclxuICAgICAgICAgICAgICAgIGlmIChpZSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChucHQuaW5wdXRtYXNrLl92YWx1ZUdldCgpICE9PSB2YWx1ZSAmJiAobnB0LnBsYWNlaG9sZGVyICE9PSB2YWx1ZSB8fCBucHQucGxhY2Vob2xkZXIgPT09IFwiXCIpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBidWZmZXIgPSBnZXRCdWZmZXIoKS5zbGljZSgpLCBucHRWYWx1ZSA9IG5wdC5pbnB1dG1hc2suX3ZhbHVlR2V0KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChucHRWYWx1ZSAhPT0gdmFsdWUpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBsdnAgPSBnZXRMYXN0VmFsaWRQb3NpdGlvbigpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGx2cCA9PT0gLTEgJiYgbnB0VmFsdWUgPT09IGdldEJ1ZmZlclRlbXBsYXRlKCkuam9pbihcIlwiKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJ1ZmZlciA9IFtdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChsdnAgIT09IC0xKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xlYXJPcHRpb25hbFRhaWwoYnVmZmVyKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHdyaXRlQnVmZmVyKG5wdCwgYnVmZmVyKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAobnB0LnBsYWNlaG9sZGVyICE9PSB2YWx1ZSkge1xyXG4gICAgICAgICAgICAgICAgICAgIG5wdC5wbGFjZWhvbGRlciA9IHZhbHVlO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChucHQucGxhY2Vob2xkZXIgPT09IFwiXCIpIG5wdC5yZW1vdmVBdHRyaWJ1dGUoXCJwbGFjZWhvbGRlclwiKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB2YXIgRXZlbnRSdWxlciA9IHtcclxuICAgICAgICAgICAgICAgIG9uOiBmdW5jdGlvbiBvbihpbnB1dCwgZXZlbnROYW1lLCBldmVudEhhbmRsZXIpIHtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgZXYgPSBmdW5jdGlvbiBldihlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciB0aGF0ID0gdGhpcztcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRoYXQuaW5wdXRtYXNrID09PSB1bmRlZmluZWQgJiYgdGhpcy5ub2RlTmFtZSAhPT0gXCJGT1JNXCIpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBpbU9wdHMgPSAkLmRhdGEodGhhdCwgXCJfaW5wdXRtYXNrX29wdHNcIik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoaW1PcHRzKSBuZXcgSW5wdXRtYXNrKGltT3B0cykubWFzayh0aGF0KTsgZWxzZSBFdmVudFJ1bGVyLm9mZih0aGF0KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChlLnR5cGUgIT09IFwic2V0dmFsdWVcIiAmJiB0aGlzLm5vZGVOYW1lICE9PSBcIkZPUk1cIiAmJiAodGhhdC5kaXNhYmxlZCB8fCB0aGF0LnJlYWRPbmx5ICYmICEoZS50eXBlID09PSBcImtleWRvd25cIiAmJiBlLmN0cmxLZXkgJiYgZS5rZXlDb2RlID09PSA2NyB8fCBvcHRzLnRhYlRocm91Z2ggPT09IGZhbHNlICYmIGUua2V5Q29kZSA9PT0gSW5wdXRtYXNrLmtleUNvZGUuVEFCKSkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN3aXRjaCAoZS50eXBlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgXCJpbnB1dFwiOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChza2lwSW5wdXRFdmVudCA9PT0gdHJ1ZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBza2lwSW5wdXRFdmVudCA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZS5wcmV2ZW50RGVmYXVsdCgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAobW9iaWxlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBhcmdzID0gYXJndW1lbnRzO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZXZlbnRIYW5kbGVyLmFwcGx5KHRoYXQsIGFyZ3MpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FyZXQodGhhdCwgdGhhdC5pbnB1dG1hc2suY2FyZXRQb3MsIHVuZGVmaW5lZCwgdHJ1ZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sIDApO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSBcImtleWRvd25cIjpcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBza2lwS2V5UHJlc3NFdmVudCA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNraXBJbnB1dEV2ZW50ID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlIFwia2V5cHJlc3NcIjpcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoc2tpcEtleVByZXNzRXZlbnQgPT09IHRydWUpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGUucHJldmVudERlZmF1bHQoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2tpcEtleVByZXNzRXZlbnQgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSBcImNsaWNrXCI6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGllbW9iaWxlIHx8IGlwaG9uZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgYXJncyA9IGFyZ3VtZW50cztcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2V0VGltZW91dChmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGV2ZW50SGFuZGxlci5hcHBseSh0aGF0LCBhcmdzKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSwgMCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgcmV0dXJuVmFsID0gZXZlbnRIYW5kbGVyLmFwcGx5KHRoYXQsIGFyZ3VtZW50cyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAocmV0dXJuVmFsID09PSBmYWxzZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlLnN0b3BQcm9wYWdhdGlvbigpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHJldHVyblZhbDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgICAgICAgICAgaW5wdXQuaW5wdXRtYXNrLmV2ZW50c1tldmVudE5hbWVdID0gaW5wdXQuaW5wdXRtYXNrLmV2ZW50c1tldmVudE5hbWVdIHx8IFtdO1xyXG4gICAgICAgICAgICAgICAgICAgIGlucHV0LmlucHV0bWFzay5ldmVudHNbZXZlbnROYW1lXS5wdXNoKGV2KTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoJC5pbkFycmF5KGV2ZW50TmFtZSwgWyBcInN1Ym1pdFwiLCBcInJlc2V0XCIgXSkgIT09IC0xKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChpbnB1dC5mb3JtICE9PSBudWxsKSAkKGlucHV0LmZvcm0pLm9uKGV2ZW50TmFtZSwgZXYpO1xyXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICQoaW5wdXQpLm9uKGV2ZW50TmFtZSwgZXYpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICBvZmY6IGZ1bmN0aW9uIG9mZihpbnB1dCwgZXZlbnQpIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoaW5wdXQuaW5wdXRtYXNrICYmIGlucHV0LmlucHV0bWFzay5ldmVudHMpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGV2ZW50cztcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGV2ZW50KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBldmVudHMgPSBbXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGV2ZW50c1tldmVudF0gPSBpbnB1dC5pbnB1dG1hc2suZXZlbnRzW2V2ZW50XTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGV2ZW50cyA9IGlucHV0LmlucHV0bWFzay5ldmVudHM7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgJC5lYWNoKGV2ZW50cywgZnVuY3Rpb24oZXZlbnROYW1lLCBldkFycikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgd2hpbGUgKGV2QXJyLmxlbmd0aCA+IDApIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgZXYgPSBldkFyci5wb3AoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoJC5pbkFycmF5KGV2ZW50TmFtZSwgWyBcInN1Ym1pdFwiLCBcInJlc2V0XCIgXSkgIT09IC0xKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChpbnB1dC5mb3JtICE9PSBudWxsKSAkKGlucHV0LmZvcm0pLm9mZihldmVudE5hbWUsIGV2KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkKGlucHV0KS5vZmYoZXZlbnROYW1lLCBldik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZGVsZXRlIGlucHV0LmlucHV0bWFzay5ldmVudHNbZXZlbnROYW1lXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICB2YXIgRXZlbnRIYW5kbGVycyA9IHtcclxuICAgICAgICAgICAgICAgIGtleWRvd25FdmVudDogZnVuY3Rpb24ga2V5ZG93bkV2ZW50KGUpIHtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgaW5wdXQgPSB0aGlzLCAkaW5wdXQgPSAkKGlucHV0KSwgayA9IGUua2V5Q29kZSwgcG9zID0gY2FyZXQoaW5wdXQpO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChrID09PSBJbnB1dG1hc2sua2V5Q29kZS5CQUNLU1BBQ0UgfHwgayA9PT0gSW5wdXRtYXNrLmtleUNvZGUuREVMRVRFIHx8IGlwaG9uZSAmJiBrID09PSBJbnB1dG1hc2sua2V5Q29kZS5CQUNLU1BBQ0VfU0FGQVJJIHx8IGUuY3RybEtleSAmJiBrID09PSBJbnB1dG1hc2sua2V5Q29kZS5YICYmICFpc0lucHV0RXZlbnRTdXBwb3J0ZWQoXCJjdXRcIikpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBoYW5kbGVSZW1vdmUoaW5wdXQsIGssIHBvcyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHdyaXRlQnVmZmVyKGlucHV0LCBnZXRCdWZmZXIodHJ1ZSksIGdldE1hc2tTZXQoKS5wLCBlLCBpbnB1dC5pbnB1dG1hc2suX3ZhbHVlR2V0KCkgIT09IGdldEJ1ZmZlcigpLmpvaW4oXCJcIikpO1xyXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoayA9PT0gSW5wdXRtYXNrLmtleUNvZGUuRU5EIHx8IGsgPT09IElucHV0bWFzay5rZXlDb2RlLlBBR0VfRE9XTikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBjYXJldFBvcyA9IHNlZWtOZXh0KGdldExhc3RWYWxpZFBvc2l0aW9uKCkpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjYXJldChpbnB1dCwgZS5zaGlmdEtleSA/IHBvcy5iZWdpbiA6IGNhcmV0UG9zLCBjYXJldFBvcywgdHJ1ZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChrID09PSBJbnB1dG1hc2sua2V5Q29kZS5IT01FICYmICFlLnNoaWZ0S2V5IHx8IGsgPT09IElucHV0bWFzay5rZXlDb2RlLlBBR0VfVVApIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjYXJldChpbnB1dCwgMCwgZS5zaGlmdEtleSA/IHBvcy5iZWdpbiA6IDAsIHRydWUpO1xyXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoKG9wdHMudW5kb09uRXNjYXBlICYmIGsgPT09IElucHV0bWFzay5rZXlDb2RlLkVTQ0FQRSB8fCBrID09PSA5MCAmJiBlLmN0cmxLZXkpICYmIGUuYWx0S2V5ICE9PSB0cnVlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNoZWNrVmFsKGlucHV0LCB0cnVlLCBmYWxzZSwgdW5kb1ZhbHVlLnNwbGl0KFwiXCIpKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgJGlucHV0LnRyaWdnZXIoXCJjbGlja1wiKTtcclxuICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGsgPT09IElucHV0bWFzay5rZXlDb2RlLklOU0VSVCAmJiAhKGUuc2hpZnRLZXkgfHwgZS5jdHJsS2V5KSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBvcHRzLmluc2VydE1vZGUgPSAhb3B0cy5pbnNlcnRNb2RlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpbnB1dC5zZXRBdHRyaWJ1dGUoXCJpbS1pbnNlcnRcIiwgb3B0cy5pbnNlcnRNb2RlKTtcclxuICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKG9wdHMudGFiVGhyb3VnaCA9PT0gdHJ1ZSAmJiBrID09PSBJbnB1dG1hc2sua2V5Q29kZS5UQUIpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGUuc2hpZnRLZXkgPT09IHRydWUpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChnZXRUZXN0KHBvcy5iZWdpbikubWF0Y2guZm4gPT09IG51bGwpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwb3MuYmVnaW4gPSBzZWVrTmV4dChwb3MuYmVnaW4pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcG9zLmVuZCA9IHNlZWtQcmV2aW91cyhwb3MuYmVnaW4sIHRydWUpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcG9zLmJlZ2luID0gc2Vla1ByZXZpb3VzKHBvcy5lbmQsIHRydWUpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcG9zLmJlZ2luID0gc2Vla05leHQocG9zLmJlZ2luLCB0cnVlKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBvcy5lbmQgPSBzZWVrTmV4dChwb3MuYmVnaW4sIHRydWUpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHBvcy5lbmQgPCBnZXRNYXNrU2V0KCkubWFza0xlbmd0aCkgcG9zLmVuZC0tO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChwb3MuYmVnaW4gPCBnZXRNYXNrU2V0KCkubWFza0xlbmd0aCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FyZXQoaW5wdXQsIHBvcy5iZWdpbiwgcG9zLmVuZCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgb3B0cy5vbktleURvd24uY2FsbCh0aGlzLCBlLCBnZXRCdWZmZXIoKSwgY2FyZXQoaW5wdXQpLmJlZ2luLCBvcHRzKTtcclxuICAgICAgICAgICAgICAgICAgICBpZ25vcmFibGUgPSAkLmluQXJyYXkoaywgb3B0cy5pZ25vcmFibGVzKSAhPT0gLTE7XHJcbiAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAga2V5cHJlc3NFdmVudDogZnVuY3Rpb24ga2V5cHJlc3NFdmVudChlLCBjaGVja3ZhbCwgd3JpdGVPdXQsIHN0cmljdCwgbmR4KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIGlucHV0ID0gdGhpcywgJGlucHV0ID0gJChpbnB1dCksIGsgPSBlLndoaWNoIHx8IGUuY2hhckNvZGUgfHwgZS5rZXlDb2RlO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChjaGVja3ZhbCAhPT0gdHJ1ZSAmJiAhKGUuY3RybEtleSAmJiBlLmFsdEtleSkgJiYgKGUuY3RybEtleSB8fCBlLm1ldGFLZXkgfHwgaWdub3JhYmxlKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoayA9PT0gSW5wdXRtYXNrLmtleUNvZGUuRU5URVIgJiYgdW5kb1ZhbHVlICE9PSBnZXRCdWZmZXIoKS5qb2luKFwiXCIpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB1bmRvVmFsdWUgPSBnZXRCdWZmZXIoKS5qb2luKFwiXCIpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc2V0VGltZW91dChmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkaW5wdXQudHJpZ2dlcihcImNoYW5nZVwiKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sIDApO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoayA9PT0gNDYgJiYgZS5zaGlmdEtleSA9PT0gZmFsc2UgJiYgb3B0cy5yYWRpeFBvaW50ICE9PSBcIlwiKSBrID0gb3B0cy5yYWRpeFBvaW50LmNoYXJDb2RlQXQoMCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgcG9zID0gY2hlY2t2YWwgPyB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYmVnaW46IG5keCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbmQ6IG5keFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSA6IGNhcmV0KGlucHV0KSwgZm9yd2FyZFBvc2l0aW9uLCBjID0gU3RyaW5nLmZyb21DaGFyQ29kZShrKSwgb2Zmc2V0ID0gMDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChvcHRzLl9yYWRpeERhbmNlICYmIG9wdHMubnVtZXJpY0lucHV0KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGNhcmV0UG9zID0gZ2V0QnVmZmVyKCkuaW5kZXhPZihvcHRzLnJhZGl4UG9pbnQuY2hhckF0KDApKSArIDE7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHBvcy5iZWdpbiA8PSBjYXJldFBvcykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoayA9PT0gb3B0cy5yYWRpeFBvaW50LmNoYXJDb2RlQXQoMCkpIG9mZnNldCA9IDE7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBvcy5iZWdpbiAtPSAxO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwb3MuZW5kIC09IDE7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZ2V0TWFza1NldCgpLndyaXRlT3V0QnVmZmVyID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciB2YWxSZXN1bHQgPSBpc1ZhbGlkKHBvcywgYywgc3RyaWN0KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh2YWxSZXN1bHQgIT09IGZhbHNlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVzZXRNYXNrU2V0KHRydWUpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvcndhcmRQb3NpdGlvbiA9IHZhbFJlc3VsdC5jYXJldCAhPT0gdW5kZWZpbmVkID8gdmFsUmVzdWx0LmNhcmV0IDogc2Vla05leHQodmFsUmVzdWx0LnBvcy5iZWdpbiA/IHZhbFJlc3VsdC5wb3MuYmVnaW4gOiB2YWxSZXN1bHQucG9zKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBnZXRNYXNrU2V0KCkucCA9IGZvcndhcmRQb3NpdGlvbjtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvcndhcmRQb3NpdGlvbiA9IChvcHRzLm51bWVyaWNJbnB1dCAmJiB2YWxSZXN1bHQuY2FyZXQgPT09IHVuZGVmaW5lZCA/IHNlZWtQcmV2aW91cyhmb3J3YXJkUG9zaXRpb24pIDogZm9yd2FyZFBvc2l0aW9uKSArIG9mZnNldDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh3cml0ZU91dCAhPT0gZmFsc2UpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvcHRzLm9uS2V5VmFsaWRhdGlvbi5jYWxsKGlucHV0LCBrLCB2YWxSZXN1bHQsIG9wdHMpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sIDApO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChnZXRNYXNrU2V0KCkud3JpdGVPdXRCdWZmZXIgJiYgdmFsUmVzdWx0ICE9PSBmYWxzZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgYnVmZmVyID0gZ2V0QnVmZmVyKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHdyaXRlQnVmZmVyKGlucHV0LCBidWZmZXIsIGZvcndhcmRQb3NpdGlvbiwgZSwgY2hlY2t2YWwgIT09IHRydWUpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChjaGVja3ZhbCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh2YWxSZXN1bHQgIT09IGZhbHNlKSB2YWxSZXN1bHQuZm9yd2FyZFBvc2l0aW9uID0gZm9yd2FyZFBvc2l0aW9uO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB2YWxSZXN1bHQ7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgcGFzdGVFdmVudDogZnVuY3Rpb24gcGFzdGVFdmVudChlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIGlucHV0ID0gdGhpcywgZXYgPSBlLm9yaWdpbmFsRXZlbnQgfHwgZSwgJGlucHV0ID0gJChpbnB1dCksIGlucHV0VmFsdWUgPSBpbnB1dC5pbnB1dG1hc2suX3ZhbHVlR2V0KHRydWUpLCBjYXJldFBvcyA9IGNhcmV0KGlucHV0KSwgdGVtcFZhbHVlO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChpc1JUTCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0ZW1wVmFsdWUgPSBjYXJldFBvcy5lbmQ7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhcmV0UG9zLmVuZCA9IGNhcmV0UG9zLmJlZ2luO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjYXJldFBvcy5iZWdpbiA9IHRlbXBWYWx1ZTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIHZhbHVlQmVmb3JlQ2FyZXQgPSBpbnB1dFZhbHVlLnN1YnN0cigwLCBjYXJldFBvcy5iZWdpbiksIHZhbHVlQWZ0ZXJDYXJldCA9IGlucHV0VmFsdWUuc3Vic3RyKGNhcmV0UG9zLmVuZCwgaW5wdXRWYWx1ZS5sZW5ndGgpO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICh2YWx1ZUJlZm9yZUNhcmV0ID09PSAoaXNSVEwgPyBnZXRCdWZmZXJUZW1wbGF0ZSgpLnJldmVyc2UoKSA6IGdldEJ1ZmZlclRlbXBsYXRlKCkpLnNsaWNlKDAsIGNhcmV0UG9zLmJlZ2luKS5qb2luKFwiXCIpKSB2YWx1ZUJlZm9yZUNhcmV0ID0gXCJcIjtcclxuICAgICAgICAgICAgICAgICAgICBpZiAodmFsdWVBZnRlckNhcmV0ID09PSAoaXNSVEwgPyBnZXRCdWZmZXJUZW1wbGF0ZSgpLnJldmVyc2UoKSA6IGdldEJ1ZmZlclRlbXBsYXRlKCkpLnNsaWNlKGNhcmV0UG9zLmVuZCkuam9pbihcIlwiKSkgdmFsdWVBZnRlckNhcmV0ID0gXCJcIjtcclxuICAgICAgICAgICAgICAgICAgICBpZiAod2luZG93LmNsaXBib2FyZERhdGEgJiYgd2luZG93LmNsaXBib2FyZERhdGEuZ2V0RGF0YSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpbnB1dFZhbHVlID0gdmFsdWVCZWZvcmVDYXJldCArIHdpbmRvdy5jbGlwYm9hcmREYXRhLmdldERhdGEoXCJUZXh0XCIpICsgdmFsdWVBZnRlckNhcmV0O1xyXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoZXYuY2xpcGJvYXJkRGF0YSAmJiBldi5jbGlwYm9hcmREYXRhLmdldERhdGEpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaW5wdXRWYWx1ZSA9IHZhbHVlQmVmb3JlQ2FyZXQgKyBldi5jbGlwYm9hcmREYXRhLmdldERhdGEoXCJ0ZXh0L3BsYWluXCIpICsgdmFsdWVBZnRlckNhcmV0O1xyXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSByZXR1cm4gdHJ1ZTtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgcGFzdGVWYWx1ZSA9IGlucHV0VmFsdWU7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKCQuaXNGdW5jdGlvbihvcHRzLm9uQmVmb3JlUGFzdGUpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHBhc3RlVmFsdWUgPSBvcHRzLm9uQmVmb3JlUGFzdGUuY2FsbChpbnB1dG1hc2ssIGlucHV0VmFsdWUsIG9wdHMpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAocGFzdGVWYWx1ZSA9PT0gZmFsc2UpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBlLnByZXZlbnREZWZhdWx0KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFwYXN0ZVZhbHVlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwYXN0ZVZhbHVlID0gaW5wdXRWYWx1ZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBjaGVja1ZhbChpbnB1dCwgZmFsc2UsIGZhbHNlLCBwYXN0ZVZhbHVlLnRvU3RyaW5nKCkuc3BsaXQoXCJcIikpO1xyXG4gICAgICAgICAgICAgICAgICAgIHdyaXRlQnVmZmVyKGlucHV0LCBnZXRCdWZmZXIoKSwgc2Vla05leHQoZ2V0TGFzdFZhbGlkUG9zaXRpb24oKSksIGUsIHVuZG9WYWx1ZSAhPT0gZ2V0QnVmZmVyKCkuam9pbihcIlwiKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGUucHJldmVudERlZmF1bHQoKTtcclxuICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICBpbnB1dEZhbGxCYWNrRXZlbnQ6IGZ1bmN0aW9uIGlucHV0RmFsbEJhY2tFdmVudChlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgZnVuY3Rpb24gcmFkaXhQb2ludEhhbmRsZXIoaW5wdXQsIGlucHV0VmFsdWUsIGNhcmV0UG9zKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChpbnB1dFZhbHVlLmNoYXJBdChjYXJldFBvcy5iZWdpbiAtIDEpID09PSBcIi5cIiAmJiBvcHRzLnJhZGl4UG9pbnQgIT09IFwiXCIpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlucHV0VmFsdWUgPSBpbnB1dFZhbHVlLnNwbGl0KFwiXCIpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaW5wdXRWYWx1ZVtjYXJldFBvcy5iZWdpbiAtIDFdID0gb3B0cy5yYWRpeFBvaW50LmNoYXJBdCgwKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlucHV0VmFsdWUgPSBpbnB1dFZhbHVlLmpvaW4oXCJcIik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGlucHV0VmFsdWU7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGZ1bmN0aW9uIGllTW9iaWxlSGFuZGxlcihpbnB1dCwgaW5wdXRWYWx1ZSwgY2FyZXRQb3MpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGllbW9iaWxlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgaW5wdXRDaGFyID0gaW5wdXRWYWx1ZS5yZXBsYWNlKGdldEJ1ZmZlcigpLmpvaW4oXCJcIiksIFwiXCIpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGlucHV0Q2hhci5sZW5ndGggPT09IDEpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgaXYgPSBpbnB1dFZhbHVlLnNwbGl0KFwiXCIpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGl2LnNwbGljZShjYXJldFBvcy5iZWdpbiwgMCwgaW5wdXRDaGFyKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbnB1dFZhbHVlID0gaXYuam9pbihcIlwiKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gaW5wdXRWYWx1ZTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIGlucHV0ID0gdGhpcywgaW5wdXRWYWx1ZSA9IGlucHV0LmlucHV0bWFzay5fdmFsdWVHZXQoKTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoZ2V0QnVmZmVyKCkuam9pbihcIlwiKSAhPT0gaW5wdXRWYWx1ZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgY2FyZXRQb3MgPSBjYXJldChpbnB1dCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlucHV0VmFsdWUgPSByYWRpeFBvaW50SGFuZGxlcihpbnB1dCwgaW5wdXRWYWx1ZSwgY2FyZXRQb3MpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpbnB1dFZhbHVlID0gaWVNb2JpbGVIYW5kbGVyKGlucHV0LCBpbnB1dFZhbHVlLCBjYXJldFBvcyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChnZXRCdWZmZXIoKS5qb2luKFwiXCIpICE9PSBpbnB1dFZhbHVlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgYnVmZmVyID0gZ2V0QnVmZmVyKCkuam9pbihcIlwiKSwgb2Zmc2V0ID0gIW9wdHMubnVtZXJpY0lucHV0ICYmIGlucHV0VmFsdWUubGVuZ3RoID4gYnVmZmVyLmxlbmd0aCA/IC0xIDogMCwgZnJvbnRQYXJ0ID0gaW5wdXRWYWx1ZS5zdWJzdHIoMCwgY2FyZXRQb3MuYmVnaW4pLCBiYWNrUGFydCA9IGlucHV0VmFsdWUuc3Vic3RyKGNhcmV0UG9zLmJlZ2luKSwgZnJvbnRCdWZmZXJQYXJ0ID0gYnVmZmVyLnN1YnN0cigwLCBjYXJldFBvcy5iZWdpbiArIG9mZnNldCksIGJhY2tCdWZmZXJQYXJ0ID0gYnVmZmVyLnN1YnN0cihjYXJldFBvcy5iZWdpbiArIG9mZnNldCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgc2VsZWN0aW9uID0gY2FyZXRQb3MsIGVudHJpZXMgPSBcIlwiLCBpc0VudHJ5ID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoZnJvbnRQYXJ0ICE9PSBmcm9udEJ1ZmZlclBhcnQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgZnBsID0gKGlzRW50cnkgPSBmcm9udFBhcnQubGVuZ3RoID49IGZyb250QnVmZmVyUGFydC5sZW5ndGgpID8gZnJvbnRQYXJ0Lmxlbmd0aCA6IGZyb250QnVmZmVyUGFydC5sZW5ndGgsIGk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yIChpID0gMDsgZnJvbnRQYXJ0LmNoYXJBdChpKSA9PT0gZnJvbnRCdWZmZXJQYXJ0LmNoYXJBdChpKSAmJiBpIDwgZnBsOyBpKyspIHt9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGlzRW50cnkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2VsZWN0aW9uLmJlZ2luID0gaSAtIG9mZnNldDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZW50cmllcyArPSBmcm9udFBhcnQuc2xpY2UoaSwgc2VsZWN0aW9uLmVuZCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGJhY2tQYXJ0ICE9PSBiYWNrQnVmZmVyUGFydCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChiYWNrUGFydC5sZW5ndGggPiBiYWNrQnVmZmVyUGFydC5sZW5ndGgpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZW50cmllcyArPSBiYWNrUGFydC5zbGljZSgwLCAxKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoYmFja1BhcnQubGVuZ3RoIDwgYmFja0J1ZmZlclBhcnQubGVuZ3RoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZWxlY3Rpb24uZW5kICs9IGJhY2tCdWZmZXJQYXJ0Lmxlbmd0aCAtIGJhY2tQYXJ0Lmxlbmd0aDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICghaXNFbnRyeSAmJiBvcHRzLnJhZGl4UG9pbnQgIT09IFwiXCIgJiYgYmFja1BhcnQgPT09IFwiXCIgJiYgZnJvbnRQYXJ0LmNoYXJBdChzZWxlY3Rpb24uYmVnaW4gKyBvZmZzZXQgLSAxKSA9PT0gb3B0cy5yYWRpeFBvaW50KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2VsZWN0aW9uLmJlZ2luLS07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZW50cmllcyA9IG9wdHMucmFkaXhQb2ludDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHdyaXRlQnVmZmVyKGlucHV0LCBnZXRCdWZmZXIoKSwge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJlZ2luOiBzZWxlY3Rpb24uYmVnaW4gKyBvZmZzZXQsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZW5kOiBzZWxlY3Rpb24uZW5kICsgb2Zmc2V0XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChlbnRyaWVzLmxlbmd0aCA+IDApIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkLmVhY2goZW50cmllcy5zcGxpdChcIlwiKSwgZnVuY3Rpb24obmR4LCBlbnRyeSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIga2V5cHJlc3MgPSBuZXcgJC5FdmVudChcImtleXByZXNzXCIpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBrZXlwcmVzcy53aGljaCA9IGVudHJ5LmNoYXJDb2RlQXQoMCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlnbm9yYWJsZSA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBFdmVudEhhbmRsZXJzLmtleXByZXNzRXZlbnQuY2FsbChpbnB1dCwga2V5cHJlc3MpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoc2VsZWN0aW9uLmJlZ2luID09PSBzZWxlY3Rpb24uZW5kIC0gMSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZWxlY3Rpb24uYmVnaW4gPSBzZWVrUHJldmlvdXMoc2VsZWN0aW9uLmJlZ2luICsgMSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChzZWxlY3Rpb24uYmVnaW4gPT09IHNlbGVjdGlvbi5lbmQgLSAxKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXJldChpbnB1dCwgc2VsZWN0aW9uLmJlZ2luKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhcmV0KGlucHV0LCBzZWxlY3Rpb24uYmVnaW4sIHNlbGVjdGlvbi5lbmQpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBrZXlkb3duID0gbmV3ICQuRXZlbnQoXCJrZXlkb3duXCIpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGtleWRvd24ua2V5Q29kZSA9IG9wdHMubnVtZXJpY0lucHV0ID8gSW5wdXRtYXNrLmtleUNvZGUuQkFDS1NQQUNFIDogSW5wdXRtYXNrLmtleUNvZGUuREVMRVRFO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEV2ZW50SGFuZGxlcnMua2V5ZG93bkV2ZW50LmNhbGwoaW5wdXQsIGtleWRvd24pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgIGJlZm9yZUlucHV0RXZlbnQ6IGZ1bmN0aW9uIGJlZm9yZUlucHV0RXZlbnQoZSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChlLmNhbmNlbGFibGUpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGlucHV0ID0gdGhpcztcclxuICAgICAgICAgICAgICAgICAgICAgICAgc3dpdGNoIChlLmlucHV0VHlwZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgXCJpbnNlcnRUZXh0XCI6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkLmVhY2goZS5kYXRhLnNwbGl0KFwiXCIpLCBmdW5jdGlvbihuZHgsIGVudHJ5KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGtleXByZXNzID0gbmV3ICQuRXZlbnQoXCJrZXlwcmVzc1wiKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBrZXlwcmVzcy53aGljaCA9IGVudHJ5LmNoYXJDb2RlQXQoMCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWdub3JhYmxlID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgRXZlbnRIYW5kbGVycy5rZXlwcmVzc0V2ZW50LmNhbGwoaW5wdXQsIGtleXByZXNzKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGUucHJldmVudERlZmF1bHQoKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSBcImRlbGV0ZUNvbnRlbnRCYWNrd2FyZFwiOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGtleWRvd24gPSBuZXcgJC5FdmVudChcImtleWRvd25cIik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBrZXlkb3duLmtleUNvZGUgPSBJbnB1dG1hc2sua2V5Q29kZS5CQUNLU1BBQ0U7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBFdmVudEhhbmRsZXJzLmtleWRvd25FdmVudC5jYWxsKGlucHV0LCBrZXlkb3duKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBlLnByZXZlbnREZWZhdWx0KCk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgXCJkZWxldGVDb250ZW50Rm9yd2FyZFwiOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGtleWRvd24gPSBuZXcgJC5FdmVudChcImtleWRvd25cIik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBrZXlkb3duLmtleUNvZGUgPSBJbnB1dG1hc2sua2V5Q29kZS5ERUxFVEU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBFdmVudEhhbmRsZXJzLmtleWRvd25FdmVudC5jYWxsKGlucHV0LCBrZXlkb3duKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBlLnByZXZlbnREZWZhdWx0KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgc2V0VmFsdWVFdmVudDogZnVuY3Rpb24gc2V0VmFsdWVFdmVudChlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5pbnB1dG1hc2sucmVmcmVzaFZhbHVlID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIGlucHV0ID0gdGhpcywgdmFsdWUgPSBlICYmIGUuZGV0YWlsID8gZS5kZXRhaWxbMF0gOiBhcmd1bWVudHNbMV0sIHZhbHVlID0gdmFsdWUgfHwgaW5wdXQuaW5wdXRtYXNrLl92YWx1ZUdldCh0cnVlKTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoJC5pc0Z1bmN0aW9uKG9wdHMub25CZWZvcmVNYXNrKSkgdmFsdWUgPSBvcHRzLm9uQmVmb3JlTWFzay5jYWxsKGlucHV0bWFzaywgdmFsdWUsIG9wdHMpIHx8IHZhbHVlO1xyXG4gICAgICAgICAgICAgICAgICAgIHZhbHVlID0gdmFsdWUuc3BsaXQoXCJcIik7XHJcbiAgICAgICAgICAgICAgICAgICAgY2hlY2tWYWwoaW5wdXQsIHRydWUsIGZhbHNlLCB2YWx1ZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgdW5kb1ZhbHVlID0gZ2V0QnVmZmVyKCkuam9pbihcIlwiKTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoKG9wdHMuY2xlYXJNYXNrT25Mb3N0Rm9jdXMgfHwgb3B0cy5jbGVhckluY29tcGxldGUpICYmIGlucHV0LmlucHV0bWFzay5fdmFsdWVHZXQoKSA9PT0gZ2V0QnVmZmVyVGVtcGxhdGUoKS5qb2luKFwiXCIpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlucHV0LmlucHV0bWFzay5fdmFsdWVTZXQoXCJcIik7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgIGZvY3VzRXZlbnQ6IGZ1bmN0aW9uIGZvY3VzRXZlbnQoZSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBpbnB1dCA9IHRoaXMsIG5wdFZhbHVlID0gaW5wdXQuaW5wdXRtYXNrLl92YWx1ZUdldCgpO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChvcHRzLnNob3dNYXNrT25Gb2N1cykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAobnB0VmFsdWUgIT09IGdldEJ1ZmZlcigpLmpvaW4oXCJcIikpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHdyaXRlQnVmZmVyKGlucHV0LCBnZXRCdWZmZXIoKSwgc2Vla05leHQoZ2V0TGFzdFZhbGlkUG9zaXRpb24oKSkpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKG1vdXNlRW50ZXIgPT09IGZhbHNlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXJldChpbnB1dCwgc2Vla05leHQoZ2V0TGFzdFZhbGlkUG9zaXRpb24oKSkpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGlmIChvcHRzLnBvc2l0aW9uQ2FyZXRPblRhYiA9PT0gdHJ1ZSAmJiBtb3VzZUVudGVyID09PSBmYWxzZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBFdmVudEhhbmRsZXJzLmNsaWNrRXZlbnQuYXBwbHkoaW5wdXQsIFsgZSwgdHJ1ZSBdKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgdW5kb1ZhbHVlID0gZ2V0QnVmZmVyKCkuam9pbihcIlwiKTtcclxuICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICBtb3VzZWxlYXZlRXZlbnQ6IGZ1bmN0aW9uIG1vdXNlbGVhdmVFdmVudChlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIGlucHV0ID0gdGhpcztcclxuICAgICAgICAgICAgICAgICAgICBtb3VzZUVudGVyID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKG9wdHMuY2xlYXJNYXNrT25Mb3N0Rm9jdXMgJiYgZG9jdW1lbnQuYWN0aXZlRWxlbWVudCAhPT0gaW5wdXQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgSGFuZGxlTmF0aXZlUGxhY2Vob2xkZXIoaW5wdXQsIG9yaWdpbmFsUGxhY2Vob2xkZXIpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICBjbGlja0V2ZW50OiBmdW5jdGlvbiBjbGlja0V2ZW50KGUsIHRhYmJlZCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGZ1bmN0aW9uIGRvUmFkaXhGb2N1cyhjbGlja1Bvcykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAob3B0cy5yYWRpeFBvaW50ICE9PSBcIlwiKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgdnBzID0gZ2V0TWFza1NldCgpLnZhbGlkUG9zaXRpb25zO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHZwc1tjbGlja1Bvc10gPT09IHVuZGVmaW5lZCB8fCB2cHNbY2xpY2tQb3NdLmlucHV0ID09PSBnZXRQbGFjZWhvbGRlcihjbGlja1BvcykpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoY2xpY2tQb3MgPCBzZWVrTmV4dCgtMSkpIHJldHVybiB0cnVlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciByYWRpeFBvcyA9ICQuaW5BcnJheShvcHRzLnJhZGl4UG9pbnQsIGdldEJ1ZmZlcigpKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAocmFkaXhQb3MgIT09IC0xKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvciAodmFyIHZwIGluIHZwcykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHJhZGl4UG9zIDwgdnAgJiYgdnBzW3ZwXS5pbnB1dCAhPT0gZ2V0UGxhY2Vob2xkZXIodnApKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIHZhciBpbnB1dCA9IHRoaXM7XHJcbiAgICAgICAgICAgICAgICAgICAgc2V0VGltZW91dChmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGRvY3VtZW50LmFjdGl2ZUVsZW1lbnQgPT09IGlucHV0KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgc2VsZWN0ZWRDYXJldCA9IGNhcmV0KGlucHV0KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0YWJiZWQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoaXNSVEwpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2VsZWN0ZWRDYXJldC5lbmQgPSBzZWxlY3RlZENhcmV0LmJlZ2luO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNlbGVjdGVkQ2FyZXQuYmVnaW4gPSBzZWxlY3RlZENhcmV0LmVuZDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoc2VsZWN0ZWRDYXJldC5iZWdpbiA9PT0gc2VsZWN0ZWRDYXJldC5lbmQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzd2l0Y2ggKG9wdHMucG9zaXRpb25DYXJldE9uQ2xpY2spIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgXCJub25lXCI6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgXCJzZWxlY3RcIjpcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FyZXQoaW5wdXQsIDAsIGdldEJ1ZmZlcigpLmxlbmd0aCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgXCJpZ25vcmVcIjpcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FyZXQoaW5wdXQsIHNlZWtOZXh0KGdldExhc3RWYWxpZFBvc2l0aW9uKCkpKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSBcInJhZGl4Rm9jdXNcIjpcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGRvUmFkaXhGb2N1cyhzZWxlY3RlZENhcmV0LmJlZ2luKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHJhZGl4UG9zID0gZ2V0QnVmZmVyKCkuam9pbihcIlwiKS5pbmRleE9mKG9wdHMucmFkaXhQb2ludCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXJldChpbnB1dCwgb3B0cy5udW1lcmljSW5wdXQgPyBzZWVrTmV4dChyYWRpeFBvcykgOiByYWRpeFBvcyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRlZmF1bHQ6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBjbGlja1Bvc2l0aW9uID0gc2VsZWN0ZWRDYXJldC5iZWdpbiwgbHZjbGlja1Bvc2l0aW9uID0gZ2V0TGFzdFZhbGlkUG9zaXRpb24oY2xpY2tQb3NpdGlvbiwgdHJ1ZSksIGxhc3RQb3NpdGlvbiA9IHNlZWtOZXh0KGx2Y2xpY2tQb3NpdGlvbik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChjbGlja1Bvc2l0aW9uIDwgbGFzdFBvc2l0aW9uKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXJldChpbnB1dCwgIWlzTWFzayhjbGlja1Bvc2l0aW9uLCB0cnVlKSAmJiAhaXNNYXNrKGNsaWNrUG9zaXRpb24gLSAxLCB0cnVlKSA/IHNlZWtOZXh0KGNsaWNrUG9zaXRpb24pIDogY2xpY2tQb3NpdGlvbik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgbHZwID0gZ2V0TWFza1NldCgpLnZhbGlkUG9zaXRpb25zW2x2Y2xpY2tQb3NpdGlvbl0sIHR0ID0gZ2V0VGVzdFRlbXBsYXRlKGxhc3RQb3NpdGlvbiwgbHZwID8gbHZwLm1hdGNoLmxvY2F0b3IgOiB1bmRlZmluZWQsIGx2cCksIHBsYWNlaG9sZGVyID0gZ2V0UGxhY2Vob2xkZXIobGFzdFBvc2l0aW9uLCB0dC5tYXRjaCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAocGxhY2Vob2xkZXIgIT09IFwiXCIgJiYgZ2V0QnVmZmVyKClbbGFzdFBvc2l0aW9uXSAhPT0gcGxhY2Vob2xkZXIgJiYgdHQubWF0Y2gub3B0aW9uYWxRdWFudGlmaWVyICE9PSB0cnVlICYmIHR0Lm1hdGNoLm5ld0Jsb2NrTWFya2VyICE9PSB0cnVlIHx8ICFpc01hc2sobGFzdFBvc2l0aW9uLCBvcHRzLmtlZXBTdGF0aWMpICYmIHR0Lm1hdGNoLmRlZiA9PT0gcGxhY2Vob2xkZXIpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgbmV3UG9zID0gc2Vla05leHQobGFzdFBvc2l0aW9uKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoY2xpY2tQb3NpdGlvbiA+PSBuZXdQb3MgfHwgY2xpY2tQb3NpdGlvbiA9PT0gbGFzdFBvc2l0aW9uKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxhc3RQb3NpdGlvbiA9IG5ld1BvcztcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXJldChpbnB1dCwgbGFzdFBvc2l0aW9uKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9LCAwKTtcclxuICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICBjdXRFdmVudDogZnVuY3Rpb24gY3V0RXZlbnQoZSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBpbnB1dCA9IHRoaXMsICRpbnB1dCA9ICQoaW5wdXQpLCBwb3MgPSBjYXJldChpbnB1dCksIGV2ID0gZS5vcmlnaW5hbEV2ZW50IHx8IGU7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIGNsaXBib2FyZERhdGEgPSB3aW5kb3cuY2xpcGJvYXJkRGF0YSB8fCBldi5jbGlwYm9hcmREYXRhLCBjbGlwRGF0YSA9IGlzUlRMID8gZ2V0QnVmZmVyKCkuc2xpY2UocG9zLmVuZCwgcG9zLmJlZ2luKSA6IGdldEJ1ZmZlcigpLnNsaWNlKHBvcy5iZWdpbiwgcG9zLmVuZCk7XHJcbiAgICAgICAgICAgICAgICAgICAgY2xpcGJvYXJkRGF0YS5zZXREYXRhKFwidGV4dFwiLCBpc1JUTCA/IGNsaXBEYXRhLnJldmVyc2UoKS5qb2luKFwiXCIpIDogY2xpcERhdGEuam9pbihcIlwiKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGRvY3VtZW50LmV4ZWNDb21tYW5kKSBkb2N1bWVudC5leGVjQ29tbWFuZChcImNvcHlcIik7XHJcbiAgICAgICAgICAgICAgICAgICAgaGFuZGxlUmVtb3ZlKGlucHV0LCBJbnB1dG1hc2sua2V5Q29kZS5ERUxFVEUsIHBvcyk7XHJcbiAgICAgICAgICAgICAgICAgICAgd3JpdGVCdWZmZXIoaW5wdXQsIGdldEJ1ZmZlcigpLCBnZXRNYXNrU2V0KCkucCwgZSwgdW5kb1ZhbHVlICE9PSBnZXRCdWZmZXIoKS5qb2luKFwiXCIpKTtcclxuICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICBibHVyRXZlbnQ6IGZ1bmN0aW9uIGJsdXJFdmVudChlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyICRpbnB1dCA9ICQodGhpcyksIGlucHV0ID0gdGhpcztcclxuICAgICAgICAgICAgICAgICAgICBpZiAoaW5wdXQuaW5wdXRtYXNrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIEhhbmRsZU5hdGl2ZVBsYWNlaG9sZGVyKGlucHV0LCBvcmlnaW5hbFBsYWNlaG9sZGVyKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIG5wdFZhbHVlID0gaW5wdXQuaW5wdXRtYXNrLl92YWx1ZUdldCgpLCBidWZmZXIgPSBnZXRCdWZmZXIoKS5zbGljZSgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAobnB0VmFsdWUgIT09IFwiXCIgfHwgY29sb3JNYXNrICE9PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChvcHRzLmNsZWFyTWFza09uTG9zdEZvY3VzKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGdldExhc3RWYWxpZFBvc2l0aW9uKCkgPT09IC0xICYmIG5wdFZhbHVlID09PSBnZXRCdWZmZXJUZW1wbGF0ZSgpLmpvaW4oXCJcIikpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnVmZmVyID0gW107XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xlYXJPcHRpb25hbFRhaWwoYnVmZmVyKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoaXNDb21wbGV0ZShidWZmZXIpID09PSBmYWxzZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRpbnB1dC50cmlnZ2VyKFwiaW5jb21wbGV0ZVwiKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LCAwKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAob3B0cy5jbGVhckluY29tcGxldGUpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVzZXRNYXNrU2V0KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChvcHRzLmNsZWFyTWFza09uTG9zdEZvY3VzKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBidWZmZXIgPSBbXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJ1ZmZlciA9IGdldEJ1ZmZlclRlbXBsYXRlKCkuc2xpY2UoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHdyaXRlQnVmZmVyKGlucHV0LCBidWZmZXIsIHVuZGVmaW5lZCwgZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHVuZG9WYWx1ZSAhPT0gZ2V0QnVmZmVyKCkuam9pbihcIlwiKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdW5kb1ZhbHVlID0gYnVmZmVyLmpvaW4oXCJcIik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkaW5wdXQudHJpZ2dlcihcImNoYW5nZVwiKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICBtb3VzZWVudGVyRXZlbnQ6IGZ1bmN0aW9uIG1vdXNlZW50ZXJFdmVudChlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIGlucHV0ID0gdGhpcztcclxuICAgICAgICAgICAgICAgICAgICBtb3VzZUVudGVyID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoZG9jdW1lbnQuYWN0aXZlRWxlbWVudCAhPT0gaW5wdXQgJiYgb3B0cy5zaG93TWFza09uSG92ZXIpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgSGFuZGxlTmF0aXZlUGxhY2Vob2xkZXIoaW5wdXQsIChpc1JUTCA/IGdldEJ1ZmZlcigpLnNsaWNlKCkucmV2ZXJzZSgpIDogZ2V0QnVmZmVyKCkpLmpvaW4oXCJcIikpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICBzdWJtaXRFdmVudDogZnVuY3Rpb24gc3VibWl0RXZlbnQoZSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICh1bmRvVmFsdWUgIT09IGdldEJ1ZmZlcigpLmpvaW4oXCJcIikpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgJGVsLnRyaWdnZXIoXCJjaGFuZ2VcIik7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGlmIChvcHRzLmNsZWFyTWFza09uTG9zdEZvY3VzICYmIGdldExhc3RWYWxpZFBvc2l0aW9uKCkgPT09IC0xICYmIGVsLmlucHV0bWFzay5fdmFsdWVHZXQgJiYgZWwuaW5wdXRtYXNrLl92YWx1ZUdldCgpID09PSBnZXRCdWZmZXJUZW1wbGF0ZSgpLmpvaW4oXCJcIikpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZWwuaW5wdXRtYXNrLl92YWx1ZVNldChcIlwiKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKG9wdHMuY2xlYXJJbmNvbXBsZXRlICYmIGlzQ29tcGxldGUoZ2V0QnVmZmVyKCkpID09PSBmYWxzZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBlbC5pbnB1dG1hc2suX3ZhbHVlU2V0KFwiXCIpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBpZiAob3B0cy5yZW1vdmVNYXNrT25TdWJtaXQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZWwuaW5wdXRtYXNrLl92YWx1ZVNldChlbC5pbnB1dG1hc2sudW5tYXNrZWR2YWx1ZSgpLCB0cnVlKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgc2V0VGltZW91dChmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHdyaXRlQnVmZmVyKGVsLCBnZXRCdWZmZXIoKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sIDApO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICByZXNldEV2ZW50OiBmdW5jdGlvbiByZXNldEV2ZW50KGUpIHtcclxuICAgICAgICAgICAgICAgICAgICBlbC5pbnB1dG1hc2sucmVmcmVzaFZhbHVlID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAkZWwudHJpZ2dlcihcInNldHZhbHVlXCIpO1xyXG4gICAgICAgICAgICAgICAgICAgIH0sIDApO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICBmdW5jdGlvbiBjaGVja1ZhbChpbnB1dCwgd3JpdGVPdXQsIHN0cmljdCwgbnB0dmwsIGluaXRpYXRpbmdFdmVudCkge1xyXG4gICAgICAgICAgICAgICAgdmFyIGlucHV0bWFzayA9IHRoaXMgfHwgaW5wdXQuaW5wdXRtYXNrLCBpbnB1dFZhbHVlID0gbnB0dmwuc2xpY2UoKSwgY2hhckNvZGVzID0gXCJcIiwgaW5pdGlhbE5keCA9IC0xLCByZXN1bHQgPSB1bmRlZmluZWQ7XHJcbiAgICAgICAgICAgICAgICBmdW5jdGlvbiBpc1RlbXBsYXRlTWF0Y2gobmR4LCBjaGFyQ29kZXMpIHtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgY2hhckNvZGVOZHggPSBnZXRNYXNrVGVtcGxhdGUodHJ1ZSwgMCwgZmFsc2UpLnNsaWNlKG5keCwgc2Vla05leHQobmR4KSkuam9pbihcIlwiKS5yZXBsYWNlKC8nL2csIFwiXCIpLmluZGV4T2YoY2hhckNvZGVzKTtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gY2hhckNvZGVOZHggIT09IC0xICYmICFpc01hc2sobmR4KSAmJiAoZ2V0VGVzdChuZHgpLm1hdGNoLm5hdGl2ZURlZiA9PT0gY2hhckNvZGVzLmNoYXJBdCgwKSB8fCBnZXRUZXN0KG5keCkubWF0Y2guZm4gPT09IG51bGwgJiYgZ2V0VGVzdChuZHgpLm1hdGNoLm5hdGl2ZURlZiA9PT0gXCInXCIgKyBjaGFyQ29kZXMuY2hhckF0KDApIHx8IGdldFRlc3QobmR4KS5tYXRjaC5uYXRpdmVEZWYgPT09IFwiIFwiICYmIChnZXRUZXN0KG5keCArIDEpLm1hdGNoLm5hdGl2ZURlZiA9PT0gY2hhckNvZGVzLmNoYXJBdCgwKSB8fCBnZXRUZXN0KG5keCArIDEpLm1hdGNoLmZuID09PSBudWxsICYmIGdldFRlc3QobmR4ICsgMSkubWF0Y2gubmF0aXZlRGVmID09PSBcIidcIiArIGNoYXJDb2Rlcy5jaGFyQXQoMCkpKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIHJlc2V0TWFza1NldCgpO1xyXG4gICAgICAgICAgICAgICAgaWYgKCFzdHJpY3QgJiYgb3B0cy5hdXRvVW5tYXNrICE9PSB0cnVlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIHN0YXRpY0lucHV0ID0gZ2V0QnVmZmVyVGVtcGxhdGUoKS5zbGljZSgwLCBzZWVrTmV4dCgtMSkpLmpvaW4oXCJcIiksIG1hdGNoZXMgPSBpbnB1dFZhbHVlLmpvaW4oXCJcIikubWF0Y2gobmV3IFJlZ0V4cChcIl5cIiArIElucHV0bWFzay5lc2NhcGVSZWdleChzdGF0aWNJbnB1dCksIFwiZ1wiKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKG1hdGNoZXMgJiYgbWF0Y2hlcy5sZW5ndGggPiAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlucHV0VmFsdWUuc3BsaWNlKDAsIG1hdGNoZXMubGVuZ3RoICogc3RhdGljSW5wdXQubGVuZ3RoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaW5pdGlhbE5keCA9IHNlZWtOZXh0KGluaXRpYWxOZHgpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaW5pdGlhbE5keCA9IHNlZWtOZXh0KGluaXRpYWxOZHgpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgaWYgKGluaXRpYWxOZHggPT09IC0xKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgZ2V0TWFza1NldCgpLnAgPSBzZWVrTmV4dChpbml0aWFsTmR4KTtcclxuICAgICAgICAgICAgICAgICAgICBpbml0aWFsTmR4ID0gMDtcclxuICAgICAgICAgICAgICAgIH0gZWxzZSBnZXRNYXNrU2V0KCkucCA9IGluaXRpYWxOZHg7XHJcbiAgICAgICAgICAgICAgICBpbnB1dG1hc2suY2FyZXRQb3MgPSB7XHJcbiAgICAgICAgICAgICAgICAgICAgYmVnaW46IGluaXRpYWxOZHhcclxuICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgICAgICAkLmVhY2goaW5wdXRWYWx1ZSwgZnVuY3Rpb24obmR4LCBjaGFyQ29kZSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChjaGFyQ29kZSAhPT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChnZXRNYXNrU2V0KCkudmFsaWRQb3NpdGlvbnNbbmR4XSA9PT0gdW5kZWZpbmVkICYmIGlucHV0VmFsdWVbbmR4XSA9PT0gZ2V0UGxhY2Vob2xkZXIobmR4KSAmJiBpc01hc2sobmR4LCB0cnVlKSAmJiBpc1ZhbGlkKG5keCwgaW5wdXRWYWx1ZVtuZHhdLCB0cnVlLCB1bmRlZmluZWQsIHVuZGVmaW5lZCwgdHJ1ZSkgPT09IGZhbHNlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBnZXRNYXNrU2V0KCkucCsrO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGtleXByZXNzID0gbmV3ICQuRXZlbnQoXCJfY2hlY2t2YWxcIik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBrZXlwcmVzcy53aGljaCA9IGNoYXJDb2RlLmNoYXJDb2RlQXQoMCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjaGFyQ29kZXMgKz0gY2hhckNvZGU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgbHZwID0gZ2V0TGFzdFZhbGlkUG9zaXRpb24odW5kZWZpbmVkLCB0cnVlKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICghaXNUZW1wbGF0ZU1hdGNoKGluaXRpYWxOZHgsIGNoYXJDb2RlcykpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXN1bHQgPSBFdmVudEhhbmRsZXJzLmtleXByZXNzRXZlbnQuY2FsbChpbnB1dCwga2V5cHJlc3MsIHRydWUsIGZhbHNlLCBzdHJpY3QsIGlucHV0bWFzay5jYXJldFBvcy5iZWdpbik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHJlc3VsdCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbml0aWFsTmR4ID0gaW5wdXRtYXNrLmNhcmV0UG9zLmJlZ2luICsgMTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2hhckNvZGVzID0gXCJcIjtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlc3VsdCA9IEV2ZW50SGFuZGxlcnMua2V5cHJlc3NFdmVudC5jYWxsKGlucHV0LCBrZXlwcmVzcywgdHJ1ZSwgZmFsc2UsIHN0cmljdCwgbHZwICsgMSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAocmVzdWx0KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgd3JpdGVCdWZmZXIodW5kZWZpbmVkLCBnZXRCdWZmZXIoKSwgcmVzdWx0LmZvcndhcmRQb3NpdGlvbiwga2V5cHJlc3MsIGZhbHNlKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbnB1dG1hc2suY2FyZXRQb3MgPSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJlZ2luOiByZXN1bHQuZm9yd2FyZFBvc2l0aW9uLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbmQ6IHJlc3VsdC5mb3J3YXJkUG9zaXRpb25cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICBpZiAod3JpdGVPdXQpIHdyaXRlQnVmZmVyKGlucHV0LCBnZXRCdWZmZXIoKSwgcmVzdWx0ID8gcmVzdWx0LmZvcndhcmRQb3NpdGlvbiA6IHVuZGVmaW5lZCwgaW5pdGlhdGluZ0V2ZW50IHx8IG5ldyAkLkV2ZW50KFwiY2hlY2t2YWxcIiksIGluaXRpYXRpbmdFdmVudCAmJiBpbml0aWF0aW5nRXZlbnQudHlwZSA9PT0gXCJpbnB1dFwiKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBmdW5jdGlvbiB1bm1hc2tlZHZhbHVlKGlucHV0KSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoaW5wdXQpIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoaW5wdXQuaW5wdXRtYXNrID09PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGlucHV0LnZhbHVlO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBpZiAoaW5wdXQuaW5wdXRtYXNrICYmIGlucHV0LmlucHV0bWFzay5yZWZyZXNoVmFsdWUpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgRXZlbnRIYW5kbGVycy5zZXRWYWx1ZUV2ZW50LmNhbGwoaW5wdXQpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIHZhciB1bVZhbHVlID0gW10sIHZwcyA9IGdldE1hc2tTZXQoKS52YWxpZFBvc2l0aW9ucztcclxuICAgICAgICAgICAgICAgIGZvciAodmFyIHBuZHggaW4gdnBzKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHZwc1twbmR4XS5tYXRjaCAmJiB2cHNbcG5keF0ubWF0Y2guZm4gIT0gbnVsbCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB1bVZhbHVlLnB1c2godnBzW3BuZHhdLmlucHV0KTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB2YXIgdW5tYXNrZWRWYWx1ZSA9IHVtVmFsdWUubGVuZ3RoID09PSAwID8gXCJcIiA6IChpc1JUTCA/IHVtVmFsdWUucmV2ZXJzZSgpIDogdW1WYWx1ZSkuam9pbihcIlwiKTtcclxuICAgICAgICAgICAgICAgIGlmICgkLmlzRnVuY3Rpb24ob3B0cy5vblVuTWFzaykpIHtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgYnVmZmVyVmFsdWUgPSAoaXNSVEwgPyBnZXRCdWZmZXIoKS5zbGljZSgpLnJldmVyc2UoKSA6IGdldEJ1ZmZlcigpKS5qb2luKFwiXCIpO1xyXG4gICAgICAgICAgICAgICAgICAgIHVubWFza2VkVmFsdWUgPSBvcHRzLm9uVW5NYXNrLmNhbGwoaW5wdXRtYXNrLCBidWZmZXJWYWx1ZSwgdW5tYXNrZWRWYWx1ZSwgb3B0cyk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdW5tYXNrZWRWYWx1ZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBmdW5jdGlvbiBjYXJldChpbnB1dCwgYmVnaW4sIGVuZCwgbm90cmFuc2xhdGUpIHtcclxuICAgICAgICAgICAgICAgIGZ1bmN0aW9uIHRyYW5zbGF0ZVBvc2l0aW9uKHBvcykge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChpc1JUTCAmJiB0eXBlb2YgcG9zID09PSBcIm51bWJlclwiICYmICghb3B0cy5ncmVlZHkgfHwgb3B0cy5wbGFjZWhvbGRlciAhPT0gXCJcIikgJiYgZWwpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcG9zID0gZWwuaW5wdXRtYXNrLl92YWx1ZUdldCgpLmxlbmd0aCAtIHBvcztcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHBvcztcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIHZhciByYW5nZTtcclxuICAgICAgICAgICAgICAgIGlmIChiZWdpbiAhPT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKCQuaXNBcnJheShiZWdpbikpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZW5kID0gaXNSVEwgPyBiZWdpblswXSA6IGJlZ2luWzFdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBiZWdpbiA9IGlzUlRMID8gYmVnaW5bMV0gOiBiZWdpblswXTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGJlZ2luLmJlZ2luICE9PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZW5kID0gaXNSVEwgPyBiZWdpbi5iZWdpbiA6IGJlZ2luLmVuZDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYmVnaW4gPSBpc1JUTCA/IGJlZ2luLmVuZCA6IGJlZ2luLmJlZ2luO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBpZiAodHlwZW9mIGJlZ2luID09PSBcIm51bWJlclwiKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGJlZ2luID0gbm90cmFuc2xhdGUgPyBiZWdpbiA6IHRyYW5zbGF0ZVBvc2l0aW9uKGJlZ2luKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZW5kID0gbm90cmFuc2xhdGUgPyBlbmQgOiB0cmFuc2xhdGVQb3NpdGlvbihlbmQpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBlbmQgPSB0eXBlb2YgZW5kID09IFwibnVtYmVyXCIgPyBlbmQgOiBiZWdpbjtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHNjcm9sbENhbGMgPSBwYXJzZUludCgoKGlucHV0Lm93bmVyRG9jdW1lbnQuZGVmYXVsdFZpZXcgfHwgd2luZG93KS5nZXRDb21wdXRlZFN0eWxlID8gKGlucHV0Lm93bmVyRG9jdW1lbnQuZGVmYXVsdFZpZXcgfHwgd2luZG93KS5nZXRDb21wdXRlZFN0eWxlKGlucHV0LCBudWxsKSA6IGlucHV0LmN1cnJlbnRTdHlsZSkuZm9udFNpemUpICogZW5kO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpbnB1dC5zY3JvbGxMZWZ0ID0gc2Nyb2xsQ2FsYyA+IGlucHV0LnNjcm9sbFdpZHRoID8gc2Nyb2xsQ2FsYyA6IDA7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlucHV0LmlucHV0bWFzay5jYXJldFBvcyA9IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJlZ2luOiBiZWdpbixcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVuZDogZW5kXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChpbnB1dCA9PT0gZG9jdW1lbnQuYWN0aXZlRWxlbWVudCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKFwic2VsZWN0aW9uU3RhcnRcIiBpbiBpbnB1dCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlucHV0LnNlbGVjdGlvblN0YXJ0ID0gYmVnaW47XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaW5wdXQuc2VsZWN0aW9uRW5kID0gZW5kO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmICh3aW5kb3cuZ2V0U2VsZWN0aW9uKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmFuZ2UgPSBkb2N1bWVudC5jcmVhdGVSYW5nZSgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChpbnB1dC5maXJzdENoaWxkID09PSB1bmRlZmluZWQgfHwgaW5wdXQuZmlyc3RDaGlsZCA9PT0gbnVsbCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgdGV4dE5vZGUgPSBkb2N1bWVudC5jcmVhdGVUZXh0Tm9kZShcIlwiKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaW5wdXQuYXBwZW5kQ2hpbGQodGV4dE5vZGUpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByYW5nZS5zZXRTdGFydChpbnB1dC5maXJzdENoaWxkLCBiZWdpbiA8IGlucHV0LmlucHV0bWFzay5fdmFsdWVHZXQoKS5sZW5ndGggPyBiZWdpbiA6IGlucHV0LmlucHV0bWFzay5fdmFsdWVHZXQoKS5sZW5ndGgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJhbmdlLnNldEVuZChpbnB1dC5maXJzdENoaWxkLCBlbmQgPCBpbnB1dC5pbnB1dG1hc2suX3ZhbHVlR2V0KCkubGVuZ3RoID8gZW5kIDogaW5wdXQuaW5wdXRtYXNrLl92YWx1ZUdldCgpLmxlbmd0aCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmFuZ2UuY29sbGFwc2UodHJ1ZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHNlbCA9IHdpbmRvdy5nZXRTZWxlY3Rpb24oKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZWwucmVtb3ZlQWxsUmFuZ2VzKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2VsLmFkZFJhbmdlKHJhbmdlKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoaW5wdXQuY3JlYXRlVGV4dFJhbmdlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmFuZ2UgPSBpbnB1dC5jcmVhdGVUZXh0UmFuZ2UoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByYW5nZS5jb2xsYXBzZSh0cnVlKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByYW5nZS5tb3ZlRW5kKFwiY2hhcmFjdGVyXCIsIGVuZCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmFuZ2UubW92ZVN0YXJ0KFwiY2hhcmFjdGVyXCIsIGJlZ2luKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByYW5nZS5zZWxlY3QoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlbmRlckNvbG9yTWFzayhpbnB1dCwge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJlZ2luOiBiZWdpbixcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbmQ6IGVuZFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChcInNlbGVjdGlvblN0YXJ0XCIgaW4gaW5wdXQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYmVnaW4gPSBpbnB1dC5zZWxlY3Rpb25TdGFydDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZW5kID0gaW5wdXQuc2VsZWN0aW9uRW5kO1xyXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAod2luZG93LmdldFNlbGVjdGlvbikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByYW5nZSA9IHdpbmRvdy5nZXRTZWxlY3Rpb24oKS5nZXRSYW5nZUF0KDApO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAocmFuZ2UuY29tbW9uQW5jZXN0b3JDb250YWluZXIucGFyZW50Tm9kZSA9PT0gaW5wdXQgfHwgcmFuZ2UuY29tbW9uQW5jZXN0b3JDb250YWluZXIgPT09IGlucHV0KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBiZWdpbiA9IHJhbmdlLnN0YXJ0T2Zmc2V0O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZW5kID0gcmFuZ2UuZW5kT2Zmc2V0O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChkb2N1bWVudC5zZWxlY3Rpb24gJiYgZG9jdW1lbnQuc2VsZWN0aW9uLmNyZWF0ZVJhbmdlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJhbmdlID0gZG9jdW1lbnQuc2VsZWN0aW9uLmNyZWF0ZVJhbmdlKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGJlZ2luID0gMCAtIHJhbmdlLmR1cGxpY2F0ZSgpLm1vdmVTdGFydChcImNoYXJhY3RlclwiLCAtaW5wdXQuaW5wdXRtYXNrLl92YWx1ZUdldCgpLmxlbmd0aCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGVuZCA9IGJlZ2luICsgcmFuZ2UudGV4dC5sZW5ndGg7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGJlZ2luOiBub3RyYW5zbGF0ZSA/IGJlZ2luIDogdHJhbnNsYXRlUG9zaXRpb24oYmVnaW4pLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBlbmQ6IG5vdHJhbnNsYXRlID8gZW5kIDogdHJhbnNsYXRlUG9zaXRpb24oZW5kKVxyXG4gICAgICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZnVuY3Rpb24gZGV0ZXJtaW5lTGFzdFJlcXVpcmVkUG9zaXRpb24ocmV0dXJuRGVmaW5pdGlvbikge1xyXG4gICAgICAgICAgICAgICAgdmFyIGJ1ZmZlciA9IGdldE1hc2tUZW1wbGF0ZSh0cnVlLCBnZXRMYXN0VmFsaWRQb3NpdGlvbigpLCB0cnVlLCB0cnVlKSwgYmwgPSBidWZmZXIubGVuZ3RoLCBwb3MsIGx2cCA9IGdldExhc3RWYWxpZFBvc2l0aW9uKCksIHBvc2l0aW9ucyA9IHt9LCBsdlRlc3QgPSBnZXRNYXNrU2V0KCkudmFsaWRQb3NpdGlvbnNbbHZwXSwgbmR4SW50bHpyID0gbHZUZXN0ICE9PSB1bmRlZmluZWQgPyBsdlRlc3QubG9jYXRvci5zbGljZSgpIDogdW5kZWZpbmVkLCB0ZXN0UG9zO1xyXG4gICAgICAgICAgICAgICAgZm9yIChwb3MgPSBsdnAgKyAxOyBwb3MgPCBidWZmZXIubGVuZ3RoOyBwb3MrKykge1xyXG4gICAgICAgICAgICAgICAgICAgIHRlc3RQb3MgPSBnZXRUZXN0VGVtcGxhdGUocG9zLCBuZHhJbnRsenIsIHBvcyAtIDEpO1xyXG4gICAgICAgICAgICAgICAgICAgIG5keEludGx6ciA9IHRlc3RQb3MubG9jYXRvci5zbGljZSgpO1xyXG4gICAgICAgICAgICAgICAgICAgIHBvc2l0aW9uc1twb3NdID0gJC5leHRlbmQodHJ1ZSwge30sIHRlc3RQb3MpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgdmFyIGx2VGVzdEFsdCA9IGx2VGVzdCAmJiBsdlRlc3QuYWx0ZXJuYXRpb24gIT09IHVuZGVmaW5lZCA/IGx2VGVzdC5sb2NhdG9yW2x2VGVzdC5hbHRlcm5hdGlvbl0gOiB1bmRlZmluZWQ7XHJcbiAgICAgICAgICAgICAgICBmb3IgKHBvcyA9IGJsIC0gMTsgcG9zID4gbHZwOyBwb3MtLSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHRlc3RQb3MgPSBwb3NpdGlvbnNbcG9zXTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoKHRlc3RQb3MubWF0Y2gub3B0aW9uYWxpdHkgfHwgdGVzdFBvcy5tYXRjaC5vcHRpb25hbFF1YW50aWZpZXIgJiYgdGVzdFBvcy5tYXRjaC5uZXdCbG9ja01hcmtlciB8fCBsdlRlc3RBbHQgJiYgKGx2VGVzdEFsdCAhPT0gcG9zaXRpb25zW3Bvc10ubG9jYXRvcltsdlRlc3QuYWx0ZXJuYXRpb25dICYmIHRlc3RQb3MubWF0Y2guZm4gIT0gbnVsbCB8fCB0ZXN0UG9zLm1hdGNoLmZuID09PSBudWxsICYmIHRlc3RQb3MubG9jYXRvcltsdlRlc3QuYWx0ZXJuYXRpb25dICYmIGNoZWNrQWx0ZXJuYXRpb25NYXRjaCh0ZXN0UG9zLmxvY2F0b3JbbHZUZXN0LmFsdGVybmF0aW9uXS50b1N0cmluZygpLnNwbGl0KFwiLFwiKSwgbHZUZXN0QWx0LnRvU3RyaW5nKCkuc3BsaXQoXCIsXCIpKSAmJiBnZXRUZXN0cyhwb3MpWzBdLmRlZiAhPT0gXCJcIikpICYmIGJ1ZmZlcltwb3NdID09PSBnZXRQbGFjZWhvbGRlcihwb3MsIHRlc3RQb3MubWF0Y2gpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGJsLS07XHJcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHJldHVybkRlZmluaXRpb24gPyB7XHJcbiAgICAgICAgICAgICAgICAgICAgbDogYmwsXHJcbiAgICAgICAgICAgICAgICAgICAgZGVmOiBwb3NpdGlvbnNbYmxdID8gcG9zaXRpb25zW2JsXS5tYXRjaCA6IHVuZGVmaW5lZFxyXG4gICAgICAgICAgICAgICAgfSA6IGJsO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGZ1bmN0aW9uIGNsZWFyT3B0aW9uYWxUYWlsKGJ1ZmZlcikge1xyXG4gICAgICAgICAgICAgICAgYnVmZmVyLmxlbmd0aCA9IDA7XHJcbiAgICAgICAgICAgICAgICB2YXIgdGVtcGxhdGUgPSBnZXRNYXNrVGVtcGxhdGUodHJ1ZSwgMCwgdHJ1ZSwgdW5kZWZpbmVkLCB0cnVlKSwgbG1udCwgdmFsaWRQb3M7XHJcbiAgICAgICAgICAgICAgICB3aGlsZSAobG1udCA9IHRlbXBsYXRlLnNoaWZ0KCksIGxtbnQgIT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGJ1ZmZlci5wdXNoKGxtbnQpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGJ1ZmZlcjtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBmdW5jdGlvbiBpc0NvbXBsZXRlKGJ1ZmZlcikge1xyXG4gICAgICAgICAgICAgICAgaWYgKCQuaXNGdW5jdGlvbihvcHRzLmlzQ29tcGxldGUpKSByZXR1cm4gb3B0cy5pc0NvbXBsZXRlKGJ1ZmZlciwgb3B0cyk7XHJcbiAgICAgICAgICAgICAgICBpZiAob3B0cy5yZXBlYXQgPT09IFwiKlwiKSByZXR1cm4gdW5kZWZpbmVkO1xyXG4gICAgICAgICAgICAgICAgdmFyIGNvbXBsZXRlID0gZmFsc2UsIGxycCA9IGRldGVybWluZUxhc3RSZXF1aXJlZFBvc2l0aW9uKHRydWUpLCBhbWwgPSBzZWVrUHJldmlvdXMobHJwLmwpO1xyXG4gICAgICAgICAgICAgICAgaWYgKGxycC5kZWYgPT09IHVuZGVmaW5lZCB8fCBscnAuZGVmLm5ld0Jsb2NrTWFya2VyIHx8IGxycC5kZWYub3B0aW9uYWxpdHkgfHwgbHJwLmRlZi5vcHRpb25hbFF1YW50aWZpZXIpIHtcclxuICAgICAgICAgICAgICAgICAgICBjb21wbGV0ZSA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPD0gYW1sOyBpKyspIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHRlc3QgPSBnZXRUZXN0VGVtcGxhdGUoaSkubWF0Y2g7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0ZXN0LmZuICE9PSBudWxsICYmIGdldE1hc2tTZXQoKS52YWxpZFBvc2l0aW9uc1tpXSA9PT0gdW5kZWZpbmVkICYmIHRlc3Qub3B0aW9uYWxpdHkgIT09IHRydWUgJiYgdGVzdC5vcHRpb25hbFF1YW50aWZpZXIgIT09IHRydWUgfHwgdGVzdC5mbiA9PT0gbnVsbCAmJiBidWZmZXJbaV0gIT09IGdldFBsYWNlaG9sZGVyKGksIHRlc3QpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb21wbGV0ZSA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gY29tcGxldGU7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZnVuY3Rpb24gaGFuZGxlUmVtb3ZlKGlucHV0LCBrLCBwb3MsIHN0cmljdCwgZnJvbUlzVmFsaWQpIHtcclxuICAgICAgICAgICAgICAgIGlmIChvcHRzLm51bWVyaWNJbnB1dCB8fCBpc1JUTCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChrID09PSBJbnB1dG1hc2sua2V5Q29kZS5CQUNLU1BBQ0UpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgayA9IElucHV0bWFzay5rZXlDb2RlLkRFTEVURTtcclxuICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGsgPT09IElucHV0bWFzay5rZXlDb2RlLkRFTEVURSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBrID0gSW5wdXRtYXNrLmtleUNvZGUuQkFDS1NQQUNFO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBpZiAoaXNSVEwpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHBlbmQgPSBwb3MuZW5kO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBwb3MuZW5kID0gcG9zLmJlZ2luO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBwb3MuYmVnaW4gPSBwZW5kO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGlmIChrID09PSBJbnB1dG1hc2sua2V5Q29kZS5CQUNLU1BBQ0UgJiYgcG9zLmVuZCAtIHBvcy5iZWdpbiA8IDEpIHtcclxuICAgICAgICAgICAgICAgICAgICBwb3MuYmVnaW4gPSBzZWVrUHJldmlvdXMocG9zLmJlZ2luKTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoZ2V0TWFza1NldCgpLnZhbGlkUG9zaXRpb25zW3Bvcy5iZWdpbl0gIT09IHVuZGVmaW5lZCAmJiBnZXRNYXNrU2V0KCkudmFsaWRQb3NpdGlvbnNbcG9zLmJlZ2luXS5pbnB1dCA9PT0gb3B0cy5ncm91cFNlcGFyYXRvcikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBwb3MuYmVnaW4tLTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGsgPT09IElucHV0bWFzay5rZXlDb2RlLkRFTEVURSAmJiBwb3MuYmVnaW4gPT09IHBvcy5lbmQpIHtcclxuICAgICAgICAgICAgICAgICAgICBwb3MuZW5kID0gaXNNYXNrKHBvcy5lbmQsIHRydWUpICYmIGdldE1hc2tTZXQoKS52YWxpZFBvc2l0aW9uc1twb3MuZW5kXSAmJiBnZXRNYXNrU2V0KCkudmFsaWRQb3NpdGlvbnNbcG9zLmVuZF0uaW5wdXQgIT09IG9wdHMucmFkaXhQb2ludCA/IHBvcy5lbmQgKyAxIDogc2Vla05leHQocG9zLmVuZCkgKyAxO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChnZXRNYXNrU2V0KCkudmFsaWRQb3NpdGlvbnNbcG9zLmJlZ2luXSAhPT0gdW5kZWZpbmVkICYmIGdldE1hc2tTZXQoKS52YWxpZFBvc2l0aW9uc1twb3MuYmVnaW5dLmlucHV0ID09PSBvcHRzLmdyb3VwU2VwYXJhdG9yKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHBvcy5lbmQrKztcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICByZXZhbGlkYXRlTWFzayhwb3MpO1xyXG4gICAgICAgICAgICAgICAgaWYgKHN0cmljdCAhPT0gdHJ1ZSAmJiBvcHRzLmtlZXBTdGF0aWMgIT09IGZhbHNlIHx8IG9wdHMucmVnZXggIT09IG51bGwpIHtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgcmVzdWx0ID0gYWx0ZXJuYXRlKHRydWUpO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChyZXN1bHQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIG5ld1BvcyA9IHJlc3VsdC5jYXJldCAhPT0gdW5kZWZpbmVkID8gcmVzdWx0LmNhcmV0IDogcmVzdWx0LnBvcyA/IHNlZWtOZXh0KHJlc3VsdC5wb3MuYmVnaW4gPyByZXN1bHQucG9zLmJlZ2luIDogcmVzdWx0LnBvcykgOiBnZXRMYXN0VmFsaWRQb3NpdGlvbigtMSwgdHJ1ZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChrICE9PSBJbnB1dG1hc2sua2V5Q29kZS5ERUxFVEUgfHwgcG9zLmJlZ2luID4gbmV3UG9zKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwb3MuYmVnaW4gPT0gbmV3UG9zO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgdmFyIGx2cCA9IGdldExhc3RWYWxpZFBvc2l0aW9uKHBvcy5iZWdpbiwgdHJ1ZSk7XHJcbiAgICAgICAgICAgICAgICBpZiAobHZwIDwgcG9zLmJlZ2luIHx8IHBvcy5iZWdpbiA9PT0gLTEpIHtcclxuICAgICAgICAgICAgICAgICAgICBnZXRNYXNrU2V0KCkucCA9IHNlZWtOZXh0KGx2cCk7XHJcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKHN0cmljdCAhPT0gdHJ1ZSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGdldE1hc2tTZXQoKS5wID0gcG9zLmJlZ2luO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChmcm9tSXNWYWxpZCAhPT0gdHJ1ZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB3aGlsZSAoZ2V0TWFza1NldCgpLnAgPCBsdnAgJiYgZ2V0TWFza1NldCgpLnZhbGlkUG9zaXRpb25zW2dldE1hc2tTZXQoKS5wXSA9PT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBnZXRNYXNrU2V0KCkucCsrO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGZ1bmN0aW9uIGluaXRpYWxpemVDb2xvck1hc2soaW5wdXQpIHtcclxuICAgICAgICAgICAgICAgIHZhciBjb21wdXRlZFN0eWxlID0gKGlucHV0Lm93bmVyRG9jdW1lbnQuZGVmYXVsdFZpZXcgfHwgd2luZG93KS5nZXRDb21wdXRlZFN0eWxlKGlucHV0LCBudWxsKTtcclxuICAgICAgICAgICAgICAgIGZ1bmN0aW9uIGZpbmRDYXJldFBvcyhjbGllbnR4KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIGUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwic3BhblwiKSwgY2FyZXRQb3M7XHJcbiAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgc3R5bGUgaW4gY29tcHV0ZWRTdHlsZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoaXNOYU4oc3R5bGUpICYmIHN0eWxlLmluZGV4T2YoXCJmb250XCIpICE9PSAtMSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZS5zdHlsZVtzdHlsZV0gPSBjb21wdXRlZFN0eWxlW3N0eWxlXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBlLnN0eWxlLnRleHRUcmFuc2Zvcm0gPSBjb21wdXRlZFN0eWxlLnRleHRUcmFuc2Zvcm07XHJcbiAgICAgICAgICAgICAgICAgICAgZS5zdHlsZS5sZXR0ZXJTcGFjaW5nID0gY29tcHV0ZWRTdHlsZS5sZXR0ZXJTcGFjaW5nO1xyXG4gICAgICAgICAgICAgICAgICAgIGUuc3R5bGUucG9zaXRpb24gPSBcImFic29sdXRlXCI7XHJcbiAgICAgICAgICAgICAgICAgICAgZS5zdHlsZS5oZWlnaHQgPSBcImF1dG9cIjtcclxuICAgICAgICAgICAgICAgICAgICBlLnN0eWxlLndpZHRoID0gXCJhdXRvXCI7XHJcbiAgICAgICAgICAgICAgICAgICAgZS5zdHlsZS52aXNpYmlsaXR5ID0gXCJoaWRkZW5cIjtcclxuICAgICAgICAgICAgICAgICAgICBlLnN0eWxlLndoaXRlU3BhY2UgPSBcIm5vd3JhcFwiO1xyXG4gICAgICAgICAgICAgICAgICAgIGRvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQoZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIGlucHV0VGV4dCA9IGlucHV0LmlucHV0bWFzay5fdmFsdWVHZXQoKSwgcHJldmlvdXNXaWR0aCA9IDAsIGl0bDtcclxuICAgICAgICAgICAgICAgICAgICBmb3IgKGNhcmV0UG9zID0gMCwgaXRsID0gaW5wdXRUZXh0Lmxlbmd0aDsgY2FyZXRQb3MgPD0gaXRsOyBjYXJldFBvcysrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGUuaW5uZXJIVE1MICs9IGlucHV0VGV4dC5jaGFyQXQoY2FyZXRQb3MpIHx8IFwiX1wiO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoZS5vZmZzZXRXaWR0aCA+PSBjbGllbnR4KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgb2Zmc2V0MSA9IGNsaWVudHggLSBwcmV2aW91c1dpZHRoO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIG9mZnNldDIgPSBlLm9mZnNldFdpZHRoIC0gY2xpZW50eDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGUuaW5uZXJIVE1MID0gaW5wdXRUZXh0LmNoYXJBdChjYXJldFBvcyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBvZmZzZXQxIC09IGUub2Zmc2V0V2lkdGggLyAzO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FyZXRQb3MgPSBvZmZzZXQxIDwgb2Zmc2V0MiA/IGNhcmV0UG9zIC0gMSA6IGNhcmV0UG9zO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgcHJldmlvdXNXaWR0aCA9IGUub2Zmc2V0V2lkdGg7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGRvY3VtZW50LmJvZHkucmVtb3ZlQ2hpbGQoZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGNhcmV0UG9zO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgdmFyIHRlbXBsYXRlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcclxuICAgICAgICAgICAgICAgIHRlbXBsYXRlLnN0eWxlLndpZHRoID0gY29tcHV0ZWRTdHlsZS53aWR0aDtcclxuICAgICAgICAgICAgICAgIHRlbXBsYXRlLnN0eWxlLnRleHRBbGlnbiA9IGNvbXB1dGVkU3R5bGUudGV4dEFsaWduO1xyXG4gICAgICAgICAgICAgICAgY29sb3JNYXNrID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcclxuICAgICAgICAgICAgICAgIGlucHV0LmlucHV0bWFzay5jb2xvck1hc2sgPSBjb2xvck1hc2s7XHJcbiAgICAgICAgICAgICAgICBjb2xvck1hc2suY2xhc3NOYW1lID0gXCJpbS1jb2xvcm1hc2tcIjtcclxuICAgICAgICAgICAgICAgIGlucHV0LnBhcmVudE5vZGUuaW5zZXJ0QmVmb3JlKGNvbG9yTWFzaywgaW5wdXQpO1xyXG4gICAgICAgICAgICAgICAgaW5wdXQucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChpbnB1dCk7XHJcbiAgICAgICAgICAgICAgICBjb2xvck1hc2suYXBwZW5kQ2hpbGQoaW5wdXQpO1xyXG4gICAgICAgICAgICAgICAgY29sb3JNYXNrLmFwcGVuZENoaWxkKHRlbXBsYXRlKTtcclxuICAgICAgICAgICAgICAgIGlucHV0LnN0eWxlLmxlZnQgPSB0ZW1wbGF0ZS5vZmZzZXRMZWZ0ICsgXCJweFwiO1xyXG4gICAgICAgICAgICAgICAgJChjb2xvck1hc2spLm9uKFwibW91c2VsZWF2ZVwiLCBmdW5jdGlvbihlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIEV2ZW50SGFuZGxlcnMubW91c2VsZWF2ZUV2ZW50LmNhbGwoaW5wdXQsIFsgZSBdKTtcclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgJChjb2xvck1hc2spLm9uKFwibW91c2VlbnRlclwiLCBmdW5jdGlvbihlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIEV2ZW50SGFuZGxlcnMubW91c2VlbnRlckV2ZW50LmNhbGwoaW5wdXQsIFsgZSBdKTtcclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgJChjb2xvck1hc2spLm9uKFwiY2xpY2tcIiwgZnVuY3Rpb24oZSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGNhcmV0KGlucHV0LCBmaW5kQ2FyZXRQb3MoZS5jbGllbnRYKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIEV2ZW50SGFuZGxlcnMuY2xpY2tFdmVudC5jYWxsKGlucHV0LCBbIGUgXSk7XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBJbnB1dG1hc2sucHJvdG90eXBlLnBvc2l0aW9uQ29sb3JNYXNrID0gZnVuY3Rpb24oaW5wdXQsIHRlbXBsYXRlKSB7XHJcbiAgICAgICAgICAgICAgICBpbnB1dC5zdHlsZS5sZWZ0ID0gdGVtcGxhdGUub2Zmc2V0TGVmdCArIFwicHhcIjtcclxuICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgZnVuY3Rpb24gcmVuZGVyQ29sb3JNYXNrKGlucHV0LCBjYXJldFBvcywgY2xlYXIpIHtcclxuICAgICAgICAgICAgICAgIHZhciBtYXNrVGVtcGxhdGUgPSBbXSwgaXNTdGF0aWMgPSBmYWxzZSwgdGVzdCwgdGVzdFBvcywgbmR4SW50bHpyLCBwb3MgPSAwO1xyXG4gICAgICAgICAgICAgICAgZnVuY3Rpb24gc2V0RW50cnkoZW50cnkpIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoZW50cnkgPT09IHVuZGVmaW5lZCkgZW50cnkgPSBcIlwiO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICghaXNTdGF0aWMgJiYgKHRlc3QuZm4gPT09IG51bGwgfHwgdGVzdFBvcy5pbnB1dCA9PT0gdW5kZWZpbmVkKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpc1N0YXRpYyA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG1hc2tUZW1wbGF0ZS5wdXNoKFwiPHNwYW4gY2xhc3M9J2ltLXN0YXRpYyc+XCIgKyBlbnRyeSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChpc1N0YXRpYyAmJiAodGVzdC5mbiAhPT0gbnVsbCAmJiB0ZXN0UG9zLmlucHV0ICE9PSB1bmRlZmluZWQgfHwgdGVzdC5kZWYgPT09IFwiXCIpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlzU3RhdGljID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBtdGwgPSBtYXNrVGVtcGxhdGUubGVuZ3RoO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBtYXNrVGVtcGxhdGVbbXRsIC0gMV0gPSBtYXNrVGVtcGxhdGVbbXRsIC0gMV0gKyBcIjwvc3Bhbj5cIjtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbWFza1RlbXBsYXRlLnB1c2goZW50cnkpO1xyXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSBtYXNrVGVtcGxhdGUucHVzaChlbnRyeSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBmdW5jdGlvbiBzZXRDYXJldCgpIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoZG9jdW1lbnQuYWN0aXZlRWxlbWVudCA9PT0gaW5wdXQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbWFza1RlbXBsYXRlLnNwbGljZShjYXJldFBvcy5iZWdpbiwgMCwgY2FyZXRQb3MuYmVnaW4gPT09IGNhcmV0UG9zLmVuZCB8fCBjYXJldFBvcy5lbmQgPiBnZXRNYXNrU2V0KCkubWFza0xlbmd0aCA/ICc8bWFyayBjbGFzcz1cImltLWNhcmV0XCIgc3R5bGU9XCJib3JkZXItcmlnaHQtd2lkdGg6IDFweDtib3JkZXItcmlnaHQtc3R5bGU6IHNvbGlkO1wiPicgOiAnPG1hcmsgY2xhc3M9XCJpbS1jYXJldC1zZWxlY3RcIj4nKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbWFza1RlbXBsYXRlLnNwbGljZShjYXJldFBvcy5lbmQgKyAxLCAwLCBcIjwvbWFyaz5cIik7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgaWYgKGNvbG9yTWFzayAhPT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIGJ1ZmZlciA9IGdldEJ1ZmZlcigpO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChjYXJldFBvcyA9PT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhcmV0UG9zID0gY2FyZXQoaW5wdXQpO1xyXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoY2FyZXRQb3MuYmVnaW4gPT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjYXJldFBvcyA9IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJlZ2luOiBjYXJldFBvcyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVuZDogY2FyZXRQb3NcclxuICAgICAgICAgICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGNsZWFyICE9PSB0cnVlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBsdnAgPSBnZXRMYXN0VmFsaWRQb3NpdGlvbigpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBkbyB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoZ2V0TWFza1NldCgpLnZhbGlkUG9zaXRpb25zW3Bvc10pIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0ZXN0UG9zID0gZ2V0TWFza1NldCgpLnZhbGlkUG9zaXRpb25zW3Bvc107XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGVzdCA9IHRlc3RQb3MubWF0Y2g7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbmR4SW50bHpyID0gdGVzdFBvcy5sb2NhdG9yLnNsaWNlKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2V0RW50cnkoYnVmZmVyW3Bvc10pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0ZXN0UG9zID0gZ2V0VGVzdFRlbXBsYXRlKHBvcywgbmR4SW50bHpyLCBwb3MgLSAxKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0ZXN0ID0gdGVzdFBvcy5tYXRjaDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuZHhJbnRsenIgPSB0ZXN0UG9zLmxvY2F0b3Iuc2xpY2UoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAob3B0cy5qaXRNYXNraW5nID09PSBmYWxzZSB8fCBwb3MgPCBsdnAgfHwgdHlwZW9mIG9wdHMuaml0TWFza2luZyA9PT0gXCJudW1iZXJcIiAmJiBpc0Zpbml0ZShvcHRzLmppdE1hc2tpbmcpICYmIG9wdHMuaml0TWFza2luZyA+IHBvcykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZXRFbnRyeShnZXRQbGFjZWhvbGRlcihwb3MsIHRlc3QpKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaXNTdGF0aWMgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBvcysrO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9IHdoaWxlICgobWF4TGVuZ3RoID09PSB1bmRlZmluZWQgfHwgcG9zIDwgbWF4TGVuZ3RoKSAmJiAodGVzdC5mbiAhPT0gbnVsbCB8fCB0ZXN0LmRlZiAhPT0gXCJcIikgfHwgbHZwID4gcG9zIHx8IGlzU3RhdGljKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGlzU3RhdGljKSBzZXRFbnRyeSgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBzZXRDYXJldCgpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB2YXIgdGVtcGxhdGUgPSBjb2xvck1hc2suZ2V0RWxlbWVudHNCeVRhZ05hbWUoXCJkaXZcIilbMF07XHJcbiAgICAgICAgICAgICAgICAgICAgdGVtcGxhdGUuaW5uZXJIVE1MID0gbWFza1RlbXBsYXRlLmpvaW4oXCJcIik7XHJcbiAgICAgICAgICAgICAgICAgICAgaW5wdXQuaW5wdXRtYXNrLnBvc2l0aW9uQ29sb3JNYXNrKGlucHV0LCB0ZW1wbGF0ZSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZnVuY3Rpb24gbWFzayhlbGVtKSB7XHJcbiAgICAgICAgICAgICAgICBmdW5jdGlvbiBpc0VsZW1lbnRUeXBlU3VwcG9ydGVkKGlucHV0LCBvcHRzKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgZnVuY3Rpb24gcGF0Y2hWYWx1ZVByb3BlcnR5KG5wdCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgdmFsdWVHZXQ7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciB2YWx1ZVNldDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZnVuY3Rpb24gcGF0Y2hWYWxob29rKHR5cGUpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICgkLnZhbEhvb2tzICYmICgkLnZhbEhvb2tzW3R5cGVdID09PSB1bmRlZmluZWQgfHwgJC52YWxIb29rc1t0eXBlXS5pbnB1dG1hc2twYXRjaCAhPT0gdHJ1ZSkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgdmFsaG9va0dldCA9ICQudmFsSG9va3NbdHlwZV0gJiYgJC52YWxIb29rc1t0eXBlXS5nZXQgPyAkLnZhbEhvb2tzW3R5cGVdLmdldCA6IGZ1bmN0aW9uKGVsZW0pIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGVsZW0udmFsdWU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgdmFsaG9va1NldCA9ICQudmFsSG9va3NbdHlwZV0gJiYgJC52YWxIb29rc1t0eXBlXS5zZXQgPyAkLnZhbEhvb2tzW3R5cGVdLnNldCA6IGZ1bmN0aW9uKGVsZW0sIHZhbHVlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsZW0udmFsdWUgPSB2YWx1ZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGVsZW07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkLnZhbEhvb2tzW3R5cGVdID0ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBnZXQ6IGZ1bmN0aW9uIGdldChlbGVtKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoZWxlbS5pbnB1dG1hc2spIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoZWxlbS5pbnB1dG1hc2sub3B0cy5hdXRvVW5tYXNrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBlbGVtLmlucHV0bWFzay51bm1hc2tlZHZhbHVlKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHJlc3VsdCA9IHZhbGhvb2tHZXQoZWxlbSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBnZXRMYXN0VmFsaWRQb3NpdGlvbih1bmRlZmluZWQsIHVuZGVmaW5lZCwgZWxlbS5pbnB1dG1hc2subWFza3NldC52YWxpZFBvc2l0aW9ucykgIT09IC0xIHx8IG9wdHMubnVsbGFibGUgIT09IHRydWUgPyByZXN1bHQgOiBcIlwiO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSByZXR1cm4gdmFsaG9va0dldChlbGVtKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2V0OiBmdW5jdGlvbiBzZXQoZWxlbSwgdmFsdWUpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciAkZWxlbSA9ICQoZWxlbSksIHJlc3VsdDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlc3VsdCA9IHZhbGhvb2tTZXQoZWxlbSwgdmFsdWUpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGVsZW0uaW5wdXRtYXNrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJGVsZW0udHJpZ2dlcihcInNldHZhbHVlXCIsIFsgdmFsdWUgXSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gcmVzdWx0O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbnB1dG1hc2twYXRjaDogdHJ1ZVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgZnVuY3Rpb24gZ2V0dGVyKCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMuaW5wdXRtYXNrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuaW5wdXRtYXNrLm9wdHMuYXV0b1VubWFzayA/IHRoaXMuaW5wdXRtYXNrLnVubWFza2VkdmFsdWUoKSA6IGdldExhc3RWYWxpZFBvc2l0aW9uKCkgIT09IC0xIHx8IG9wdHMubnVsbGFibGUgIT09IHRydWUgPyBkb2N1bWVudC5hY3RpdmVFbGVtZW50ID09PSB0aGlzICYmIG9wdHMuY2xlYXJNYXNrT25Mb3N0Rm9jdXMgPyAoaXNSVEwgPyBjbGVhck9wdGlvbmFsVGFpbChnZXRCdWZmZXIoKS5zbGljZSgpKS5yZXZlcnNlKCkgOiBjbGVhck9wdGlvbmFsVGFpbChnZXRCdWZmZXIoKS5zbGljZSgpKSkuam9pbihcIlwiKSA6IHZhbHVlR2V0LmNhbGwodGhpcykgOiBcIlwiO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHJldHVybiB2YWx1ZUdldC5jYWxsKHRoaXMpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGZ1bmN0aW9uIHNldHRlcih2YWx1ZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWVTZXQuY2FsbCh0aGlzLCB2YWx1ZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5pbnB1dG1hc2spIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkKHRoaXMpLnRyaWdnZXIoXCJzZXR2YWx1ZVwiLCBbIHZhbHVlIF0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGZ1bmN0aW9uIGluc3RhbGxOYXRpdmVWYWx1ZVNldEZhbGxiYWNrKG5wdCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgRXZlbnRSdWxlci5vbihucHQsIFwibW91c2VlbnRlclwiLCBmdW5jdGlvbihldmVudCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciAkaW5wdXQgPSAkKHRoaXMpLCBpbnB1dCA9IHRoaXMsIHZhbHVlID0gaW5wdXQuaW5wdXRtYXNrLl92YWx1ZUdldCgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh2YWx1ZSAhPT0gZ2V0QnVmZmVyKCkuam9pbihcIlwiKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkaW5wdXQudHJpZ2dlcihcInNldHZhbHVlXCIpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghbnB0LmlucHV0bWFzay5fX3ZhbHVlR2V0KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAob3B0cy5ub1ZhbHVlUGF0Y2hpbmcgIT09IHRydWUpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodHlwZW9mIE9iamVjdC5nZXRQcm90b3R5cGVPZiAhPT0gXCJmdW5jdGlvblwiKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBPYmplY3QuZ2V0UHJvdG90eXBlT2YgPSBfdHlwZW9mKFwidGVzdFwiLl9fcHJvdG9fXykgPT09IFwib2JqZWN0XCIgPyBmdW5jdGlvbihvYmplY3QpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gb2JqZWN0Ll9fcHJvdG9fXztcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gOiBmdW5jdGlvbihvYmplY3QpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gb2JqZWN0LmNvbnN0cnVjdG9yLnByb3RvdHlwZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHZhbHVlUHJvcGVydHkgPSBPYmplY3QuZ2V0UHJvdG90eXBlT2YgPyBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKE9iamVjdC5nZXRQcm90b3R5cGVPZihucHQpLCBcInZhbHVlXCIpIDogdW5kZWZpbmVkO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodmFsdWVQcm9wZXJ0eSAmJiB2YWx1ZVByb3BlcnR5LmdldCAmJiB2YWx1ZVByb3BlcnR5LnNldCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWVHZXQgPSB2YWx1ZVByb3BlcnR5LmdldDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlU2V0ID0gdmFsdWVQcm9wZXJ0eS5zZXQ7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkobnB0LCBcInZhbHVlXCIsIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBnZXQ6IGdldHRlcixcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZXQ6IHNldHRlcixcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25maWd1cmFibGU6IHRydWVcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKG5wdC50YWdOYW1lICE9PSBcIklOUFVUXCIpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlR2V0ID0gZnVuY3Rpb24gdmFsdWVHZXQoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMudGV4dENvbnRlbnQ7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWVTZXQgPSBmdW5jdGlvbiB2YWx1ZVNldCh2YWx1ZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMudGV4dENvbnRlbnQgPSB2YWx1ZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkobnB0LCBcInZhbHVlXCIsIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBnZXQ6IGdldHRlcixcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZXQ6IHNldHRlcixcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25maWd1cmFibGU6IHRydWVcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChkb2N1bWVudC5fX2xvb2t1cEdldHRlcl9fICYmIG5wdC5fX2xvb2t1cEdldHRlcl9fKFwidmFsdWVcIikpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWVHZXQgPSBucHQuX19sb29rdXBHZXR0ZXJfXyhcInZhbHVlXCIpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZVNldCA9IG5wdC5fX2xvb2t1cFNldHRlcl9fKFwidmFsdWVcIik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5wdC5fX2RlZmluZUdldHRlcl9fKFwidmFsdWVcIiwgZ2V0dGVyKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbnB0Ll9fZGVmaW5lU2V0dGVyX18oXCJ2YWx1ZVwiLCBzZXR0ZXIpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBucHQuaW5wdXRtYXNrLl9fdmFsdWVHZXQgPSB2YWx1ZUdldDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBucHQuaW5wdXRtYXNrLl9fdmFsdWVTZXQgPSB2YWx1ZVNldDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5wdC5pbnB1dG1hc2suX3ZhbHVlR2V0ID0gZnVuY3Rpb24ob3ZlcnJ1bGVSVEwpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gaXNSVEwgJiYgb3ZlcnJ1bGVSVEwgIT09IHRydWUgPyB2YWx1ZUdldC5jYWxsKHRoaXMuZWwpLnNwbGl0KFwiXCIpLnJldmVyc2UoKS5qb2luKFwiXCIpIDogdmFsdWVHZXQuY2FsbCh0aGlzLmVsKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBucHQuaW5wdXRtYXNrLl92YWx1ZVNldCA9IGZ1bmN0aW9uKHZhbHVlLCBvdmVycnVsZVJUTCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlU2V0LmNhbGwodGhpcy5lbCwgdmFsdWUgPT09IG51bGwgfHwgdmFsdWUgPT09IHVuZGVmaW5lZCA/IFwiXCIgOiBvdmVycnVsZVJUTCAhPT0gdHJ1ZSAmJiBpc1JUTCA/IHZhbHVlLnNwbGl0KFwiXCIpLnJldmVyc2UoKS5qb2luKFwiXCIpIDogdmFsdWUpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh2YWx1ZUdldCA9PT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWVHZXQgPSBmdW5jdGlvbiB2YWx1ZUdldCgpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMudmFsdWU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZVNldCA9IGZ1bmN0aW9uIHZhbHVlU2V0KHZhbHVlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMudmFsdWUgPSB2YWx1ZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBhdGNoVmFsaG9vayhucHQudHlwZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaW5zdGFsbE5hdGl2ZVZhbHVlU2V0RmFsbGJhY2sobnB0KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB2YXIgZWxlbWVudFR5cGUgPSBpbnB1dC5nZXRBdHRyaWJ1dGUoXCJ0eXBlXCIpO1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBpc1N1cHBvcnRlZCA9IGlucHV0LnRhZ05hbWUgPT09IFwiSU5QVVRcIiAmJiAkLmluQXJyYXkoZWxlbWVudFR5cGUsIG9wdHMuc3VwcG9ydHNJbnB1dFR5cGUpICE9PSAtMSB8fCBpbnB1dC5pc0NvbnRlbnRFZGl0YWJsZSB8fCBpbnB1dC50YWdOYW1lID09PSBcIlRFWFRBUkVBXCI7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFpc1N1cHBvcnRlZCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoaW5wdXQudGFnTmFtZSA9PT0gXCJJTlBVVFwiKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgZWwgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiaW5wdXRcIik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbC5zZXRBdHRyaWJ1dGUoXCJ0eXBlXCIsIGVsZW1lbnRUeXBlKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlzU3VwcG9ydGVkID0gZWwudHlwZSA9PT0gXCJ0ZXh0XCI7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbCA9IG51bGw7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpc1N1cHBvcnRlZCA9IFwicGFydGlhbFwiO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBpZiAoaXNTdXBwb3J0ZWQgIT09IGZhbHNlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHBhdGNoVmFsdWVQcm9wZXJ0eShpbnB1dCk7XHJcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlucHV0LmlucHV0bWFzayA9IHVuZGVmaW5lZDtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gaXNTdXBwb3J0ZWQ7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBFdmVudFJ1bGVyLm9mZihlbGVtKTtcclxuICAgICAgICAgICAgICAgIHZhciBpc1N1cHBvcnRlZCA9IGlzRWxlbWVudFR5cGVTdXBwb3J0ZWQoZWxlbSwgb3B0cyk7XHJcbiAgICAgICAgICAgICAgICBpZiAoaXNTdXBwb3J0ZWQgIT09IGZhbHNlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgZWwgPSBlbGVtO1xyXG4gICAgICAgICAgICAgICAgICAgICRlbCA9ICQoZWwpO1xyXG4gICAgICAgICAgICAgICAgICAgIG9yaWdpbmFsUGxhY2Vob2xkZXIgPSBlbC5wbGFjZWhvbGRlcjtcclxuICAgICAgICAgICAgICAgICAgICBtYXhMZW5ndGggPSBlbCAhPT0gdW5kZWZpbmVkID8gZWwubWF4TGVuZ3RoIDogdW5kZWZpbmVkO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChtYXhMZW5ndGggPT09IC0xKSBtYXhMZW5ndGggPSB1bmRlZmluZWQ7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKG9wdHMuY29sb3JNYXNrID09PSB0cnVlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGluaXRpYWxpemVDb2xvck1hc2soZWwpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBpZiAobW9iaWxlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChcImlucHV0bW9kZVwiIGluIGVsKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbC5pbnB1dG1vZGUgPSBvcHRzLmlucHV0bW9kZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsLnNldEF0dHJpYnV0ZShcImlucHV0bW9kZVwiLCBvcHRzLmlucHV0bW9kZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG9wdHMuZGlzYWJsZVByZWRpY3RpdmVUZXh0ID09PSB0cnVlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoXCJhdXRvY29ycmVjdFwiIGluIGVsKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZWwuYXV0b2NvcnJlY3QgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG9wdHMuY29sb3JNYXNrICE9PSB0cnVlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGluaXRpYWxpemVDb2xvck1hc2soZWwpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbC50eXBlID0gXCJwYXNzd29yZFwiO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGlmIChpc1N1cHBvcnRlZCA9PT0gdHJ1ZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBlbC5zZXRBdHRyaWJ1dGUoXCJpbS1pbnNlcnRcIiwgb3B0cy5pbnNlcnRNb2RlKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgRXZlbnRSdWxlci5vbihlbCwgXCJzdWJtaXRcIiwgRXZlbnRIYW5kbGVycy5zdWJtaXRFdmVudCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIEV2ZW50UnVsZXIub24oZWwsIFwicmVzZXRcIiwgRXZlbnRIYW5kbGVycy5yZXNldEV2ZW50KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgRXZlbnRSdWxlci5vbihlbCwgXCJibHVyXCIsIEV2ZW50SGFuZGxlcnMuYmx1ckV2ZW50KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgRXZlbnRSdWxlci5vbihlbCwgXCJmb2N1c1wiLCBFdmVudEhhbmRsZXJzLmZvY3VzRXZlbnQpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAob3B0cy5jb2xvck1hc2sgIT09IHRydWUpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIEV2ZW50UnVsZXIub24oZWwsIFwiY2xpY2tcIiwgRXZlbnRIYW5kbGVycy5jbGlja0V2ZW50KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIEV2ZW50UnVsZXIub24oZWwsIFwibW91c2VsZWF2ZVwiLCBFdmVudEhhbmRsZXJzLm1vdXNlbGVhdmVFdmVudCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBFdmVudFJ1bGVyLm9uKGVsLCBcIm1vdXNlZW50ZXJcIiwgRXZlbnRIYW5kbGVycy5tb3VzZWVudGVyRXZlbnQpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIEV2ZW50UnVsZXIub24oZWwsIFwicGFzdGVcIiwgRXZlbnRIYW5kbGVycy5wYXN0ZUV2ZW50KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgRXZlbnRSdWxlci5vbihlbCwgXCJjdXRcIiwgRXZlbnRIYW5kbGVycy5jdXRFdmVudCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIEV2ZW50UnVsZXIub24oZWwsIFwiY29tcGxldGVcIiwgb3B0cy5vbmNvbXBsZXRlKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgRXZlbnRSdWxlci5vbihlbCwgXCJpbmNvbXBsZXRlXCIsIG9wdHMub25pbmNvbXBsZXRlKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgRXZlbnRSdWxlci5vbihlbCwgXCJjbGVhcmVkXCIsIG9wdHMub25jbGVhcmVkKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFtb2JpbGUgJiYgb3B0cy5pbnB1dEV2ZW50T25seSAhPT0gdHJ1ZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgRXZlbnRSdWxlci5vbihlbCwgXCJrZXlkb3duXCIsIEV2ZW50SGFuZGxlcnMua2V5ZG93bkV2ZW50KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIEV2ZW50UnVsZXIub24oZWwsIFwia2V5cHJlc3NcIiwgRXZlbnRIYW5kbGVycy5rZXlwcmVzc0V2ZW50KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsLnJlbW92ZUF0dHJpYnV0ZShcIm1heExlbmd0aFwiKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBFdmVudFJ1bGVyLm9uKGVsLCBcImlucHV0XCIsIEV2ZW50SGFuZGxlcnMuaW5wdXRGYWxsQmFja0V2ZW50KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgRXZlbnRSdWxlci5vbihlbCwgXCJiZWZvcmVpbnB1dFwiLCBFdmVudEhhbmRsZXJzLmJlZm9yZUlucHV0RXZlbnQpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBFdmVudFJ1bGVyLm9uKGVsLCBcInNldHZhbHVlXCIsIEV2ZW50SGFuZGxlcnMuc2V0VmFsdWVFdmVudCk7XHJcbiAgICAgICAgICAgICAgICAgICAgdW5kb1ZhbHVlID0gZ2V0QnVmZmVyVGVtcGxhdGUoKS5qb2luKFwiXCIpO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChlbC5pbnB1dG1hc2suX3ZhbHVlR2V0KHRydWUpICE9PSBcIlwiIHx8IG9wdHMuY2xlYXJNYXNrT25Mb3N0Rm9jdXMgPT09IGZhbHNlIHx8IGRvY3VtZW50LmFjdGl2ZUVsZW1lbnQgPT09IGVsKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBpbml0aWFsVmFsdWUgPSAkLmlzRnVuY3Rpb24ob3B0cy5vbkJlZm9yZU1hc2spID8gb3B0cy5vbkJlZm9yZU1hc2suY2FsbChpbnB1dG1hc2ssIGVsLmlucHV0bWFzay5fdmFsdWVHZXQodHJ1ZSksIG9wdHMpIHx8IGVsLmlucHV0bWFzay5fdmFsdWVHZXQodHJ1ZSkgOiBlbC5pbnB1dG1hc2suX3ZhbHVlR2V0KHRydWUpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoaW5pdGlhbFZhbHVlICE9PSBcIlwiKSBjaGVja1ZhbChlbCwgdHJ1ZSwgZmFsc2UsIGluaXRpYWxWYWx1ZS5zcGxpdChcIlwiKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBidWZmZXIgPSBnZXRCdWZmZXIoKS5zbGljZSgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB1bmRvVmFsdWUgPSBidWZmZXIuam9pbihcIlwiKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGlzQ29tcGxldGUoYnVmZmVyKSA9PT0gZmFsc2UpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChvcHRzLmNsZWFySW5jb21wbGV0ZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlc2V0TWFza1NldCgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChvcHRzLmNsZWFyTWFza09uTG9zdEZvY3VzICYmIGRvY3VtZW50LmFjdGl2ZUVsZW1lbnQgIT09IGVsKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoZ2V0TGFzdFZhbGlkUG9zaXRpb24oKSA9PT0gLTEpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBidWZmZXIgPSBbXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xlYXJPcHRpb25hbFRhaWwoYnVmZmVyKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAob3B0cy5jbGVhck1hc2tPbkxvc3RGb2N1cyA9PT0gZmFsc2UgfHwgb3B0cy5zaG93TWFza09uRm9jdXMgJiYgZG9jdW1lbnQuYWN0aXZlRWxlbWVudCA9PT0gZWwgfHwgZWwuaW5wdXRtYXNrLl92YWx1ZUdldCh0cnVlKSAhPT0gXCJcIikgd3JpdGVCdWZmZXIoZWwsIGJ1ZmZlcik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChkb2N1bWVudC5hY3RpdmVFbGVtZW50ID09PSBlbCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FyZXQoZWwsIHNlZWtOZXh0KGdldExhc3RWYWxpZFBvc2l0aW9uKCkpKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB2YXIgdmFsdWVCdWZmZXI7XHJcbiAgICAgICAgICAgIGlmIChhY3Rpb25PYmogIT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICAgICAgc3dpdGNoIChhY3Rpb25PYmouYWN0aW9uKSB7XHJcbiAgICAgICAgICAgICAgICAgIGNhc2UgXCJpc0NvbXBsZXRlXCI6XHJcbiAgICAgICAgICAgICAgICAgICAgZWwgPSBhY3Rpb25PYmouZWw7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGlzQ29tcGxldGUoZ2V0QnVmZmVyKCkpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgY2FzZSBcInVubWFza2VkdmFsdWVcIjpcclxuICAgICAgICAgICAgICAgICAgICBpZiAoZWwgPT09IHVuZGVmaW5lZCB8fCBhY3Rpb25PYmoudmFsdWUgIT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZUJ1ZmZlciA9IGFjdGlvbk9iai52YWx1ZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWVCdWZmZXIgPSAoJC5pc0Z1bmN0aW9uKG9wdHMub25CZWZvcmVNYXNrKSA/IG9wdHMub25CZWZvcmVNYXNrLmNhbGwoaW5wdXRtYXNrLCB2YWx1ZUJ1ZmZlciwgb3B0cykgfHwgdmFsdWVCdWZmZXIgOiB2YWx1ZUJ1ZmZlcikuc3BsaXQoXCJcIik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNoZWNrVmFsLmNhbGwodGhpcywgdW5kZWZpbmVkLCBmYWxzZSwgZmFsc2UsIHZhbHVlQnVmZmVyKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCQuaXNGdW5jdGlvbihvcHRzLm9uQmVmb3JlV3JpdGUpKSBvcHRzLm9uQmVmb3JlV3JpdGUuY2FsbChpbnB1dG1hc2ssIHVuZGVmaW5lZCwgZ2V0QnVmZmVyKCksIDAsIG9wdHMpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdW5tYXNrZWR2YWx1ZShlbCk7XHJcblxyXG4gICAgICAgICAgICAgICAgICBjYXNlIFwibWFza1wiOlxyXG4gICAgICAgICAgICAgICAgICAgIG1hc2soZWwpO1xyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG5cclxuICAgICAgICAgICAgICAgICAgY2FzZSBcImZvcm1hdFwiOlxyXG4gICAgICAgICAgICAgICAgICAgIHZhbHVlQnVmZmVyID0gKCQuaXNGdW5jdGlvbihvcHRzLm9uQmVmb3JlTWFzaykgPyBvcHRzLm9uQmVmb3JlTWFzay5jYWxsKGlucHV0bWFzaywgYWN0aW9uT2JqLnZhbHVlLCBvcHRzKSB8fCBhY3Rpb25PYmoudmFsdWUgOiBhY3Rpb25PYmoudmFsdWUpLnNwbGl0KFwiXCIpO1xyXG4gICAgICAgICAgICAgICAgICAgIGNoZWNrVmFsLmNhbGwodGhpcywgdW5kZWZpbmVkLCB0cnVlLCBmYWxzZSwgdmFsdWVCdWZmZXIpO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChhY3Rpb25PYmoubWV0YWRhdGEpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlOiBpc1JUTCA/IGdldEJ1ZmZlcigpLnNsaWNlKCkucmV2ZXJzZSgpLmpvaW4oXCJcIikgOiBnZXRCdWZmZXIoKS5qb2luKFwiXCIpLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbWV0YWRhdGE6IG1hc2tTY29wZS5jYWxsKHRoaXMsIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhY3Rpb246IFwiZ2V0bWV0YWRhdGFcIlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSwgbWFza3NldCwgb3B0cylcclxuICAgICAgICAgICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGlzUlRMID8gZ2V0QnVmZmVyKCkuc2xpY2UoKS5yZXZlcnNlKCkuam9pbihcIlwiKSA6IGdldEJ1ZmZlcigpLmpvaW4oXCJcIik7XHJcblxyXG4gICAgICAgICAgICAgICAgICBjYXNlIFwiaXNWYWxpZFwiOlxyXG4gICAgICAgICAgICAgICAgICAgIGlmIChhY3Rpb25PYmoudmFsdWUpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWVCdWZmZXIgPSBhY3Rpb25PYmoudmFsdWUuc3BsaXQoXCJcIik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNoZWNrVmFsLmNhbGwodGhpcywgdW5kZWZpbmVkLCB0cnVlLCB0cnVlLCB2YWx1ZUJ1ZmZlcik7XHJcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYWN0aW9uT2JqLnZhbHVlID0gZ2V0QnVmZmVyKCkuam9pbihcIlwiKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIGJ1ZmZlciA9IGdldEJ1ZmZlcigpO1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBybCA9IGRldGVybWluZUxhc3RSZXF1aXJlZFBvc2l0aW9uKCksIGxtaWIgPSBidWZmZXIubGVuZ3RoIC0gMTtcclxuICAgICAgICAgICAgICAgICAgICBmb3IgKDtsbWliID4gcmw7IGxtaWItLSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoaXNNYXNrKGxtaWIpKSBicmVhaztcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgYnVmZmVyLnNwbGljZShybCwgbG1pYiArIDEgLSBybCk7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGlzQ29tcGxldGUoYnVmZmVyKSAmJiBhY3Rpb25PYmoudmFsdWUgPT09IGdldEJ1ZmZlcigpLmpvaW4oXCJcIik7XHJcblxyXG4gICAgICAgICAgICAgICAgICBjYXNlIFwiZ2V0ZW1wdHltYXNrXCI6XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGdldEJ1ZmZlclRlbXBsYXRlKCkuam9pbihcIlwiKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgIGNhc2UgXCJyZW1vdmVcIjpcclxuICAgICAgICAgICAgICAgICAgICBpZiAoZWwgJiYgZWwuaW5wdXRtYXNrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICQuZGF0YShlbCwgXCJfaW5wdXRtYXNrX29wdHNcIiwgbnVsbCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICRlbCA9ICQoZWwpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBlbC5pbnB1dG1hc2suX3ZhbHVlU2V0KG9wdHMuYXV0b1VubWFzayA/IHVubWFza2VkdmFsdWUoZWwpIDogZWwuaW5wdXRtYXNrLl92YWx1ZUdldCh0cnVlKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIEV2ZW50UnVsZXIub2ZmKGVsKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGVsLmlucHV0bWFzay5jb2xvck1hc2spIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbG9yTWFzayA9IGVsLmlucHV0bWFzay5jb2xvck1hc2s7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb2xvck1hc2sucmVtb3ZlQ2hpbGQoZWwpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29sb3JNYXNrLnBhcmVudE5vZGUuaW5zZXJ0QmVmb3JlKGVsLCBjb2xvck1hc2spO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29sb3JNYXNrLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoY29sb3JNYXNrKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgdmFsdWVQcm9wZXJ0eTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IgJiYgT2JqZWN0LmdldFByb3RvdHlwZU9mKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZVByb3BlcnR5ID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihPYmplY3QuZ2V0UHJvdG90eXBlT2YoZWwpLCBcInZhbHVlXCIpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHZhbHVlUHJvcGVydHkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoZWwuaW5wdXRtYXNrLl9fdmFsdWVHZXQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KGVsLCBcInZhbHVlXCIsIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGdldDogZWwuaW5wdXRtYXNrLl9fdmFsdWVHZXQsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZXQ6IGVsLmlucHV0bWFzay5fX3ZhbHVlU2V0LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChkb2N1bWVudC5fX2xvb2t1cEdldHRlcl9fICYmIGVsLl9fbG9va3VwR2V0dGVyX18oXCJ2YWx1ZVwiKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGVsLmlucHV0bWFzay5fX3ZhbHVlR2V0KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZWwuX19kZWZpbmVHZXR0ZXJfXyhcInZhbHVlXCIsIGVsLmlucHV0bWFzay5fX3ZhbHVlR2V0KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbC5fX2RlZmluZVNldHRlcl9fKFwidmFsdWVcIiwgZWwuaW5wdXRtYXNrLl9fdmFsdWVTZXQpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGVsLmlucHV0bWFzayA9IHVuZGVmaW5lZDtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGVsO1xyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG5cclxuICAgICAgICAgICAgICAgICAgY2FzZSBcImdldG1ldGFkYXRhXCI6XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKCQuaXNBcnJheShtYXNrc2V0Lm1ldGFkYXRhKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgbWFza1RhcmdldCA9IGdldE1hc2tUZW1wbGF0ZSh0cnVlLCAwLCBmYWxzZSkuam9pbihcIlwiKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgJC5lYWNoKG1hc2tzZXQubWV0YWRhdGEsIGZ1bmN0aW9uKG5keCwgbXRkdCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG10ZHQubWFzayA9PT0gbWFza1RhcmdldCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1hc2tUYXJnZXQgPSBtdGR0O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBtYXNrVGFyZ2V0O1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gbWFza3NldC5tZXRhZGF0YTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gSW5wdXRtYXNrO1xyXG4gICAgfSk7XHJcbn0sIGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xyXG4gICAgXCJ1c2Ugc3RyaWN0XCI7XHJcbiAgICB2YXIgX19XRUJQQUNLX0FNRF9ERUZJTkVfRkFDVE9SWV9fLCBfX1dFQlBBQ0tfQU1EX0RFRklORV9BUlJBWV9fLCBfX1dFQlBBQ0tfQU1EX0RFRklORV9SRVNVTFRfXztcclxuICAgIHZhciBfdHlwZW9mID0gdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIHR5cGVvZiBTeW1ib2wuaXRlcmF0b3IgPT09IFwic3ltYm9sXCIgPyBmdW5jdGlvbihvYmopIHtcclxuICAgICAgICByZXR1cm4gdHlwZW9mIG9iajtcclxuICAgIH0gOiBmdW5jdGlvbihvYmopIHtcclxuICAgICAgICByZXR1cm4gb2JqICYmIHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiBvYmouY29uc3RydWN0b3IgPT09IFN5bWJvbCAmJiBvYmogIT09IFN5bWJvbC5wcm90b3R5cGUgPyBcInN5bWJvbFwiIDogdHlwZW9mIG9iajtcclxuICAgIH07XHJcbiAgICAoZnVuY3Rpb24oZmFjdG9yeSkge1xyXG4gICAgICAgIGlmICh0cnVlKSB7XHJcbiAgICAgICAgICAgICEoX19XRUJQQUNLX0FNRF9ERUZJTkVfQVJSQVlfXyA9IFsgX193ZWJwYWNrX3JlcXVpcmVfXyg0KSBdLCBfX1dFQlBBQ0tfQU1EX0RFRklORV9GQUNUT1JZX18gPSBmYWN0b3J5LCBcclxuICAgICAgICAgICAgX19XRUJQQUNLX0FNRF9ERUZJTkVfUkVTVUxUX18gPSB0eXBlb2YgX19XRUJQQUNLX0FNRF9ERUZJTkVfRkFDVE9SWV9fID09PSBcImZ1bmN0aW9uXCIgPyBfX1dFQlBBQ0tfQU1EX0RFRklORV9GQUNUT1JZX18uYXBwbHkoZXhwb3J0cywgX19XRUJQQUNLX0FNRF9ERUZJTkVfQVJSQVlfXykgOiBfX1dFQlBBQ0tfQU1EX0RFRklORV9GQUNUT1JZX18sIFxyXG4gICAgICAgICAgICBfX1dFQlBBQ0tfQU1EX0RFRklORV9SRVNVTFRfXyAhPT0gdW5kZWZpbmVkICYmIChtb2R1bGUuZXhwb3J0cyA9IF9fV0VCUEFDS19BTURfREVGSU5FX1JFU1VMVF9fKSk7XHJcbiAgICAgICAgfSBlbHNlIHt9XHJcbiAgICB9KShmdW5jdGlvbigkKSB7XHJcbiAgICAgICAgcmV0dXJuICQ7XHJcbiAgICB9KTtcclxufSwgZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzKSB7XHJcbiAgICBtb2R1bGUuZXhwb3J0cyA9IGpRdWVyeTtcclxufSwgZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XHJcbiAgICBcInVzZSBzdHJpY3RcIjtcclxuICAgIHZhciBfX1dFQlBBQ0tfQU1EX0RFRklORV9SRVNVTFRfXztcclxuICAgIHZhciBfdHlwZW9mID0gdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIHR5cGVvZiBTeW1ib2wuaXRlcmF0b3IgPT09IFwic3ltYm9sXCIgPyBmdW5jdGlvbihvYmopIHtcclxuICAgICAgICByZXR1cm4gdHlwZW9mIG9iajtcclxuICAgIH0gOiBmdW5jdGlvbihvYmopIHtcclxuICAgICAgICByZXR1cm4gb2JqICYmIHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiBvYmouY29uc3RydWN0b3IgPT09IFN5bWJvbCAmJiBvYmogIT09IFN5bWJvbC5wcm90b3R5cGUgPyBcInN5bWJvbFwiIDogdHlwZW9mIG9iajtcclxuICAgIH07XHJcbiAgICBpZiAodHJ1ZSkgIShfX1dFQlBBQ0tfQU1EX0RFRklORV9SRVNVTFRfXyA9IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgIHJldHVybiB0eXBlb2Ygd2luZG93ICE9PSBcInVuZGVmaW5lZFwiID8gd2luZG93IDogbmV3IChldmFsKFwicmVxdWlyZSgnanNkb20nKS5KU0RPTVwiKSkoXCJcIikud2luZG93O1xyXG4gICAgfS5jYWxsKGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18sIGV4cG9ydHMsIG1vZHVsZSksIF9fV0VCUEFDS19BTURfREVGSU5FX1JFU1VMVF9fICE9PSB1bmRlZmluZWQgJiYgKG1vZHVsZS5leHBvcnRzID0gX19XRUJQQUNLX0FNRF9ERUZJTkVfUkVTVUxUX18pKTsgZWxzZSB7fVxyXG59LCBmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcclxuICAgIFwidXNlIHN0cmljdFwiO1xyXG4gICAgdmFyIF9fV0VCUEFDS19BTURfREVGSU5FX0ZBQ1RPUllfXywgX19XRUJQQUNLX0FNRF9ERUZJTkVfQVJSQVlfXywgX19XRUJQQUNLX0FNRF9ERUZJTkVfUkVTVUxUX187XHJcbiAgICB2YXIgX3R5cGVvZiA9IHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiB0eXBlb2YgU3ltYm9sLml0ZXJhdG9yID09PSBcInN5bWJvbFwiID8gZnVuY3Rpb24ob2JqKSB7XHJcbiAgICAgICAgcmV0dXJuIHR5cGVvZiBvYmo7XHJcbiAgICB9IDogZnVuY3Rpb24ob2JqKSB7XHJcbiAgICAgICAgcmV0dXJuIG9iaiAmJiB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgb2JqLmNvbnN0cnVjdG9yID09PSBTeW1ib2wgJiYgb2JqICE9PSBTeW1ib2wucHJvdG90eXBlID8gXCJzeW1ib2xcIiA6IHR5cGVvZiBvYmo7XHJcbiAgICB9O1xyXG4gICAgKGZ1bmN0aW9uKGZhY3RvcnkpIHtcclxuICAgICAgICBpZiAodHJ1ZSkge1xyXG4gICAgICAgICAgICAhKF9fV0VCUEFDS19BTURfREVGSU5FX0FSUkFZX18gPSBbIF9fd2VicGFja19yZXF1aXJlX18oMikgXSwgX19XRUJQQUNLX0FNRF9ERUZJTkVfRkFDVE9SWV9fID0gZmFjdG9yeSwgXHJcbiAgICAgICAgICAgIF9fV0VCUEFDS19BTURfREVGSU5FX1JFU1VMVF9fID0gdHlwZW9mIF9fV0VCUEFDS19BTURfREVGSU5FX0ZBQ1RPUllfXyA9PT0gXCJmdW5jdGlvblwiID8gX19XRUJQQUNLX0FNRF9ERUZJTkVfRkFDVE9SWV9fLmFwcGx5KGV4cG9ydHMsIF9fV0VCUEFDS19BTURfREVGSU5FX0FSUkFZX18pIDogX19XRUJQQUNLX0FNRF9ERUZJTkVfRkFDVE9SWV9fLCBcclxuICAgICAgICAgICAgX19XRUJQQUNLX0FNRF9ERUZJTkVfUkVTVUxUX18gIT09IHVuZGVmaW5lZCAmJiAobW9kdWxlLmV4cG9ydHMgPSBfX1dFQlBBQ0tfQU1EX0RFRklORV9SRVNVTFRfXykpO1xyXG4gICAgICAgIH0gZWxzZSB7fVxyXG4gICAgfSkoZnVuY3Rpb24oSW5wdXRtYXNrKSB7XHJcbiAgICAgICAgdmFyICQgPSBJbnB1dG1hc2suZGVwZW5kZW5jeUxpYjtcclxuICAgICAgICB2YXIgZm9ybWF0Q29kZSA9IHtcclxuICAgICAgICAgICAgZDogWyBcIlsxLTldfFsxMl1bMC05XXwzWzAxXVwiLCBEYXRlLnByb3RvdHlwZS5zZXREYXRlLCBcImRheVwiLCBEYXRlLnByb3RvdHlwZS5nZXREYXRlIF0sXHJcbiAgICAgICAgICAgIGRkOiBbIFwiMFsxLTldfFsxMl1bMC05XXwzWzAxXVwiLCBEYXRlLnByb3RvdHlwZS5zZXREYXRlLCBcImRheVwiLCBmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBwYWQoRGF0ZS5wcm90b3R5cGUuZ2V0RGF0ZS5jYWxsKHRoaXMpLCAyKTtcclxuICAgICAgICAgICAgfSBdLFxyXG4gICAgICAgICAgICBkZGQ6IFsgXCJcIiBdLFxyXG4gICAgICAgICAgICBkZGRkOiBbIFwiXCIgXSxcclxuICAgICAgICAgICAgbTogWyBcIlsxLTldfDFbMDEyXVwiLCBEYXRlLnByb3RvdHlwZS5zZXRNb250aCwgXCJtb250aFwiLCBmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBEYXRlLnByb3RvdHlwZS5nZXRNb250aC5jYWxsKHRoaXMpICsgMTtcclxuICAgICAgICAgICAgfSBdLFxyXG4gICAgICAgICAgICBtbTogWyBcIjBbMS05XXwxWzAxMl1cIiwgRGF0ZS5wcm90b3R5cGUuc2V0TW9udGgsIFwibW9udGhcIiwgZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gcGFkKERhdGUucHJvdG90eXBlLmdldE1vbnRoLmNhbGwodGhpcykgKyAxLCAyKTtcclxuICAgICAgICAgICAgfSBdLFxyXG4gICAgICAgICAgICBtbW06IFsgXCJcIiBdLFxyXG4gICAgICAgICAgICBtbW1tOiBbIFwiXCIgXSxcclxuICAgICAgICAgICAgeXk6IFsgXCJbMC05XXsyfVwiLCBEYXRlLnByb3RvdHlwZS5zZXRGdWxsWWVhciwgXCJ5ZWFyXCIsIGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHBhZChEYXRlLnByb3RvdHlwZS5nZXRGdWxsWWVhci5jYWxsKHRoaXMpLCAyKTtcclxuICAgICAgICAgICAgfSBdLFxyXG4gICAgICAgICAgICB5eXl5OiBbIFwiWzAtOV17NH1cIiwgRGF0ZS5wcm90b3R5cGUuc2V0RnVsbFllYXIsIFwieWVhclwiLCBmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBwYWQoRGF0ZS5wcm90b3R5cGUuZ2V0RnVsbFllYXIuY2FsbCh0aGlzKSwgNCk7XHJcbiAgICAgICAgICAgIH0gXSxcclxuICAgICAgICAgICAgaDogWyBcIlsxLTldfDFbMC0yXVwiLCBEYXRlLnByb3RvdHlwZS5zZXRIb3VycywgXCJob3Vyc1wiLCBEYXRlLnByb3RvdHlwZS5nZXRIb3VycyBdLFxyXG4gICAgICAgICAgICBoaDogWyBcIjBbMS05XXwxWzAtMl1cIiwgRGF0ZS5wcm90b3R5cGUuc2V0SG91cnMsIFwiaG91cnNcIiwgZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gcGFkKERhdGUucHJvdG90eXBlLmdldEhvdXJzLmNhbGwodGhpcyksIDIpO1xyXG4gICAgICAgICAgICB9IF0sXHJcbiAgICAgICAgICAgIGhoaDogWyBcIlswLTldK1wiLCBEYXRlLnByb3RvdHlwZS5zZXRIb3VycywgXCJob3Vyc1wiLCBEYXRlLnByb3RvdHlwZS5nZXRIb3VycyBdLFxyXG4gICAgICAgICAgICBIOiBbIFwiMT9bMC05XXwyWzAtM11cIiwgRGF0ZS5wcm90b3R5cGUuc2V0SG91cnMsIFwiaG91cnNcIiwgRGF0ZS5wcm90b3R5cGUuZ2V0SG91cnMgXSxcclxuICAgICAgICAgICAgSEg6IFsgXCIwWzAtOV18MVswLTldfDJbMC0zXVwiLCBEYXRlLnByb3RvdHlwZS5zZXRIb3VycywgXCJob3Vyc1wiLCBmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBwYWQoRGF0ZS5wcm90b3R5cGUuZ2V0SG91cnMuY2FsbCh0aGlzKSwgMik7XHJcbiAgICAgICAgICAgIH0gXSxcclxuICAgICAgICAgICAgSEhIOiBbIFwiWzAtOV0rXCIsIERhdGUucHJvdG90eXBlLnNldEhvdXJzLCBcImhvdXJzXCIsIERhdGUucHJvdG90eXBlLmdldEhvdXJzIF0sXHJcbiAgICAgICAgICAgIE06IFsgXCJbMS01XT9bMC05XVwiLCBEYXRlLnByb3RvdHlwZS5zZXRNaW51dGVzLCBcIm1pbnV0ZXNcIiwgRGF0ZS5wcm90b3R5cGUuZ2V0TWludXRlcyBdLFxyXG4gICAgICAgICAgICBNTTogWyBcIjBbMC05XXwxWzAtOV18MlswLTldfDNbMC05XXw0WzAtOV18NVswLTldXCIsIERhdGUucHJvdG90eXBlLnNldE1pbnV0ZXMsIFwibWludXRlc1wiLCBmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBwYWQoRGF0ZS5wcm90b3R5cGUuZ2V0TWludXRlcy5jYWxsKHRoaXMpLCAyKTtcclxuICAgICAgICAgICAgfSBdLFxyXG4gICAgICAgICAgICBzczogWyBcIlswLTVdWzAtOV1cIiwgRGF0ZS5wcm90b3R5cGUuc2V0U2Vjb25kcywgXCJzZWNvbmRzXCIsIGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHBhZChEYXRlLnByb3RvdHlwZS5nZXRTZWNvbmRzLmNhbGwodGhpcyksIDIpO1xyXG4gICAgICAgICAgICB9IF0sXHJcbiAgICAgICAgICAgIGw6IFsgXCJbMC05XXszfVwiLCBEYXRlLnByb3RvdHlwZS5zZXRNaWxsaXNlY29uZHMsIFwibWlsbGlzZWNvbmRzXCIsIGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHBhZChEYXRlLnByb3RvdHlwZS5nZXRNaWxsaXNlY29uZHMuY2FsbCh0aGlzKSwgMyk7XHJcbiAgICAgICAgICAgIH0gXSxcclxuICAgICAgICAgICAgTDogWyBcIlswLTldezJ9XCIsIERhdGUucHJvdG90eXBlLnNldE1pbGxpc2Vjb25kcywgXCJtaWxsaXNlY29uZHNcIiwgZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gcGFkKERhdGUucHJvdG90eXBlLmdldE1pbGxpc2Vjb25kcy5jYWxsKHRoaXMpLCAyKTtcclxuICAgICAgICAgICAgfSBdLFxyXG4gICAgICAgICAgICB0OiBbIFwiW2FwXVwiIF0sXHJcbiAgICAgICAgICAgIHR0OiBbIFwiW2FwXW1cIiBdLFxyXG4gICAgICAgICAgICBUOiBbIFwiW0FQXVwiIF0sXHJcbiAgICAgICAgICAgIFRUOiBbIFwiW0FQXU1cIiBdLFxyXG4gICAgICAgICAgICBaOiBbIFwiXCIgXSxcclxuICAgICAgICAgICAgbzogWyBcIlwiIF0sXHJcbiAgICAgICAgICAgIFM6IFsgXCJcIiBdXHJcbiAgICAgICAgfSwgZm9ybWF0QWxpYXMgPSB7XHJcbiAgICAgICAgICAgIGlzb0RhdGU6IFwieXl5eS1tbS1kZFwiLFxyXG4gICAgICAgICAgICBpc29UaW1lOiBcIkhIOk1NOnNzXCIsXHJcbiAgICAgICAgICAgIGlzb0RhdGVUaW1lOiBcInl5eXktbW0tZGQnVCdISDpNTTpzc1wiLFxyXG4gICAgICAgICAgICBpc29VdGNEYXRlVGltZTogXCJVVEM6eXl5eS1tbS1kZCdUJ0hIOk1NOnNzJ1onXCJcclxuICAgICAgICB9O1xyXG4gICAgICAgIGZ1bmN0aW9uIGdldFRva2VuaXplcihvcHRzKSB7XHJcbiAgICAgICAgICAgIGlmICghb3B0cy50b2tlbml6ZXIpIHtcclxuICAgICAgICAgICAgICAgIHZhciB0b2tlbnMgPSBbXTtcclxuICAgICAgICAgICAgICAgIGZvciAodmFyIG5keCBpbiBmb3JtYXRDb2RlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRva2Vucy5pbmRleE9mKG5keFswXSkgPT09IC0xKSB0b2tlbnMucHVzaChuZHhbMF0pO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgb3B0cy50b2tlbml6ZXIgPSBcIihcIiArIHRva2Vucy5qb2luKFwiK3xcIikgKyBcIikrP3wuXCI7XHJcbiAgICAgICAgICAgICAgICBvcHRzLnRva2VuaXplciA9IG5ldyBSZWdFeHAob3B0cy50b2tlbml6ZXIsIFwiZ1wiKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICByZXR1cm4gb3B0cy50b2tlbml6ZXI7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGZ1bmN0aW9uIGlzVmFsaWREYXRlKGRhdGVQYXJ0cywgY3VycmVudFJlc3VsdCkge1xyXG4gICAgICAgICAgICByZXR1cm4gIWlzRmluaXRlKGRhdGVQYXJ0cy5yYXdkYXkpIHx8IGRhdGVQYXJ0cy5kYXkgPT0gXCIyOVwiICYmICFpc0Zpbml0ZShkYXRlUGFydHMucmF3eWVhcikgfHwgbmV3IERhdGUoZGF0ZVBhcnRzLmRhdGUuZ2V0RnVsbFllYXIoKSwgaXNGaW5pdGUoZGF0ZVBhcnRzLnJhd21vbnRoKSA/IGRhdGVQYXJ0cy5tb250aCA6IGRhdGVQYXJ0cy5kYXRlLmdldE1vbnRoKCkgKyAxLCAwKS5nZXREYXRlKCkgPj0gZGF0ZVBhcnRzLmRheSA/IGN1cnJlbnRSZXN1bHQgOiBmYWxzZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZnVuY3Rpb24gaXNEYXRlSW5SYW5nZShkYXRlUGFydHMsIG9wdHMpIHtcclxuICAgICAgICAgICAgdmFyIHJlc3VsdCA9IHRydWU7XHJcbiAgICAgICAgICAgIGlmIChvcHRzLm1pbikge1xyXG4gICAgICAgICAgICAgICAgaWYgKGRhdGVQYXJ0c1tcInJhd3llYXJcIl0pIHtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgcmF3WWVhciA9IGRhdGVQYXJ0c1tcInJhd3llYXJcIl0ucmVwbGFjZSgvW14wLTldL2csIFwiXCIpLCBtaW5ZZWFyID0gb3B0cy5taW4ueWVhci5zdWJzdHIoMCwgcmF3WWVhci5sZW5ndGgpO1xyXG4gICAgICAgICAgICAgICAgICAgIHJlc3VsdCA9IG1pblllYXIgPD0gcmF3WWVhcjtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGlmIChkYXRlUGFydHNbXCJ5ZWFyXCJdID09PSBkYXRlUGFydHNbXCJyYXd5ZWFyXCJdKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKG9wdHMubWluLmRhdGUuZ2V0VGltZSgpID09PSBvcHRzLm1pbi5kYXRlLmdldFRpbWUoKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXN1bHQgPSBvcHRzLm1pbi5kYXRlLmdldFRpbWUoKSA8PSBkYXRlUGFydHMuZGF0ZS5nZXRUaW1lKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmIChyZXN1bHQgJiYgb3B0cy5tYXggJiYgb3B0cy5tYXguZGF0ZS5nZXRUaW1lKCkgPT09IG9wdHMubWF4LmRhdGUuZ2V0VGltZSgpKSB7XHJcbiAgICAgICAgICAgICAgICByZXN1bHQgPSBvcHRzLm1heC5kYXRlLmdldFRpbWUoKSA+PSBkYXRlUGFydHMuZGF0ZS5nZXRUaW1lKCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmV0dXJuIHJlc3VsdDtcclxuICAgICAgICB9XHJcbiAgICAgICAgZnVuY3Rpb24gcGFyc2UoZm9ybWF0LCBkYXRlT2JqVmFsdWUsIG9wdHMsIHJhdykge1xyXG4gICAgICAgICAgICB2YXIgbWFzayA9IFwiXCIsIG1hdGNoO1xyXG4gICAgICAgICAgICB3aGlsZSAobWF0Y2ggPSBnZXRUb2tlbml6ZXIob3B0cykuZXhlYyhmb3JtYXQpKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoZGF0ZU9ialZhbHVlID09PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoZm9ybWF0Q29kZVttYXRjaFswXV0pIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbWFzayArPSBcIihcIiArIGZvcm1hdENvZGVbbWF0Y2hbMF1dWzBdICsgXCIpXCI7XHJcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgc3dpdGNoIChtYXRjaFswXSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgXCJbXCI6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtYXNrICs9IFwiKFwiO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgXCJdXCI6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtYXNrICs9IFwiKT9cIjtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICBkZWZhdWx0OlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbWFzayArPSBJbnB1dG1hc2suZXNjYXBlUmVnZXgobWF0Y2hbMF0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoZm9ybWF0Q29kZVttYXRjaFswXV0pIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHJhdyAhPT0gdHJ1ZSAmJiBmb3JtYXRDb2RlW21hdGNoWzBdXVszXSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGdldEZuID0gZm9ybWF0Q29kZVttYXRjaFswXV1bM107XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtYXNrICs9IGdldEZuLmNhbGwoZGF0ZU9ialZhbHVlLmRhdGUpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGZvcm1hdENvZGVbbWF0Y2hbMF1dWzJdKSBtYXNrICs9IGRhdGVPYmpWYWx1ZVtcInJhd1wiICsgZm9ybWF0Q29kZVttYXRjaFswXV1bMl1dOyBlbHNlIG1hc2sgKz0gbWF0Y2hbMF07XHJcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIG1hc2sgKz0gbWF0Y2hbMF07XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmV0dXJuIG1hc2s7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGZ1bmN0aW9uIHBhZCh2YWwsIGxlbikge1xyXG4gICAgICAgICAgICB2YWwgPSBTdHJpbmcodmFsKTtcclxuICAgICAgICAgICAgbGVuID0gbGVuIHx8IDI7XHJcbiAgICAgICAgICAgIHdoaWxlICh2YWwubGVuZ3RoIDwgbGVuKSB7XHJcbiAgICAgICAgICAgICAgICB2YWwgPSBcIjBcIiArIHZhbDtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICByZXR1cm4gdmFsO1xyXG4gICAgICAgIH1cclxuICAgICAgICBmdW5jdGlvbiBhbmFseXNlTWFzayhtYXNrU3RyaW5nLCBmb3JtYXQsIG9wdHMpIHtcclxuICAgICAgICAgICAgdmFyIGRhdGVPYmogPSB7XHJcbiAgICAgICAgICAgICAgICBkYXRlOiBuZXcgRGF0ZSgxLCAwLCAxKVxyXG4gICAgICAgICAgICB9LCB0YXJnZXRQcm9wLCBtYXNrID0gbWFza1N0cmluZywgbWF0Y2gsIGRhdGVPcGVyYXRpb24sIHRhcmdldFZhbGlkYXRvcjtcclxuICAgICAgICAgICAgZnVuY3Rpb24gZXh0ZW5kUHJvcGVydHkodmFsdWUpIHtcclxuICAgICAgICAgICAgICAgIHZhciBjb3JyZWN0ZWRWYWx1ZSA9IHZhbHVlLnJlcGxhY2UoL1teMC05XS9nLCBcIjBcIik7XHJcbiAgICAgICAgICAgICAgICBpZiAoY29ycmVjdGVkVmFsdWUgIT0gdmFsdWUpIHtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgZW50ZXJlZFBhcnQgPSB2YWx1ZS5yZXBsYWNlKC9bXjAtOV0vZywgXCJcIiksIG1pbiA9IChvcHRzLm1pbiAmJiBvcHRzLm1pblt0YXJnZXRQcm9wXSB8fCB2YWx1ZSkudG9TdHJpbmcoKSwgbWF4ID0gKG9wdHMubWF4ICYmIG9wdHMubWF4W3RhcmdldFByb3BdIHx8IHZhbHVlKS50b1N0cmluZygpO1xyXG4gICAgICAgICAgICAgICAgICAgIGNvcnJlY3RlZFZhbHVlID0gZW50ZXJlZFBhcnQgKyAoZW50ZXJlZFBhcnQgPCBtaW4uc2xpY2UoMCwgZW50ZXJlZFBhcnQubGVuZ3RoKSA/IG1pbi5zbGljZShlbnRlcmVkUGFydC5sZW5ndGgpIDogZW50ZXJlZFBhcnQgPiBtYXguc2xpY2UoMCwgZW50ZXJlZFBhcnQubGVuZ3RoKSA/IG1heC5zbGljZShlbnRlcmVkUGFydC5sZW5ndGgpIDogY29ycmVjdGVkVmFsdWUudG9TdHJpbmcoKS5zbGljZShlbnRlcmVkUGFydC5sZW5ndGgpKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIHJldHVybiBjb3JyZWN0ZWRWYWx1ZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBmdW5jdGlvbiBzZXRWYWx1ZShkYXRlT2JqLCB2YWx1ZSwgb3B0cykge1xyXG4gICAgICAgICAgICAgICAgZGF0ZU9ialt0YXJnZXRQcm9wXSA9IGV4dGVuZFByb3BlcnR5KHZhbHVlKTtcclxuICAgICAgICAgICAgICAgIGRhdGVPYmpbXCJyYXdcIiArIHRhcmdldFByb3BdID0gdmFsdWU7XHJcbiAgICAgICAgICAgICAgICBpZiAoZGF0ZU9wZXJhdGlvbiAhPT0gdW5kZWZpbmVkKSBkYXRlT3BlcmF0aW9uLmNhbGwoZGF0ZU9iai5kYXRlLCB0YXJnZXRQcm9wID09IFwibW9udGhcIiA/IHBhcnNlSW50KGRhdGVPYmpbdGFyZ2V0UHJvcF0pIC0gMSA6IGRhdGVPYmpbdGFyZ2V0UHJvcF0pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmICh0eXBlb2YgbWFzayA9PT0gXCJzdHJpbmdcIikge1xyXG4gICAgICAgICAgICAgICAgd2hpbGUgKG1hdGNoID0gZ2V0VG9rZW5pemVyKG9wdHMpLmV4ZWMoZm9ybWF0KSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciB2YWx1ZSA9IG1hc2suc2xpY2UoMCwgbWF0Y2hbMF0ubGVuZ3RoKTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoZm9ybWF0Q29kZS5oYXNPd25Qcm9wZXJ0eShtYXRjaFswXSkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGFyZ2V0VmFsaWRhdG9yID0gZm9ybWF0Q29kZVttYXRjaFswXV1bMF07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRhcmdldFByb3AgPSBmb3JtYXRDb2RlW21hdGNoWzBdXVsyXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZGF0ZU9wZXJhdGlvbiA9IGZvcm1hdENvZGVbbWF0Y2hbMF1dWzFdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBzZXRWYWx1ZShkYXRlT2JqLCB2YWx1ZSwgb3B0cyk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIG1hc2sgPSBtYXNrLnNsaWNlKHZhbHVlLmxlbmd0aCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gZGF0ZU9iajtcclxuICAgICAgICAgICAgfSBlbHNlIGlmIChtYXNrICYmICh0eXBlb2YgbWFzayA9PT0gXCJ1bmRlZmluZWRcIiA/IFwidW5kZWZpbmVkXCIgOiBfdHlwZW9mKG1hc2spKSA9PT0gXCJvYmplY3RcIiAmJiBtYXNrLmhhc093blByb3BlcnR5KFwiZGF0ZVwiKSkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIG1hc2s7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcclxuICAgICAgICB9XHJcbiAgICAgICAgSW5wdXRtYXNrLmV4dGVuZEFsaWFzZXMoe1xyXG4gICAgICAgICAgICBkYXRldGltZToge1xyXG4gICAgICAgICAgICAgICAgbWFzazogZnVuY3Rpb24gbWFzayhvcHRzKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgZm9ybWF0Q29kZS5TID0gb3B0cy5pMThuLm9yZGluYWxTdWZmaXguam9pbihcInxcIik7XHJcbiAgICAgICAgICAgICAgICAgICAgb3B0cy5pbnB1dEZvcm1hdCA9IGZvcm1hdEFsaWFzW29wdHMuaW5wdXRGb3JtYXRdIHx8IG9wdHMuaW5wdXRGb3JtYXQ7XHJcbiAgICAgICAgICAgICAgICAgICAgb3B0cy5kaXNwbGF5Rm9ybWF0ID0gZm9ybWF0QWxpYXNbb3B0cy5kaXNwbGF5Rm9ybWF0XSB8fCBvcHRzLmRpc3BsYXlGb3JtYXQgfHwgb3B0cy5pbnB1dEZvcm1hdDtcclxuICAgICAgICAgICAgICAgICAgICBvcHRzLm91dHB1dEZvcm1hdCA9IGZvcm1hdEFsaWFzW29wdHMub3V0cHV0Rm9ybWF0XSB8fCBvcHRzLm91dHB1dEZvcm1hdCB8fCBvcHRzLmlucHV0Rm9ybWF0O1xyXG4gICAgICAgICAgICAgICAgICAgIG9wdHMucGxhY2Vob2xkZXIgPSBvcHRzLnBsYWNlaG9sZGVyICE9PSBcIlwiID8gb3B0cy5wbGFjZWhvbGRlciA6IG9wdHMuaW5wdXRGb3JtYXQucmVwbGFjZSgvW1xcW1xcXV0vLCBcIlwiKTtcclxuICAgICAgICAgICAgICAgICAgICBvcHRzLnJlZ2V4ID0gcGFyc2Uob3B0cy5pbnB1dEZvcm1hdCwgdW5kZWZpbmVkLCBvcHRzKTtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gbnVsbDtcclxuICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICBwbGFjZWhvbGRlcjogXCJcIixcclxuICAgICAgICAgICAgICAgIGlucHV0Rm9ybWF0OiBcImlzb0RhdGVUaW1lXCIsXHJcbiAgICAgICAgICAgICAgICBkaXNwbGF5Rm9ybWF0OiB1bmRlZmluZWQsXHJcbiAgICAgICAgICAgICAgICBvdXRwdXRGb3JtYXQ6IHVuZGVmaW5lZCxcclxuICAgICAgICAgICAgICAgIG1pbjogbnVsbCxcclxuICAgICAgICAgICAgICAgIG1heDogbnVsbCxcclxuICAgICAgICAgICAgICAgIGkxOG46IHtcclxuICAgICAgICAgICAgICAgICAgICBkYXlOYW1lczogWyBcIk1vblwiLCBcIlR1ZVwiLCBcIldlZFwiLCBcIlRodVwiLCBcIkZyaVwiLCBcIlNhdFwiLCBcIlN1blwiLCBcIk1vbmRheVwiLCBcIlR1ZXNkYXlcIiwgXCJXZWRuZXNkYXlcIiwgXCJUaHVyc2RheVwiLCBcIkZyaWRheVwiLCBcIlNhdHVyZGF5XCIsIFwiU3VuZGF5XCIgXSxcclxuICAgICAgICAgICAgICAgICAgICBtb250aE5hbWVzOiBbIFwiSmFuXCIsIFwiRmViXCIsIFwiTWFyXCIsIFwiQXByXCIsIFwiTWF5XCIsIFwiSnVuXCIsIFwiSnVsXCIsIFwiQXVnXCIsIFwiU2VwXCIsIFwiT2N0XCIsIFwiTm92XCIsIFwiRGVjXCIsIFwiSmFudWFyeVwiLCBcIkZlYnJ1YXJ5XCIsIFwiTWFyY2hcIiwgXCJBcHJpbFwiLCBcIk1heVwiLCBcIkp1bmVcIiwgXCJKdWx5XCIsIFwiQXVndXN0XCIsIFwiU2VwdGVtYmVyXCIsIFwiT2N0b2JlclwiLCBcIk5vdmVtYmVyXCIsIFwiRGVjZW1iZXJcIiBdLFxyXG4gICAgICAgICAgICAgICAgICAgIG9yZGluYWxTdWZmaXg6IFsgXCJzdFwiLCBcIm5kXCIsIFwicmRcIiwgXCJ0aFwiIF1cclxuICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICBwb3N0VmFsaWRhdGlvbjogZnVuY3Rpb24gcG9zdFZhbGlkYXRpb24oYnVmZmVyLCBwb3MsIGN1cnJlbnRSZXN1bHQsIG9wdHMpIHtcclxuICAgICAgICAgICAgICAgICAgICBvcHRzLm1pbiA9IGFuYWx5c2VNYXNrKG9wdHMubWluLCBvcHRzLmlucHV0Rm9ybWF0LCBvcHRzKTtcclxuICAgICAgICAgICAgICAgICAgICBvcHRzLm1heCA9IGFuYWx5c2VNYXNrKG9wdHMubWF4LCBvcHRzLmlucHV0Rm9ybWF0LCBvcHRzKTtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgcmVzdWx0ID0gY3VycmVudFJlc3VsdCwgZGF0ZVBhcnRzID0gYW5hbHlzZU1hc2soYnVmZmVyLmpvaW4oXCJcIiksIG9wdHMuaW5wdXRGb3JtYXQsIG9wdHMpO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChyZXN1bHQgJiYgZGF0ZVBhcnRzLmRhdGUuZ2V0VGltZSgpID09PSBkYXRlUGFydHMuZGF0ZS5nZXRUaW1lKCkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmVzdWx0ID0gaXNWYWxpZERhdGUoZGF0ZVBhcnRzLCByZXN1bHQpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXN1bHQgPSByZXN1bHQgJiYgaXNEYXRlSW5SYW5nZShkYXRlUGFydHMsIG9wdHMpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBpZiAocG9zICYmIHJlc3VsdCAmJiBjdXJyZW50UmVzdWx0LnBvcyAhPT0gcG9zKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBidWZmZXI6IHBhcnNlKG9wdHMuaW5wdXRGb3JtYXQsIGRhdGVQYXJ0cywgb3B0cyksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZWZyZXNoRnJvbUJ1ZmZlcjoge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0YXJ0OiBwb3MsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZW5kOiBjdXJyZW50UmVzdWx0LnBvc1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gcmVzdWx0O1xyXG4gICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgIG9uS2V5RG93bjogZnVuY3Rpb24gb25LZXlEb3duKGUsIGJ1ZmZlciwgY2FyZXRQb3MsIG9wdHMpIHtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgaW5wdXQgPSB0aGlzO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChlLmN0cmxLZXkgJiYgZS5rZXlDb2RlID09PSBJbnB1dG1hc2sua2V5Q29kZS5SSUdIVCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgdG9kYXkgPSBuZXcgRGF0ZSgpLCBtYXRjaCwgZGF0ZSA9IFwiXCI7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHdoaWxlIChtYXRjaCA9IGdldFRva2VuaXplcihvcHRzKS5leGVjKG9wdHMuaW5wdXRGb3JtYXQpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAobWF0Y2hbMF0uY2hhckF0KDApID09PSBcImRcIikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGUgKz0gcGFkKHRvZGF5LmdldERhdGUoKSwgbWF0Y2hbMF0ubGVuZ3RoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAobWF0Y2hbMF0uY2hhckF0KDApID09PSBcIm1cIikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGUgKz0gcGFkKHRvZGF5LmdldE1vbnRoKCkgKyAxLCBtYXRjaFswXS5sZW5ndGgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChtYXRjaFswXSA9PT0gXCJ5eXl5XCIpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRlICs9IHRvZGF5LmdldEZ1bGxZZWFyKCkudG9TdHJpbmcoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAobWF0Y2hbMF0uY2hhckF0KDApID09PSBcInlcIikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGUgKz0gcGFkKHRvZGF5LmdldFllYXIoKSwgbWF0Y2hbMF0ubGVuZ3RoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpbnB1dC5pbnB1dG1hc2suX3ZhbHVlU2V0KGRhdGUpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAkKGlucHV0KS50cmlnZ2VyKFwic2V0dmFsdWVcIik7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgIG9uVW5NYXNrOiBmdW5jdGlvbiBvblVuTWFzayhtYXNrZWRWYWx1ZSwgdW5tYXNrZWRWYWx1ZSwgb3B0cykge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBwYXJzZShvcHRzLm91dHB1dEZvcm1hdCwgYW5hbHlzZU1hc2sobWFza2VkVmFsdWUsIG9wdHMuaW5wdXRGb3JtYXQsIG9wdHMpLCBvcHRzLCB0cnVlKTtcclxuICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICBjYXNpbmc6IGZ1bmN0aW9uIGNhc2luZyhlbGVtLCB0ZXN0LCBwb3MsIHZhbGlkUG9zaXRpb25zKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRlc3QubmF0aXZlRGVmLmluZGV4T2YoXCJbYXBdXCIpID09IDApIHJldHVybiBlbGVtLnRvTG93ZXJDYXNlKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRlc3QubmF0aXZlRGVmLmluZGV4T2YoXCJbQVBdXCIpID09IDApIHJldHVybiBlbGVtLnRvVXBwZXJDYXNlKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGVsZW07XHJcbiAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgaW5zZXJ0TW9kZTogZmFsc2UsXHJcbiAgICAgICAgICAgICAgICBzaGlmdFBvc2l0aW9uczogZmFsc2VcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIHJldHVybiBJbnB1dG1hc2s7XHJcbiAgICB9KTtcclxufSwgZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XHJcbiAgICBcInVzZSBzdHJpY3RcIjtcclxuICAgIHZhciBfX1dFQlBBQ0tfQU1EX0RFRklORV9GQUNUT1JZX18sIF9fV0VCUEFDS19BTURfREVGSU5FX0FSUkFZX18sIF9fV0VCUEFDS19BTURfREVGSU5FX1JFU1VMVF9fO1xyXG4gICAgdmFyIF90eXBlb2YgPSB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgdHlwZW9mIFN5bWJvbC5pdGVyYXRvciA9PT0gXCJzeW1ib2xcIiA/IGZ1bmN0aW9uKG9iaikge1xyXG4gICAgICAgIHJldHVybiB0eXBlb2Ygb2JqO1xyXG4gICAgfSA6IGZ1bmN0aW9uKG9iaikge1xyXG4gICAgICAgIHJldHVybiBvYmogJiYgdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIG9iai5jb25zdHJ1Y3RvciA9PT0gU3ltYm9sICYmIG9iaiAhPT0gU3ltYm9sLnByb3RvdHlwZSA/IFwic3ltYm9sXCIgOiB0eXBlb2Ygb2JqO1xyXG4gICAgfTtcclxuICAgIChmdW5jdGlvbihmYWN0b3J5KSB7XHJcbiAgICAgICAgaWYgKHRydWUpIHtcclxuICAgICAgICAgICAgIShfX1dFQlBBQ0tfQU1EX0RFRklORV9BUlJBWV9fID0gWyBfX3dlYnBhY2tfcmVxdWlyZV9fKDIpIF0sIF9fV0VCUEFDS19BTURfREVGSU5FX0ZBQ1RPUllfXyA9IGZhY3RvcnksIFxyXG4gICAgICAgICAgICBfX1dFQlBBQ0tfQU1EX0RFRklORV9SRVNVTFRfXyA9IHR5cGVvZiBfX1dFQlBBQ0tfQU1EX0RFRklORV9GQUNUT1JZX18gPT09IFwiZnVuY3Rpb25cIiA/IF9fV0VCUEFDS19BTURfREVGSU5FX0ZBQ1RPUllfXy5hcHBseShleHBvcnRzLCBfX1dFQlBBQ0tfQU1EX0RFRklORV9BUlJBWV9fKSA6IF9fV0VCUEFDS19BTURfREVGSU5FX0ZBQ1RPUllfXywgXHJcbiAgICAgICAgICAgIF9fV0VCUEFDS19BTURfREVGSU5FX1JFU1VMVF9fICE9PSB1bmRlZmluZWQgJiYgKG1vZHVsZS5leHBvcnRzID0gX19XRUJQQUNLX0FNRF9ERUZJTkVfUkVTVUxUX18pKTtcclxuICAgICAgICB9IGVsc2Uge31cclxuICAgIH0pKGZ1bmN0aW9uKElucHV0bWFzaykge1xyXG4gICAgICAgIHZhciAkID0gSW5wdXRtYXNrLmRlcGVuZGVuY3lMaWI7XHJcbiAgICAgICAgZnVuY3Rpb24gYXV0b0VzY2FwZSh0eHQsIG9wdHMpIHtcclxuICAgICAgICAgICAgdmFyIGVzY2FwZWRUeHQgPSBcIlwiO1xyXG4gICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHR4dC5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICAgICAgaWYgKElucHV0bWFzay5wcm90b3R5cGUuZGVmaW5pdGlvbnNbdHh0LmNoYXJBdChpKV0gfHwgb3B0cy5kZWZpbml0aW9uc1t0eHQuY2hhckF0KGkpXSB8fCBvcHRzLm9wdGlvbmFsbWFya2VyLnN0YXJ0ID09PSB0eHQuY2hhckF0KGkpIHx8IG9wdHMub3B0aW9uYWxtYXJrZXIuZW5kID09PSB0eHQuY2hhckF0KGkpIHx8IG9wdHMucXVhbnRpZmllcm1hcmtlci5zdGFydCA9PT0gdHh0LmNoYXJBdChpKSB8fCBvcHRzLnF1YW50aWZpZXJtYXJrZXIuZW5kID09PSB0eHQuY2hhckF0KGkpIHx8IG9wdHMuZ3JvdXBtYXJrZXIuc3RhcnQgPT09IHR4dC5jaGFyQXQoaSkgfHwgb3B0cy5ncm91cG1hcmtlci5lbmQgPT09IHR4dC5jaGFyQXQoaSkgfHwgb3B0cy5hbHRlcm5hdG9ybWFya2VyID09PSB0eHQuY2hhckF0KGkpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgZXNjYXBlZFR4dCArPSBcIlxcXFxcIiArIHR4dC5jaGFyQXQoaSk7XHJcbiAgICAgICAgICAgICAgICB9IGVsc2UgZXNjYXBlZFR4dCArPSB0eHQuY2hhckF0KGkpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJldHVybiBlc2NhcGVkVHh0O1xyXG4gICAgICAgIH1cclxuICAgICAgICBmdW5jdGlvbiBhbGlnbkRpZ2l0cyhidWZmZXIsIGRpZ2l0cywgb3B0cykge1xyXG4gICAgICAgICAgICBpZiAoZGlnaXRzID4gMCkge1xyXG4gICAgICAgICAgICAgICAgdmFyIHJhZGl4UG9zaXRpb24gPSAkLmluQXJyYXkob3B0cy5yYWRpeFBvaW50LCBidWZmZXIpO1xyXG4gICAgICAgICAgICAgICAgaWYgKHJhZGl4UG9zaXRpb24gPT09IC0xKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgYnVmZmVyLnB1c2gob3B0cy5yYWRpeFBvaW50KTtcclxuICAgICAgICAgICAgICAgICAgICByYWRpeFBvc2l0aW9uID0gYnVmZmVyLmxlbmd0aCAtIDE7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBpID0gMTsgaSA8PSBkaWdpdHM7IGkrKykge1xyXG4gICAgICAgICAgICAgICAgICAgIGJ1ZmZlcltyYWRpeFBvc2l0aW9uICsgaV0gPSBidWZmZXJbcmFkaXhQb3NpdGlvbiArIGldIHx8IFwiMFwiO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJldHVybiBidWZmZXI7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIElucHV0bWFzay5leHRlbmRBbGlhc2VzKHtcclxuICAgICAgICAgICAgbnVtZXJpYzoge1xyXG4gICAgICAgICAgICAgICAgbWFzazogZnVuY3Rpb24gbWFzayhvcHRzKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKG9wdHMucmVwZWF0ICE9PSAwICYmIGlzTmFOKG9wdHMuaW50ZWdlckRpZ2l0cykpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgb3B0cy5pbnRlZ2VyRGlnaXRzID0gb3B0cy5yZXBlYXQ7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIG9wdHMucmVwZWF0ID0gMDtcclxuICAgICAgICAgICAgICAgICAgICBpZiAob3B0cy5ncm91cFNlcGFyYXRvciA9PT0gb3B0cy5yYWRpeFBvaW50ICYmIG9wdHMuZGlnaXRzICYmIG9wdHMuZGlnaXRzICE9PSBcIjBcIikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAob3B0cy5yYWRpeFBvaW50ID09PSBcIi5cIikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgb3B0cy5ncm91cFNlcGFyYXRvciA9IFwiLFwiO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKG9wdHMucmFkaXhQb2ludCA9PT0gXCIsXCIpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9wdHMuZ3JvdXBTZXBhcmF0b3IgPSBcIi5cIjtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIG9wdHMuZ3JvdXBTZXBhcmF0b3IgPSBcIlwiO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBpZiAob3B0cy5ncm91cFNlcGFyYXRvciA9PT0gXCIgXCIpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgb3B0cy5za2lwT3B0aW9uYWxQYXJ0Q2hhcmFjdGVyID0gdW5kZWZpbmVkO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBvcHRzLmF1dG9Hcm91cCA9IG9wdHMuYXV0b0dyb3VwICYmIG9wdHMuZ3JvdXBTZXBhcmF0b3IgIT09IFwiXCI7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKG9wdHMuYXV0b0dyb3VwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0eXBlb2Ygb3B0cy5ncm91cFNpemUgPT0gXCJzdHJpbmdcIiAmJiBpc0Zpbml0ZShvcHRzLmdyb3VwU2l6ZSkpIG9wdHMuZ3JvdXBTaXplID0gcGFyc2VJbnQob3B0cy5ncm91cFNpemUpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoaXNGaW5pdGUob3B0cy5pbnRlZ2VyRGlnaXRzKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHNlcHMgPSBNYXRoLmZsb29yKG9wdHMuaW50ZWdlckRpZ2l0cyAvIG9wdHMuZ3JvdXBTaXplKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBtb2QgPSBvcHRzLmludGVnZXJEaWdpdHMgJSBvcHRzLmdyb3VwU2l6ZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9wdHMuaW50ZWdlckRpZ2l0cyA9IHBhcnNlSW50KG9wdHMuaW50ZWdlckRpZ2l0cykgKyAobW9kID09PSAwID8gc2VwcyAtIDEgOiBzZXBzKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChvcHRzLmludGVnZXJEaWdpdHMgPCAxKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb3B0cy5pbnRlZ2VyRGlnaXRzID0gXCIqXCI7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKG9wdHMucGxhY2Vob2xkZXIubGVuZ3RoID4gMSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBvcHRzLnBsYWNlaG9sZGVyID0gb3B0cy5wbGFjZWhvbGRlci5jaGFyQXQoMCk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGlmIChvcHRzLnBvc2l0aW9uQ2FyZXRPbkNsaWNrID09PSBcInJhZGl4Rm9jdXNcIiAmJiBvcHRzLnBsYWNlaG9sZGVyID09PSBcIlwiICYmIG9wdHMuaW50ZWdlck9wdGlvbmFsID09PSBmYWxzZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBvcHRzLnBvc2l0aW9uQ2FyZXRPbkNsaWNrID0gXCJsdnBcIjtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgb3B0cy5kZWZpbml0aW9uc1tcIjtcIl0gPSBvcHRzLmRlZmluaXRpb25zW1wiflwiXTtcclxuICAgICAgICAgICAgICAgICAgICBvcHRzLmRlZmluaXRpb25zW1wiO1wiXS5kZWZpbml0aW9uU3ltYm9sID0gXCJ+XCI7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKG9wdHMubnVtZXJpY0lucHV0ID09PSB0cnVlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG9wdHMucG9zaXRpb25DYXJldE9uQ2xpY2sgPSBvcHRzLnBvc2l0aW9uQ2FyZXRPbkNsaWNrID09PSBcInJhZGl4Rm9jdXNcIiA/IFwibHZwXCIgOiBvcHRzLnBvc2l0aW9uQ2FyZXRPbkNsaWNrO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBvcHRzLmRpZ2l0c09wdGlvbmFsID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChpc05hTihvcHRzLmRpZ2l0cykpIG9wdHMuZGlnaXRzID0gMjtcclxuICAgICAgICAgICAgICAgICAgICAgICAgb3B0cy5kZWNpbWFsUHJvdGVjdCA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB2YXIgbWFzayA9IFwiWytdXCI7XHJcbiAgICAgICAgICAgICAgICAgICAgbWFzayArPSBhdXRvRXNjYXBlKG9wdHMucHJlZml4LCBvcHRzKTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAob3B0cy5pbnRlZ2VyT3B0aW9uYWwgPT09IHRydWUpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbWFzayArPSBcIn57MSxcIiArIG9wdHMuaW50ZWdlckRpZ2l0cyArIFwifVwiO1xyXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSBtYXNrICs9IFwifntcIiArIG9wdHMuaW50ZWdlckRpZ2l0cyArIFwifVwiO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChvcHRzLmRpZ2l0cyAhPT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciByYWRpeERlZiA9IG9wdHMuZGVjaW1hbFByb3RlY3QgPyBcIjpcIiA6IG9wdHMucmFkaXhQb2ludDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGRxID0gb3B0cy5kaWdpdHMudG9TdHJpbmcoKS5zcGxpdChcIixcIik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChpc0Zpbml0ZShkcVswXSkgJiYgZHFbMV0gJiYgaXNGaW5pdGUoZHFbMV0pKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtYXNrICs9IHJhZGl4RGVmICsgXCI7e1wiICsgb3B0cy5kaWdpdHMgKyBcIn1cIjtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChpc05hTihvcHRzLmRpZ2l0cykgfHwgcGFyc2VJbnQob3B0cy5kaWdpdHMpID4gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG9wdHMuZGlnaXRzT3B0aW9uYWwpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtYXNrICs9IFwiW1wiICsgcmFkaXhEZWYgKyBcIjt7MSxcIiArIG9wdHMuZGlnaXRzICsgXCJ9XVwiO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIG1hc2sgKz0gcmFkaXhEZWYgKyBcIjt7XCIgKyBvcHRzLmRpZ2l0cyArIFwifVwiO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIG1hc2sgKz0gYXV0b0VzY2FwZShvcHRzLnN1ZmZpeCwgb3B0cyk7XHJcbiAgICAgICAgICAgICAgICAgICAgbWFzayArPSBcIlstXVwiO1xyXG4gICAgICAgICAgICAgICAgICAgIG9wdHMuZ3JlZWR5ID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG1hc2s7XHJcbiAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgcGxhY2Vob2xkZXI6IFwiXCIsXHJcbiAgICAgICAgICAgICAgICBncmVlZHk6IGZhbHNlLFxyXG4gICAgICAgICAgICAgICAgZGlnaXRzOiBcIipcIixcclxuICAgICAgICAgICAgICAgIGRpZ2l0c09wdGlvbmFsOiB0cnVlLFxyXG4gICAgICAgICAgICAgICAgZW5mb3JjZURpZ2l0c09uQmx1cjogZmFsc2UsXHJcbiAgICAgICAgICAgICAgICByYWRpeFBvaW50OiBcIi5cIixcclxuICAgICAgICAgICAgICAgIHBvc2l0aW9uQ2FyZXRPbkNsaWNrOiBcInJhZGl4Rm9jdXNcIixcclxuICAgICAgICAgICAgICAgIGdyb3VwU2l6ZTogMyxcclxuICAgICAgICAgICAgICAgIGdyb3VwU2VwYXJhdG9yOiBcIlwiLFxyXG4gICAgICAgICAgICAgICAgYXV0b0dyb3VwOiBmYWxzZSxcclxuICAgICAgICAgICAgICAgIGFsbG93TWludXM6IHRydWUsXHJcbiAgICAgICAgICAgICAgICBuZWdhdGlvblN5bWJvbDoge1xyXG4gICAgICAgICAgICAgICAgICAgIGZyb250OiBcIi1cIixcclxuICAgICAgICAgICAgICAgICAgICBiYWNrOiBcIlwiXHJcbiAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgaW50ZWdlckRpZ2l0czogXCIrXCIsXHJcbiAgICAgICAgICAgICAgICBpbnRlZ2VyT3B0aW9uYWw6IHRydWUsXHJcbiAgICAgICAgICAgICAgICBwcmVmaXg6IFwiXCIsXHJcbiAgICAgICAgICAgICAgICBzdWZmaXg6IFwiXCIsXHJcbiAgICAgICAgICAgICAgICByaWdodEFsaWduOiB0cnVlLFxyXG4gICAgICAgICAgICAgICAgZGVjaW1hbFByb3RlY3Q6IHRydWUsXHJcbiAgICAgICAgICAgICAgICBtaW46IG51bGwsXHJcbiAgICAgICAgICAgICAgICBtYXg6IG51bGwsXHJcbiAgICAgICAgICAgICAgICBzdGVwOiAxLFxyXG4gICAgICAgICAgICAgICAgaW5zZXJ0TW9kZTogdHJ1ZSxcclxuICAgICAgICAgICAgICAgIGF1dG9Vbm1hc2s6IGZhbHNlLFxyXG4gICAgICAgICAgICAgICAgdW5tYXNrQXNOdW1iZXI6IGZhbHNlLFxyXG4gICAgICAgICAgICAgICAgaW5wdXRUeXBlOiBcInRleHRcIixcclxuICAgICAgICAgICAgICAgIGlucHV0bW9kZTogXCJudW1lcmljXCIsXHJcbiAgICAgICAgICAgICAgICBwcmVWYWxpZGF0aW9uOiBmdW5jdGlvbiBwcmVWYWxpZGF0aW9uKGJ1ZmZlciwgcG9zLCBjLCBpc1NlbGVjdGlvbiwgb3B0cywgbWFza3NldCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChjID09PSBcIi1cIiB8fCBjID09PSBvcHRzLm5lZ2F0aW9uU3ltYm9sLmZyb250KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChvcHRzLmFsbG93TWludXMgIT09IHRydWUpIHJldHVybiBmYWxzZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgb3B0cy5pc05lZ2F0aXZlID0gb3B0cy5pc05lZ2F0aXZlID09PSB1bmRlZmluZWQgPyB0cnVlIDogIW9wdHMuaXNOZWdhdGl2ZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGJ1ZmZlci5qb2luKFwiXCIpID09PSBcIlwiKSByZXR1cm4gdHJ1ZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhcmV0OiBtYXNrc2V0LnZhbGlkUG9zaXRpb25zW3Bvc10gPyBwb3MgOiB1bmRlZmluZWQsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkb3Bvc3Q6IHRydWVcclxuICAgICAgICAgICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGlzU2VsZWN0aW9uID09PSBmYWxzZSAmJiBjID09PSBvcHRzLnJhZGl4UG9pbnQgJiYgb3B0cy5kaWdpdHMgIT09IHVuZGVmaW5lZCAmJiAoaXNOYU4ob3B0cy5kaWdpdHMpIHx8IHBhcnNlSW50KG9wdHMuZGlnaXRzKSA+IDApKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciByYWRpeFBvcyA9ICQuaW5BcnJheShvcHRzLnJhZGl4UG9pbnQsIGJ1ZmZlcik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChyYWRpeFBvcyAhPT0gLTEgJiYgbWFza3NldC52YWxpZFBvc2l0aW9uc1tyYWRpeFBvc10gIT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG9wdHMubnVtZXJpY0lucHV0ID09PSB0cnVlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHBvcyA9PT0gcmFkaXhQb3M7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhcmV0OiByYWRpeFBvcyArIDFcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgcG9zdFZhbGlkYXRpb246IGZ1bmN0aW9uIHBvc3RWYWxpZGF0aW9uKGJ1ZmZlciwgcG9zLCBjdXJyZW50UmVzdWx0LCBvcHRzKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgZnVuY3Rpb24gYnVpbGRQb3N0TWFzayhidWZmZXIsIG9wdHMpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHBvc3RNYXNrID0gXCJcIjtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcG9zdE1hc2sgKz0gXCIoXCIgKyBvcHRzLmdyb3VwU2VwYXJhdG9yICsgXCIqe1wiICsgb3B0cy5ncm91cFNpemUgKyBcIn0peyp9XCI7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChvcHRzLnJhZGl4UG9pbnQgIT09IFwiXCIpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciByYWRpeFNwbGl0ID0gYnVmZmVyLmpvaW4oXCJcIikuc3BsaXQob3B0cy5yYWRpeFBvaW50KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChyYWRpeFNwbGl0WzFdKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcG9zdE1hc2sgKz0gb3B0cy5yYWRpeFBvaW50ICsgXCIqe1wiICsgcmFkaXhTcGxpdFsxXS5tYXRjaCgvXlxcZCpcXD8/XFxkKi8pWzBdLmxlbmd0aCArIFwifVwiO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBwb3N0TWFzaztcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIHN1ZmZpeCA9IG9wdHMuc3VmZml4LnNwbGl0KFwiXCIpLCBwcmVmaXggPSBvcHRzLnByZWZpeC5zcGxpdChcIlwiKTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoY3VycmVudFJlc3VsdC5wb3MgPT09IHVuZGVmaW5lZCAmJiBjdXJyZW50UmVzdWx0LmNhcmV0ICE9PSB1bmRlZmluZWQgJiYgY3VycmVudFJlc3VsdC5kb3Bvc3QgIT09IHRydWUpIHJldHVybiBjdXJyZW50UmVzdWx0O1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBjYXJldFBvcyA9IGN1cnJlbnRSZXN1bHQuY2FyZXQgIT09IHVuZGVmaW5lZCA/IGN1cnJlbnRSZXN1bHQuY2FyZXQgOiBjdXJyZW50UmVzdWx0LnBvcztcclxuICAgICAgICAgICAgICAgICAgICB2YXIgbWFza2VkVmFsdWUgPSBidWZmZXIuc2xpY2UoKTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAob3B0cy5udW1lcmljSW5wdXQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY2FyZXRQb3MgPSBtYXNrZWRWYWx1ZS5sZW5ndGggLSBjYXJldFBvcyAtIDE7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG1hc2tlZFZhbHVlID0gbWFza2VkVmFsdWUucmV2ZXJzZSgpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB2YXIgY2hhckF0UG9zID0gbWFza2VkVmFsdWVbY2FyZXRQb3NdO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChjaGFyQXRQb3MgPT09IG9wdHMuZ3JvdXBTZXBhcmF0b3IpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY2FyZXRQb3MgKz0gMTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY2hhckF0UG9zID0gbWFza2VkVmFsdWVbY2FyZXRQb3NdO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBpZiAoY2FyZXRQb3MgPT09IG1hc2tlZFZhbHVlLmxlbmd0aCAtIG9wdHMuc3VmZml4Lmxlbmd0aCAtIDEgJiYgY2hhckF0UG9zID09PSBvcHRzLnJhZGl4UG9pbnQpIHJldHVybiBjdXJyZW50UmVzdWx0O1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChjaGFyQXRQb3MgIT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoY2hhckF0UG9zICE9PSBvcHRzLnJhZGl4UG9pbnQgJiYgY2hhckF0UG9zICE9PSBvcHRzLm5lZ2F0aW9uU3ltYm9sLmZyb250ICYmIGNoYXJBdFBvcyAhPT0gb3B0cy5uZWdhdGlvblN5bWJvbC5iYWNrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtYXNrZWRWYWx1ZVtjYXJldFBvc10gPSBcIj9cIjtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChvcHRzLnByZWZpeC5sZW5ndGggPiAwICYmIGNhcmV0UG9zID49IChvcHRzLmlzTmVnYXRpdmUgPT09IGZhbHNlID8gMSA6IDApICYmIGNhcmV0UG9zIDwgb3B0cy5wcmVmaXgubGVuZ3RoIC0gMSArIChvcHRzLmlzTmVnYXRpdmUgPT09IGZhbHNlID8gMSA6IDApKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcHJlZml4W2NhcmV0UG9zIC0gKG9wdHMuaXNOZWdhdGl2ZSA9PT0gZmFsc2UgPyAxIDogMCldID0gXCI/XCI7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKG9wdHMuc3VmZml4Lmxlbmd0aCA+IDAgJiYgY2FyZXRQb3MgPj0gbWFza2VkVmFsdWUubGVuZ3RoIC0gb3B0cy5zdWZmaXgubGVuZ3RoIC0gKG9wdHMuaXNOZWdhdGl2ZSA9PT0gZmFsc2UgPyAxIDogMCkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdWZmaXhbY2FyZXRQb3MgLSAobWFza2VkVmFsdWUubGVuZ3RoIC0gb3B0cy5zdWZmaXgubGVuZ3RoIC0gKG9wdHMuaXNOZWdhdGl2ZSA9PT0gZmFsc2UgPyAxIDogMCkpXSA9IFwiP1wiO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIHByZWZpeCA9IHByZWZpeC5qb2luKFwiXCIpO1xyXG4gICAgICAgICAgICAgICAgICAgIHN1ZmZpeCA9IHN1ZmZpeC5qb2luKFwiXCIpO1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBwcm9jZXNzVmFsdWUgPSBtYXNrZWRWYWx1ZS5qb2luKFwiXCIpLnJlcGxhY2UocHJlZml4LCBcIlwiKTtcclxuICAgICAgICAgICAgICAgICAgICBwcm9jZXNzVmFsdWUgPSBwcm9jZXNzVmFsdWUucmVwbGFjZShzdWZmaXgsIFwiXCIpO1xyXG4gICAgICAgICAgICAgICAgICAgIHByb2Nlc3NWYWx1ZSA9IHByb2Nlc3NWYWx1ZS5yZXBsYWNlKG5ldyBSZWdFeHAoSW5wdXRtYXNrLmVzY2FwZVJlZ2V4KG9wdHMuZ3JvdXBTZXBhcmF0b3IpLCBcImdcIiksIFwiXCIpO1xyXG4gICAgICAgICAgICAgICAgICAgIHByb2Nlc3NWYWx1ZSA9IHByb2Nlc3NWYWx1ZS5yZXBsYWNlKG5ldyBSZWdFeHAoXCJbLVwiICsgSW5wdXRtYXNrLmVzY2FwZVJlZ2V4KG9wdHMubmVnYXRpb25TeW1ib2wuZnJvbnQpICsgXCJdXCIsIFwiZ1wiKSwgXCJcIik7XHJcbiAgICAgICAgICAgICAgICAgICAgcHJvY2Vzc1ZhbHVlID0gcHJvY2Vzc1ZhbHVlLnJlcGxhY2UobmV3IFJlZ0V4cChJbnB1dG1hc2suZXNjYXBlUmVnZXgob3B0cy5uZWdhdGlvblN5bWJvbC5iYWNrKSArIFwiJFwiKSwgXCJcIik7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGlzTmFOKG9wdHMucGxhY2Vob2xkZXIpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHByb2Nlc3NWYWx1ZSA9IHByb2Nlc3NWYWx1ZS5yZXBsYWNlKG5ldyBSZWdFeHAoSW5wdXRtYXNrLmVzY2FwZVJlZ2V4KG9wdHMucGxhY2Vob2xkZXIpLCBcImdcIiksIFwiXCIpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBpZiAocHJvY2Vzc1ZhbHVlLmxlbmd0aCA+IDEgJiYgcHJvY2Vzc1ZhbHVlLmluZGV4T2Yob3B0cy5yYWRpeFBvaW50KSAhPT0gMSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoY2hhckF0UG9zID09PSBcIjBcIikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcHJvY2Vzc1ZhbHVlID0gcHJvY2Vzc1ZhbHVlLnJlcGxhY2UoL15cXD8vZywgXCJcIik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgcHJvY2Vzc1ZhbHVlID0gcHJvY2Vzc1ZhbHVlLnJlcGxhY2UoL14wL2csIFwiXCIpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBpZiAocHJvY2Vzc1ZhbHVlLmNoYXJBdCgwKSA9PT0gb3B0cy5yYWRpeFBvaW50ICYmIG9wdHMucmFkaXhQb2ludCAhPT0gXCJcIiAmJiBvcHRzLm51bWVyaWNJbnB1dCAhPT0gdHJ1ZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBwcm9jZXNzVmFsdWUgPSBcIjBcIiArIHByb2Nlc3NWYWx1ZTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHByb2Nlc3NWYWx1ZSAhPT0gXCJcIikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBwcm9jZXNzVmFsdWUgPSBwcm9jZXNzVmFsdWUuc3BsaXQoXCJcIik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICgoIW9wdHMuZGlnaXRzT3B0aW9uYWwgfHwgb3B0cy5lbmZvcmNlRGlnaXRzT25CbHVyICYmIGN1cnJlbnRSZXN1bHQuZXZlbnQgPT09IFwiYmx1clwiKSAmJiBpc0Zpbml0ZShvcHRzLmRpZ2l0cykpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciByYWRpeFBvc2l0aW9uID0gJC5pbkFycmF5KG9wdHMucmFkaXhQb2ludCwgcHJvY2Vzc1ZhbHVlKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBycGIgPSAkLmluQXJyYXkob3B0cy5yYWRpeFBvaW50LCBtYXNrZWRWYWx1ZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAocmFkaXhQb3NpdGlvbiA9PT0gLTEpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwcm9jZXNzVmFsdWUucHVzaChvcHRzLnJhZGl4UG9pbnQpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJhZGl4UG9zaXRpb24gPSBwcm9jZXNzVmFsdWUubGVuZ3RoIC0gMTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvciAodmFyIGkgPSAxOyBpIDw9IG9wdHMuZGlnaXRzOyBpKyspIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoKCFvcHRzLmRpZ2l0c09wdGlvbmFsIHx8IG9wdHMuZW5mb3JjZURpZ2l0c09uQmx1ciAmJiBjdXJyZW50UmVzdWx0LmV2ZW50ID09PSBcImJsdXJcIikgJiYgKHByb2Nlc3NWYWx1ZVtyYWRpeFBvc2l0aW9uICsgaV0gPT09IHVuZGVmaW5lZCB8fCBwcm9jZXNzVmFsdWVbcmFkaXhQb3NpdGlvbiArIGldID09PSBvcHRzLnBsYWNlaG9sZGVyLmNoYXJBdCgwKSkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcHJvY2Vzc1ZhbHVlW3JhZGl4UG9zaXRpb24gKyBpXSA9IGN1cnJlbnRSZXN1bHQucGxhY2Vob2xkZXIgfHwgb3B0cy5wbGFjZWhvbGRlci5jaGFyQXQoMCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChycGIgIT09IC0xICYmIG1hc2tlZFZhbHVlW3JwYiArIGldICE9PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcHJvY2Vzc1ZhbHVlW3JhZGl4UG9zaXRpb24gKyBpXSA9IHByb2Nlc3NWYWx1ZVtyYWRpeFBvc2l0aW9uICsgaV0gfHwgbWFza2VkVmFsdWVbcnBiICsgaV07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChvcHRzLmF1dG9Hcm91cCA9PT0gdHJ1ZSAmJiBvcHRzLmdyb3VwU2VwYXJhdG9yICE9PSBcIlwiICYmIChjaGFyQXRQb3MgIT09IG9wdHMucmFkaXhQb2ludCB8fCBjdXJyZW50UmVzdWx0LnBvcyAhPT0gdW5kZWZpbmVkIHx8IGN1cnJlbnRSZXN1bHQuZG9wb3N0KSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGFkZFJhZGl4ID0gcHJvY2Vzc1ZhbHVlW3Byb2Nlc3NWYWx1ZS5sZW5ndGggLSAxXSA9PT0gb3B0cy5yYWRpeFBvaW50ICYmIGN1cnJlbnRSZXN1bHQuYyA9PT0gb3B0cy5yYWRpeFBvaW50O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcHJvY2Vzc1ZhbHVlID0gSW5wdXRtYXNrKGJ1aWxkUG9zdE1hc2socHJvY2Vzc1ZhbHVlLCBvcHRzKSwge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG51bWVyaWNJbnB1dDogdHJ1ZSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBqaXRNYXNraW5nOiB0cnVlLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRlZmluaXRpb25zOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwiKlwiOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWxpZGF0b3I6IFwiWzAtOT9dXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXJkaW5hbGl0eTogMVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSkuZm9ybWF0KHByb2Nlc3NWYWx1ZS5qb2luKFwiXCIpKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChhZGRSYWRpeCkgcHJvY2Vzc1ZhbHVlICs9IG9wdHMucmFkaXhQb2ludDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChwcm9jZXNzVmFsdWUuY2hhckF0KDApID09PSBvcHRzLmdyb3VwU2VwYXJhdG9yKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcHJvY2Vzc1ZhbHVlLnN1YnN0cigxKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHByb2Nlc3NWYWx1ZSA9IHByb2Nlc3NWYWx1ZS5qb2luKFwiXCIpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBpZiAob3B0cy5pc05lZ2F0aXZlICYmIGN1cnJlbnRSZXN1bHQuZXZlbnQgPT09IFwiYmx1clwiKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG9wdHMuaXNOZWdhdGl2ZSA9IHByb2Nlc3NWYWx1ZSAhPT0gXCIwXCI7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIHByb2Nlc3NWYWx1ZSA9IHByZWZpeCArIHByb2Nlc3NWYWx1ZTtcclxuICAgICAgICAgICAgICAgICAgICBwcm9jZXNzVmFsdWUgKz0gc3VmZml4O1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChvcHRzLmlzTmVnYXRpdmUpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcHJvY2Vzc1ZhbHVlID0gb3B0cy5uZWdhdGlvblN5bWJvbC5mcm9udCArIHByb2Nlc3NWYWx1ZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcHJvY2Vzc1ZhbHVlICs9IG9wdHMubmVnYXRpb25TeW1ib2wuYmFjaztcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgcHJvY2Vzc1ZhbHVlID0gcHJvY2Vzc1ZhbHVlLnNwbGl0KFwiXCIpO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChjaGFyQXRQb3MgIT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoY2hhckF0UG9zICE9PSBvcHRzLnJhZGl4UG9pbnQgJiYgY2hhckF0UG9zICE9PSBvcHRzLm5lZ2F0aW9uU3ltYm9sLmZyb250ICYmIGNoYXJBdFBvcyAhPT0gb3B0cy5uZWdhdGlvblN5bWJvbC5iYWNrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXJldFBvcyA9ICQuaW5BcnJheShcIj9cIiwgcHJvY2Vzc1ZhbHVlKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChjYXJldFBvcyA+IC0xKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcHJvY2Vzc1ZhbHVlW2NhcmV0UG9zXSA9IGNoYXJBdFBvcztcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSBjYXJldFBvcyA9IGN1cnJlbnRSZXN1bHQuY2FyZXQgfHwgMDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChjaGFyQXRQb3MgPT09IG9wdHMucmFkaXhQb2ludCB8fCBjaGFyQXRQb3MgPT09IG9wdHMubmVnYXRpb25TeW1ib2wuZnJvbnQgfHwgY2hhckF0UG9zID09PSBvcHRzLm5lZ2F0aW9uU3ltYm9sLmJhY2spIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBuZXdDYXJldFBvcyA9ICQuaW5BcnJheShjaGFyQXRQb3MsIHByb2Nlc3NWYWx1ZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAobmV3Q2FyZXRQb3MgIT09IC0xKSBjYXJldFBvcyA9IG5ld0NhcmV0UG9zO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGlmIChvcHRzLm51bWVyaWNJbnB1dCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjYXJldFBvcyA9IHByb2Nlc3NWYWx1ZS5sZW5ndGggLSBjYXJldFBvcyAtIDE7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHByb2Nlc3NWYWx1ZSA9IHByb2Nlc3NWYWx1ZS5yZXZlcnNlKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIHZhciByc2x0ID0ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjYXJldDogKGNoYXJBdFBvcyA9PT0gdW5kZWZpbmVkIHx8IGN1cnJlbnRSZXN1bHQucG9zICE9PSB1bmRlZmluZWQpICYmIGNhcmV0UG9zICE9PSB1bmRlZmluZWQgPyBjYXJldFBvcyArIChvcHRzLm51bWVyaWNJbnB1dCA/IC0xIDogMSkgOiBjYXJldFBvcyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgYnVmZmVyOiBwcm9jZXNzVmFsdWUsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlZnJlc2hGcm9tQnVmZmVyOiBjdXJyZW50UmVzdWx0LmRvcG9zdCB8fCBidWZmZXIuam9pbihcIlwiKSAhPT0gcHJvY2Vzc1ZhbHVlLmpvaW4oXCJcIilcclxuICAgICAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiByc2x0LnJlZnJlc2hGcm9tQnVmZmVyID8gcnNsdCA6IGN1cnJlbnRSZXN1bHQ7XHJcbiAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgb25CZWZvcmVXcml0ZTogZnVuY3Rpb24gb25CZWZvcmVXcml0ZShlLCBidWZmZXIsIGNhcmV0UG9zLCBvcHRzKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgZnVuY3Rpb24gcGFyc2VNaW5NYXhPcHRpb25zKG9wdHMpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG9wdHMucGFyc2VNaW5NYXhPcHRpb25zID09PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChvcHRzLm1pbiAhPT0gbnVsbCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9wdHMubWluID0gb3B0cy5taW4udG9TdHJpbmcoKS5yZXBsYWNlKG5ldyBSZWdFeHAoSW5wdXRtYXNrLmVzY2FwZVJlZ2V4KG9wdHMuZ3JvdXBTZXBhcmF0b3IpLCBcImdcIiksIFwiXCIpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChvcHRzLnJhZGl4UG9pbnQgPT09IFwiLFwiKSBvcHRzLm1pbiA9IG9wdHMubWluLnJlcGxhY2Uob3B0cy5yYWRpeFBvaW50LCBcIi5cIik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb3B0cy5taW4gPSBpc0Zpbml0ZShvcHRzLm1pbikgPyBwYXJzZUZsb2F0KG9wdHMubWluKSA6IE5hTjtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoaXNOYU4ob3B0cy5taW4pKSBvcHRzLm1pbiA9IE51bWJlci5NSU5fVkFMVUU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAob3B0cy5tYXggIT09IG51bGwpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvcHRzLm1heCA9IG9wdHMubWF4LnRvU3RyaW5nKCkucmVwbGFjZShuZXcgUmVnRXhwKElucHV0bWFzay5lc2NhcGVSZWdleChvcHRzLmdyb3VwU2VwYXJhdG9yKSwgXCJnXCIpLCBcIlwiKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAob3B0cy5yYWRpeFBvaW50ID09PSBcIixcIikgb3B0cy5tYXggPSBvcHRzLm1heC5yZXBsYWNlKG9wdHMucmFkaXhQb2ludCwgXCIuXCIpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9wdHMubWF4ID0gaXNGaW5pdGUob3B0cy5tYXgpID8gcGFyc2VGbG9hdChvcHRzLm1heCkgOiBOYU47XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGlzTmFOKG9wdHMubWF4KSkgb3B0cy5tYXggPSBOdW1iZXIuTUFYX1ZBTFVFO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgb3B0cy5wYXJzZU1pbk1heE9wdGlvbnMgPSBcImRvbmVcIjtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBpZiAoZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBzd2l0Y2ggKGUudHlwZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgXCJrZXlkb3duXCI6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gb3B0cy5wb3N0VmFsaWRhdGlvbihidWZmZXIsIGNhcmV0UG9zLCB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FyZXQ6IGNhcmV0UG9zLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRvcG9zdDogdHJ1ZVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSwgb3B0cyk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgXCJibHVyXCI6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSBcImNoZWNrdmFsXCI6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgdW5tYXNrZWQ7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwYXJzZU1pbk1heE9wdGlvbnMob3B0cyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAob3B0cy5taW4gIT09IG51bGwgfHwgb3B0cy5tYXggIT09IG51bGwpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB1bm1hc2tlZCA9IG9wdHMub25Vbk1hc2soYnVmZmVyLmpvaW4oXCJcIiksIHVuZGVmaW5lZCwgJC5leHRlbmQoe30sIG9wdHMsIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdW5tYXNrQXNOdW1iZXI6IHRydWVcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG9wdHMubWluICE9PSBudWxsICYmIHVubWFza2VkIDwgb3B0cy5taW4pIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb3B0cy5pc05lZ2F0aXZlID0gb3B0cy5taW4gPCAwO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gb3B0cy5wb3N0VmFsaWRhdGlvbihvcHRzLm1pbi50b1N0cmluZygpLnJlcGxhY2UoXCIuXCIsIG9wdHMucmFkaXhQb2ludCkuc3BsaXQoXCJcIiksIGNhcmV0UG9zLCB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXJldDogY2FyZXRQb3MsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkb3Bvc3Q6IHRydWUsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwbGFjZWhvbGRlcjogXCIwXCJcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSwgb3B0cyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChvcHRzLm1heCAhPT0gbnVsbCAmJiB1bm1hc2tlZCA+IG9wdHMubWF4KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9wdHMuaXNOZWdhdGl2ZSA9IG9wdHMubWF4IDwgMDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG9wdHMucG9zdFZhbGlkYXRpb24ob3B0cy5tYXgudG9TdHJpbmcoKS5yZXBsYWNlKFwiLlwiLCBvcHRzLnJhZGl4UG9pbnQpLnNwbGl0KFwiXCIpLCBjYXJldFBvcywge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FyZXQ6IGNhcmV0UG9zLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZG9wb3N0OiB0cnVlLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcGxhY2Vob2xkZXI6IFwiMFwiXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sIG9wdHMpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBvcHRzLnBvc3RWYWxpZGF0aW9uKGJ1ZmZlciwgY2FyZXRQb3MsIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXJldDogY2FyZXRQb3MsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcGxhY2Vob2xkZXI6IFwiMFwiLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGV2ZW50OiBcImJsdXJcIlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSwgb3B0cyk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgXCJfY2hlY2t2YWxcIjpcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FyZXQ6IGNhcmV0UG9zXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9O1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICBkZWZhdWx0OlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgcmVnZXg6IHtcclxuICAgICAgICAgICAgICAgICAgICBpbnRlZ2VyUGFydDogZnVuY3Rpb24gaW50ZWdlclBhcnQob3B0cywgZW1wdHlDaGVjaykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZW1wdHlDaGVjayA/IG5ldyBSZWdFeHAoXCJbXCIgKyBJbnB1dG1hc2suZXNjYXBlUmVnZXgob3B0cy5uZWdhdGlvblN5bWJvbC5mcm9udCkgKyBcIitdP1wiKSA6IG5ldyBSZWdFeHAoXCJbXCIgKyBJbnB1dG1hc2suZXNjYXBlUmVnZXgob3B0cy5uZWdhdGlvblN5bWJvbC5mcm9udCkgKyBcIitdP1xcXFxkK1wiKTtcclxuICAgICAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgICAgIGludGVnZXJOUGFydDogZnVuY3Rpb24gaW50ZWdlck5QYXJ0KG9wdHMpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBSZWdFeHAoXCJbXFxcXGRcIiArIElucHV0bWFzay5lc2NhcGVSZWdleChvcHRzLmdyb3VwU2VwYXJhdG9yKSArIElucHV0bWFzay5lc2NhcGVSZWdleChvcHRzLnBsYWNlaG9sZGVyLmNoYXJBdCgwKSkgKyBcIl0rXCIpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICBkZWZpbml0aW9uczoge1xyXG4gICAgICAgICAgICAgICAgICAgIFwiflwiOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhbGlkYXRvcjogZnVuY3Rpb24gdmFsaWRhdG9yKGNocnMsIG1hc2tzZXQsIHBvcywgc3RyaWN0LCBvcHRzLCBpc1NlbGVjdGlvbikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGlzVmFsaWQsIGw7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoY2hycyA9PT0gXCJrXCIgfHwgY2hycyA9PT0gXCJtXCIpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpc1ZhbGlkID0ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbnNlcnQ6IFtdLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjOiAwXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBpID0gMCwgbCA9IGNocnMgPT09IFwia1wiID8gMiA6IDU7IGkgPCBsOyBpKyspIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaXNWYWxpZC5pbnNlcnQucHVzaCh7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwb3M6IHBvcyArIGksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjOiAwXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpc1ZhbGlkLnBvcyA9IHBvcyArIGw7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGlzVmFsaWQ7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpc1ZhbGlkID0gc3RyaWN0ID8gbmV3IFJlZ0V4cChcIlswLTlcIiArIElucHV0bWFzay5lc2NhcGVSZWdleChvcHRzLmdyb3VwU2VwYXJhdG9yKSArIFwiXVwiKS50ZXN0KGNocnMpIDogbmV3IFJlZ0V4cChcIlswLTldXCIpLnRlc3QoY2hycyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoaXNWYWxpZCA9PT0gdHJ1ZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChvcHRzLm51bWVyaWNJbnB1dCAhPT0gdHJ1ZSAmJiBtYXNrc2V0LnZhbGlkUG9zaXRpb25zW3Bvc10gIT09IHVuZGVmaW5lZCAmJiBtYXNrc2V0LnZhbGlkUG9zaXRpb25zW3Bvc10ubWF0Y2guZGVmID09PSBcIn5cIiAmJiAhaXNTZWxlY3Rpb24pIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHByb2Nlc3NWYWx1ZSA9IG1hc2tzZXQuYnVmZmVyLmpvaW4oXCJcIik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHByb2Nlc3NWYWx1ZSA9IHByb2Nlc3NWYWx1ZS5yZXBsYWNlKG5ldyBSZWdFeHAoXCJbLVwiICsgSW5wdXRtYXNrLmVzY2FwZVJlZ2V4KG9wdHMubmVnYXRpb25TeW1ib2wuZnJvbnQpICsgXCJdXCIsIFwiZ1wiKSwgXCJcIik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHByb2Nlc3NWYWx1ZSA9IHByb2Nlc3NWYWx1ZS5yZXBsYWNlKG5ldyBSZWdFeHAoSW5wdXRtYXNrLmVzY2FwZVJlZ2V4KG9wdHMubmVnYXRpb25TeW1ib2wuYmFjaykgKyBcIiRcIiksIFwiXCIpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgcHZSYWRpeFNwbGl0ID0gcHJvY2Vzc1ZhbHVlLnNwbGl0KG9wdHMucmFkaXhQb2ludCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChwdlJhZGl4U3BsaXQubGVuZ3RoID4gMSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcHZSYWRpeFNwbGl0WzFdID0gcHZSYWRpeFNwbGl0WzFdLnJlcGxhY2UoLzAvZywgb3B0cy5wbGFjZWhvbGRlci5jaGFyQXQoMCkpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChwdlJhZGl4U3BsaXRbMF0gPT09IFwiMFwiKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwdlJhZGl4U3BsaXRbMF0gPSBwdlJhZGl4U3BsaXRbMF0ucmVwbGFjZSgvMC9nLCBvcHRzLnBsYWNlaG9sZGVyLmNoYXJBdCgwKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcHJvY2Vzc1ZhbHVlID0gcHZSYWRpeFNwbGl0WzBdICsgb3B0cy5yYWRpeFBvaW50ICsgcHZSYWRpeFNwbGl0WzFdIHx8IFwiXCI7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBidWZmZXJUZW1wbGF0ZSA9IG1hc2tzZXQuX2J1ZmZlci5qb2luKFwiXCIpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAocHJvY2Vzc1ZhbHVlID09PSBvcHRzLnJhZGl4UG9pbnQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHByb2Nlc3NWYWx1ZSA9IGJ1ZmZlclRlbXBsYXRlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHdoaWxlIChwcm9jZXNzVmFsdWUubWF0Y2goSW5wdXRtYXNrLmVzY2FwZVJlZ2V4KGJ1ZmZlclRlbXBsYXRlKSArIFwiJFwiKSA9PT0gbnVsbCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnVmZmVyVGVtcGxhdGUgPSBidWZmZXJUZW1wbGF0ZS5zbGljZSgxKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwcm9jZXNzVmFsdWUgPSBwcm9jZXNzVmFsdWUucmVwbGFjZShidWZmZXJUZW1wbGF0ZSwgXCJcIik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHByb2Nlc3NWYWx1ZSA9IHByb2Nlc3NWYWx1ZS5zcGxpdChcIlwiKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHByb2Nlc3NWYWx1ZVtwb3NdID09PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlzVmFsaWQgPSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcG9zOiBwb3MsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVtb3ZlOiBwb3NcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpc1ZhbGlkID0ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBvczogcG9zXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmICghc3RyaWN0ICYmIGNocnMgPT09IG9wdHMucmFkaXhQb2ludCAmJiBtYXNrc2V0LnZhbGlkUG9zaXRpb25zW3BvcyAtIDFdID09PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpc1ZhbGlkID0ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbnNlcnQ6IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBvczogcG9zLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYzogMFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwb3M6IHBvcyArIDFcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGlzVmFsaWQ7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhcmRpbmFsaXR5OiAxXHJcbiAgICAgICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgICAgICBcIitcIjoge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YWxpZGF0b3I6IGZ1bmN0aW9uIHZhbGlkYXRvcihjaHJzLCBtYXNrc2V0LCBwb3MsIHN0cmljdCwgb3B0cykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG9wdHMuYWxsb3dNaW51cyAmJiAoY2hycyA9PT0gXCItXCIgfHwgY2hycyA9PT0gb3B0cy5uZWdhdGlvblN5bWJvbC5mcm9udCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhcmRpbmFsaXR5OiAxLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBwbGFjZWhvbGRlcjogXCJcIlxyXG4gICAgICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICAgICAgXCItXCI6IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFsaWRhdG9yOiBmdW5jdGlvbiB2YWxpZGF0b3IoY2hycywgbWFza3NldCwgcG9zLCBzdHJpY3QsIG9wdHMpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBvcHRzLmFsbG93TWludXMgJiYgY2hycyA9PT0gb3B0cy5uZWdhdGlvblN5bWJvbC5iYWNrO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBjYXJkaW5hbGl0eTogMSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgcGxhY2Vob2xkZXI6IFwiXCJcclxuICAgICAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgICAgIFwiOlwiOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhbGlkYXRvcjogZnVuY3Rpb24gdmFsaWRhdG9yKGNocnMsIG1hc2tzZXQsIHBvcywgc3RyaWN0LCBvcHRzKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgcmFkaXggPSBcIltcIiArIElucHV0bWFzay5lc2NhcGVSZWdleChvcHRzLnJhZGl4UG9pbnQpICsgXCJdXCI7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgaXNWYWxpZCA9IG5ldyBSZWdFeHAocmFkaXgpLnRlc3QoY2hycyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoaXNWYWxpZCAmJiBtYXNrc2V0LnZhbGlkUG9zaXRpb25zW3Bvc10gJiYgbWFza3NldC52YWxpZFBvc2l0aW9uc1twb3NdLm1hdGNoLnBsYWNlaG9sZGVyID09PSBvcHRzLnJhZGl4UG9pbnQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpc1ZhbGlkID0ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXJldDogcG9zICsgMVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gaXNWYWxpZDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgY2FyZGluYWxpdHk6IDEsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHBsYWNlaG9sZGVyOiBmdW5jdGlvbiBwbGFjZWhvbGRlcihvcHRzKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gb3B0cy5yYWRpeFBvaW50O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgIG9uVW5NYXNrOiBmdW5jdGlvbiBvblVuTWFzayhtYXNrZWRWYWx1ZSwgdW5tYXNrZWRWYWx1ZSwgb3B0cykge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICh1bm1hc2tlZFZhbHVlID09PSBcIlwiICYmIG9wdHMubnVsbGFibGUgPT09IHRydWUpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHVubWFza2VkVmFsdWU7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIHZhciBwcm9jZXNzVmFsdWUgPSBtYXNrZWRWYWx1ZS5yZXBsYWNlKG9wdHMucHJlZml4LCBcIlwiKTtcclxuICAgICAgICAgICAgICAgICAgICBwcm9jZXNzVmFsdWUgPSBwcm9jZXNzVmFsdWUucmVwbGFjZShvcHRzLnN1ZmZpeCwgXCJcIik7XHJcbiAgICAgICAgICAgICAgICAgICAgcHJvY2Vzc1ZhbHVlID0gcHJvY2Vzc1ZhbHVlLnJlcGxhY2UobmV3IFJlZ0V4cChJbnB1dG1hc2suZXNjYXBlUmVnZXgob3B0cy5ncm91cFNlcGFyYXRvciksIFwiZ1wiKSwgXCJcIik7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKG9wdHMucGxhY2Vob2xkZXIuY2hhckF0KDApICE9PSBcIlwiKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHByb2Nlc3NWYWx1ZSA9IHByb2Nlc3NWYWx1ZS5yZXBsYWNlKG5ldyBSZWdFeHAob3B0cy5wbGFjZWhvbGRlci5jaGFyQXQoMCksIFwiZ1wiKSwgXCIwXCIpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBpZiAob3B0cy51bm1hc2tBc051bWJlcikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAob3B0cy5yYWRpeFBvaW50ICE9PSBcIlwiICYmIHByb2Nlc3NWYWx1ZS5pbmRleE9mKG9wdHMucmFkaXhQb2ludCkgIT09IC0xKSBwcm9jZXNzVmFsdWUgPSBwcm9jZXNzVmFsdWUucmVwbGFjZShJbnB1dG1hc2suZXNjYXBlUmVnZXguY2FsbCh0aGlzLCBvcHRzLnJhZGl4UG9pbnQpLCBcIi5cIik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHByb2Nlc3NWYWx1ZSA9IHByb2Nlc3NWYWx1ZS5yZXBsYWNlKG5ldyBSZWdFeHAoXCJeXCIgKyBJbnB1dG1hc2suZXNjYXBlUmVnZXgob3B0cy5uZWdhdGlvblN5bWJvbC5mcm9udCkpLCBcIi1cIik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHByb2Nlc3NWYWx1ZSA9IHByb2Nlc3NWYWx1ZS5yZXBsYWNlKG5ldyBSZWdFeHAoSW5wdXRtYXNrLmVzY2FwZVJlZ2V4KG9wdHMubmVnYXRpb25TeW1ib2wuYmFjaykgKyBcIiRcIiksIFwiXCIpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gTnVtYmVyKHByb2Nlc3NWYWx1ZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBwcm9jZXNzVmFsdWU7XHJcbiAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgaXNDb21wbGV0ZTogZnVuY3Rpb24gaXNDb21wbGV0ZShidWZmZXIsIG9wdHMpIHtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgbWFza2VkVmFsdWUgPSAob3B0cy5udW1lcmljSW5wdXQgPyBidWZmZXIuc2xpY2UoKS5yZXZlcnNlKCkgOiBidWZmZXIpLmpvaW4oXCJcIik7XHJcbiAgICAgICAgICAgICAgICAgICAgbWFza2VkVmFsdWUgPSBtYXNrZWRWYWx1ZS5yZXBsYWNlKG5ldyBSZWdFeHAoXCJeXCIgKyBJbnB1dG1hc2suZXNjYXBlUmVnZXgob3B0cy5uZWdhdGlvblN5bWJvbC5mcm9udCkpLCBcIi1cIik7XHJcbiAgICAgICAgICAgICAgICAgICAgbWFza2VkVmFsdWUgPSBtYXNrZWRWYWx1ZS5yZXBsYWNlKG5ldyBSZWdFeHAoSW5wdXRtYXNrLmVzY2FwZVJlZ2V4KG9wdHMubmVnYXRpb25TeW1ib2wuYmFjaykgKyBcIiRcIiksIFwiXCIpO1xyXG4gICAgICAgICAgICAgICAgICAgIG1hc2tlZFZhbHVlID0gbWFza2VkVmFsdWUucmVwbGFjZShvcHRzLnByZWZpeCwgXCJcIik7XHJcbiAgICAgICAgICAgICAgICAgICAgbWFza2VkVmFsdWUgPSBtYXNrZWRWYWx1ZS5yZXBsYWNlKG9wdHMuc3VmZml4LCBcIlwiKTtcclxuICAgICAgICAgICAgICAgICAgICBtYXNrZWRWYWx1ZSA9IG1hc2tlZFZhbHVlLnJlcGxhY2UobmV3IFJlZ0V4cChJbnB1dG1hc2suZXNjYXBlUmVnZXgob3B0cy5ncm91cFNlcGFyYXRvcikgKyBcIihbMC05XXszfSlcIiwgXCJnXCIpLCBcIiQxXCIpO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChvcHRzLnJhZGl4UG9pbnQgPT09IFwiLFwiKSBtYXNrZWRWYWx1ZSA9IG1hc2tlZFZhbHVlLnJlcGxhY2UoSW5wdXRtYXNrLmVzY2FwZVJlZ2V4KG9wdHMucmFkaXhQb2ludCksIFwiLlwiKTtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gaXNGaW5pdGUobWFza2VkVmFsdWUpO1xyXG4gICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgIG9uQmVmb3JlTWFzazogZnVuY3Rpb24gb25CZWZvcmVNYXNrKGluaXRpYWxWYWx1ZSwgb3B0cykge1xyXG4gICAgICAgICAgICAgICAgICAgIG9wdHMuaXNOZWdhdGl2ZSA9IHVuZGVmaW5lZDtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgcmFkaXhQb2ludCA9IG9wdHMucmFkaXhQb2ludCB8fCBcIixcIjtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoKHR5cGVvZiBpbml0aWFsVmFsdWUgPT0gXCJudW1iZXJcIiB8fCBvcHRzLmlucHV0VHlwZSA9PT0gXCJudW1iZXJcIikgJiYgcmFkaXhQb2ludCAhPT0gXCJcIikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpbml0aWFsVmFsdWUgPSBpbml0aWFsVmFsdWUudG9TdHJpbmcoKS5yZXBsYWNlKFwiLlwiLCByYWRpeFBvaW50KTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIHZhbHVlUGFydHMgPSBpbml0aWFsVmFsdWUuc3BsaXQocmFkaXhQb2ludCksIGludGVnZXJQYXJ0ID0gdmFsdWVQYXJ0c1swXS5yZXBsYWNlKC9bXlxcLTAtOV0vZywgXCJcIiksIGRlY2ltYWxQYXJ0ID0gdmFsdWVQYXJ0cy5sZW5ndGggPiAxID8gdmFsdWVQYXJ0c1sxXS5yZXBsYWNlKC9bXjAtOV0vZywgXCJcIikgOiBcIlwiO1xyXG4gICAgICAgICAgICAgICAgICAgIGluaXRpYWxWYWx1ZSA9IGludGVnZXJQYXJ0ICsgKGRlY2ltYWxQYXJ0ICE9PSBcIlwiID8gcmFkaXhQb2ludCArIGRlY2ltYWxQYXJ0IDogZGVjaW1hbFBhcnQpO1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBkaWdpdHMgPSAwO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChyYWRpeFBvaW50ICE9PSBcIlwiKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGRpZ2l0cyA9IGRlY2ltYWxQYXJ0Lmxlbmd0aDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGRlY2ltYWxQYXJ0ICE9PSBcIlwiKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgZGlnaXRzRmFjdG9yID0gTWF0aC5wb3coMTAsIGRpZ2l0cyB8fCAxKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChpc0Zpbml0ZShvcHRzLmRpZ2l0cykpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkaWdpdHMgPSBwYXJzZUludChvcHRzLmRpZ2l0cyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGlnaXRzRmFjdG9yID0gTWF0aC5wb3coMTAsIGRpZ2l0cyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbml0aWFsVmFsdWUgPSBpbml0aWFsVmFsdWUucmVwbGFjZShJbnB1dG1hc2suZXNjYXBlUmVnZXgocmFkaXhQb2ludCksIFwiLlwiKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChpc0Zpbml0ZShpbml0aWFsVmFsdWUpKSBpbml0aWFsVmFsdWUgPSBNYXRoLnJvdW5kKHBhcnNlRmxvYXQoaW5pdGlhbFZhbHVlKSAqIGRpZ2l0c0ZhY3RvcikgLyBkaWdpdHNGYWN0b3I7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbml0aWFsVmFsdWUgPSBpbml0aWFsVmFsdWUudG9TdHJpbmcoKS5yZXBsYWNlKFwiLlwiLCByYWRpeFBvaW50KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBpZiAob3B0cy5kaWdpdHMgPT09IDAgJiYgaW5pdGlhbFZhbHVlLmluZGV4T2YoSW5wdXRtYXNrLmVzY2FwZVJlZ2V4KHJhZGl4UG9pbnQpKSAhPT0gLTEpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaW5pdGlhbFZhbHVlID0gaW5pdGlhbFZhbHVlLnN1YnN0cmluZygwLCBpbml0aWFsVmFsdWUuaW5kZXhPZihJbnB1dG1hc2suZXNjYXBlUmVnZXgocmFkaXhQb2ludCkpKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGFsaWduRGlnaXRzKGluaXRpYWxWYWx1ZS50b1N0cmluZygpLnNwbGl0KFwiXCIpLCBkaWdpdHMsIG9wdHMpLmpvaW4oXCJcIik7XHJcbiAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgb25LZXlEb3duOiBmdW5jdGlvbiBvbktleURvd24oZSwgYnVmZmVyLCBjYXJldFBvcywgb3B0cykge1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciAkaW5wdXQgPSAkKHRoaXMpO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChlLmN0cmxLZXkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgc3dpdGNoIChlLmtleUNvZGUpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlIElucHV0bWFzay5rZXlDb2RlLlVQOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJGlucHV0LnZhbChwYXJzZUZsb2F0KHRoaXMuaW5wdXRtYXNrLnVubWFza2VkdmFsdWUoKSkgKyBwYXJzZUludChvcHRzLnN0ZXApKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICRpbnB1dC50cmlnZ2VyKFwic2V0dmFsdWVcIik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSBJbnB1dG1hc2sua2V5Q29kZS5ET1dOOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJGlucHV0LnZhbChwYXJzZUZsb2F0KHRoaXMuaW5wdXRtYXNrLnVubWFza2VkdmFsdWUoKSkgLSBwYXJzZUludChvcHRzLnN0ZXApKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICRpbnB1dC50cmlnZ2VyKFwic2V0dmFsdWVcIik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgY3VycmVuY3k6IHtcclxuICAgICAgICAgICAgICAgIHByZWZpeDogXCIkIFwiLFxyXG4gICAgICAgICAgICAgICAgZ3JvdXBTZXBhcmF0b3I6IFwiLFwiLFxyXG4gICAgICAgICAgICAgICAgYWxpYXM6IFwibnVtZXJpY1wiLFxyXG4gICAgICAgICAgICAgICAgcGxhY2Vob2xkZXI6IFwiMFwiLFxyXG4gICAgICAgICAgICAgICAgYXV0b0dyb3VwOiB0cnVlLFxyXG4gICAgICAgICAgICAgICAgZGlnaXRzOiAyLFxyXG4gICAgICAgICAgICAgICAgZGlnaXRzT3B0aW9uYWw6IGZhbHNlLFxyXG4gICAgICAgICAgICAgICAgY2xlYXJNYXNrT25Mb3N0Rm9jdXM6IGZhbHNlXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIGRlY2ltYWw6IHtcclxuICAgICAgICAgICAgICAgIGFsaWFzOiBcIm51bWVyaWNcIlxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBpbnRlZ2VyOiB7XHJcbiAgICAgICAgICAgICAgICBhbGlhczogXCJudW1lcmljXCIsXHJcbiAgICAgICAgICAgICAgICBkaWdpdHM6IDAsXHJcbiAgICAgICAgICAgICAgICByYWRpeFBvaW50OiBcIlwiXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIHBlcmNlbnRhZ2U6IHtcclxuICAgICAgICAgICAgICAgIGFsaWFzOiBcIm51bWVyaWNcIixcclxuICAgICAgICAgICAgICAgIGRpZ2l0czogMixcclxuICAgICAgICAgICAgICAgIGRpZ2l0c09wdGlvbmFsOiB0cnVlLFxyXG4gICAgICAgICAgICAgICAgcmFkaXhQb2ludDogXCIuXCIsXHJcbiAgICAgICAgICAgICAgICBwbGFjZWhvbGRlcjogXCIwXCIsXHJcbiAgICAgICAgICAgICAgICBhdXRvR3JvdXA6IGZhbHNlLFxyXG4gICAgICAgICAgICAgICAgbWluOiAwLFxyXG4gICAgICAgICAgICAgICAgbWF4OiAxMDAsXHJcbiAgICAgICAgICAgICAgICBzdWZmaXg6IFwiICVcIixcclxuICAgICAgICAgICAgICAgIGFsbG93TWludXM6IGZhbHNlXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuICAgICAgICByZXR1cm4gSW5wdXRtYXNrO1xyXG4gICAgfSk7XHJcbn0sIGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xyXG4gICAgXCJ1c2Ugc3RyaWN0XCI7XHJcbiAgICB2YXIgX19XRUJQQUNLX0FNRF9ERUZJTkVfRkFDVE9SWV9fLCBfX1dFQlBBQ0tfQU1EX0RFRklORV9BUlJBWV9fLCBfX1dFQlBBQ0tfQU1EX0RFRklORV9SRVNVTFRfXztcclxuICAgIHZhciBfdHlwZW9mID0gdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIHR5cGVvZiBTeW1ib2wuaXRlcmF0b3IgPT09IFwic3ltYm9sXCIgPyBmdW5jdGlvbihvYmopIHtcclxuICAgICAgICByZXR1cm4gdHlwZW9mIG9iajtcclxuICAgIH0gOiBmdW5jdGlvbihvYmopIHtcclxuICAgICAgICByZXR1cm4gb2JqICYmIHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiBvYmouY29uc3RydWN0b3IgPT09IFN5bWJvbCAmJiBvYmogIT09IFN5bWJvbC5wcm90b3R5cGUgPyBcInN5bWJvbFwiIDogdHlwZW9mIG9iajtcclxuICAgIH07XHJcbiAgICAoZnVuY3Rpb24oZmFjdG9yeSkge1xyXG4gICAgICAgIGlmICh0cnVlKSB7XHJcbiAgICAgICAgICAgICEoX19XRUJQQUNLX0FNRF9ERUZJTkVfQVJSQVlfXyA9IFsgX193ZWJwYWNrX3JlcXVpcmVfXyg0KSwgX193ZWJwYWNrX3JlcXVpcmVfXygyKSBdLCBcclxuICAgICAgICAgICAgX19XRUJQQUNLX0FNRF9ERUZJTkVfRkFDVE9SWV9fID0gZmFjdG9yeSwgX19XRUJQQUNLX0FNRF9ERUZJTkVfUkVTVUxUX18gPSB0eXBlb2YgX19XRUJQQUNLX0FNRF9ERUZJTkVfRkFDVE9SWV9fID09PSBcImZ1bmN0aW9uXCIgPyBfX1dFQlBBQ0tfQU1EX0RFRklORV9GQUNUT1JZX18uYXBwbHkoZXhwb3J0cywgX19XRUJQQUNLX0FNRF9ERUZJTkVfQVJSQVlfXykgOiBfX1dFQlBBQ0tfQU1EX0RFRklORV9GQUNUT1JZX18sIFxyXG4gICAgICAgICAgICBfX1dFQlBBQ0tfQU1EX0RFRklORV9SRVNVTFRfXyAhPT0gdW5kZWZpbmVkICYmIChtb2R1bGUuZXhwb3J0cyA9IF9fV0VCUEFDS19BTURfREVGSU5FX1JFU1VMVF9fKSk7XHJcbiAgICAgICAgfSBlbHNlIHt9XHJcbiAgICB9KShmdW5jdGlvbigkLCBJbnB1dG1hc2spIHtcclxuICAgICAgICBpZiAoJC5mbi5pbnB1dG1hc2sgPT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICAkLmZuLmlucHV0bWFzayA9IGZ1bmN0aW9uKGZuLCBvcHRpb25zKSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgbnB0bWFzaywgaW5wdXQgPSB0aGlzWzBdO1xyXG4gICAgICAgICAgICAgICAgaWYgKG9wdGlvbnMgPT09IHVuZGVmaW5lZCkgb3B0aW9ucyA9IHt9O1xyXG4gICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBmbiA9PT0gXCJzdHJpbmdcIikge1xyXG4gICAgICAgICAgICAgICAgICAgIHN3aXRjaCAoZm4pIHtcclxuICAgICAgICAgICAgICAgICAgICAgIGNhc2UgXCJ1bm1hc2tlZHZhbHVlXCI6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBpbnB1dCAmJiBpbnB1dC5pbnB1dG1hc2sgPyBpbnB1dC5pbnB1dG1hc2sudW5tYXNrZWR2YWx1ZSgpIDogJChpbnB1dCkudmFsKCk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgY2FzZSBcInJlbW92ZVwiOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5lYWNoKGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMuaW5wdXRtYXNrKSB0aGlzLmlucHV0bWFzay5yZW1vdmUoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgY2FzZSBcImdldGVtcHR5bWFza1wiOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gaW5wdXQgJiYgaW5wdXQuaW5wdXRtYXNrID8gaW5wdXQuaW5wdXRtYXNrLmdldGVtcHR5bWFzaygpIDogXCJcIjtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICBjYXNlIFwiaGFzTWFza2VkVmFsdWVcIjpcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGlucHV0ICYmIGlucHV0LmlucHV0bWFzayA/IGlucHV0LmlucHV0bWFzay5oYXNNYXNrZWRWYWx1ZSgpIDogZmFsc2U7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgY2FzZSBcImlzQ29tcGxldGVcIjpcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGlucHV0ICYmIGlucHV0LmlucHV0bWFzayA/IGlucHV0LmlucHV0bWFzay5pc0NvbXBsZXRlKCkgOiB0cnVlO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgIGNhc2UgXCJnZXRtZXRhZGF0YVwiOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gaW5wdXQgJiYgaW5wdXQuaW5wdXRtYXNrID8gaW5wdXQuaW5wdXRtYXNrLmdldG1ldGFkYXRhKCkgOiB1bmRlZmluZWQ7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgY2FzZSBcInNldHZhbHVlXCI6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIElucHV0bWFzay5zZXRWYWx1ZShpbnB1dCwgb3B0aW9ucyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgIGNhc2UgXCJvcHRpb25cIjpcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBvcHRpb25zID09PSBcInN0cmluZ1wiKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoaW5wdXQgJiYgaW5wdXQuaW5wdXRtYXNrICE9PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gaW5wdXQuaW5wdXRtYXNrLm9wdGlvbihvcHRpb25zKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmVhY2goZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMuaW5wdXRtYXNrICE9PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuaW5wdXRtYXNrLm9wdGlvbihvcHRpb25zKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICBkZWZhdWx0OlxyXG4gICAgICAgICAgICAgICAgICAgICAgICBvcHRpb25zLmFsaWFzID0gZm47XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG5wdG1hc2sgPSBuZXcgSW5wdXRtYXNrKG9wdGlvbnMpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5lYWNoKGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbnB0bWFzay5tYXNrKHRoaXMpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKEFycmF5LmlzQXJyYXkoZm4pKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgb3B0aW9ucy5hbGlhcyA9IGZuO1xyXG4gICAgICAgICAgICAgICAgICAgIG5wdG1hc2sgPSBuZXcgSW5wdXRtYXNrKG9wdGlvbnMpO1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmVhY2goZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG5wdG1hc2subWFzayh0aGlzKTtcclxuICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoKHR5cGVvZiBmbiA9PT0gXCJ1bmRlZmluZWRcIiA/IFwidW5kZWZpbmVkXCIgOiBfdHlwZW9mKGZuKSkgPT0gXCJvYmplY3RcIikge1xyXG4gICAgICAgICAgICAgICAgICAgIG5wdG1hc2sgPSBuZXcgSW5wdXRtYXNrKGZuKTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoZm4ubWFzayA9PT0gdW5kZWZpbmVkICYmIGZuLmFsaWFzID09PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuZWFjaChmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLmlucHV0bWFzayAhPT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuaW5wdXRtYXNrLm9wdGlvbihmbik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgbnB0bWFzay5tYXNrKHRoaXMpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5lYWNoKGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbnB0bWFzay5tYXNrKHRoaXMpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGZuID09PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5lYWNoKGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBucHRtYXNrID0gbmV3IElucHV0bWFzayhvcHRpb25zKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbnB0bWFzay5tYXNrKHRoaXMpO1xyXG4gICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9O1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gJC5mbi5pbnB1dG1hc2s7XHJcbiAgICB9KTtcclxufSBdKTtcclxuXHJcblxyXG5cclxuJChmdW5jdGlvbigpIHtcclxuXHJcblx0aWYgKCQod2luZG93KS53aWR0aCgpIDwgMTI4MCkge1xyXG4gICBcdFx0JCgnLm1faGVhZGVyX3RvcF9ncicpLmFwcGVuZFRvKCcuZ3JBZHJlc19tb2InKTtcclxuXHRcdCQoJy5tX2hlYWRlcl90b3BfYWRyZXNzJykuYXBwZW5kVG8oJy5nckFkcmVzX21vYicpO1xyXG5cdFx0JCgnLm1faGVhZGVyX2NlbnRlcl9sb2dvJykuYXBwZW5kVG8oJy5tb2JfbG9nX3RleHQnKTtcclxuXHRcdCQoJy5tX2hlYWRlcl9jZW50ZXJfbG9nb3RleHQnKS5hcHBlbmRUbygnLm1vYl9sb2dfdGV4dCcpO1xyXG5cdFx0JCgnLm1faGVhZGVyX2NlbnRlcl90ZWwnKS5hcHBlbmRUbygnLm1vYl90ZWxfc2VhcmNoJyk7XHJcblx0XHQkKCcubV9oZWFkZXJfY2VudGVyX3NlYXJjaCcpLmFwcGVuZFRvKCcubW9iX3RlbF9zZWFyY2gnKTtcclxuXHR9XHJcbn0pO1xyXG4vKlxyXG4gICAgIF8gXyAgICAgIF8gICAgICAgX1xyXG4gX19ffCAoXykgX19ffCB8IF9fICAoXylfX19cclxuLyBfX3wgfCB8LyBfX3wgfC8gLyAgfCAvIF9ffFxyXG5cXF9fIFxcIHwgfCAoX198ICAgPCBfIHwgXFxfXyBcXFxyXG58X19fL198X3xcXF9fX3xffFxcXyhfKS8gfF9fXy9cclxuICAgICAgICAgICAgICAgICAgIHxfXy9cclxuXHJcbiBWZXJzaW9uOiAxLjkuMFxyXG4gIEF1dGhvcjogS2VuIFdoZWVsZXJcclxuIFdlYnNpdGU6IGh0dHA6Ly9rZW53aGVlbGVyLmdpdGh1Yi5pb1xyXG4gICAgRG9jczogaHR0cDovL2tlbndoZWVsZXIuZ2l0aHViLmlvL3NsaWNrXHJcbiAgICBSZXBvOiBodHRwOi8vZ2l0aHViLmNvbS9rZW53aGVlbGVyL3NsaWNrXHJcbiAgSXNzdWVzOiBodHRwOi8vZ2l0aHViLmNvbS9rZW53aGVlbGVyL3NsaWNrL2lzc3Vlc1xyXG5cclxuICovXHJcbihmdW5jdGlvbihpKXtcInVzZSBzdHJpY3RcIjtcImZ1bmN0aW9uXCI9PXR5cGVvZiBkZWZpbmUmJmRlZmluZS5hbWQ/ZGVmaW5lKFtcImpxdWVyeVwiXSxpKTpcInVuZGVmaW5lZFwiIT10eXBlb2YgZXhwb3J0cz9tb2R1bGUuZXhwb3J0cz1pKHJlcXVpcmUoXCJqcXVlcnlcIikpOmkoalF1ZXJ5KX0pKGZ1bmN0aW9uKGkpe1widXNlIHN0cmljdFwiO3ZhciBlPXdpbmRvdy5TbGlja3x8e307ZT1mdW5jdGlvbigpe2Z1bmN0aW9uIGUoZSxvKXt2YXIgcyxuPXRoaXM7bi5kZWZhdWx0cz17YWNjZXNzaWJpbGl0eTohMCxhZGFwdGl2ZUhlaWdodDohMSxhcHBlbmRBcnJvd3M6aShlKSxhcHBlbmREb3RzOmkoZSksYXJyb3dzOiEwLGFzTmF2Rm9yOm51bGwscHJldkFycm93Oic8YnV0dG9uIGNsYXNzPVwic2xpY2stcHJldlwiIGFyaWEtbGFiZWw9XCJQcmV2aW91c1wiIHR5cGU9XCJidXR0b25cIj5QcmV2aW91czwvYnV0dG9uPicsbmV4dEFycm93Oic8YnV0dG9uIGNsYXNzPVwic2xpY2stbmV4dFwiIGFyaWEtbGFiZWw9XCJOZXh0XCIgdHlwZT1cImJ1dHRvblwiPk5leHQ8L2J1dHRvbj4nLGF1dG9wbGF5OiExLGF1dG9wbGF5U3BlZWQ6M2UzLGNlbnRlck1vZGU6ITEsY2VudGVyUGFkZGluZzpcIjUwcHhcIixjc3NFYXNlOlwiZWFzZVwiLGN1c3RvbVBhZ2luZzpmdW5jdGlvbihlLHQpe3JldHVybiBpKCc8YnV0dG9uIHR5cGU9XCJidXR0b25cIiAvPicpLnRleHQodCsxKX0sZG90czohMSxkb3RzQ2xhc3M6XCJzbGljay1kb3RzXCIsZHJhZ2dhYmxlOiEwLGVhc2luZzpcImxpbmVhclwiLGVkZ2VGcmljdGlvbjouMzUsZmFkZTohMSxmb2N1c09uU2VsZWN0OiExLGZvY3VzT25DaGFuZ2U6ITEsaW5maW5pdGU6ITAsaW5pdGlhbFNsaWRlOjAsbGF6eUxvYWQ6XCJvbmRlbWFuZFwiLG1vYmlsZUZpcnN0OiExLHBhdXNlT25Ib3ZlcjohMCxwYXVzZU9uRm9jdXM6ITAscGF1c2VPbkRvdHNIb3ZlcjohMSxyZXNwb25kVG86XCJ3aW5kb3dcIixyZXNwb25zaXZlOm51bGwscm93czoxLHJ0bDohMSxzbGlkZTpcIlwiLHNsaWRlc1BlclJvdzoxLHNsaWRlc1RvU2hvdzoxLHNsaWRlc1RvU2Nyb2xsOjEsc3BlZWQ6NTAwLHN3aXBlOiEwLHN3aXBlVG9TbGlkZTohMSx0b3VjaE1vdmU6ITAsdG91Y2hUaHJlc2hvbGQ6NSx1c2VDU1M6ITAsdXNlVHJhbnNmb3JtOiEwLHZhcmlhYmxlV2lkdGg6ITEsdmVydGljYWw6ITEsdmVydGljYWxTd2lwaW5nOiExLHdhaXRGb3JBbmltYXRlOiEwLHpJbmRleDoxZTN9LG4uaW5pdGlhbHM9e2FuaW1hdGluZzohMSxkcmFnZ2luZzohMSxhdXRvUGxheVRpbWVyOm51bGwsY3VycmVudERpcmVjdGlvbjowLGN1cnJlbnRMZWZ0Om51bGwsY3VycmVudFNsaWRlOjAsZGlyZWN0aW9uOjEsJGRvdHM6bnVsbCxsaXN0V2lkdGg6bnVsbCxsaXN0SGVpZ2h0Om51bGwsbG9hZEluZGV4OjAsJG5leHRBcnJvdzpudWxsLCRwcmV2QXJyb3c6bnVsbCxzY3JvbGxpbmc6ITEsc2xpZGVDb3VudDpudWxsLHNsaWRlV2lkdGg6bnVsbCwkc2xpZGVUcmFjazpudWxsLCRzbGlkZXM6bnVsbCxzbGlkaW5nOiExLHNsaWRlT2Zmc2V0OjAsc3dpcGVMZWZ0Om51bGwsc3dpcGluZzohMSwkbGlzdDpudWxsLHRvdWNoT2JqZWN0Ont9LHRyYW5zZm9ybXNFbmFibGVkOiExLHVuc2xpY2tlZDohMX0saS5leHRlbmQobixuLmluaXRpYWxzKSxuLmFjdGl2ZUJyZWFrcG9pbnQ9bnVsbCxuLmFuaW1UeXBlPW51bGwsbi5hbmltUHJvcD1udWxsLG4uYnJlYWtwb2ludHM9W10sbi5icmVha3BvaW50U2V0dGluZ3M9W10sbi5jc3NUcmFuc2l0aW9ucz0hMSxuLmZvY3Vzc2VkPSExLG4uaW50ZXJydXB0ZWQ9ITEsbi5oaWRkZW49XCJoaWRkZW5cIixuLnBhdXNlZD0hMCxuLnBvc2l0aW9uUHJvcD1udWxsLG4ucmVzcG9uZFRvPW51bGwsbi5yb3dDb3VudD0xLG4uc2hvdWxkQ2xpY2s9ITAsbi4kc2xpZGVyPWkoZSksbi4kc2xpZGVzQ2FjaGU9bnVsbCxuLnRyYW5zZm9ybVR5cGU9bnVsbCxuLnRyYW5zaXRpb25UeXBlPW51bGwsbi52aXNpYmlsaXR5Q2hhbmdlPVwidmlzaWJpbGl0eWNoYW5nZVwiLG4ud2luZG93V2lkdGg9MCxuLndpbmRvd1RpbWVyPW51bGwscz1pKGUpLmRhdGEoXCJzbGlja1wiKXx8e30sbi5vcHRpb25zPWkuZXh0ZW5kKHt9LG4uZGVmYXVsdHMsbyxzKSxuLmN1cnJlbnRTbGlkZT1uLm9wdGlvbnMuaW5pdGlhbFNsaWRlLG4ub3JpZ2luYWxTZXR0aW5ncz1uLm9wdGlvbnMsXCJ1bmRlZmluZWRcIiE9dHlwZW9mIGRvY3VtZW50Lm1vekhpZGRlbj8obi5oaWRkZW49XCJtb3pIaWRkZW5cIixuLnZpc2liaWxpdHlDaGFuZ2U9XCJtb3p2aXNpYmlsaXR5Y2hhbmdlXCIpOlwidW5kZWZpbmVkXCIhPXR5cGVvZiBkb2N1bWVudC53ZWJraXRIaWRkZW4mJihuLmhpZGRlbj1cIndlYmtpdEhpZGRlblwiLG4udmlzaWJpbGl0eUNoYW5nZT1cIndlYmtpdHZpc2liaWxpdHljaGFuZ2VcIiksbi5hdXRvUGxheT1pLnByb3h5KG4uYXV0b1BsYXksbiksbi5hdXRvUGxheUNsZWFyPWkucHJveHkobi5hdXRvUGxheUNsZWFyLG4pLG4uYXV0b1BsYXlJdGVyYXRvcj1pLnByb3h5KG4uYXV0b1BsYXlJdGVyYXRvcixuKSxuLmNoYW5nZVNsaWRlPWkucHJveHkobi5jaGFuZ2VTbGlkZSxuKSxuLmNsaWNrSGFuZGxlcj1pLnByb3h5KG4uY2xpY2tIYW5kbGVyLG4pLG4uc2VsZWN0SGFuZGxlcj1pLnByb3h5KG4uc2VsZWN0SGFuZGxlcixuKSxuLnNldFBvc2l0aW9uPWkucHJveHkobi5zZXRQb3NpdGlvbixuKSxuLnN3aXBlSGFuZGxlcj1pLnByb3h5KG4uc3dpcGVIYW5kbGVyLG4pLG4uZHJhZ0hhbmRsZXI9aS5wcm94eShuLmRyYWdIYW5kbGVyLG4pLG4ua2V5SGFuZGxlcj1pLnByb3h5KG4ua2V5SGFuZGxlcixuKSxuLmluc3RhbmNlVWlkPXQrKyxuLmh0bWxFeHByPS9eKD86XFxzKig8W1xcd1xcV10rPilbXj5dKikkLyxuLnJlZ2lzdGVyQnJlYWtwb2ludHMoKSxuLmluaXQoITApfXZhciB0PTA7cmV0dXJuIGV9KCksZS5wcm90b3R5cGUuYWN0aXZhdGVBREE9ZnVuY3Rpb24oKXt2YXIgaT10aGlzO2kuJHNsaWRlVHJhY2suZmluZChcIi5zbGljay1hY3RpdmVcIikuYXR0cih7XCJhcmlhLWhpZGRlblwiOlwiZmFsc2VcIn0pLmZpbmQoXCJhLCBpbnB1dCwgYnV0dG9uLCBzZWxlY3RcIikuYXR0cih7dGFiaW5kZXg6XCIwXCJ9KX0sZS5wcm90b3R5cGUuYWRkU2xpZGU9ZS5wcm90b3R5cGUuc2xpY2tBZGQ9ZnVuY3Rpb24oZSx0LG8pe3ZhciBzPXRoaXM7aWYoXCJib29sZWFuXCI9PXR5cGVvZiB0KW89dCx0PW51bGw7ZWxzZSBpZih0PDB8fHQ+PXMuc2xpZGVDb3VudClyZXR1cm4hMTtzLnVubG9hZCgpLFwibnVtYmVyXCI9PXR5cGVvZiB0PzA9PT10JiYwPT09cy4kc2xpZGVzLmxlbmd0aD9pKGUpLmFwcGVuZFRvKHMuJHNsaWRlVHJhY2spOm8/aShlKS5pbnNlcnRCZWZvcmUocy4kc2xpZGVzLmVxKHQpKTppKGUpLmluc2VydEFmdGVyKHMuJHNsaWRlcy5lcSh0KSk6bz09PSEwP2koZSkucHJlcGVuZFRvKHMuJHNsaWRlVHJhY2spOmkoZSkuYXBwZW5kVG8ocy4kc2xpZGVUcmFjaykscy4kc2xpZGVzPXMuJHNsaWRlVHJhY2suY2hpbGRyZW4odGhpcy5vcHRpb25zLnNsaWRlKSxzLiRzbGlkZVRyYWNrLmNoaWxkcmVuKHRoaXMub3B0aW9ucy5zbGlkZSkuZGV0YWNoKCkscy4kc2xpZGVUcmFjay5hcHBlbmQocy4kc2xpZGVzKSxzLiRzbGlkZXMuZWFjaChmdW5jdGlvbihlLHQpe2kodCkuYXR0cihcImRhdGEtc2xpY2staW5kZXhcIixlKX0pLHMuJHNsaWRlc0NhY2hlPXMuJHNsaWRlcyxzLnJlaW5pdCgpfSxlLnByb3RvdHlwZS5hbmltYXRlSGVpZ2h0PWZ1bmN0aW9uKCl7dmFyIGk9dGhpcztpZigxPT09aS5vcHRpb25zLnNsaWRlc1RvU2hvdyYmaS5vcHRpb25zLmFkYXB0aXZlSGVpZ2h0PT09ITAmJmkub3B0aW9ucy52ZXJ0aWNhbD09PSExKXt2YXIgZT1pLiRzbGlkZXMuZXEoaS5jdXJyZW50U2xpZGUpLm91dGVySGVpZ2h0KCEwKTtpLiRsaXN0LmFuaW1hdGUoe2hlaWdodDplfSxpLm9wdGlvbnMuc3BlZWQpfX0sZS5wcm90b3R5cGUuYW5pbWF0ZVNsaWRlPWZ1bmN0aW9uKGUsdCl7dmFyIG89e30scz10aGlzO3MuYW5pbWF0ZUhlaWdodCgpLHMub3B0aW9ucy5ydGw9PT0hMCYmcy5vcHRpb25zLnZlcnRpY2FsPT09ITEmJihlPS1lKSxzLnRyYW5zZm9ybXNFbmFibGVkPT09ITE/cy5vcHRpb25zLnZlcnRpY2FsPT09ITE/cy4kc2xpZGVUcmFjay5hbmltYXRlKHtsZWZ0OmV9LHMub3B0aW9ucy5zcGVlZCxzLm9wdGlvbnMuZWFzaW5nLHQpOnMuJHNsaWRlVHJhY2suYW5pbWF0ZSh7dG9wOmV9LHMub3B0aW9ucy5zcGVlZCxzLm9wdGlvbnMuZWFzaW5nLHQpOnMuY3NzVHJhbnNpdGlvbnM9PT0hMT8ocy5vcHRpb25zLnJ0bD09PSEwJiYocy5jdXJyZW50TGVmdD0tcy5jdXJyZW50TGVmdCksaSh7YW5pbVN0YXJ0OnMuY3VycmVudExlZnR9KS5hbmltYXRlKHthbmltU3RhcnQ6ZX0se2R1cmF0aW9uOnMub3B0aW9ucy5zcGVlZCxlYXNpbmc6cy5vcHRpb25zLmVhc2luZyxzdGVwOmZ1bmN0aW9uKGkpe2k9TWF0aC5jZWlsKGkpLHMub3B0aW9ucy52ZXJ0aWNhbD09PSExPyhvW3MuYW5pbVR5cGVdPVwidHJhbnNsYXRlKFwiK2krXCJweCwgMHB4KVwiLHMuJHNsaWRlVHJhY2suY3NzKG8pKToob1tzLmFuaW1UeXBlXT1cInRyYW5zbGF0ZSgwcHgsXCIraStcInB4KVwiLHMuJHNsaWRlVHJhY2suY3NzKG8pKX0sY29tcGxldGU6ZnVuY3Rpb24oKXt0JiZ0LmNhbGwoKX19KSk6KHMuYXBwbHlUcmFuc2l0aW9uKCksZT1NYXRoLmNlaWwoZSkscy5vcHRpb25zLnZlcnRpY2FsPT09ITE/b1tzLmFuaW1UeXBlXT1cInRyYW5zbGF0ZTNkKFwiK2UrXCJweCwgMHB4LCAwcHgpXCI6b1tzLmFuaW1UeXBlXT1cInRyYW5zbGF0ZTNkKDBweCxcIitlK1wicHgsIDBweClcIixzLiRzbGlkZVRyYWNrLmNzcyhvKSx0JiZzZXRUaW1lb3V0KGZ1bmN0aW9uKCl7cy5kaXNhYmxlVHJhbnNpdGlvbigpLHQuY2FsbCgpfSxzLm9wdGlvbnMuc3BlZWQpKX0sZS5wcm90b3R5cGUuZ2V0TmF2VGFyZ2V0PWZ1bmN0aW9uKCl7dmFyIGU9dGhpcyx0PWUub3B0aW9ucy5hc05hdkZvcjtyZXR1cm4gdCYmbnVsbCE9PXQmJih0PWkodCkubm90KGUuJHNsaWRlcikpLHR9LGUucHJvdG90eXBlLmFzTmF2Rm9yPWZ1bmN0aW9uKGUpe3ZhciB0PXRoaXMsbz10LmdldE5hdlRhcmdldCgpO251bGwhPT1vJiZcIm9iamVjdFwiPT10eXBlb2YgbyYmby5lYWNoKGZ1bmN0aW9uKCl7dmFyIHQ9aSh0aGlzKS5zbGljayhcImdldFNsaWNrXCIpO3QudW5zbGlja2VkfHx0LnNsaWRlSGFuZGxlcihlLCEwKX0pfSxlLnByb3RvdHlwZS5hcHBseVRyYW5zaXRpb249ZnVuY3Rpb24oaSl7dmFyIGU9dGhpcyx0PXt9O2Uub3B0aW9ucy5mYWRlPT09ITE/dFtlLnRyYW5zaXRpb25UeXBlXT1lLnRyYW5zZm9ybVR5cGUrXCIgXCIrZS5vcHRpb25zLnNwZWVkK1wibXMgXCIrZS5vcHRpb25zLmNzc0Vhc2U6dFtlLnRyYW5zaXRpb25UeXBlXT1cIm9wYWNpdHkgXCIrZS5vcHRpb25zLnNwZWVkK1wibXMgXCIrZS5vcHRpb25zLmNzc0Vhc2UsZS5vcHRpb25zLmZhZGU9PT0hMT9lLiRzbGlkZVRyYWNrLmNzcyh0KTplLiRzbGlkZXMuZXEoaSkuY3NzKHQpfSxlLnByb3RvdHlwZS5hdXRvUGxheT1mdW5jdGlvbigpe3ZhciBpPXRoaXM7aS5hdXRvUGxheUNsZWFyKCksaS5zbGlkZUNvdW50Pmkub3B0aW9ucy5zbGlkZXNUb1Nob3cmJihpLmF1dG9QbGF5VGltZXI9c2V0SW50ZXJ2YWwoaS5hdXRvUGxheUl0ZXJhdG9yLGkub3B0aW9ucy5hdXRvcGxheVNwZWVkKSl9LGUucHJvdG90eXBlLmF1dG9QbGF5Q2xlYXI9ZnVuY3Rpb24oKXt2YXIgaT10aGlzO2kuYXV0b1BsYXlUaW1lciYmY2xlYXJJbnRlcnZhbChpLmF1dG9QbGF5VGltZXIpfSxlLnByb3RvdHlwZS5hdXRvUGxheUl0ZXJhdG9yPWZ1bmN0aW9uKCl7dmFyIGk9dGhpcyxlPWkuY3VycmVudFNsaWRlK2kub3B0aW9ucy5zbGlkZXNUb1Njcm9sbDtpLnBhdXNlZHx8aS5pbnRlcnJ1cHRlZHx8aS5mb2N1c3NlZHx8KGkub3B0aW9ucy5pbmZpbml0ZT09PSExJiYoMT09PWkuZGlyZWN0aW9uJiZpLmN1cnJlbnRTbGlkZSsxPT09aS5zbGlkZUNvdW50LTE/aS5kaXJlY3Rpb249MDowPT09aS5kaXJlY3Rpb24mJihlPWkuY3VycmVudFNsaWRlLWkub3B0aW9ucy5zbGlkZXNUb1Njcm9sbCxpLmN1cnJlbnRTbGlkZS0xPT09MCYmKGkuZGlyZWN0aW9uPTEpKSksaS5zbGlkZUhhbmRsZXIoZSkpfSxlLnByb3RvdHlwZS5idWlsZEFycm93cz1mdW5jdGlvbigpe3ZhciBlPXRoaXM7ZS5vcHRpb25zLmFycm93cz09PSEwJiYoZS4kcHJldkFycm93PWkoZS5vcHRpb25zLnByZXZBcnJvdykuYWRkQ2xhc3MoXCJzbGljay1hcnJvd1wiKSxlLiRuZXh0QXJyb3c9aShlLm9wdGlvbnMubmV4dEFycm93KS5hZGRDbGFzcyhcInNsaWNrLWFycm93XCIpLGUuc2xpZGVDb3VudD5lLm9wdGlvbnMuc2xpZGVzVG9TaG93PyhlLiRwcmV2QXJyb3cucmVtb3ZlQ2xhc3MoXCJzbGljay1oaWRkZW5cIikucmVtb3ZlQXR0cihcImFyaWEtaGlkZGVuIHRhYmluZGV4XCIpLGUuJG5leHRBcnJvdy5yZW1vdmVDbGFzcyhcInNsaWNrLWhpZGRlblwiKS5yZW1vdmVBdHRyKFwiYXJpYS1oaWRkZW4gdGFiaW5kZXhcIiksZS5odG1sRXhwci50ZXN0KGUub3B0aW9ucy5wcmV2QXJyb3cpJiZlLiRwcmV2QXJyb3cucHJlcGVuZFRvKGUub3B0aW9ucy5hcHBlbmRBcnJvd3MpLGUuaHRtbEV4cHIudGVzdChlLm9wdGlvbnMubmV4dEFycm93KSYmZS4kbmV4dEFycm93LmFwcGVuZFRvKGUub3B0aW9ucy5hcHBlbmRBcnJvd3MpLGUub3B0aW9ucy5pbmZpbml0ZSE9PSEwJiZlLiRwcmV2QXJyb3cuYWRkQ2xhc3MoXCJzbGljay1kaXNhYmxlZFwiKS5hdHRyKFwiYXJpYS1kaXNhYmxlZFwiLFwidHJ1ZVwiKSk6ZS4kcHJldkFycm93LmFkZChlLiRuZXh0QXJyb3cpLmFkZENsYXNzKFwic2xpY2staGlkZGVuXCIpLmF0dHIoe1wiYXJpYS1kaXNhYmxlZFwiOlwidHJ1ZVwiLHRhYmluZGV4OlwiLTFcIn0pKX0sZS5wcm90b3R5cGUuYnVpbGREb3RzPWZ1bmN0aW9uKCl7dmFyIGUsdCxvPXRoaXM7aWYoby5vcHRpb25zLmRvdHM9PT0hMCYmby5zbGlkZUNvdW50Pm8ub3B0aW9ucy5zbGlkZXNUb1Nob3cpe2ZvcihvLiRzbGlkZXIuYWRkQ2xhc3MoXCJzbGljay1kb3R0ZWRcIiksdD1pKFwiPHVsIC8+XCIpLmFkZENsYXNzKG8ub3B0aW9ucy5kb3RzQ2xhc3MpLGU9MDtlPD1vLmdldERvdENvdW50KCk7ZSs9MSl0LmFwcGVuZChpKFwiPGxpIC8+XCIpLmFwcGVuZChvLm9wdGlvbnMuY3VzdG9tUGFnaW5nLmNhbGwodGhpcyxvLGUpKSk7by4kZG90cz10LmFwcGVuZFRvKG8ub3B0aW9ucy5hcHBlbmREb3RzKSxvLiRkb3RzLmZpbmQoXCJsaVwiKS5maXJzdCgpLmFkZENsYXNzKFwic2xpY2stYWN0aXZlXCIpfX0sZS5wcm90b3R5cGUuYnVpbGRPdXQ9ZnVuY3Rpb24oKXt2YXIgZT10aGlzO2UuJHNsaWRlcz1lLiRzbGlkZXIuY2hpbGRyZW4oZS5vcHRpb25zLnNsaWRlK1wiOm5vdCguc2xpY2stY2xvbmVkKVwiKS5hZGRDbGFzcyhcInNsaWNrLXNsaWRlXCIpLGUuc2xpZGVDb3VudD1lLiRzbGlkZXMubGVuZ3RoLGUuJHNsaWRlcy5lYWNoKGZ1bmN0aW9uKGUsdCl7aSh0KS5hdHRyKFwiZGF0YS1zbGljay1pbmRleFwiLGUpLmRhdGEoXCJvcmlnaW5hbFN0eWxpbmdcIixpKHQpLmF0dHIoXCJzdHlsZVwiKXx8XCJcIil9KSxlLiRzbGlkZXIuYWRkQ2xhc3MoXCJzbGljay1zbGlkZXJcIiksZS4kc2xpZGVUcmFjaz0wPT09ZS5zbGlkZUNvdW50P2koJzxkaXYgY2xhc3M9XCJzbGljay10cmFja1wiLz4nKS5hcHBlbmRUbyhlLiRzbGlkZXIpOmUuJHNsaWRlcy53cmFwQWxsKCc8ZGl2IGNsYXNzPVwic2xpY2stdHJhY2tcIi8+JykucGFyZW50KCksZS4kbGlzdD1lLiRzbGlkZVRyYWNrLndyYXAoJzxkaXYgY2xhc3M9XCJzbGljay1saXN0XCIvPicpLnBhcmVudCgpLGUuJHNsaWRlVHJhY2suY3NzKFwib3BhY2l0eVwiLDApLGUub3B0aW9ucy5jZW50ZXJNb2RlIT09ITAmJmUub3B0aW9ucy5zd2lwZVRvU2xpZGUhPT0hMHx8KGUub3B0aW9ucy5zbGlkZXNUb1Njcm9sbD0xKSxpKFwiaW1nW2RhdGEtbGF6eV1cIixlLiRzbGlkZXIpLm5vdChcIltzcmNdXCIpLmFkZENsYXNzKFwic2xpY2stbG9hZGluZ1wiKSxlLnNldHVwSW5maW5pdGUoKSxlLmJ1aWxkQXJyb3dzKCksZS5idWlsZERvdHMoKSxlLnVwZGF0ZURvdHMoKSxlLnNldFNsaWRlQ2xhc3NlcyhcIm51bWJlclwiPT10eXBlb2YgZS5jdXJyZW50U2xpZGU/ZS5jdXJyZW50U2xpZGU6MCksZS5vcHRpb25zLmRyYWdnYWJsZT09PSEwJiZlLiRsaXN0LmFkZENsYXNzKFwiZHJhZ2dhYmxlXCIpfSxlLnByb3RvdHlwZS5idWlsZFJvd3M9ZnVuY3Rpb24oKXt2YXIgaSxlLHQsbyxzLG4scixsPXRoaXM7aWYobz1kb2N1bWVudC5jcmVhdGVEb2N1bWVudEZyYWdtZW50KCksbj1sLiRzbGlkZXIuY2hpbGRyZW4oKSxsLm9wdGlvbnMucm93cz4wKXtmb3Iocj1sLm9wdGlvbnMuc2xpZGVzUGVyUm93Kmwub3B0aW9ucy5yb3dzLHM9TWF0aC5jZWlsKG4ubGVuZ3RoL3IpLGk9MDtpPHM7aSsrKXt2YXIgZD1kb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO2ZvcihlPTA7ZTxsLm9wdGlvbnMucm93cztlKyspe3ZhciBhPWRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7Zm9yKHQ9MDt0PGwub3B0aW9ucy5zbGlkZXNQZXJSb3c7dCsrKXt2YXIgYz1pKnIrKGUqbC5vcHRpb25zLnNsaWRlc1BlclJvdyt0KTtuLmdldChjKSYmYS5hcHBlbmRDaGlsZChuLmdldChjKSl9ZC5hcHBlbmRDaGlsZChhKX1vLmFwcGVuZENoaWxkKGQpfWwuJHNsaWRlci5lbXB0eSgpLmFwcGVuZChvKSxsLiRzbGlkZXIuY2hpbGRyZW4oKS5jaGlsZHJlbigpLmNoaWxkcmVuKCkuY3NzKHt3aWR0aDoxMDAvbC5vcHRpb25zLnNsaWRlc1BlclJvdytcIiVcIixkaXNwbGF5OlwiaW5saW5lLWJsb2NrXCJ9KX19LGUucHJvdG90eXBlLmNoZWNrUmVzcG9uc2l2ZT1mdW5jdGlvbihlLHQpe3ZhciBvLHMsbixyPXRoaXMsbD0hMSxkPXIuJHNsaWRlci53aWR0aCgpLGE9d2luZG93LmlubmVyV2lkdGh8fGkod2luZG93KS53aWR0aCgpO2lmKFwid2luZG93XCI9PT1yLnJlc3BvbmRUbz9uPWE6XCJzbGlkZXJcIj09PXIucmVzcG9uZFRvP249ZDpcIm1pblwiPT09ci5yZXNwb25kVG8mJihuPU1hdGgubWluKGEsZCkpLHIub3B0aW9ucy5yZXNwb25zaXZlJiZyLm9wdGlvbnMucmVzcG9uc2l2ZS5sZW5ndGgmJm51bGwhPT1yLm9wdGlvbnMucmVzcG9uc2l2ZSl7cz1udWxsO2ZvcihvIGluIHIuYnJlYWtwb2ludHMpci5icmVha3BvaW50cy5oYXNPd25Qcm9wZXJ0eShvKSYmKHIub3JpZ2luYWxTZXR0aW5ncy5tb2JpbGVGaXJzdD09PSExP248ci5icmVha3BvaW50c1tvXSYmKHM9ci5icmVha3BvaW50c1tvXSk6bj5yLmJyZWFrcG9pbnRzW29dJiYocz1yLmJyZWFrcG9pbnRzW29dKSk7bnVsbCE9PXM/bnVsbCE9PXIuYWN0aXZlQnJlYWtwb2ludD8ocyE9PXIuYWN0aXZlQnJlYWtwb2ludHx8dCkmJihyLmFjdGl2ZUJyZWFrcG9pbnQ9cyxcInVuc2xpY2tcIj09PXIuYnJlYWtwb2ludFNldHRpbmdzW3NdP3IudW5zbGljayhzKTooci5vcHRpb25zPWkuZXh0ZW5kKHt9LHIub3JpZ2luYWxTZXR0aW5ncyxyLmJyZWFrcG9pbnRTZXR0aW5nc1tzXSksZT09PSEwJiYoci5jdXJyZW50U2xpZGU9ci5vcHRpb25zLmluaXRpYWxTbGlkZSksci5yZWZyZXNoKGUpKSxsPXMpOihyLmFjdGl2ZUJyZWFrcG9pbnQ9cyxcInVuc2xpY2tcIj09PXIuYnJlYWtwb2ludFNldHRpbmdzW3NdP3IudW5zbGljayhzKTooci5vcHRpb25zPWkuZXh0ZW5kKHt9LHIub3JpZ2luYWxTZXR0aW5ncyxyLmJyZWFrcG9pbnRTZXR0aW5nc1tzXSksZT09PSEwJiYoci5jdXJyZW50U2xpZGU9ci5vcHRpb25zLmluaXRpYWxTbGlkZSksci5yZWZyZXNoKGUpKSxsPXMpOm51bGwhPT1yLmFjdGl2ZUJyZWFrcG9pbnQmJihyLmFjdGl2ZUJyZWFrcG9pbnQ9bnVsbCxyLm9wdGlvbnM9ci5vcmlnaW5hbFNldHRpbmdzLGU9PT0hMCYmKHIuY3VycmVudFNsaWRlPXIub3B0aW9ucy5pbml0aWFsU2xpZGUpLHIucmVmcmVzaChlKSxsPXMpLGV8fGw9PT0hMXx8ci4kc2xpZGVyLnRyaWdnZXIoXCJicmVha3BvaW50XCIsW3IsbF0pfX0sZS5wcm90b3R5cGUuY2hhbmdlU2xpZGU9ZnVuY3Rpb24oZSx0KXt2YXIgbyxzLG4scj10aGlzLGw9aShlLmN1cnJlbnRUYXJnZXQpO3N3aXRjaChsLmlzKFwiYVwiKSYmZS5wcmV2ZW50RGVmYXVsdCgpLGwuaXMoXCJsaVwiKXx8KGw9bC5jbG9zZXN0KFwibGlcIikpLG49ci5zbGlkZUNvdW50JXIub3B0aW9ucy5zbGlkZXNUb1Njcm9sbCE9PTAsbz1uPzA6KHIuc2xpZGVDb3VudC1yLmN1cnJlbnRTbGlkZSklci5vcHRpb25zLnNsaWRlc1RvU2Nyb2xsLGUuZGF0YS5tZXNzYWdlKXtjYXNlXCJwcmV2aW91c1wiOnM9MD09PW8/ci5vcHRpb25zLnNsaWRlc1RvU2Nyb2xsOnIub3B0aW9ucy5zbGlkZXNUb1Nob3ctbyxyLnNsaWRlQ291bnQ+ci5vcHRpb25zLnNsaWRlc1RvU2hvdyYmci5zbGlkZUhhbmRsZXIoci5jdXJyZW50U2xpZGUtcywhMSx0KTticmVhaztjYXNlXCJuZXh0XCI6cz0wPT09bz9yLm9wdGlvbnMuc2xpZGVzVG9TY3JvbGw6byxyLnNsaWRlQ291bnQ+ci5vcHRpb25zLnNsaWRlc1RvU2hvdyYmci5zbGlkZUhhbmRsZXIoci5jdXJyZW50U2xpZGUrcywhMSx0KTticmVhaztjYXNlXCJpbmRleFwiOnZhciBkPTA9PT1lLmRhdGEuaW5kZXg/MDplLmRhdGEuaW5kZXh8fGwuaW5kZXgoKSpyLm9wdGlvbnMuc2xpZGVzVG9TY3JvbGw7ci5zbGlkZUhhbmRsZXIoci5jaGVja05hdmlnYWJsZShkKSwhMSx0KSxsLmNoaWxkcmVuKCkudHJpZ2dlcihcImZvY3VzXCIpO2JyZWFrO2RlZmF1bHQ6cmV0dXJufX0sZS5wcm90b3R5cGUuY2hlY2tOYXZpZ2FibGU9ZnVuY3Rpb24oaSl7dmFyIGUsdCxvPXRoaXM7aWYoZT1vLmdldE5hdmlnYWJsZUluZGV4ZXMoKSx0PTAsaT5lW2UubGVuZ3RoLTFdKWk9ZVtlLmxlbmd0aC0xXTtlbHNlIGZvcih2YXIgcyBpbiBlKXtpZihpPGVbc10pe2k9dDticmVha310PWVbc119cmV0dXJuIGl9LGUucHJvdG90eXBlLmNsZWFuVXBFdmVudHM9ZnVuY3Rpb24oKXt2YXIgZT10aGlzO2Uub3B0aW9ucy5kb3RzJiZudWxsIT09ZS4kZG90cyYmKGkoXCJsaVwiLGUuJGRvdHMpLm9mZihcImNsaWNrLnNsaWNrXCIsZS5jaGFuZ2VTbGlkZSkub2ZmKFwibW91c2VlbnRlci5zbGlja1wiLGkucHJveHkoZS5pbnRlcnJ1cHQsZSwhMCkpLm9mZihcIm1vdXNlbGVhdmUuc2xpY2tcIixpLnByb3h5KGUuaW50ZXJydXB0LGUsITEpKSxlLm9wdGlvbnMuYWNjZXNzaWJpbGl0eT09PSEwJiZlLiRkb3RzLm9mZihcImtleWRvd24uc2xpY2tcIixlLmtleUhhbmRsZXIpKSxlLiRzbGlkZXIub2ZmKFwiZm9jdXMuc2xpY2sgYmx1ci5zbGlja1wiKSxlLm9wdGlvbnMuYXJyb3dzPT09ITAmJmUuc2xpZGVDb3VudD5lLm9wdGlvbnMuc2xpZGVzVG9TaG93JiYoZS4kcHJldkFycm93JiZlLiRwcmV2QXJyb3cub2ZmKFwiY2xpY2suc2xpY2tcIixlLmNoYW5nZVNsaWRlKSxlLiRuZXh0QXJyb3cmJmUuJG5leHRBcnJvdy5vZmYoXCJjbGljay5zbGlja1wiLGUuY2hhbmdlU2xpZGUpLGUub3B0aW9ucy5hY2Nlc3NpYmlsaXR5PT09ITAmJihlLiRwcmV2QXJyb3cmJmUuJHByZXZBcnJvdy5vZmYoXCJrZXlkb3duLnNsaWNrXCIsZS5rZXlIYW5kbGVyKSxlLiRuZXh0QXJyb3cmJmUuJG5leHRBcnJvdy5vZmYoXCJrZXlkb3duLnNsaWNrXCIsZS5rZXlIYW5kbGVyKSkpLGUuJGxpc3Qub2ZmKFwidG91Y2hzdGFydC5zbGljayBtb3VzZWRvd24uc2xpY2tcIixlLnN3aXBlSGFuZGxlciksZS4kbGlzdC5vZmYoXCJ0b3VjaG1vdmUuc2xpY2sgbW91c2Vtb3ZlLnNsaWNrXCIsZS5zd2lwZUhhbmRsZXIpLGUuJGxpc3Qub2ZmKFwidG91Y2hlbmQuc2xpY2sgbW91c2V1cC5zbGlja1wiLGUuc3dpcGVIYW5kbGVyKSxlLiRsaXN0Lm9mZihcInRvdWNoY2FuY2VsLnNsaWNrIG1vdXNlbGVhdmUuc2xpY2tcIixlLnN3aXBlSGFuZGxlciksZS4kbGlzdC5vZmYoXCJjbGljay5zbGlja1wiLGUuY2xpY2tIYW5kbGVyKSxpKGRvY3VtZW50KS5vZmYoZS52aXNpYmlsaXR5Q2hhbmdlLGUudmlzaWJpbGl0eSksZS5jbGVhblVwU2xpZGVFdmVudHMoKSxlLm9wdGlvbnMuYWNjZXNzaWJpbGl0eT09PSEwJiZlLiRsaXN0Lm9mZihcImtleWRvd24uc2xpY2tcIixlLmtleUhhbmRsZXIpLGUub3B0aW9ucy5mb2N1c09uU2VsZWN0PT09ITAmJmkoZS4kc2xpZGVUcmFjaykuY2hpbGRyZW4oKS5vZmYoXCJjbGljay5zbGlja1wiLGUuc2VsZWN0SGFuZGxlciksaSh3aW5kb3cpLm9mZihcIm9yaWVudGF0aW9uY2hhbmdlLnNsaWNrLnNsaWNrLVwiK2UuaW5zdGFuY2VVaWQsZS5vcmllbnRhdGlvbkNoYW5nZSksaSh3aW5kb3cpLm9mZihcInJlc2l6ZS5zbGljay5zbGljay1cIitlLmluc3RhbmNlVWlkLGUucmVzaXplKSxpKFwiW2RyYWdnYWJsZSE9dHJ1ZV1cIixlLiRzbGlkZVRyYWNrKS5vZmYoXCJkcmFnc3RhcnRcIixlLnByZXZlbnREZWZhdWx0KSxpKHdpbmRvdykub2ZmKFwibG9hZC5zbGljay5zbGljay1cIitlLmluc3RhbmNlVWlkLGUuc2V0UG9zaXRpb24pfSxlLnByb3RvdHlwZS5jbGVhblVwU2xpZGVFdmVudHM9ZnVuY3Rpb24oKXt2YXIgZT10aGlzO2UuJGxpc3Qub2ZmKFwibW91c2VlbnRlci5zbGlja1wiLGkucHJveHkoZS5pbnRlcnJ1cHQsZSwhMCkpLGUuJGxpc3Qub2ZmKFwibW91c2VsZWF2ZS5zbGlja1wiLGkucHJveHkoZS5pbnRlcnJ1cHQsZSwhMSkpfSxlLnByb3RvdHlwZS5jbGVhblVwUm93cz1mdW5jdGlvbigpe3ZhciBpLGU9dGhpcztlLm9wdGlvbnMucm93cz4wJiYoaT1lLiRzbGlkZXMuY2hpbGRyZW4oKS5jaGlsZHJlbigpLGkucmVtb3ZlQXR0cihcInN0eWxlXCIpLGUuJHNsaWRlci5lbXB0eSgpLmFwcGVuZChpKSl9LGUucHJvdG90eXBlLmNsaWNrSGFuZGxlcj1mdW5jdGlvbihpKXt2YXIgZT10aGlzO2Uuc2hvdWxkQ2xpY2s9PT0hMSYmKGkuc3RvcEltbWVkaWF0ZVByb3BhZ2F0aW9uKCksaS5zdG9wUHJvcGFnYXRpb24oKSxpLnByZXZlbnREZWZhdWx0KCkpfSxlLnByb3RvdHlwZS5kZXN0cm95PWZ1bmN0aW9uKGUpe3ZhciB0PXRoaXM7dC5hdXRvUGxheUNsZWFyKCksdC50b3VjaE9iamVjdD17fSx0LmNsZWFuVXBFdmVudHMoKSxpKFwiLnNsaWNrLWNsb25lZFwiLHQuJHNsaWRlcikuZGV0YWNoKCksdC4kZG90cyYmdC4kZG90cy5yZW1vdmUoKSx0LiRwcmV2QXJyb3cmJnQuJHByZXZBcnJvdy5sZW5ndGgmJih0LiRwcmV2QXJyb3cucmVtb3ZlQ2xhc3MoXCJzbGljay1kaXNhYmxlZCBzbGljay1hcnJvdyBzbGljay1oaWRkZW5cIikucmVtb3ZlQXR0cihcImFyaWEtaGlkZGVuIGFyaWEtZGlzYWJsZWQgdGFiaW5kZXhcIikuY3NzKFwiZGlzcGxheVwiLFwiXCIpLHQuaHRtbEV4cHIudGVzdCh0Lm9wdGlvbnMucHJldkFycm93KSYmdC4kcHJldkFycm93LnJlbW92ZSgpKSx0LiRuZXh0QXJyb3cmJnQuJG5leHRBcnJvdy5sZW5ndGgmJih0LiRuZXh0QXJyb3cucmVtb3ZlQ2xhc3MoXCJzbGljay1kaXNhYmxlZCBzbGljay1hcnJvdyBzbGljay1oaWRkZW5cIikucmVtb3ZlQXR0cihcImFyaWEtaGlkZGVuIGFyaWEtZGlzYWJsZWQgdGFiaW5kZXhcIikuY3NzKFwiZGlzcGxheVwiLFwiXCIpLHQuaHRtbEV4cHIudGVzdCh0Lm9wdGlvbnMubmV4dEFycm93KSYmdC4kbmV4dEFycm93LnJlbW92ZSgpKSx0LiRzbGlkZXMmJih0LiRzbGlkZXMucmVtb3ZlQ2xhc3MoXCJzbGljay1zbGlkZSBzbGljay1hY3RpdmUgc2xpY2stY2VudGVyIHNsaWNrLXZpc2libGUgc2xpY2stY3VycmVudFwiKS5yZW1vdmVBdHRyKFwiYXJpYS1oaWRkZW5cIikucmVtb3ZlQXR0cihcImRhdGEtc2xpY2staW5kZXhcIikuZWFjaChmdW5jdGlvbigpe2kodGhpcykuYXR0cihcInN0eWxlXCIsaSh0aGlzKS5kYXRhKFwib3JpZ2luYWxTdHlsaW5nXCIpKX0pLHQuJHNsaWRlVHJhY2suY2hpbGRyZW4odGhpcy5vcHRpb25zLnNsaWRlKS5kZXRhY2goKSx0LiRzbGlkZVRyYWNrLmRldGFjaCgpLHQuJGxpc3QuZGV0YWNoKCksdC4kc2xpZGVyLmFwcGVuZCh0LiRzbGlkZXMpKSx0LmNsZWFuVXBSb3dzKCksdC4kc2xpZGVyLnJlbW92ZUNsYXNzKFwic2xpY2stc2xpZGVyXCIpLHQuJHNsaWRlci5yZW1vdmVDbGFzcyhcInNsaWNrLWluaXRpYWxpemVkXCIpLHQuJHNsaWRlci5yZW1vdmVDbGFzcyhcInNsaWNrLWRvdHRlZFwiKSx0LnVuc2xpY2tlZD0hMCxlfHx0LiRzbGlkZXIudHJpZ2dlcihcImRlc3Ryb3lcIixbdF0pfSxlLnByb3RvdHlwZS5kaXNhYmxlVHJhbnNpdGlvbj1mdW5jdGlvbihpKXt2YXIgZT10aGlzLHQ9e307dFtlLnRyYW5zaXRpb25UeXBlXT1cIlwiLGUub3B0aW9ucy5mYWRlPT09ITE/ZS4kc2xpZGVUcmFjay5jc3ModCk6ZS4kc2xpZGVzLmVxKGkpLmNzcyh0KX0sZS5wcm90b3R5cGUuZmFkZVNsaWRlPWZ1bmN0aW9uKGksZSl7dmFyIHQ9dGhpczt0LmNzc1RyYW5zaXRpb25zPT09ITE/KHQuJHNsaWRlcy5lcShpKS5jc3Moe3pJbmRleDp0Lm9wdGlvbnMuekluZGV4fSksdC4kc2xpZGVzLmVxKGkpLmFuaW1hdGUoe29wYWNpdHk6MX0sdC5vcHRpb25zLnNwZWVkLHQub3B0aW9ucy5lYXNpbmcsZSkpOih0LmFwcGx5VHJhbnNpdGlvbihpKSx0LiRzbGlkZXMuZXEoaSkuY3NzKHtvcGFjaXR5OjEsekluZGV4OnQub3B0aW9ucy56SW5kZXh9KSxlJiZzZXRUaW1lb3V0KGZ1bmN0aW9uKCl7dC5kaXNhYmxlVHJhbnNpdGlvbihpKSxlLmNhbGwoKX0sdC5vcHRpb25zLnNwZWVkKSl9LGUucHJvdG90eXBlLmZhZGVTbGlkZU91dD1mdW5jdGlvbihpKXt2YXIgZT10aGlzO2UuY3NzVHJhbnNpdGlvbnM9PT0hMT9lLiRzbGlkZXMuZXEoaSkuYW5pbWF0ZSh7b3BhY2l0eTowLHpJbmRleDplLm9wdGlvbnMuekluZGV4LTJ9LGUub3B0aW9ucy5zcGVlZCxlLm9wdGlvbnMuZWFzaW5nKTooZS5hcHBseVRyYW5zaXRpb24oaSksZS4kc2xpZGVzLmVxKGkpLmNzcyh7b3BhY2l0eTowLHpJbmRleDplLm9wdGlvbnMuekluZGV4LTJ9KSl9LGUucHJvdG90eXBlLmZpbHRlclNsaWRlcz1lLnByb3RvdHlwZS5zbGlja0ZpbHRlcj1mdW5jdGlvbihpKXt2YXIgZT10aGlzO251bGwhPT1pJiYoZS4kc2xpZGVzQ2FjaGU9ZS4kc2xpZGVzLGUudW5sb2FkKCksZS4kc2xpZGVUcmFjay5jaGlsZHJlbih0aGlzLm9wdGlvbnMuc2xpZGUpLmRldGFjaCgpLGUuJHNsaWRlc0NhY2hlLmZpbHRlcihpKS5hcHBlbmRUbyhlLiRzbGlkZVRyYWNrKSxlLnJlaW5pdCgpKX0sZS5wcm90b3R5cGUuZm9jdXNIYW5kbGVyPWZ1bmN0aW9uKCl7dmFyIGU9dGhpcztlLiRzbGlkZXIub2ZmKFwiZm9jdXMuc2xpY2sgYmx1ci5zbGlja1wiKS5vbihcImZvY3VzLnNsaWNrXCIsXCIqXCIsZnVuY3Rpb24odCl7dmFyIG89aSh0aGlzKTtzZXRUaW1lb3V0KGZ1bmN0aW9uKCl7ZS5vcHRpb25zLnBhdXNlT25Gb2N1cyYmby5pcyhcIjpmb2N1c1wiKSYmKGUuZm9jdXNzZWQ9ITAsZS5hdXRvUGxheSgpKX0sMCl9KS5vbihcImJsdXIuc2xpY2tcIixcIipcIixmdW5jdGlvbih0KXtpKHRoaXMpO2Uub3B0aW9ucy5wYXVzZU9uRm9jdXMmJihlLmZvY3Vzc2VkPSExLGUuYXV0b1BsYXkoKSl9KX0sZS5wcm90b3R5cGUuZ2V0Q3VycmVudD1lLnByb3RvdHlwZS5zbGlja0N1cnJlbnRTbGlkZT1mdW5jdGlvbigpe3ZhciBpPXRoaXM7cmV0dXJuIGkuY3VycmVudFNsaWRlfSxlLnByb3RvdHlwZS5nZXREb3RDb3VudD1mdW5jdGlvbigpe3ZhciBpPXRoaXMsZT0wLHQ9MCxvPTA7aWYoaS5vcHRpb25zLmluZmluaXRlPT09ITApaWYoaS5zbGlkZUNvdW50PD1pLm9wdGlvbnMuc2xpZGVzVG9TaG93KSsrbztlbHNlIGZvcig7ZTxpLnNsaWRlQ291bnQ7KSsrbyxlPXQraS5vcHRpb25zLnNsaWRlc1RvU2Nyb2xsLHQrPWkub3B0aW9ucy5zbGlkZXNUb1Njcm9sbDw9aS5vcHRpb25zLnNsaWRlc1RvU2hvdz9pLm9wdGlvbnMuc2xpZGVzVG9TY3JvbGw6aS5vcHRpb25zLnNsaWRlc1RvU2hvdztlbHNlIGlmKGkub3B0aW9ucy5jZW50ZXJNb2RlPT09ITApbz1pLnNsaWRlQ291bnQ7ZWxzZSBpZihpLm9wdGlvbnMuYXNOYXZGb3IpZm9yKDtlPGkuc2xpZGVDb3VudDspKytvLGU9dCtpLm9wdGlvbnMuc2xpZGVzVG9TY3JvbGwsdCs9aS5vcHRpb25zLnNsaWRlc1RvU2Nyb2xsPD1pLm9wdGlvbnMuc2xpZGVzVG9TaG93P2kub3B0aW9ucy5zbGlkZXNUb1Njcm9sbDppLm9wdGlvbnMuc2xpZGVzVG9TaG93O2Vsc2Ugbz0xK01hdGguY2VpbCgoaS5zbGlkZUNvdW50LWkub3B0aW9ucy5zbGlkZXNUb1Nob3cpL2kub3B0aW9ucy5zbGlkZXNUb1Njcm9sbCk7cmV0dXJuIG8tMX0sZS5wcm90b3R5cGUuZ2V0TGVmdD1mdW5jdGlvbihpKXt2YXIgZSx0LG8scyxuPXRoaXMscj0wO3JldHVybiBuLnNsaWRlT2Zmc2V0PTAsdD1uLiRzbGlkZXMuZmlyc3QoKS5vdXRlckhlaWdodCghMCksbi5vcHRpb25zLmluZmluaXRlPT09ITA/KG4uc2xpZGVDb3VudD5uLm9wdGlvbnMuc2xpZGVzVG9TaG93JiYobi5zbGlkZU9mZnNldD1uLnNsaWRlV2lkdGgqbi5vcHRpb25zLnNsaWRlc1RvU2hvdyotMSxzPS0xLG4ub3B0aW9ucy52ZXJ0aWNhbD09PSEwJiZuLm9wdGlvbnMuY2VudGVyTW9kZT09PSEwJiYoMj09PW4ub3B0aW9ucy5zbGlkZXNUb1Nob3c/cz0tMS41OjE9PT1uLm9wdGlvbnMuc2xpZGVzVG9TaG93JiYocz0tMikpLHI9dCpuLm9wdGlvbnMuc2xpZGVzVG9TaG93KnMpLG4uc2xpZGVDb3VudCVuLm9wdGlvbnMuc2xpZGVzVG9TY3JvbGwhPT0wJiZpK24ub3B0aW9ucy5zbGlkZXNUb1Njcm9sbD5uLnNsaWRlQ291bnQmJm4uc2xpZGVDb3VudD5uLm9wdGlvbnMuc2xpZGVzVG9TaG93JiYoaT5uLnNsaWRlQ291bnQ/KG4uc2xpZGVPZmZzZXQ9KG4ub3B0aW9ucy5zbGlkZXNUb1Nob3ctKGktbi5zbGlkZUNvdW50KSkqbi5zbGlkZVdpZHRoKi0xLHI9KG4ub3B0aW9ucy5zbGlkZXNUb1Nob3ctKGktbi5zbGlkZUNvdW50KSkqdCotMSk6KG4uc2xpZGVPZmZzZXQ9bi5zbGlkZUNvdW50JW4ub3B0aW9ucy5zbGlkZXNUb1Njcm9sbCpuLnNsaWRlV2lkdGgqLTEscj1uLnNsaWRlQ291bnQlbi5vcHRpb25zLnNsaWRlc1RvU2Nyb2xsKnQqLTEpKSk6aStuLm9wdGlvbnMuc2xpZGVzVG9TaG93Pm4uc2xpZGVDb3VudCYmKG4uc2xpZGVPZmZzZXQ9KGkrbi5vcHRpb25zLnNsaWRlc1RvU2hvdy1uLnNsaWRlQ291bnQpKm4uc2xpZGVXaWR0aCxyPShpK24ub3B0aW9ucy5zbGlkZXNUb1Nob3ctbi5zbGlkZUNvdW50KSp0KSxuLnNsaWRlQ291bnQ8PW4ub3B0aW9ucy5zbGlkZXNUb1Nob3cmJihuLnNsaWRlT2Zmc2V0PTAscj0wKSxuLm9wdGlvbnMuY2VudGVyTW9kZT09PSEwJiZuLnNsaWRlQ291bnQ8PW4ub3B0aW9ucy5zbGlkZXNUb1Nob3c/bi5zbGlkZU9mZnNldD1uLnNsaWRlV2lkdGgqTWF0aC5mbG9vcihuLm9wdGlvbnMuc2xpZGVzVG9TaG93KS8yLW4uc2xpZGVXaWR0aCpuLnNsaWRlQ291bnQvMjpuLm9wdGlvbnMuY2VudGVyTW9kZT09PSEwJiZuLm9wdGlvbnMuaW5maW5pdGU9PT0hMD9uLnNsaWRlT2Zmc2V0Kz1uLnNsaWRlV2lkdGgqTWF0aC5mbG9vcihuLm9wdGlvbnMuc2xpZGVzVG9TaG93LzIpLW4uc2xpZGVXaWR0aDpuLm9wdGlvbnMuY2VudGVyTW9kZT09PSEwJiYobi5zbGlkZU9mZnNldD0wLG4uc2xpZGVPZmZzZXQrPW4uc2xpZGVXaWR0aCpNYXRoLmZsb29yKG4ub3B0aW9ucy5zbGlkZXNUb1Nob3cvMikpLGU9bi5vcHRpb25zLnZlcnRpY2FsPT09ITE/aSpuLnNsaWRlV2lkdGgqLTErbi5zbGlkZU9mZnNldDppKnQqLTErcixuLm9wdGlvbnMudmFyaWFibGVXaWR0aD09PSEwJiYobz1uLnNsaWRlQ291bnQ8PW4ub3B0aW9ucy5zbGlkZXNUb1Nob3d8fG4ub3B0aW9ucy5pbmZpbml0ZT09PSExP24uJHNsaWRlVHJhY2suY2hpbGRyZW4oXCIuc2xpY2stc2xpZGVcIikuZXEoaSk6bi4kc2xpZGVUcmFjay5jaGlsZHJlbihcIi5zbGljay1zbGlkZVwiKS5lcShpK24ub3B0aW9ucy5zbGlkZXNUb1Nob3cpLGU9bi5vcHRpb25zLnJ0bD09PSEwP29bMF0/KG4uJHNsaWRlVHJhY2sud2lkdGgoKS1vWzBdLm9mZnNldExlZnQtby53aWR0aCgpKSotMTowOm9bMF0/b1swXS5vZmZzZXRMZWZ0Ki0xOjAsbi5vcHRpb25zLmNlbnRlck1vZGU9PT0hMCYmKG89bi5zbGlkZUNvdW50PD1uLm9wdGlvbnMuc2xpZGVzVG9TaG93fHxuLm9wdGlvbnMuaW5maW5pdGU9PT0hMT9uLiRzbGlkZVRyYWNrLmNoaWxkcmVuKFwiLnNsaWNrLXNsaWRlXCIpLmVxKGkpOm4uJHNsaWRlVHJhY2suY2hpbGRyZW4oXCIuc2xpY2stc2xpZGVcIikuZXEoaStuLm9wdGlvbnMuc2xpZGVzVG9TaG93KzEpLGU9bi5vcHRpb25zLnJ0bD09PSEwP29bMF0/KG4uJHNsaWRlVHJhY2sud2lkdGgoKS1vWzBdLm9mZnNldExlZnQtby53aWR0aCgpKSotMTowOm9bMF0/b1swXS5vZmZzZXRMZWZ0Ki0xOjAsZSs9KG4uJGxpc3Qud2lkdGgoKS1vLm91dGVyV2lkdGgoKSkvMikpLGV9LGUucHJvdG90eXBlLmdldE9wdGlvbj1lLnByb3RvdHlwZS5zbGlja0dldE9wdGlvbj1mdW5jdGlvbihpKXt2YXIgZT10aGlzO3JldHVybiBlLm9wdGlvbnNbaV19LGUucHJvdG90eXBlLmdldE5hdmlnYWJsZUluZGV4ZXM9ZnVuY3Rpb24oKXt2YXIgaSxlPXRoaXMsdD0wLG89MCxzPVtdO2ZvcihlLm9wdGlvbnMuaW5maW5pdGU9PT0hMT9pPWUuc2xpZGVDb3VudDoodD1lLm9wdGlvbnMuc2xpZGVzVG9TY3JvbGwqLTEsbz1lLm9wdGlvbnMuc2xpZGVzVG9TY3JvbGwqLTEsaT0yKmUuc2xpZGVDb3VudCk7dDxpOylzLnB1c2godCksdD1vK2Uub3B0aW9ucy5zbGlkZXNUb1Njcm9sbCxvKz1lLm9wdGlvbnMuc2xpZGVzVG9TY3JvbGw8PWUub3B0aW9ucy5zbGlkZXNUb1Nob3c/ZS5vcHRpb25zLnNsaWRlc1RvU2Nyb2xsOmUub3B0aW9ucy5zbGlkZXNUb1Nob3c7cmV0dXJuIHN9LGUucHJvdG90eXBlLmdldFNsaWNrPWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXN9LGUucHJvdG90eXBlLmdldFNsaWRlQ291bnQ9ZnVuY3Rpb24oKXt2YXIgZSx0LG8scyxuPXRoaXM7cmV0dXJuIHM9bi5vcHRpb25zLmNlbnRlck1vZGU9PT0hMD9NYXRoLmZsb29yKG4uJGxpc3Qud2lkdGgoKS8yKTowLG89bi5zd2lwZUxlZnQqLTErcyxuLm9wdGlvbnMuc3dpcGVUb1NsaWRlPT09ITA/KG4uJHNsaWRlVHJhY2suZmluZChcIi5zbGljay1zbGlkZVwiKS5lYWNoKGZ1bmN0aW9uKGUscyl7dmFyIHIsbCxkO2lmKHI9aShzKS5vdXRlcldpZHRoKCksbD1zLm9mZnNldExlZnQsbi5vcHRpb25zLmNlbnRlck1vZGUhPT0hMCYmKGwrPXIvMiksZD1sK3IsbzxkKXJldHVybiB0PXMsITF9KSxlPU1hdGguYWJzKGkodCkuYXR0cihcImRhdGEtc2xpY2staW5kZXhcIiktbi5jdXJyZW50U2xpZGUpfHwxKTpuLm9wdGlvbnMuc2xpZGVzVG9TY3JvbGx9LGUucHJvdG90eXBlLmdvVG89ZS5wcm90b3R5cGUuc2xpY2tHb1RvPWZ1bmN0aW9uKGksZSl7dmFyIHQ9dGhpczt0LmNoYW5nZVNsaWRlKHtkYXRhOnttZXNzYWdlOlwiaW5kZXhcIixpbmRleDpwYXJzZUludChpKX19LGUpfSxlLnByb3RvdHlwZS5pbml0PWZ1bmN0aW9uKGUpe3ZhciB0PXRoaXM7aSh0LiRzbGlkZXIpLmhhc0NsYXNzKFwic2xpY2staW5pdGlhbGl6ZWRcIil8fChpKHQuJHNsaWRlcikuYWRkQ2xhc3MoXCJzbGljay1pbml0aWFsaXplZFwiKSx0LmJ1aWxkUm93cygpLHQuYnVpbGRPdXQoKSx0LnNldFByb3BzKCksdC5zdGFydExvYWQoKSx0LmxvYWRTbGlkZXIoKSx0LmluaXRpYWxpemVFdmVudHMoKSx0LnVwZGF0ZUFycm93cygpLHQudXBkYXRlRG90cygpLHQuY2hlY2tSZXNwb25zaXZlKCEwKSx0LmZvY3VzSGFuZGxlcigpKSxlJiZ0LiRzbGlkZXIudHJpZ2dlcihcImluaXRcIixbdF0pLHQub3B0aW9ucy5hY2Nlc3NpYmlsaXR5PT09ITAmJnQuaW5pdEFEQSgpLHQub3B0aW9ucy5hdXRvcGxheSYmKHQucGF1c2VkPSExLHQuYXV0b1BsYXkoKSl9LGUucHJvdG90eXBlLmluaXRBREE9ZnVuY3Rpb24oKXt2YXIgZT10aGlzLHQ9TWF0aC5jZWlsKGUuc2xpZGVDb3VudC9lLm9wdGlvbnMuc2xpZGVzVG9TaG93KSxvPWUuZ2V0TmF2aWdhYmxlSW5kZXhlcygpLmZpbHRlcihmdW5jdGlvbihpKXtyZXR1cm4gaT49MCYmaTxlLnNsaWRlQ291bnR9KTtlLiRzbGlkZXMuYWRkKGUuJHNsaWRlVHJhY2suZmluZChcIi5zbGljay1jbG9uZWRcIikpLmF0dHIoe1wiYXJpYS1oaWRkZW5cIjpcInRydWVcIix0YWJpbmRleDpcIi0xXCJ9KS5maW5kKFwiYSwgaW5wdXQsIGJ1dHRvbiwgc2VsZWN0XCIpLmF0dHIoe3RhYmluZGV4OlwiLTFcIn0pLG51bGwhPT1lLiRkb3RzJiYoZS4kc2xpZGVzLm5vdChlLiRzbGlkZVRyYWNrLmZpbmQoXCIuc2xpY2stY2xvbmVkXCIpKS5lYWNoKGZ1bmN0aW9uKHQpe3ZhciBzPW8uaW5kZXhPZih0KTtpZihpKHRoaXMpLmF0dHIoe3JvbGU6XCJ0YWJwYW5lbFwiLGlkOlwic2xpY2stc2xpZGVcIitlLmluc3RhbmNlVWlkK3QsdGFiaW5kZXg6LTF9KSxzIT09LTEpe3ZhciBuPVwic2xpY2stc2xpZGUtY29udHJvbFwiK2UuaW5zdGFuY2VVaWQrcztpKFwiI1wiK24pLmxlbmd0aCYmaSh0aGlzKS5hdHRyKHtcImFyaWEtZGVzY3JpYmVkYnlcIjpufSl9fSksZS4kZG90cy5hdHRyKFwicm9sZVwiLFwidGFibGlzdFwiKS5maW5kKFwibGlcIikuZWFjaChmdW5jdGlvbihzKXt2YXIgbj1vW3NdO2kodGhpcykuYXR0cih7cm9sZTpcInByZXNlbnRhdGlvblwifSksaSh0aGlzKS5maW5kKFwiYnV0dG9uXCIpLmZpcnN0KCkuYXR0cih7cm9sZTpcInRhYlwiLGlkOlwic2xpY2stc2xpZGUtY29udHJvbFwiK2UuaW5zdGFuY2VVaWQrcyxcImFyaWEtY29udHJvbHNcIjpcInNsaWNrLXNsaWRlXCIrZS5pbnN0YW5jZVVpZCtuLFwiYXJpYS1sYWJlbFwiOnMrMStcIiBvZiBcIit0LFwiYXJpYS1zZWxlY3RlZFwiOm51bGwsdGFiaW5kZXg6XCItMVwifSl9KS5lcShlLmN1cnJlbnRTbGlkZSkuZmluZChcImJ1dHRvblwiKS5hdHRyKHtcImFyaWEtc2VsZWN0ZWRcIjpcInRydWVcIix0YWJpbmRleDpcIjBcIn0pLmVuZCgpKTtmb3IodmFyIHM9ZS5jdXJyZW50U2xpZGUsbj1zK2Uub3B0aW9ucy5zbGlkZXNUb1Nob3c7czxuO3MrKyllLm9wdGlvbnMuZm9jdXNPbkNoYW5nZT9lLiRzbGlkZXMuZXEocykuYXR0cih7dGFiaW5kZXg6XCIwXCJ9KTplLiRzbGlkZXMuZXEocykucmVtb3ZlQXR0cihcInRhYmluZGV4XCIpO2UuYWN0aXZhdGVBREEoKX0sZS5wcm90b3R5cGUuaW5pdEFycm93RXZlbnRzPWZ1bmN0aW9uKCl7dmFyIGk9dGhpcztpLm9wdGlvbnMuYXJyb3dzPT09ITAmJmkuc2xpZGVDb3VudD5pLm9wdGlvbnMuc2xpZGVzVG9TaG93JiYoaS4kcHJldkFycm93Lm9mZihcImNsaWNrLnNsaWNrXCIpLm9uKFwiY2xpY2suc2xpY2tcIix7bWVzc2FnZTpcInByZXZpb3VzXCJ9LGkuY2hhbmdlU2xpZGUpLGkuJG5leHRBcnJvdy5vZmYoXCJjbGljay5zbGlja1wiKS5vbihcImNsaWNrLnNsaWNrXCIse21lc3NhZ2U6XCJuZXh0XCJ9LGkuY2hhbmdlU2xpZGUpLGkub3B0aW9ucy5hY2Nlc3NpYmlsaXR5PT09ITAmJihpLiRwcmV2QXJyb3cub24oXCJrZXlkb3duLnNsaWNrXCIsaS5rZXlIYW5kbGVyKSxpLiRuZXh0QXJyb3cub24oXCJrZXlkb3duLnNsaWNrXCIsaS5rZXlIYW5kbGVyKSkpfSxlLnByb3RvdHlwZS5pbml0RG90RXZlbnRzPWZ1bmN0aW9uKCl7dmFyIGU9dGhpcztlLm9wdGlvbnMuZG90cz09PSEwJiZlLnNsaWRlQ291bnQ+ZS5vcHRpb25zLnNsaWRlc1RvU2hvdyYmKGkoXCJsaVwiLGUuJGRvdHMpLm9uKFwiY2xpY2suc2xpY2tcIix7bWVzc2FnZTpcImluZGV4XCJ9LGUuY2hhbmdlU2xpZGUpLGUub3B0aW9ucy5hY2Nlc3NpYmlsaXR5PT09ITAmJmUuJGRvdHMub24oXCJrZXlkb3duLnNsaWNrXCIsZS5rZXlIYW5kbGVyKSksZS5vcHRpb25zLmRvdHM9PT0hMCYmZS5vcHRpb25zLnBhdXNlT25Eb3RzSG92ZXI9PT0hMCYmZS5zbGlkZUNvdW50PmUub3B0aW9ucy5zbGlkZXNUb1Nob3cmJmkoXCJsaVwiLGUuJGRvdHMpLm9uKFwibW91c2VlbnRlci5zbGlja1wiLGkucHJveHkoZS5pbnRlcnJ1cHQsZSwhMCkpLm9uKFwibW91c2VsZWF2ZS5zbGlja1wiLGkucHJveHkoZS5pbnRlcnJ1cHQsZSwhMSkpfSxlLnByb3RvdHlwZS5pbml0U2xpZGVFdmVudHM9ZnVuY3Rpb24oKXt2YXIgZT10aGlzO2Uub3B0aW9ucy5wYXVzZU9uSG92ZXImJihlLiRsaXN0Lm9uKFwibW91c2VlbnRlci5zbGlja1wiLGkucHJveHkoZS5pbnRlcnJ1cHQsZSwhMCkpLGUuJGxpc3Qub24oXCJtb3VzZWxlYXZlLnNsaWNrXCIsaS5wcm94eShlLmludGVycnVwdCxlLCExKSkpfSxlLnByb3RvdHlwZS5pbml0aWFsaXplRXZlbnRzPWZ1bmN0aW9uKCl7dmFyIGU9dGhpcztlLmluaXRBcnJvd0V2ZW50cygpLGUuaW5pdERvdEV2ZW50cygpLGUuaW5pdFNsaWRlRXZlbnRzKCksZS4kbGlzdC5vbihcInRvdWNoc3RhcnQuc2xpY2sgbW91c2Vkb3duLnNsaWNrXCIse2FjdGlvbjpcInN0YXJ0XCJ9LGUuc3dpcGVIYW5kbGVyKSxlLiRsaXN0Lm9uKFwidG91Y2htb3ZlLnNsaWNrIG1vdXNlbW92ZS5zbGlja1wiLHthY3Rpb246XCJtb3ZlXCJ9LGUuc3dpcGVIYW5kbGVyKSxlLiRsaXN0Lm9uKFwidG91Y2hlbmQuc2xpY2sgbW91c2V1cC5zbGlja1wiLHthY3Rpb246XCJlbmRcIn0sZS5zd2lwZUhhbmRsZXIpLGUuJGxpc3Qub24oXCJ0b3VjaGNhbmNlbC5zbGljayBtb3VzZWxlYXZlLnNsaWNrXCIse2FjdGlvbjpcImVuZFwifSxlLnN3aXBlSGFuZGxlciksZS4kbGlzdC5vbihcImNsaWNrLnNsaWNrXCIsZS5jbGlja0hhbmRsZXIpLGkoZG9jdW1lbnQpLm9uKGUudmlzaWJpbGl0eUNoYW5nZSxpLnByb3h5KGUudmlzaWJpbGl0eSxlKSksZS5vcHRpb25zLmFjY2Vzc2liaWxpdHk9PT0hMCYmZS4kbGlzdC5vbihcImtleWRvd24uc2xpY2tcIixlLmtleUhhbmRsZXIpLGUub3B0aW9ucy5mb2N1c09uU2VsZWN0PT09ITAmJmkoZS4kc2xpZGVUcmFjaykuY2hpbGRyZW4oKS5vbihcImNsaWNrLnNsaWNrXCIsZS5zZWxlY3RIYW5kbGVyKSxpKHdpbmRvdykub24oXCJvcmllbnRhdGlvbmNoYW5nZS5zbGljay5zbGljay1cIitlLmluc3RhbmNlVWlkLGkucHJveHkoZS5vcmllbnRhdGlvbkNoYW5nZSxlKSksaSh3aW5kb3cpLm9uKFwicmVzaXplLnNsaWNrLnNsaWNrLVwiK2UuaW5zdGFuY2VVaWQsaS5wcm94eShlLnJlc2l6ZSxlKSksaShcIltkcmFnZ2FibGUhPXRydWVdXCIsZS4kc2xpZGVUcmFjaykub24oXCJkcmFnc3RhcnRcIixlLnByZXZlbnREZWZhdWx0KSxpKHdpbmRvdykub24oXCJsb2FkLnNsaWNrLnNsaWNrLVwiK2UuaW5zdGFuY2VVaWQsZS5zZXRQb3NpdGlvbiksaShlLnNldFBvc2l0aW9uKX0sZS5wcm90b3R5cGUuaW5pdFVJPWZ1bmN0aW9uKCl7dmFyIGk9dGhpcztpLm9wdGlvbnMuYXJyb3dzPT09ITAmJmkuc2xpZGVDb3VudD5pLm9wdGlvbnMuc2xpZGVzVG9TaG93JiYoaS4kcHJldkFycm93LnNob3coKSxpLiRuZXh0QXJyb3cuc2hvdygpKSxpLm9wdGlvbnMuZG90cz09PSEwJiZpLnNsaWRlQ291bnQ+aS5vcHRpb25zLnNsaWRlc1RvU2hvdyYmaS4kZG90cy5zaG93KCl9LGUucHJvdG90eXBlLmtleUhhbmRsZXI9ZnVuY3Rpb24oaSl7dmFyIGU9dGhpcztpLnRhcmdldC50YWdOYW1lLm1hdGNoKFwiVEVYVEFSRUF8SU5QVVR8U0VMRUNUXCIpfHwoMzc9PT1pLmtleUNvZGUmJmUub3B0aW9ucy5hY2Nlc3NpYmlsaXR5PT09ITA/ZS5jaGFuZ2VTbGlkZSh7ZGF0YTp7bWVzc2FnZTplLm9wdGlvbnMucnRsPT09ITA/XCJuZXh0XCI6XCJwcmV2aW91c1wifX0pOjM5PT09aS5rZXlDb2RlJiZlLm9wdGlvbnMuYWNjZXNzaWJpbGl0eT09PSEwJiZlLmNoYW5nZVNsaWRlKHtkYXRhOnttZXNzYWdlOmUub3B0aW9ucy5ydGw9PT0hMD9cInByZXZpb3VzXCI6XCJuZXh0XCJ9fSkpfSxlLnByb3RvdHlwZS5sYXp5TG9hZD1mdW5jdGlvbigpe2Z1bmN0aW9uIGUoZSl7aShcImltZ1tkYXRhLWxhenldXCIsZSkuZWFjaChmdW5jdGlvbigpe3ZhciBlPWkodGhpcyksdD1pKHRoaXMpLmF0dHIoXCJkYXRhLWxhenlcIiksbz1pKHRoaXMpLmF0dHIoXCJkYXRhLXNyY3NldFwiKSxzPWkodGhpcykuYXR0cihcImRhdGEtc2l6ZXNcIil8fHIuJHNsaWRlci5hdHRyKFwiZGF0YS1zaXplc1wiKSxuPWRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJpbWdcIik7bi5vbmxvYWQ9ZnVuY3Rpb24oKXtlLmFuaW1hdGUoe29wYWNpdHk6MH0sMTAwLGZ1bmN0aW9uKCl7byYmKGUuYXR0cihcInNyY3NldFwiLG8pLHMmJmUuYXR0cihcInNpemVzXCIscykpLGUuYXR0cihcInNyY1wiLHQpLmFuaW1hdGUoe29wYWNpdHk6MX0sMjAwLGZ1bmN0aW9uKCl7ZS5yZW1vdmVBdHRyKFwiZGF0YS1sYXp5IGRhdGEtc3Jjc2V0IGRhdGEtc2l6ZXNcIikucmVtb3ZlQ2xhc3MoXCJzbGljay1sb2FkaW5nXCIpfSksci4kc2xpZGVyLnRyaWdnZXIoXCJsYXp5TG9hZGVkXCIsW3IsZSx0XSl9KX0sbi5vbmVycm9yPWZ1bmN0aW9uKCl7ZS5yZW1vdmVBdHRyKFwiZGF0YS1sYXp5XCIpLnJlbW92ZUNsYXNzKFwic2xpY2stbG9hZGluZ1wiKS5hZGRDbGFzcyhcInNsaWNrLWxhenlsb2FkLWVycm9yXCIpLHIuJHNsaWRlci50cmlnZ2VyKFwibGF6eUxvYWRFcnJvclwiLFtyLGUsdF0pfSxuLnNyYz10fSl9dmFyIHQsbyxzLG4scj10aGlzO2lmKHIub3B0aW9ucy5jZW50ZXJNb2RlPT09ITA/ci5vcHRpb25zLmluZmluaXRlPT09ITA/KHM9ci5jdXJyZW50U2xpZGUrKHIub3B0aW9ucy5zbGlkZXNUb1Nob3cvMisxKSxuPXMrci5vcHRpb25zLnNsaWRlc1RvU2hvdysyKToocz1NYXRoLm1heCgwLHIuY3VycmVudFNsaWRlLShyLm9wdGlvbnMuc2xpZGVzVG9TaG93LzIrMSkpLG49Misoci5vcHRpb25zLnNsaWRlc1RvU2hvdy8yKzEpK3IuY3VycmVudFNsaWRlKToocz1yLm9wdGlvbnMuaW5maW5pdGU/ci5vcHRpb25zLnNsaWRlc1RvU2hvdytyLmN1cnJlbnRTbGlkZTpyLmN1cnJlbnRTbGlkZSxuPU1hdGguY2VpbChzK3Iub3B0aW9ucy5zbGlkZXNUb1Nob3cpLHIub3B0aW9ucy5mYWRlPT09ITAmJihzPjAmJnMtLSxuPD1yLnNsaWRlQ291bnQmJm4rKykpLHQ9ci4kc2xpZGVyLmZpbmQoXCIuc2xpY2stc2xpZGVcIikuc2xpY2UocyxuKSxcImFudGljaXBhdGVkXCI9PT1yLm9wdGlvbnMubGF6eUxvYWQpZm9yKHZhciBsPXMtMSxkPW4sYT1yLiRzbGlkZXIuZmluZChcIi5zbGljay1zbGlkZVwiKSxjPTA7YzxyLm9wdGlvbnMuc2xpZGVzVG9TY3JvbGw7YysrKWw8MCYmKGw9ci5zbGlkZUNvdW50LTEpLHQ9dC5hZGQoYS5lcShsKSksdD10LmFkZChhLmVxKGQpKSxsLS0sZCsrO2UodCksci5zbGlkZUNvdW50PD1yLm9wdGlvbnMuc2xpZGVzVG9TaG93PyhvPXIuJHNsaWRlci5maW5kKFwiLnNsaWNrLXNsaWRlXCIpLGUobykpOnIuY3VycmVudFNsaWRlPj1yLnNsaWRlQ291bnQtci5vcHRpb25zLnNsaWRlc1RvU2hvdz8obz1yLiRzbGlkZXIuZmluZChcIi5zbGljay1jbG9uZWRcIikuc2xpY2UoMCxyLm9wdGlvbnMuc2xpZGVzVG9TaG93KSxlKG8pKTowPT09ci5jdXJyZW50U2xpZGUmJihvPXIuJHNsaWRlci5maW5kKFwiLnNsaWNrLWNsb25lZFwiKS5zbGljZShyLm9wdGlvbnMuc2xpZGVzVG9TaG93Ki0xKSxlKG8pKX0sZS5wcm90b3R5cGUubG9hZFNsaWRlcj1mdW5jdGlvbigpe3ZhciBpPXRoaXM7aS5zZXRQb3NpdGlvbigpLGkuJHNsaWRlVHJhY2suY3NzKHtvcGFjaXR5OjF9KSxpLiRzbGlkZXIucmVtb3ZlQ2xhc3MoXCJzbGljay1sb2FkaW5nXCIpLGkuaW5pdFVJKCksXCJwcm9ncmVzc2l2ZVwiPT09aS5vcHRpb25zLmxhenlMb2FkJiZpLnByb2dyZXNzaXZlTGF6eUxvYWQoKX0sZS5wcm90b3R5cGUubmV4dD1lLnByb3RvdHlwZS5zbGlja05leHQ9ZnVuY3Rpb24oKXt2YXIgaT10aGlzO2kuY2hhbmdlU2xpZGUoe2RhdGE6e21lc3NhZ2U6XCJuZXh0XCJ9fSl9LGUucHJvdG90eXBlLm9yaWVudGF0aW9uQ2hhbmdlPWZ1bmN0aW9uKCl7dmFyIGk9dGhpcztpLmNoZWNrUmVzcG9uc2l2ZSgpLGkuc2V0UG9zaXRpb24oKX0sZS5wcm90b3R5cGUucGF1c2U9ZS5wcm90b3R5cGUuc2xpY2tQYXVzZT1mdW5jdGlvbigpe3ZhciBpPXRoaXM7aS5hdXRvUGxheUNsZWFyKCksaS5wYXVzZWQ9ITB9LGUucHJvdG90eXBlLnBsYXk9ZS5wcm90b3R5cGUuc2xpY2tQbGF5PWZ1bmN0aW9uKCl7dmFyIGk9dGhpcztpLmF1dG9QbGF5KCksaS5vcHRpb25zLmF1dG9wbGF5PSEwLGkucGF1c2VkPSExLGkuZm9jdXNzZWQ9ITEsaS5pbnRlcnJ1cHRlZD0hMX0sZS5wcm90b3R5cGUucG9zdFNsaWRlPWZ1bmN0aW9uKGUpe3ZhciB0PXRoaXM7aWYoIXQudW5zbGlja2VkJiYodC4kc2xpZGVyLnRyaWdnZXIoXCJhZnRlckNoYW5nZVwiLFt0LGVdKSx0LmFuaW1hdGluZz0hMSx0LnNsaWRlQ291bnQ+dC5vcHRpb25zLnNsaWRlc1RvU2hvdyYmdC5zZXRQb3NpdGlvbigpLHQuc3dpcGVMZWZ0PW51bGwsdC5vcHRpb25zLmF1dG9wbGF5JiZ0LmF1dG9QbGF5KCksdC5vcHRpb25zLmFjY2Vzc2liaWxpdHk9PT0hMCYmKHQuaW5pdEFEQSgpLHQub3B0aW9ucy5mb2N1c09uQ2hhbmdlKSkpe3ZhciBvPWkodC4kc2xpZGVzLmdldCh0LmN1cnJlbnRTbGlkZSkpO28uYXR0cihcInRhYmluZGV4XCIsMCkuZm9jdXMoKX19LGUucHJvdG90eXBlLnByZXY9ZS5wcm90b3R5cGUuc2xpY2tQcmV2PWZ1bmN0aW9uKCl7dmFyIGk9dGhpcztpLmNoYW5nZVNsaWRlKHtkYXRhOnttZXNzYWdlOlwicHJldmlvdXNcIn19KX0sZS5wcm90b3R5cGUucHJldmVudERlZmF1bHQ9ZnVuY3Rpb24oaSl7aS5wcmV2ZW50RGVmYXVsdCgpfSxlLnByb3RvdHlwZS5wcm9ncmVzc2l2ZUxhenlMb2FkPWZ1bmN0aW9uKGUpe2U9ZXx8MTt2YXIgdCxvLHMsbixyLGw9dGhpcyxkPWkoXCJpbWdbZGF0YS1sYXp5XVwiLGwuJHNsaWRlcik7ZC5sZW5ndGg/KHQ9ZC5maXJzdCgpLG89dC5hdHRyKFwiZGF0YS1sYXp5XCIpLHM9dC5hdHRyKFwiZGF0YS1zcmNzZXRcIiksbj10LmF0dHIoXCJkYXRhLXNpemVzXCIpfHxsLiRzbGlkZXIuYXR0cihcImRhdGEtc2l6ZXNcIikscj1kb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiaW1nXCIpLHIub25sb2FkPWZ1bmN0aW9uKCl7cyYmKHQuYXR0cihcInNyY3NldFwiLHMpLG4mJnQuYXR0cihcInNpemVzXCIsbikpLHQuYXR0cihcInNyY1wiLG8pLnJlbW92ZUF0dHIoXCJkYXRhLWxhenkgZGF0YS1zcmNzZXQgZGF0YS1zaXplc1wiKS5yZW1vdmVDbGFzcyhcInNsaWNrLWxvYWRpbmdcIiksbC5vcHRpb25zLmFkYXB0aXZlSGVpZ2h0PT09ITAmJmwuc2V0UG9zaXRpb24oKSxsLiRzbGlkZXIudHJpZ2dlcihcImxhenlMb2FkZWRcIixbbCx0LG9dKSxsLnByb2dyZXNzaXZlTGF6eUxvYWQoKX0sci5vbmVycm9yPWZ1bmN0aW9uKCl7ZTwzP3NldFRpbWVvdXQoZnVuY3Rpb24oKXtsLnByb2dyZXNzaXZlTGF6eUxvYWQoZSsxKX0sNTAwKToodC5yZW1vdmVBdHRyKFwiZGF0YS1sYXp5XCIpLnJlbW92ZUNsYXNzKFwic2xpY2stbG9hZGluZ1wiKS5hZGRDbGFzcyhcInNsaWNrLWxhenlsb2FkLWVycm9yXCIpLGwuJHNsaWRlci50cmlnZ2VyKFwibGF6eUxvYWRFcnJvclwiLFtsLHQsb10pLGwucHJvZ3Jlc3NpdmVMYXp5TG9hZCgpKX0sci5zcmM9byk6bC4kc2xpZGVyLnRyaWdnZXIoXCJhbGxJbWFnZXNMb2FkZWRcIixbbF0pfSxlLnByb3RvdHlwZS5yZWZyZXNoPWZ1bmN0aW9uKGUpe3ZhciB0LG8scz10aGlzO289cy5zbGlkZUNvdW50LXMub3B0aW9ucy5zbGlkZXNUb1Nob3csIXMub3B0aW9ucy5pbmZpbml0ZSYmcy5jdXJyZW50U2xpZGU+byYmKHMuY3VycmVudFNsaWRlPW8pLHMuc2xpZGVDb3VudDw9cy5vcHRpb25zLnNsaWRlc1RvU2hvdyYmKHMuY3VycmVudFNsaWRlPTApLHQ9cy5jdXJyZW50U2xpZGUscy5kZXN0cm95KCEwKSxpLmV4dGVuZChzLHMuaW5pdGlhbHMse2N1cnJlbnRTbGlkZTp0fSkscy5pbml0KCksZXx8cy5jaGFuZ2VTbGlkZSh7ZGF0YTp7bWVzc2FnZTpcImluZGV4XCIsaW5kZXg6dH19LCExKX0sZS5wcm90b3R5cGUucmVnaXN0ZXJCcmVha3BvaW50cz1mdW5jdGlvbigpe3ZhciBlLHQsbyxzPXRoaXMsbj1zLm9wdGlvbnMucmVzcG9uc2l2ZXx8bnVsbDtpZihcImFycmF5XCI9PT1pLnR5cGUobikmJm4ubGVuZ3RoKXtzLnJlc3BvbmRUbz1zLm9wdGlvbnMucmVzcG9uZFRvfHxcIndpbmRvd1wiO2ZvcihlIGluIG4paWYobz1zLmJyZWFrcG9pbnRzLmxlbmd0aC0xLG4uaGFzT3duUHJvcGVydHkoZSkpe2Zvcih0PW5bZV0uYnJlYWtwb2ludDtvPj0wOylzLmJyZWFrcG9pbnRzW29dJiZzLmJyZWFrcG9pbnRzW29dPT09dCYmcy5icmVha3BvaW50cy5zcGxpY2UobywxKSxvLS07cy5icmVha3BvaW50cy5wdXNoKHQpLHMuYnJlYWtwb2ludFNldHRpbmdzW3RdPW5bZV0uc2V0dGluZ3N9cy5icmVha3BvaW50cy5zb3J0KGZ1bmN0aW9uKGksZSl7cmV0dXJuIHMub3B0aW9ucy5tb2JpbGVGaXJzdD9pLWU6ZS1pfSl9fSxlLnByb3RvdHlwZS5yZWluaXQ9ZnVuY3Rpb24oKXt2YXIgZT10aGlzO2UuJHNsaWRlcz1lLiRzbGlkZVRyYWNrLmNoaWxkcmVuKGUub3B0aW9ucy5zbGlkZSkuYWRkQ2xhc3MoXCJzbGljay1zbGlkZVwiKSxlLnNsaWRlQ291bnQ9ZS4kc2xpZGVzLmxlbmd0aCxlLmN1cnJlbnRTbGlkZT49ZS5zbGlkZUNvdW50JiYwIT09ZS5jdXJyZW50U2xpZGUmJihlLmN1cnJlbnRTbGlkZT1lLmN1cnJlbnRTbGlkZS1lLm9wdGlvbnMuc2xpZGVzVG9TY3JvbGwpLGUuc2xpZGVDb3VudDw9ZS5vcHRpb25zLnNsaWRlc1RvU2hvdyYmKGUuY3VycmVudFNsaWRlPTApLGUucmVnaXN0ZXJCcmVha3BvaW50cygpLGUuc2V0UHJvcHMoKSxlLnNldHVwSW5maW5pdGUoKSxlLmJ1aWxkQXJyb3dzKCksZS51cGRhdGVBcnJvd3MoKSxlLmluaXRBcnJvd0V2ZW50cygpLGUuYnVpbGREb3RzKCksZS51cGRhdGVEb3RzKCksZS5pbml0RG90RXZlbnRzKCksZS5jbGVhblVwU2xpZGVFdmVudHMoKSxlLmluaXRTbGlkZUV2ZW50cygpLGUuY2hlY2tSZXNwb25zaXZlKCExLCEwKSxlLm9wdGlvbnMuZm9jdXNPblNlbGVjdD09PSEwJiZpKGUuJHNsaWRlVHJhY2spLmNoaWxkcmVuKCkub24oXCJjbGljay5zbGlja1wiLGUuc2VsZWN0SGFuZGxlciksZS5zZXRTbGlkZUNsYXNzZXMoXCJudW1iZXJcIj09dHlwZW9mIGUuY3VycmVudFNsaWRlP2UuY3VycmVudFNsaWRlOjApLGUuc2V0UG9zaXRpb24oKSxlLmZvY3VzSGFuZGxlcigpLGUucGF1c2VkPSFlLm9wdGlvbnMuYXV0b3BsYXksZS5hdXRvUGxheSgpLGUuJHNsaWRlci50cmlnZ2VyKFwicmVJbml0XCIsW2VdKX0sZS5wcm90b3R5cGUucmVzaXplPWZ1bmN0aW9uKCl7dmFyIGU9dGhpcztpKHdpbmRvdykud2lkdGgoKSE9PWUud2luZG93V2lkdGgmJihjbGVhclRpbWVvdXQoZS53aW5kb3dEZWxheSksZS53aW5kb3dEZWxheT13aW5kb3cuc2V0VGltZW91dChmdW5jdGlvbigpe2Uud2luZG93V2lkdGg9aSh3aW5kb3cpLndpZHRoKCksZS5jaGVja1Jlc3BvbnNpdmUoKSxlLnVuc2xpY2tlZHx8ZS5zZXRQb3NpdGlvbigpfSw1MCkpfSxlLnByb3RvdHlwZS5yZW1vdmVTbGlkZT1lLnByb3RvdHlwZS5zbGlja1JlbW92ZT1mdW5jdGlvbihpLGUsdCl7dmFyIG89dGhpcztyZXR1cm5cImJvb2xlYW5cIj09dHlwZW9mIGk/KGU9aSxpPWU9PT0hMD8wOm8uc2xpZGVDb3VudC0xKTppPWU9PT0hMD8tLWk6aSwhKG8uc2xpZGVDb3VudDwxfHxpPDB8fGk+by5zbGlkZUNvdW50LTEpJiYoby51bmxvYWQoKSx0PT09ITA/by4kc2xpZGVUcmFjay5jaGlsZHJlbigpLnJlbW92ZSgpOm8uJHNsaWRlVHJhY2suY2hpbGRyZW4odGhpcy5vcHRpb25zLnNsaWRlKS5lcShpKS5yZW1vdmUoKSxvLiRzbGlkZXM9by4kc2xpZGVUcmFjay5jaGlsZHJlbih0aGlzLm9wdGlvbnMuc2xpZGUpLG8uJHNsaWRlVHJhY2suY2hpbGRyZW4odGhpcy5vcHRpb25zLnNsaWRlKS5kZXRhY2goKSxvLiRzbGlkZVRyYWNrLmFwcGVuZChvLiRzbGlkZXMpLG8uJHNsaWRlc0NhY2hlPW8uJHNsaWRlcyx2b2lkIG8ucmVpbml0KCkpfSxlLnByb3RvdHlwZS5zZXRDU1M9ZnVuY3Rpb24oaSl7dmFyIGUsdCxvPXRoaXMscz17fTtvLm9wdGlvbnMucnRsPT09ITAmJihpPS1pKSxlPVwibGVmdFwiPT1vLnBvc2l0aW9uUHJvcD9NYXRoLmNlaWwoaSkrXCJweFwiOlwiMHB4XCIsdD1cInRvcFwiPT1vLnBvc2l0aW9uUHJvcD9NYXRoLmNlaWwoaSkrXCJweFwiOlwiMHB4XCIsc1tvLnBvc2l0aW9uUHJvcF09aSxvLnRyYW5zZm9ybXNFbmFibGVkPT09ITE/by4kc2xpZGVUcmFjay5jc3Mocyk6KHM9e30sby5jc3NUcmFuc2l0aW9ucz09PSExPyhzW28uYW5pbVR5cGVdPVwidHJhbnNsYXRlKFwiK2UrXCIsIFwiK3QrXCIpXCIsby4kc2xpZGVUcmFjay5jc3MocykpOihzW28uYW5pbVR5cGVdPVwidHJhbnNsYXRlM2QoXCIrZStcIiwgXCIrdCtcIiwgMHB4KVwiLG8uJHNsaWRlVHJhY2suY3NzKHMpKSl9LGUucHJvdG90eXBlLnNldERpbWVuc2lvbnM9ZnVuY3Rpb24oKXt2YXIgaT10aGlzO2kub3B0aW9ucy52ZXJ0aWNhbD09PSExP2kub3B0aW9ucy5jZW50ZXJNb2RlPT09ITAmJmkuJGxpc3QuY3NzKHtwYWRkaW5nOlwiMHB4IFwiK2kub3B0aW9ucy5jZW50ZXJQYWRkaW5nfSk6KGkuJGxpc3QuaGVpZ2h0KGkuJHNsaWRlcy5maXJzdCgpLm91dGVySGVpZ2h0KCEwKSppLm9wdGlvbnMuc2xpZGVzVG9TaG93KSxpLm9wdGlvbnMuY2VudGVyTW9kZT09PSEwJiZpLiRsaXN0LmNzcyh7cGFkZGluZzppLm9wdGlvbnMuY2VudGVyUGFkZGluZytcIiAwcHhcIn0pKSxpLmxpc3RXaWR0aD1pLiRsaXN0LndpZHRoKCksaS5saXN0SGVpZ2h0PWkuJGxpc3QuaGVpZ2h0KCksaS5vcHRpb25zLnZlcnRpY2FsPT09ITEmJmkub3B0aW9ucy52YXJpYWJsZVdpZHRoPT09ITE/KGkuc2xpZGVXaWR0aD1NYXRoLmNlaWwoaS5saXN0V2lkdGgvaS5vcHRpb25zLnNsaWRlc1RvU2hvdyksaS4kc2xpZGVUcmFjay53aWR0aChNYXRoLmNlaWwoaS5zbGlkZVdpZHRoKmkuJHNsaWRlVHJhY2suY2hpbGRyZW4oXCIuc2xpY2stc2xpZGVcIikubGVuZ3RoKSkpOmkub3B0aW9ucy52YXJpYWJsZVdpZHRoPT09ITA/aS4kc2xpZGVUcmFjay53aWR0aCg1ZTMqaS5zbGlkZUNvdW50KTooaS5zbGlkZVdpZHRoPU1hdGguY2VpbChpLmxpc3RXaWR0aCksaS4kc2xpZGVUcmFjay5oZWlnaHQoTWF0aC5jZWlsKGkuJHNsaWRlcy5maXJzdCgpLm91dGVySGVpZ2h0KCEwKSppLiRzbGlkZVRyYWNrLmNoaWxkcmVuKFwiLnNsaWNrLXNsaWRlXCIpLmxlbmd0aCkpKTt2YXIgZT1pLiRzbGlkZXMuZmlyc3QoKS5vdXRlcldpZHRoKCEwKS1pLiRzbGlkZXMuZmlyc3QoKS53aWR0aCgpO2kub3B0aW9ucy52YXJpYWJsZVdpZHRoPT09ITEmJmkuJHNsaWRlVHJhY2suY2hpbGRyZW4oXCIuc2xpY2stc2xpZGVcIikud2lkdGgoaS5zbGlkZVdpZHRoLWUpfSxlLnByb3RvdHlwZS5zZXRGYWRlPWZ1bmN0aW9uKCl7dmFyIGUsdD10aGlzO3QuJHNsaWRlcy5lYWNoKGZ1bmN0aW9uKG8scyl7ZT10LnNsaWRlV2lkdGgqbyotMSx0Lm9wdGlvbnMucnRsPT09ITA/aShzKS5jc3Moe3Bvc2l0aW9uOlwicmVsYXRpdmVcIixyaWdodDplLHRvcDowLHpJbmRleDp0Lm9wdGlvbnMuekluZGV4LTIsb3BhY2l0eTowfSk6aShzKS5jc3Moe3Bvc2l0aW9uOlwicmVsYXRpdmVcIixsZWZ0OmUsdG9wOjAsekluZGV4OnQub3B0aW9ucy56SW5kZXgtMixvcGFjaXR5OjB9KX0pLHQuJHNsaWRlcy5lcSh0LmN1cnJlbnRTbGlkZSkuY3NzKHt6SW5kZXg6dC5vcHRpb25zLnpJbmRleC0xLG9wYWNpdHk6MX0pfSxlLnByb3RvdHlwZS5zZXRIZWlnaHQ9ZnVuY3Rpb24oKXt2YXIgaT10aGlzO2lmKDE9PT1pLm9wdGlvbnMuc2xpZGVzVG9TaG93JiZpLm9wdGlvbnMuYWRhcHRpdmVIZWlnaHQ9PT0hMCYmaS5vcHRpb25zLnZlcnRpY2FsPT09ITEpe3ZhciBlPWkuJHNsaWRlcy5lcShpLmN1cnJlbnRTbGlkZSkub3V0ZXJIZWlnaHQoITApO2kuJGxpc3QuY3NzKFwiaGVpZ2h0XCIsZSl9fSxlLnByb3RvdHlwZS5zZXRPcHRpb249ZS5wcm90b3R5cGUuc2xpY2tTZXRPcHRpb249ZnVuY3Rpb24oKXt2YXIgZSx0LG8scyxuLHI9dGhpcyxsPSExO2lmKFwib2JqZWN0XCI9PT1pLnR5cGUoYXJndW1lbnRzWzBdKT8obz1hcmd1bWVudHNbMF0sbD1hcmd1bWVudHNbMV0sbj1cIm11bHRpcGxlXCIpOlwic3RyaW5nXCI9PT1pLnR5cGUoYXJndW1lbnRzWzBdKSYmKG89YXJndW1lbnRzWzBdLHM9YXJndW1lbnRzWzFdLGw9YXJndW1lbnRzWzJdLFwicmVzcG9uc2l2ZVwiPT09YXJndW1lbnRzWzBdJiZcImFycmF5XCI9PT1pLnR5cGUoYXJndW1lbnRzWzFdKT9uPVwicmVzcG9uc2l2ZVwiOlwidW5kZWZpbmVkXCIhPXR5cGVvZiBhcmd1bWVudHNbMV0mJihuPVwic2luZ2xlXCIpKSxcInNpbmdsZVwiPT09bilyLm9wdGlvbnNbb109cztlbHNlIGlmKFwibXVsdGlwbGVcIj09PW4paS5lYWNoKG8sZnVuY3Rpb24oaSxlKXtyLm9wdGlvbnNbaV09ZX0pO2Vsc2UgaWYoXCJyZXNwb25zaXZlXCI9PT1uKWZvcih0IGluIHMpaWYoXCJhcnJheVwiIT09aS50eXBlKHIub3B0aW9ucy5yZXNwb25zaXZlKSlyLm9wdGlvbnMucmVzcG9uc2l2ZT1bc1t0XV07ZWxzZXtmb3IoZT1yLm9wdGlvbnMucmVzcG9uc2l2ZS5sZW5ndGgtMTtlPj0wOylyLm9wdGlvbnMucmVzcG9uc2l2ZVtlXS5icmVha3BvaW50PT09c1t0XS5icmVha3BvaW50JiZyLm9wdGlvbnMucmVzcG9uc2l2ZS5zcGxpY2UoZSwxKSxlLS07ci5vcHRpb25zLnJlc3BvbnNpdmUucHVzaChzW3RdKX1sJiYoci51bmxvYWQoKSxyLnJlaW5pdCgpKX0sZS5wcm90b3R5cGUuc2V0UG9zaXRpb249ZnVuY3Rpb24oKXt2YXIgaT10aGlzO2kuc2V0RGltZW5zaW9ucygpLGkuc2V0SGVpZ2h0KCksaS5vcHRpb25zLmZhZGU9PT0hMT9pLnNldENTUyhpLmdldExlZnQoaS5jdXJyZW50U2xpZGUpKTppLnNldEZhZGUoKSxpLiRzbGlkZXIudHJpZ2dlcihcInNldFBvc2l0aW9uXCIsW2ldKX0sZS5wcm90b3R5cGUuc2V0UHJvcHM9ZnVuY3Rpb24oKXt2YXIgaT10aGlzLGU9ZG9jdW1lbnQuYm9keS5zdHlsZTtpLnBvc2l0aW9uUHJvcD1pLm9wdGlvbnMudmVydGljYWw9PT0hMD9cInRvcFwiOlwibGVmdFwiLFxyXG5cInRvcFwiPT09aS5wb3NpdGlvblByb3A/aS4kc2xpZGVyLmFkZENsYXNzKFwic2xpY2stdmVydGljYWxcIik6aS4kc2xpZGVyLnJlbW92ZUNsYXNzKFwic2xpY2stdmVydGljYWxcIiksdm9pZCAwPT09ZS5XZWJraXRUcmFuc2l0aW9uJiZ2b2lkIDA9PT1lLk1velRyYW5zaXRpb24mJnZvaWQgMD09PWUubXNUcmFuc2l0aW9ufHxpLm9wdGlvbnMudXNlQ1NTPT09ITAmJihpLmNzc1RyYW5zaXRpb25zPSEwKSxpLm9wdGlvbnMuZmFkZSYmKFwibnVtYmVyXCI9PXR5cGVvZiBpLm9wdGlvbnMuekluZGV4P2kub3B0aW9ucy56SW5kZXg8MyYmKGkub3B0aW9ucy56SW5kZXg9Myk6aS5vcHRpb25zLnpJbmRleD1pLmRlZmF1bHRzLnpJbmRleCksdm9pZCAwIT09ZS5PVHJhbnNmb3JtJiYoaS5hbmltVHlwZT1cIk9UcmFuc2Zvcm1cIixpLnRyYW5zZm9ybVR5cGU9XCItby10cmFuc2Zvcm1cIixpLnRyYW5zaXRpb25UeXBlPVwiT1RyYW5zaXRpb25cIix2b2lkIDA9PT1lLnBlcnNwZWN0aXZlUHJvcGVydHkmJnZvaWQgMD09PWUud2Via2l0UGVyc3BlY3RpdmUmJihpLmFuaW1UeXBlPSExKSksdm9pZCAwIT09ZS5Nb3pUcmFuc2Zvcm0mJihpLmFuaW1UeXBlPVwiTW96VHJhbnNmb3JtXCIsaS50cmFuc2Zvcm1UeXBlPVwiLW1vei10cmFuc2Zvcm1cIixpLnRyYW5zaXRpb25UeXBlPVwiTW96VHJhbnNpdGlvblwiLHZvaWQgMD09PWUucGVyc3BlY3RpdmVQcm9wZXJ0eSYmdm9pZCAwPT09ZS5Nb3pQZXJzcGVjdGl2ZSYmKGkuYW5pbVR5cGU9ITEpKSx2b2lkIDAhPT1lLndlYmtpdFRyYW5zZm9ybSYmKGkuYW5pbVR5cGU9XCJ3ZWJraXRUcmFuc2Zvcm1cIixpLnRyYW5zZm9ybVR5cGU9XCItd2Via2l0LXRyYW5zZm9ybVwiLGkudHJhbnNpdGlvblR5cGU9XCJ3ZWJraXRUcmFuc2l0aW9uXCIsdm9pZCAwPT09ZS5wZXJzcGVjdGl2ZVByb3BlcnR5JiZ2b2lkIDA9PT1lLndlYmtpdFBlcnNwZWN0aXZlJiYoaS5hbmltVHlwZT0hMSkpLHZvaWQgMCE9PWUubXNUcmFuc2Zvcm0mJihpLmFuaW1UeXBlPVwibXNUcmFuc2Zvcm1cIixpLnRyYW5zZm9ybVR5cGU9XCItbXMtdHJhbnNmb3JtXCIsaS50cmFuc2l0aW9uVHlwZT1cIm1zVHJhbnNpdGlvblwiLHZvaWQgMD09PWUubXNUcmFuc2Zvcm0mJihpLmFuaW1UeXBlPSExKSksdm9pZCAwIT09ZS50cmFuc2Zvcm0mJmkuYW5pbVR5cGUhPT0hMSYmKGkuYW5pbVR5cGU9XCJ0cmFuc2Zvcm1cIixpLnRyYW5zZm9ybVR5cGU9XCJ0cmFuc2Zvcm1cIixpLnRyYW5zaXRpb25UeXBlPVwidHJhbnNpdGlvblwiKSxpLnRyYW5zZm9ybXNFbmFibGVkPWkub3B0aW9ucy51c2VUcmFuc2Zvcm0mJm51bGwhPT1pLmFuaW1UeXBlJiZpLmFuaW1UeXBlIT09ITF9LGUucHJvdG90eXBlLnNldFNsaWRlQ2xhc3Nlcz1mdW5jdGlvbihpKXt2YXIgZSx0LG8scyxuPXRoaXM7aWYodD1uLiRzbGlkZXIuZmluZChcIi5zbGljay1zbGlkZVwiKS5yZW1vdmVDbGFzcyhcInNsaWNrLWFjdGl2ZSBzbGljay1jZW50ZXIgc2xpY2stY3VycmVudFwiKS5hdHRyKFwiYXJpYS1oaWRkZW5cIixcInRydWVcIiksbi4kc2xpZGVzLmVxKGkpLmFkZENsYXNzKFwic2xpY2stY3VycmVudFwiKSxuLm9wdGlvbnMuY2VudGVyTW9kZT09PSEwKXt2YXIgcj1uLm9wdGlvbnMuc2xpZGVzVG9TaG93JTI9PT0wPzE6MDtlPU1hdGguZmxvb3Iobi5vcHRpb25zLnNsaWRlc1RvU2hvdy8yKSxuLm9wdGlvbnMuaW5maW5pdGU9PT0hMCYmKGk+PWUmJmk8PW4uc2xpZGVDb3VudC0xLWU/bi4kc2xpZGVzLnNsaWNlKGktZStyLGkrZSsxKS5hZGRDbGFzcyhcInNsaWNrLWFjdGl2ZVwiKS5hdHRyKFwiYXJpYS1oaWRkZW5cIixcImZhbHNlXCIpOihvPW4ub3B0aW9ucy5zbGlkZXNUb1Nob3craSx0LnNsaWNlKG8tZSsxK3IsbytlKzIpLmFkZENsYXNzKFwic2xpY2stYWN0aXZlXCIpLmF0dHIoXCJhcmlhLWhpZGRlblwiLFwiZmFsc2VcIikpLDA9PT1pP3QuZXEodC5sZW5ndGgtMS1uLm9wdGlvbnMuc2xpZGVzVG9TaG93KS5hZGRDbGFzcyhcInNsaWNrLWNlbnRlclwiKTppPT09bi5zbGlkZUNvdW50LTEmJnQuZXEobi5vcHRpb25zLnNsaWRlc1RvU2hvdykuYWRkQ2xhc3MoXCJzbGljay1jZW50ZXJcIikpLG4uJHNsaWRlcy5lcShpKS5hZGRDbGFzcyhcInNsaWNrLWNlbnRlclwiKX1lbHNlIGk+PTAmJmk8PW4uc2xpZGVDb3VudC1uLm9wdGlvbnMuc2xpZGVzVG9TaG93P24uJHNsaWRlcy5zbGljZShpLGkrbi5vcHRpb25zLnNsaWRlc1RvU2hvdykuYWRkQ2xhc3MoXCJzbGljay1hY3RpdmVcIikuYXR0cihcImFyaWEtaGlkZGVuXCIsXCJmYWxzZVwiKTp0Lmxlbmd0aDw9bi5vcHRpb25zLnNsaWRlc1RvU2hvdz90LmFkZENsYXNzKFwic2xpY2stYWN0aXZlXCIpLmF0dHIoXCJhcmlhLWhpZGRlblwiLFwiZmFsc2VcIik6KHM9bi5zbGlkZUNvdW50JW4ub3B0aW9ucy5zbGlkZXNUb1Nob3csbz1uLm9wdGlvbnMuaW5maW5pdGU9PT0hMD9uLm9wdGlvbnMuc2xpZGVzVG9TaG93K2k6aSxuLm9wdGlvbnMuc2xpZGVzVG9TaG93PT1uLm9wdGlvbnMuc2xpZGVzVG9TY3JvbGwmJm4uc2xpZGVDb3VudC1pPG4ub3B0aW9ucy5zbGlkZXNUb1Nob3c/dC5zbGljZShvLShuLm9wdGlvbnMuc2xpZGVzVG9TaG93LXMpLG8rcykuYWRkQ2xhc3MoXCJzbGljay1hY3RpdmVcIikuYXR0cihcImFyaWEtaGlkZGVuXCIsXCJmYWxzZVwiKTp0LnNsaWNlKG8sbytuLm9wdGlvbnMuc2xpZGVzVG9TaG93KS5hZGRDbGFzcyhcInNsaWNrLWFjdGl2ZVwiKS5hdHRyKFwiYXJpYS1oaWRkZW5cIixcImZhbHNlXCIpKTtcIm9uZGVtYW5kXCIhPT1uLm9wdGlvbnMubGF6eUxvYWQmJlwiYW50aWNpcGF0ZWRcIiE9PW4ub3B0aW9ucy5sYXp5TG9hZHx8bi5sYXp5TG9hZCgpfSxlLnByb3RvdHlwZS5zZXR1cEluZmluaXRlPWZ1bmN0aW9uKCl7dmFyIGUsdCxvLHM9dGhpcztpZihzLm9wdGlvbnMuZmFkZT09PSEwJiYocy5vcHRpb25zLmNlbnRlck1vZGU9ITEpLHMub3B0aW9ucy5pbmZpbml0ZT09PSEwJiZzLm9wdGlvbnMuZmFkZT09PSExJiYodD1udWxsLHMuc2xpZGVDb3VudD5zLm9wdGlvbnMuc2xpZGVzVG9TaG93KSl7Zm9yKG89cy5vcHRpb25zLmNlbnRlck1vZGU9PT0hMD9zLm9wdGlvbnMuc2xpZGVzVG9TaG93KzE6cy5vcHRpb25zLnNsaWRlc1RvU2hvdyxlPXMuc2xpZGVDb3VudDtlPnMuc2xpZGVDb3VudC1vO2UtPTEpdD1lLTEsaShzLiRzbGlkZXNbdF0pLmNsb25lKCEwKS5hdHRyKFwiaWRcIixcIlwiKS5hdHRyKFwiZGF0YS1zbGljay1pbmRleFwiLHQtcy5zbGlkZUNvdW50KS5wcmVwZW5kVG8ocy4kc2xpZGVUcmFjaykuYWRkQ2xhc3MoXCJzbGljay1jbG9uZWRcIik7Zm9yKGU9MDtlPG8rcy5zbGlkZUNvdW50O2UrPTEpdD1lLGkocy4kc2xpZGVzW3RdKS5jbG9uZSghMCkuYXR0cihcImlkXCIsXCJcIikuYXR0cihcImRhdGEtc2xpY2staW5kZXhcIix0K3Muc2xpZGVDb3VudCkuYXBwZW5kVG8ocy4kc2xpZGVUcmFjaykuYWRkQ2xhc3MoXCJzbGljay1jbG9uZWRcIik7cy4kc2xpZGVUcmFjay5maW5kKFwiLnNsaWNrLWNsb25lZFwiKS5maW5kKFwiW2lkXVwiKS5lYWNoKGZ1bmN0aW9uKCl7aSh0aGlzKS5hdHRyKFwiaWRcIixcIlwiKX0pfX0sZS5wcm90b3R5cGUuaW50ZXJydXB0PWZ1bmN0aW9uKGkpe3ZhciBlPXRoaXM7aXx8ZS5hdXRvUGxheSgpLGUuaW50ZXJydXB0ZWQ9aX0sZS5wcm90b3R5cGUuc2VsZWN0SGFuZGxlcj1mdW5jdGlvbihlKXt2YXIgdD10aGlzLG89aShlLnRhcmdldCkuaXMoXCIuc2xpY2stc2xpZGVcIik/aShlLnRhcmdldCk6aShlLnRhcmdldCkucGFyZW50cyhcIi5zbGljay1zbGlkZVwiKSxzPXBhcnNlSW50KG8uYXR0cihcImRhdGEtc2xpY2staW5kZXhcIikpO3JldHVybiBzfHwocz0wKSx0LnNsaWRlQ291bnQ8PXQub3B0aW9ucy5zbGlkZXNUb1Nob3c/dm9pZCB0LnNsaWRlSGFuZGxlcihzLCExLCEwKTp2b2lkIHQuc2xpZGVIYW5kbGVyKHMpfSxlLnByb3RvdHlwZS5zbGlkZUhhbmRsZXI9ZnVuY3Rpb24oaSxlLHQpe3ZhciBvLHMsbixyLGwsZD1udWxsLGE9dGhpcztpZihlPWV8fCExLCEoYS5hbmltYXRpbmc9PT0hMCYmYS5vcHRpb25zLndhaXRGb3JBbmltYXRlPT09ITB8fGEub3B0aW9ucy5mYWRlPT09ITAmJmEuY3VycmVudFNsaWRlPT09aSkpcmV0dXJuIGU9PT0hMSYmYS5hc05hdkZvcihpKSxvPWksZD1hLmdldExlZnQobykscj1hLmdldExlZnQoYS5jdXJyZW50U2xpZGUpLGEuY3VycmVudExlZnQ9bnVsbD09PWEuc3dpcGVMZWZ0P3I6YS5zd2lwZUxlZnQsYS5vcHRpb25zLmluZmluaXRlPT09ITEmJmEub3B0aW9ucy5jZW50ZXJNb2RlPT09ITEmJihpPDB8fGk+YS5nZXREb3RDb3VudCgpKmEub3B0aW9ucy5zbGlkZXNUb1Njcm9sbCk/dm9pZChhLm9wdGlvbnMuZmFkZT09PSExJiYobz1hLmN1cnJlbnRTbGlkZSx0IT09ITAmJmEuc2xpZGVDb3VudD5hLm9wdGlvbnMuc2xpZGVzVG9TaG93P2EuYW5pbWF0ZVNsaWRlKHIsZnVuY3Rpb24oKXthLnBvc3RTbGlkZShvKX0pOmEucG9zdFNsaWRlKG8pKSk6YS5vcHRpb25zLmluZmluaXRlPT09ITEmJmEub3B0aW9ucy5jZW50ZXJNb2RlPT09ITAmJihpPDB8fGk+YS5zbGlkZUNvdW50LWEub3B0aW9ucy5zbGlkZXNUb1Njcm9sbCk/dm9pZChhLm9wdGlvbnMuZmFkZT09PSExJiYobz1hLmN1cnJlbnRTbGlkZSx0IT09ITAmJmEuc2xpZGVDb3VudD5hLm9wdGlvbnMuc2xpZGVzVG9TaG93P2EuYW5pbWF0ZVNsaWRlKHIsZnVuY3Rpb24oKXthLnBvc3RTbGlkZShvKX0pOmEucG9zdFNsaWRlKG8pKSk6KGEub3B0aW9ucy5hdXRvcGxheSYmY2xlYXJJbnRlcnZhbChhLmF1dG9QbGF5VGltZXIpLHM9bzwwP2Euc2xpZGVDb3VudCVhLm9wdGlvbnMuc2xpZGVzVG9TY3JvbGwhPT0wP2Euc2xpZGVDb3VudC1hLnNsaWRlQ291bnQlYS5vcHRpb25zLnNsaWRlc1RvU2Nyb2xsOmEuc2xpZGVDb3VudCtvOm8+PWEuc2xpZGVDb3VudD9hLnNsaWRlQ291bnQlYS5vcHRpb25zLnNsaWRlc1RvU2Nyb2xsIT09MD8wOm8tYS5zbGlkZUNvdW50Om8sYS5hbmltYXRpbmc9ITAsYS4kc2xpZGVyLnRyaWdnZXIoXCJiZWZvcmVDaGFuZ2VcIixbYSxhLmN1cnJlbnRTbGlkZSxzXSksbj1hLmN1cnJlbnRTbGlkZSxhLmN1cnJlbnRTbGlkZT1zLGEuc2V0U2xpZGVDbGFzc2VzKGEuY3VycmVudFNsaWRlKSxhLm9wdGlvbnMuYXNOYXZGb3ImJihsPWEuZ2V0TmF2VGFyZ2V0KCksbD1sLnNsaWNrKFwiZ2V0U2xpY2tcIiksbC5zbGlkZUNvdW50PD1sLm9wdGlvbnMuc2xpZGVzVG9TaG93JiZsLnNldFNsaWRlQ2xhc3NlcyhhLmN1cnJlbnRTbGlkZSkpLGEudXBkYXRlRG90cygpLGEudXBkYXRlQXJyb3dzKCksYS5vcHRpb25zLmZhZGU9PT0hMD8odCE9PSEwPyhhLmZhZGVTbGlkZU91dChuKSxhLmZhZGVTbGlkZShzLGZ1bmN0aW9uKCl7YS5wb3N0U2xpZGUocyl9KSk6YS5wb3N0U2xpZGUocyksdm9pZCBhLmFuaW1hdGVIZWlnaHQoKSk6dm9pZCh0IT09ITAmJmEuc2xpZGVDb3VudD5hLm9wdGlvbnMuc2xpZGVzVG9TaG93P2EuYW5pbWF0ZVNsaWRlKGQsZnVuY3Rpb24oKXthLnBvc3RTbGlkZShzKX0pOmEucG9zdFNsaWRlKHMpKSl9LGUucHJvdG90eXBlLnN0YXJ0TG9hZD1mdW5jdGlvbigpe3ZhciBpPXRoaXM7aS5vcHRpb25zLmFycm93cz09PSEwJiZpLnNsaWRlQ291bnQ+aS5vcHRpb25zLnNsaWRlc1RvU2hvdyYmKGkuJHByZXZBcnJvdy5oaWRlKCksaS4kbmV4dEFycm93LmhpZGUoKSksaS5vcHRpb25zLmRvdHM9PT0hMCYmaS5zbGlkZUNvdW50Pmkub3B0aW9ucy5zbGlkZXNUb1Nob3cmJmkuJGRvdHMuaGlkZSgpLGkuJHNsaWRlci5hZGRDbGFzcyhcInNsaWNrLWxvYWRpbmdcIil9LGUucHJvdG90eXBlLnN3aXBlRGlyZWN0aW9uPWZ1bmN0aW9uKCl7dmFyIGksZSx0LG8scz10aGlzO3JldHVybiBpPXMudG91Y2hPYmplY3Quc3RhcnRYLXMudG91Y2hPYmplY3QuY3VyWCxlPXMudG91Y2hPYmplY3Quc3RhcnRZLXMudG91Y2hPYmplY3QuY3VyWSx0PU1hdGguYXRhbjIoZSxpKSxvPU1hdGgucm91bmQoMTgwKnQvTWF0aC5QSSksbzwwJiYobz0zNjAtTWF0aC5hYnMobykpLG88PTQ1JiZvPj0wP3Mub3B0aW9ucy5ydGw9PT0hMT9cImxlZnRcIjpcInJpZ2h0XCI6bzw9MzYwJiZvPj0zMTU/cy5vcHRpb25zLnJ0bD09PSExP1wibGVmdFwiOlwicmlnaHRcIjpvPj0xMzUmJm88PTIyNT9zLm9wdGlvbnMucnRsPT09ITE/XCJyaWdodFwiOlwibGVmdFwiOnMub3B0aW9ucy52ZXJ0aWNhbFN3aXBpbmc9PT0hMD9vPj0zNSYmbzw9MTM1P1wiZG93blwiOlwidXBcIjpcInZlcnRpY2FsXCJ9LGUucHJvdG90eXBlLnN3aXBlRW5kPWZ1bmN0aW9uKGkpe3ZhciBlLHQsbz10aGlzO2lmKG8uZHJhZ2dpbmc9ITEsby5zd2lwaW5nPSExLG8uc2Nyb2xsaW5nKXJldHVybiBvLnNjcm9sbGluZz0hMSwhMTtpZihvLmludGVycnVwdGVkPSExLG8uc2hvdWxkQ2xpY2s9IShvLnRvdWNoT2JqZWN0LnN3aXBlTGVuZ3RoPjEwKSx2b2lkIDA9PT1vLnRvdWNoT2JqZWN0LmN1clgpcmV0dXJuITE7aWYoby50b3VjaE9iamVjdC5lZGdlSGl0PT09ITAmJm8uJHNsaWRlci50cmlnZ2VyKFwiZWRnZVwiLFtvLG8uc3dpcGVEaXJlY3Rpb24oKV0pLG8udG91Y2hPYmplY3Quc3dpcGVMZW5ndGg+PW8udG91Y2hPYmplY3QubWluU3dpcGUpe3N3aXRjaCh0PW8uc3dpcGVEaXJlY3Rpb24oKSl7Y2FzZVwibGVmdFwiOmNhc2VcImRvd25cIjplPW8ub3B0aW9ucy5zd2lwZVRvU2xpZGU/by5jaGVja05hdmlnYWJsZShvLmN1cnJlbnRTbGlkZStvLmdldFNsaWRlQ291bnQoKSk6by5jdXJyZW50U2xpZGUrby5nZXRTbGlkZUNvdW50KCksby5jdXJyZW50RGlyZWN0aW9uPTA7YnJlYWs7Y2FzZVwicmlnaHRcIjpjYXNlXCJ1cFwiOmU9by5vcHRpb25zLnN3aXBlVG9TbGlkZT9vLmNoZWNrTmF2aWdhYmxlKG8uY3VycmVudFNsaWRlLW8uZ2V0U2xpZGVDb3VudCgpKTpvLmN1cnJlbnRTbGlkZS1vLmdldFNsaWRlQ291bnQoKSxvLmN1cnJlbnREaXJlY3Rpb249MX1cInZlcnRpY2FsXCIhPXQmJihvLnNsaWRlSGFuZGxlcihlKSxvLnRvdWNoT2JqZWN0PXt9LG8uJHNsaWRlci50cmlnZ2VyKFwic3dpcGVcIixbbyx0XSkpfWVsc2Ugby50b3VjaE9iamVjdC5zdGFydFghPT1vLnRvdWNoT2JqZWN0LmN1clgmJihvLnNsaWRlSGFuZGxlcihvLmN1cnJlbnRTbGlkZSksby50b3VjaE9iamVjdD17fSl9LGUucHJvdG90eXBlLnN3aXBlSGFuZGxlcj1mdW5jdGlvbihpKXt2YXIgZT10aGlzO2lmKCEoZS5vcHRpb25zLnN3aXBlPT09ITF8fFwib250b3VjaGVuZFwiaW4gZG9jdW1lbnQmJmUub3B0aW9ucy5zd2lwZT09PSExfHxlLm9wdGlvbnMuZHJhZ2dhYmxlPT09ITEmJmkudHlwZS5pbmRleE9mKFwibW91c2VcIikhPT0tMSkpc3dpdGNoKGUudG91Y2hPYmplY3QuZmluZ2VyQ291bnQ9aS5vcmlnaW5hbEV2ZW50JiZ2b2lkIDAhPT1pLm9yaWdpbmFsRXZlbnQudG91Y2hlcz9pLm9yaWdpbmFsRXZlbnQudG91Y2hlcy5sZW5ndGg6MSxlLnRvdWNoT2JqZWN0Lm1pblN3aXBlPWUubGlzdFdpZHRoL2Uub3B0aW9ucy50b3VjaFRocmVzaG9sZCxlLm9wdGlvbnMudmVydGljYWxTd2lwaW5nPT09ITAmJihlLnRvdWNoT2JqZWN0Lm1pblN3aXBlPWUubGlzdEhlaWdodC9lLm9wdGlvbnMudG91Y2hUaHJlc2hvbGQpLGkuZGF0YS5hY3Rpb24pe2Nhc2VcInN0YXJ0XCI6ZS5zd2lwZVN0YXJ0KGkpO2JyZWFrO2Nhc2VcIm1vdmVcIjplLnN3aXBlTW92ZShpKTticmVhaztjYXNlXCJlbmRcIjplLnN3aXBlRW5kKGkpfX0sZS5wcm90b3R5cGUuc3dpcGVNb3ZlPWZ1bmN0aW9uKGkpe3ZhciBlLHQsbyxzLG4scixsPXRoaXM7cmV0dXJuIG49dm9pZCAwIT09aS5vcmlnaW5hbEV2ZW50P2kub3JpZ2luYWxFdmVudC50b3VjaGVzOm51bGwsISghbC5kcmFnZ2luZ3x8bC5zY3JvbGxpbmd8fG4mJjEhPT1uLmxlbmd0aCkmJihlPWwuZ2V0TGVmdChsLmN1cnJlbnRTbGlkZSksbC50b3VjaE9iamVjdC5jdXJYPXZvaWQgMCE9PW4/blswXS5wYWdlWDppLmNsaWVudFgsbC50b3VjaE9iamVjdC5jdXJZPXZvaWQgMCE9PW4/blswXS5wYWdlWTppLmNsaWVudFksbC50b3VjaE9iamVjdC5zd2lwZUxlbmd0aD1NYXRoLnJvdW5kKE1hdGguc3FydChNYXRoLnBvdyhsLnRvdWNoT2JqZWN0LmN1clgtbC50b3VjaE9iamVjdC5zdGFydFgsMikpKSxyPU1hdGgucm91bmQoTWF0aC5zcXJ0KE1hdGgucG93KGwudG91Y2hPYmplY3QuY3VyWS1sLnRvdWNoT2JqZWN0LnN0YXJ0WSwyKSkpLCFsLm9wdGlvbnMudmVydGljYWxTd2lwaW5nJiYhbC5zd2lwaW5nJiZyPjQ/KGwuc2Nyb2xsaW5nPSEwLCExKToobC5vcHRpb25zLnZlcnRpY2FsU3dpcGluZz09PSEwJiYobC50b3VjaE9iamVjdC5zd2lwZUxlbmd0aD1yKSx0PWwuc3dpcGVEaXJlY3Rpb24oKSx2b2lkIDAhPT1pLm9yaWdpbmFsRXZlbnQmJmwudG91Y2hPYmplY3Quc3dpcGVMZW5ndGg+NCYmKGwuc3dpcGluZz0hMCxpLnByZXZlbnREZWZhdWx0KCkpLHM9KGwub3B0aW9ucy5ydGw9PT0hMT8xOi0xKSoobC50b3VjaE9iamVjdC5jdXJYPmwudG91Y2hPYmplY3Quc3RhcnRYPzE6LTEpLGwub3B0aW9ucy52ZXJ0aWNhbFN3aXBpbmc9PT0hMCYmKHM9bC50b3VjaE9iamVjdC5jdXJZPmwudG91Y2hPYmplY3Quc3RhcnRZPzE6LTEpLG89bC50b3VjaE9iamVjdC5zd2lwZUxlbmd0aCxsLnRvdWNoT2JqZWN0LmVkZ2VIaXQ9ITEsbC5vcHRpb25zLmluZmluaXRlPT09ITEmJigwPT09bC5jdXJyZW50U2xpZGUmJlwicmlnaHRcIj09PXR8fGwuY3VycmVudFNsaWRlPj1sLmdldERvdENvdW50KCkmJlwibGVmdFwiPT09dCkmJihvPWwudG91Y2hPYmplY3Quc3dpcGVMZW5ndGgqbC5vcHRpb25zLmVkZ2VGcmljdGlvbixsLnRvdWNoT2JqZWN0LmVkZ2VIaXQ9ITApLGwub3B0aW9ucy52ZXJ0aWNhbD09PSExP2wuc3dpcGVMZWZ0PWUrbypzOmwuc3dpcGVMZWZ0PWUrbyoobC4kbGlzdC5oZWlnaHQoKS9sLmxpc3RXaWR0aCkqcyxsLm9wdGlvbnMudmVydGljYWxTd2lwaW5nPT09ITAmJihsLnN3aXBlTGVmdD1lK28qcyksbC5vcHRpb25zLmZhZGUhPT0hMCYmbC5vcHRpb25zLnRvdWNoTW92ZSE9PSExJiYobC5hbmltYXRpbmc9PT0hMD8obC5zd2lwZUxlZnQ9bnVsbCwhMSk6dm9pZCBsLnNldENTUyhsLnN3aXBlTGVmdCkpKSl9LGUucHJvdG90eXBlLnN3aXBlU3RhcnQ9ZnVuY3Rpb24oaSl7dmFyIGUsdD10aGlzO3JldHVybiB0LmludGVycnVwdGVkPSEwLDEhPT10LnRvdWNoT2JqZWN0LmZpbmdlckNvdW50fHx0LnNsaWRlQ291bnQ8PXQub3B0aW9ucy5zbGlkZXNUb1Nob3c/KHQudG91Y2hPYmplY3Q9e30sITEpOih2b2lkIDAhPT1pLm9yaWdpbmFsRXZlbnQmJnZvaWQgMCE9PWkub3JpZ2luYWxFdmVudC50b3VjaGVzJiYoZT1pLm9yaWdpbmFsRXZlbnQudG91Y2hlc1swXSksdC50b3VjaE9iamVjdC5zdGFydFg9dC50b3VjaE9iamVjdC5jdXJYPXZvaWQgMCE9PWU/ZS5wYWdlWDppLmNsaWVudFgsdC50b3VjaE9iamVjdC5zdGFydFk9dC50b3VjaE9iamVjdC5jdXJZPXZvaWQgMCE9PWU/ZS5wYWdlWTppLmNsaWVudFksdm9pZCh0LmRyYWdnaW5nPSEwKSl9LGUucHJvdG90eXBlLnVuZmlsdGVyU2xpZGVzPWUucHJvdG90eXBlLnNsaWNrVW5maWx0ZXI9ZnVuY3Rpb24oKXt2YXIgaT10aGlzO251bGwhPT1pLiRzbGlkZXNDYWNoZSYmKGkudW5sb2FkKCksaS4kc2xpZGVUcmFjay5jaGlsZHJlbih0aGlzLm9wdGlvbnMuc2xpZGUpLmRldGFjaCgpLGkuJHNsaWRlc0NhY2hlLmFwcGVuZFRvKGkuJHNsaWRlVHJhY2spLGkucmVpbml0KCkpfSxlLnByb3RvdHlwZS51bmxvYWQ9ZnVuY3Rpb24oKXt2YXIgZT10aGlzO2koXCIuc2xpY2stY2xvbmVkXCIsZS4kc2xpZGVyKS5yZW1vdmUoKSxlLiRkb3RzJiZlLiRkb3RzLnJlbW92ZSgpLGUuJHByZXZBcnJvdyYmZS5odG1sRXhwci50ZXN0KGUub3B0aW9ucy5wcmV2QXJyb3cpJiZlLiRwcmV2QXJyb3cucmVtb3ZlKCksZS4kbmV4dEFycm93JiZlLmh0bWxFeHByLnRlc3QoZS5vcHRpb25zLm5leHRBcnJvdykmJmUuJG5leHRBcnJvdy5yZW1vdmUoKSxlLiRzbGlkZXMucmVtb3ZlQ2xhc3MoXCJzbGljay1zbGlkZSBzbGljay1hY3RpdmUgc2xpY2stdmlzaWJsZSBzbGljay1jdXJyZW50XCIpLmF0dHIoXCJhcmlhLWhpZGRlblwiLFwidHJ1ZVwiKS5jc3MoXCJ3aWR0aFwiLFwiXCIpfSxlLnByb3RvdHlwZS51bnNsaWNrPWZ1bmN0aW9uKGkpe3ZhciBlPXRoaXM7ZS4kc2xpZGVyLnRyaWdnZXIoXCJ1bnNsaWNrXCIsW2UsaV0pLGUuZGVzdHJveSgpfSxlLnByb3RvdHlwZS51cGRhdGVBcnJvd3M9ZnVuY3Rpb24oKXt2YXIgaSxlPXRoaXM7aT1NYXRoLmZsb29yKGUub3B0aW9ucy5zbGlkZXNUb1Nob3cvMiksZS5vcHRpb25zLmFycm93cz09PSEwJiZlLnNsaWRlQ291bnQ+ZS5vcHRpb25zLnNsaWRlc1RvU2hvdyYmIWUub3B0aW9ucy5pbmZpbml0ZSYmKGUuJHByZXZBcnJvdy5yZW1vdmVDbGFzcyhcInNsaWNrLWRpc2FibGVkXCIpLmF0dHIoXCJhcmlhLWRpc2FibGVkXCIsXCJmYWxzZVwiKSxlLiRuZXh0QXJyb3cucmVtb3ZlQ2xhc3MoXCJzbGljay1kaXNhYmxlZFwiKS5hdHRyKFwiYXJpYS1kaXNhYmxlZFwiLFwiZmFsc2VcIiksMD09PWUuY3VycmVudFNsaWRlPyhlLiRwcmV2QXJyb3cuYWRkQ2xhc3MoXCJzbGljay1kaXNhYmxlZFwiKS5hdHRyKFwiYXJpYS1kaXNhYmxlZFwiLFwidHJ1ZVwiKSxlLiRuZXh0QXJyb3cucmVtb3ZlQ2xhc3MoXCJzbGljay1kaXNhYmxlZFwiKS5hdHRyKFwiYXJpYS1kaXNhYmxlZFwiLFwiZmFsc2VcIikpOmUuY3VycmVudFNsaWRlPj1lLnNsaWRlQ291bnQtZS5vcHRpb25zLnNsaWRlc1RvU2hvdyYmZS5vcHRpb25zLmNlbnRlck1vZGU9PT0hMT8oZS4kbmV4dEFycm93LmFkZENsYXNzKFwic2xpY2stZGlzYWJsZWRcIikuYXR0cihcImFyaWEtZGlzYWJsZWRcIixcInRydWVcIiksZS4kcHJldkFycm93LnJlbW92ZUNsYXNzKFwic2xpY2stZGlzYWJsZWRcIikuYXR0cihcImFyaWEtZGlzYWJsZWRcIixcImZhbHNlXCIpKTplLmN1cnJlbnRTbGlkZT49ZS5zbGlkZUNvdW50LTEmJmUub3B0aW9ucy5jZW50ZXJNb2RlPT09ITAmJihlLiRuZXh0QXJyb3cuYWRkQ2xhc3MoXCJzbGljay1kaXNhYmxlZFwiKS5hdHRyKFwiYXJpYS1kaXNhYmxlZFwiLFwidHJ1ZVwiKSxlLiRwcmV2QXJyb3cucmVtb3ZlQ2xhc3MoXCJzbGljay1kaXNhYmxlZFwiKS5hdHRyKFwiYXJpYS1kaXNhYmxlZFwiLFwiZmFsc2VcIikpKX0sZS5wcm90b3R5cGUudXBkYXRlRG90cz1mdW5jdGlvbigpe3ZhciBpPXRoaXM7bnVsbCE9PWkuJGRvdHMmJihpLiRkb3RzLmZpbmQoXCJsaVwiKS5yZW1vdmVDbGFzcyhcInNsaWNrLWFjdGl2ZVwiKS5lbmQoKSxpLiRkb3RzLmZpbmQoXCJsaVwiKS5lcShNYXRoLmZsb29yKGkuY3VycmVudFNsaWRlL2kub3B0aW9ucy5zbGlkZXNUb1Njcm9sbCkpLmFkZENsYXNzKFwic2xpY2stYWN0aXZlXCIpKX0sZS5wcm90b3R5cGUudmlzaWJpbGl0eT1mdW5jdGlvbigpe3ZhciBpPXRoaXM7aS5vcHRpb25zLmF1dG9wbGF5JiYoZG9jdW1lbnRbaS5oaWRkZW5dP2kuaW50ZXJydXB0ZWQ9ITA6aS5pbnRlcnJ1cHRlZD0hMSl9LGkuZm4uc2xpY2s9ZnVuY3Rpb24oKXt2YXIgaSx0LG89dGhpcyxzPWFyZ3VtZW50c1swXSxuPUFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGFyZ3VtZW50cywxKSxyPW8ubGVuZ3RoO2ZvcihpPTA7aTxyO2krKylpZihcIm9iamVjdFwiPT10eXBlb2Ygc3x8XCJ1bmRlZmluZWRcIj09dHlwZW9mIHM/b1tpXS5zbGljaz1uZXcgZShvW2ldLHMpOnQ9b1tpXS5zbGlja1tzXS5hcHBseShvW2ldLnNsaWNrLG4pLFwidW5kZWZpbmVkXCIhPXR5cGVvZiB0KXJldHVybiB0O3JldHVybiBvfX0pO1xyXG4kKGRvY3VtZW50KS5yZWFkeShmdW5jdGlvbiAoKSB7XHJcbiAgICAkKCcuc2xpZGVyX2NvbnRhaW5lcicpLnNsaWNrKHtcclxuICAgICAgICBkb3RzOiB0cnVlLFxyXG4gICAgICAgIGluZmluaXRlOiB0cnVlLFxyXG4gICAgICAgIGFycm93czogdHJ1ZSxcclxuICAgICAgICBzcGVlZDogMTAwMCxcclxuICAgICAgICBzbGlkZXNUb1Nob3c6IDFcclxuICAgIH0pO1xyXG4gICAgJChcIi5pbWFnZV9jb250YWluZXJcIikuc2xpY2soe1xyXG4gICAgICAgIGRvdHM6IGZhbHNlLFxyXG4gICAgICAgIGluZmluaXRlOiB0cnVlLFxyXG4gICAgICAgIGFycm93czogdHJ1ZSxcclxuICAgICAgICBzcGVlZDogMTAwMCxcclxuICAgICAgICBzbGlkZXNUb1Nob3c6IDFcclxuICAgIH0pXHJcbn0pO1xyXG5cclxuXHJcbiQoZG9jdW1lbnQpLnJlYWR5KGZ1bmN0aW9uICgpIHtcclxuICAgICQoJy5zbGlkZXJfcHJvZHVjdCcpLnNsaWNrKHtcclxuICAgICAgICBkb3RzOiB0cnVlLFxyXG4gICAgICAgIGluZmluaXRlOiBmYWxzZSxcclxuICAgICAgICBhcnJvd3M6IHRydWUsXHJcbiAgICAgICAgc3BlZWQ6IDEwMDAsXHJcbiAgICAgICAgc2xpZGVzVG9TaG93OiA1LFxyXG4gICAgICAgIHNsaWRlc1RvU2Nyb2xsOiA1LFxyXG4gICAgICAgIHJlc3BvbnNpdmU6IFt7XHJcbiAgICAgICAgICAgICAgICBicmVha3BvaW50OiAxMjgwLFxyXG4gICAgICAgICAgICAgICAgc2V0dGluZ3M6IHtcclxuICAgICAgICAgICAgICAgICAgICBzbGlkZXNUb1Nob3c6IDMsXHJcbiAgICAgICAgICAgICAgICAgICAgc2xpZGVzVG9TY3JvbGw6IDMsXHJcbiAgICAgICAgICAgICAgICAgICAgaW5maW5pdGU6IHRydWUsXHJcbiAgICAgICAgICAgICAgICAgICAgZG90czogdHJ1ZSxcclxuICAgICAgICAgICAgICAgICAgICBpbmZpbml0ZTogZmFsc2UsXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIGJyZWFrcG9pbnQ6IDc2NyxcclxuICAgICAgICAgICAgICAgIHNldHRpbmdzOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgc2xpZGVzVG9TaG93OiAxLFxyXG4gICAgICAgICAgICAgICAgICAgIHNsaWRlc1RvU2Nyb2xsOiAxLFxyXG4gICAgICAgICAgICAgICAgICAgIGluZmluaXRlOiB0cnVlLFxyXG4gICAgICAgICAgICAgICAgICAgIGRvdHM6IHRydWUsXHJcbiAgICAgICAgICAgICAgICAgICAgaW5maW5pdGU6IGZhbHNlLFxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgXVxyXG4gICAgfSk7XHJcbn0pO1xyXG5cclxuJChkb2N1bWVudCkucmVhZHkoZnVuY3Rpb24gKCkge1xyXG4gICAgJCgnLnNsaWRlcl9wcm9kdWN0X2hpdHMnKS5zbGljayh7XHJcbiAgICAgICAgZG90czogdHJ1ZSxcclxuICAgICAgICBpbmZpbml0ZTogZmFsc2UsXHJcbiAgICAgICAgYXJyb3dzOiB0cnVlLFxyXG4gICAgICAgIHNwZWVkOiAxMDAwLFxyXG4gICAgICAgIHNsaWRlc1RvU2hvdzogNSxcclxuICAgICAgICBzbGlkZXNUb1Njcm9sbDogNSxcclxuICAgICAgICByZXNwb25zaXZlOiBbe1xyXG4gICAgICAgICAgICBicmVha3BvaW50OiAxMjgwLFxyXG4gICAgICAgICAgICBzZXR0aW5nczoge1xyXG4gICAgICAgICAgICAgICAgc2xpZGVzVG9TaG93OiAzLFxyXG4gICAgICAgICAgICAgICAgc2xpZGVzVG9TY3JvbGw6IDMsXHJcbiAgICAgICAgICAgICAgICBpbmZpbml0ZTogdHJ1ZSxcclxuICAgICAgICAgICAgICAgIGRvdHM6IHRydWUsXHJcbiAgICAgICAgICAgICAgICBpbmZpbml0ZTogZmFsc2UsXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9LCB7XHJcbiAgICAgICAgICAgIGJyZWFrcG9pbnQ6IDc2NyxcclxuICAgICAgICAgICAgc2V0dGluZ3M6IHtcclxuICAgICAgICAgICAgICAgIHNsaWRlc1RvU2hvdzogMSxcclxuICAgICAgICAgICAgICAgIHNsaWRlc1RvU2Nyb2xsOiAxLFxyXG4gICAgICAgICAgICAgICAgaW5maW5pdGU6IHRydWUsXHJcbiAgICAgICAgICAgICAgICBkb3RzOiB0cnVlLFxyXG4gICAgICAgICAgICAgICAgaW5maW5pdGU6IGZhbHNlLFxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfV1cclxuICAgIH0pXHJcbiAgICAkKCcuc2xpZGVyX2ZlZWRiYWNrJykuc2xpY2soe1xyXG4gICAgICAgIGRvdHM6IHRydWUsXHJcbiAgICAgICAgaW5maW5pdGU6IGZhbHNlLFxyXG4gICAgICAgIGFycm93czogdHJ1ZSxcclxuICAgICAgICBzcGVlZDogMTAwMCxcclxuICAgICAgICBzbGlkZXNUb1Nob3c6IDIsXHJcbiAgICAgICAgc2xpZGVzVG9TY3JvbGw6IDIsXHJcbiAgICAgICAgcmVzcG9uc2l2ZTogW3tcclxuICAgICAgICAgICAgYnJlYWtwb2ludDogMTI4MCxcclxuICAgICAgICAgICAgc2V0dGluZ3M6IHtcclxuICAgICAgICAgICAgICAgIHNsaWRlc1RvU2hvdzogMSxcclxuICAgICAgICAgICAgICAgIHNsaWRlc1RvU2Nyb2xsOiAxLFxyXG4gICAgICAgICAgICAgICAgaW5maW5pdGU6IHRydWUsXHJcbiAgICAgICAgICAgICAgICBkb3RzOiB0cnVlLFxyXG4gICAgICAgICAgICAgICAgaW5maW5pdGU6IGZhbHNlLFxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSwge1xyXG4gICAgICAgICAgICBicmVha3BvaW50OiA3NjcsXHJcbiAgICAgICAgICAgIHNldHRpbmdzOiB7XHJcbiAgICAgICAgICAgICAgICBzbGlkZXNUb1Nob3c6IDEsXHJcbiAgICAgICAgICAgICAgICBzbGlkZXNUb1Njcm9sbDogMSxcclxuICAgICAgICAgICAgICAgIGluZmluaXRlOiB0cnVlLFxyXG4gICAgICAgICAgICAgICAgZG90czogdHJ1ZSxcclxuICAgICAgICAgICAgICAgIGluZmluaXRlOiBmYWxzZSxcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1dXHJcbiAgICB9KVxyXG5cclxuICAgIHZhciBsZW5ndGhTbGlkZXIgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKFwiLnNsaWRlci1uYXYgaW1nXCIpO1xyXG4gICAgaWYgKGxlbmd0aFNsaWRlcikge1xyXG4gICAgICAgICQoJy5zbGlkZXItZm9yJykuc2xpY2soe1xyXG4gICAgICAgICAgICBzbGlkZXNUb1Nob3c6IDEsXHJcbiAgICAgICAgICAgIHNsaWRlc1RvU2Nyb2xsOiAxLFxyXG4gICAgICAgICAgICBkb3RzOiB0cnVlLFxyXG4gICAgICAgICAgICBhcnJvd3M6IHRydWUsXHJcbiAgICAgICAgICAgIGZhZGU6IHRydWUsXHJcbiAgICAgICAgICAgIGFzTmF2Rm9yOiAnLnNsaWRlci1uYXYnXHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgJCgnLnNsaWRlci1uYXYnKS5zbGljayh7XHJcbiAgICAgICAgICAgIHNsaWRlc1RvU2hvdzogbGVuZ3RoU2xpZGVyLmxlbmd0aCxcclxuICAgICAgICAgICAgc2xpZGVzVG9TY3JvbGw6IDEsXHJcbiAgICAgICAgICAgIHZlcnRpY2FsOiB0cnVlLFxyXG4gICAgICAgICAgICBkb3RzOiBmYWxzZSxcclxuICAgICAgICAgICAgYXJyb3dzOiBmYWxzZSxcclxuICAgICAgICAgICAgdmVydGljYWxTd2lwaW5nOiB0cnVlLFxyXG4gICAgICAgICAgICBhc05hdkZvcjogJy5zbGlkZXItZm9yJyxcclxuICAgICAgICAgICAgZm9jdXNPblNlbGVjdDogdHJ1ZVxyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG59KTtcclxud2luZG93Lm9ubG9hZCA9IGZ1bmN0aW9uICgpIHtcclxuXHJcbiBcclxuICB2YXIgU2xpZGVyUHJvZHVjdEhpdHMgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKFxyXG4gICAgXCIuc2xpZGVyX3Byb2R1Y3RcIlxyXG4gIClbMF07XHJcbiAgdmFyIFNsaWRlckZlZWRiYWNrID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbChcclxuICAgIFwiLnNsaWRlcl9wcm9kdWN0X2hpdHNcIlxyXG4gIClbMF07XHJcbiAgaWYgKFNsaWRlclByb2R1Y3RIaXRzKSB7XHJcbiAgICBTbGlkZXJQcm9kdWN0SGl0cy5hZGRFdmVudExpc3RlbmVyKFwibW91c2V1cFwiLCBmdW5jdGlvbiAoKSB7XHJcbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgU2xpZGVyUHJvZHVjdERvdHMubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICBpZiAoU2xpZGVyUHJvZHVjdERvdHNbaV0uY2xhc3NMaXN0Lmxlbmd0aCA9PSAxKSB7XHJcbiAgICAgICAgICBTaXplVXBbMF0uaW5uZXJIVE1MID0gU2xpZGVyUHJvZHVjdERvdHNbaV0uY2hpbGRyZW5bMF0uaW5uZXJIVE1MO1xyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG4gICAgfSlcclxuICAgIFNsaWRlclByb2R1Y3RIaXRzLmFkZEV2ZW50TGlzdGVuZXIoXCJ0b3VjaGVuZFwiLCBmdW5jdGlvbiAoKSB7XHJcbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgU2xpZGVyUHJvZHVjdERvdHMubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICBpZiAoU2xpZGVyUHJvZHVjdERvdHNbaV0uY2xhc3NMaXN0Lmxlbmd0aCA9PSAxKSB7XHJcbiAgICAgICAgICBTaXplVXBbMF0uaW5uZXJIVE1MID0gU2xpZGVyUHJvZHVjdERvdHNbaV0uY2hpbGRyZW5bMF0uaW5uZXJIVE1MO1xyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG4gICAgfSlcclxuICB9XHJcbiAgaWYgKFNsaWRlckZlZWRiYWNrKSB7XHJcbiAgICBTbGlkZXJGZWVkYmFjay5hZGRFdmVudExpc3RlbmVyKFwibW91c2V1cFwiLCBmdW5jdGlvbiAoKSB7XHJcbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgU2xpZGVyUHJvZHVjdEhpdHNEb3RzLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgaWYgKFNsaWRlclByb2R1Y3RIaXRzRG90c1tpXS5jbGFzc0xpc3QubGVuZ3RoID09IDEpIHtcclxuICAgICAgICAgIFNpemVVcFsxXS5pbm5lckhUTUwgPSBTbGlkZXJQcm9kdWN0SGl0c0RvdHNbaV0uY2hpbGRyZW5bMF0uaW5uZXJIVE1MO1xyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG4gICAgfSlcclxuICAgIFNsaWRlckZlZWRiYWNrLmFkZEV2ZW50TGlzdGVuZXIoXCJ0b3VjaGVuZFwiLCBmdW5jdGlvbiAoKSB7XHJcbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgU2xpZGVyUHJvZHVjdEhpdHNEb3RzLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgaWYgKFNsaWRlclByb2R1Y3RIaXRzRG90c1tpXS5jbGFzc0xpc3QubGVuZ3RoID09IDEpIHtcclxuICAgICAgICAgIFNpemVVcFsxXS5pbm5lckhUTUwgPSBTbGlkZXJQcm9kdWN0SGl0c0RvdHNbaV0uY2hpbGRyZW5bMF0uaW5uZXJIVE1MO1xyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG4gICAgfSlcclxuICB9XHJcblxyXG5cclxuICB2YXIgYm9keSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoXCJib2R5XCIpWzBdO1xyXG4gIHZhciB2YWx1ZVNpemVQb3B1bGFyID0gMDtcclxuICB2YXIgSG92ZXJEb3duID0gZG9jdW1lbnQuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZShcImhvdmVyX2Rvd25cIik7XHJcbiAgdmFyIEhlYWRlclRvcExhbmcgPSBkb2N1bWVudC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lKFwibV9oZWFkZXJfdG9wX2xhbmdcIilbMF07XHJcbiAgdmFyIEFycm93Q2xpY2sgPSBkb2N1bWVudC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lKFwiYXJyb3dfY2xpY2tcIik7XHJcbiAgdmFyIFNsaWRlclByb2R1Y3RBcnJvdyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoXHJcbiAgICBcIi5zbGlkZXJfcHJvZHVjdCAuc2xpY2stYXJyb3dcIlxyXG4gICk7XHJcblxyXG4gIHZhciBTbGlkZXJQcm9kdWN0SGl0c0Fycm93ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbChcclxuICAgIFwiLnNsaWRlcl9wcm9kdWN0X2hpdHMgLnNsaWNrLWFycm93XCJcclxuICApO1xyXG4gIHZhciBTbGlkZXJGZWVkYmFja0Fycm93ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbChcclxuICAgIFwiLnNsaWRlcl9mZWVkYmFjayAuc2xpY2stYXJyb3dcIlxyXG4gICk7XHJcbiAgdmFyIFNpemUgPSBkb2N1bWVudC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lKFwic2l6ZVwiKTtcclxuICB2YXIgU2l6ZVVwID0gZG9jdW1lbnQuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZShcInNpemVfdXBcIik7XHJcblxyXG4gIHZhciBTbGlkZXJQcm9kdWN0RG90cyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoXHJcbiAgICBcIi5zbGlkZXJfcHJvZHVjdCAuc2xpY2stZG90cyBsaVwiXHJcbiAgKTtcclxuICB2YXIgU2xpZGVyUHJvZHVjdEhpdHNEb3RzID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbChcclxuICAgIFwiLnNsaWRlcl9wcm9kdWN0X2hpdHMgLnNsaWNrLWRvdHMgbGlcIlxyXG4gICk7XHJcbiAgdmFyIFNsaWRlckZlZWRiYWNrRG90cyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoXHJcbiAgICBcIi5zbGlkZXJfZmVlZGJhY2sgLnNsaWNrLWRvdHMgbGlcIlxyXG4gICk7XHJcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBTbGlkZXJQcm9kdWN0QXJyb3cubGVuZ3RoOyBpKyspIHtcclxuICAgIEFycm93Q2xpY2tbMF0uYXBwZW5kQ2hpbGQoU2xpZGVyUHJvZHVjdEFycm93W2ldKTtcclxuICB9XHJcbiAgaWYgKFNsaWRlclByb2R1Y3REb3RzLmxlbmd0aCA9PSAwKSB7XHJcbiAgICBTbGlkZXJQcm9kdWN0RG90cyA9IG51bGw7XHJcbiAgfSBlbHNlIHtcclxuICAgIFNpemVbMF0uaW5uZXJIVE1MID0gU2xpZGVyUHJvZHVjdERvdHMubGVuZ3RoO1xyXG4gICAgU2xpZGVyUHJvZHVjdEFycm93WzFdLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCBmdW5jdGlvbiAoKSB7XHJcbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgU2xpZGVyUHJvZHVjdERvdHMubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICBpZiAoU2xpZGVyUHJvZHVjdERvdHNbaV0uY2xhc3NMaXN0Lmxlbmd0aCA9PSAxKSB7XHJcbiAgICAgICAgICBTaXplVXBbMF0uaW5uZXJIVE1MID0gU2xpZGVyUHJvZHVjdERvdHNbaV0uY2hpbGRyZW5bMF0uaW5uZXJIVE1MO1xyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG4gICAgfSk7XHJcbiAgICBTbGlkZXJQcm9kdWN0QXJyb3dbMF0uYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsIGZ1bmN0aW9uICgpIHtcclxuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBTbGlkZXJQcm9kdWN0RG90cy5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgIGlmIChTbGlkZXJQcm9kdWN0RG90c1tpXS5jbGFzc0xpc3QubGVuZ3RoID09IDEpIHtcclxuICAgICAgICAgIFNpemVVcFswXS5pbm5lckhUTUwgPSBTbGlkZXJQcm9kdWN0RG90c1tpXS5jaGlsZHJlblswXS5pbm5lckhUTUw7XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcbiAgICB9KTtcclxuXHJcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IFNsaWRlclByb2R1Y3RIaXRzQXJyb3cubGVuZ3RoOyBpKyspIHtcclxuICAgICAgQXJyb3dDbGlja1sxXS5hcHBlbmRDaGlsZChTbGlkZXJQcm9kdWN0SGl0c0Fycm93W2ldKTtcclxuICAgIH1cclxuICAgIFNpemVbMV0uaW5uZXJIVE1MID0gU2xpZGVyUHJvZHVjdEhpdHNEb3RzLmxlbmd0aDtcclxuICAgIFNsaWRlclByb2R1Y3RIaXRzQXJyb3dbMV0uYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsIGZ1bmN0aW9uICgpIHtcclxuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBTbGlkZXJQcm9kdWN0SGl0c0RvdHMubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICBpZiAoU2xpZGVyUHJvZHVjdEhpdHNEb3RzW2ldLmNsYXNzTGlzdC5sZW5ndGggPT0gMSkge1xyXG4gICAgICAgICAgU2l6ZVVwWzFdLmlubmVySFRNTCA9IFNsaWRlclByb2R1Y3RIaXRzRG90c1tpXS5jaGlsZHJlblswXS5pbm5lckhUTUw7XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcbiAgICB9KTtcclxuICAgIFNsaWRlclByb2R1Y3RIaXRzQXJyb3dbMF0uYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsIGZ1bmN0aW9uICgpIHtcclxuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBTbGlkZXJQcm9kdWN0SGl0c0RvdHMubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICBpZiAoU2xpZGVyUHJvZHVjdEhpdHNEb3RzW2ldLmNsYXNzTGlzdC5sZW5ndGggPT0gMSkge1xyXG4gICAgICAgICAgU2l6ZVVwWzFdLmlubmVySFRNTCA9IFNsaWRlclByb2R1Y3RIaXRzRG90c1tpXS5jaGlsZHJlblswXS5pbm5lckhUTUw7XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcbiAgICB9KTtcclxuXHJcbiAgfVxyXG5cclxuXHJcbiAgdmFyIEZlZWRiYWNrSXRlbXMgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKFwiZm9ybS5mZWVkYmFja19pdGVtcyAuY2xpY2tfYXNzZXNzbWVudD5kaXZcIik7XHJcbiAgaWYgKEZlZWRiYWNrSXRlbXMpIHtcclxuICAgIHZhciBjb3VudGVycyA9IHtcclxuICAgICAgY291bnQ6IDBcclxuICAgIH07XHJcblxyXG4gICAgZnVuY3Rpb24gRmVlZGJhY2tHcmF5U3ZnKGUpIHtcclxuXHJcbiAgICAgIGlmIChlLmN1cnJlbnRUYXJnZXQuY2xhc3NMaXN0Lmxlbmd0aCA9PT0gMCkge1xyXG4gICAgICAgIGUuY3VycmVudFRhcmdldC5jbGFzc0xpc3QuYWRkKFwiYWN0aXZlXCIpO1xyXG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgRmVlZGJhY2tJdGVtcy5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgaWYgKEZlZWRiYWNrSXRlbXNbaV0uY2xhc3NMaXN0Lmxlbmd0aCA9PT0gMSkge1xyXG4gICAgICAgICAgICBjb3VudGVycy5jb3VudCA9IGk7XHJcbiAgICAgICAgICAgIGZvciAodmFyIGogPSAwOyBqIDwgY291bnRlcnMuY291bnQ7IGorKykge1xyXG4gICAgICAgICAgICAgIEZlZWRiYWNrSXRlbXNbal0uY2xhc3NMaXN0LmFkZChcImFjdGl2ZVwiKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICBlLmN1cnJlbnRUYXJnZXQuY2xhc3NMaXN0LnJlbW92ZShcImFjdGl2ZVwiKTtcclxuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IEZlZWRiYWNrSXRlbXMubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgIGlmIChGZWVkYmFja0l0ZW1zW2ldLmNsYXNzTGlzdC5sZW5ndGggPT09IDApIHtcclxuICAgICAgICAgICAgY291bnRlcnMuY291bnQgPSBpO1xyXG4gICAgICAgICAgICBmb3IgKHZhciBqID0gY291bnRlcnMuY291bnQ7IGogPCBGZWVkYmFja0l0ZW1zLmxlbmd0aDsgaisrKSB7XHJcbiAgICAgICAgICAgICAgZS5jdXJyZW50VGFyZ2V0LmNsYXNzTGlzdC5hZGQoXCJhY3RpdmVcIik7XHJcbiAgICAgICAgICAgICAgRmVlZGJhY2tJdGVtc1tqXS5jbGFzc0xpc3QucmVtb3ZlKFwiYWN0aXZlXCIpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgRmVlZGJhY2tJdGVtcy5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgIGlmIChGZWVkYmFja0l0ZW1zW2ldLmNsYXNzTGlzdC5sZW5ndGggPT09IDEpIHtcclxuICAgICAgICAgIHZhbHVlU2l6ZVBvcHVsYXIgPSBpICsgMTtcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuXHJcbiAgICB9XHJcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IEZlZWRiYWNrSXRlbXMubGVuZ3RoOyBpKyspIHtcclxuICAgICAgRmVlZGJhY2tJdGVtc1tpXS5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgRmVlZGJhY2tHcmF5U3ZnLCBmYWxzZSlcclxuICAgIH1cclxuXHJcblxyXG5cclxuICB9XHJcblxyXG4gIHZhciBUYWJTcHJvZHVjdCA9IGRvY3VtZW50LmdldEVsZW1lbnRzQnlDbGFzc05hbWUoXCJ0YWJzX3Byb2R1Y3RcIilbMF07XHJcbiAgaWYgKFRhYlNwcm9kdWN0KSB7XHJcbiAgICBUYWJTcHJvZHVjdC5vbm1vdXNlb3ZlciA9IGZ1bmN0aW9uIChldmVudCkge1xyXG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IFRhYlNwcm9kdWN0LmNoaWxkcmVuLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgVGFiU3Byb2R1Y3QuY2hpbGRyZW5baV0uY2xhc3NMaXN0LnJlbW92ZShcImFjdGl2ZVwiKTtcclxuICAgICAgfVxyXG4gICAgICB2YXIgdGFyZ2V0ID0gZXZlbnQudGFyZ2V0O1xyXG5cclxuICAgICAgaWYgKHRhcmdldC5ub2RlTmFtZSA9PT0gXCJMSVwiKSB7XHJcblxyXG4gICAgICAgIHRhcmdldC5jbGFzc0xpc3QuYWRkKFwiYWN0aXZlXCIpO1xyXG4gICAgICB9IGVsc2UgaWYgKHRhcmdldC5ub2RlTmFtZSA9PT0gXCJBXCIpIHtcclxuICAgICAgICB0YXJnZXQucGFyZW50Tm9kZS5jbGFzc0xpc3QuYWRkKFwiYWN0aXZlXCIpO1xyXG4gICAgICB9XHJcbiAgICB9O1xyXG5cclxuICAgIFRhYlNwcm9kdWN0Lm9ubW91c2VvdXQgPSBmdW5jdGlvbiAoZXZlbnQpIHtcclxuICAgICAgdmFyIHRhcmdldCA9IGV2ZW50LnRhcmdldDtcclxuICAgICAgaWYgKHRhcmdldC5ub2RlTmFtZSA9PT0gXCJMSVwiKSB7XHJcbiAgICAgICAgdGFyZ2V0LmNsYXNzTGlzdC5yZW1vdmUoXCJhY3RpdmVcIik7XHJcbiAgICAgIH0gZWxzZSBpZiAodGFyZ2V0Lm5vZGVOYW1lID09PSBcIkFcIikge1xyXG4gICAgICAgIHRhcmdldC5wYXJlbnROb2RlLmNsYXNzTGlzdC5yZW1vdmUoXCJhY3RpdmVcIik7XHJcbiAgICAgIH1cclxuICAgIH07XHJcbiAgfVxyXG4gIGlmIChTbGlkZXJGZWVkYmFja0RvdHMubGVuZ3RoID09PSAwKSB7XHJcbiAgICBTbGlkZXJGZWVkYmFja0RvdHMgPSBudWxsO1xyXG4gIH0gZWxzZSB7XHJcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IFNsaWRlckZlZWRiYWNrQXJyb3cubGVuZ3RoOyBpKyspIHtcclxuICAgICAgQXJyb3dDbGlja1swXS5hcHBlbmRDaGlsZChTbGlkZXJGZWVkYmFja0Fycm93W2ldKTtcclxuICAgIH1cclxuICAgIFNpemVbMF0uaW5uZXJIVE1MID0gU2xpZGVyRmVlZGJhY2tEb3RzLmxlbmd0aDtcclxuICAgIFNsaWRlckZlZWRiYWNrQXJyb3dbMV0uYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsIGZ1bmN0aW9uICgpIHtcclxuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBTbGlkZXJGZWVkYmFja0RvdHMubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICBpZiAoU2xpZGVyRmVlZGJhY2tEb3RzW2ldLmNsYXNzTGlzdC5sZW5ndGggPT0gMSkge1xyXG4gICAgICAgICAgU2l6ZVVwWzBdLmlubmVySFRNTCA9IFNsaWRlckZlZWRiYWNrRG90c1tpXS5jaGlsZHJlblswXS5pbm5lckhUTUw7XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcbiAgICB9KTtcclxuICAgIFNsaWRlckZlZWRiYWNrQXJyb3dbMF0uYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsIGZ1bmN0aW9uICgpIHtcclxuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBTbGlkZXJGZWVkYmFja0RvdHMubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICBpZiAoU2xpZGVyRmVlZGJhY2tEb3RzW2ldLmNsYXNzTGlzdC5sZW5ndGggPT0gMSkge1xyXG4gICAgICAgICAgU2l6ZVVwWzBdLmlubmVySFRNTCA9IFNsaWRlckZlZWRiYWNrRG90c1tpXS5jaGlsZHJlblswXS5pbm5lckhUTUw7XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcbiAgICB9KTtcclxuICB9XHJcblxyXG4gIHZhciBDYXRhbG9nUHJvZHVjdEFsbCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoXCIuY2F0YWxvZ19pdGVtcyAgLml0ZW1fcHJvZHVjdCBcIik7XHJcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBDYXRhbG9nUHJvZHVjdEFsbC5sZW5ndGg7IGkrKykge1xyXG4gICAgdmFyIGNyZWF0ZUVsZW1lbnRUd28gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xyXG4gICAgQ2F0YWxvZ1Byb2R1Y3RBbGxbaV0ucGFyZW50Tm9kZS5hcHBlbmRDaGlsZChjcmVhdGVFbGVtZW50VHdvKTtcclxuICAgIGNyZWF0ZUVsZW1lbnRUd28uY2xhc3NMaXN0LmFkZChcInByb2R1Y3Rfc2l6ZVwiKTtcclxuICAgIGNyZWF0ZUVsZW1lbnRUd28uYXBwZW5kQ2hpbGQoQ2F0YWxvZ1Byb2R1Y3RBbGxbaV0pO1xyXG4gIH1cclxuXHJcbiAgZnVuY3Rpb24gTW91c2UoZSkge1xyXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBDYXRhbG9nUHJvZHVjdEFsbC5sZW5ndGg7IGkrKykge1xyXG4gICAgICBDYXRhbG9nUHJvZHVjdEFsbFtpXS5zdHlsZS56SW5kZXggPSBcIjFcIjtcclxuICAgIH1cclxuICAgIGUuY3VycmVudFRhcmdldC5zdHlsZS56SW5kZXggPSBcIjE0XCI7XHJcbiAgfVxyXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgQ2F0YWxvZ1Byb2R1Y3RBbGwubGVuZ3RoOyBpKyspIHtcclxuICAgIENhdGFsb2dQcm9kdWN0QWxsW2ldLmFkZEV2ZW50TGlzdGVuZXIoXCJtb3VzZW92ZXJcIiwgTW91c2UsIGZhbHNlKTtcclxuICB9XHJcblxyXG5cclxuXHJcblxyXG4gIHZhciBidXR0b25fY2F0YWxvZyA9IGRvY3VtZW50LmdldEVsZW1lbnRzQnlDbGFzc05hbWUoXCJidXR0b25fY2F0YWxvZ1wiKVswXTtcclxuICB2YXIgRGV2aWNlID0gZG9jdW1lbnQuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZShcImRldmljZV9jb250YWluZXJcIilbMF07XHJcbiAgaWYgKGJ1dHRvbl9jYXRhbG9nKSB7XHJcbiAgICBidXR0b25fY2F0YWxvZy5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgZnVuY3Rpb24gKCkge1xyXG4gICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcclxuICAgICAgICBEZXZpY2UuY2xhc3NMaXN0LnJlbW92ZShcImFjdGl2ZS1zY2FsZVwiKTtcclxuICAgICAgfSwgNTAwKTtcclxuICAgICAgaWYgKERldmljZS5jbGFzc0xpc3QubGVuZ3RoID09PSAyKSB7XHJcbiAgICAgICAgRGV2aWNlLmNsYXNzTGlzdC5hZGQoXCJhY3RpdmVcIik7XHJcbiAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgRGV2aWNlLmNsYXNzTGlzdC5yZW1vdmUoXCJhY3RpdmVcIik7XHJcbiAgICAgICAgRGV2aWNlLmNsYXNzTGlzdC5hZGQoXCJhY3RpdmUtc2NhbGVcIik7XHJcbiAgICAgIH1cclxuICAgIH0pO1xyXG5cclxuICAgIGZ1bmN0aW9uIGFkZENsaWNrKGUpIHtcclxuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBIZWFkZXJUb3BMYW5nLmNoaWxkcmVuLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgSGVhZGVyVG9wTGFuZy5jaGlsZHJlbltpXS5jbGFzc0xpc3QucmVtb3ZlKFwiYWN0aXZlXCIpO1xyXG4gICAgICB9XHJcbiAgICAgIGUudGFyZ2V0LmNsYXNzTGlzdC5hZGQoXCJhY3RpdmVcIik7XHJcbiAgICB9XHJcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IEhlYWRlclRvcExhbmcuY2hpbGRyZW4ubGVuZ3RoOyBpKyspIHtcclxuICAgICAgSGVhZGVyVG9wTGFuZy5jaGlsZHJlbltpXS5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgYWRkQ2xpY2ssIGZhbHNlKTtcclxuICAgIH1cclxuICB9XHJcbiAgaWYgKHdpbmRvdy5pbm5lcldpZHRoIDw9IDc2Nykge1xyXG4gICAgdmFyIGxpbmtob3ZlciA9IGRvY3VtZW50LmdldEVsZW1lbnRzQnlDbGFzc05hbWUoXCJsaW5rX2hvdmVyXCIpO1xyXG4gICAgdmFyIGhhbWJ1cmdlciA9IGRvY3VtZW50LmdldEVsZW1lbnRzQnlDbGFzc05hbWUoXCJoYW1idXJnZXJcIik7XHJcbiAgICB2YXIgTW9kYWxIZWFkZXJNZW51ID0gZG9jdW1lbnQuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZShcclxuICAgICAgXCJtb2RhbF9oZWFkZXJfbWVudVwiXHJcbiAgICApWzBdO1xyXG4gICAgdmFyIE1vZGFsSGVhZGVyVG9wID0gZG9jdW1lbnQuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZShcIm1vZGFsX2hlYWRlcl90b3BcIilbMF07XHJcbiAgICB2YXIgTW9iUm93RWxlbWVudCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoXHJcbiAgICAgIFwiLmNvbnRlbnRfZm9vdGVyIC5tb2Jfcm93XCJcclxuICAgIClbMF07XHJcbiAgICB2YXIgTW9iQWRhcHRpdmUgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKFxyXG4gICAgICBcIi5jb250ZW50X2Zvb3Rlcj5kaXY6bGFzdC1jaGlsZFwiXHJcbiAgICApWzBdO1xyXG4gICAgdmFyIE1vYlRlbFNlYXJjaCA9IGRvY3VtZW50LmdldEVsZW1lbnRzQnlDbGFzc05hbWUoXCJtb2JfdGVsX3NlYXJjaFwiKVswXTtcclxuICAgIHZhciBNb2JpbGVIZWFkZXJUb3AgPSBkb2N1bWVudC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lKFxyXG4gICAgICBcIm1vYmlsZV9oZWFkZXJfdG9wXCJcclxuICAgIClbMF07XHJcbiAgICBpZiAoTW9iQWRhcHRpdmUpIHtcclxuICAgICAgTW9iUm93RWxlbWVudC5jaGlsZHJlblswXS5hcHBlbmRDaGlsZChNb2JBZGFwdGl2ZS5sYXN0RWxlbWVudENoaWxkKTtcclxuICAgICAgTW9iaWxlSGVhZGVyVG9wLmFwcGVuZENoaWxkKE1vYlRlbFNlYXJjaCk7XHJcbiAgICAgIGlmIChIZWFkZXJUb3BMYW5nKSB7XHJcbiAgICAgICAgTW9kYWxIZWFkZXJUb3AuYXBwZW5kQ2hpbGQoSGVhZGVyVG9wTGFuZyk7XHJcbiAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBmdW5jdGlvbiBtZW51KGUpIHtcclxuICAgICAgaWYgKFxyXG4gICAgICAgIGUuY3VycmVudFRhcmdldC5jbGFzc0xpc3RbZS5jdXJyZW50VGFyZ2V0LmNsYXNzTGlzdC5sZW5ndGggLSAxXSA9PT1cclxuICAgICAgICBcImFjdGl2ZVwiXHJcbiAgICAgICkge1xyXG4gICAgICAgIGJvZHkuY2xhc3NMaXN0LnJlbW92ZShcIm1vZGFsX29wZW5cIik7XHJcbiAgICAgICAgZS5jdXJyZW50VGFyZ2V0LmNsYXNzTGlzdC5yZW1vdmUoXCJhY3RpdmVcIik7XHJcbiAgICAgICAgTW9kYWxIZWFkZXJNZW51LmNsYXNzTGlzdC5yZW1vdmUoXCJhY3RpdmVcIik7XHJcbiAgICAgICAgaGFtYnVyZ2VyWzFdLmNsYXNzTGlzdC5yZW1vdmUoXCJhY3RpdmVcIik7XHJcbiAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICBib2R5LmNsYXNzTGlzdC5hZGQoXCJtb2RhbF9vcGVuXCIpO1xyXG4gICAgICAgIH0sIDUwMClcclxuXHJcbiAgICAgICAgZS5jdXJyZW50VGFyZ2V0LmNsYXNzTGlzdC5hZGQoXCJhY3RpdmVcIik7XHJcbiAgICAgICAgaGFtYnVyZ2VyWzBdLmNsYXNzTGlzdC5hZGQoXCJhY3RpdmVcIik7XHJcbiAgICAgICAgTW9kYWxIZWFkZXJNZW51LmNsYXNzTGlzdC5hZGQoXCJhY3RpdmVcIik7XHJcbiAgICAgIH1cclxuICAgIH1cclxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgaGFtYnVyZ2VyLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgIGhhbWJ1cmdlcltpXS5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgbWVudSwgZmFsc2UpO1xyXG4gICAgfVxyXG5cclxuICAgIHZhciBtYXNzaXZlVHdvID0gW107XHJcbiAgICB2YXIgZGV2aWNlTGkgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcImRldmljZVwiKTtcclxuICAgIGZvciAodmFyIGsgPSAwOyBrIDwgSG92ZXJEb3duLmxlbmd0aDsgaysrKSB7XHJcbiAgICAgIHZhciBjcmVhdGVFbGVtID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcclxuICAgICAgZGV2aWNlTGkuY2hpbGRyZW5ba10uYXBwZW5kQ2hpbGQoY3JlYXRlRWxlbSk7XHJcbiAgICAgIGNyZWF0ZUVsZW0uY2xhc3NMaXN0LmFkZChcImRyb3BfZG93blwiKTtcclxuICAgICAgY3JlYXRlRWxlbS5hcHBlbmRDaGlsZChsaW5raG92ZXJba10pO1xyXG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IEhvdmVyRG93bltrXS5jaGlsZHJlbi5sZW5ndGggLSAxOyBpKyspIHtcclxuICAgICAgICBmb3IgKFxyXG4gICAgICAgICAgdmFyIGogPSAwOyBqIDwgSG92ZXJEb3duW2tdLmNoaWxkcmVuW2ldLmNoaWxkcmVuWzBdLmNoaWxkcmVuLmxlbmd0aDsgaisrXHJcbiAgICAgICAgKSB7XHJcbiAgICAgICAgICBtYXNzaXZlVHdvLnB1c2goSG92ZXJEb3duW2tdLmNoaWxkcmVuW2ldLmNoaWxkcmVuWzBdLmNoaWxkcmVuW2pdKTtcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIEhvdmVyRG93bltrXS5jaGlsZHJlblswXS5jaGlsZHJlblswXS5pbm5lckhUTUwgPSBcIlwiO1xyXG4gICAgICBjb3VudEFkYXB0aXZlID0gMTtcclxuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBtYXNzaXZlVHdvLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgSG92ZXJEb3duW2tdLmNoaWxkcmVuWzBdLmNoaWxkcmVuWzBdLmFwcGVuZENoaWxkKG1hc3NpdmVUd29baV0pO1xyXG4gICAgICB9XHJcbiAgICAgIG1hc3NpdmVUd28gPSBbXTtcclxuICAgIH1cclxuICAgIHZhciBEcm9wRG93biA9IGRvY3VtZW50LmdldEVsZW1lbnRzQnlDbGFzc05hbWUoXCJkcm9wX2Rvd25cIik7XHJcblxyXG4gICAgZnVuY3Rpb24gZHJvcERvd24oZSkge1xyXG4gICAgICBpZiAoZS5jdXJyZW50VGFyZ2V0LnBhcmVudE5vZGUuY2xhc3NMaXN0W2UuY3VycmVudFRhcmdldC5jbGFzc0xpc3QubGVuZ3RoIC0gMV0gPT09IFwiYWN0aXZlXCIpIHtcclxuICAgICAgICBlLmN1cnJlbnRUYXJnZXQucGFyZW50Tm9kZS5jbGFzc0xpc3QucmVtb3ZlKFwiYWN0aXZlXCIpO1xyXG4gICAgICAgIGUuY3VycmVudFRhcmdldC5wYXJlbnROb2RlLmNoaWxkcmVuWzBdLmNsYXNzTGlzdC5yZW1vdmUoXCJhY3RpdmVcIik7XHJcblxyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgIGUuY3VycmVudFRhcmdldC5wYXJlbnROb2RlLmNoaWxkcmVuWzBdLmNsYXNzTGlzdC5hZGQoXCJhY3RpdmVcIik7XHJcbiAgICAgICAgZS5jdXJyZW50VGFyZ2V0LnBhcmVudE5vZGUuY2xhc3NMaXN0LmFkZChcImFjdGl2ZVwiKTtcclxuICAgICAgfVxyXG4gICAgfVxyXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBEcm9wRG93bi5sZW5ndGg7IGkrKykge1xyXG4gICAgICBEcm9wRG93bltpXS5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgZHJvcERvd24sIGZhbHNlKTtcclxuICAgIH1cclxuICB9IGVsc2UgaWYgKHdpbmRvdy5pbm5lcldpZHRoIDw9IDEyODApIHtcclxuICAgIHZhciBtYXNzaXZlID0gW107XHJcbiAgICB2YXIgY291bnQgPSAwO1xyXG5cclxuICAgIGZvciAodmFyIGsgPSAwOyBrIDwgSG92ZXJEb3duLmxlbmd0aDsgaysrKSB7XHJcbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgSG92ZXJEb3duW2tdLmNoaWxkcmVuLmxlbmd0aCAtIDE7IGkrKykge1xyXG4gICAgICAgIGZvciAoXHJcbiAgICAgICAgICB2YXIgaiA9IDA7IGogPCBIb3ZlckRvd25ba10uY2hpbGRyZW5baV0uY2hpbGRyZW5bMF0uY2hpbGRyZW4ubGVuZ3RoOyBqKytcclxuICAgICAgICApIHtcclxuICAgICAgICAgIG1hc3NpdmUucHVzaChIb3ZlckRvd25ba10uY2hpbGRyZW5baV0uY2hpbGRyZW5bMF0uY2hpbGRyZW5bal0pO1xyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG5cclxuICAgICAgZm9yICh2YXIgaiA9IDA7IGogPCBIb3ZlckRvd25ba10uY2hpbGRyZW4ubGVuZ3RoIC0gMzsgaisrKSB7XHJcbiAgICAgICAgSG92ZXJEb3duW2tdLmNoaWxkcmVuW2pdLmNoaWxkcmVuWzBdLmlubmVySFRNTCA9IFwiXCI7XHJcbiAgICAgICAgY291bnQgPSAxO1xyXG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbWFzc2l2ZS5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgaWYgKGkgPCBtYXNzaXZlLmxlbmd0aCAvIDIpIHtcclxuICAgICAgICAgICAgSG92ZXJEb3duW2tdLmNoaWxkcmVuW2pdLmNoaWxkcmVuWzBdLmFwcGVuZENoaWxkKG1hc3NpdmVbaV0pO1xyXG4gICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgSG92ZXJEb3duW2tdLmNoaWxkcmVuW2NvdW50XS5jaGlsZHJlblswXS5hcHBlbmRDaGlsZChtYXNzaXZlW2ldKTtcclxuICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuICAgICAgbWFzc2l2ZSA9IFtdO1xyXG4gICAgfVxyXG4gIH1cclxuICBpZiAod2luZG93LmlubmVyV2lkdGggPD0gMTI4MCkge1xyXG4gICAgdmFyIEZpbHRlcnNQcm9kdWN0Q29udGFpbmVyID0gZG9jdW1lbnQuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZShcImZpbHRlcnNfcHJvZHVjdF9jb250YWluZXJcIilbMF07XHJcbiAgICB2YXIgQmFubmVyID0gZG9jdW1lbnQuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZShcImJhbm5lclwiKVswXTtcclxuICAgIGlmIChGaWx0ZXJzUHJvZHVjdENvbnRhaW5lcikge1xyXG4gICAgICBGaWx0ZXJzUHJvZHVjdENvbnRhaW5lci5hcHBlbmRDaGlsZChCYW5uZXIpO1xyXG4gICAgfVxyXG4gIH1cclxuICBpZiAod2luZG93LmlubmVyV2lkdGggPD0gNzY3KSB7XHJcbiAgICB2YXIgQnV0dG9uQ2xvc2UgPSBkb2N1bWVudC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lKFwiYnV0dG9uX2Nsb3NlXCIpWzBdO1xyXG4gICAgdmFyIFRleHRDb250YWluZXIgPSBkb2N1bWVudC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lKCd0ZXh0X2NvbnRhaW5lcicpWzBdO1xyXG4gICAgdmFyIEl0ZW1zT25saW5lU3RvcmUgPSBkb2N1bWVudC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lKFwiaXRlbXNfb25saW5lX3N0b3JlXCIpWzFdO1xyXG4gICAgaWYgKEl0ZW1zT25saW5lU3RvcmUgPT09IHVuZGVmaW5lZCkge1xyXG5cclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIFRleHRDb250YWluZXIuYXBwZW5kQ2hpbGQoSXRlbXNPbmxpbmVTdG9yZS5jaGlsZHJlblswXSk7XHJcbiAgICB9XHJcbiAgICB2YXIgRmlsdGVyUHJvZHVjdCA9IGRvY3VtZW50LmdldEVsZW1lbnRzQnlDbGFzc05hbWUoXCJmaWx0ZXJfcHJvZHVjdFwiKVswXTtcclxuXHJcbiAgICB2YXIgUG9wVXBNb2JpbGVGaWx0ZXIgPSBkb2N1bWVudC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lKFwicG9wX3VwX21vYmlsZV9maWx0ZXJcIilbMF07XHJcbiAgICBpZiAoUG9wVXBNb2JpbGVGaWx0ZXIpIHtcclxuICAgICAgUG9wVXBNb2JpbGVGaWx0ZXIuYXBwZW5kQ2hpbGQoRmlsdGVyUHJvZHVjdCk7XHJcbiAgICAgIHZhciBGaWx0ZXJNb2JpbGUgPSBkb2N1bWVudC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lKFwiZmlsdGVyX21vYmlsZVwiKVswXTtcclxuICAgICAgRmlsdGVyTW9iaWxlLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgUG9wVXBNb2JpbGVGaWx0ZXIuY2xhc3NMaXN0LmFkZChcImFjdGl2ZVwiKTtcclxuICAgICAgICBCdXR0b25DbG9zZS5jbGFzc0xpc3QuYWRkKFwiYWN0aXZlXCIpO1xyXG4gICAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgYm9keS5jbGFzc0xpc3QuYWRkKFwibW9kYWxfb3BlblwiKTtcclxuICAgICAgICB9LCA1MDApXHJcblxyXG4gICAgICAgIEJ1dHRvbkNsb3NlLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICBQb3BVcE1vYmlsZUZpbHRlci5jbGFzc0xpc3QucmVtb3ZlKFwiYWN0aXZlXCIpO1xyXG4gICAgICAgICAgYm9keS5jbGFzc0xpc3QucmVtb3ZlKFwibW9kYWxfb3BlblwiKTtcclxuICAgICAgICAgIEJ1dHRvbkNsb3NlLmNsYXNzTGlzdC5yZW1vdmUoXCJhY3RpdmVcIik7XHJcbiAgICAgICAgfSlcclxuXHJcbiAgICAgIH0pO1xyXG4gICAgfVxyXG4gICAgdmFyIHNjcm9sbGluZyA9IGRvY3VtZW50LmdldEVsZW1lbnRzQnlDbGFzc05hbWUoXCJ0YWJzX3Byb2R1Y3RcIilbMF07XHJcblxyXG4gICAgaWYgKHNjcm9sbGluZykge1xyXG4gICAgICBzY3JvbGxpbmcuYWRkRXZlbnRMaXN0ZW5lcignd2hlZWwnLCBmdW5jdGlvbiAoZXZlbnQpIHtcclxuICAgICAgICBpZiAoZXZlbnQuZGVsdGFNb2RlID09IGV2ZW50LkRPTV9ERUxUQV9QSVhFTCkge1xyXG4gICAgICAgICAgdmFyIG1vZGlmaWVyID0gMTtcclxuICAgICAgICAgIC8vINC40L3Ri9C1INGA0LXQttC40LzRiyDQstC+0LfQvNC+0LbQvdGLINCyIEZpcmVmb3hcclxuICAgICAgICB9IGVsc2UgaWYgKGV2ZW50LmRlbHRhTW9kZSA9PSBldmVudC5ET01fREVMVEFfTElORSkge1xyXG4gICAgICAgICAgdmFyIG1vZGlmaWVyID0gcGFyc2VJbnQoZ2V0Q29tcHV0ZWRTdHlsZSh0aGlzKS5saW5lSGVpZ2h0KTtcclxuICAgICAgICB9IGVsc2UgaWYgKGV2ZW50LmRlbHRhTW9kZSA9PSBldmVudC5ET01fREVMVEFfUEFHRSkge1xyXG4gICAgICAgICAgdmFyIG1vZGlmaWVyID0gdGhpcy5jbGllbnRIZWlnaHQ7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmIChldmVudC5kZWx0YVkgIT0gMCkge1xyXG4gICAgICAgICAgLy8g0LfQsNC80LXQvdCwINCy0LXRgNGC0LjQutCw0LvRjNC90L7QuSDQv9GA0L7QutGA0YPRgtC60Lgg0LPQvtGA0LjQt9C+0L3RgtCw0LvRjNC90L7QuVxyXG4gICAgICAgICAgdGhpcy5zY3JvbGxMZWZ0ICs9IG1vZGlmaWVyICogZXZlbnQuZGVsdGFZO1xyXG4gICAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICB9KTtcclxuICAgIH1cclxuXHJcbiAgICB2YXIgSGVhZGVyUHJvZHVjdENvbmFpbmVyID0gZG9jdW1lbnQuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZShcImhlYWRlcl9wcm9kdWN0X2NvbmFpbmVyXCIpWzBdO1xyXG4gICAgdmFyIEFydGljbGVTaXplID0gZG9jdW1lbnQuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZShcImFydGljbGVfc2l6ZVwiKTtcclxuICAgIHZhciBCdXlTaXplID0gZG9jdW1lbnQuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZShcImJ1eV9zaXplXCIpO1xyXG4gICAgdmFyIFJlc3VsdFNpemUgPSBkb2N1bWVudC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lKFwicmVzdWx0X3NpemVcIik7XHJcbiAgICBpZiAoQXJ0aWNsZVNpemUubGVuZ3RoID09PSAwKSB7XHJcbiAgICAgIEFydGljbGVTaXplID0gdW5kZWZpbmVkO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgSGVhZGVyUHJvZHVjdENvbmFpbmVyLmNoaWxkcmVuWzFdLmNsYXNzTGlzdC5yZW1vdmUoXCJhcnRpY2xlX3NpemVcIik7XHJcbiAgICAgIEhlYWRlclByb2R1Y3RDb25haW5lci5jaGlsZHJlblsyXS5jbGFzc0xpc3QucmVtb3ZlKFwiYnV5X3NpemVcIik7XHJcbiAgICAgIEhlYWRlclByb2R1Y3RDb25haW5lci5jaGlsZHJlbls0XS5jbGFzc0xpc3QucmVtb3ZlKFwicmVzdWx0X3NpemVcIik7XHJcbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgQXJ0aWNsZVNpemUubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICBBcnRpY2xlU2l6ZVtpXS5hcHBlbmRDaGlsZChIZWFkZXJQcm9kdWN0Q29uYWluZXIuY2hpbGRyZW5bMV0uY2xvbmVOb2RlKHRydWUpKTtcclxuICAgICAgICBCdXlTaXplW2ldLmFwcGVuZENoaWxkKEhlYWRlclByb2R1Y3RDb25haW5lci5jaGlsZHJlblsyXS5jbG9uZU5vZGUodHJ1ZSkpO1xyXG4gICAgICAgIFJlc3VsdFNpemVbaV0uYXBwZW5kQ2hpbGQoSGVhZGVyUHJvZHVjdENvbmFpbmVyLmNoaWxkcmVuWzRdLmNsb25lTm9kZSh0cnVlKSk7XHJcbiAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgfVxyXG5cclxuXHJcbiAgdmFyIEhlYWRlclRhYnMgPSBkb2N1bWVudC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lKFwiaGVhZGVydF90YWJzXCIpWzBdO1xyXG4gIHZhciBUYWJzQ29udGFpbmVyID0gZG9jdW1lbnQuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZShcInRhYnNfY29udGFpbmVyXCIpWzBdO1xyXG5cclxuICBpZiAoSGVhZGVyVGFicykge1xyXG4gICAgZnVuY3Rpb24gY2xpY2tUYWJzKGUpIHtcclxuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBIZWFkZXJUYWJzLmNoaWxkcmVuLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgaWYgKEhlYWRlclRhYnMuY2hpbGRyZW5baV0uY2xhc3NMaXN0Lmxlbmd0aCA9PT0gMCkge1xyXG4gICAgICAgICAgSGVhZGVyVGFicy5jaGlsZHJlbltpXS5jbGFzc0xpc3QuYWRkKFwiYWN0aXZlXCIpO1xyXG4gICAgICAgICAgVGFic0NvbnRhaW5lci5jaGlsZHJlbltpXS5jbGFzc0xpc3QuYWRkKFwiYWN0aXZlXCIpO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICBIZWFkZXJUYWJzLmNoaWxkcmVuW2ldLmNsYXNzTGlzdC5yZW1vdmUoXCJhY3RpdmVcIik7XHJcbiAgICAgICAgICBUYWJzQ29udGFpbmVyLmNoaWxkcmVuW2ldLmNsYXNzTGlzdC5yZW1vdmUoXCJhY3RpdmVcIik7XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcblxyXG5cclxuICAgIH1cclxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgSGVhZGVyVGFicy5jaGlsZHJlbi5sZW5ndGg7IGkrKykge1xyXG4gICAgICBIZWFkZXJUYWJzLmNoaWxkcmVuW2ldLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCBjbGlja1RhYnMsIGZhbHNlKTtcclxuICAgIH1cclxuICB9XHJcbiAgdmFyIFRhYnNCcmFuZHNMaW5rcyA9IGRvY3VtZW50LmdldEVsZW1lbnRzQnlDbGFzc05hbWUoXCJ0YWJzX2JyYW5kc19saW5rc1wiKVswXTtcclxuICB2YXIgVGFic0NvbnRhaW5lckJyYW5kcyA9IGRvY3VtZW50LmdldEVsZW1lbnRzQnlDbGFzc05hbWUoXCJ0YWJzX2NvbnRhaW5lcl9icmFuZHNcIilbMF07XHJcbiAgaWYgKFRhYnNCcmFuZHNMaW5rcykge1xyXG4gICAgZnVuY3Rpb24gY2xpY2tUYWJzQnJhbmRzKGUpIHtcclxuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBUYWJzQnJhbmRzTGlua3MuY2hpbGRyZW4ubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICBUYWJzQnJhbmRzTGlua3MuY2hpbGRyZW5baV0uY2xhc3NMaXN0LnJlbW92ZShcImFjdGl2ZVwiKTtcclxuICAgICAgfVxyXG4gICAgICBlLmN1cnJlbnRUYXJnZXQuY2xhc3NMaXN0LmFkZChcImFjdGl2ZVwiKTtcclxuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBUYWJzQnJhbmRzTGlua3MuY2hpbGRyZW4ubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICBUYWJzQ29udGFpbmVyQnJhbmRzLmNoaWxkcmVuW2ldLmNsYXNzTGlzdC5yZW1vdmUoXCJhY3RpdmVcIik7XHJcbiAgICAgICAgaWYgKFRhYnNCcmFuZHNMaW5rcy5jaGlsZHJlbltpXS5jbGFzc0xpc3QubGVuZ3RoID09PSAxKSB7XHJcbiAgICAgICAgICBUYWJzQ29udGFpbmVyQnJhbmRzLmNoaWxkcmVuW2ldLmNsYXNzTGlzdC5hZGQoXCJhY3RpdmVcIik7XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IFRhYnNCcmFuZHNMaW5rcy5jaGlsZHJlbi5sZW5ndGg7IGkrKykge1xyXG4gICAgICBUYWJzQnJhbmRzTGlua3MuY2hpbGRyZW5baV0uYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsIGNsaWNrVGFic0JyYW5kcywgZmFsc2UpO1xyXG4gICAgfVxyXG4gIH1cclxuICB2YXIgY2xpY2tTZWxlY3QgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKFwiLmluZm9fY29udGVudF9wcm9kdWN0Pi5idXlfcHJvZHVjdD4uYnV5XCIpO1xyXG4gIGlmIChjbGlja1NlbGVjdC5sZW5ndGggPT09IDApIHtcclxuXHJcbiAgfSBlbHNlIHtcclxuICAgIGNsaWNrU2VsZWN0WzBdLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCBmdW5jdGlvbiAoKSB7XHJcbiAgICAgIGRvY3VtZW50LmdldEVsZW1lbnRzQnlDbGFzc05hbWUoXCJwb3B1cF9idXlfY2xpY2tcIilbMF0uc3R5bGUuZGlzcGxheSA9IFwiYmxvY2tcIjtcclxuICAgIH0pXHJcblxyXG4gICAgdmFyIGNsaWNrU2VsZWN0T25lID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbChcIi5pbmZvX2NvbnRlbnRfcHJvZHVjdD4uYnV5X3Byb2R1Y3Q+LmJ1eV9vbmVcIik7XHJcbiAgICBjbGlja1NlbGVjdE9uZVswXS5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgZnVuY3Rpb24gKCkge1xyXG4gICAgICBkb2N1bWVudC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lKFwib25lX2NsaWNrX3BvcHVwXCIpWzBdLnN0eWxlLmRpc3BsYXkgPSBcImJsb2NrXCI7XHJcbiAgICB9KVxyXG4gICAgdmFyIEhlYWRlckNsb3NlID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbChcIi5oZWFkZXJfY2xvc2U+ZGl2XCIpO1xyXG4gICAgSGVhZGVyQ2xvc2VbMF0uYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsIGZ1bmN0aW9uICgpIHtcclxuICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZShcInBvcHVwX2J1eV9jbGlja1wiKVswXS5zdHlsZS5kaXNwbGF5ID0gXCJub25lXCI7XHJcbiAgICB9KVxyXG4gICAgSGVhZGVyQ2xvc2VbMV0uYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsIGZ1bmN0aW9uICgpIHtcclxuICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZShcIm9uZV9jbGlja19wb3B1cFwiKVswXS5zdHlsZS5kaXNwbGF5ID0gXCJub25lXCI7XHJcbiAgICB9KVxyXG5cclxuICB9XHJcblxyXG4gIHZhciBjb250YWluZXJUYWJzTGlzdFBlcnNvbmFsID0gZG9jdW1lbnQuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZShcImNvbnRhaW5lcl90YWJzX2xzaXRfcGVyc29uYWxcIilbMF07XHJcbiAgdmFyIHRhYnNsaXN0ID0gZG9jdW1lbnQuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZShcInRhYnNfY29udGFpbmVyX3BlcnNvbmFsXCIpWzBdO1xyXG4gIGlmIChjb250YWluZXJUYWJzTGlzdFBlcnNvbmFsKSB7XHJcbiAgICBmdW5jdGlvbiBmdW5jdGlvbkNsaWNrVGFicyhlKSB7XHJcbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgY29udGFpbmVyVGFic0xpc3RQZXJzb25hbC5jaGlsZHJlbi5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgIGNvbnRhaW5lclRhYnNMaXN0UGVyc29uYWwuY2hpbGRyZW5baV0uY2xhc3NMaXN0LnJlbW92ZShcImFjdGl2ZVwiKTtcclxuICAgICAgfVxyXG4gICAgICBlLmN1cnJlbnRUYXJnZXQuY2xhc3NMaXN0LmFkZChcImFjdGl2ZVwiKTtcclxuXHJcbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgY29udGFpbmVyVGFic0xpc3RQZXJzb25hbC5jaGlsZHJlbi5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgIGlmIChjb250YWluZXJUYWJzTGlzdFBlcnNvbmFsLmNoaWxkcmVuW2ldLmNsYXNzTGlzdFsxXSA9PT0gXCJhY3RpdmVcIikge1xyXG4gICAgICAgICAgdGFic2xpc3QuY2hpbGRyZW5baV0uY2xhc3NMaXN0LmFkZChcImFjdGl2ZVwiKTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgdGFic2xpc3QuY2hpbGRyZW5baV0uY2xhc3NMaXN0LnJlbW92ZShcImFjdGl2ZVwiKTtcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuICAgIH1cclxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgY29udGFpbmVyVGFic0xpc3RQZXJzb25hbC5jaGlsZHJlbi5sZW5ndGg7IGkrKykge1xyXG4gICAgICBjb250YWluZXJUYWJzTGlzdFBlcnNvbmFsLmNoaWxkcmVuW2ldLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCBmdW5jdGlvbkNsaWNrVGFicywgZmFsc2UpO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgdmFyIG1hc3NpdmVDbG9zZVBvcFVwID0gW1xyXG4gICAgZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbChcIi5vbmVfY2xpY2tfcG9wdXAgLmhlYWRlcl9jbG9zZVwiKVswXSxcclxuICAgIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoXCIucG9wX3VwX3Byb2R1Y3Rfbm9uZSAuaGVhZGVyX2Nsb3NlXCIpWzBdLFxyXG4gICAgZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbChcIi5wb3BfdXBfc2F2ZV9kYXRhIGJ1dHRvblwiKVswXSxcclxuICAgIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoXCIucG9wX3VwX2xpc3RfYWRkcmVzc19zYXZlIGJ1dHRvblwiKVswXSxcclxuICAgIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoXCIucG9wX3VwX2xpc3RfYWRkcmVzc19zYXZlIGJ1dHRvblwiKVsxXSxcclxuICAgIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoXCIucG9wX3VwX3Bhc3N3b3JkX3NhdmUgYnV0dG9uXCIpWzBdXHJcbiAgXVxyXG5cclxuICBmdW5jdGlvbiBwb3B1cGNsb3NlKGUpIHtcclxuICAgIGlmIChlLmN1cnJlbnRUYXJnZXQuY2xhc3NMaXN0WzBdID09PSBcImhlYWRlcl9jbG9zZVwiKSB7XHJcbiAgICAgIGUuY3VycmVudFRhcmdldC5wYXJlbnROb2RlLnBhcmVudE5vZGUuc3R5bGUuZGlzcGxheSA9IFwibm9uZVwiO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgZS5jdXJyZW50VGFyZ2V0LnBhcmVudE5vZGUucGFyZW50Tm9kZS5wYXJlbnROb2RlLnN0eWxlLmRpc3BsYXkgPSBcIm5vbmVcIjtcclxuICAgIH1cclxuICB9XHJcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBtYXNzaXZlQ2xvc2VQb3BVcC5sZW5ndGg7IGkrKykge1xyXG4gICAgaWYgKG1hc3NpdmVDbG9zZVBvcFVwW2ldID09PSB1bmRlZmluZWQpIHtcclxuXHJcbiAgICB9IGVsc2Uge1xyXG5cclxuICAgICAgbWFzc2l2ZUNsb3NlUG9wVXBbaV0uYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsIHBvcHVwY2xvc2UsIGZhbHNlKVxyXG5cclxuICAgIH1cclxuICB9XHJcblxyXG4gIHZhciBwb3BfdXBfYWxsID0gZG9jdW1lbnQuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZShcInBvcF91cF9saXN0X2FkZHJlc3Nfc2F2ZVwiKTtcclxuXHJcblxyXG4gIGZ1bmN0aW9uIHBvcHVwY2xvc2VuZXdjbG9zZShlKSB7XHJcbiAgICBpZiAoIWUuY3VycmVudFRhcmdldC5sYXN0RWxlbWVudENoaWxkLmNvbnRhaW5zKGUudGFyZ2V0KSkge1xyXG4gICAgICBlLmN1cnJlbnRUYXJnZXQuc3R5bGUuZGlzcGxheSA9IFwibm9uZVwiO1xyXG4gICAgfVxyXG4gIH1cclxuICBmb3IgKHZhciBpID0gMDsgaSA8IHBvcF91cF9hbGwubGVuZ3RoOyBpKyspIHtcclxuICAgIGlmIChwb3BfdXBfYWxsW2ldID09PSB1bmRlZmluZWQpIHtcclxuXHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICBwb3BfdXBfYWxsW2ldLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCBwb3B1cGNsb3NlbmV3Y2xvc2UsIGZhbHNlKTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIHZhciBtYXNzaXZlQ2xpY0Rpdk5vZGUgPSBbXHJcbiAgICBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKFwiLnBvcF91cF9wcm9kdWN0X25vbmVcIilbMF0sXHJcbiAgICBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKFwiLnBvcF91cF9zYXZlX2RhdGFcIilbMF0sXHJcbiAgICBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKFwiLnBvcF91cF9wYXNzd29yZF9zYXZlXCIpWzBdLFxyXG4gICAgZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbChcIi5wb3BhcF9zdWJza3JpcGVcIilbMF0sXHJcbiAgICBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKFwiLm9uZV9jbGlja19wb3B1cFwiKVswXSxcclxuICAgIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoXCIucG9wdXBfYnV5X2NsaWNrXCIpWzBdLFxyXG4gIF1cclxuICBpZiAobWFzc2l2ZUNsaWNEaXZOb2RlKSB7XHJcbiAgICBmdW5jdGlvbiBwb3B1cGNsb3NlQ2xpY2soZSkge1xyXG4gICAgICBpZiAoIWUuY3VycmVudFRhcmdldC5sYXN0RWxlbWVudENoaWxkLmNvbnRhaW5zKGUudGFyZ2V0KSkge1xyXG4gICAgICAgIGUuY3VycmVudFRhcmdldC5zdHlsZS5kaXNwbGF5ID0gXCJub25lXCI7XHJcbiAgICAgIH1cclxuXHJcbiAgICB9XHJcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IG1hc3NpdmVDbGljRGl2Tm9kZS5sZW5ndGg7IGkrKykge1xyXG4gICAgICBpZiAobWFzc2l2ZUNsaWNEaXZOb2RlW2ldID09PSB1bmRlZmluZWQpIHtcclxuXHJcbiAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgbWFzc2l2ZUNsaWNEaXZOb2RlW2ldLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCBwb3B1cGNsb3NlQ2xpY2ssIGZhbHNlKTtcclxuICAgICAgfVxyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgJChkb2N1bWVudCkucmVhZHkoZnVuY3Rpb24gKCkge1xyXG4gICAgJCgnc2VsZWN0JykubmljZVNlbGVjdCgpO1xyXG4gIH0pO1xyXG5cclxuXHJcbiAgdmFyIG51bWJlciA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoXCJpbnB1dFwiKTtcclxuICBmb3IgKHZhciBpID0gMDsgaSA8IG51bWJlci5sZW5ndGg7IGkrKykge1xyXG4gICAgaWYgKG51bWJlcltpXSA9PT0gdW5kZWZpbmVkKSB7XHJcblxyXG4gICAgfSBlbHNlIHtcclxuICAgICAgZm9yICh2YXIgaiA9IDA7IGogPCBudW1iZXJbaV0uYXR0cmlidXRlcy5sZW5ndGg7IGorKykge1xyXG4gICAgICAgIGlmIChudW1iZXJbaV0uYXR0cmlidXRlc1tqXS5ub2RlVmFsdWUgPT09IFwidGVsZXBob25lXCIpIHtcclxuICAgICAgICAgIG51bWJlcltpXS5jbGFzc0xpc3QuYWRkKFwicGhvbmVcIik7XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcbiAgICB9XHJcblxyXG4gIH1cclxuICBqUXVlcnkoZnVuY3Rpb24gKCQpIHtcclxuICAgICQoXCIucGhvbmVcIikuaW5wdXRtYXNrKHtcclxuICAgICAgXCJtYXNrXCI6IFwiKzM4KDk5OSkgOTk5LTk5OTlcIlxyXG4gICAgfSk7XHJcbiAgfSk7XHJcblxyXG5cclxuICB2YXIgbGlsaXN0ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbChcIiNkZXZpY2U+bGlcIik7XHJcblxyXG4gIGZ1bmN0aW9uIGNsaWNrTmV3KGUpIHtcclxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbGlsaXN0Lmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgIGxpbGlzdFtpXS5jbGFzc0xpc3QucmVtb3ZlKFwiYWN0aXZlXCIpO1xyXG4gICAgfVxyXG4gICAgZS5jdXJyZW50VGFyZ2V0LmNsYXNzTGlzdC5hZGQoXCJhY3RpdmVcIik7XHJcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGxpbGlzdC5sZW5ndGg7IGkrKykge1xyXG4gICAgICBpZiAobGlsaXN0W2ldLmNsYXNzTGlzdFswXSA9PT0gXCJhY3RpdmVcIikge1xyXG4gICAgICAgIGxvY2FsU3RvcmFnZS5zZXRJdGVtKDEsIGkpO1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgfVxyXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgbGlsaXN0Lmxlbmd0aDsgaSsrKSB7XHJcbiAgICBsaWxpc3RbaV0uYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsIGNsaWNrTmV3LCBmYWxzZSk7XHJcbiAgfVxyXG5cclxuICBmb3IgKHZhciBpID0gMDsgaSA8IGxpbGlzdC5sZW5ndGg7IGkrKykge1xyXG4gICAgbGlsaXN0W2xvY2FsU3RvcmFnZS5nZXRJdGVtKDEpXS5jbGFzc0xpc3QuYWRkKFwiYWN0aXZlXCIpO1xyXG4gIH1cclxuXHJcblxyXG5cclxuXHJcbiAgaWYgKGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoXCIucmlnaHRfY291bnRlclwiKVswXSkge1xyXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKFwiLnJpZ2h0X2NvdW50ZXJcIikubGVuZ3RoOyBpKyspIHtcclxuICAgICAgZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbChcIi5yaWdodF9jb3VudGVyXCIpW2ldLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCBlbGVtZW50X251bWJlcl90d28sIGZhbHNlKTtcclxuICAgIH1cclxuXHJcbiAgICBmdW5jdGlvbiBlbGVtZW50X251bWJlcl90d28oZSkge1xyXG5cclxuICAgICAgaWYgKGUuY3VycmVudFRhcmdldC5hdHRyaWJ1dGVzWzFdID09PSB1bmRlZmluZWQpIHtcclxuICAgICAgICB2YXIgY291bnRlciA9IDE7XHJcbiAgICAgICAgZS5jdXJyZW50VGFyZ2V0LnNldEF0dHJpYnV0ZShcImluZGV4LXZhbHVlXCIsIGNvdW50ZXIrKyk7XHJcbiAgICAgICAgaWYgKE51bWJlcihlLmN1cnJlbnRUYXJnZXQuYXR0cmlidXRlc1sxXS52YWx1ZSkgPiAwKSB7XHJcbiAgICAgICAgICBlLmN1cnJlbnRUYXJnZXQucGFyZW50Tm9kZS5jaGlsZHJlblswXS5jbGFzc0xpc3QucmVtb3ZlKFwiYWN0aXZlXCIpO1xyXG4gICAgICAgIH1cclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICBlLmN1cnJlbnRUYXJnZXQuc2V0QXR0cmlidXRlKFwiaW5kZXgtdmFsdWVcIiwgTnVtYmVyKGUuY3VycmVudFRhcmdldC5hdHRyaWJ1dGVzWzFdLnZhbHVlKSArIDEpO1xyXG4gICAgICAgIGlmIChOdW1iZXIoZS5jdXJyZW50VGFyZ2V0LmF0dHJpYnV0ZXNbMV0udmFsdWUpID4gMCkge1xyXG4gICAgICAgICAgZS5jdXJyZW50VGFyZ2V0LnBhcmVudE5vZGUuY2hpbGRyZW5bMF0uY2xhc3NMaXN0LnJlbW92ZShcImFjdGl2ZVwiKTtcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBmdW5jdGlvbiBlbGVtZW50X251bWJlcihlKSB7XHJcbiAgICAgIGlmIChlLmN1cnJlbnRUYXJnZXQucGFyZW50Tm9kZS5jaGlsZHJlblsyXS5hdHRyaWJ1dGVzWzFdLnZhbHVlID09PSBcInVuZGVmaW5lZFwiKSB7XHJcblxyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgIGlmIChOdW1iZXIoZS5jdXJyZW50VGFyZ2V0LnBhcmVudE5vZGUuY2hpbGRyZW5bMl0uYXR0cmlidXRlc1sxXS52YWx1ZSkgPiAwKSB7XHJcbiAgICAgICAgICBlLmN1cnJlbnRUYXJnZXQucGFyZW50Tm9kZS5jaGlsZHJlblsyXS5zZXRBdHRyaWJ1dGUoXCJpbmRleC12YWx1ZVwiLCBOdW1iZXIoZS5jdXJyZW50VGFyZ2V0LnBhcmVudE5vZGUuY2hpbGRyZW5bMl0uYXR0cmlidXRlc1sxXS52YWx1ZSkgLSAxKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKE51bWJlcihlLmN1cnJlbnRUYXJnZXQucGFyZW50Tm9kZS5jaGlsZHJlblsyXS5hdHRyaWJ1dGVzWzFdLnZhbHVlKSA9PT0gMCkge1xyXG4gICAgICAgICAgZS5jdXJyZW50VGFyZ2V0LmNsYXNzTGlzdC5hZGQoXCJhY3RpdmVcIik7XHJcbiAgICAgICAgICBjb25zb2xlLmxvZyhjb3VudGVyKTtcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuXHJcbiAgICB9XHJcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoXCIubGVmdF9jb3VudGVyXCIpLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoXCIubGVmdF9jb3VudGVyXCIpW2ldLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCBlbGVtZW50X251bWJlciwgZmFsc2UpO1xyXG4gICAgfVxyXG4gIH1cclxufTtcclxuJChkb2N1bWVudCkucmVhZHkoZnVuY3Rpb24gKCkge1xyXG5cclxuICAgIHZhciBrZXlwcmVzc1NsaWRlciA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdpbnB1dC1yYW5nZS1jb250YWluZXInKTtcclxuXHJcbiAgICB2YXIgaW5wdXQwID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ21pbl9yYW5nZScpO1xyXG4gICAgdmFyIGlucHV0MSA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdtYXhfcmFuZ2UnKTtcclxuICAgIHZhciBpbnB1dHMgPSBbaW5wdXQwLCBpbnB1dDFdO1xyXG5cclxuICAgIGlmIChrZXlwcmVzc1NsaWRlcikge1xyXG4gICAgICAgIG5vVWlTbGlkZXIuY3JlYXRlKGtleXByZXNzU2xpZGVyLCB7XHJcbiAgICAgICAgICAgIHN0YXJ0OiBbNjAwLCAxNDAwMF0sXHJcbiAgICAgICAgICAgIGNvbm5lY3Q6IHRydWUsXHJcbiAgICAgICAgICAgIHRvb2x0aXBzOiBbdHJ1ZSwgd051bWIoe1xyXG4gICAgICAgICAgICAgICAgZGVjaW1hbHM6IDFcclxuICAgICAgICAgICAgfSldLFxyXG4gICAgICAgICAgICByYW5nZToge1xyXG4gICAgICAgICAgICAgICAgJ21pbic6IFswLCAxMDBdLFxyXG4gICAgICAgICAgICAgICAgJ21heCc6IFsxNTAwMCwgMTAwXVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgdmFyIGxlZnRBcnJvdyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoXCIubm9VaS1oYW5kbGUubm9VaS1oYW5kbGUtdXBwZXJcIilbMF07XHJcbiAgICAgICAgdmFyIHJpZ2h0QXJyb3cgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKFwiLm5vVWktaGFuZGxlLm5vVWktaGFuZGxlLWxvd2VyXCIpWzBdO1xyXG4gICAgICAgIHZhciBhcnJvdyA9IFtsZWZ0QXJyb3csIHJpZ2h0QXJyb3ddO1xyXG5cclxuICAgICAgICBmdW5jdGlvbiBjbGlja1BveihlKSB7XHJcbiAgICAgICAgICAgIGtleXByZXNzU2xpZGVyLm5vVWlTbGlkZXIub24oJ3VwZGF0ZScsIGZ1bmN0aW9uICh2YWx1ZXMsIGhhbmRsZSkge1xyXG4gICAgICAgICAgICAgICAgaW5wdXRzW2hhbmRsZV0udmFsdWUgPSB2YWx1ZXNbaGFuZGxlXTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgaW5wdXRzLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgIGlucHV0c1tpXS5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgY2xpY2tQb3osIGZhbHNlKTtcclxuICAgICAgICAgICAgYXJyb3dbaV0uYWRkRXZlbnRMaXN0ZW5lcihcIm1vdXNlZG93blwiLCBjbGlja1BveiwgZmFsc2UpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaW5wdXRzLmZvckVhY2goZnVuY3Rpb24gKGlucHV0LCBoYW5kbGUpIHtcclxuXHJcbiAgICAgICAgICAgIGlucHV0LmFkZEV2ZW50TGlzdGVuZXIoJ2NoYW5nZScsIGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgIGtleXByZXNzU2xpZGVyLm5vVWlTbGlkZXIuc2V0SGFuZGxlKGhhbmRsZSwgdGhpcy52YWx1ZSk7XHJcbiAgICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICAgICAgaW5wdXQuYWRkRXZlbnRMaXN0ZW5lcigna2V5ZG93bicsIGZ1bmN0aW9uIChlKSB7XHJcblxyXG4gICAgICAgICAgICAgICAgdmFyIHZhbHVlcyA9IGtleXByZXNzU2xpZGVyLm5vVWlTbGlkZXIuZ2V0KCk7XHJcbiAgICAgICAgICAgICAgICB2YXIgdmFsdWUgPSBOdW1iZXIodmFsdWVzW2hhbmRsZV0pO1xyXG5cclxuICAgICAgICAgICAgICAgIC8vIFtbaGFuZGxlMF9kb3duLCBoYW5kbGUwX3VwXSwgW2hhbmRsZTFfZG93biwgaGFuZGxlMV91cF1dXHJcbiAgICAgICAgICAgICAgICB2YXIgc3RlcHMgPSBrZXlwcmVzc1NsaWRlci5ub1VpU2xpZGVyLnN0ZXBzKCk7XHJcblxyXG4gICAgICAgICAgICAgICAgLy8gW2Rvd24sIHVwXVxyXG4gICAgICAgICAgICAgICAgdmFyIHN0ZXAgPSBzdGVwc1toYW5kbGVdO1xyXG5cclxuICAgICAgICAgICAgICAgIHZhciBwb3NpdGlvbjtcclxuXHJcbiAgICAgICAgICAgICAgICAvLyAxMyBpcyBlbnRlcixcclxuICAgICAgICAgICAgICAgIC8vIDM4IGlzIGtleSB1cCxcclxuICAgICAgICAgICAgICAgIC8vIDQwIGlzIGtleSBkb3duLlxyXG4gICAgICAgICAgICAgICAgc3dpdGNoIChlLndoaWNoKSB7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMTM6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGtleXByZXNzU2xpZGVyLm5vVWlTbGlkZXIuc2V0SGFuZGxlKGhhbmRsZSwgdGhpcy52YWx1ZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBjYXNlIDM4OlxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gR2V0IHN0ZXAgdG8gZ28gaW5jcmVhc2Ugc2xpZGVyIHZhbHVlICh1cClcclxuICAgICAgICAgICAgICAgICAgICAgICAgcG9zaXRpb24gPSBzdGVwWzFdO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gZmFsc2UgPSBubyBzdGVwIGlzIHNldFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAocG9zaXRpb24gPT09IGZhbHNlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwb3NpdGlvbiA9IDE7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIG51bGwgPSBlZGdlIG9mIHNsaWRlclxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAocG9zaXRpb24gIT09IG51bGwpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGtleXByZXNzU2xpZGVyLm5vVWlTbGlkZXIuc2V0SGFuZGxlKGhhbmRsZSwgdmFsdWUgKyBwb3NpdGlvbik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBjYXNlIDQwOlxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgcG9zaXRpb24gPSBzdGVwWzBdO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHBvc2l0aW9uID09PSBmYWxzZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcG9zaXRpb24gPSAxO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAocG9zaXRpb24gIT09IG51bGwpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGtleXByZXNzU2xpZGVyLm5vVWlTbGlkZXIuc2V0SGFuZGxlKGhhbmRsZSwgdmFsdWUgLSBwb3NpdGlvbik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9KTtcclxuICAgIH1cclxuICAgICQoZG9jdW1lbnQpLnJlYWR5KGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAkKCdzZWxlY3QnKS5uaWNlU2VsZWN0KCk7XHJcbiAgICB9KTtcclxufSk7Il19
