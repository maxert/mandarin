!function(e,t){"object"==typeof module&&"object"==typeof module.exports?module.exports=e.document?t(e,!0):function(e){if(!e.document)throw new Error("jQuery requires a window with a document");return t(e)}:t(e)}("undefined"!=typeof window?window:this,function(S,e){var t=[],T=S.document,d=t.slice,v=t.concat,a=t.push,o=t.indexOf,n={},i=n.toString,h=n.hasOwnProperty,g={},r="2.2.4",C=function(e,t){return new C.fn.init(e,t)},s=/^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g,l=/^-ms-/,c=/-([\da-z])/gi,u=function(e,t){return t.toUpperCase()};function p(e){var t=!!e&&"length"in e&&e.length,n=C.type(e);return"function"!==n&&!C.isWindow(e)&&("array"===n||0===t||"number"==typeof t&&0<t&&t-1 in e)}C.fn=C.prototype={jquery:r,constructor:C,selector:"",length:0,toArray:function(){return d.call(this)},get:function(e){return null!=e?e<0?this[e+this.length]:this[e]:d.call(this)},pushStack:function(e){var t=C.merge(this.constructor(),e);return t.prevObject=this,t.context=this.context,t},each:function(e){return C.each(this,e)},map:function(n){return this.pushStack(C.map(this,function(e,t){return n.call(e,t,e)}))},slice:function(){return this.pushStack(d.apply(this,arguments))},first:function(){return this.eq(0)},last:function(){return this.eq(-1)},eq:function(e){var t=this.length,n=+e+(e<0?t:0);return this.pushStack(0<=n&&n<t?[this[n]]:[])},end:function(){return this.prevObject||this.constructor()},push:a,sort:t.sort,splice:t.splice},C.extend=C.fn.extend=function(){var e,t,n,i,o,r,s=arguments[0]||{},a=1,l=arguments.length,c=!1;for("boolean"==typeof s&&(c=s,s=arguments[a]||{},a++),"object"==typeof s||C.isFunction(s)||(s={}),a===l&&(s=this,a--);a<l;a++)if(null!=(e=arguments[a]))for(t in e)n=s[t],s!==(i=e[t])&&(c&&i&&(C.isPlainObject(i)||(o=C.isArray(i)))?(r=o?(o=!1,n&&C.isArray(n)?n:[]):n&&C.isPlainObject(n)?n:{},s[t]=C.extend(c,r,i)):void 0!==i&&(s[t]=i));return s},C.extend({expando:"jQuery"+(r+Math.random()).replace(/\D/g,""),isReady:!0,error:function(e){throw new Error(e)},noop:function(){},isFunction:function(e){return"function"===C.type(e)},isArray:Array.isArray,isWindow:function(e){return null!=e&&e===e.window},isNumeric:function(e){var t=e&&e.toString();return!C.isArray(e)&&0<=t-parseFloat(t)+1},isPlainObject:function(e){var t;if("object"!==C.type(e)||e.nodeType||C.isWindow(e))return!1;if(e.constructor&&!h.call(e,"constructor")&&!h.call(e.constructor.prototype||{},"isPrototypeOf"))return!1;for(t in e);return void 0===t||h.call(e,t)},isEmptyObject:function(e){var t;for(t in e)return!1;return!0},type:function(e){return null==e?e+"":"object"==typeof e||"function"==typeof e?n[i.call(e)]||"object":typeof e},globalEval:function(e){var t,n=eval;(e=C.trim(e))&&(1===e.indexOf("use strict")?((t=T.createElement("script")).text=e,T.head.appendChild(t).parentNode.removeChild(t)):n(e))},camelCase:function(e){return e.replace(l,"ms-").replace(c,u)},nodeName:function(e,t){return e.nodeName&&e.nodeName.toLowerCase()===t.toLowerCase()},each:function(e,t){var n,i=0;if(p(e))for(n=e.length;i<n&&!1!==t.call(e[i],i,e[i]);i++);else for(i in e)if(!1===t.call(e[i],i,e[i]))break;return e},trim:function(e){return null==e?"":(e+"").replace(s,"")},makeArray:function(e,t){var n=t||[];return null!=e&&(p(Object(e))?C.merge(n,"string"==typeof e?[e]:e):a.call(n,e)),n},inArray:function(e,t,n){return null==t?-1:o.call(t,e,n)},merge:function(e,t){for(var n=+t.length,i=0,o=e.length;i<n;i++)e[o++]=t[i];return e.length=o,e},grep:function(e,t,n){for(var i=[],o=0,r=e.length,s=!n;o<r;o++)!t(e[o],o)!==s&&i.push(e[o]);return i},map:function(e,t,n){var i,o,r=0,s=[];if(p(e))for(i=e.length;r<i;r++)null!=(o=t(e[r],r,n))&&s.push(o);else for(r in e)null!=(o=t(e[r],r,n))&&s.push(o);return v.apply([],s)},guid:1,proxy:function(e,t){var n,i,o;if("string"==typeof t&&(n=e[t],t=e,e=n),C.isFunction(e))return i=d.call(arguments,2),(o=function(){return e.apply(t||this,i.concat(d.call(arguments)))}).guid=e.guid=e.guid||C.guid++,o},now:Date.now,support:g}),"function"==typeof Symbol&&(C.fn[Symbol.iterator]=t[Symbol.iterator]),C.each("Boolean Number String Function Array Date RegExp Object Error Symbol".split(" "),function(e,t){n["[object "+t+"]"]=t.toLowerCase()});var f=function(n){var e,h,b,r,o,v,u,g,x,l,c,k,S,s,T,m,a,d,y,C="sizzle"+1*new Date,w=n.document,E=0,i=0,p=oe(),f=oe(),$=oe(),A=function(e,t){return e===t&&(c=!0),0},N={}.hasOwnProperty,t=[],L=t.pop,H=t.push,j=t.push,O=t.slice,D=function(e,t){for(var n=0,i=e.length;n<i;n++)if(e[n]===t)return n;return-1},P="checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped",M="[\\x20\\t\\r\\n\\f]",q="(?:\\\\.|[\\w-]|[^\\x00-\\xa0])+",_="\\["+M+"*("+q+")(?:"+M+"*([*^$|!~]?=)"+M+"*(?:'((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\"|("+q+"))|)"+M+"*\\]",z=":("+q+")(?:\\((('((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\")|((?:\\\\.|[^\\\\()[\\]]|"+_+")*)|.*)\\)|)",F=new RegExp(M+"+","g"),I=new RegExp("^"+M+"+|((?:^|[^\\\\])(?:\\\\.)*)"+M+"+$","g"),W=new RegExp("^"+M+"*,"+M+"*"),U=new RegExp("^"+M+"*([>+~]|"+M+")"+M+"*"),R=new RegExp("="+M+"*([^\\]'\"]*?)"+M+"*\\]","g"),B=new RegExp(z),X=new RegExp("^"+q+"$"),V={ID:new RegExp("^#("+q+")"),CLASS:new RegExp("^\\.("+q+")"),TAG:new RegExp("^("+q+"|[*])"),ATTR:new RegExp("^"+_),PSEUDO:new RegExp("^"+z),CHILD:new RegExp("^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\("+M+"*(even|odd|(([+-]|)(\\d*)n|)"+M+"*(?:([+-]|)"+M+"*(\\d+)|))"+M+"*\\)|)","i"),bool:new RegExp("^(?:"+P+")$","i"),needsContext:new RegExp("^"+M+"*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\("+M+"*((?:-\\d)?\\d*)"+M+"*\\)|)(?=[^-]|$)","i")},Y=/^(?:input|select|textarea|button)$/i,G=/^h\d$/i,Q=/^[^{]+\{\s*\[native \w/,J=/^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/,K=/[+~]/,Z=/'|\\/g,ee=new RegExp("\\\\([\\da-f]{1,6}"+M+"?|("+M+")|.)","ig"),te=function(e,t,n){var i="0x"+t-65536;return i!=i||n?t:i<0?String.fromCharCode(i+65536):String.fromCharCode(i>>10|55296,1023&i|56320)},ne=function(){k()};try{j.apply(t=O.call(w.childNodes),w.childNodes),t[w.childNodes.length].nodeType}catch(e){j={apply:t.length?function(e,t){H.apply(e,O.call(t))}:function(e,t){for(var n=e.length,i=0;e[n++]=t[i++];);e.length=n-1}}}function ie(e,t,n,i){var o,r,s,a,l,c,d,u,p=t&&t.ownerDocument,f=t?t.nodeType:9;if(n=n||[],"string"!=typeof e||!e||1!==f&&9!==f&&11!==f)return n;if(!i&&((t?t.ownerDocument||t:w)!==S&&k(t),t=t||S,T)){if(11!==f&&(c=J.exec(e)))if(o=c[1]){if(9===f){if(!(s=t.getElementById(o)))return n;if(s.id===o)return n.push(s),n}else if(p&&(s=p.getElementById(o))&&y(t,s)&&s.id===o)return n.push(s),n}else{if(c[2])return j.apply(n,t.getElementsByTagName(e)),n;if((o=c[3])&&h.getElementsByClassName&&t.getElementsByClassName)return j.apply(n,t.getElementsByClassName(o)),n}if(h.qsa&&!$[e+" "]&&(!m||!m.test(e))){if(1!==f)p=t,u=e;else if("object"!==t.nodeName.toLowerCase()){for((a=t.getAttribute("id"))?a=a.replace(Z,"\\$&"):t.setAttribute("id",a=C),r=(d=v(e)).length,l=X.test(a)?"#"+a:"[id='"+a+"']";r--;)d[r]=l+" "+he(d[r]);u=d.join(","),p=K.test(e)&&pe(t.parentNode)||t}if(u)try{return j.apply(n,p.querySelectorAll(u)),n}catch(e){}finally{a===C&&t.removeAttribute("id")}}}return g(e.replace(I,"$1"),t,n,i)}function oe(){var i=[];return function e(t,n){return i.push(t+" ")>b.cacheLength&&delete e[i.shift()],e[t+" "]=n}}function re(e){return e[C]=!0,e}function se(e){var t=S.createElement("div");try{return!!e(t)}catch(e){return!1}finally{t.parentNode&&t.parentNode.removeChild(t),t=null}}function ae(e,t){for(var n=e.split("|"),i=n.length;i--;)b.attrHandle[n[i]]=t}function le(e,t){var n=t&&e,i=n&&1===e.nodeType&&1===t.nodeType&&(~t.sourceIndex||1<<31)-(~e.sourceIndex||1<<31);if(i)return i;if(n)for(;n=n.nextSibling;)if(n===t)return-1;return e?1:-1}function ce(t){return function(e){return"input"===e.nodeName.toLowerCase()&&e.type===t}}function de(n){return function(e){var t=e.nodeName.toLowerCase();return("input"===t||"button"===t)&&e.type===n}}function ue(s){return re(function(r){return r=+r,re(function(e,t){for(var n,i=s([],e.length,r),o=i.length;o--;)e[n=i[o]]&&(e[n]=!(t[n]=e[n]))})})}function pe(e){return e&&void 0!==e.getElementsByTagName&&e}for(e in h=ie.support={},o=ie.isXML=function(e){var t=e&&(e.ownerDocument||e).documentElement;return!!t&&"HTML"!==t.nodeName},k=ie.setDocument=function(e){var t,n,i=e?e.ownerDocument||e:w;return i!==S&&9===i.nodeType&&i.documentElement&&(s=(S=i).documentElement,T=!o(S),(n=S.defaultView)&&n.top!==n&&(n.addEventListener?n.addEventListener("unload",ne,!1):n.attachEvent&&n.attachEvent("onunload",ne)),h.attributes=se(function(e){return e.className="i",!e.getAttribute("className")}),h.getElementsByTagName=se(function(e){return e.appendChild(S.createComment("")),!e.getElementsByTagName("*").length}),h.getElementsByClassName=Q.test(S.getElementsByClassName),h.getById=se(function(e){return s.appendChild(e).id=C,!S.getElementsByName||!S.getElementsByName(C).length}),h.getById?(b.find.ID=function(e,t){if(void 0!==t.getElementById&&T){var n=t.getElementById(e);return n?[n]:[]}},b.filter.ID=function(e){var t=e.replace(ee,te);return function(e){return e.getAttribute("id")===t}}):(delete b.find.ID,b.filter.ID=function(e){var n=e.replace(ee,te);return function(e){var t=void 0!==e.getAttributeNode&&e.getAttributeNode("id");return t&&t.value===n}}),b.find.TAG=h.getElementsByTagName?function(e,t){return void 0!==t.getElementsByTagName?t.getElementsByTagName(e):h.qsa?t.querySelectorAll(e):void 0}:function(e,t){var n,i=[],o=0,r=t.getElementsByTagName(e);if("*"!==e)return r;for(;n=r[o++];)1===n.nodeType&&i.push(n);return i},b.find.CLASS=h.getElementsByClassName&&function(e,t){if(void 0!==t.getElementsByClassName&&T)return t.getElementsByClassName(e)},a=[],m=[],(h.qsa=Q.test(S.querySelectorAll))&&(se(function(e){s.appendChild(e).innerHTML="<a id='"+C+"'></a><select id='"+C+"-\r\\' msallowcapture=''><option selected=''></option></select>",e.querySelectorAll("[msallowcapture^='']").length&&m.push("[*^$]="+M+"*(?:''|\"\")"),e.querySelectorAll("[selected]").length||m.push("\\["+M+"*(?:value|"+P+")"),e.querySelectorAll("[id~="+C+"-]").length||m.push("~="),e.querySelectorAll(":checked").length||m.push(":checked"),e.querySelectorAll("a#"+C+"+*").length||m.push(".#.+[+~]")}),se(function(e){var t=S.createElement("input");t.setAttribute("type","hidden"),e.appendChild(t).setAttribute("name","D"),e.querySelectorAll("[name=d]").length&&m.push("name"+M+"*[*^$|!~]?="),e.querySelectorAll(":enabled").length||m.push(":enabled",":disabled"),e.querySelectorAll("*,:x"),m.push(",.*:")})),(h.matchesSelector=Q.test(d=s.matches||s.webkitMatchesSelector||s.mozMatchesSelector||s.oMatchesSelector||s.msMatchesSelector))&&se(function(e){h.disconnectedMatch=d.call(e,"div"),d.call(e,"[s!='']:x"),a.push("!=",z)}),m=m.length&&new RegExp(m.join("|")),a=a.length&&new RegExp(a.join("|")),t=Q.test(s.compareDocumentPosition),y=t||Q.test(s.contains)?function(e,t){var n=9===e.nodeType?e.documentElement:e,i=t&&t.parentNode;return e===i||!(!i||1!==i.nodeType||!(n.contains?n.contains(i):e.compareDocumentPosition&&16&e.compareDocumentPosition(i)))}:function(e,t){if(t)for(;t=t.parentNode;)if(t===e)return!0;return!1},A=t?function(e,t){if(e===t)return c=!0,0;var n=!e.compareDocumentPosition-!t.compareDocumentPosition;return n||(1&(n=(e.ownerDocument||e)===(t.ownerDocument||t)?e.compareDocumentPosition(t):1)||!h.sortDetached&&t.compareDocumentPosition(e)===n?e===S||e.ownerDocument===w&&y(w,e)?-1:t===S||t.ownerDocument===w&&y(w,t)?1:l?D(l,e)-D(l,t):0:4&n?-1:1)}:function(e,t){if(e===t)return c=!0,0;var n,i=0,o=e.parentNode,r=t.parentNode,s=[e],a=[t];if(!o||!r)return e===S?-1:t===S?1:o?-1:r?1:l?D(l,e)-D(l,t):0;if(o===r)return le(e,t);for(n=e;n=n.parentNode;)s.unshift(n);for(n=t;n=n.parentNode;)a.unshift(n);for(;s[i]===a[i];)i++;return i?le(s[i],a[i]):s[i]===w?-1:a[i]===w?1:0}),S},ie.matches=function(e,t){return ie(e,null,null,t)},ie.matchesSelector=function(e,t){if((e.ownerDocument||e)!==S&&k(e),t=t.replace(R,"='$1']"),h.matchesSelector&&T&&!$[t+" "]&&(!a||!a.test(t))&&(!m||!m.test(t)))try{var n=d.call(e,t);if(n||h.disconnectedMatch||e.document&&11!==e.document.nodeType)return n}catch(e){}return 0<ie(t,S,null,[e]).length},ie.contains=function(e,t){return(e.ownerDocument||e)!==S&&k(e),y(e,t)},ie.attr=function(e,t){(e.ownerDocument||e)!==S&&k(e);var n=b.attrHandle[t.toLowerCase()],i=n&&N.call(b.attrHandle,t.toLowerCase())?n(e,t,!T):void 0;return void 0!==i?i:h.attributes||!T?e.getAttribute(t):(i=e.getAttributeNode(t))&&i.specified?i.value:null},ie.error=function(e){throw new Error("Syntax error, unrecognized expression: "+e)},ie.uniqueSort=function(e){var t,n=[],i=0,o=0;if(c=!h.detectDuplicates,l=!h.sortStable&&e.slice(0),e.sort(A),c){for(;t=e[o++];)t===e[o]&&(i=n.push(o));for(;i--;)e.splice(n[i],1)}return l=null,e},r=ie.getText=function(e){var t,n="",i=0,o=e.nodeType;if(o){if(1===o||9===o||11===o){if("string"==typeof e.textContent)return e.textContent;for(e=e.firstChild;e;e=e.nextSibling)n+=r(e)}else if(3===o||4===o)return e.nodeValue}else for(;t=e[i++];)n+=r(t);return n},(b=ie.selectors={cacheLength:50,createPseudo:re,match:V,attrHandle:{},find:{},relative:{">":{dir:"parentNode",first:!0}," ":{dir:"parentNode"},"+":{dir:"previousSibling",first:!0},"~":{dir:"previousSibling"}},preFilter:{ATTR:function(e){return e[1]=e[1].replace(ee,te),e[3]=(e[3]||e[4]||e[5]||"").replace(ee,te),"~="===e[2]&&(e[3]=" "+e[3]+" "),e.slice(0,4)},CHILD:function(e){return e[1]=e[1].toLowerCase(),"nth"===e[1].slice(0,3)?(e[3]||ie.error(e[0]),e[4]=+(e[4]?e[5]+(e[6]||1):2*("even"===e[3]||"odd"===e[3])),e[5]=+(e[7]+e[8]||"odd"===e[3])):e[3]&&ie.error(e[0]),e},PSEUDO:function(e){var t,n=!e[6]&&e[2];return V.CHILD.test(e[0])?null:(e[3]?e[2]=e[4]||e[5]||"":n&&B.test(n)&&(t=v(n,!0))&&(t=n.indexOf(")",n.length-t)-n.length)&&(e[0]=e[0].slice(0,t),e[2]=n.slice(0,t)),e.slice(0,3))}},filter:{TAG:function(e){var t=e.replace(ee,te).toLowerCase();return"*"===e?function(){return!0}:function(e){return e.nodeName&&e.nodeName.toLowerCase()===t}},CLASS:function(e){var t=p[e+" "];return t||(t=new RegExp("(^|"+M+")"+e+"("+M+"|$)"))&&p(e,function(e){return t.test("string"==typeof e.className&&e.className||void 0!==e.getAttribute&&e.getAttribute("class")||"")})},ATTR:function(n,i,o){return function(e){var t=ie.attr(e,n);return null==t?"!="===i:!i||(t+="","="===i?t===o:"!="===i?t!==o:"^="===i?o&&0===t.indexOf(o):"*="===i?o&&-1<t.indexOf(o):"$="===i?o&&t.slice(-o.length)===o:"~="===i?-1<(" "+t.replace(F," ")+" ").indexOf(o):"|="===i&&(t===o||t.slice(0,o.length+1)===o+"-"))}},CHILD:function(h,e,t,v,g){var m="nth"!==h.slice(0,3),y="last"!==h.slice(-4),w="of-type"===e;return 1===v&&0===g?function(e){return!!e.parentNode}:function(e,t,n){var i,o,r,s,a,l,c=m!==y?"nextSibling":"previousSibling",d=e.parentNode,u=w&&e.nodeName.toLowerCase(),p=!n&&!w,f=!1;if(d){if(m){for(;c;){for(s=e;s=s[c];)if(w?s.nodeName.toLowerCase()===u:1===s.nodeType)return!1;l=c="only"===h&&!l&&"nextSibling"}return!0}if(l=[y?d.firstChild:d.lastChild],y&&p){for(f=(a=(i=(o=(r=(s=d)[C]||(s[C]={}))[s.uniqueID]||(r[s.uniqueID]={}))[h]||[])[0]===E&&i[1])&&i[2],s=a&&d.childNodes[a];s=++a&&s&&s[c]||(f=a=0)||l.pop();)if(1===s.nodeType&&++f&&s===e){o[h]=[E,a,f];break}}else if(p&&(f=a=(i=(o=(r=(s=e)[C]||(s[C]={}))[s.uniqueID]||(r[s.uniqueID]={}))[h]||[])[0]===E&&i[1]),!1===f)for(;(s=++a&&s&&s[c]||(f=a=0)||l.pop())&&((w?s.nodeName.toLowerCase()!==u:1!==s.nodeType)||!++f||(p&&((o=(r=s[C]||(s[C]={}))[s.uniqueID]||(r[s.uniqueID]={}))[h]=[E,f]),s!==e)););return(f-=g)===v||f%v==0&&0<=f/v}}},PSEUDO:function(e,r){var t,s=b.pseudos[e]||b.setFilters[e.toLowerCase()]||ie.error("unsupported pseudo: "+e);return s[C]?s(r):1<s.length?(t=[e,e,"",r],b.setFilters.hasOwnProperty(e.toLowerCase())?re(function(e,t){for(var n,i=s(e,r),o=i.length;o--;)e[n=D(e,i[o])]=!(t[n]=i[o])}):function(e){return s(e,0,t)}):s}},pseudos:{not:re(function(e){var i=[],o=[],a=u(e.replace(I,"$1"));return a[C]?re(function(e,t,n,i){for(var o,r=a(e,null,i,[]),s=e.length;s--;)(o=r[s])&&(e[s]=!(t[s]=o))}):function(e,t,n){return i[0]=e,a(i,null,n,o),i[0]=null,!o.pop()}}),has:re(function(t){return function(e){return 0<ie(t,e).length}}),contains:re(function(t){return t=t.replace(ee,te),function(e){return-1<(e.textContent||e.innerText||r(e)).indexOf(t)}}),lang:re(function(n){return X.test(n||"")||ie.error("unsupported lang: "+n),n=n.replace(ee,te).toLowerCase(),function(e){var t;do{if(t=T?e.lang:e.getAttribute("xml:lang")||e.getAttribute("lang"))return(t=t.toLowerCase())===n||0===t.indexOf(n+"-")}while((e=e.parentNode)&&1===e.nodeType);return!1}}),target:function(e){var t=n.location&&n.location.hash;return t&&t.slice(1)===e.id},root:function(e){return e===s},focus:function(e){return e===S.activeElement&&(!S.hasFocus||S.hasFocus())&&!!(e.type||e.href||~e.tabIndex)},enabled:function(e){return!1===e.disabled},disabled:function(e){return!0===e.disabled},checked:function(e){var t=e.nodeName.toLowerCase();return"input"===t&&!!e.checked||"option"===t&&!!e.selected},selected:function(e){return e.parentNode&&e.parentNode.selectedIndex,!0===e.selected},empty:function(e){for(e=e.firstChild;e;e=e.nextSibling)if(e.nodeType<6)return!1;return!0},parent:function(e){return!b.pseudos.empty(e)},header:function(e){return G.test(e.nodeName)},input:function(e){return Y.test(e.nodeName)},button:function(e){var t=e.nodeName.toLowerCase();return"input"===t&&"button"===e.type||"button"===t},text:function(e){var t;return"input"===e.nodeName.toLowerCase()&&"text"===e.type&&(null==(t=e.getAttribute("type"))||"text"===t.toLowerCase())},first:ue(function(){return[0]}),last:ue(function(e,t){return[t-1]}),eq:ue(function(e,t,n){return[n<0?n+t:n]}),even:ue(function(e,t){for(var n=0;n<t;n+=2)e.push(n);return e}),odd:ue(function(e,t){for(var n=1;n<t;n+=2)e.push(n);return e}),lt:ue(function(e,t,n){for(var i=n<0?n+t:n;0<=--i;)e.push(i);return e}),gt:ue(function(e,t,n){for(var i=n<0?n+t:n;++i<t;)e.push(i);return e})}}).pseudos.nth=b.pseudos.eq,{radio:!0,checkbox:!0,file:!0,password:!0,image:!0})b.pseudos[e]=ce(e);for(e in{submit:!0,reset:!0})b.pseudos[e]=de(e);function fe(){}function he(e){for(var t=0,n=e.length,i="";t<n;t++)i+=e[t].value;return i}function ve(a,e,t){var l=e.dir,c=t&&"parentNode"===l,d=i++;return e.first?function(e,t,n){for(;e=e[l];)if(1===e.nodeType||c)return a(e,t,n)}:function(e,t,n){var i,o,r,s=[E,d];if(n){for(;e=e[l];)if((1===e.nodeType||c)&&a(e,t,n))return!0}else for(;e=e[l];)if(1===e.nodeType||c){if((i=(o=(r=e[C]||(e[C]={}))[e.uniqueID]||(r[e.uniqueID]={}))[l])&&i[0]===E&&i[1]===d)return s[2]=i[2];if((o[l]=s)[2]=a(e,t,n))return!0}}}function ge(o){return 1<o.length?function(e,t,n){for(var i=o.length;i--;)if(!o[i](e,t,n))return!1;return!0}:o[0]}function me(e,t,n,i,o){for(var r,s=[],a=0,l=e.length,c=null!=t;a<l;a++)(r=e[a])&&(n&&!n(r,i,o)||(s.push(r),c&&t.push(a)));return s}function ye(f,h,v,g,m,e){return g&&!g[C]&&(g=ye(g)),m&&!m[C]&&(m=ye(m,e)),re(function(e,t,n,i){var o,r,s,a=[],l=[],c=t.length,d=e||function(e,t,n){for(var i=0,o=t.length;i<o;i++)ie(e,t[i],n);return n}(h||"*",n.nodeType?[n]:n,[]),u=!f||!e&&h?d:me(d,a,f,n,i),p=v?m||(e?f:c||g)?[]:t:u;if(v&&v(u,p,n,i),g)for(o=me(p,l),g(o,[],n,i),r=o.length;r--;)(s=o[r])&&(p[l[r]]=!(u[l[r]]=s));if(e){if(m||f){if(m){for(o=[],r=p.length;r--;)(s=p[r])&&o.push(u[r]=s);m(null,p=[],o,i)}for(r=p.length;r--;)(s=p[r])&&-1<(o=m?D(e,s):a[r])&&(e[o]=!(t[o]=s))}}else p=me(p===t?p.splice(c,p.length):p),m?m(null,t,p,i):j.apply(t,p)})}function we(e){for(var o,t,n,i=e.length,r=b.relative[e[0].type],s=r||b.relative[" "],a=r?1:0,l=ve(function(e){return e===o},s,!0),c=ve(function(e){return-1<D(o,e)},s,!0),d=[function(e,t,n){var i=!r&&(n||t!==x)||((o=t).nodeType?l(e,t,n):c(e,t,n));return o=null,i}];a<i;a++)if(t=b.relative[e[a].type])d=[ve(ge(d),t)];else{if((t=b.filter[e[a].type].apply(null,e[a].matches))[C]){for(n=++a;n<i&&!b.relative[e[n].type];n++);return ye(1<a&&ge(d),1<a&&he(e.slice(0,a-1).concat({value:" "===e[a-2].type?"*":""})).replace(I,"$1"),t,a<n&&we(e.slice(a,n)),n<i&&we(e=e.slice(n)),n<i&&he(e))}d.push(t)}return ge(d)}return fe.prototype=b.filters=b.pseudos,b.setFilters=new fe,v=ie.tokenize=function(e,t){var n,i,o,r,s,a,l,c=f[e+" "];if(c)return t?0:c.slice(0);for(s=e,a=[],l=b.preFilter;s;){for(r in n&&!(i=W.exec(s))||(i&&(s=s.slice(i[0].length)||s),a.push(o=[])),n=!1,(i=U.exec(s))&&(n=i.shift(),o.push({value:n,type:i[0].replace(I," ")}),s=s.slice(n.length)),b.filter)!(i=V[r].exec(s))||l[r]&&!(i=l[r](i))||(n=i.shift(),o.push({value:n,type:r,matches:i}),s=s.slice(n.length));if(!n)break}return t?s.length:s?ie.error(e):f(e,a).slice(0)},u=ie.compile=function(e,t){var n,g,m,y,w,i,o=[],r=[],s=$[e+" "];if(!s){for(t||(t=v(e)),n=t.length;n--;)(s=we(t[n]))[C]?o.push(s):r.push(s);(s=$(e,(g=r,y=0<(m=o).length,w=0<g.length,i=function(e,t,n,i,o){var r,s,a,l=0,c="0",d=e&&[],u=[],p=x,f=e||w&&b.find.TAG("*",o),h=E+=null==p?1:Math.random()||.1,v=f.length;for(o&&(x=t===S||t||o);c!==v&&null!=(r=f[c]);c++){if(w&&r){for(s=0,t||r.ownerDocument===S||(k(r),n=!T);a=g[s++];)if(a(r,t||S,n)){i.push(r);break}o&&(E=h)}y&&((r=!a&&r)&&l--,e&&d.push(r))}if(l+=c,y&&c!==l){for(s=0;a=m[s++];)a(d,u,t,n);if(e){if(0<l)for(;c--;)d[c]||u[c]||(u[c]=L.call(i));u=me(u)}j.apply(i,u),o&&!e&&0<u.length&&1<l+m.length&&ie.uniqueSort(i)}return o&&(E=h,x=p),d},y?re(i):i))).selector=e}return s},g=ie.select=function(e,t,n,i){var o,r,s,a,l,c="function"==typeof e&&e,d=!i&&v(e=c.selector||e);if(n=n||[],1===d.length){if(2<(r=d[0]=d[0].slice(0)).length&&"ID"===(s=r[0]).type&&h.getById&&9===t.nodeType&&T&&b.relative[r[1].type]){if(!(t=(b.find.ID(s.matches[0].replace(ee,te),t)||[])[0]))return n;c&&(t=t.parentNode),e=e.slice(r.shift().value.length)}for(o=V.needsContext.test(e)?0:r.length;o--&&(s=r[o],!b.relative[a=s.type]);)if((l=b.find[a])&&(i=l(s.matches[0].replace(ee,te),K.test(r[0].type)&&pe(t.parentNode)||t))){if(r.splice(o,1),!(e=i.length&&he(r)))return j.apply(n,i),n;break}}return(c||u(e,d))(i,t,!T,n,!t||K.test(e)&&pe(t.parentNode)||t),n},h.sortStable=C.split("").sort(A).join("")===C,h.detectDuplicates=!!c,k(),h.sortDetached=se(function(e){return 1&e.compareDocumentPosition(S.createElement("div"))}),se(function(e){return e.innerHTML="<a href='#'></a>","#"===e.firstChild.getAttribute("href")})||ae("type|href|height|width",function(e,t,n){if(!n)return e.getAttribute(t,"type"===t.toLowerCase()?1:2)}),h.attributes&&se(function(e){return e.innerHTML="<input/>",e.firstChild.setAttribute("value",""),""===e.firstChild.getAttribute("value")})||ae("value",function(e,t,n){if(!n&&"input"===e.nodeName.toLowerCase())return e.defaultValue}),se(function(e){return null==e.getAttribute("disabled")})||ae(P,function(e,t,n){var i;if(!n)return!0===e[t]?t.toLowerCase():(i=e.getAttributeNode(t))&&i.specified?i.value:null}),ie}(S);C.find=f,C.expr=f.selectors,C.expr[":"]=C.expr.pseudos,C.uniqueSort=C.unique=f.uniqueSort,C.text=f.getText,C.isXMLDoc=f.isXML,C.contains=f.contains;var m=function(e,t,n){for(var i=[],o=void 0!==n;(e=e[t])&&9!==e.nodeType;)if(1===e.nodeType){if(o&&C(e).is(n))break;i.push(e)}return i},y=function(e,t){for(var n=[];e;e=e.nextSibling)1===e.nodeType&&e!==t&&n.push(e);return n},w=C.expr.match.needsContext,b=/^<([\w-]+)\s*\/?>(?:<\/\1>|)$/,x=/^.[^:#\[\.,]*$/;function k(e,n,i){if(C.isFunction(n))return C.grep(e,function(e,t){return!!n.call(e,t,e)!==i});if(n.nodeType)return C.grep(e,function(e){return e===n!==i});if("string"==typeof n){if(x.test(n))return C.filter(n,e,i);n=C.filter(n,e)}return C.grep(e,function(e){return-1<o.call(n,e)!==i})}C.filter=function(e,t,n){var i=t[0];return n&&(e=":not("+e+")"),1===t.length&&1===i.nodeType?C.find.matchesSelector(i,e)?[i]:[]:C.find.matches(e,C.grep(t,function(e){return 1===e.nodeType}))},C.fn.extend({find:function(e){var t,n=this.length,i=[],o=this;if("string"!=typeof e)return this.pushStack(C(e).filter(function(){for(t=0;t<n;t++)if(C.contains(o[t],this))return!0}));for(t=0;t<n;t++)C.find(e,o[t],i);return(i=this.pushStack(1<n?C.unique(i):i)).selector=this.selector?this.selector+" "+e:e,i},filter:function(e){return this.pushStack(k(this,e||[],!1))},not:function(e){return this.pushStack(k(this,e||[],!0))},is:function(e){return!!k(this,"string"==typeof e&&w.test(e)?C(e):e||[],!1).length}});var E,$=/^(?:\s*(<[\w\W]+>)[^>]*|#([\w-]*))$/;(C.fn.init=function(e,t,n){var i,o;if(!e)return this;if(n=n||E,"string"!=typeof e)return e.nodeType?(this.context=this[0]=e,this.length=1,this):C.isFunction(e)?void 0!==n.ready?n.ready(e):e(C):(void 0!==e.selector&&(this.selector=e.selector,this.context=e.context),C.makeArray(e,this));if(!(i="<"===e[0]&&">"===e[e.length-1]&&3<=e.length?[null,e,null]:$.exec(e))||!i[1]&&t)return!t||t.jquery?(t||n).find(e):this.constructor(t).find(e);if(i[1]){if(t=t instanceof C?t[0]:t,C.merge(this,C.parseHTML(i[1],t&&t.nodeType?t.ownerDocument||t:T,!0)),b.test(i[1])&&C.isPlainObject(t))for(i in t)C.isFunction(this[i])?this[i](t[i]):this.attr(i,t[i]);return this}return(o=T.getElementById(i[2]))&&o.parentNode&&(this.length=1,this[0]=o),this.context=T,this.selector=e,this}).prototype=C.fn,E=C(T);var A=/^(?:parents|prev(?:Until|All))/,N={children:!0,contents:!0,next:!0,prev:!0};function L(e,t){for(;(e=e[t])&&1!==e.nodeType;);return e}C.fn.extend({has:function(e){var t=C(e,this),n=t.length;return this.filter(function(){for(var e=0;e<n;e++)if(C.contains(this,t[e]))return!0})},closest:function(e,t){for(var n,i=0,o=this.length,r=[],s=w.test(e)||"string"!=typeof e?C(e,t||this.context):0;i<o;i++)for(n=this[i];n&&n!==t;n=n.parentNode)if(n.nodeType<11&&(s?-1<s.index(n):1===n.nodeType&&C.find.matchesSelector(n,e))){r.push(n);break}return this.pushStack(1<r.length?C.uniqueSort(r):r)},index:function(e){return e?"string"==typeof e?o.call(C(e),this[0]):o.call(this,e.jquery?e[0]:e):this[0]&&this[0].parentNode?this.first().prevAll().length:-1},add:function(e,t){return this.pushStack(C.uniqueSort(C.merge(this.get(),C(e,t))))},addBack:function(e){return this.add(null==e?this.prevObject:this.prevObject.filter(e))}}),C.each({parent:function(e){var t=e.parentNode;return t&&11!==t.nodeType?t:null},parents:function(e){return m(e,"parentNode")},parentsUntil:function(e,t,n){return m(e,"parentNode",n)},next:function(e){return L(e,"nextSibling")},prev:function(e){return L(e,"previousSibling")},nextAll:function(e){return m(e,"nextSibling")},prevAll:function(e){return m(e,"previousSibling")},nextUntil:function(e,t,n){return m(e,"nextSibling",n)},prevUntil:function(e,t,n){return m(e,"previousSibling",n)},siblings:function(e){return y((e.parentNode||{}).firstChild,e)},children:function(e){return y(e.firstChild)},contents:function(e){return e.contentDocument||C.merge([],e.childNodes)}},function(i,o){C.fn[i]=function(e,t){var n=C.map(this,o,e);return"Until"!==i.slice(-5)&&(t=e),t&&"string"==typeof t&&(n=C.filter(t,n)),1<this.length&&(N[i]||C.uniqueSort(n),A.test(i)&&n.reverse()),this.pushStack(n)}});var H,j=/\S+/g;function O(){T.removeEventListener("DOMContentLoaded",O),S.removeEventListener("load",O),C.ready()}C.Callbacks=function(i){var e,n;i="string"==typeof i?(e=i,n={},C.each(e.match(j)||[],function(e,t){n[t]=!0}),n):C.extend({},i);var o,t,r,s,a=[],l=[],c=-1,d=function(){for(s=i.once,r=o=!0;l.length;c=-1)for(t=l.shift();++c<a.length;)!1===a[c].apply(t[0],t[1])&&i.stopOnFalse&&(c=a.length,t=!1);i.memory||(t=!1),o=!1,s&&(a=t?[]:"")},u={add:function(){return a&&(t&&!o&&(c=a.length-1,l.push(t)),function n(e){C.each(e,function(e,t){C.isFunction(t)?i.unique&&u.has(t)||a.push(t):t&&t.length&&"string"!==C.type(t)&&n(t)})}(arguments),t&&!o&&d()),this},remove:function(){return C.each(arguments,function(e,t){for(var n;-1<(n=C.inArray(t,a,n));)a.splice(n,1),n<=c&&c--}),this},has:function(e){return e?-1<C.inArray(e,a):0<a.length},empty:function(){return a&&(a=[]),this},disable:function(){return s=l=[],a=t="",this},disabled:function(){return!a},lock:function(){return s=l=[],t||(a=t=""),this},locked:function(){return!!s},fireWith:function(e,t){return s||(t=[e,(t=t||[]).slice?t.slice():t],l.push(t),o||d()),this},fire:function(){return u.fireWith(this,arguments),this},fired:function(){return!!r}};return u},C.extend({Deferred:function(e){var r=[["resolve","done",C.Callbacks("once memory"),"resolved"],["reject","fail",C.Callbacks("once memory"),"rejected"],["notify","progress",C.Callbacks("memory")]],o="pending",s={state:function(){return o},always:function(){return a.done(arguments).fail(arguments),this},then:function(){var o=arguments;return C.Deferred(function(i){C.each(r,function(e,t){var n=C.isFunction(o[e])&&o[e];a[t[1]](function(){var e=n&&n.apply(this,arguments);e&&C.isFunction(e.promise)?e.promise().progress(i.notify).done(i.resolve).fail(i.reject):i[t[0]+"With"](this===s?i.promise():this,n?[e]:arguments)})}),o=null}).promise()},promise:function(e){return null!=e?C.extend(e,s):s}},a={};return s.pipe=s.then,C.each(r,function(e,t){var n=t[2],i=t[3];s[t[1]]=n.add,i&&n.add(function(){o=i},r[1^e][2].disable,r[2][2].lock),a[t[0]]=function(){return a[t[0]+"With"](this===a?s:this,arguments),this},a[t[0]+"With"]=n.fireWith}),s.promise(a),e&&e.call(a,a),a},when:function(e){var o,t,n,i=0,r=d.call(arguments),s=r.length,a=1!==s||e&&C.isFunction(e.promise)?s:0,l=1===a?e:C.Deferred(),c=function(t,n,i){return function(e){n[t]=this,i[t]=1<arguments.length?d.call(arguments):e,i===o?l.notifyWith(n,i):--a||l.resolveWith(n,i)}};if(1<s)for(o=new Array(s),t=new Array(s),n=new Array(s);i<s;i++)r[i]&&C.isFunction(r[i].promise)?r[i].promise().progress(c(i,t,o)).done(c(i,n,r)).fail(l.reject):--a;return a||l.resolveWith(n,r),l.promise()}}),C.fn.ready=function(e){return C.ready.promise().done(e),this},C.extend({isReady:!1,readyWait:1,holdReady:function(e){e?C.readyWait++:C.ready(!0)},ready:function(e){(!0===e?--C.readyWait:C.isReady)||(C.isReady=!0)!==e&&0<--C.readyWait||(H.resolveWith(T,[C]),C.fn.triggerHandler&&(C(T).triggerHandler("ready"),C(T).off("ready")))}}),C.ready.promise=function(e){return H||(H=C.Deferred(),"complete"===T.readyState||"loading"!==T.readyState&&!T.documentElement.doScroll?S.setTimeout(C.ready):(T.addEventListener("DOMContentLoaded",O),S.addEventListener("load",O))),H.promise(e)},C.ready.promise();var D=function(e,t,n,i,o,r,s){var a=0,l=e.length,c=null==n;if("object"===C.type(n))for(a in o=!0,n)D(e,t,a,n[a],!0,r,s);else if(void 0!==i&&(o=!0,C.isFunction(i)||(s=!0),c&&(t=s?(t.call(e,i),null):(c=t,function(e,t,n){return c.call(C(e),n)})),t))for(;a<l;a++)t(e[a],n,s?i:i.call(e[a],a,t(e[a],n)));return o?e:c?t.call(e):l?t(e[0],n):r},P=function(e){return 1===e.nodeType||9===e.nodeType||!+e.nodeType};function M(){this.expando=C.expando+M.uid++}M.uid=1,M.prototype={register:function(e,t){var n=t||{};return e.nodeType?e[this.expando]=n:Object.defineProperty(e,this.expando,{value:n,writable:!0,configurable:!0}),e[this.expando]},cache:function(e){if(!P(e))return{};var t=e[this.expando];return t||(t={},P(e)&&(e.nodeType?e[this.expando]=t:Object.defineProperty(e,this.expando,{value:t,configurable:!0}))),t},set:function(e,t,n){var i,o=this.cache(e);if("string"==typeof t)o[t]=n;else for(i in t)o[i]=t[i];return o},get:function(e,t){return void 0===t?this.cache(e):e[this.expando]&&e[this.expando][t]},access:function(e,t,n){var i;return void 0===t||t&&"string"==typeof t&&void 0===n?void 0!==(i=this.get(e,t))?i:this.get(e,C.camelCase(t)):(this.set(e,t,n),void 0!==n?n:t)},remove:function(e,t){var n,i,o,r=e[this.expando];if(void 0!==r){if(void 0===t)this.register(e);else{n=(i=C.isArray(t)?t.concat(t.map(C.camelCase)):(o=C.camelCase(t),t in r?[t,o]:(i=o)in r?[i]:i.match(j)||[])).length;for(;n--;)delete r[i[n]]}(void 0===t||C.isEmptyObject(r))&&(e.nodeType?e[this.expando]=void 0:delete e[this.expando])}},hasData:function(e){var t=e[this.expando];return void 0!==t&&!C.isEmptyObject(t)}};var q=new M,_=new M,z=/^(?:\{[\w\W]*\}|\[[\w\W]*\])$/,F=/[A-Z]/g;function I(e,t,n){var i;if(void 0===n&&1===e.nodeType)if(i="data-"+t.replace(F,"-$&").toLowerCase(),"string"==typeof(n=e.getAttribute(i))){try{n="true"===n||"false"!==n&&("null"===n?null:+n+""===n?+n:z.test(n)?C.parseJSON(n):n)}catch(e){}_.set(e,t,n)}else n=void 0;return n}C.extend({hasData:function(e){return _.hasData(e)||q.hasData(e)},data:function(e,t,n){return _.access(e,t,n)},removeData:function(e,t){_.remove(e,t)},_data:function(e,t,n){return q.access(e,t,n)},_removeData:function(e,t){q.remove(e,t)}}),C.fn.extend({data:function(i,e){var t,n,o,r=this[0],s=r&&r.attributes;if(void 0!==i)return"object"==typeof i?this.each(function(){_.set(this,i)}):D(this,function(t){var e,n;if(r&&void 0===t)return void 0!==(e=_.get(r,i)||_.get(r,i.replace(F,"-$&").toLowerCase()))?e:(n=C.camelCase(i),void 0!==(e=_.get(r,n))?e:void 0!==(e=I(r,n,void 0))?e:void 0);n=C.camelCase(i),this.each(function(){var e=_.get(this,n);_.set(this,n,t),-1<i.indexOf("-")&&void 0!==e&&_.set(this,i,t)})},null,e,1<arguments.length,null,!0);if(this.length&&(o=_.get(r),1===r.nodeType&&!q.get(r,"hasDataAttrs"))){for(t=s.length;t--;)s[t]&&0===(n=s[t].name).indexOf("data-")&&(n=C.camelCase(n.slice(5)),I(r,n,o[n]));q.set(r,"hasDataAttrs",!0)}return o},removeData:function(e){return this.each(function(){_.remove(this,e)})}}),C.extend({queue:function(e,t,n){var i;if(e)return t=(t||"fx")+"queue",i=q.get(e,t),n&&(!i||C.isArray(n)?i=q.access(e,t,C.makeArray(n)):i.push(n)),i||[]},dequeue:function(e,t){t=t||"fx";var n=C.queue(e,t),i=n.length,o=n.shift(),r=C._queueHooks(e,t);"inprogress"===o&&(o=n.shift(),i--),o&&("fx"===t&&n.unshift("inprogress"),delete r.stop,o.call(e,function(){C.dequeue(e,t)},r)),!i&&r&&r.empty.fire()},_queueHooks:function(e,t){var n=t+"queueHooks";return q.get(e,n)||q.access(e,n,{empty:C.Callbacks("once memory").add(function(){q.remove(e,[t+"queue",n])})})}}),C.fn.extend({queue:function(t,n){var e=2;return"string"!=typeof t&&(n=t,t="fx",e--),arguments.length<e?C.queue(this[0],t):void 0===n?this:this.each(function(){var e=C.queue(this,t,n);C._queueHooks(this,t),"fx"===t&&"inprogress"!==e[0]&&C.dequeue(this,t)})},dequeue:function(e){return this.each(function(){C.dequeue(this,e)})},clearQueue:function(e){return this.queue(e||"fx",[])},promise:function(e,t){var n,i=1,o=C.Deferred(),r=this,s=this.length,a=function(){--i||o.resolveWith(r,[r])};for("string"!=typeof e&&(t=e,e=void 0),e=e||"fx";s--;)(n=q.get(r[s],e+"queueHooks"))&&n.empty&&(i++,n.empty.add(a));return a(),o.promise(t)}});var W=/[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/.source,U=new RegExp("^(?:([+-])=|)("+W+")([a-z%]*)$","i"),R=["Top","Right","Bottom","Left"],B=function(e,t){return e=t||e,"none"===C.css(e,"display")||!C.contains(e.ownerDocument,e)};function X(e,t,n,i){var o,r=1,s=20,a=i?function(){return i.cur()}:function(){return C.css(e,t,"")},l=a(),c=n&&n[3]||(C.cssNumber[t]?"":"px"),d=(C.cssNumber[t]||"px"!==c&&+l)&&U.exec(C.css(e,t));if(d&&d[3]!==c)for(c=c||d[3],n=n||[],d=+l||1;d/=r=r||".5",C.style(e,t,d+c),r!==(r=a()/l)&&1!==r&&--s;);return n&&(d=+d||+l||0,o=n[1]?d+(n[1]+1)*n[2]:+n[2],i&&(i.unit=c,i.start=d,i.end=o)),o}var V=/^(?:checkbox|radio)$/i,Y=/<([\w:-]+)/,G=/^$|\/(?:java|ecma)script/i,Q={option:[1,"<select multiple='multiple'>","</select>"],thead:[1,"<table>","</table>"],col:[2,"<table><colgroup>","</colgroup></table>"],tr:[2,"<table><tbody>","</tbody></table>"],td:[3,"<table><tbody><tr>","</tr></tbody></table>"],_default:[0,"",""]};function J(e,t){var n=void 0!==e.getElementsByTagName?e.getElementsByTagName(t||"*"):void 0!==e.querySelectorAll?e.querySelectorAll(t||"*"):[];return void 0===t||t&&C.nodeName(e,t)?C.merge([e],n):n}function K(e,t){for(var n=0,i=e.length;n<i;n++)q.set(e[n],"globalEval",!t||q.get(t[n],"globalEval"))}Q.optgroup=Q.option,Q.tbody=Q.tfoot=Q.colgroup=Q.caption=Q.thead,Q.th=Q.td;var Z,ee,te=/<|&#?\w+;/;function ne(e,t,n,i,o){for(var r,s,a,l,c,d,u=t.createDocumentFragment(),p=[],f=0,h=e.length;f<h;f++)if((r=e[f])||0===r)if("object"===C.type(r))C.merge(p,r.nodeType?[r]:r);else if(te.test(r)){for(s=s||u.appendChild(t.createElement("div")),a=(Y.exec(r)||["",""])[1].toLowerCase(),l=Q[a]||Q._default,s.innerHTML=l[1]+C.htmlPrefilter(r)+l[2],d=l[0];d--;)s=s.lastChild;C.merge(p,s.childNodes),(s=u.firstChild).textContent=""}else p.push(t.createTextNode(r));for(u.textContent="",f=0;r=p[f++];)if(i&&-1<C.inArray(r,i))o&&o.push(r);else if(c=C.contains(r.ownerDocument,r),s=J(u.appendChild(r),"script"),c&&K(s),n)for(d=0;r=s[d++];)G.test(r.type||"")&&n.push(r);return u}Z=T.createDocumentFragment().appendChild(T.createElement("div")),(ee=T.createElement("input")).setAttribute("type","radio"),ee.setAttribute("checked","checked"),ee.setAttribute("name","t"),Z.appendChild(ee),g.checkClone=Z.cloneNode(!0).cloneNode(!0).lastChild.checked,Z.innerHTML="<textarea>x</textarea>",g.noCloneChecked=!!Z.cloneNode(!0).lastChild.defaultValue;var ie=/^key/,oe=/^(?:mouse|pointer|contextmenu|drag|drop)|click/,re=/^([^.]*)(?:\.(.+)|)/;function se(){return!0}function ae(){return!1}function le(){try{return T.activeElement}catch(e){}}function ce(e,t,n,i,o,r){var s,a;if("object"==typeof t){for(a in"string"!=typeof n&&(i=i||n,n=void 0),t)ce(e,a,n,i,t[a],r);return e}if(null==i&&null==o?(o=n,i=n=void 0):null==o&&("string"==typeof n?(o=i,i=void 0):(o=i,i=n,n=void 0)),!1===o)o=ae;else if(!o)return e;return 1===r&&(s=o,(o=function(e){return C().off(e),s.apply(this,arguments)}).guid=s.guid||(s.guid=C.guid++)),e.each(function(){C.event.add(this,t,o,i,n)})}C.event={global:{},add:function(t,e,n,i,o){var r,s,a,l,c,d,u,p,f,h,v,g=q.get(t);if(g)for(n.handler&&(n=(r=n).handler,o=r.selector),n.guid||(n.guid=C.guid++),(l=g.events)||(l=g.events={}),(s=g.handle)||(s=g.handle=function(e){return void 0!==C&&C.event.triggered!==e.type?C.event.dispatch.apply(t,arguments):void 0}),c=(e=(e||"").match(j)||[""]).length;c--;)f=v=(a=re.exec(e[c])||[])[1],h=(a[2]||"").split(".").sort(),f&&(u=C.event.special[f]||{},f=(o?u.delegateType:u.bindType)||f,u=C.event.special[f]||{},d=C.extend({type:f,origType:v,data:i,handler:n,guid:n.guid,selector:o,needsContext:o&&C.expr.match.needsContext.test(o),namespace:h.join(".")},r),(p=l[f])||((p=l[f]=[]).delegateCount=0,u.setup&&!1!==u.setup.call(t,i,h,s)||t.addEventListener&&t.addEventListener(f,s)),u.add&&(u.add.call(t,d),d.handler.guid||(d.handler.guid=n.guid)),o?p.splice(p.delegateCount++,0,d):p.push(d),C.event.global[f]=!0)},remove:function(e,t,n,i,o){var r,s,a,l,c,d,u,p,f,h,v,g=q.hasData(e)&&q.get(e);if(g&&(l=g.events)){for(c=(t=(t||"").match(j)||[""]).length;c--;)if(f=v=(a=re.exec(t[c])||[])[1],h=(a[2]||"").split(".").sort(),f){for(u=C.event.special[f]||{},p=l[f=(i?u.delegateType:u.bindType)||f]||[],a=a[2]&&new RegExp("(^|\\.)"+h.join("\\.(?:.*\\.|)")+"(\\.|$)"),s=r=p.length;r--;)d=p[r],!o&&v!==d.origType||n&&n.guid!==d.guid||a&&!a.test(d.namespace)||i&&i!==d.selector&&("**"!==i||!d.selector)||(p.splice(r,1),d.selector&&p.delegateCount--,u.remove&&u.remove.call(e,d));s&&!p.length&&(u.teardown&&!1!==u.teardown.call(e,h,g.handle)||C.removeEvent(e,f,g.handle),delete l[f])}else for(f in l)C.event.remove(e,f+t[c],n,i,!0);C.isEmptyObject(l)&&q.remove(e,"handle events")}},dispatch:function(e){e=C.event.fix(e);var t,n,i,o,r,s,a=d.call(arguments),l=(q.get(this,"events")||{})[e.type]||[],c=C.event.special[e.type]||{};if((a[0]=e).delegateTarget=this,!c.preDispatch||!1!==c.preDispatch.call(this,e)){for(s=C.event.handlers.call(this,e,l),t=0;(o=s[t++])&&!e.isPropagationStopped();)for(e.currentTarget=o.elem,n=0;(r=o.handlers[n++])&&!e.isImmediatePropagationStopped();)e.rnamespace&&!e.rnamespace.test(r.namespace)||(e.handleObj=r,e.data=r.data,void 0!==(i=((C.event.special[r.origType]||{}).handle||r.handler).apply(o.elem,a))&&!1===(e.result=i)&&(e.preventDefault(),e.stopPropagation()));return c.postDispatch&&c.postDispatch.call(this,e),e.result}},handlers:function(e,t){var n,i,o,r,s=[],a=t.delegateCount,l=e.target;if(a&&l.nodeType&&("click"!==e.type||isNaN(e.button)||e.button<1))for(;l!==this;l=l.parentNode||this)if(1===l.nodeType&&(!0!==l.disabled||"click"!==e.type)){for(i=[],n=0;n<a;n++)void 0===i[o=(r=t[n]).selector+" "]&&(i[o]=r.needsContext?-1<C(o,this).index(l):C.find(o,this,null,[l]).length),i[o]&&i.push(r);i.length&&s.push({elem:l,handlers:i})}return a<t.length&&s.push({elem:this,handlers:t.slice(a)}),s},props:"altKey bubbles cancelable ctrlKey currentTarget detail eventPhase metaKey relatedTarget shiftKey target timeStamp view which".split(" "),fixHooks:{},keyHooks:{props:"char charCode key keyCode".split(" "),filter:function(e,t){return null==e.which&&(e.which=null!=t.charCode?t.charCode:t.keyCode),e}},mouseHooks:{props:"button buttons clientX clientY offsetX offsetY pageX pageY screenX screenY toElement".split(" "),filter:function(e,t){var n,i,o,r=t.button;return null==e.pageX&&null!=t.clientX&&(i=(n=e.target.ownerDocument||T).documentElement,o=n.body,e.pageX=t.clientX+(i&&i.scrollLeft||o&&o.scrollLeft||0)-(i&&i.clientLeft||o&&o.clientLeft||0),e.pageY=t.clientY+(i&&i.scrollTop||o&&o.scrollTop||0)-(i&&i.clientTop||o&&o.clientTop||0)),e.which||void 0===r||(e.which=1&r?1:2&r?3:4&r?2:0),e}},fix:function(e){if(e[C.expando])return e;var t,n,i,o=e.type,r=e,s=this.fixHooks[o];for(s||(this.fixHooks[o]=s=oe.test(o)?this.mouseHooks:ie.test(o)?this.keyHooks:{}),i=s.props?this.props.concat(s.props):this.props,e=new C.Event(r),t=i.length;t--;)e[n=i[t]]=r[n];return e.target||(e.target=T),3===e.target.nodeType&&(e.target=e.target.parentNode),s.filter?s.filter(e,r):e},special:{load:{noBubble:!0},focus:{trigger:function(){if(this!==le()&&this.focus)return this.focus(),!1},delegateType:"focusin"},blur:{trigger:function(){if(this===le()&&this.blur)return this.blur(),!1},delegateType:"focusout"},click:{trigger:function(){if("checkbox"===this.type&&this.click&&C.nodeName(this,"input"))return this.click(),!1},_default:function(e){return C.nodeName(e.target,"a")}},beforeunload:{postDispatch:function(e){void 0!==e.result&&e.originalEvent&&(e.originalEvent.returnValue=e.result)}}}},C.removeEvent=function(e,t,n){e.removeEventListener&&e.removeEventListener(t,n)},C.Event=function(e,t){if(!(this instanceof C.Event))return new C.Event(e,t);e&&e.type?(this.originalEvent=e,this.type=e.type,this.isDefaultPrevented=e.defaultPrevented||void 0===e.defaultPrevented&&!1===e.returnValue?se:ae):this.type=e,t&&C.extend(this,t),this.timeStamp=e&&e.timeStamp||C.now(),this[C.expando]=!0},C.Event.prototype={constructor:C.Event,isDefaultPrevented:ae,isPropagationStopped:ae,isImmediatePropagationStopped:ae,isSimulated:!1,preventDefault:function(){var e=this.originalEvent;this.isDefaultPrevented=se,e&&!this.isSimulated&&e.preventDefault()},stopPropagation:function(){var e=this.originalEvent;this.isPropagationStopped=se,e&&!this.isSimulated&&e.stopPropagation()},stopImmediatePropagation:function(){var e=this.originalEvent;this.isImmediatePropagationStopped=se,e&&!this.isSimulated&&e.stopImmediatePropagation(),this.stopPropagation()}},C.each({mouseenter:"mouseover",mouseleave:"mouseout",pointerenter:"pointerover",pointerleave:"pointerout"},function(e,o){C.event.special[e]={delegateType:o,bindType:o,handle:function(e){var t,n=e.relatedTarget,i=e.handleObj;return n&&(n===this||C.contains(this,n))||(e.type=i.origType,t=i.handler.apply(this,arguments),e.type=o),t}}}),C.fn.extend({on:function(e,t,n,i){return ce(this,e,t,n,i)},one:function(e,t,n,i){return ce(this,e,t,n,i,1)},off:function(e,t,n){var i,o;if(e&&e.preventDefault&&e.handleObj)return i=e.handleObj,C(e.delegateTarget).off(i.namespace?i.origType+"."+i.namespace:i.origType,i.selector,i.handler),this;if("object"!=typeof e)return!1!==t&&"function"!=typeof t||(n=t,t=void 0),!1===n&&(n=ae),this.each(function(){C.event.remove(this,e,n,t)});for(o in e)this.off(o,t,e[o]);return this}});var de=/<(?!area|br|col|embed|hr|img|input|link|meta|param)(([\w:-]+)[^>]*)\/>/gi,ue=/<script|<style|<link/i,pe=/checked\s*(?:[^=]|=\s*.checked.)/i,fe=/^true\/(.*)/,he=/^\s*<!(?:\[CDATA\[|--)|(?:\]\]|--)>\s*$/g;function ve(e,t){return C.nodeName(e,"table")&&C.nodeName(11!==t.nodeType?t:t.firstChild,"tr")?e.getElementsByTagName("tbody")[0]||e.appendChild(e.ownerDocument.createElement("tbody")):e}function ge(e){return e.type=(null!==e.getAttribute("type"))+"/"+e.type,e}function me(e){var t=fe.exec(e.type);return t?e.type=t[1]:e.removeAttribute("type"),e}function ye(e,t){var n,i,o,r,s,a,l,c;if(1===t.nodeType){if(q.hasData(e)&&(r=q.access(e),s=q.set(t,r),c=r.events))for(o in delete s.handle,s.events={},c)for(n=0,i=c[o].length;n<i;n++)C.event.add(t,o,c[o][n]);_.hasData(e)&&(a=_.access(e),l=C.extend({},a),_.set(t,l))}}function we(n,i,o,r){i=v.apply([],i);var e,t,s,a,l,c,d=0,u=n.length,p=u-1,f=i[0],h=C.isFunction(f);if(h||1<u&&"string"==typeof f&&!g.checkClone&&pe.test(f))return n.each(function(e){var t=n.eq(e);h&&(i[0]=f.call(this,e,t.html())),we(t,i,o,r)});if(u&&(t=(e=ne(i,n[0].ownerDocument,!1,n,r)).firstChild,1===e.childNodes.length&&(e=t),t||r)){for(a=(s=C.map(J(e,"script"),ge)).length;d<u;d++)l=e,d!==p&&(l=C.clone(l,!0,!0),a&&C.merge(s,J(l,"script"))),o.call(n[d],l,d);if(a)for(c=s[s.length-1].ownerDocument,C.map(s,me),d=0;d<a;d++)l=s[d],G.test(l.type||"")&&!q.access(l,"globalEval")&&C.contains(c,l)&&(l.src?C._evalUrl&&C._evalUrl(l.src):C.globalEval(l.textContent.replace(he,"")))}return n}function be(e,t,n){for(var i,o=t?C.filter(t,e):e,r=0;null!=(i=o[r]);r++)n||1!==i.nodeType||C.cleanData(J(i)),i.parentNode&&(n&&C.contains(i.ownerDocument,i)&&K(J(i,"script")),i.parentNode.removeChild(i));return e}C.extend({htmlPrefilter:function(e){return e.replace(de,"<$1></$2>")},clone:function(e,t,n){var i,o,r,s,a,l,c,d=e.cloneNode(!0),u=C.contains(e.ownerDocument,e);if(!(g.noCloneChecked||1!==e.nodeType&&11!==e.nodeType||C.isXMLDoc(e)))for(s=J(d),i=0,o=(r=J(e)).length;i<o;i++)a=r[i],l=s[i],void 0,"input"===(c=l.nodeName.toLowerCase())&&V.test(a.type)?l.checked=a.checked:"input"!==c&&"textarea"!==c||(l.defaultValue=a.defaultValue);if(t)if(n)for(r=r||J(e),s=s||J(d),i=0,o=r.length;i<o;i++)ye(r[i],s[i]);else ye(e,d);return 0<(s=J(d,"script")).length&&K(s,!u&&J(e,"script")),d},cleanData:function(e){for(var t,n,i,o=C.event.special,r=0;void 0!==(n=e[r]);r++)if(P(n)){if(t=n[q.expando]){if(t.events)for(i in t.events)o[i]?C.event.remove(n,i):C.removeEvent(n,i,t.handle);n[q.expando]=void 0}n[_.expando]&&(n[_.expando]=void 0)}}}),C.fn.extend({domManip:we,detach:function(e){return be(this,e,!0)},remove:function(e){return be(this,e)},text:function(e){return D(this,function(e){return void 0===e?C.text(this):this.empty().each(function(){1!==this.nodeType&&11!==this.nodeType&&9!==this.nodeType||(this.textContent=e)})},null,e,arguments.length)},append:function(){return we(this,arguments,function(e){1!==this.nodeType&&11!==this.nodeType&&9!==this.nodeType||ve(this,e).appendChild(e)})},prepend:function(){return we(this,arguments,function(e){if(1===this.nodeType||11===this.nodeType||9===this.nodeType){var t=ve(this,e);t.insertBefore(e,t.firstChild)}})},before:function(){return we(this,arguments,function(e){this.parentNode&&this.parentNode.insertBefore(e,this)})},after:function(){return we(this,arguments,function(e){this.parentNode&&this.parentNode.insertBefore(e,this.nextSibling)})},empty:function(){for(var e,t=0;null!=(e=this[t]);t++)1===e.nodeType&&(C.cleanData(J(e,!1)),e.textContent="");return this},clone:function(e,t){return e=null!=e&&e,t=null==t?e:t,this.map(function(){return C.clone(this,e,t)})},html:function(e){return D(this,function(e){var t=this[0]||{},n=0,i=this.length;if(void 0===e&&1===t.nodeType)return t.innerHTML;if("string"==typeof e&&!ue.test(e)&&!Q[(Y.exec(e)||["",""])[1].toLowerCase()]){e=C.htmlPrefilter(e);try{for(;n<i;n++)1===(t=this[n]||{}).nodeType&&(C.cleanData(J(t,!1)),t.innerHTML=e);t=0}catch(e){}}t&&this.empty().append(e)},null,e,arguments.length)},replaceWith:function(){var n=[];return we(this,arguments,function(e){var t=this.parentNode;C.inArray(this,n)<0&&(C.cleanData(J(this)),t&&t.replaceChild(e,this))},n)}}),C.each({appendTo:"append",prependTo:"prepend",insertBefore:"before",insertAfter:"after",replaceAll:"replaceWith"},function(e,s){C.fn[e]=function(e){for(var t,n=[],i=C(e),o=i.length-1,r=0;r<=o;r++)t=r===o?this:this.clone(!0),C(i[r])[s](t),a.apply(n,t.get());return this.pushStack(n)}});var xe,ke={HTML:"block",BODY:"block"};function Se(e,t){var n=C(t.createElement(e)).appendTo(t.body),i=C.css(n[0],"display");return n.detach(),i}function Te(e){var t=T,n=ke[e];return n||("none"!==(n=Se(e,t))&&n||((t=(xe=(xe||C("<iframe frameborder='0' width='0' height='0'/>")).appendTo(t.documentElement))[0].contentDocument).write(),t.close(),n=Se(e,t),xe.detach()),ke[e]=n),n}var Ce=/^margin/,Ee=new RegExp("^("+W+")(?!px)[a-z%]+$","i"),$e=function(e){var t=e.ownerDocument.defaultView;return t&&t.opener||(t=S),t.getComputedStyle(e)},Ae=function(e,t,n,i){var o,r,s={};for(r in t)s[r]=e.style[r],e.style[r]=t[r];for(r in o=n.apply(e,i||[]),t)e.style[r]=s[r];return o},Ne=T.documentElement;function Le(e,t,n){var i,o,r,s,a=e.style;return""!==(s=(n=n||$e(e))?n.getPropertyValue(t)||n[t]:void 0)&&void 0!==s||C.contains(e.ownerDocument,e)||(s=C.style(e,t)),n&&!g.pixelMarginRight()&&Ee.test(s)&&Ce.test(t)&&(i=a.width,o=a.minWidth,r=a.maxWidth,a.minWidth=a.maxWidth=a.width=s,s=n.width,a.width=i,a.minWidth=o,a.maxWidth=r),void 0!==s?s+"":s}function He(e,t){return{get:function(){if(!e())return(this.get=t).apply(this,arguments);delete this.get}}}!function(){var t,n,i,o,r=T.createElement("div"),s=T.createElement("div");function e(){s.style.cssText="-webkit-box-sizing:border-box;-moz-box-sizing:border-box;box-sizing:border-box;position:relative;display:block;margin:auto;border:1px;padding:1px;top:1%;width:50%",s.innerHTML="",Ne.appendChild(r);var e=S.getComputedStyle(s);t="1%"!==e.top,o="2px"===e.marginLeft,n="4px"===e.width,s.style.marginRight="50%",i="4px"===e.marginRight,Ne.removeChild(r)}s.style&&(s.style.backgroundClip="content-box",s.cloneNode(!0).style.backgroundClip="",g.clearCloneStyle="content-box"===s.style.backgroundClip,r.style.cssText="border:0;width:8px;height:0;top:0;left:-9999px;padding:0;margin-top:1px;position:absolute",r.appendChild(s),C.extend(g,{pixelPosition:function(){return e(),t},boxSizingReliable:function(){return null==n&&e(),n},pixelMarginRight:function(){return null==n&&e(),i},reliableMarginLeft:function(){return null==n&&e(),o},reliableMarginRight:function(){var e,t=s.appendChild(T.createElement("div"));return t.style.cssText=s.style.cssText="-webkit-box-sizing:content-box;box-sizing:content-box;display:block;margin:0;border:0;padding:0",t.style.marginRight=t.style.width="0",s.style.width="1px",Ne.appendChild(r),e=!parseFloat(S.getComputedStyle(t).marginRight),Ne.removeChild(r),s.removeChild(t),e}}))}();var je=/^(none|table(?!-c[ea]).+)/,Oe={position:"absolute",visibility:"hidden",display:"block"},De={letterSpacing:"0",fontWeight:"400"},Pe=["Webkit","O","Moz","ms"],Me=T.createElement("div").style;function qe(e){if(e in Me)return e;for(var t=e[0].toUpperCase()+e.slice(1),n=Pe.length;n--;)if((e=Pe[n]+t)in Me)return e}function _e(e,t,n){var i=U.exec(t);return i?Math.max(0,i[2]-(n||0))+(i[3]||"px"):t}function ze(e,t,n,i,o){for(var r=n===(i?"border":"content")?4:"width"===t?1:0,s=0;r<4;r+=2)"margin"===n&&(s+=C.css(e,n+R[r],!0,o)),i?("content"===n&&(s-=C.css(e,"padding"+R[r],!0,o)),"margin"!==n&&(s-=C.css(e,"border"+R[r]+"Width",!0,o))):(s+=C.css(e,"padding"+R[r],!0,o),"padding"!==n&&(s+=C.css(e,"border"+R[r]+"Width",!0,o)));return s}function Fe(e,t,n){var i=!0,o="width"===t?e.offsetWidth:e.offsetHeight,r=$e(e),s="border-box"===C.css(e,"boxSizing",!1,r);if(o<=0||null==o){if(((o=Le(e,t,r))<0||null==o)&&(o=e.style[t]),Ee.test(o))return o;i=s&&(g.boxSizingReliable()||o===e.style[t]),o=parseFloat(o)||0}return o+ze(e,t,n||(s?"border":"content"),i,r)+"px"}function Ie(e,t){for(var n,i,o,r=[],s=0,a=e.length;s<a;s++)(i=e[s]).style&&(r[s]=q.get(i,"olddisplay"),n=i.style.display,t?(r[s]||"none"!==n||(i.style.display=""),""===i.style.display&&B(i)&&(r[s]=q.access(i,"olddisplay",Te(i.nodeName)))):(o=B(i),"none"===n&&o||q.set(i,"olddisplay",o?n:C.css(i,"display"))));for(s=0;s<a;s++)(i=e[s]).style&&(t&&"none"!==i.style.display&&""!==i.style.display||(i.style.display=t?r[s]||"":"none"));return e}function We(e,t,n,i,o){return new We.prototype.init(e,t,n,i,o)}C.extend({cssHooks:{opacity:{get:function(e,t){if(t){var n=Le(e,"opacity");return""===n?"1":n}}}},cssNumber:{animationIterationCount:!0,columnCount:!0,fillOpacity:!0,flexGrow:!0,flexShrink:!0,fontWeight:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,widows:!0,zIndex:!0,zoom:!0},cssProps:{float:"cssFloat"},style:function(e,t,n,i){if(e&&3!==e.nodeType&&8!==e.nodeType&&e.style){var o,r,s,a=C.camelCase(t),l=e.style;if(t=C.cssProps[a]||(C.cssProps[a]=qe(a)||a),s=C.cssHooks[t]||C.cssHooks[a],void 0===n)return s&&"get"in s&&void 0!==(o=s.get(e,!1,i))?o:l[t];"string"===(r=typeof n)&&(o=U.exec(n))&&o[1]&&(n=X(e,t,o),r="number"),null!=n&&n==n&&("number"===r&&(n+=o&&o[3]||(C.cssNumber[a]?"":"px")),g.clearCloneStyle||""!==n||0!==t.indexOf("background")||(l[t]="inherit"),s&&"set"in s&&void 0===(n=s.set(e,n,i))||(l[t]=n))}},css:function(e,t,n,i){var o,r,s,a=C.camelCase(t);return t=C.cssProps[a]||(C.cssProps[a]=qe(a)||a),(s=C.cssHooks[t]||C.cssHooks[a])&&"get"in s&&(o=s.get(e,!0,n)),void 0===o&&(o=Le(e,t,i)),"normal"===o&&t in De&&(o=De[t]),""===n||n?(r=parseFloat(o),!0===n||isFinite(r)?r||0:o):o}}),C.each(["height","width"],function(e,s){C.cssHooks[s]={get:function(e,t,n){if(t)return je.test(C.css(e,"display"))&&0===e.offsetWidth?Ae(e,Oe,function(){return Fe(e,s,n)}):Fe(e,s,n)},set:function(e,t,n){var i,o=n&&$e(e),r=n&&ze(e,s,n,"border-box"===C.css(e,"boxSizing",!1,o),o);return r&&(i=U.exec(t))&&"px"!==(i[3]||"px")&&(e.style[s]=t,t=C.css(e,s)),_e(0,t,r)}}}),C.cssHooks.marginLeft=He(g.reliableMarginLeft,function(e,t){if(t)return(parseFloat(Le(e,"marginLeft"))||e.getBoundingClientRect().left-Ae(e,{marginLeft:0},function(){return e.getBoundingClientRect().left}))+"px"}),C.cssHooks.marginRight=He(g.reliableMarginRight,function(e,t){if(t)return Ae(e,{display:"inline-block"},Le,[e,"marginRight"])}),C.each({margin:"",padding:"",border:"Width"},function(o,r){C.cssHooks[o+r]={expand:function(e){for(var t=0,n={},i="string"==typeof e?e.split(" "):[e];t<4;t++)n[o+R[t]+r]=i[t]||i[t-2]||i[0];return n}},Ce.test(o)||(C.cssHooks[o+r].set=_e)}),C.fn.extend({css:function(e,t){return D(this,function(e,t,n){var i,o,r={},s=0;if(C.isArray(t)){for(i=$e(e),o=t.length;s<o;s++)r[t[s]]=C.css(e,t[s],!1,i);return r}return void 0!==n?C.style(e,t,n):C.css(e,t)},e,t,1<arguments.length)},show:function(){return Ie(this,!0)},hide:function(){return Ie(this)},toggle:function(e){return"boolean"==typeof e?e?this.show():this.hide():this.each(function(){B(this)?C(this).show():C(this).hide()})}}),((C.Tween=We).prototype={constructor:We,init:function(e,t,n,i,o,r){this.elem=e,this.prop=n,this.easing=o||C.easing._default,this.options=t,this.start=this.now=this.cur(),this.end=i,this.unit=r||(C.cssNumber[n]?"":"px")},cur:function(){var e=We.propHooks[this.prop];return e&&e.get?e.get(this):We.propHooks._default.get(this)},run:function(e){var t,n=We.propHooks[this.prop];return this.options.duration?this.pos=t=C.easing[this.easing](e,this.options.duration*e,0,1,this.options.duration):this.pos=t=e,this.now=(this.end-this.start)*t+this.start,this.options.step&&this.options.step.call(this.elem,this.now,this),n&&n.set?n.set(this):We.propHooks._default.set(this),this}}).init.prototype=We.prototype,(We.propHooks={_default:{get:function(e){var t;return 1!==e.elem.nodeType||null!=e.elem[e.prop]&&null==e.elem.style[e.prop]?e.elem[e.prop]:(t=C.css(e.elem,e.prop,""))&&"auto"!==t?t:0},set:function(e){C.fx.step[e.prop]?C.fx.step[e.prop](e):1!==e.elem.nodeType||null==e.elem.style[C.cssProps[e.prop]]&&!C.cssHooks[e.prop]?e.elem[e.prop]=e.now:C.style(e.elem,e.prop,e.now+e.unit)}}}).scrollTop=We.propHooks.scrollLeft={set:function(e){e.elem.nodeType&&e.elem.parentNode&&(e.elem[e.prop]=e.now)}},C.easing={linear:function(e){return e},swing:function(e){return.5-Math.cos(e*Math.PI)/2},_default:"swing"},C.fx=We.prototype.init,C.fx.step={};var Ue,Re,Be,Xe,Ve,Ye=/^(?:toggle|show|hide)$/,Ge=/queueHooks$/;function Qe(){return S.setTimeout(function(){Ue=void 0}),Ue=C.now()}function Je(e,t){var n,i=0,o={height:e};for(t=t?1:0;i<4;i+=2-t)o["margin"+(n=R[i])]=o["padding"+n]=e;return t&&(o.opacity=o.width=e),o}function Ke(e,t,n){for(var i,o=(Ze.tweeners[t]||[]).concat(Ze.tweeners["*"]),r=0,s=o.length;r<s;r++)if(i=o[r].call(n,t,e))return i}function Ze(r,e,t){var n,s,i=0,o=Ze.prefilters.length,a=C.Deferred().always(function(){delete l.elem}),l=function(){if(s)return!1;for(var e=Ue||Qe(),t=Math.max(0,c.startTime+c.duration-e),n=1-(t/c.duration||0),i=0,o=c.tweens.length;i<o;i++)c.tweens[i].run(n);return a.notifyWith(r,[c,n,t]),n<1&&o?t:(a.resolveWith(r,[c]),!1)},c=a.promise({elem:r,props:C.extend({},e),opts:C.extend(!0,{specialEasing:{},easing:C.easing._default},t),originalProperties:e,originalOptions:t,startTime:Ue||Qe(),duration:t.duration,tweens:[],createTween:function(e,t){var n=C.Tween(r,c.opts,e,t,c.opts.specialEasing[e]||c.opts.easing);return c.tweens.push(n),n},stop:function(e){var t=0,n=e?c.tweens.length:0;if(s)return this;for(s=!0;t<n;t++)c.tweens[t].run(1);return e?(a.notifyWith(r,[c,1,0]),a.resolveWith(r,[c,e])):a.rejectWith(r,[c,e]),this}}),d=c.props;for(!function(e,t){var n,i,o,r,s;for(n in e)if(o=t[i=C.camelCase(n)],r=e[n],C.isArray(r)&&(o=r[1],r=e[n]=r[0]),n!==i&&(e[i]=r,delete e[n]),(s=C.cssHooks[i])&&"expand"in s)for(n in r=s.expand(r),delete e[i],r)n in e||(e[n]=r[n],t[n]=o);else t[i]=o}(d,c.opts.specialEasing);i<o;i++)if(n=Ze.prefilters[i].call(c,r,d,c.opts))return C.isFunction(n.stop)&&(C._queueHooks(c.elem,c.opts.queue).stop=C.proxy(n.stop,n)),n;return C.map(d,Ke,c),C.isFunction(c.opts.start)&&c.opts.start.call(r,c),C.fx.timer(C.extend(l,{elem:r,anim:c,queue:c.opts.queue})),c.progress(c.opts.progress).done(c.opts.done,c.opts.complete).fail(c.opts.fail).always(c.opts.always)}C.Animation=C.extend(Ze,{tweeners:{"*":[function(e,t){var n=this.createTween(e,t);return X(n.elem,e,U.exec(t),n),n}]},tweener:function(e,t){for(var n,i=0,o=(e=C.isFunction(e)?(t=e,["*"]):e.match(j)).length;i<o;i++)n=e[i],Ze.tweeners[n]=Ze.tweeners[n]||[],Ze.tweeners[n].unshift(t)},prefilters:[function(t,e,n){var i,o,r,s,a,l,c,d=this,u={},p=t.style,f=t.nodeType&&B(t),h=q.get(t,"fxshow");for(i in n.queue||(null==(a=C._queueHooks(t,"fx")).unqueued&&(a.unqueued=0,l=a.empty.fire,a.empty.fire=function(){a.unqueued||l()}),a.unqueued++,d.always(function(){d.always(function(){a.unqueued--,C.queue(t,"fx").length||a.empty.fire()})})),1===t.nodeType&&("height"in e||"width"in e)&&(n.overflow=[p.overflow,p.overflowX,p.overflowY],"inline"===("none"===(c=C.css(t,"display"))?q.get(t,"olddisplay")||Te(t.nodeName):c)&&"none"===C.css(t,"float")&&(p.display="inline-block")),n.overflow&&(p.overflow="hidden",d.always(function(){p.overflow=n.overflow[0],p.overflowX=n.overflow[1],p.overflowY=n.overflow[2]})),e)if(o=e[i],Ye.exec(o)){if(delete e[i],r=r||"toggle"===o,o===(f?"hide":"show")){if("show"!==o||!h||void 0===h[i])continue;f=!0}u[i]=h&&h[i]||C.style(t,i)}else c=void 0;if(C.isEmptyObject(u))"inline"===("none"===c?Te(t.nodeName):c)&&(p.display=c);else for(i in h?"hidden"in h&&(f=h.hidden):h=q.access(t,"fxshow",{}),r&&(h.hidden=!f),f?C(t).show():d.done(function(){C(t).hide()}),d.done(function(){var e;for(e in q.remove(t,"fxshow"),u)C.style(t,e,u[e])}),u)s=Ke(f?h[i]:0,i,d),i in h||(h[i]=s.start,f&&(s.end=s.start,s.start="width"===i||"height"===i?1:0))}],prefilter:function(e,t){t?Ze.prefilters.unshift(e):Ze.prefilters.push(e)}}),C.speed=function(e,t,n){var i=e&&"object"==typeof e?C.extend({},e):{complete:n||!n&&t||C.isFunction(e)&&e,duration:e,easing:n&&t||t&&!C.isFunction(t)&&t};return i.duration=C.fx.off?0:"number"==typeof i.duration?i.duration:i.duration in C.fx.speeds?C.fx.speeds[i.duration]:C.fx.speeds._default,null!=i.queue&&!0!==i.queue||(i.queue="fx"),i.old=i.complete,i.complete=function(){C.isFunction(i.old)&&i.old.call(this),i.queue&&C.dequeue(this,i.queue)},i},C.fn.extend({fadeTo:function(e,t,n,i){return this.filter(B).css("opacity",0).show().end().animate({opacity:t},e,n,i)},animate:function(t,e,n,i){var o=C.isEmptyObject(t),r=C.speed(e,n,i),s=function(){var e=Ze(this,C.extend({},t),r);(o||q.get(this,"finish"))&&e.stop(!0)};return s.finish=s,o||!1===r.queue?this.each(s):this.queue(r.queue,s)},stop:function(o,e,r){var s=function(e){var t=e.stop;delete e.stop,t(r)};return"string"!=typeof o&&(r=e,e=o,o=void 0),e&&!1!==o&&this.queue(o||"fx",[]),this.each(function(){var e=!0,t=null!=o&&o+"queueHooks",n=C.timers,i=q.get(this);if(t)i[t]&&i[t].stop&&s(i[t]);else for(t in i)i[t]&&i[t].stop&&Ge.test(t)&&s(i[t]);for(t=n.length;t--;)n[t].elem!==this||null!=o&&n[t].queue!==o||(n[t].anim.stop(r),e=!1,n.splice(t,1));!e&&r||C.dequeue(this,o)})},finish:function(s){return!1!==s&&(s=s||"fx"),this.each(function(){var e,t=q.get(this),n=t[s+"queue"],i=t[s+"queueHooks"],o=C.timers,r=n?n.length:0;for(t.finish=!0,C.queue(this,s,[]),i&&i.stop&&i.stop.call(this,!0),e=o.length;e--;)o[e].elem===this&&o[e].queue===s&&(o[e].anim.stop(!0),o.splice(e,1));for(e=0;e<r;e++)n[e]&&n[e].finish&&n[e].finish.call(this);delete t.finish})}}),C.each(["toggle","show","hide"],function(e,i){var o=C.fn[i];C.fn[i]=function(e,t,n){return null==e||"boolean"==typeof e?o.apply(this,arguments):this.animate(Je(i,!0),e,t,n)}}),C.each({slideDown:Je("show"),slideUp:Je("hide"),slideToggle:Je("toggle"),fadeIn:{opacity:"show"},fadeOut:{opacity:"hide"},fadeToggle:{opacity:"toggle"}},function(e,i){C.fn[e]=function(e,t,n){return this.animate(i,e,t,n)}}),C.timers=[],C.fx.tick=function(){var e,t=0,n=C.timers;for(Ue=C.now();t<n.length;t++)(e=n[t])()||n[t]!==e||n.splice(t--,1);n.length||C.fx.stop(),Ue=void 0},C.fx.timer=function(e){C.timers.push(e),e()?C.fx.start():C.timers.pop()},C.fx.interval=13,C.fx.start=function(){Re||(Re=S.setInterval(C.fx.tick,C.fx.interval))},C.fx.stop=function(){S.clearInterval(Re),Re=null},C.fx.speeds={slow:600,fast:200,_default:400},C.fn.delay=function(i,e){return i=C.fx&&C.fx.speeds[i]||i,e=e||"fx",this.queue(e,function(e,t){var n=S.setTimeout(e,i);t.stop=function(){S.clearTimeout(n)}})},Be=T.createElement("input"),Xe=T.createElement("select"),Ve=Xe.appendChild(T.createElement("option")),Be.type="checkbox",g.checkOn=""!==Be.value,g.optSelected=Ve.selected,Xe.disabled=!0,g.optDisabled=!Ve.disabled,(Be=T.createElement("input")).value="t",Be.type="radio",g.radioValue="t"===Be.value;var et,tt=C.expr.attrHandle;C.fn.extend({attr:function(e,t){return D(this,C.attr,e,t,1<arguments.length)},removeAttr:function(e){return this.each(function(){C.removeAttr(this,e)})}}),C.extend({attr:function(e,t,n){var i,o,r=e.nodeType;if(3!==r&&8!==r&&2!==r)return void 0===e.getAttribute?C.prop(e,t,n):(1===r&&C.isXMLDoc(e)||(t=t.toLowerCase(),o=C.attrHooks[t]||(C.expr.match.bool.test(t)?et:void 0)),void 0!==n?null===n?void C.removeAttr(e,t):o&&"set"in o&&void 0!==(i=o.set(e,n,t))?i:(e.setAttribute(t,n+""),n):o&&"get"in o&&null!==(i=o.get(e,t))?i:null==(i=C.find.attr(e,t))?void 0:i)},attrHooks:{type:{set:function(e,t){if(!g.radioValue&&"radio"===t&&C.nodeName(e,"input")){var n=e.value;return e.setAttribute("type",t),n&&(e.value=n),t}}}},removeAttr:function(e,t){var n,i,o=0,r=t&&t.match(j);if(r&&1===e.nodeType)for(;n=r[o++];)i=C.propFix[n]||n,C.expr.match.bool.test(n)&&(e[i]=!1),e.removeAttribute(n)}}),et={set:function(e,t,n){return!1===t?C.removeAttr(e,n):e.setAttribute(n,n),n}},C.each(C.expr.match.bool.source.match(/\w+/g),function(e,t){var r=tt[t]||C.find.attr;tt[t]=function(e,t,n){var i,o;return n||(o=tt[t],tt[t]=i,i=null!=r(e,t,n)?t.toLowerCase():null,tt[t]=o),i}});var nt=/^(?:input|select|textarea|button)$/i,it=/^(?:a|area)$/i;C.fn.extend({prop:function(e,t){return D(this,C.prop,e,t,1<arguments.length)},removeProp:function(e){return this.each(function(){delete this[C.propFix[e]||e]})}}),C.extend({prop:function(e,t,n){var i,o,r=e.nodeType;if(3!==r&&8!==r&&2!==r)return 1===r&&C.isXMLDoc(e)||(t=C.propFix[t]||t,o=C.propHooks[t]),void 0!==n?o&&"set"in o&&void 0!==(i=o.set(e,n,t))?i:e[t]=n:o&&"get"in o&&null!==(i=o.get(e,t))?i:e[t]},propHooks:{tabIndex:{get:function(e){var t=C.find.attr(e,"tabindex");return t?parseInt(t,10):nt.test(e.nodeName)||it.test(e.nodeName)&&e.href?0:-1}}},propFix:{for:"htmlFor",class:"className"}}),g.optSelected||(C.propHooks.selected={get:function(e){var t=e.parentNode;return t&&t.parentNode&&t.parentNode.selectedIndex,null},set:function(e){var t=e.parentNode;t&&(t.selectedIndex,t.parentNode&&t.parentNode.selectedIndex)}}),C.each(["tabIndex","readOnly","maxLength","cellSpacing","cellPadding","rowSpan","colSpan","useMap","frameBorder","contentEditable"],function(){C.propFix[this.toLowerCase()]=this});var ot=/[\t\r\n\f]/g;function rt(e){return e.getAttribute&&e.getAttribute("class")||""}C.fn.extend({addClass:function(t){var e,n,i,o,r,s,a,l=0;if(C.isFunction(t))return this.each(function(e){C(this).addClass(t.call(this,e,rt(this)))});if("string"==typeof t&&t)for(e=t.match(j)||[];n=this[l++];)if(o=rt(n),i=1===n.nodeType&&(" "+o+" ").replace(ot," ")){for(s=0;r=e[s++];)i.indexOf(" "+r+" ")<0&&(i+=r+" ");o!==(a=C.trim(i))&&n.setAttribute("class",a)}return this},removeClass:function(t){var e,n,i,o,r,s,a,l=0;if(C.isFunction(t))return this.each(function(e){C(this).removeClass(t.call(this,e,rt(this)))});if(!arguments.length)return this.attr("class","");if("string"==typeof t&&t)for(e=t.match(j)||[];n=this[l++];)if(o=rt(n),i=1===n.nodeType&&(" "+o+" ").replace(ot," ")){for(s=0;r=e[s++];)for(;-1<i.indexOf(" "+r+" ");)i=i.replace(" "+r+" "," ");o!==(a=C.trim(i))&&n.setAttribute("class",a)}return this},toggleClass:function(o,t){var r=typeof o;return"boolean"==typeof t&&"string"===r?t?this.addClass(o):this.removeClass(o):C.isFunction(o)?this.each(function(e){C(this).toggleClass(o.call(this,e,rt(this),t),t)}):this.each(function(){var e,t,n,i;if("string"===r)for(t=0,n=C(this),i=o.match(j)||[];e=i[t++];)n.hasClass(e)?n.removeClass(e):n.addClass(e);else void 0!==o&&"boolean"!==r||((e=rt(this))&&q.set(this,"__className__",e),this.setAttribute&&this.setAttribute("class",e||!1===o?"":q.get(this,"__className__")||""))})},hasClass:function(e){var t,n,i=0;for(t=" "+e+" ";n=this[i++];)if(1===n.nodeType&&-1<(" "+rt(n)+" ").replace(ot," ").indexOf(t))return!0;return!1}});var st=/\r/g,at=/[\x20\t\r\n\f]+/g;C.fn.extend({val:function(n){var i,e,o,t=this[0];return arguments.length?(o=C.isFunction(n),this.each(function(e){var t;1===this.nodeType&&(null==(t=o?n.call(this,e,C(this).val()):n)?t="":"number"==typeof t?t+="":C.isArray(t)&&(t=C.map(t,function(e){return null==e?"":e+""})),(i=C.valHooks[this.type]||C.valHooks[this.nodeName.toLowerCase()])&&"set"in i&&void 0!==i.set(this,t,"value")||(this.value=t))})):t?(i=C.valHooks[t.type]||C.valHooks[t.nodeName.toLowerCase()])&&"get"in i&&void 0!==(e=i.get(t,"value"))?e:"string"==typeof(e=t.value)?e.replace(st,""):null==e?"":e:void 0}}),C.extend({valHooks:{option:{get:function(e){var t=C.find.attr(e,"value");return null!=t?t:C.trim(C.text(e)).replace(at," ")}},select:{get:function(e){for(var t,n,i=e.options,o=e.selectedIndex,r="select-one"===e.type||o<0,s=r?null:[],a=r?o+1:i.length,l=o<0?a:r?o:0;l<a;l++)if(((n=i[l]).selected||l===o)&&(g.optDisabled?!n.disabled:null===n.getAttribute("disabled"))&&(!n.parentNode.disabled||!C.nodeName(n.parentNode,"optgroup"))){if(t=C(n).val(),r)return t;s.push(t)}return s},set:function(e,t){for(var n,i,o=e.options,r=C.makeArray(t),s=o.length;s--;)((i=o[s]).selected=-1<C.inArray(C.valHooks.option.get(i),r))&&(n=!0);return n||(e.selectedIndex=-1),r}}}}),C.each(["radio","checkbox"],function(){C.valHooks[this]={set:function(e,t){if(C.isArray(t))return e.checked=-1<C.inArray(C(e).val(),t)}},g.checkOn||(C.valHooks[this].get=function(e){return null===e.getAttribute("value")?"on":e.value})});var lt=/^(?:focusinfocus|focusoutblur)$/;C.extend(C.event,{trigger:function(e,t,n,i){var o,r,s,a,l,c,d,u=[n||T],p=h.call(e,"type")?e.type:e,f=h.call(e,"namespace")?e.namespace.split("."):[];if(r=s=n=n||T,3!==n.nodeType&&8!==n.nodeType&&!lt.test(p+C.event.triggered)&&(-1<p.indexOf(".")&&(p=(f=p.split(".")).shift(),f.sort()),l=p.indexOf(":")<0&&"on"+p,(e=e[C.expando]?e:new C.Event(p,"object"==typeof e&&e)).isTrigger=i?2:3,e.namespace=f.join("."),e.rnamespace=e.namespace?new RegExp("(^|\\.)"+f.join("\\.(?:.*\\.|)")+"(\\.|$)"):null,e.result=void 0,e.target||(e.target=n),t=null==t?[e]:C.makeArray(t,[e]),d=C.event.special[p]||{},i||!d.trigger||!1!==d.trigger.apply(n,t))){if(!i&&!d.noBubble&&!C.isWindow(n)){for(a=d.delegateType||p,lt.test(a+p)||(r=r.parentNode);r;r=r.parentNode)u.push(r),s=r;s===(n.ownerDocument||T)&&u.push(s.defaultView||s.parentWindow||S)}for(o=0;(r=u[o++])&&!e.isPropagationStopped();)e.type=1<o?a:d.bindType||p,(c=(q.get(r,"events")||{})[e.type]&&q.get(r,"handle"))&&c.apply(r,t),(c=l&&r[l])&&c.apply&&P(r)&&(e.result=c.apply(r,t),!1===e.result&&e.preventDefault());return e.type=p,i||e.isDefaultPrevented()||d._default&&!1!==d._default.apply(u.pop(),t)||!P(n)||l&&C.isFunction(n[p])&&!C.isWindow(n)&&((s=n[l])&&(n[l]=null),n[C.event.triggered=p](),C.event.triggered=void 0,s&&(n[l]=s)),e.result}},simulate:function(e,t,n){var i=C.extend(new C.Event,n,{type:e,isSimulated:!0});C.event.trigger(i,null,t)}}),C.fn.extend({trigger:function(e,t){return this.each(function(){C.event.trigger(e,t,this)})},triggerHandler:function(e,t){var n=this[0];if(n)return C.event.trigger(e,t,n,!0)}}),C.each("blur focus focusin focusout load resize scroll unload click dblclick mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave change select submit keydown keypress keyup error contextmenu".split(" "),function(e,n){C.fn[n]=function(e,t){return 0<arguments.length?this.on(n,null,e,t):this.trigger(n)}}),C.fn.extend({hover:function(e,t){return this.mouseenter(e).mouseleave(t||e)}}),g.focusin="onfocusin"in S,g.focusin||C.each({focus:"focusin",blur:"focusout"},function(n,i){var o=function(e){C.event.simulate(i,e.target,C.event.fix(e))};C.event.special[i]={setup:function(){var e=this.ownerDocument||this,t=q.access(e,i);t||e.addEventListener(n,o,!0),q.access(e,i,(t||0)+1)},teardown:function(){var e=this.ownerDocument||this,t=q.access(e,i)-1;t?q.access(e,i,t):(e.removeEventListener(n,o,!0),q.remove(e,i))}}});var ct=S.location,dt=C.now(),ut=/\?/;C.parseJSON=function(e){return JSON.parse(e+"")},C.parseXML=function(e){var t;if(!e||"string"!=typeof e)return null;try{t=(new S.DOMParser).parseFromString(e,"text/xml")}catch(e){t=void 0}return t&&!t.getElementsByTagName("parsererror").length||C.error("Invalid XML: "+e),t};var pt=/#.*$/,ft=/([?&])_=[^&]*/,ht=/^(.*?):[ \t]*([^\r\n]*)$/gm,vt=/^(?:GET|HEAD)$/,gt=/^\/\//,mt={},yt={},wt="*/".concat("*"),bt=T.createElement("a");function xt(r){return function(e,t){"string"!=typeof e&&(t=e,e="*");var n,i=0,o=e.toLowerCase().match(j)||[];if(C.isFunction(t))for(;n=o[i++];)"+"===n[0]?(n=n.slice(1)||"*",(r[n]=r[n]||[]).unshift(t)):(r[n]=r[n]||[]).push(t)}}function kt(t,o,r,s){var a={},l=t===yt;function c(e){var i;return a[e]=!0,C.each(t[e]||[],function(e,t){var n=t(o,r,s);return"string"!=typeof n||l||a[n]?l?!(i=n):void 0:(o.dataTypes.unshift(n),c(n),!1)}),i}return c(o.dataTypes[0])||!a["*"]&&c("*")}function St(e,t){var n,i,o=C.ajaxSettings.flatOptions||{};for(n in t)void 0!==t[n]&&((o[n]?e:i||(i={}))[n]=t[n]);return i&&C.extend(!0,e,i),e}bt.href=ct.href,C.extend({active:0,lastModified:{},etag:{},ajaxSettings:{url:ct.href,type:"GET",isLocal:/^(?:about|app|app-storage|.+-extension|file|res|widget):$/.test(ct.protocol),global:!0,processData:!0,async:!0,contentType:"application/x-www-form-urlencoded; charset=UTF-8",accepts:{"*":wt,text:"text/plain",html:"text/html",xml:"application/xml, text/xml",json:"application/json, text/javascript"},contents:{xml:/\bxml\b/,html:/\bhtml/,json:/\bjson\b/},responseFields:{xml:"responseXML",text:"responseText",json:"responseJSON"},converters:{"* text":String,"text html":!0,"text json":C.parseJSON,"text xml":C.parseXML},flatOptions:{url:!0,context:!0}},ajaxSetup:function(e,t){return t?St(St(e,C.ajaxSettings),t):St(C.ajaxSettings,e)},ajaxPrefilter:xt(mt),ajaxTransport:xt(yt),ajax:function(e,t){"object"==typeof e&&(t=e,e=void 0),t=t||{};var d,u,p,n,f,i,h,o,v=C.ajaxSetup({},t),g=v.context||v,m=v.context&&(g.nodeType||g.jquery)?C(g):C.event,y=C.Deferred(),w=C.Callbacks("once memory"),b=v.statusCode||{},r={},s={},x=0,a="canceled",k={readyState:0,getResponseHeader:function(e){var t;if(2===x){if(!n)for(n={};t=ht.exec(p);)n[t[1].toLowerCase()]=t[2];t=n[e.toLowerCase()]}return null==t?null:t},getAllResponseHeaders:function(){return 2===x?p:null},setRequestHeader:function(e,t){var n=e.toLowerCase();return x||(e=s[n]=s[n]||e,r[e]=t),this},overrideMimeType:function(e){return x||(v.mimeType=e),this},statusCode:function(e){var t;if(e)if(x<2)for(t in e)b[t]=[b[t],e[t]];else k.always(e[k.status]);return this},abort:function(e){var t=e||a;return d&&d.abort(t),l(0,t),this}};if(y.promise(k).complete=w.add,k.success=k.done,k.error=k.fail,v.url=((e||v.url||ct.href)+"").replace(pt,"").replace(gt,ct.protocol+"//"),v.type=t.method||t.type||v.method||v.type,v.dataTypes=C.trim(v.dataType||"*").toLowerCase().match(j)||[""],null==v.crossDomain){i=T.createElement("a");try{i.href=v.url,i.href=i.href,v.crossDomain=bt.protocol+"//"+bt.host!=i.protocol+"//"+i.host}catch(e){v.crossDomain=!0}}if(v.data&&v.processData&&"string"!=typeof v.data&&(v.data=C.param(v.data,v.traditional)),kt(mt,v,t,k),2===x)return k;for(o in(h=C.event&&v.global)&&0==C.active++&&C.event.trigger("ajaxStart"),v.type=v.type.toUpperCase(),v.hasContent=!vt.test(v.type),u=v.url,v.hasContent||(v.data&&(u=v.url+=(ut.test(u)?"&":"?")+v.data,delete v.data),!1===v.cache&&(v.url=ft.test(u)?u.replace(ft,"$1_="+dt++):u+(ut.test(u)?"&":"?")+"_="+dt++)),v.ifModified&&(C.lastModified[u]&&k.setRequestHeader("If-Modified-Since",C.lastModified[u]),C.etag[u]&&k.setRequestHeader("If-None-Match",C.etag[u])),(v.data&&v.hasContent&&!1!==v.contentType||t.contentType)&&k.setRequestHeader("Content-Type",v.contentType),k.setRequestHeader("Accept",v.dataTypes[0]&&v.accepts[v.dataTypes[0]]?v.accepts[v.dataTypes[0]]+("*"!==v.dataTypes[0]?", "+wt+"; q=0.01":""):v.accepts["*"]),v.headers)k.setRequestHeader(o,v.headers[o]);if(v.beforeSend&&(!1===v.beforeSend.call(g,k,v)||2===x))return k.abort();for(o in a="abort",{success:1,error:1,complete:1})k[o](v[o]);if(d=kt(yt,v,t,k)){if(k.readyState=1,h&&m.trigger("ajaxSend",[k,v]),2===x)return k;v.async&&0<v.timeout&&(f=S.setTimeout(function(){k.abort("timeout")},v.timeout));try{x=1,d.send(r,l)}catch(e){if(!(x<2))throw e;l(-1,e)}}else l(-1,"No Transport");function l(e,t,n,i){var o,r,s,a,l,c=t;2!==x&&(x=2,f&&S.clearTimeout(f),d=void 0,p=i||"",k.readyState=0<e?4:0,o=200<=e&&e<300||304===e,n&&(a=function(e,t,n){for(var i,o,r,s,a=e.contents,l=e.dataTypes;"*"===l[0];)l.shift(),void 0===i&&(i=e.mimeType||t.getResponseHeader("Content-Type"));if(i)for(o in a)if(a[o]&&a[o].test(i)){l.unshift(o);break}if(l[0]in n)r=l[0];else{for(o in n){if(!l[0]||e.converters[o+" "+l[0]]){r=o;break}s||(s=o)}r=r||s}if(r)return r!==l[0]&&l.unshift(r),n[r]}(v,k,n)),a=function(e,t,n,i){var o,r,s,a,l,c={},d=e.dataTypes.slice();if(d[1])for(s in e.converters)c[s.toLowerCase()]=e.converters[s];for(r=d.shift();r;)if(e.responseFields[r]&&(n[e.responseFields[r]]=t),!l&&i&&e.dataFilter&&(t=e.dataFilter(t,e.dataType)),l=r,r=d.shift())if("*"===r)r=l;else if("*"!==l&&l!==r){if(!(s=c[l+" "+r]||c["* "+r]))for(o in c)if((a=o.split(" "))[1]===r&&(s=c[l+" "+a[0]]||c["* "+a[0]])){!0===s?s=c[o]:!0!==c[o]&&(r=a[0],d.unshift(a[1]));break}if(!0!==s)if(s&&e.throws)t=s(t);else try{t=s(t)}catch(e){return{state:"parsererror",error:s?e:"No conversion from "+l+" to "+r}}}return{state:"success",data:t}}(v,a,k,o),o?(v.ifModified&&((l=k.getResponseHeader("Last-Modified"))&&(C.lastModified[u]=l),(l=k.getResponseHeader("etag"))&&(C.etag[u]=l)),204===e||"HEAD"===v.type?c="nocontent":304===e?c="notmodified":(c=a.state,r=a.data,o=!(s=a.error))):(s=c,!e&&c||(c="error",e<0&&(e=0))),k.status=e,k.statusText=(t||c)+"",o?y.resolveWith(g,[r,c,k]):y.rejectWith(g,[k,c,s]),k.statusCode(b),b=void 0,h&&m.trigger(o?"ajaxSuccess":"ajaxError",[k,v,o?r:s]),w.fireWith(g,[k,c]),h&&(m.trigger("ajaxComplete",[k,v]),--C.active||C.event.trigger("ajaxStop")))}return k},getJSON:function(e,t,n){return C.get(e,t,n,"json")},getScript:function(e,t){return C.get(e,void 0,t,"script")}}),C.each(["get","post"],function(e,o){C[o]=function(e,t,n,i){return C.isFunction(t)&&(i=i||n,n=t,t=void 0),C.ajax(C.extend({url:e,type:o,dataType:i,data:t,success:n},C.isPlainObject(e)&&e))}}),C._evalUrl=function(e){return C.ajax({url:e,type:"GET",dataType:"script",async:!1,global:!1,throws:!0})},C.fn.extend({wrapAll:function(t){var e;return C.isFunction(t)?this.each(function(e){C(this).wrapAll(t.call(this,e))}):(this[0]&&(e=C(t,this[0].ownerDocument).eq(0).clone(!0),this[0].parentNode&&e.insertBefore(this[0]),e.map(function(){for(var e=this;e.firstElementChild;)e=e.firstElementChild;return e}).append(this)),this)},wrapInner:function(n){return C.isFunction(n)?this.each(function(e){C(this).wrapInner(n.call(this,e))}):this.each(function(){var e=C(this),t=e.contents();t.length?t.wrapAll(n):e.append(n)})},wrap:function(t){var n=C.isFunction(t);return this.each(function(e){C(this).wrapAll(n?t.call(this,e):t)})},unwrap:function(){return this.parent().each(function(){C.nodeName(this,"body")||C(this).replaceWith(this.childNodes)}).end()}}),C.expr.filters.hidden=function(e){return!C.expr.filters.visible(e)},C.expr.filters.visible=function(e){return 0<e.offsetWidth||0<e.offsetHeight||0<e.getClientRects().length};var Tt=/%20/g,Ct=/\[\]$/,Et=/\r?\n/g,$t=/^(?:submit|button|image|reset|file)$/i,At=/^(?:input|select|textarea|keygen)/i;function Nt(n,e,i,o){var t;if(C.isArray(e))C.each(e,function(e,t){i||Ct.test(n)?o(n,t):Nt(n+"["+("object"==typeof t&&null!=t?e:"")+"]",t,i,o)});else if(i||"object"!==C.type(e))o(n,e);else for(t in e)Nt(n+"["+t+"]",e[t],i,o)}C.param=function(e,t){var n,i=[],o=function(e,t){t=C.isFunction(t)?t():null==t?"":t,i[i.length]=encodeURIComponent(e)+"="+encodeURIComponent(t)};if(void 0===t&&(t=C.ajaxSettings&&C.ajaxSettings.traditional),C.isArray(e)||e.jquery&&!C.isPlainObject(e))C.each(e,function(){o(this.name,this.value)});else for(n in e)Nt(n,e[n],t,o);return i.join("&").replace(Tt,"+")},C.fn.extend({serialize:function(){return C.param(this.serializeArray())},serializeArray:function(){return this.map(function(){var e=C.prop(this,"elements");return e?C.makeArray(e):this}).filter(function(){var e=this.type;return this.name&&!C(this).is(":disabled")&&At.test(this.nodeName)&&!$t.test(e)&&(this.checked||!V.test(e))}).map(function(e,t){var n=C(this).val();return null==n?null:C.isArray(n)?C.map(n,function(e){return{name:t.name,value:e.replace(Et,"\r\n")}}):{name:t.name,value:n.replace(Et,"\r\n")}}).get()}}),C.ajaxSettings.xhr=function(){try{return new S.XMLHttpRequest}catch(e){}};var Lt={0:200,1223:204},Ht=C.ajaxSettings.xhr();g.cors=!!Ht&&"withCredentials"in Ht,g.ajax=Ht=!!Ht,C.ajaxTransport(function(o){var r,s;if(g.cors||Ht&&!o.crossDomain)return{send:function(e,t){var n,i=o.xhr();if(i.open(o.type,o.url,o.async,o.username,o.password),o.xhrFields)for(n in o.xhrFields)i[n]=o.xhrFields[n];for(n in o.mimeType&&i.overrideMimeType&&i.overrideMimeType(o.mimeType),o.crossDomain||e["X-Requested-With"]||(e["X-Requested-With"]="XMLHttpRequest"),e)i.setRequestHeader(n,e[n]);r=function(e){return function(){r&&(r=s=i.onload=i.onerror=i.onabort=i.onreadystatechange=null,"abort"===e?i.abort():"error"===e?"number"!=typeof i.status?t(0,"error"):t(i.status,i.statusText):t(Lt[i.status]||i.status,i.statusText,"text"!==(i.responseType||"text")||"string"!=typeof i.responseText?{binary:i.response}:{text:i.responseText},i.getAllResponseHeaders()))}},i.onload=r(),s=i.onerror=r("error"),void 0!==i.onabort?i.onabort=s:i.onreadystatechange=function(){4===i.readyState&&S.setTimeout(function(){r&&s()})},r=r("abort");try{i.send(o.hasContent&&o.data||null)}catch(e){if(r)throw e}},abort:function(){r&&r()}}}),C.ajaxSetup({accepts:{script:"text/javascript, application/javascript, application/ecmascript, application/x-ecmascript"},contents:{script:/\b(?:java|ecma)script\b/},converters:{"text script":function(e){return C.globalEval(e),e}}}),C.ajaxPrefilter("script",function(e){void 0===e.cache&&(e.cache=!1),e.crossDomain&&(e.type="GET")}),C.ajaxTransport("script",function(n){var i,o;if(n.crossDomain)return{send:function(e,t){i=C("<script>").prop({charset:n.scriptCharset,src:n.url}).on("load error",o=function(e){i.remove(),o=null,e&&t("error"===e.type?404:200,e.type)}),T.head.appendChild(i[0])},abort:function(){o&&o()}}});var jt=[],Ot=/(=)\?(?=&|$)|\?\?/;C.ajaxSetup({jsonp:"callback",jsonpCallback:function(){var e=jt.pop()||C.expando+"_"+dt++;return this[e]=!0,e}}),C.ajaxPrefilter("json jsonp",function(e,t,n){var i,o,r,s=!1!==e.jsonp&&(Ot.test(e.url)?"url":"string"==typeof e.data&&0===(e.contentType||"").indexOf("application/x-www-form-urlencoded")&&Ot.test(e.data)&&"data");if(s||"jsonp"===e.dataTypes[0])return i=e.jsonpCallback=C.isFunction(e.jsonpCallback)?e.jsonpCallback():e.jsonpCallback,s?e[s]=e[s].replace(Ot,"$1"+i):!1!==e.jsonp&&(e.url+=(ut.test(e.url)?"&":"?")+e.jsonp+"="+i),e.converters["script json"]=function(){return r||C.error(i+" was not called"),r[0]},e.dataTypes[0]="json",o=S[i],S[i]=function(){r=arguments},n.always(function(){void 0===o?C(S).removeProp(i):S[i]=o,e[i]&&(e.jsonpCallback=t.jsonpCallback,jt.push(i)),r&&C.isFunction(o)&&o(r[0]),r=o=void 0}),"script"}),C.parseHTML=function(e,t,n){if(!e||"string"!=typeof e)return null;"boolean"==typeof t&&(n=t,t=!1),t=t||T;var i=b.exec(e),o=!n&&[];return i?[t.createElement(i[1])]:(i=ne([e],t,o),o&&o.length&&C(o).remove(),C.merge([],i.childNodes))};var Dt=C.fn.load;function Pt(e){return C.isWindow(e)?e:9===e.nodeType&&e.defaultView}C.fn.load=function(e,t,n){if("string"!=typeof e&&Dt)return Dt.apply(this,arguments);var i,o,r,s=this,a=e.indexOf(" ");return-1<a&&(i=C.trim(e.slice(a)),e=e.slice(0,a)),C.isFunction(t)?(n=t,t=void 0):t&&"object"==typeof t&&(o="POST"),0<s.length&&C.ajax({url:e,type:o||"GET",dataType:"html",data:t}).done(function(e){r=arguments,s.html(i?C("<div>").append(C.parseHTML(e)).find(i):e)}).always(n&&function(e,t){s.each(function(){n.apply(this,r||[e.responseText,t,e])})}),this},C.each(["ajaxStart","ajaxStop","ajaxComplete","ajaxError","ajaxSuccess","ajaxSend"],function(e,t){C.fn[t]=function(e){return this.on(t,e)}}),C.expr.filters.animated=function(t){return C.grep(C.timers,function(e){return t===e.elem}).length},C.offset={setOffset:function(e,t,n){var i,o,r,s,a,l,c=C.css(e,"position"),d=C(e),u={};"static"===c&&(e.style.position="relative"),a=d.offset(),r=C.css(e,"top"),l=C.css(e,"left"),o=("absolute"===c||"fixed"===c)&&-1<(r+l).indexOf("auto")?(s=(i=d.position()).top,i.left):(s=parseFloat(r)||0,parseFloat(l)||0),C.isFunction(t)&&(t=t.call(e,n,C.extend({},a))),null!=t.top&&(u.top=t.top-a.top+s),null!=t.left&&(u.left=t.left-a.left+o),"using"in t?t.using.call(e,u):d.css(u)}},C.fn.extend({offset:function(t){if(arguments.length)return void 0===t?this:this.each(function(e){C.offset.setOffset(this,t,e)});var e,n,i=this[0],o={top:0,left:0},r=i&&i.ownerDocument;return r?(e=r.documentElement,C.contains(e,i)?(o=i.getBoundingClientRect(),n=Pt(r),{top:o.top+n.pageYOffset-e.clientTop,left:o.left+n.pageXOffset-e.clientLeft}):o):void 0},position:function(){if(this[0]){var e,t,n=this[0],i={top:0,left:0};return"fixed"===C.css(n,"position")?t=n.getBoundingClientRect():(e=this.offsetParent(),t=this.offset(),C.nodeName(e[0],"html")||(i=e.offset()),i.top+=C.css(e[0],"borderTopWidth",!0),i.left+=C.css(e[0],"borderLeftWidth",!0)),{top:t.top-i.top-C.css(n,"marginTop",!0),left:t.left-i.left-C.css(n,"marginLeft",!0)}}},offsetParent:function(){return this.map(function(){for(var e=this.offsetParent;e&&"static"===C.css(e,"position");)e=e.offsetParent;return e||Ne})}}),C.each({scrollLeft:"pageXOffset",scrollTop:"pageYOffset"},function(t,o){var r="pageYOffset"===o;C.fn[t]=function(e){return D(this,function(e,t,n){var i=Pt(e);if(void 0===n)return i?i[o]:e[t];i?i.scrollTo(r?i.pageXOffset:n,r?n:i.pageYOffset):e[t]=n},t,e,arguments.length)}}),C.each(["top","left"],function(e,n){C.cssHooks[n]=He(g.pixelPosition,function(e,t){if(t)return t=Le(e,n),Ee.test(t)?C(e).position()[n]+"px":t})}),C.each({Height:"height",Width:"width"},function(r,s){C.each({padding:"inner"+r,content:s,"":"outer"+r},function(i,e){C.fn[e]=function(e,t){var n=arguments.length&&(i||"boolean"!=typeof e),o=i||(!0===e||!0===t?"margin":"border");return D(this,function(e,t,n){var i;return C.isWindow(e)?e.document.documentElement["client"+r]:9===e.nodeType?(i=e.documentElement,Math.max(e.body["scroll"+r],i["scroll"+r],e.body["offset"+r],i["offset"+r],i["client"+r])):void 0===n?C.css(e,t,o):C.style(e,t,n,o)},s,n?e:void 0,n,null)}})}),C.fn.extend({bind:function(e,t,n){return this.on(e,null,t,n)},unbind:function(e,t){return this.off(e,null,t)},delegate:function(e,t,n,i){return this.on(t,e,n,i)},undelegate:function(e,t,n){return 1===arguments.length?this.off(e,"**"):this.off(t,e||"**",n)},size:function(){return this.length}}),C.fn.andSelf=C.fn.addBack,"function"==typeof define&&define.amd&&define("jquery",[],function(){return C});var Mt=S.jQuery,qt=S.$;return C.noConflict=function(e){return S.$===C&&(S.$=qt),e&&S.jQuery===C&&(S.jQuery=Mt),C},e||(S.jQuery=S.$=C),C}),function(e){"function"==typeof define&&define.amd?define([],e):"object"==typeof exports?module.exports=e():window.wNumb=e()}(function(){"use strict";var r=["decimals","thousand","mark","prefix","suffix","encoder","decoder","negativeBefore","negative","edit","undo"];function b(e){return e.split("").reverse().join("")}function v(e,t){return e.substring(0,t.length)===t}function s(e,t,n){if((e[t]||e[n])&&e[t]===e[n])throw new Error(t)}function x(e){return"number"==typeof e&&isFinite(e)}function n(e,t,n,i,o,r,s,a,l,c,d,u){var p,f,h,v,g,m=u,y="",w="";return r&&(u=r(u)),!!x(u)&&(!1!==e&&0===parseFloat(u.toFixed(e))&&(u=0),u<0&&(p=!0,u=Math.abs(u)),!1!==e&&(g=e,v=(v=u).toString().split("e"),u=(+((v=(v=Math.round(+(v[0]+"e"+(v[1]?+v[1]+g:g)))).toString().split("e"))[0]+"e"+(v[1]?+v[1]-g:-g))).toFixed(g)),-1!==(u=u.toString()).indexOf(".")?(h=(f=u.split("."))[0],n&&(y=n+f[1])):h=u,t&&(h=b((h=b(h).match(/.{1,3}/g)).join(b(t)))),p&&a&&(w+=a),i&&(w+=i),p&&l&&(w+=l),w+=h,w+=y,o&&(w+=o),c&&(w=c(w,m)),w)}function i(e,t,n,i,o,r,s,a,l,c,d,u){var p,f,h="";return d&&(u=d(u)),!(!u||"string"!=typeof u)&&(a&&v(u,a)&&(u=u.replace(a,""),p=!0),i&&v(u,i)&&(u=u.replace(i,"")),l&&v(u,l)&&(u=u.replace(l,""),p=!0),o&&(f=o,u.slice(-1*f.length)===f)&&(u=u.slice(0,-1*o.length)),t&&(u=u.split(t).join("")),n&&(u=u.replace(n,".")),p&&(h+="-"),""!==(h=(h+=u).replace(/[^0-9\.\-.]/g,""))&&(h=Number(h),s&&(h=s(h)),!!x(h)&&h))}function o(e,t,n){var i,o=[];for(i=0;i<r.length;i+=1)o.push(e[r[i]]);return o.push(n),t.apply("",o)}return function e(t){if(!(this instanceof e))return new e(t);"object"==typeof t&&(t=function(e){var t,n,i,o={};for(void 0===e.suffix&&(e.suffix=e.postfix),t=0;t<r.length;t+=1)if(void 0===(i=e[n=r[t]]))"negative"!==n||o.negativeBefore?"mark"===n&&"."!==o.thousand?o[n]=".":o[n]=!1:o[n]="-";else if("decimals"===n){if(!(0<=i&&i<8))throw new Error(n);o[n]=i}else if("encoder"===n||"decoder"===n||"edit"===n||"undo"===n){if("function"!=typeof i)throw new Error(n);o[n]=i}else{if("string"!=typeof i)throw new Error(n);o[n]=i}return s(o,"mark","thousand"),s(o,"prefix","negative"),s(o,"prefix","negativeBefore"),o}(t),this.to=function(e){return o(t,n,e)},this.from=function(e){return o(t,i,e)})}}),function(e){"function"==typeof define&&define.amd?define([],e):"object"==typeof exports?module.exports=e():window.noUiSlider=e()}(function(){"use strict";var J="12.1.0";function a(e){return null!=e}function K(e){e.preventDefault()}function o(e){return"number"==typeof e&&!isNaN(e)&&isFinite(e)}function Z(e,t,n){0<n&&(ne(e,t),setTimeout(function(){ie(e,t)},n))}function ee(e){return Math.max(Math.min(e,100),0)}function te(e){return Array.isArray(e)?e:[e]}function t(e){var t=(e=String(e)).split(".");return 1<t.length?t[1].length:0}function ne(e,t){e.classList?e.classList.add(t):e.className+=" "+t}function ie(e,t){e.classList?e.classList.remove(t):e.className=e.className.replace(new RegExp("(^|\\b)"+t.split(" ").join("|")+"(\\b|$)","gi")," ")}function oe(e){var t=void 0!==window.pageXOffset,n="CSS1Compat"===(e.compatMode||"");return{x:t?window.pageXOffset:n?e.documentElement.scrollLeft:e.body.scrollLeft,y:t?window.pageYOffset:n?e.documentElement.scrollTop:e.body.scrollTop}}function d(e,t){return 100/(t-e)}function u(e,t){return 100*t/(e[1]-e[0])}function p(e,t){for(var n=1;e>=t[n];)n+=1;return n}function r(e,t,n){var i;if("number"==typeof t&&(t=[t]),!Array.isArray(t))throw new Error("noUiSlider ("+J+"): 'range' contains invalid value.");if(!o(i="min"===e?0:"max"===e?100:parseFloat(e))||!o(t[0]))throw new Error("noUiSlider ("+J+"): 'range' value isn't numeric.");n.xPct.push(i),n.xVal.push(t[0]),i?n.xSteps.push(!isNaN(t[1])&&t[1]):isNaN(t[1])||(n.xSteps[0]=t[1]),n.xHighestCompleteStep.push(0)}function s(e,t,n){if(!t)return!0;n.xSteps[e]=u([n.xVal[e],n.xVal[e+1]],t)/d(n.xPct[e],n.xPct[e+1]);var i=(n.xVal[e+1]-n.xVal[e])/n.xNumSteps[e],o=Math.ceil(Number(i.toFixed(3))-1),r=n.xVal[e]+n.xNumSteps[e]*o;n.xHighestCompleteStep[e]=r}function n(e,t,n){var i;this.xPct=[],this.xVal=[],this.xSteps=[n||!1],this.xNumSteps=[!1],this.xHighestCompleteStep=[],this.snap=t;var o=[];for(i in e)e.hasOwnProperty(i)&&o.push([e[i],i]);for(o.length&&"object"==typeof o[0][0]?o.sort(function(e,t){return e[0][0]-t[0][0]}):o.sort(function(e,t){return e[0]-t[0]}),i=0;i<o.length;i++)r(o[i][1],o[i][0],this);for(this.xNumSteps=this.xSteps.slice(0),i=0;i<this.xNumSteps.length;i++)s(i,this.xNumSteps[i],this)}n.prototype.getMargin=function(e){var t=this.xNumSteps[0];if(t&&e/t%1!=0)throw new Error("noUiSlider ("+J+"): 'limit', 'margin' and 'padding' must be divisible by step.");return 2===this.xPct.length&&u(this.xVal,e)},n.prototype.toStepping=function(e){return function(e,t,n){if(n>=e.slice(-1)[0])return 100;var i,o,r=p(n,e),s=e[r-1],a=e[r],l=t[r-1],c=t[r];return l+(o=n,u(i=[s,a],i[0]<0?o+Math.abs(i[0]):o-i[0])/d(l,c))}(this.xVal,this.xPct,e)},n.prototype.fromStepping=function(e){return function(e,t,n){if(100<=n)return e.slice(-1)[0];var i,o=p(n,t),r=e[o-1],s=e[o],a=t[o-1];return i=[r,s],(n-a)*d(a,t[o])*(i[1]-i[0])/100+i[0]}(this.xVal,this.xPct,e)},n.prototype.getStep=function(e){return function(e,t,n,i){if(100===i)return i;var o,r,s=p(i,e),a=e[s-1],l=e[s];return n?(l-a)/2<i-a?l:a:t[s-1]?e[s-1]+(o=i-e[s-1],r=t[s-1],Math.round(o/r)*r):i}(this.xPct,this.xSteps,this.snap,e)},n.prototype.getNearbySteps=function(e){var t=p(e,this.xPct);return{stepBefore:{startValue:this.xVal[t-2],step:this.xNumSteps[t-2],highestStep:this.xHighestCompleteStep[t-2]},thisStep:{startValue:this.xVal[t-1],step:this.xNumSteps[t-1],highestStep:this.xHighestCompleteStep[t-1]},stepAfter:{startValue:this.xVal[t],step:this.xNumSteps[t],highestStep:this.xHighestCompleteStep[t]}}},n.prototype.countStepDecimals=function(){var e=this.xNumSteps.map(t);return Math.max.apply(null,e)},n.prototype.convert=function(e){return this.getStep(this.toStepping(e))};var l={to:function(e){return void 0!==e&&e.toFixed(2)},from:Number};function i(e){if("object"==typeof(t=e)&&"function"==typeof t.to&&"function"==typeof t.from)return!0;var t;throw new Error("noUiSlider ("+J+"): 'format' requires 'to' and 'from' methods.")}function c(e,t){if(!o(t))throw new Error("noUiSlider ("+J+"): 'step' is not numeric.");e.singleStep=t}function f(e,t){if("object"!=typeof t||Array.isArray(t))throw new Error("noUiSlider ("+J+"): 'range' is not an object.");if(void 0===t.min||void 0===t.max)throw new Error("noUiSlider ("+J+"): Missing 'min' or 'max' in 'range'.");if(t.min===t.max)throw new Error("noUiSlider ("+J+"): 'range' 'min' and 'max' cannot be equal.");e.spectrum=new n(t,e.snap,e.singleStep)}function h(e,t){if(t=te(t),!Array.isArray(t)||!t.length)throw new Error("noUiSlider ("+J+"): 'start' option is incorrect.");e.handles=t.length,e.start=t}function v(e,t){if("boolean"!=typeof(e.snap=t))throw new Error("noUiSlider ("+J+"): 'snap' option must be a boolean.")}function g(e,t){if("boolean"!=typeof(e.animate=t))throw new Error("noUiSlider ("+J+"): 'animate' option must be a boolean.")}function m(e,t){if("number"!=typeof(e.animationDuration=t))throw new Error("noUiSlider ("+J+"): 'animationDuration' option must be a number.")}function y(e,t){var n,i=[!1];if("lower"===t?t=[!0,!1]:"upper"===t&&(t=[!1,!0]),!0===t||!1===t){for(n=1;n<e.handles;n++)i.push(t);i.push(!1)}else{if(!Array.isArray(t)||!t.length||t.length!==e.handles+1)throw new Error("noUiSlider ("+J+"): 'connect' option doesn't match handle count.");i=t}e.connect=i}function w(e,t){switch(t){case"horizontal":e.ort=0;break;case"vertical":e.ort=1;break;default:throw new Error("noUiSlider ("+J+"): 'orientation' option is invalid.")}}function b(e,t){if(!o(t))throw new Error("noUiSlider ("+J+"): 'margin' option must be numeric.");if(0!==t&&(e.margin=e.spectrum.getMargin(t),!e.margin))throw new Error("noUiSlider ("+J+"): 'margin' option is only supported on linear sliders.")}function x(e,t){if(!o(t))throw new Error("noUiSlider ("+J+"): 'limit' option must be numeric.");if(e.limit=e.spectrum.getMargin(t),!e.limit||e.handles<2)throw new Error("noUiSlider ("+J+"): 'limit' option is only supported on linear sliders with 2 or more handles.")}function k(e,t){if(!o(t)&&!Array.isArray(t))throw new Error("noUiSlider ("+J+"): 'padding' option must be numeric or array of exactly 2 numbers.");if(Array.isArray(t)&&2!==t.length&&!o(t[0])&&!o(t[1]))throw new Error("noUiSlider ("+J+"): 'padding' option must be numeric or array of exactly 2 numbers.");if(0!==t){if(Array.isArray(t)||(t=[t,t]),!(e.padding=[e.spectrum.getMargin(t[0]),e.spectrum.getMargin(t[1])])===e.padding[0]||!1===e.padding[1])throw new Error("noUiSlider ("+J+"): 'padding' option is only supported on linear sliders.");if(e.padding[0]<0||e.padding[1]<0)throw new Error("noUiSlider ("+J+"): 'padding' option must be a positive number(s).");if(100<=e.padding[0]+e.padding[1])throw new Error("noUiSlider ("+J+"): 'padding' option must not exceed 100% of the range.")}}function S(e,t){switch(t){case"ltr":e.dir=0;break;case"rtl":e.dir=1;break;default:throw new Error("noUiSlider ("+J+"): 'direction' option was not recognized.")}}function T(e,t){if("string"!=typeof t)throw new Error("noUiSlider ("+J+"): 'behaviour' must be a string containing options.");var n=0<=t.indexOf("tap"),i=0<=t.indexOf("drag"),o=0<=t.indexOf("fixed"),r=0<=t.indexOf("snap"),s=0<=t.indexOf("hover"),a=0<=t.indexOf("unconstrained");if(o){if(2!==e.handles)throw new Error("noUiSlider ("+J+"): 'fixed' behaviour must be used with 2 handles");b(e,e.start[1]-e.start[0])}if(a&&(e.margin||e.limit))throw new Error("noUiSlider ("+J+"): 'unconstrained' behaviour cannot be used with margin or limit");e.events={tap:n||r,drag:i,fixed:o,snap:r,hover:s,unconstrained:a}}function C(e,t){if(!1!==t)if(!0===t){e.tooltips=[];for(var n=0;n<e.handles;n++)e.tooltips.push(!0)}else{if(e.tooltips=te(t),e.tooltips.length!==e.handles)throw new Error("noUiSlider ("+J+"): must pass a formatter for all handles.");e.tooltips.forEach(function(e){if("boolean"!=typeof e&&("object"!=typeof e||"function"!=typeof e.to))throw new Error("noUiSlider ("+J+"): 'tooltips' must be passed a formatter or 'false'.")})}}function E(e,t){i(e.ariaFormat=t)}function $(e,t){i(e.format=t)}function A(e,t){if("boolean"!=typeof(e.keyboardSupport=t))throw new Error("noUiSlider ("+J+"): 'keyboardSupport' option must be a boolean.")}function N(e,t){e.documentElement=t}function L(e,t){if("string"!=typeof t&&!1!==t)throw new Error("noUiSlider ("+J+"): 'cssPrefix' must be a string or `false`.");e.cssPrefix=t}function H(e,t){if("object"!=typeof t)throw new Error("noUiSlider ("+J+"): 'cssClasses' must be an object.");if("string"==typeof e.cssPrefix)for(var n in e.cssClasses={},t)t.hasOwnProperty(n)&&(e.cssClasses[n]=e.cssPrefix+t[n]);else e.cssClasses=t}function re(t){var n={margin:0,limit:0,padding:0,animate:!0,animationDuration:300,ariaFormat:l,format:l},i={step:{r:!1,t:c},start:{r:!0,t:h},connect:{r:!0,t:y},direction:{r:!0,t:S},snap:{r:!1,t:v},animate:{r:!1,t:g},animationDuration:{r:!1,t:m},range:{r:!0,t:f},orientation:{r:!1,t:w},margin:{r:!1,t:b},limit:{r:!1,t:x},padding:{r:!1,t:k},behaviour:{r:!0,t:T},ariaFormat:{r:!1,t:E},format:{r:!1,t:$},tooltips:{r:!1,t:C},keyboardSupport:{r:!0,t:A},documentElement:{r:!1,t:N},cssPrefix:{r:!0,t:L},cssClasses:{r:!0,t:H}},o={connect:!1,direction:"ltr",behaviour:"tap",orientation:"horizontal",keyboardSupport:!0,cssPrefix:"noUi-",cssClasses:{target:"target",base:"base",origin:"origin",handle:"handle",handleLower:"handle-lower",handleUpper:"handle-upper",horizontal:"horizontal",vertical:"vertical",background:"background",connect:"connect",connects:"connects",ltr:"ltr",rtl:"rtl",draggable:"draggable",drag:"state-drag",tap:"state-tap",active:"active",tooltip:"tooltip",pips:"pips",pipsHorizontal:"pips-horizontal",pipsVertical:"pips-vertical",marker:"marker",markerHorizontal:"marker-horizontal",markerVertical:"marker-vertical",markerNormal:"marker-normal",markerLarge:"marker-large",markerSub:"marker-sub",value:"value",valueHorizontal:"value-horizontal",valueVertical:"value-vertical",valueNormal:"value-normal",valueLarge:"value-large",valueSub:"value-sub"}};t.format&&!t.ariaFormat&&(t.ariaFormat=t.format),Object.keys(i).forEach(function(e){if(!a(t[e])&&void 0===o[e]){if(i[e].r)throw new Error("noUiSlider ("+J+"): '"+e+"' is required.");return!0}i[e].t(n,a(t[e])?t[e]:o[e])}),n.pips=t.pips;var e=document.createElement("div"),r=void 0!==e.style.msTransform,s=void 0!==e.style.transform;return n.transformRule=s?"transform":r?"msTransform":"webkitTransform",n.style=[["left","top"],["right","bottom"]][n.dir][n.ort],n}function j(e,p,r){var l,c,a,s,d,t,u,o,f=window.navigator.pointerEnabled?{start:"pointerdown",move:"pointermove",end:"pointerup"}:window.navigator.msPointerEnabled?{start:"MSPointerDown",move:"MSPointerMove",end:"MSPointerUp"}:{start:"mousedown touchstart",move:"mousemove touchmove",end:"mouseup touchend"},h=window.CSS&&CSS.supports&&CSS.supports("touch-action","none")&&function(){var e=!1;try{var t=Object.defineProperty({},"passive",{get:function(){e=!0}});window.addEventListener("test",null,t)}catch(e){}return e}(),k=e,v=[],g=[],m=0,S=p.spectrum,y=[],w={},T=e.ownerDocument,b=p.documentElement||T.documentElement,x=T.body,C=-1,E=0,$=1,A=2,N="rtl"===T.dir||1===p.ort?0:100;function L(e,t){var n=T.createElement("div");return t&&ne(n,t),e.appendChild(n),n}function H(e,t){return!!t&&L(e,p.cssClasses.connect)}function j(){var e;d&&((e=d).parentElement.removeChild(e),d=null)}function O(e){j();var v,g,m,y,t,n,w,b,x,i=e.mode,o=e.density||1,r=e.filter||!1,s=function(e,t,n){if("range"===e||"steps"===e)return S.xVal;if("count"===e){if(t<2)throw new Error("noUiSlider ("+J+"): 'values' (>= 2) required for mode 'count'.");var i=t-1,o=100/i;for(t=[];i--;)t[i]=i*o;t.push(100),e="positions"}return"positions"===e?t.map(function(e){return S.fromStepping(n?S.getStep(e):e)}):"values"===e?n?t.map(function(e){return S.fromStepping(S.getStep(S.toStepping(e)))}):t:void 0}(i,e.values||!1,e.stepped||!1),a=(v=o,g=i,m=s,y={},t=S.xVal[0],n=S.xVal[S.xVal.length-1],b=w=!1,x=0,(m=m.slice().sort(function(e,t){return e-t}).filter(function(e){return!this[e]&&(this[e]=!0)},{}))[0]!==t&&(m.unshift(t),w=!0),m[m.length-1]!==n&&(m.push(n),b=!0),m.forEach(function(e,t){var n,i,o,r,s,a,l,c,d,u,p=e,f=m[t+1],h="steps"===g;if(h&&(n=S.xNumSteps[t]),n||(n=f-p),!1!==p&&void 0!==f)for(n=Math.max(n,1e-7),i=p;i<=f;i=(i+n).toFixed(7)/1){for(c=(s=(r=S.toStepping(i))-x)/v,u=s/(d=Math.round(c)),o=1;o<=d;o+=1)y[(a=x+o*u).toFixed(5)]=[S.fromStepping(a),0];l=-1<m.indexOf(i)?$:h?A:E,!t&&w&&(l=0),i===f&&b||(y[r.toFixed(5)]=[i,l]),x=r}}),y),l=e.format||{to:Math.round};return d=k.appendChild(function(t,o,r){var s=T.createElement("div"),a=[];a[E]=p.cssClasses.valueNormal,a[$]=p.cssClasses.valueLarge,a[A]=p.cssClasses.valueSub;var l=[];l[E]=p.cssClasses.markerNormal,l[$]=p.cssClasses.markerLarge,l[A]=p.cssClasses.markerSub;var c=[p.cssClasses.valueHorizontal,p.cssClasses.valueVertical],d=[p.cssClasses.markerHorizontal,p.cssClasses.markerVertical];function u(e,t){var n=t===p.cssClasses.value,i=n?a:l;return t+" "+(n?c:d)[p.ort]+" "+i[e]}return ne(s,p.cssClasses.pips),ne(s,0===p.ort?p.cssClasses.pipsHorizontal:p.cssClasses.pipsVertical),Object.keys(t).forEach(function(e){!function(e,t,n){if((n=o?o(t,n):n)!==C){var i=L(s,!1);i.className=u(n,p.cssClasses.marker),i.style[p.style]=e+"%",E<n&&((i=L(s,!1)).className=u(n,p.cssClasses.value),i.setAttribute("data-value",t),i.style[p.style]=e+"%",i.innerHTML=r.to(t))}}(e,t[e][0],t[e][1])}),s}(a,r,l))}function D(){var e=l.getBoundingClientRect(),t="offset"+["Width","Height"][p.ort];return 0===p.ort?e.width||l[t]:e.height||l[t]}function P(i,o,r,s){var t=function(e){return!!(e=function(e,t,n){var i,o,r=0===e.type.indexOf("touch"),s=0===e.type.indexOf("mouse"),a=0===e.type.indexOf("pointer");if(0===e.type.indexOf("MSPointer")&&(a=!0),r){var l=function(e){return e.target===n||n.contains(e.target)};if("touchstart"===e.type){var c=Array.prototype.filter.call(e.touches,l);if(1<c.length)return!1;i=c[0].pageX,o=c[0].pageY}else{var d=Array.prototype.find.call(e.changedTouches,l);if(!d)return!1;i=d.pageX,o=d.pageY}}return t=t||oe(T),(s||a)&&(i=e.clientX+t.x,o=e.clientY+t.y),e.pageOffset=t,e.points=[i,o],e.cursor=s||a,e}(e,s.pageOffset,s.target||o))&&!(k.hasAttribute("disabled")&&!s.doNotReject)&&(t=k,n=p.cssClasses.tap,!((t.classList?t.classList.contains(n):new RegExp("\\b"+n+"\\b").test(t.className))&&!s.doNotReject)&&!(i===f.start&&void 0!==e.buttons&&1<e.buttons)&&(!s.hover||!e.buttons)&&(h||e.preventDefault(),e.calcPoint=e.points[p.ort],void r(e,s)));var t,n},n=[];return i.split(" ").forEach(function(e){o.addEventListener(e,t,!!h&&{passive:!0}),n.push([e,t])}),n}function M(e){var t,n,i,o,r,s,a=100*(e-(t=l,n=p.ort,i=t.getBoundingClientRect(),r=(o=t.ownerDocument).documentElement,s=oe(o),/webkit.*Chrome.*Mobile/i.test(navigator.userAgent)&&(s.x=0),n?i.top+s.y-r.clientTop:i.left+s.x-r.clientLeft))/D();return a=ee(a),p.dir?100-a:a}function q(e,t){"mouseout"===e.type&&"HTML"===e.target.nodeName&&null===e.relatedTarget&&z(e,t)}function _(e,t){if(-1===navigator.appVersion.indexOf("MSIE 9")&&0===e.buttons&&0!==t.buttonsProperty)return z(e,t);var n=(p.dir?-1:1)*(e.calcPoint-t.startCalcPoint);i(0<n,100*n/t.baseSize,t.locations,t.handleNumbers)}function z(e,t){t.handle&&(ie(t.handle,p.cssClasses.active),m-=1),t.listeners.forEach(function(e){b.removeEventListener(e[0],e[1])}),0===m&&(ie(k,p.cssClasses.drag),X(),e.cursor&&(x.style.cursor="",x.removeEventListener("selectstart",K))),t.handleNumbers.forEach(function(e){I("change",e),I("set",e),I("end",e)})}function F(e,t){var n;if(1===t.handleNumbers.length){var i=c[t.handleNumbers[0]];if(i.hasAttribute("disabled"))return!1;n=i.children[0],m+=1,ne(n,p.cssClasses.active)}e.stopPropagation();var o=[],r=P(f.move,b,_,{target:e.target,handle:n,listeners:o,startCalcPoint:e.calcPoint,baseSize:D(),pageOffset:e.pageOffset,handleNumbers:t.handleNumbers,buttonsProperty:e.buttons,locations:v.slice()}),s=P(f.end,b,z,{target:e.target,handle:n,listeners:o,doNotReject:!0,handleNumbers:t.handleNumbers}),a=P("mouseout",b,q,{target:e.target,handle:n,listeners:o,doNotReject:!0,handleNumbers:t.handleNumbers});o.push.apply(o,r.concat(s,a)),e.cursor&&(x.style.cursor=getComputedStyle(e.target).cursor,1<c.length&&ne(k,p.cssClasses.drag),x.addEventListener("selectstart",K,!1)),t.handleNumbers.forEach(function(e){I("start",e)})}function n(e,t){w[e]=w[e]||[],w[e].push(t),"update"===e.split(".")[0]&&c.forEach(function(e,t){I("update",t)})}function I(n,i,o){Object.keys(w).forEach(function(e){var t=e.split(".")[0];n===t&&w[e].forEach(function(e){e.call(s,y.map(p.format.to),i,y.slice(),o||!1,v.slice())})})}function W(e){return e+"%"}function U(e,t,n,i,o,r){return 1<c.length&&!p.events.unconstrained&&(i&&0<t&&(n=Math.max(n,e[t-1]+p.margin)),o&&t<c.length-1&&(n=Math.min(n,e[t+1]-p.margin))),1<c.length&&p.limit&&(i&&0<t&&(n=Math.min(n,e[t-1]+p.limit)),o&&t<c.length-1&&(n=Math.max(n,e[t+1]-p.limit))),p.padding&&(0===t&&(n=Math.max(n,p.padding[0])),t===c.length-1&&(n=Math.min(n,100-p.padding[1]))),!((n=ee(n=S.getStep(n)))===e[t]&&!r)&&n}function R(e,t){var n=p.ort;return(n?t:e)+", "+(n?e:t)}function i(e,i,n,t){var o=n.slice(),r=[!e,e],s=[e,!e];t=t.slice(),e&&t.reverse(),1<t.length?t.forEach(function(e,t){var n=U(o,e,o[e]+i,r[t],s[t],!1);!1===n?i=0:(i=n-o[e],o[e]=n)}):r=s=[!0];var a=!1;t.forEach(function(e,t){a=V(e,n[e]+i,r[t],s[t])||a}),a&&t.forEach(function(e){I("update",e),I("slide",e)})}function B(e,t){return p.dir?100-e-t:e}function X(){g.forEach(function(e){var t=50<v[e]?-1:1,n=3+(c.length+t*e);c[e].style.zIndex=n})}function V(e,t,n,i){return!1!==(t=U(v,e,t,n,i,!1))&&(function(e,t){v[e]=t,y[e]=S.fromStepping(t);var n="translate("+R(W(B(t,0)-N),"0")+")";c[e].style[p.transformRule]=n,Y(e),Y(e+1)}(e,t),!0)}function Y(e){if(a[e]){var t=0,n=100;0!==e&&(t=v[e-1]),e!==a.length-1&&(n=v[e]);var i=n-t,o="translate("+R(W(B(t,i)),"0")+")",r="scale("+R(i/100,"1")+")";a[e].style[p.transformRule]=o+" "+r}}function G(e,t){var i=te(e),n=void 0===v[0];t=void 0===t||!!t,p.animate&&!n&&Z(k,p.cssClasses.tap,p.animationDuration),g.forEach(function(e){var t,n;V(e,null===(t=i[n=e])||!1===t||void 0===t?v[n]:("number"==typeof t&&(t=String(t)),t=p.format.from(t),!1===(t=S.toStepping(t))||isNaN(t)?v[n]:t),!0,!1)}),g.forEach(function(e){V(e,v[e],!0,!0)}),X(),g.forEach(function(e){I("update",e),null!==i[e]&&t&&I("set",e)})}function Q(){var e=y.map(p.format.to);return 1===e.length?e[0]:e}return ne(t=k,p.cssClasses.target),0===p.dir?ne(t,p.cssClasses.ltr):ne(t,p.cssClasses.rtl),0===p.ort?ne(t,p.cssClasses.horizontal):ne(t,p.cssClasses.vertical),l=L(t,p.cssClasses.base),function(e,t){var n,i,o,r=L(t,p.cssClasses.connects);c=[],(a=[]).push(H(r,e[0]));for(var s=0;s<p.handles;s++)c.push((n=s,o=void 0,(o=L(i=L(t,p.cssClasses.origin),p.cssClasses.handle)).setAttribute("data-handle",n),p.keyboardSupport&&o.setAttribute("tabindex","0"),o.setAttribute("role","slider"),o.setAttribute("aria-orientation",p.ort?"vertical":"horizontal"),0===n?ne(o,p.cssClasses.handleLower):n===p.handles-1&&ne(o,p.cssClasses.handleUpper),i)),g[s]=s,a.push(H(r,e[s+1]))}(p.connect,l),(u=p.events).fixed||c.forEach(function(e,t){P(f.start,e.children[0],F,{handleNumbers:[t]})}),u.tap&&P(f.start,l,function(e){e.stopPropagation();var i,o,r,t=M(e.calcPoint),n=(i=t,r=!(o=100),c.forEach(function(e,t){if(!e.hasAttribute("disabled")){var n=Math.abs(v[t]-i);(n<o||100===n&&100===o)&&(r=t,o=n)}}),r);if(!1===n)return!1;p.events.snap||Z(k,p.cssClasses.tap,p.animationDuration),V(n,t,!0,!0),X(),I("slide",n,!0),I("update",n,!0),I("change",n,!0),I("set",n,!0),p.events.snap&&F(e,{handleNumbers:[n]})},{}),u.hover&&P(f.move,l,function(e){var t=M(e.calcPoint),n=S.getStep(t),i=S.fromStepping(n);Object.keys(w).forEach(function(e){"hover"===e.split(".")[0]&&w[e].forEach(function(e){e.call(s,i)})})},{hover:!0}),u.drag&&a.forEach(function(e,t){if(!1!==e&&0!==t&&t!==a.length-1){var n=c[t-1],i=c[t],o=[e];ne(e,p.cssClasses.draggable),u.fixed&&(o.push(n.children[0]),o.push(i.children[0])),o.forEach(function(e){P(f.start,e,F,{handles:[n,i],handleNumbers:[t-1,t]})})}}),G(p.start),s={destroy:function(){for(var e in p.cssClasses)p.cssClasses.hasOwnProperty(e)&&ie(k,p.cssClasses[e]);for(;k.firstChild;)k.removeChild(k.firstChild);delete k.noUiSlider},steps:function(){return v.map(function(e,t){var n=S.getNearbySteps(e),i=y[t],o=n.thisStep.step,r=null;!1!==o&&i+o>n.stepAfter.startValue&&(o=n.stepAfter.startValue-i),r=i>n.thisStep.startValue?n.thisStep.step:!1!==n.stepBefore.step&&i-n.stepBefore.highestStep,100===e?o=null:0===e&&(r=null);var s=S.countStepDecimals();return null!==o&&!1!==o&&(o=Number(o.toFixed(s))),null!==r&&!1!==r&&(r=Number(r.toFixed(s))),[r,o]})},on:n,off:function(e){var i=e&&e.split(".")[0],o=i&&e.substring(i.length);Object.keys(w).forEach(function(e){var t=e.split(".")[0],n=e.substring(t.length);i&&i!==t||o&&o!==n||delete w[e]})},get:Q,set:G,setHandle:function(e,t,n){var i=[];if(!(0<=(e=Number(e))&&e<g.length))throw new Error("noUiSlider ("+J+"): invalid handle number, got: "+e);for(var o=0;o<g.length;o++)i[o]=null;i[e]=t,G(i,n)},reset:function(e){G(p.start,e)},__moveHandles:function(e,t,n){i(e,t,v,n)},options:r,updateOptions:function(t,e){var n=Q(),i=["margin","limit","padding","range","animate","snap","step","format"];i.forEach(function(e){void 0!==t[e]&&(r[e]=t[e])});var o=re(r);i.forEach(function(e){void 0!==t[e]&&(p[e]=o[e])}),S=o.spectrum,p.margin=o.margin,p.limit=o.limit,p.padding=o.padding,p.pips&&O(p.pips),v=[],G(t.start||n,e)},target:k,removePips:j,pips:O},p.pips&&O(p.pips),p.tooltips&&(o=c.map(function(e,t){return!!p.tooltips[t]&&L(e.firstChild,p.cssClasses.tooltip)}),n("update",function(e,t,n){if(o[t]){var i=e[t];!0!==p.tooltips[t]&&(i=p.tooltips[t].to(n[t])),o[t].innerHTML=i}})),n("update",function(e,t,s,n,a){g.forEach(function(e){var t=c[e],n=U(v,e,0,!0,!0,!0),i=U(v,e,100,!0,!0,!0),o=a[e],r=p.ariaFormat.to(s[e]);n=S.fromStepping(n).toFixed(1),i=S.fromStepping(i).toFixed(1),o=S.fromStepping(o).toFixed(1),t.children[0].setAttribute("aria-valuemin",n),t.children[0].setAttribute("aria-valuemax",i),t.children[0].setAttribute("aria-valuenow",o),t.children[0].setAttribute("aria-valuetext",r)})}),s}return{__spectrum:n,version:J,create:function(e,t){if(!e||!e.nodeName)throw new Error("noUiSlider ("+J+"): create requires a single element, got: "+e);if(e.noUiSlider)throw new Error("noUiSlider ("+J+"): Slider was already initialized.");var n=j(e,re(t),t);return e.noUiSlider=n}}}),function(i){"use strict";i.fn.exists=function(){return 0!==this.length};var n=function(e,t){for(var n in this.options={source:void 0,start:void 0,end:void 0,keyControl:!0,content:void 0,theme:{container:e,content:".slick-content",currentNo:".current-no",totalNo:".total",next:".next",prev:".prev"}},this.options)this.options.hasOwnProperty(n)&&"theme"!==n&&(this.options[n]=void 0!==t[n]?t[n]:this.options[n]);if(void 0!==t.theme)for(var i in this.options.theme)this.options.theme.hasOwnProperty(i)&&(this.options.theme[i]=void 0!==t.theme[i]?t.theme[i]:this.options.theme[i]);this.options.content=this.options.theme.container+" "+this.options.theme.content,this.state={current:this.options.start-1,start:this.options.start,end:this.options.end,slide:{current:0,difference:this.options.start-1,total:this.options.end-this.options.start+1,maxHit:0}},this.init.apply(this)},e=n.prototype;e.hooks={next:function(){var e=this;if(e.state.slide.current<e.state.slide.total){var t=++e.state.slide.current+e.state.slide.difference;e.hooks.setSlide.apply(this,[t])}},prev:function(){if(1<this.state.slide.current){var e=--this.state.slide.current+this.state.slide.difference;this.hooks.setSlide.apply(this,[e])}},setSlide:function(e){var t=this,n=t.hooks.slideStatus.apply(t,[e]);return t.state.slide.current=e-t.state.slide.difference,1===t.state.slide.current&&i(t.options.theme.container).animate({opacity:"1"},500),i(t.options.theme.container+" .skip"+t.options.theme.currentNo).is(":input")?i(t.options.theme.container+" "+t.options.theme.currentNo).val(t.state.slide.current):(i(t.options.theme.container+" .skip").val(t.state.slide.current),i(t.options.theme.container+" "+t.options.theme.currentNo).html(t.state.slide.current)),1===n?(i(t.options.content+" img.current").removeClass("current").addClass("cached-slide").hide(),i(t.options.content+" img[data-slide="+e+"]").removeClass("cached-slide").addClass("current").show(),t.state.current=e,i(t.options.theme.container+" .length").width(100*t.state.slide.current/t.state.slide.total+"%"),void t.hooks.getSlide.apply(t,[e+1])):void(2===n?t.hooks.slideSwitch.apply(this,[e]):0===n&&(i(t.options.content+" img.loading").off("load.slideSwitch").remove(),t.hooks.getSlide.apply(t,[e]),t.hooks.slideSwitch.apply(this,[e])))},getSlide:function(e){var t=this;0===t.hooks.slideStatus.apply(this,[e])&&e<=t.state.end&&(i(t.options.content).append('<img src="'+t.hooks.imagePath.apply(t,[e])+'" data-slide='+e+' class="loading">'),i(t.options.content+" img.loading").hide(),i(t.options.content+" img.loading").load(function(){i(this).removeClass("loading").addClass("cached-slide")}))},slideSwitch:function(e){var t=this;i(t.options.content+" img[data-slide="+e+"]").on("load.slideSwitch",function(){i(t.options.content+" img.current").removeClass("current").addClass("cached-slide").hide(),i(this).removeClass("cached-slide").addClass("current").show(),t.state.current=e,i(t.options.theme.container+" .length").width(100*(e+1)/t.state.slide.total+"%"),t.hooks.getSlide.apply(t,[e+1])})},slideStatus:function(e){var t=this.options.content+" img[data-slide="+e+"]";return i(t).exists()?i(t).hasClass("loading")?2:1:0},imagePath:function(e){var t=this.options.source.split("*");return t[0]+e+t[1]},skip:function(e){if(i.isNumeric(e)){var t=this,n=parseInt(e)+t.state.slide.difference;t.hooks.getSlide.apply(t,[n]),t.hooks.setSlide.apply(t,[n])}}},e.init=function(){var t=this;i(t.options.theme.container).css("opacity","0"),"string"==typeof t.options.source&&t.hooks.next.apply(t),i(t.options.theme.container+" "+t.options.theme.next).click(function(e){e.preventDefault(),t.hooks.next.apply(t)}),i(t.options.theme.container+" "+t.options.theme.prev).click(function(e){e.preventDefault(),t.hooks.prev.apply(t)}),i(t.options.theme.container+" "+t.options.theme.totalNo).html(t.state.end-t.state.start+1),t.options.keyControl&&i(document).keyup(function(e){39!==e.keyCode||i("input:focus").exists()||t.hooks.next.apply(t),37!==e.keyCode||i("input:focus").exists()||t.hooks.prev.apply(t)}),i(t.options.theme.container+" .skip").keypress(function(e){13===e.keyCode&&(t.hooks.skip.apply(t,[i(this).val()]),i(this).blur())})},(window.Slick=n).next=function(e){e.constructor===n&&e.hooks.next.apply(e)},n.prev=function(e){e.constructor===n&&e.hooks.prev.apply(e)},n.skip=function(e,t){e.constructor===n&&e.hooks.skip.apply(e,[t])}}(jQuery,window),function(r){r.fn.niceSelect=function(e){function i(e){e.after(r("<div></div>").addClass("nice-select").addClass(e.attr("class")||"").addClass(e.attr("disabled")?"disabled":"").attr("tabindex",e.attr("disabled")?null:"0").html('<span class="current"></span><ul class="list"></ul>'));var i=e.next(),t=e.find("option"),n=e.find("option:selected");i.find(".current").html(n.data("display")||n.text()),t.each(function(e){var t=r(this),n=t.data("display");i.find("ul").append(r("<li></li>").attr("data-value",t.val()).attr("data-display",n||null).addClass("option"+(t.is(":selected")?" selected":"")+(t.is(":disabled")?" disabled":"")).html(t.text()))})}if("string"==typeof e)return"update"==e?this.each(function(){var e=r(this),t=r(this).next(".nice-select"),n=t.hasClass("open");t.length&&(t.remove(),i(e),n&&e.next().trigger("click"))}):"destroy"==e?(this.each(function(){var e=r(this),t=r(this).next(".nice-select");t.length&&(t.remove(),e.css("display",""))}),0==r(".nice-select").length&&r(document).off(".nice_select")):console.log('Method "'+e+'" does not exist.'),this;this.hide(),this.each(function(){var e=r(this);e.next().hasClass("nice-select")||i(e)}),r(document).off(".nice_select"),r(document).on("click.nice_select",".nice-select",function(e){var t=r(this);r(".nice-select").not(t).removeClass("open"),t.toggleClass("open"),t.hasClass("open")?(t.find(".option"),t.find(".focus").removeClass("focus"),t.find(".selected").addClass("focus")):t.focus()}),r(document).on("click.nice_select",function(e){0===r(e.target).closest(".nice-select").length&&r(".nice-select").removeClass("open").find(".option")}),r(document).on("click.nice_select",".nice-select .option:not(.disabled)",function(e){var t=r(this),n=t.closest(".nice-select");n.find(".selected").removeClass("selected"),t.addClass("selected");var i=t.data("display")||t.text();n.find(".current").text(i),n.prev("select").val(t.data("value")).trigger("change")}),r(document).on("keydown.nice_select",".nice-select",function(e){var t=r(this),n=r(t.find(".focus")||t.find(".list .option.selected"));if(32==e.keyCode||13==e.keyCode)return t.hasClass("open")?n.trigger("click"):t.trigger("click"),!1;if(40==e.keyCode){if(t.hasClass("open")){var i=n.nextAll(".option:not(.disabled)").first();0<i.length&&(t.find(".focus").removeClass("focus"),i.addClass("focus"))}else t.trigger("click");return!1}if(38==e.keyCode){if(t.hasClass("open")){var o=n.prevAll(".option:not(.disabled)").first();0<o.length&&(t.find(".focus").removeClass("focus"),o.addClass("focus"))}else t.trigger("click");return!1}if(27==e.keyCode)t.hasClass("open")&&t.trigger("click");else if(9==e.keyCode&&t.hasClass("open"))return!1});var t=document.createElement("a").style;return t.cssText="pointer-events:auto","auto"!==t.pointerEvents&&r("html").addClass("no-csspointerevents"),this}}(jQuery),$(function(){$(window).width()<1280&&($(".m_header_top_gr").appendTo(".grAdres_mob"),$(".m_header_top_adress").appendTo(".grAdres_mob"),$(".m_header_center_logo").appendTo(".mob_log_text"),$(".m_header_center_logotext").appendTo(".mob_log_text"),$(".m_header_center_tel").appendTo(".mob_tel_search"),$(".m_header_center_search").appendTo(".mob_tel_search"))}),function(e){"use strict";"function"==typeof define&&define.amd?define(["jquery"],e):"undefined"!=typeof exports?module.exports=e(require("jquery")):e(jQuery)}(function(c){"use strict";var o,s=window.Slick||{};o=0,(s=function(e,t){var n,i=this;i.defaults={accessibility:!0,adaptiveHeight:!1,appendArrows:c(e),appendDots:c(e),arrows:!0,asNavFor:null,prevArrow:'<button class="slick-prev" aria-label="Previous" type="button">Previous</button>',nextArrow:'<button class="slick-next" aria-label="Next" type="button">Next</button>',autoplay:!1,autoplaySpeed:3e3,centerMode:!1,centerPadding:"50px",cssEase:"ease",customPaging:function(e,t){return c('<button type="button" />').text(t+1)},dots:!1,dotsClass:"slick-dots",draggable:!0,easing:"linear",edgeFriction:.35,fade:!1,focusOnSelect:!1,focusOnChange:!1,infinite:!0,initialSlide:0,lazyLoad:"ondemand",mobileFirst:!1,pauseOnHover:!0,pauseOnFocus:!0,pauseOnDotsHover:!1,respondTo:"window",responsive:null,rows:1,rtl:!1,slide:"",slidesPerRow:1,slidesToShow:1,slidesToScroll:1,speed:500,swipe:!0,swipeToSlide:!1,touchMove:!0,touchThreshold:5,useCSS:!0,useTransform:!0,variableWidth:!1,vertical:!1,verticalSwiping:!1,waitForAnimate:!0,zIndex:1e3},i.initials={animating:!1,dragging:!1,autoPlayTimer:null,currentDirection:0,currentLeft:null,currentSlide:0,direction:1,$dots:null,listWidth:null,listHeight:null,loadIndex:0,$nextArrow:null,$prevArrow:null,scrolling:!1,slideCount:null,slideWidth:null,$slideTrack:null,$slides:null,sliding:!1,slideOffset:0,swipeLeft:null,swiping:!1,$list:null,touchObject:{},transformsEnabled:!1,unslicked:!1},c.extend(i,i.initials),i.activeBreakpoint=null,i.animType=null,i.animProp=null,i.breakpoints=[],i.breakpointSettings=[],i.cssTransitions=!1,i.focussed=!1,i.interrupted=!1,i.hidden="hidden",i.paused=!0,i.positionProp=null,i.respondTo=null,i.rowCount=1,i.shouldClick=!0,i.$slider=c(e),i.$slidesCache=null,i.transformType=null,i.transitionType=null,i.visibilityChange="visibilitychange",i.windowWidth=0,i.windowTimer=null,n=c(e).data("slick")||{},i.options=c.extend({},i.defaults,t,n),i.currentSlide=i.options.initialSlide,i.originalSettings=i.options,void 0!==document.mozHidden?(i.hidden="mozHidden",i.visibilityChange="mozvisibilitychange"):void 0!==document.webkitHidden&&(i.hidden="webkitHidden",i.visibilityChange="webkitvisibilitychange"),i.autoPlay=c.proxy(i.autoPlay,i),i.autoPlayClear=c.proxy(i.autoPlayClear,i),i.autoPlayIterator=c.proxy(i.autoPlayIterator,i),i.changeSlide=c.proxy(i.changeSlide,i),i.clickHandler=c.proxy(i.clickHandler,i),i.selectHandler=c.proxy(i.selectHandler,i),i.setPosition=c.proxy(i.setPosition,i),i.swipeHandler=c.proxy(i.swipeHandler,i),i.dragHandler=c.proxy(i.dragHandler,i),i.keyHandler=c.proxy(i.keyHandler,i),i.instanceUid=o++,i.htmlExpr=/^(?:\s*(<[\w\W]+>)[^>]*)$/,i.registerBreakpoints(),i.init(!0)}).prototype.activateADA=function(){this.$slideTrack.find(".slick-active").attr({"aria-hidden":"false"}).find("a, input, button, select").attr({tabindex:"0"})},s.prototype.addSlide=s.prototype.slickAdd=function(e,t,n){var i=this;if("boolean"==typeof t)n=t,t=null;else if(t<0||t>=i.slideCount)return!1;i.unload(),"number"==typeof t?0===t&&0===i.$slides.length?c(e).appendTo(i.$slideTrack):n?c(e).insertBefore(i.$slides.eq(t)):c(e).insertAfter(i.$slides.eq(t)):!0===n?c(e).prependTo(i.$slideTrack):c(e).appendTo(i.$slideTrack),i.$slides=i.$slideTrack.children(this.options.slide),i.$slideTrack.children(this.options.slide).detach(),i.$slideTrack.append(i.$slides),i.$slides.each(function(e,t){c(t).attr("data-slick-index",e)}),i.$slidesCache=i.$slides,i.reinit()},s.prototype.animateHeight=function(){var e=this;if(1===e.options.slidesToShow&&!0===e.options.adaptiveHeight&&!1===e.options.vertical){var t=e.$slides.eq(e.currentSlide).outerHeight(!0);e.$list.animate({height:t},e.options.speed)}},s.prototype.animateSlide=function(e,t){var n={},i=this;i.animateHeight(),!0===i.options.rtl&&!1===i.options.vertical&&(e=-e),!1===i.transformsEnabled?!1===i.options.vertical?i.$slideTrack.animate({left:e},i.options.speed,i.options.easing,t):i.$slideTrack.animate({top:e},i.options.speed,i.options.easing,t):!1===i.cssTransitions?(!0===i.options.rtl&&(i.currentLeft=-i.currentLeft),c({animStart:i.currentLeft}).animate({animStart:e},{duration:i.options.speed,easing:i.options.easing,step:function(e){e=Math.ceil(e),!1===i.options.vertical?n[i.animType]="translate("+e+"px, 0px)":n[i.animType]="translate(0px,"+e+"px)",i.$slideTrack.css(n)},complete:function(){t&&t.call()}})):(i.applyTransition(),e=Math.ceil(e),!1===i.options.vertical?n[i.animType]="translate3d("+e+"px, 0px, 0px)":n[i.animType]="translate3d(0px,"+e+"px, 0px)",i.$slideTrack.css(n),t&&setTimeout(function(){i.disableTransition(),t.call()},i.options.speed))},s.prototype.getNavTarget=function(){var e=this.options.asNavFor;return e&&null!==e&&(e=c(e).not(this.$slider)),e},s.prototype.asNavFor=function(t){var e=this.getNavTarget();null!==e&&"object"==typeof e&&e.each(function(){var e=c(this).slick("getSlick");e.unslicked||e.slideHandler(t,!0)})},s.prototype.applyTransition=function(e){var t=this,n={};!1===t.options.fade?n[t.transitionType]=t.transformType+" "+t.options.speed+"ms "+t.options.cssEase:n[t.transitionType]="opacity "+t.options.speed+"ms "+t.options.cssEase,!1===t.options.fade?t.$slideTrack.css(n):t.$slides.eq(e).css(n)},s.prototype.autoPlay=function(){var e=this;e.autoPlayClear(),e.slideCount>e.options.slidesToShow&&(e.autoPlayTimer=setInterval(e.autoPlayIterator,e.options.autoplaySpeed))},s.prototype.autoPlayClear=function(){this.autoPlayTimer&&clearInterval(this.autoPlayTimer)},s.prototype.autoPlayIterator=function(){var e=this,t=e.currentSlide+e.options.slidesToScroll;e.paused||e.interrupted||e.focussed||(!1===e.options.infinite&&(1===e.direction&&e.currentSlide+1===e.slideCount-1?e.direction=0:0===e.direction&&(t=e.currentSlide-e.options.slidesToScroll,e.currentSlide-1==0&&(e.direction=1))),e.slideHandler(t))},s.prototype.buildArrows=function(){var e=this;!0===e.options.arrows&&(e.$prevArrow=c(e.options.prevArrow).addClass("slick-arrow"),e.$nextArrow=c(e.options.nextArrow).addClass("slick-arrow"),e.slideCount>e.options.slidesToShow?(e.$prevArrow.removeClass("slick-hidden").removeAttr("aria-hidden tabindex"),e.$nextArrow.removeClass("slick-hidden").removeAttr("aria-hidden tabindex"),e.htmlExpr.test(e.options.prevArrow)&&e.$prevArrow.prependTo(e.options.appendArrows),e.htmlExpr.test(e.options.nextArrow)&&e.$nextArrow.appendTo(e.options.appendArrows),!0!==e.options.infinite&&e.$prevArrow.addClass("slick-disabled").attr("aria-disabled","true")):e.$prevArrow.add(e.$nextArrow).addClass("slick-hidden").attr({"aria-disabled":"true",tabindex:"-1"}))},s.prototype.buildDots=function(){var e,t,n=this;if(!0===n.options.dots&&n.slideCount>n.options.slidesToShow){for(n.$slider.addClass("slick-dotted"),t=c("<ul />").addClass(n.options.dotsClass),e=0;e<=n.getDotCount();e+=1)t.append(c("<li />").append(n.options.customPaging.call(this,n,e)));n.$dots=t.appendTo(n.options.appendDots),n.$dots.find("li").first().addClass("slick-active")}},s.prototype.buildOut=function(){var e=this;e.$slides=e.$slider.children(e.options.slide+":not(.slick-cloned)").addClass("slick-slide"),e.slideCount=e.$slides.length,e.$slides.each(function(e,t){c(t).attr("data-slick-index",e).data("originalStyling",c(t).attr("style")||"")}),e.$slider.addClass("slick-slider"),e.$slideTrack=0===e.slideCount?c('<div class="slick-track"/>').appendTo(e.$slider):e.$slides.wrapAll('<div class="slick-track"/>').parent(),e.$list=e.$slideTrack.wrap('<div class="slick-list"/>').parent(),e.$slideTrack.css("opacity",0),!0!==e.options.centerMode&&!0!==e.options.swipeToSlide||(e.options.slidesToScroll=1),c("img[data-lazy]",e.$slider).not("[src]").addClass("slick-loading"),e.setupInfinite(),e.buildArrows(),e.buildDots(),e.updateDots(),e.setSlideClasses("number"==typeof e.currentSlide?e.currentSlide:0),!0===e.options.draggable&&e.$list.addClass("draggable")},s.prototype.buildRows=function(){var e,t,n,i,o,r,s,a=this;if(i=document.createDocumentFragment(),r=a.$slider.children(),0<a.options.rows){for(s=a.options.slidesPerRow*a.options.rows,o=Math.ceil(r.length/s),e=0;e<o;e++){var l=document.createElement("div");for(t=0;t<a.options.rows;t++){var c=document.createElement("div");for(n=0;n<a.options.slidesPerRow;n++){var d=e*s+(t*a.options.slidesPerRow+n);r.get(d)&&c.appendChild(r.get(d))}l.appendChild(c)}i.appendChild(l)}a.$slider.empty().append(i),a.$slider.children().children().children().css({width:100/a.options.slidesPerRow+"%",display:"inline-block"})}},s.prototype.checkResponsive=function(e,t){var n,i,o,r=this,s=!1,a=r.$slider.width(),l=window.innerWidth||c(window).width();if("window"===r.respondTo?o=l:"slider"===r.respondTo?o=a:"min"===r.respondTo&&(o=Math.min(l,a)),r.options.responsive&&r.options.responsive.length&&null!==r.options.responsive){for(n in i=null,r.breakpoints)r.breakpoints.hasOwnProperty(n)&&(!1===r.originalSettings.mobileFirst?o<r.breakpoints[n]&&(i=r.breakpoints[n]):o>r.breakpoints[n]&&(i=r.breakpoints[n]));null!==i?null!==r.activeBreakpoint?(i!==r.activeBreakpoint||t)&&(r.activeBreakpoint=i,"unslick"===r.breakpointSettings[i]?r.unslick(i):(r.options=c.extend({},r.originalSettings,r.breakpointSettings[i]),!0===e&&(r.currentSlide=r.options.initialSlide),r.refresh(e)),s=i):(r.activeBreakpoint=i,"unslick"===r.breakpointSettings[i]?r.unslick(i):(r.options=c.extend({},r.originalSettings,r.breakpointSettings[i]),!0===e&&(r.currentSlide=r.options.initialSlide),r.refresh(e)),s=i):null!==r.activeBreakpoint&&(r.activeBreakpoint=null,r.options=r.originalSettings,!0===e&&(r.currentSlide=r.options.initialSlide),r.refresh(e),s=i),e||!1===s||r.$slider.trigger("breakpoint",[r,s])}},s.prototype.changeSlide=function(e,t){var n,i,o=this,r=c(e.currentTarget);switch(r.is("a")&&e.preventDefault(),r.is("li")||(r=r.closest("li")),n=o.slideCount%o.options.slidesToScroll!=0?0:(o.slideCount-o.currentSlide)%o.options.slidesToScroll,e.data.message){case"previous":i=0===n?o.options.slidesToScroll:o.options.slidesToShow-n,o.slideCount>o.options.slidesToShow&&o.slideHandler(o.currentSlide-i,!1,t);break;case"next":i=0===n?o.options.slidesToScroll:n,o.slideCount>o.options.slidesToShow&&o.slideHandler(o.currentSlide+i,!1,t);break;case"index":var s=0===e.data.index?0:e.data.index||r.index()*o.options.slidesToScroll;o.slideHandler(o.checkNavigable(s),!1,t),r.children().trigger("focus");break;default:return}},s.prototype.checkNavigable=function(e){var t,n;if(n=0,e>(t=this.getNavigableIndexes())[t.length-1])e=t[t.length-1];else for(var i in t){if(e<t[i]){e=n;break}n=t[i]}return e},s.prototype.cleanUpEvents=function(){var e=this;e.options.dots&&null!==e.$dots&&(c("li",e.$dots).off("click.slick",e.changeSlide).off("mouseenter.slick",c.proxy(e.interrupt,e,!0)).off("mouseleave.slick",c.proxy(e.interrupt,e,!1)),!0===e.options.accessibility&&e.$dots.off("keydown.slick",e.keyHandler)),e.$slider.off("focus.slick blur.slick"),!0===e.options.arrows&&e.slideCount>e.options.slidesToShow&&(e.$prevArrow&&e.$prevArrow.off("click.slick",e.changeSlide),e.$nextArrow&&e.$nextArrow.off("click.slick",e.changeSlide),!0===e.options.accessibility&&(e.$prevArrow&&e.$prevArrow.off("keydown.slick",e.keyHandler),e.$nextArrow&&e.$nextArrow.off("keydown.slick",e.keyHandler))),e.$list.off("touchstart.slick mousedown.slick",e.swipeHandler),e.$list.off("touchmove.slick mousemove.slick",e.swipeHandler),e.$list.off("touchend.slick mouseup.slick",e.swipeHandler),e.$list.off("touchcancel.slick mouseleave.slick",e.swipeHandler),e.$list.off("click.slick",e.clickHandler),c(document).off(e.visibilityChange,e.visibility),e.cleanUpSlideEvents(),!0===e.options.accessibility&&e.$list.off("keydown.slick",e.keyHandler),!0===e.options.focusOnSelect&&c(e.$slideTrack).children().off("click.slick",e.selectHandler),c(window).off("orientationchange.slick.slick-"+e.instanceUid,e.orientationChange),c(window).off("resize.slick.slick-"+e.instanceUid,e.resize),c("[draggable!=true]",e.$slideTrack).off("dragstart",e.preventDefault),c(window).off("load.slick.slick-"+e.instanceUid,e.setPosition)},s.prototype.cleanUpSlideEvents=function(){var e=this;e.$list.off("mouseenter.slick",c.proxy(e.interrupt,e,!0)),e.$list.off("mouseleave.slick",c.proxy(e.interrupt,e,!1))},s.prototype.cleanUpRows=function(){var e;0<this.options.rows&&((e=this.$slides.children().children()).removeAttr("style"),this.$slider.empty().append(e))},s.prototype.clickHandler=function(e){!1===this.shouldClick&&(e.stopImmediatePropagation(),e.stopPropagation(),e.preventDefault())},s.prototype.destroy=function(e){var t=this;t.autoPlayClear(),t.touchObject={},t.cleanUpEvents(),c(".slick-cloned",t.$slider).detach(),t.$dots&&t.$dots.remove(),t.$prevArrow&&t.$prevArrow.length&&(t.$prevArrow.removeClass("slick-disabled slick-arrow slick-hidden").removeAttr("aria-hidden aria-disabled tabindex").css("display",""),t.htmlExpr.test(t.options.prevArrow)&&t.$prevArrow.remove()),t.$nextArrow&&t.$nextArrow.length&&(t.$nextArrow.removeClass("slick-disabled slick-arrow slick-hidden").removeAttr("aria-hidden aria-disabled tabindex").css("display",""),t.htmlExpr.test(t.options.nextArrow)&&t.$nextArrow.remove()),t.$slides&&(t.$slides.removeClass("slick-slide slick-active slick-center slick-visible slick-current").removeAttr("aria-hidden").removeAttr("data-slick-index").each(function(){c(this).attr("style",c(this).data("originalStyling"))}),t.$slideTrack.children(this.options.slide).detach(),t.$slideTrack.detach(),t.$list.detach(),t.$slider.append(t.$slides)),t.cleanUpRows(),t.$slider.removeClass("slick-slider"),t.$slider.removeClass("slick-initialized"),t.$slider.removeClass("slick-dotted"),t.unslicked=!0,e||t.$slider.trigger("destroy",[t])},s.prototype.disableTransition=function(e){var t={};t[this.transitionType]="",!1===this.options.fade?this.$slideTrack.css(t):this.$slides.eq(e).css(t)},s.prototype.fadeSlide=function(e,t){var n=this;!1===n.cssTransitions?(n.$slides.eq(e).css({zIndex:n.options.zIndex}),n.$slides.eq(e).animate({opacity:1},n.options.speed,n.options.easing,t)):(n.applyTransition(e),n.$slides.eq(e).css({opacity:1,zIndex:n.options.zIndex}),t&&setTimeout(function(){n.disableTransition(e),t.call()},n.options.speed))},s.prototype.fadeSlideOut=function(e){var t=this;!1===t.cssTransitions?t.$slides.eq(e).animate({opacity:0,zIndex:t.options.zIndex-2},t.options.speed,t.options.easing):(t.applyTransition(e),t.$slides.eq(e).css({opacity:0,zIndex:t.options.zIndex-2}))},s.prototype.filterSlides=s.prototype.slickFilter=function(e){var t=this;null!==e&&(t.$slidesCache=t.$slides,t.unload(),t.$slideTrack.children(this.options.slide).detach(),t.$slidesCache.filter(e).appendTo(t.$slideTrack),t.reinit())},s.prototype.focusHandler=function(){var n=this;n.$slider.off("focus.slick blur.slick").on("focus.slick","*",function(e){var t=c(this);setTimeout(function(){n.options.pauseOnFocus&&t.is(":focus")&&(n.focussed=!0,n.autoPlay())},0)}).on("blur.slick","*",function(e){c(this),n.options.pauseOnFocus&&(n.focussed=!1,n.autoPlay())})},s.prototype.getCurrent=s.prototype.slickCurrentSlide=function(){return this.currentSlide},s.prototype.getDotCount=function(){var e=this,t=0,n=0,i=0;if(!0===e.options.infinite)if(e.slideCount<=e.options.slidesToShow)++i;else for(;t<e.slideCount;)++i,t=n+e.options.slidesToScroll,n+=e.options.slidesToScroll<=e.options.slidesToShow?e.options.slidesToScroll:e.options.slidesToShow;else if(!0===e.options.centerMode)i=e.slideCount;else if(e.options.asNavFor)for(;t<e.slideCount;)++i,t=n+e.options.slidesToScroll,n+=e.options.slidesToScroll<=e.options.slidesToShow?e.options.slidesToScroll:e.options.slidesToShow;else i=1+Math.ceil((e.slideCount-e.options.slidesToShow)/e.options.slidesToScroll);return i-1},s.prototype.getLeft=function(e){var t,n,i,o,r=this,s=0;return r.slideOffset=0,n=r.$slides.first().outerHeight(!0),!0===r.options.infinite?(r.slideCount>r.options.slidesToShow&&(r.slideOffset=r.slideWidth*r.options.slidesToShow*-1,o=-1,!0===r.options.vertical&&!0===r.options.centerMode&&(2===r.options.slidesToShow?o=-1.5:1===r.options.slidesToShow&&(o=-2)),s=n*r.options.slidesToShow*o),r.slideCount%r.options.slidesToScroll!=0&&e+r.options.slidesToScroll>r.slideCount&&r.slideCount>r.options.slidesToShow&&(s=e>r.slideCount?(r.slideOffset=(r.options.slidesToShow-(e-r.slideCount))*r.slideWidth*-1,(r.options.slidesToShow-(e-r.slideCount))*n*-1):(r.slideOffset=r.slideCount%r.options.slidesToScroll*r.slideWidth*-1,r.slideCount%r.options.slidesToScroll*n*-1))):e+r.options.slidesToShow>r.slideCount&&(r.slideOffset=(e+r.options.slidesToShow-r.slideCount)*r.slideWidth,s=(e+r.options.slidesToShow-r.slideCount)*n),r.slideCount<=r.options.slidesToShow&&(s=r.slideOffset=0),!0===r.options.centerMode&&r.slideCount<=r.options.slidesToShow?r.slideOffset=r.slideWidth*Math.floor(r.options.slidesToShow)/2-r.slideWidth*r.slideCount/2:!0===r.options.centerMode&&!0===r.options.infinite?r.slideOffset+=r.slideWidth*Math.floor(r.options.slidesToShow/2)-r.slideWidth:!0===r.options.centerMode&&(r.slideOffset=0,r.slideOffset+=r.slideWidth*Math.floor(r.options.slidesToShow/2)),t=!1===r.options.vertical?e*r.slideWidth*-1+r.slideOffset:e*n*-1+s,!0===r.options.variableWidth&&(i=r.slideCount<=r.options.slidesToShow||!1===r.options.infinite?r.$slideTrack.children(".slick-slide").eq(e):r.$slideTrack.children(".slick-slide").eq(e+r.options.slidesToShow),t=!0===r.options.rtl?i[0]?-1*(r.$slideTrack.width()-i[0].offsetLeft-i.width()):0:i[0]?-1*i[0].offsetLeft:0,!0===r.options.centerMode&&(i=r.slideCount<=r.options.slidesToShow||!1===r.options.infinite?r.$slideTrack.children(".slick-slide").eq(e):r.$slideTrack.children(".slick-slide").eq(e+r.options.slidesToShow+1),t=!0===r.options.rtl?i[0]?-1*(r.$slideTrack.width()-i[0].offsetLeft-i.width()):0:i[0]?-1*i[0].offsetLeft:0,t+=(r.$list.width()-i.outerWidth())/2)),t},s.prototype.getOption=s.prototype.slickGetOption=function(e){return this.options[e]},s.prototype.getNavigableIndexes=function(){var e,t=this,n=0,i=0,o=[];for(e=!1===t.options.infinite?t.slideCount:(n=-1*t.options.slidesToScroll,i=-1*t.options.slidesToScroll,2*t.slideCount);n<e;)o.push(n),n=i+t.options.slidesToScroll,i+=t.options.slidesToScroll<=t.options.slidesToShow?t.options.slidesToScroll:t.options.slidesToShow;return o},s.prototype.getSlick=function(){return this},s.prototype.getSlideCount=function(){var o,r,e,s=this;return e=!0===s.options.centerMode?Math.floor(s.$list.width()/2):0,r=-1*s.swipeLeft+e,!0===s.options.swipeToSlide?(s.$slideTrack.find(".slick-slide").each(function(e,t){var n,i;if(n=c(t).outerWidth(),i=t.offsetLeft,!0!==s.options.centerMode&&(i+=n/2),r<i+n)return o=t,!1}),Math.abs(c(o).attr("data-slick-index")-s.currentSlide)||1):s.options.slidesToScroll},s.prototype.goTo=s.prototype.slickGoTo=function(e,t){this.changeSlide({data:{message:"index",index:parseInt(e)}},t)},s.prototype.init=function(e){var t=this;c(t.$slider).hasClass("slick-initialized")||(c(t.$slider).addClass("slick-initialized"),t.buildRows(),t.buildOut(),t.setProps(),t.startLoad(),t.loadSlider(),t.initializeEvents(),t.updateArrows(),t.updateDots(),t.checkResponsive(!0),t.focusHandler()),e&&t.$slider.trigger("init",[t]),!0===t.options.accessibility&&t.initADA(),t.options.autoplay&&(t.paused=!1,t.autoPlay())},s.prototype.initADA=function(){var i=this,n=Math.ceil(i.slideCount/i.options.slidesToShow),o=i.getNavigableIndexes().filter(function(e){return 0<=e&&e<i.slideCount});i.$slides.add(i.$slideTrack.find(".slick-cloned")).attr({"aria-hidden":"true",tabindex:"-1"}).find("a, input, button, select").attr({tabindex:"-1"}),null!==i.$dots&&(i.$slides.not(i.$slideTrack.find(".slick-cloned")).each(function(e){var t=o.indexOf(e);if(c(this).attr({role:"tabpanel",id:"slick-slide"+i.instanceUid+e,tabindex:-1}),-1!==t){var n="slick-slide-control"+i.instanceUid+t;c("#"+n).length&&c(this).attr({"aria-describedby":n})}}),i.$dots.attr("role","tablist").find("li").each(function(e){var t=o[e];c(this).attr({role:"presentation"}),c(this).find("button").first().attr({role:"tab",id:"slick-slide-control"+i.instanceUid+e,"aria-controls":"slick-slide"+i.instanceUid+t,"aria-label":e+1+" of "+n,"aria-selected":null,tabindex:"-1"})}).eq(i.currentSlide).find("button").attr({"aria-selected":"true",tabindex:"0"}).end());for(var e=i.currentSlide,t=e+i.options.slidesToShow;e<t;e++)i.options.focusOnChange?i.$slides.eq(e).attr({tabindex:"0"}):i.$slides.eq(e).removeAttr("tabindex");i.activateADA()},s.prototype.initArrowEvents=function(){var e=this;!0===e.options.arrows&&e.slideCount>e.options.slidesToShow&&(e.$prevArrow.off("click.slick").on("click.slick",{message:"previous"},e.changeSlide),e.$nextArrow.off("click.slick").on("click.slick",{message:"next"},e.changeSlide),!0===e.options.accessibility&&(e.$prevArrow.on("keydown.slick",e.keyHandler),e.$nextArrow.on("keydown.slick",e.keyHandler)))},s.prototype.initDotEvents=function(){var e=this;!0===e.options.dots&&e.slideCount>e.options.slidesToShow&&(c("li",e.$dots).on("click.slick",{message:"index"},e.changeSlide),!0===e.options.accessibility&&e.$dots.on("keydown.slick",e.keyHandler)),!0===e.options.dots&&!0===e.options.pauseOnDotsHover&&e.slideCount>e.options.slidesToShow&&c("li",e.$dots).on("mouseenter.slick",c.proxy(e.interrupt,e,!0)).on("mouseleave.slick",c.proxy(e.interrupt,e,!1))},s.prototype.initSlideEvents=function(){var e=this;e.options.pauseOnHover&&(e.$list.on("mouseenter.slick",c.proxy(e.interrupt,e,!0)),e.$list.on("mouseleave.slick",c.proxy(e.interrupt,e,!1)))},s.prototype.initializeEvents=function(){var e=this;e.initArrowEvents(),e.initDotEvents(),e.initSlideEvents(),e.$list.on("touchstart.slick mousedown.slick",{action:"start"},e.swipeHandler),e.$list.on("touchmove.slick mousemove.slick",{action:"move"},e.swipeHandler),e.$list.on("touchend.slick mouseup.slick",{action:"end"},e.swipeHandler),e.$list.on("touchcancel.slick mouseleave.slick",{action:"end"},e.swipeHandler),e.$list.on("click.slick",e.clickHandler),c(document).on(e.visibilityChange,c.proxy(e.visibility,e)),!0===e.options.accessibility&&e.$list.on("keydown.slick",e.keyHandler),!0===e.options.focusOnSelect&&c(e.$slideTrack).children().on("click.slick",e.selectHandler),c(window).on("orientationchange.slick.slick-"+e.instanceUid,c.proxy(e.orientationChange,e)),c(window).on("resize.slick.slick-"+e.instanceUid,c.proxy(e.resize,e)),c("[draggable!=true]",e.$slideTrack).on("dragstart",e.preventDefault),c(window).on("load.slick.slick-"+e.instanceUid,e.setPosition),c(e.setPosition)},s.prototype.initUI=function(){var e=this;!0===e.options.arrows&&e.slideCount>e.options.slidesToShow&&(e.$prevArrow.show(),e.$nextArrow.show()),!0===e.options.dots&&e.slideCount>e.options.slidesToShow&&e.$dots.show()},s.prototype.keyHandler=function(e){var t=this;e.target.tagName.match("TEXTAREA|INPUT|SELECT")||(37===e.keyCode&&!0===t.options.accessibility?t.changeSlide({data:{message:!0===t.options.rtl?"next":"previous"}}):39===e.keyCode&&!0===t.options.accessibility&&t.changeSlide({data:{message:!0===t.options.rtl?"previous":"next"}}))},s.prototype.lazyLoad=function(){function e(e){c("img[data-lazy]",e).each(function(){var e=c(this),t=c(this).attr("data-lazy"),n=c(this).attr("data-srcset"),i=c(this).attr("data-sizes")||r.$slider.attr("data-sizes"),o=document.createElement("img");o.onload=function(){e.animate({opacity:0},100,function(){n&&(e.attr("srcset",n),i&&e.attr("sizes",i)),e.attr("src",t).animate({opacity:1},200,function(){e.removeAttr("data-lazy data-srcset data-sizes").removeClass("slick-loading")}),r.$slider.trigger("lazyLoaded",[r,e,t])})},o.onerror=function(){e.removeAttr("data-lazy").removeClass("slick-loading").addClass("slick-lazyload-error"),r.$slider.trigger("lazyLoadError",[r,e,t])},o.src=t})}var t,n,i,r=this;if(!0===r.options.centerMode?i=!0===r.options.infinite?(n=r.currentSlide+(r.options.slidesToShow/2+1))+r.options.slidesToShow+2:(n=Math.max(0,r.currentSlide-(r.options.slidesToShow/2+1)),r.options.slidesToShow/2+1+2+r.currentSlide):(n=r.options.infinite?r.options.slidesToShow+r.currentSlide:r.currentSlide,i=Math.ceil(n+r.options.slidesToShow),!0===r.options.fade&&(0<n&&n--,i<=r.slideCount&&i++)),t=r.$slider.find(".slick-slide").slice(n,i),"anticipated"===r.options.lazyLoad)for(var o=n-1,s=i,a=r.$slider.find(".slick-slide"),l=0;l<r.options.slidesToScroll;l++)o<0&&(o=r.slideCount-1),t=(t=t.add(a.eq(o))).add(a.eq(s)),o--,s++;e(t),r.slideCount<=r.options.slidesToShow?e(r.$slider.find(".slick-slide")):r.currentSlide>=r.slideCount-r.options.slidesToShow?e(r.$slider.find(".slick-cloned").slice(0,r.options.slidesToShow)):0===r.currentSlide&&e(r.$slider.find(".slick-cloned").slice(-1*r.options.slidesToShow))},s.prototype.loadSlider=function(){var e=this;e.setPosition(),e.$slideTrack.css({opacity:1}),e.$slider.removeClass("slick-loading"),e.initUI(),"progressive"===e.options.lazyLoad&&e.progressiveLazyLoad()},s.prototype.next=s.prototype.slickNext=function(){this.changeSlide({data:{message:"next"}})},s.prototype.orientationChange=function(){this.checkResponsive(),this.setPosition()},s.prototype.pause=s.prototype.slickPause=function(){this.autoPlayClear(),this.paused=!0},s.prototype.play=s.prototype.slickPlay=function(){var e=this;e.autoPlay(),e.options.autoplay=!0,e.paused=!1,e.focussed=!1,e.interrupted=!1},s.prototype.postSlide=function(e){var t=this;!t.unslicked&&(t.$slider.trigger("afterChange",[t,e]),t.animating=!1,t.slideCount>t.options.slidesToShow&&t.setPosition(),t.swipeLeft=null,t.options.autoplay&&t.autoPlay(),!0===t.options.accessibility&&(t.initADA(),t.options.focusOnChange))&&c(t.$slides.get(t.currentSlide)).attr("tabindex",0).focus()},s.prototype.prev=s.prototype.slickPrev=function(){this.changeSlide({data:{message:"previous"}})},s.prototype.preventDefault=function(e){e.preventDefault()},s.prototype.progressiveLazyLoad=function(e){e=e||1;var t,n,i,o,r,s=this,a=c("img[data-lazy]",s.$slider);a.length?(t=a.first(),n=t.attr("data-lazy"),i=t.attr("data-srcset"),o=t.attr("data-sizes")||s.$slider.attr("data-sizes"),(r=document.createElement("img")).onload=function(){i&&(t.attr("srcset",i),o&&t.attr("sizes",o)),t.attr("src",n).removeAttr("data-lazy data-srcset data-sizes").removeClass("slick-loading"),!0===s.options.adaptiveHeight&&s.setPosition(),s.$slider.trigger("lazyLoaded",[s,t,n]),s.progressiveLazyLoad()},r.onerror=function(){e<3?setTimeout(function(){s.progressiveLazyLoad(e+1)},500):(t.removeAttr("data-lazy").removeClass("slick-loading").addClass("slick-lazyload-error"),s.$slider.trigger("lazyLoadError",[s,t,n]),s.progressiveLazyLoad())},r.src=n):s.$slider.trigger("allImagesLoaded",[s])},s.prototype.refresh=function(e){var t,n,i=this;n=i.slideCount-i.options.slidesToShow,!i.options.infinite&&i.currentSlide>n&&(i.currentSlide=n),i.slideCount<=i.options.slidesToShow&&(i.currentSlide=0),t=i.currentSlide,i.destroy(!0),c.extend(i,i.initials,{currentSlide:t}),i.init(),e||i.changeSlide({data:{message:"index",index:t}},!1)},s.prototype.registerBreakpoints=function(){var e,t,n,i=this,o=i.options.responsive||null;if("array"===c.type(o)&&o.length){for(e in i.respondTo=i.options.respondTo||"window",o)if(n=i.breakpoints.length-1,o.hasOwnProperty(e)){for(t=o[e].breakpoint;0<=n;)i.breakpoints[n]&&i.breakpoints[n]===t&&i.breakpoints.splice(n,1),n--;i.breakpoints.push(t),i.breakpointSettings[t]=o[e].settings}i.breakpoints.sort(function(e,t){return i.options.mobileFirst?e-t:t-e})}},s.prototype.reinit=function(){var e=this;e.$slides=e.$slideTrack.children(e.options.slide).addClass("slick-slide"),e.slideCount=e.$slides.length,e.currentSlide>=e.slideCount&&0!==e.currentSlide&&(e.currentSlide=e.currentSlide-e.options.slidesToScroll),e.slideCount<=e.options.slidesToShow&&(e.currentSlide=0),e.registerBreakpoints(),e.setProps(),e.setupInfinite(),e.buildArrows(),e.updateArrows(),e.initArrowEvents(),e.buildDots(),e.updateDots(),e.initDotEvents(),e.cleanUpSlideEvents(),e.initSlideEvents(),e.checkResponsive(!1,!0),!0===e.options.focusOnSelect&&c(e.$slideTrack).children().on("click.slick",e.selectHandler),e.setSlideClasses("number"==typeof e.currentSlide?e.currentSlide:0),e.setPosition(),e.focusHandler(),e.paused=!e.options.autoplay,e.autoPlay(),e.$slider.trigger("reInit",[e])},s.prototype.resize=function(){var e=this;c(window).width()!==e.windowWidth&&(clearTimeout(e.windowDelay),e.windowDelay=window.setTimeout(function(){e.windowWidth=c(window).width(),e.checkResponsive(),e.unslicked||e.setPosition()},50))},s.prototype.removeSlide=s.prototype.slickRemove=function(e,t,n){var i=this;return e="boolean"==typeof e?!0===(t=e)?0:i.slideCount-1:!0===t?--e:e,!(i.slideCount<1||e<0||e>i.slideCount-1)&&(i.unload(),!0===n?i.$slideTrack.children().remove():i.$slideTrack.children(this.options.slide).eq(e).remove(),i.$slides=i.$slideTrack.children(this.options.slide),i.$slideTrack.children(this.options.slide).detach(),i.$slideTrack.append(i.$slides),i.$slidesCache=i.$slides,void i.reinit())},s.prototype.setCSS=function(e){var t,n,i=this,o={};!0===i.options.rtl&&(e=-e),t="left"==i.positionProp?Math.ceil(e)+"px":"0px",n="top"==i.positionProp?Math.ceil(e)+"px":"0px",o[i.positionProp]=e,!1===i.transformsEnabled||(!(o={})===i.cssTransitions?o[i.animType]="translate("+t+", "+n+")":o[i.animType]="translate3d("+t+", "+n+", 0px)"),i.$slideTrack.css(o)},s.prototype.setDimensions=function(){var e=this;!1===e.options.vertical?!0===e.options.centerMode&&e.$list.css({padding:"0px "+e.options.centerPadding}):(e.$list.height(e.$slides.first().outerHeight(!0)*e.options.slidesToShow),!0===e.options.centerMode&&e.$list.css({padding:e.options.centerPadding+" 0px"})),e.listWidth=e.$list.width(),e.listHeight=e.$list.height(),!1===e.options.vertical&&!1===e.options.variableWidth?(e.slideWidth=Math.ceil(e.listWidth/e.options.slidesToShow),e.$slideTrack.width(Math.ceil(e.slideWidth*e.$slideTrack.children(".slick-slide").length))):!0===e.options.variableWidth?e.$slideTrack.width(5e3*e.slideCount):(e.slideWidth=Math.ceil(e.listWidth),e.$slideTrack.height(Math.ceil(e.$slides.first().outerHeight(!0)*e.$slideTrack.children(".slick-slide").length)));var t=e.$slides.first().outerWidth(!0)-e.$slides.first().width();!1===e.options.variableWidth&&e.$slideTrack.children(".slick-slide").width(e.slideWidth-t)},s.prototype.setFade=function(){var n,i=this;i.$slides.each(function(e,t){n=i.slideWidth*e*-1,!0===i.options.rtl?c(t).css({position:"relative",right:n,top:0,zIndex:i.options.zIndex-2,opacity:0}):c(t).css({position:"relative",left:n,top:0,zIndex:i.options.zIndex-2,opacity:0})}),i.$slides.eq(i.currentSlide).css({zIndex:i.options.zIndex-1,opacity:1})},s.prototype.setHeight=function(){var e=this;if(1===e.options.slidesToShow&&!0===e.options.adaptiveHeight&&!1===e.options.vertical){var t=e.$slides.eq(e.currentSlide).outerHeight(!0);e.$list.css("height",t)}},s.prototype.setOption=s.prototype.slickSetOption=function(){var e,t,n,i,o,r=this,s=!1;if("object"===c.type(arguments[0])?(n=arguments[0],s=arguments[1],o="multiple"):"string"===c.type(arguments[0])&&(n=arguments[0],i=arguments[1],s=arguments[2],"responsive"===arguments[0]&&"array"===c.type(arguments[1])?o="responsive":void 0!==arguments[1]&&(o="single")),"single"===o)r.options[n]=i;else if("multiple"===o)c.each(n,function(e,t){r.options[e]=t});else if("responsive"===o)for(t in i)if("array"!==c.type(r.options.responsive))r.options.responsive=[i[t]];else{for(e=r.options.responsive.length-1;0<=e;)r.options.responsive[e].breakpoint===i[t].breakpoint&&r.options.responsive.splice(e,1),e--;r.options.responsive.push(i[t])}s&&(r.unload(),r.reinit())},s.prototype.setPosition=function(){var e=this;e.setDimensions(),e.setHeight(),!1===e.options.fade?e.setCSS(e.getLeft(e.currentSlide)):e.setFade(),e.$slider.trigger("setPosition",[e])},s.prototype.setProps=function(){var e=this,t=document.body.style;e.positionProp=!0===e.options.vertical?"top":"left","top"===e.positionProp?e.$slider.addClass("slick-vertical"):e.$slider.removeClass("slick-vertical"),void 0===t.WebkitTransition&&void 0===t.MozTransition&&void 0===t.msTransition||!0===e.options.useCSS&&(e.cssTransitions=!0),e.options.fade&&("number"==typeof e.options.zIndex?e.options.zIndex<3&&(e.options.zIndex=3):e.options.zIndex=e.defaults.zIndex),void 0!==t.OTransform&&(e.animType="OTransform",e.transformType="-o-transform",e.transitionType="OTransition",void 0===t.perspectiveProperty&&void 0===t.webkitPerspective&&(e.animType=!1)),void 0!==t.MozTransform&&(e.animType="MozTransform",e.transformType="-moz-transform",e.transitionType="MozTransition",void 0===t.perspectiveProperty&&void 0===t.MozPerspective&&(e.animType=!1)),void 0!==t.webkitTransform&&(e.animType="webkitTransform",e.transformType="-webkit-transform",e.transitionType="webkitTransition",void 0===t.perspectiveProperty&&void 0===t.webkitPerspective&&(e.animType=!1)),void 0!==t.msTransform&&(e.animType="msTransform",e.transformType="-ms-transform",e.transitionType="msTransition",void 0===t.msTransform&&(e.animType=!1)),void 0!==t.transform&&!1!==e.animType&&(e.animType="transform",e.transformType="transform",e.transitionType="transition"),e.transformsEnabled=e.options.useTransform&&null!==e.animType&&!1!==e.animType},s.prototype.setSlideClasses=function(e){var t,n,i,o,r=this;if(n=r.$slider.find(".slick-slide").removeClass("slick-active slick-center slick-current").attr("aria-hidden","true"),r.$slides.eq(e).addClass("slick-current"),!0===r.options.centerMode){var s=r.options.slidesToShow%2==0?1:0;t=Math.floor(r.options.slidesToShow/2),!0===r.options.infinite&&(t<=e&&e<=r.slideCount-1-t?r.$slides.slice(e-t+s,e+t+1).addClass("slick-active").attr("aria-hidden","false"):(i=r.options.slidesToShow+e,n.slice(i-t+1+s,i+t+2).addClass("slick-active").attr("aria-hidden","false")),0===e?n.eq(n.length-1-r.options.slidesToShow).addClass("slick-center"):e===r.slideCount-1&&n.eq(r.options.slidesToShow).addClass("slick-center")),r.$slides.eq(e).addClass("slick-center")}else 0<=e&&e<=r.slideCount-r.options.slidesToShow?r.$slides.slice(e,e+r.options.slidesToShow).addClass("slick-active").attr("aria-hidden","false"):n.length<=r.options.slidesToShow?n.addClass("slick-active").attr("aria-hidden","false"):(o=r.slideCount%r.options.slidesToShow,i=!0===r.options.infinite?r.options.slidesToShow+e:e,r.options.slidesToShow==r.options.slidesToScroll&&r.slideCount-e<r.options.slidesToShow?n.slice(i-(r.options.slidesToShow-o),i+o).addClass("slick-active").attr("aria-hidden","false"):n.slice(i,i+r.options.slidesToShow).addClass("slick-active").attr("aria-hidden","false"));"ondemand"!==r.options.lazyLoad&&"anticipated"!==r.options.lazyLoad||r.lazyLoad()},s.prototype.setupInfinite=function(){var e,t,n,i=this;if(!0===i.options.fade&&(i.options.centerMode=!1),!0===i.options.infinite&&!1===i.options.fade&&(t=null,i.slideCount>i.options.slidesToShow)){for(n=!0===i.options.centerMode?i.options.slidesToShow+1:i.options.slidesToShow,e=i.slideCount;e>i.slideCount-n;e-=1)t=e-1,c(i.$slides[t]).clone(!0).attr("id","").attr("data-slick-index",t-i.slideCount).prependTo(i.$slideTrack).addClass("slick-cloned");for(e=0;e<n+i.slideCount;e+=1)t=e,c(i.$slides[t]).clone(!0).attr("id","").attr("data-slick-index",t+i.slideCount).appendTo(i.$slideTrack).addClass("slick-cloned");i.$slideTrack.find(".slick-cloned").find("[id]").each(function(){c(this).attr("id","")})}},s.prototype.interrupt=function(e){e||this.autoPlay(),this.interrupted=e},s.prototype.selectHandler=function(e){var t=c(e.target).is(".slick-slide")?c(e.target):c(e.target).parents(".slick-slide"),n=parseInt(t.attr("data-slick-index"));return n||(n=0),this.slideCount<=this.options.slidesToShow?void this.slideHandler(n,!1,!0):void this.slideHandler(n)},s.prototype.slideHandler=function(e,t,n){var i,o,r,s,a,l=null,c=this;if(t=t||!1,!(!0===c.animating&&!0===c.options.waitForAnimate||!0===c.options.fade&&c.currentSlide===e))return!1===t&&c.asNavFor(e),i=e,l=c.getLeft(i),s=c.getLeft(c.currentSlide),c.currentLeft=null===c.swipeLeft?s:c.swipeLeft,!1===c.options.infinite&&!1===c.options.centerMode&&(e<0||e>c.getDotCount()*c.options.slidesToScroll)?void(!1===c.options.fade&&(i=c.currentSlide,!0!==n&&c.slideCount>c.options.slidesToShow?c.animateSlide(s,function(){c.postSlide(i)}):c.postSlide(i))):!1===c.options.infinite&&!0===c.options.centerMode&&(e<0||e>c.slideCount-c.options.slidesToScroll)?void(!1===c.options.fade&&(i=c.currentSlide,!0!==n&&c.slideCount>c.options.slidesToShow?c.animateSlide(s,function(){c.postSlide(i)}):c.postSlide(i))):(c.options.autoplay&&clearInterval(c.autoPlayTimer),o=i<0?c.slideCount%c.options.slidesToScroll!=0?c.slideCount-c.slideCount%c.options.slidesToScroll:c.slideCount+i:i>=c.slideCount?c.slideCount%c.options.slidesToScroll!=0?0:i-c.slideCount:i,c.animating=!0,c.$slider.trigger("beforeChange",[c,c.currentSlide,o]),r=c.currentSlide,c.currentSlide=o,c.setSlideClasses(c.currentSlide),c.options.asNavFor&&((a=(a=c.getNavTarget()).slick("getSlick")).slideCount<=a.options.slidesToShow&&a.setSlideClasses(c.currentSlide)),c.updateDots(),c.updateArrows(),!0===c.options.fade?(!0!==n?(c.fadeSlideOut(r),c.fadeSlide(o,function(){c.postSlide(o)})):c.postSlide(o),void c.animateHeight()):void(!0!==n&&c.slideCount>c.options.slidesToShow?c.animateSlide(l,function(){c.postSlide(o)}):c.postSlide(o)))},s.prototype.startLoad=function(){var e=this;!0===e.options.arrows&&e.slideCount>e.options.slidesToShow&&(e.$prevArrow.hide(),e.$nextArrow.hide()),!0===e.options.dots&&e.slideCount>e.options.slidesToShow&&e.$dots.hide(),e.$slider.addClass("slick-loading")},s.prototype.swipeDirection=function(){var e,t,n,i,o=this;return e=o.touchObject.startX-o.touchObject.curX,t=o.touchObject.startY-o.touchObject.curY,n=Math.atan2(t,e),(i=Math.round(180*n/Math.PI))<0&&(i=360-Math.abs(i)),i<=45&&0<=i?!1===o.options.rtl?"left":"right":i<=360&&315<=i?!1===o.options.rtl?"left":"right":135<=i&&i<=225?!1===o.options.rtl?"right":"left":!0===o.options.verticalSwiping?35<=i&&i<=135?"down":"up":"vertical"},s.prototype.swipeEnd=function(e){var t,n,i=this;if(i.dragging=!1,i.swiping=!1,i.scrolling)return i.scrolling=!1;if(i.interrupted=!1,i.shouldClick=!(10<i.touchObject.swipeLength),void 0===i.touchObject.curX)return!1;if(!0===i.touchObject.edgeHit&&i.$slider.trigger("edge",[i,i.swipeDirection()]),i.touchObject.swipeLength>=i.touchObject.minSwipe){switch(n=i.swipeDirection()){case"left":case"down":t=i.options.swipeToSlide?i.checkNavigable(i.currentSlide+i.getSlideCount()):i.currentSlide+i.getSlideCount(),i.currentDirection=0;break;case"right":case"up":t=i.options.swipeToSlide?i.checkNavigable(i.currentSlide-i.getSlideCount()):i.currentSlide-i.getSlideCount(),i.currentDirection=1}"vertical"!=n&&(i.slideHandler(t),i.touchObject={},i.$slider.trigger("swipe",[i,n]))}else i.touchObject.startX!==i.touchObject.curX&&(i.slideHandler(i.currentSlide),i.touchObject={})},s.prototype.swipeHandler=function(e){var t=this;if(!(!1===t.options.swipe||"ontouchend"in document&&!1===t.options.swipe||!1===t.options.draggable&&-1!==e.type.indexOf("mouse")))switch(t.touchObject.fingerCount=e.originalEvent&&void 0!==e.originalEvent.touches?e.originalEvent.touches.length:1,t.touchObject.minSwipe=t.listWidth/t.options.touchThreshold,!0===t.options.verticalSwiping&&(t.touchObject.minSwipe=t.listHeight/t.options.touchThreshold),e.data.action){case"start":t.swipeStart(e);break;case"move":t.swipeMove(e);break;case"end":t.swipeEnd(e)}},s.prototype.swipeMove=function(e){var t,n,i,o,r,s,a=this;return r=void 0!==e.originalEvent?e.originalEvent.touches:null,!(!a.dragging||a.scrolling||r&&1!==r.length)&&(t=a.getLeft(a.currentSlide),a.touchObject.curX=void 0!==r?r[0].pageX:e.clientX,a.touchObject.curY=void 0!==r?r[0].pageY:e.clientY,a.touchObject.swipeLength=Math.round(Math.sqrt(Math.pow(a.touchObject.curX-a.touchObject.startX,2))),s=Math.round(Math.sqrt(Math.pow(a.touchObject.curY-a.touchObject.startY,2))),!a.options.verticalSwiping&&!a.swiping&&4<s?!(a.scrolling=!0):(!0===a.options.verticalSwiping&&(a.touchObject.swipeLength=s),n=a.swipeDirection(),void 0!==e.originalEvent&&4<a.touchObject.swipeLength&&(a.swiping=!0,e.preventDefault()),o=(!1===a.options.rtl?1:-1)*(a.touchObject.curX>a.touchObject.startX?1:-1),!0===a.options.verticalSwiping&&(o=a.touchObject.curY>a.touchObject.startY?1:-1),i=a.touchObject.swipeLength,(a.touchObject.edgeHit=!1)===a.options.infinite&&(0===a.currentSlide&&"right"===n||a.currentSlide>=a.getDotCount()&&"left"===n)&&(i=a.touchObject.swipeLength*a.options.edgeFriction,a.touchObject.edgeHit=!0),!1===a.options.vertical?a.swipeLeft=t+i*o:a.swipeLeft=t+i*(a.$list.height()/a.listWidth)*o,!0===a.options.verticalSwiping&&(a.swipeLeft=t+i*o),!0!==a.options.fade&&!1!==a.options.touchMove&&(!0===a.animating?(a.swipeLeft=null,!1):void a.setCSS(a.swipeLeft))))},s.prototype.swipeStart=function(e){var t,n=this;return n.interrupted=!0,1!==n.touchObject.fingerCount||n.slideCount<=n.options.slidesToShow?!(n.touchObject={}):(void 0!==e.originalEvent&&void 0!==e.originalEvent.touches&&(t=e.originalEvent.touches[0]),n.touchObject.startX=n.touchObject.curX=void 0!==t?t.pageX:e.clientX,n.touchObject.startY=n.touchObject.curY=void 0!==t?t.pageY:e.clientY,void(n.dragging=!0))},s.prototype.unfilterSlides=s.prototype.slickUnfilter=function(){var e=this;null!==e.$slidesCache&&(e.unload(),e.$slideTrack.children(this.options.slide).detach(),e.$slidesCache.appendTo(e.$slideTrack),e.reinit())},s.prototype.unload=function(){var e=this;c(".slick-cloned",e.$slider).remove(),e.$dots&&e.$dots.remove(),e.$prevArrow&&e.htmlExpr.test(e.options.prevArrow)&&e.$prevArrow.remove(),e.$nextArrow&&e.htmlExpr.test(e.options.nextArrow)&&e.$nextArrow.remove(),e.$slides.removeClass("slick-slide slick-active slick-visible slick-current").attr("aria-hidden","true").css("width","")},s.prototype.unslick=function(e){this.$slider.trigger("unslick",[this,e]),this.destroy()},s.prototype.updateArrows=function(){var e=this;Math.floor(e.options.slidesToShow/2),!0===e.options.arrows&&e.slideCount>e.options.slidesToShow&&!e.options.infinite&&(e.$prevArrow.removeClass("slick-disabled").attr("aria-disabled","false"),e.$nextArrow.removeClass("slick-disabled").attr("aria-disabled","false"),0===e.currentSlide?(e.$prevArrow.addClass("slick-disabled").attr("aria-disabled","true"),e.$nextArrow.removeClass("slick-disabled").attr("aria-disabled","false")):e.currentSlide>=e.slideCount-e.options.slidesToShow&&!1===e.options.centerMode?(e.$nextArrow.addClass("slick-disabled").attr("aria-disabled","true"),e.$prevArrow.removeClass("slick-disabled").attr("aria-disabled","false")):e.currentSlide>=e.slideCount-1&&!0===e.options.centerMode&&(e.$nextArrow.addClass("slick-disabled").attr("aria-disabled","true"),e.$prevArrow.removeClass("slick-disabled").attr("aria-disabled","false")))},s.prototype.updateDots=function(){var e=this;null!==e.$dots&&(e.$dots.find("li").removeClass("slick-active").end(),e.$dots.find("li").eq(Math.floor(e.currentSlide/e.options.slidesToScroll)).addClass("slick-active"))},s.prototype.visibility=function(){this.options.autoplay&&(document[this.hidden]?this.interrupted=!0:this.interrupted=!1)},c.fn.slick=function(){var e,t,n=this,i=arguments[0],o=Array.prototype.slice.call(arguments,1),r=n.length;for(e=0;e<r;e++)if("object"==typeof i||void 0===i?n[e].slick=new s(n[e],i):t=n[e].slick[i].apply(n[e].slick,o),void 0!==t)return t;return n}}),$(document).ready(function(){$(".slider_container").slick({dots:!0,infinite:!0,arrows:!0,speed:1e3,slidesToShow:1})}),$(document).ready(function(){$(".slider_product").slick({dots:!0,infinite:!1,arrows:!0,speed:1e3,slidesToShow:5,slidesToScroll:5,responsive:[{breakpoint:1280,settings:{slidesToShow:3,slidesToScroll:3,infinite:!0,dots:!0,infinite:!1}},{breakpoint:767,settings:{slidesToShow:1,slidesToScroll:1,infinite:!0,dots:!0,infinite:!1}}]})}),$(document).ready(function(){$(".slider_product_hits").slick({dots:!0,infinite:!1,arrows:!0,speed:1e3,slidesToShow:5,slidesToScroll:5,responsive:[{breakpoint:1280,settings:{slidesToShow:3,slidesToScroll:3,infinite:!0,dots:!0,infinite:!1}},{breakpoint:767,settings:{slidesToShow:1,slidesToScroll:1,infinite:!0,dots:!0,infinite:!1}}]}),$(".slider_feedback").slick({dots:!0,infinite:!1,arrows:!0,speed:1e3,slidesToShow:2,slidesToScroll:2,responsive:[{breakpoint:1280,settings:{slidesToShow:1,slidesToScroll:1,infinite:!0,dots:!0,infinite:!1}},{breakpoint:767,settings:{slidesToShow:1,slidesToScroll:1,infinite:!0,dots:!0,infinite:!1}}]}),$(".slider-for").slick({slidesToShow:1,slidesToScroll:1,dots:!0,arrows:!0,fade:!0,asNavFor:".slider-nav"}),$(".slider-nav").slick({slidesToShow:4,slidesToScroll:1,vertical:!0,dots:!1,arrows:!1,verticalSwiping:!0,asNavFor:".slider-for",focusOnSelect:!0})}),window.onload=function(){for(var i=0,e=document.getElementsByClassName("hover_down"),n=document.getElementsByClassName("m_header_top_lang")[0],t=document.getElementsByClassName("arrow_click"),o=document.querySelectorAll(".slider_product .slick-arrow"),r=document.querySelectorAll(".slider_product_hits .slick-arrow"),s=(r=document.querySelectorAll(".slider_product_hits .slick-arrow"),document.querySelectorAll(".slider_feedback .slick-arrow")),a=document.getElementsByClassName("size"),l=document.getElementsByClassName("size_up"),c=document.querySelectorAll(".slider_product .slick-dots li"),d=document.querySelectorAll(".slider_product_hits .slick-dots li"),u=document.querySelectorAll(".slider_feedback .slick-dots li"),p=0;p<o.length;p++)t[0].appendChild(o[p]);if(0==c.length)c=null;else{a[0].innerHTML=c.length,o[1].addEventListener("click",function(){for(var e=0;e<c.length;e++)1==c[e].classList.length&&(l[0].innerHTML=c[e].children[0].innerHTML)}),o[0].addEventListener("click",function(){for(var e=0;e<c.length;e++)1==c[e].classList.length&&(l[0].innerHTML=c[e].children[0].innerHTML)});for(p=0;p<r.length;p++)t[1].appendChild(r[p]);a[1].innerHTML=d.length,r[1].addEventListener("click",function(){for(var e=0;e<d.length;e++)1==d[e].classList.length&&(l[1].innerHTML=d[e].children[0].innerHTML)}),r[0].addEventListener("click",function(){for(var e=0;e<d.length;e++)1==d[e].classList.length&&(l[1].innerHTML=d[e].children[0].innerHTML)})}var f=document.querySelectorAll("form.feedback_items .click_assessment>div");if(f){var h={count:0};function v(e){if(0===e.currentTarget.classList.length){e.currentTarget.classList.add("active");for(var t=0;t<f.length;t++)if(1===f[t].classList.length){h.count=t;for(var n=0;n<h.count;n++)f[n].classList.add("active")}}else{e.currentTarget.classList.remove("active");for(t=0;t<f.length;t++)if(0===f[t].classList.length){h.count=t;for(n=h.count;n<f.length;n++)e.currentTarget.classList.add("active"),f[n].classList.remove("active")}}for(t=0;t<f.length;t++)1===f[t].classList.length&&(i=t+1);alert(i)}for(p=0;p<f.length;p++)f[p].addEventListener("click",v,!1)}var g=document.getElementsByClassName("tabs_product")[0];if(g.onmouseover=function(e){for(var t=0;t<g.children.length;t++)g.children[t].classList.remove("active");var n=e.target;"LI"===n.nodeName?n.classList.add("active"):"A"===n.nodeName&&n.parentNode.classList.add("active")},g.onmouseout=function(e){var t=e.target;"LI"===t.nodeName?t.classList.remove("active"):"A"===t.nodeName&&t.parentNode.classList.remove("active")},0===u.length)u=null;else{for(p=0;p<s.length;p++)t[0].appendChild(s[p]);a[0].innerHTML=u.length,s[1].addEventListener("click",function(){for(var e=0;e<u.length;e++)1==u[e].classList.length&&(l[0].innerHTML=u[e].children[0].innerHTML)}),s[0].addEventListener("click",function(){for(var e=0;e<u.length;e++)1==u[e].classList.length&&(l[0].innerHTML=u[e].children[0].innerHTML)})}var m=document.querySelectorAll(".catalog_items  .item_product ");for(p=0;p<m.length;p++){var y=document.createElement("div");m[p].parentNode.appendChild(y),y.classList.add("product_size"),y.appendChild(m[p])}function w(e){for(var t=0;t<m.length;t++)m[t].style.zIndex="1";e.currentTarget.style.zIndex="14"}for(p=0;p<m.length;p++)m[p].addEventListener("mouseover",w,!1);var b=document.getElementsByClassName("button_catalog")[0],x=document.getElementsByClassName("device_container")[0];if(b){function k(e){for(var t=0;t<n.children.length;t++)n.children[t].classList.remove("active");e.target.classList.add("active")}b.addEventListener("click",function(){setTimeout(function(){x.classList.remove("active-scale")},500),2===x.classList.length?x.classList.add("active"):(x.classList.remove("active"),x.classList.add("active-scale"))});for(p=0;p<n.children.length;p++)n.children[p].addEventListener("click",k,!1)}if(window.innerWidth<=767){var S=document.getElementsByClassName("link_hover"),T=document.getElementsByClassName("hamburger"),C=document.getElementsByClassName("modal_header_menu")[0],E=document.getElementsByClassName("modal_header_top")[0],$=document.querySelectorAll(".content_footer .mob_row")[0],A=document.querySelectorAll(".content_footer>div:last-child")[0],N=document.getElementsByClassName("mob_tel_search")[0],L=document.getElementsByClassName("mobile_header_top")[0];function H(e){"active"===e.currentTarget.classList[e.currentTarget.classList.length-1]?(e.currentTarget.classList.remove("active"),C.classList.remove("active"),T[1].classList.remove("active")):(e.currentTarget.classList.add("active"),T[0].classList.add("active"),C.classList.add("active"))}$.children[0].appendChild(A.lastElementChild),L.appendChild(N),E.appendChild(n);for(p=0;p<T.length;p++)T[p].addEventListener("click",H,!1);for(var j=[],O=document.getElementById("device"),D=0;D<e.length;D++){var P=document.createElement("div");O.children[D].appendChild(P),P.classList.add("drop_down"),P.appendChild(S[D]);for(p=0;p<e[D].children.length-1;p++)for(var M=0;M<e[D].children[p].children[0].children.length;M++)j.push(e[D].children[p].children[0].children[M]);e[D].children[0].children[0].innerHTML="",countAdaptive=1;for(p=0;p<j.length;p++)e[D].children[0].children[0].appendChild(j[p]);j=[]}var q=document.getElementsByClassName("drop_down");function _(e){"active"===e.currentTarget.classList[e.currentTarget.classList.length-1]?(e.currentTarget.classList.remove("active"),e.currentTarget.parentNode.children[0].classList.remove("active")):(e.currentTarget.parentNode.children[0].classList.add("active"),e.currentTarget.classList.add("active"))}for(p=0;p<q.length;p++)q[p].addEventListener("click",_,!1)}else if(window.innerWidth<=1280){var z=[],F=0;for(D=0;D<e.length;D++){for(p=0;p<e[D].children.length-1;p++)for(M=0;M<e[D].children[p].children[0].children.length;M++)z.push(e[D].children[p].children[0].children[M]);for(M=0;M<e[D].children.length-3;M++){e[D].children[M].children[0].innerHTML="",F=1;for(p=0;p<z.length;p++)p<z.length/2?e[D].children[M].children[0].appendChild(z[p]):e[D].children[F].children[0].appendChild(z[p])}z=[]}}if(window.innerWidth<=1280){var I=document.getElementsByClassName("filters_product_container")[0],W=document.getElementsByClassName("banner")[0];I&&I.appendChild(W)}if(window.innerWidth<=767){var U=document.getElementsByClassName("button_close")[0],R=document.getElementsByClassName("text_container")[0],B=document.getElementsByClassName("items_online_store")[1];R.appendChild(B.children[0]);var X=document.getElementsByClassName("filter_product")[0],V=document.getElementsByClassName("pop_up_mobile_filter")[0];V.appendChild(X),document.getElementsByClassName("filter_mobile")[0].addEventListener("click",function(){V.classList.add("active"),U.classList.add("active"),U.addEventListener("click",function(){V.classList.remove("active"),U.classList.remove("active")})})}},$(document).ready(function(){var s=document.getElementById("input-range-container"),n=[document.getElementById("min_range"),document.getElementById("max_range")];if(s){noUiSlider.create(s,{start:[600,14e3],connect:!0,tooltips:[!0,wNumb({decimals:1})],range:{min:[0,100],max:[15e3,100]}});var e=[document.querySelectorAll(".noUi-handle.noUi-handle-upper")[0],document.querySelectorAll(".noUi-handle.noUi-handle-lower")[0]];function t(e){s.noUiSlider.on("update",function(e,t){n[t].value=e[t]})}for(var i=0;i<n.length;i++)n[i].addEventListener("click",t,!1),e[i].addEventListener("mousedown",t,!1);n.forEach(function(e,r){e.addEventListener("change",function(){s.noUiSlider.setHandle(r,this.value)}),e.addEventListener("keydown",function(e){var t,n=s.noUiSlider.get(),i=Number(n[r]),o=s.noUiSlider.steps()[r];switch(e.which){case 13:s.noUiSlider.setHandle(r,this.value);break;case 38:!1===(t=o[1])&&(t=1),null!==t&&s.noUiSlider.setHandle(r,i+t);break;case 40:!1===(t=o[0])&&(t=1),null!==t&&s.noUiSlider.setHandle(r,i-t)}})})}$(document).ready(function(){$("select").niceSelect()})});
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm1haW4uanMiXSwibmFtZXMiOlsiZ2xvYmFsIiwiZmFjdG9yeSIsIm1vZHVsZSIsImV4cG9ydHMiLCJkb2N1bWVudCIsInciLCJFcnJvciIsIndpbmRvdyIsInRoaXMiLCJub0dsb2JhbCIsImFyciIsInNsaWNlIiwiY29uY2F0IiwicHVzaCIsImluZGV4T2YiLCJjbGFzczJ0eXBlIiwidG9TdHJpbmciLCJoYXNPd24iLCJoYXNPd25Qcm9wZXJ0eSIsInN1cHBvcnQiLCJ2ZXJzaW9uIiwialF1ZXJ5Iiwic2VsZWN0b3IiLCJjb250ZXh0IiwiZm4iLCJpbml0IiwicnRyaW0iLCJybXNQcmVmaXgiLCJyZGFzaEFscGhhIiwiZmNhbWVsQ2FzZSIsImFsbCIsImxldHRlciIsInRvVXBwZXJDYXNlIiwiaXNBcnJheUxpa2UiLCJvYmoiLCJsZW5ndGgiLCJ0eXBlIiwiaXNXaW5kb3ciLCJwcm90b3R5cGUiLCJqcXVlcnkiLCJjb25zdHJ1Y3RvciIsInRvQXJyYXkiLCJjYWxsIiwiZ2V0IiwibnVtIiwicHVzaFN0YWNrIiwiZWxlbXMiLCJyZXQiLCJtZXJnZSIsInByZXZPYmplY3QiLCJlYWNoIiwiY2FsbGJhY2siLCJtYXAiLCJlbGVtIiwiaSIsImFwcGx5IiwiYXJndW1lbnRzIiwiZmlyc3QiLCJlcSIsImxhc3QiLCJsZW4iLCJqIiwiZW5kIiwic29ydCIsInNwbGljZSIsImV4dGVuZCIsIm9wdGlvbnMiLCJuYW1lIiwic3JjIiwiY29weSIsImNvcHlJc0FycmF5IiwiY2xvbmUiLCJ0YXJnZXQiLCJkZWVwIiwiaXNGdW5jdGlvbiIsImlzUGxhaW5PYmplY3QiLCJpc0FycmF5IiwidW5kZWZpbmVkIiwiZXhwYW5kbyIsIk1hdGgiLCJyYW5kb20iLCJyZXBsYWNlIiwiaXNSZWFkeSIsImVycm9yIiwibXNnIiwibm9vcCIsIkFycmF5IiwiaXNOdW1lcmljIiwicmVhbFN0cmluZ09iaiIsInBhcnNlRmxvYXQiLCJrZXkiLCJub2RlVHlwZSIsImlzRW1wdHlPYmplY3QiLCJnbG9iYWxFdmFsIiwiY29kZSIsInNjcmlwdCIsImluZGlyZWN0IiwiZXZhbCIsInRyaW0iLCJjcmVhdGVFbGVtZW50IiwidGV4dCIsImhlYWQiLCJhcHBlbmRDaGlsZCIsInBhcmVudE5vZGUiLCJyZW1vdmVDaGlsZCIsImNhbWVsQ2FzZSIsInN0cmluZyIsIm5vZGVOYW1lIiwidG9Mb3dlckNhc2UiLCJtYWtlQXJyYXkiLCJyZXN1bHRzIiwiT2JqZWN0IiwiaW5BcnJheSIsInNlY29uZCIsImdyZXAiLCJpbnZlcnQiLCJtYXRjaGVzIiwiY2FsbGJhY2tFeHBlY3QiLCJhcmciLCJ2YWx1ZSIsImd1aWQiLCJwcm94eSIsInRtcCIsImFyZ3MiLCJub3ciLCJEYXRlIiwiU3ltYm9sIiwiaXRlcmF0b3IiLCJzcGxpdCIsIlNpenpsZSIsIkV4cHIiLCJnZXRUZXh0IiwiaXNYTUwiLCJ0b2tlbml6ZSIsImNvbXBpbGUiLCJzZWxlY3QiLCJvdXRlcm1vc3RDb250ZXh0Iiwic29ydElucHV0IiwiaGFzRHVwbGljYXRlIiwic2V0RG9jdW1lbnQiLCJkb2NFbGVtIiwiZG9jdW1lbnRJc0hUTUwiLCJyYnVnZ3lRU0EiLCJyYnVnZ3lNYXRjaGVzIiwiY29udGFpbnMiLCJwcmVmZXJyZWREb2MiLCJkaXJydW5zIiwiZG9uZSIsImNsYXNzQ2FjaGUiLCJjcmVhdGVDYWNoZSIsInRva2VuQ2FjaGUiLCJjb21waWxlckNhY2hlIiwic29ydE9yZGVyIiwiYSIsImIiLCJwb3AiLCJwdXNoX25hdGl2ZSIsImxpc3QiLCJib29sZWFucyIsIndoaXRlc3BhY2UiLCJpZGVudGlmaWVyIiwiYXR0cmlidXRlcyIsInBzZXVkb3MiLCJyd2hpdGVzcGFjZSIsIlJlZ0V4cCIsInJjb21tYSIsInJjb21iaW5hdG9ycyIsInJhdHRyaWJ1dGVRdW90ZXMiLCJycHNldWRvIiwicmlkZW50aWZpZXIiLCJtYXRjaEV4cHIiLCJJRCIsIkNMQVNTIiwiVEFHIiwiQVRUUiIsIlBTRVVETyIsIkNISUxEIiwiYm9vbCIsIm5lZWRzQ29udGV4dCIsInJpbnB1dHMiLCJyaGVhZGVyIiwicm5hdGl2ZSIsInJxdWlja0V4cHIiLCJyc2libGluZyIsInJlc2NhcGUiLCJydW5lc2NhcGUiLCJmdW5lc2NhcGUiLCJfIiwiZXNjYXBlZCIsImVzY2FwZWRXaGl0ZXNwYWNlIiwiaGlnaCIsIlN0cmluZyIsImZyb21DaGFyQ29kZSIsInVubG9hZEhhbmRsZXIiLCJjaGlsZE5vZGVzIiwiZSIsImVscyIsInNlZWQiLCJtIiwibmlkIiwibmlkc2VsZWN0IiwibWF0Y2giLCJncm91cHMiLCJuZXdTZWxlY3RvciIsIm5ld0NvbnRleHQiLCJvd25lckRvY3VtZW50IiwiZXhlYyIsImdldEVsZW1lbnRCeUlkIiwiaWQiLCJnZXRFbGVtZW50c0J5VGFnTmFtZSIsImdldEVsZW1lbnRzQnlDbGFzc05hbWUiLCJxc2EiLCJ0ZXN0IiwiZ2V0QXR0cmlidXRlIiwic2V0QXR0cmlidXRlIiwidG9TZWxlY3RvciIsImpvaW4iLCJ0ZXN0Q29udGV4dCIsInF1ZXJ5U2VsZWN0b3JBbGwiLCJxc2FFcnJvciIsInJlbW92ZUF0dHJpYnV0ZSIsImtleXMiLCJjYWNoZSIsImNhY2hlTGVuZ3RoIiwic2hpZnQiLCJtYXJrRnVuY3Rpb24iLCJhc3NlcnQiLCJkaXYiLCJhZGRIYW5kbGUiLCJhdHRycyIsImhhbmRsZXIiLCJhdHRySGFuZGxlIiwic2libGluZ0NoZWNrIiwiY3VyIiwiZGlmZiIsInNvdXJjZUluZGV4IiwibmV4dFNpYmxpbmciLCJjcmVhdGVJbnB1dFBzZXVkbyIsImNyZWF0ZUJ1dHRvblBzZXVkbyIsImNyZWF0ZVBvc2l0aW9uYWxQc2V1ZG8iLCJhcmd1bWVudCIsIm1hdGNoSW5kZXhlcyIsImRvY3VtZW50RWxlbWVudCIsIm5vZGUiLCJoYXNDb21wYXJlIiwicGFyZW50IiwiZG9jIiwiZGVmYXVsdFZpZXciLCJ0b3AiLCJhZGRFdmVudExpc3RlbmVyIiwiYXR0YWNoRXZlbnQiLCJjbGFzc05hbWUiLCJjcmVhdGVDb21tZW50IiwiZ2V0QnlJZCIsImdldEVsZW1lbnRzQnlOYW1lIiwiZmluZCIsImZpbHRlciIsImF0dHJJZCIsImdldEF0dHJpYnV0ZU5vZGUiLCJ0YWciLCJpbm5lckhUTUwiLCJpbnB1dCIsIm1hdGNoZXNTZWxlY3RvciIsIndlYmtpdE1hdGNoZXNTZWxlY3RvciIsIm1vek1hdGNoZXNTZWxlY3RvciIsIm9NYXRjaGVzU2VsZWN0b3IiLCJtc01hdGNoZXNTZWxlY3RvciIsImRpc2Nvbm5lY3RlZE1hdGNoIiwiY29tcGFyZURvY3VtZW50UG9zaXRpb24iLCJhZG93biIsImJ1cCIsImNvbXBhcmUiLCJzb3J0RGV0YWNoZWQiLCJhdXAiLCJhcCIsImJwIiwidW5zaGlmdCIsImV4cHIiLCJlbGVtZW50cyIsImF0dHIiLCJ2YWwiLCJzcGVjaWZpZWQiLCJ1bmlxdWVTb3J0IiwiZHVwbGljYXRlcyIsImRldGVjdER1cGxpY2F0ZXMiLCJzb3J0U3RhYmxlIiwidGV4dENvbnRlbnQiLCJmaXJzdENoaWxkIiwibm9kZVZhbHVlIiwic2VsZWN0b3JzIiwiY3JlYXRlUHNldWRvIiwicmVsYXRpdmUiLCI+IiwiZGlyIiwiICIsIisiLCJ+IiwicHJlRmlsdGVyIiwiZXhjZXNzIiwidW5xdW90ZWQiLCJub2RlTmFtZVNlbGVjdG9yIiwicGF0dGVybiIsIm9wZXJhdG9yIiwiY2hlY2siLCJyZXN1bHQiLCJ3aGF0Iiwic2ltcGxlIiwiZm9yd2FyZCIsIm9mVHlwZSIsInhtbCIsInVuaXF1ZUNhY2hlIiwib3V0ZXJDYWNoZSIsIm5vZGVJbmRleCIsInN0YXJ0IiwidXNlQ2FjaGUiLCJsYXN0Q2hpbGQiLCJ1bmlxdWVJRCIsInBzZXVkbyIsInNldEZpbHRlcnMiLCJpZHgiLCJtYXRjaGVkIiwibm90IiwibWF0Y2hlciIsInVubWF0Y2hlZCIsImhhcyIsImlubmVyVGV4dCIsImxhbmciLCJlbGVtTGFuZyIsImhhc2giLCJsb2NhdGlvbiIsInJvb3QiLCJmb2N1cyIsImFjdGl2ZUVsZW1lbnQiLCJoYXNGb2N1cyIsImhyZWYiLCJ0YWJJbmRleCIsImVuYWJsZWQiLCJkaXNhYmxlZCIsImNoZWNrZWQiLCJzZWxlY3RlZCIsInNlbGVjdGVkSW5kZXgiLCJlbXB0eSIsImhlYWRlciIsImJ1dHRvbiIsImV2ZW4iLCJvZGQiLCJsdCIsImd0IiwicmFkaW8iLCJjaGVja2JveCIsImZpbGUiLCJwYXNzd29yZCIsImltYWdlIiwic3VibWl0IiwicmVzZXQiLCJ0b2tlbnMiLCJhZGRDb21iaW5hdG9yIiwiY29tYmluYXRvciIsImJhc2UiLCJjaGVja05vbkVsZW1lbnRzIiwiZG9uZU5hbWUiLCJvbGRDYWNoZSIsIm5ld0NhY2hlIiwiZWxlbWVudE1hdGNoZXIiLCJtYXRjaGVycyIsImNvbmRlbnNlIiwibmV3VW5tYXRjaGVkIiwibWFwcGVkIiwic2V0TWF0Y2hlciIsInBvc3RGaWx0ZXIiLCJwb3N0RmluZGVyIiwicG9zdFNlbGVjdG9yIiwidGVtcCIsInByZU1hcCIsInBvc3RNYXAiLCJwcmVleGlzdGluZyIsImNvbnRleHRzIiwibXVsdGlwbGVDb250ZXh0cyIsIm1hdGNoZXJJbiIsIm1hdGNoZXJPdXQiLCJtYXRjaGVyRnJvbVRva2VucyIsImNoZWNrQ29udGV4dCIsImxlYWRpbmdSZWxhdGl2ZSIsImltcGxpY2l0UmVsYXRpdmUiLCJtYXRjaENvbnRleHQiLCJtYXRjaEFueUNvbnRleHQiLCJmaWx0ZXJzIiwicGFyc2VPbmx5Iiwic29GYXIiLCJwcmVGaWx0ZXJzIiwiY2FjaGVkIiwiZWxlbWVudE1hdGNoZXJzIiwic2V0TWF0Y2hlcnMiLCJieVNldCIsImJ5RWxlbWVudCIsInN1cGVyTWF0Y2hlciIsIm91dGVybW9zdCIsIm1hdGNoZWRDb3VudCIsInNldE1hdGNoZWQiLCJjb250ZXh0QmFja3VwIiwiZGlycnVuc1VuaXF1ZSIsInRva2VuIiwiY29tcGlsZWQiLCJkaXYxIiwiZGVmYXVsdFZhbHVlIiwidW5pcXVlIiwiaXNYTUxEb2MiLCJ1bnRpbCIsInRydW5jYXRlIiwiaXMiLCJzaWJsaW5ncyIsIm4iLCJybmVlZHNDb250ZXh0IiwicnNpbmdsZVRhZyIsInJpc1NpbXBsZSIsIndpbm5vdyIsInF1YWxpZmllciIsInNlbGYiLCJyb290alF1ZXJ5IiwicmVhZHkiLCJwYXJzZUhUTUwiLCJycGFyZW50c3ByZXYiLCJndWFyYW50ZWVkVW5pcXVlIiwiY2hpbGRyZW4iLCJjb250ZW50cyIsIm5leHQiLCJwcmV2Iiwic2libGluZyIsInRhcmdldHMiLCJsIiwiY2xvc2VzdCIsInBvcyIsImluZGV4IiwicHJldkFsbCIsImFkZCIsImFkZEJhY2siLCJwYXJlbnRzIiwicGFyZW50c1VudGlsIiwibmV4dEFsbCIsIm5leHRVbnRpbCIsInByZXZVbnRpbCIsImNvbnRlbnREb2N1bWVudCIsInJldmVyc2UiLCJyZWFkeUxpc3QiLCJybm90d2hpdGUiLCJjb21wbGV0ZWQiLCJyZW1vdmVFdmVudExpc3RlbmVyIiwiQ2FsbGJhY2tzIiwib2JqZWN0IiwiZmxhZyIsImZpcmluZyIsIm1lbW9yeSIsImZpcmVkIiwibG9ja2VkIiwicXVldWUiLCJmaXJpbmdJbmRleCIsImZpcmUiLCJvbmNlIiwic3RvcE9uRmFsc2UiLCJyZW1vdmUiLCJkaXNhYmxlIiwibG9jayIsImZpcmVXaXRoIiwiRGVmZXJyZWQiLCJmdW5jIiwidHVwbGVzIiwic3RhdGUiLCJwcm9taXNlIiwiYWx3YXlzIiwiZGVmZXJyZWQiLCJmYWlsIiwidGhlbiIsImZucyIsIm5ld0RlZmVyIiwidHVwbGUiLCJyZXR1cm5lZCIsInByb2dyZXNzIiwibm90aWZ5IiwicmVzb2x2ZSIsInJlamVjdCIsInBpcGUiLCJzdGF0ZVN0cmluZyIsIndoZW4iLCJzdWJvcmRpbmF0ZSIsInByb2dyZXNzVmFsdWVzIiwicHJvZ3Jlc3NDb250ZXh0cyIsInJlc29sdmVDb250ZXh0cyIsInJlc29sdmVWYWx1ZXMiLCJyZW1haW5pbmciLCJ1cGRhdGVGdW5jIiwidmFsdWVzIiwibm90aWZ5V2l0aCIsInJlc29sdmVXaXRoIiwicmVhZHlXYWl0IiwiaG9sZFJlYWR5IiwiaG9sZCIsIndhaXQiLCJ0cmlnZ2VySGFuZGxlciIsIm9mZiIsInJlYWR5U3RhdGUiLCJkb1Njcm9sbCIsInNldFRpbWVvdXQiLCJhY2Nlc3MiLCJjaGFpbmFibGUiLCJlbXB0eUdldCIsInJhdyIsImJ1bGsiLCJhY2NlcHREYXRhIiwib3duZXIiLCJEYXRhIiwidWlkIiwicmVnaXN0ZXIiLCJpbml0aWFsIiwiZGVmaW5lUHJvcGVydHkiLCJ3cml0YWJsZSIsImNvbmZpZ3VyYWJsZSIsInNldCIsImRhdGEiLCJwcm9wIiwic3RvcmVkIiwiY2FtZWwiLCJoYXNEYXRhIiwiZGF0YVByaXYiLCJkYXRhVXNlciIsInJicmFjZSIsInJtdWx0aURhc2giLCJkYXRhQXR0ciIsInBhcnNlSlNPTiIsInJlbW92ZURhdGEiLCJfZGF0YSIsIl9yZW1vdmVEYXRhIiwiY2FtZWxLZXkiLCJkZXF1ZXVlIiwic3RhcnRMZW5ndGgiLCJob29rcyIsIl9xdWV1ZUhvb2tzIiwic3RvcCIsInNldHRlciIsImNsZWFyUXVldWUiLCJjb3VudCIsImRlZmVyIiwicG51bSIsInNvdXJjZSIsInJjc3NOdW0iLCJjc3NFeHBhbmQiLCJpc0hpZGRlbiIsImVsIiwiY3NzIiwiYWRqdXN0Q1NTIiwidmFsdWVQYXJ0cyIsInR3ZWVuIiwiYWRqdXN0ZWQiLCJzY2FsZSIsIm1heEl0ZXJhdGlvbnMiLCJjdXJyZW50VmFsdWUiLCJ1bml0IiwiY3NzTnVtYmVyIiwiaW5pdGlhbEluVW5pdCIsInN0eWxlIiwicmNoZWNrYWJsZVR5cGUiLCJydGFnTmFtZSIsInJzY3JpcHRUeXBlIiwid3JhcE1hcCIsIm9wdGlvbiIsInRoZWFkIiwiY29sIiwidHIiLCJ0ZCIsIl9kZWZhdWx0IiwiZ2V0QWxsIiwic2V0R2xvYmFsRXZhbCIsInJlZkVsZW1lbnRzIiwib3B0Z3JvdXAiLCJ0Ym9keSIsInRmb290IiwiY29sZ3JvdXAiLCJjYXB0aW9uIiwidGgiLCJyaHRtbCIsImJ1aWxkRnJhZ21lbnQiLCJzY3JpcHRzIiwic2VsZWN0aW9uIiwiaWdub3JlZCIsIndyYXAiLCJmcmFnbWVudCIsImNyZWF0ZURvY3VtZW50RnJhZ21lbnQiLCJub2RlcyIsImh0bWxQcmVmaWx0ZXIiLCJjcmVhdGVUZXh0Tm9kZSIsImNoZWNrQ2xvbmUiLCJjbG9uZU5vZGUiLCJub0Nsb25lQ2hlY2tlZCIsInJrZXlFdmVudCIsInJtb3VzZUV2ZW50IiwicnR5cGVuYW1lc3BhY2UiLCJyZXR1cm5UcnVlIiwicmV0dXJuRmFsc2UiLCJzYWZlQWN0aXZlRWxlbWVudCIsImVyciIsIm9uIiwidHlwZXMiLCJvbmUiLCJvcmlnRm4iLCJldmVudCIsImhhbmRsZU9iakluIiwiZXZlbnRIYW5kbGUiLCJldmVudHMiLCJ0IiwiaGFuZGxlT2JqIiwic3BlY2lhbCIsImhhbmRsZXJzIiwibmFtZXNwYWNlcyIsIm9yaWdUeXBlIiwiZWxlbURhdGEiLCJoYW5kbGUiLCJ0cmlnZ2VyZWQiLCJkaXNwYXRjaCIsImRlbGVnYXRlVHlwZSIsImJpbmRUeXBlIiwibmFtZXNwYWNlIiwiZGVsZWdhdGVDb3VudCIsInNldHVwIiwibWFwcGVkVHlwZXMiLCJvcmlnQ291bnQiLCJ0ZWFyZG93biIsInJlbW92ZUV2ZW50IiwiZml4IiwiaGFuZGxlclF1ZXVlIiwiZGVsZWdhdGVUYXJnZXQiLCJwcmVEaXNwYXRjaCIsImlzUHJvcGFnYXRpb25TdG9wcGVkIiwiY3VycmVudFRhcmdldCIsImlzSW1tZWRpYXRlUHJvcGFnYXRpb25TdG9wcGVkIiwicm5hbWVzcGFjZSIsInByZXZlbnREZWZhdWx0Iiwic3RvcFByb3BhZ2F0aW9uIiwicG9zdERpc3BhdGNoIiwic2VsIiwiaXNOYU4iLCJwcm9wcyIsImZpeEhvb2tzIiwia2V5SG9va3MiLCJvcmlnaW5hbCIsIndoaWNoIiwiY2hhckNvZGUiLCJrZXlDb2RlIiwibW91c2VIb29rcyIsImV2ZW50RG9jIiwiYm9keSIsInBhZ2VYIiwiY2xpZW50WCIsInNjcm9sbExlZnQiLCJjbGllbnRMZWZ0IiwicGFnZVkiLCJjbGllbnRZIiwic2Nyb2xsVG9wIiwiY2xpZW50VG9wIiwib3JpZ2luYWxFdmVudCIsImZpeEhvb2siLCJFdmVudCIsImxvYWQiLCJub0J1YmJsZSIsInRyaWdnZXIiLCJibHVyIiwiY2xpY2siLCJiZWZvcmV1bmxvYWQiLCJyZXR1cm5WYWx1ZSIsImlzRGVmYXVsdFByZXZlbnRlZCIsImRlZmF1bHRQcmV2ZW50ZWQiLCJ0aW1lU3RhbXAiLCJpc1NpbXVsYXRlZCIsInN0b3BJbW1lZGlhdGVQcm9wYWdhdGlvbiIsIm1vdXNlZW50ZXIiLCJtb3VzZWxlYXZlIiwicG9pbnRlcmVudGVyIiwicG9pbnRlcmxlYXZlIiwib3JpZyIsInJlbGF0ZWQiLCJyZWxhdGVkVGFyZ2V0IiwicnhodG1sVGFnIiwicm5vSW5uZXJodG1sIiwicmNoZWNrZWQiLCJyc2NyaXB0VHlwZU1hc2tlZCIsInJjbGVhblNjcmlwdCIsIm1hbmlwdWxhdGlvblRhcmdldCIsImNvbnRlbnQiLCJkaXNhYmxlU2NyaXB0IiwicmVzdG9yZVNjcmlwdCIsImNsb25lQ29weUV2ZW50IiwiZGVzdCIsInBkYXRhT2xkIiwicGRhdGFDdXIiLCJ1ZGF0YU9sZCIsInVkYXRhQ3VyIiwiZG9tTWFuaXAiLCJjb2xsZWN0aW9uIiwiaGFzU2NyaXB0cyIsImlOb0Nsb25lIiwiaHRtbCIsIl9ldmFsVXJsIiwia2VlcERhdGEiLCJjbGVhbkRhdGEiLCJkYXRhQW5kRXZlbnRzIiwiZGVlcERhdGFBbmRFdmVudHMiLCJzcmNFbGVtZW50cyIsImRlc3RFbGVtZW50cyIsImluUGFnZSIsImRldGFjaCIsImFwcGVuZCIsInByZXBlbmQiLCJpbnNlcnRCZWZvcmUiLCJiZWZvcmUiLCJhZnRlciIsInJlcGxhY2VXaXRoIiwicmVwbGFjZUNoaWxkIiwiYXBwZW5kVG8iLCJwcmVwZW5kVG8iLCJpbnNlcnRBZnRlciIsInJlcGxhY2VBbGwiLCJpbnNlcnQiLCJpZnJhbWUiLCJlbGVtZGlzcGxheSIsIkhUTUwiLCJCT0RZIiwiYWN0dWFsRGlzcGxheSIsImRpc3BsYXkiLCJkZWZhdWx0RGlzcGxheSIsIndyaXRlIiwiY2xvc2UiLCJybWFyZ2luIiwicm51bW5vbnB4IiwiZ2V0U3R5bGVzIiwidmlldyIsIm9wZW5lciIsImdldENvbXB1dGVkU3R5bGUiLCJzd2FwIiwib2xkIiwiY3VyQ1NTIiwiY29tcHV0ZWQiLCJ3aWR0aCIsIm1pbldpZHRoIiwibWF4V2lkdGgiLCJnZXRQcm9wZXJ0eVZhbHVlIiwicGl4ZWxNYXJnaW5SaWdodCIsImFkZEdldEhvb2tJZiIsImNvbmRpdGlvbkZuIiwiaG9va0ZuIiwicGl4ZWxQb3NpdGlvblZhbCIsImJveFNpemluZ1JlbGlhYmxlVmFsIiwicGl4ZWxNYXJnaW5SaWdodFZhbCIsInJlbGlhYmxlTWFyZ2luTGVmdFZhbCIsImNvbnRhaW5lciIsImNvbXB1dGVTdHlsZVRlc3RzIiwiY3NzVGV4dCIsImRpdlN0eWxlIiwibWFyZ2luTGVmdCIsIm1hcmdpblJpZ2h0IiwiYmFja2dyb3VuZENsaXAiLCJjbGVhckNsb25lU3R5bGUiLCJwaXhlbFBvc2l0aW9uIiwiYm94U2l6aW5nUmVsaWFibGUiLCJyZWxpYWJsZU1hcmdpbkxlZnQiLCJyZWxpYWJsZU1hcmdpblJpZ2h0IiwibWFyZ2luRGl2IiwicmRpc3BsYXlzd2FwIiwiY3NzU2hvdyIsInBvc2l0aW9uIiwidmlzaWJpbGl0eSIsImNzc05vcm1hbFRyYW5zZm9ybSIsImxldHRlclNwYWNpbmciLCJmb250V2VpZ2h0IiwiY3NzUHJlZml4ZXMiLCJlbXB0eVN0eWxlIiwidmVuZG9yUHJvcE5hbWUiLCJjYXBOYW1lIiwic2V0UG9zaXRpdmVOdW1iZXIiLCJzdWJ0cmFjdCIsIm1heCIsImF1Z21lbnRXaWR0aE9ySGVpZ2h0IiwiZXh0cmEiLCJpc0JvcmRlckJveCIsInN0eWxlcyIsImdldFdpZHRoT3JIZWlnaHQiLCJ2YWx1ZUlzQm9yZGVyQm94Iiwib2Zmc2V0V2lkdGgiLCJvZmZzZXRIZWlnaHQiLCJzaG93SGlkZSIsInNob3ciLCJoaWRkZW4iLCJUd2VlbiIsImVhc2luZyIsImNzc0hvb2tzIiwib3BhY2l0eSIsImFuaW1hdGlvbkl0ZXJhdGlvbkNvdW50IiwiY29sdW1uQ291bnQiLCJmaWxsT3BhY2l0eSIsImZsZXhHcm93IiwiZmxleFNocmluayIsImxpbmVIZWlnaHQiLCJvcmRlciIsIm9ycGhhbnMiLCJ3aWRvd3MiLCJ6SW5kZXgiLCJ6b29tIiwiY3NzUHJvcHMiLCJmbG9hdCIsIm9yaWdOYW1lIiwiaXNGaW5pdGUiLCJnZXRCb3VuZGluZ0NsaWVudFJlY3QiLCJsZWZ0IiwibWFyZ2luIiwicGFkZGluZyIsImJvcmRlciIsInByZWZpeCIsInN1ZmZpeCIsImV4cGFuZCIsImV4cGFuZGVkIiwicGFydHMiLCJoaWRlIiwidG9nZ2xlIiwicHJvcEhvb2tzIiwicnVuIiwicGVyY2VudCIsImVhc2VkIiwiZHVyYXRpb24iLCJzdGVwIiwiZngiLCJsaW5lYXIiLCJwIiwic3dpbmciLCJjb3MiLCJQSSIsImZ4Tm93IiwidGltZXJJZCIsIm9wdCIsInJmeHR5cGVzIiwicnJ1biIsImNyZWF0ZUZ4Tm93IiwiZ2VuRngiLCJpbmNsdWRlV2lkdGgiLCJoZWlnaHQiLCJjcmVhdGVUd2VlbiIsImFuaW1hdGlvbiIsIkFuaW1hdGlvbiIsInR3ZWVuZXJzIiwicHJvcGVydGllcyIsInN0b3BwZWQiLCJwcmVmaWx0ZXJzIiwidGljayIsImN1cnJlbnRUaW1lIiwic3RhcnRUaW1lIiwidHdlZW5zIiwib3B0cyIsInNwZWNpYWxFYXNpbmciLCJvcmlnaW5hbFByb3BlcnRpZXMiLCJvcmlnaW5hbE9wdGlvbnMiLCJnb3RvRW5kIiwicmVqZWN0V2l0aCIsInByb3BGaWx0ZXIiLCJ0aW1lciIsImFuaW0iLCJjb21wbGV0ZSIsIioiLCJ0d2VlbmVyIiwib2xkZmlyZSIsImRhdGFTaG93IiwidW5xdWV1ZWQiLCJvdmVyZmxvdyIsIm92ZXJmbG93WCIsIm92ZXJmbG93WSIsInByZWZpbHRlciIsInNwZWVkIiwic3BlZWRzIiwiZmFkZVRvIiwidG8iLCJhbmltYXRlIiwib3B0YWxsIiwiZG9BbmltYXRpb24iLCJmaW5pc2giLCJzdG9wUXVldWUiLCJ0aW1lcnMiLCJjc3NGbiIsInNsaWRlRG93biIsInNsaWRlVXAiLCJzbGlkZVRvZ2dsZSIsImZhZGVJbiIsImZhZGVPdXQiLCJmYWRlVG9nZ2xlIiwiaW50ZXJ2YWwiLCJzZXRJbnRlcnZhbCIsImNsZWFySW50ZXJ2YWwiLCJzbG93IiwiZmFzdCIsImRlbGF5IiwidGltZSIsInRpbWVvdXQiLCJjbGVhclRpbWVvdXQiLCJjaGVja09uIiwib3B0U2VsZWN0ZWQiLCJvcHREaXNhYmxlZCIsInJhZGlvVmFsdWUiLCJib29sSG9vayIsInJlbW92ZUF0dHIiLCJuVHlwZSIsImF0dHJIb29rcyIsInByb3BOYW1lIiwiYXR0ck5hbWVzIiwicHJvcEZpeCIsImdldHRlciIsInJmb2N1c2FibGUiLCJyY2xpY2thYmxlIiwicmVtb3ZlUHJvcCIsInRhYmluZGV4IiwicGFyc2VJbnQiLCJmb3IiLCJjbGFzcyIsInJjbGFzcyIsImdldENsYXNzIiwiYWRkQ2xhc3MiLCJjbGFzc2VzIiwiY3VyVmFsdWUiLCJjbGF6eiIsImZpbmFsVmFsdWUiLCJyZW1vdmVDbGFzcyIsInRvZ2dsZUNsYXNzIiwic3RhdGVWYWwiLCJjbGFzc05hbWVzIiwiaGFzQ2xhc3MiLCJycmV0dXJuIiwicnNwYWNlcyIsInZhbEhvb2tzIiwib3B0aW9uU2V0IiwicmZvY3VzTW9ycGgiLCJvbmx5SGFuZGxlcnMiLCJidWJibGVUeXBlIiwib250eXBlIiwiZXZlbnRQYXRoIiwiaXNUcmlnZ2VyIiwicGFyZW50V2luZG93Iiwic2ltdWxhdGUiLCJob3ZlciIsImZuT3ZlciIsImZuT3V0IiwiZm9jdXNpbiIsImF0dGFjaGVzIiwibm9uY2UiLCJycXVlcnkiLCJKU09OIiwicGFyc2UiLCJwYXJzZVhNTCIsIkRPTVBhcnNlciIsInBhcnNlRnJvbVN0cmluZyIsInJoYXNoIiwicnRzIiwicmhlYWRlcnMiLCJybm9Db250ZW50IiwicnByb3RvY29sIiwidHJhbnNwb3J0cyIsImFsbFR5cGVzIiwib3JpZ2luQW5jaG9yIiwiYWRkVG9QcmVmaWx0ZXJzT3JUcmFuc3BvcnRzIiwic3RydWN0dXJlIiwiZGF0YVR5cGVFeHByZXNzaW9uIiwiZGF0YVR5cGUiLCJkYXRhVHlwZXMiLCJpbnNwZWN0UHJlZmlsdGVyc09yVHJhbnNwb3J0cyIsImpxWEhSIiwiaW5zcGVjdGVkIiwic2Vla2luZ1RyYW5zcG9ydCIsImluc3BlY3QiLCJwcmVmaWx0ZXJPckZhY3RvcnkiLCJkYXRhVHlwZU9yVHJhbnNwb3J0IiwiYWpheEV4dGVuZCIsImZsYXRPcHRpb25zIiwiYWpheFNldHRpbmdzIiwiYWN0aXZlIiwibGFzdE1vZGlmaWVkIiwiZXRhZyIsInVybCIsImlzTG9jYWwiLCJwcm90b2NvbCIsInByb2Nlc3NEYXRhIiwiYXN5bmMiLCJjb250ZW50VHlwZSIsImFjY2VwdHMiLCJqc29uIiwicmVzcG9uc2VGaWVsZHMiLCJjb252ZXJ0ZXJzIiwiKiB0ZXh0IiwidGV4dCBodG1sIiwidGV4dCBqc29uIiwidGV4dCB4bWwiLCJhamF4U2V0dXAiLCJzZXR0aW5ncyIsImFqYXhQcmVmaWx0ZXIiLCJhamF4VHJhbnNwb3J0IiwiYWpheCIsInRyYW5zcG9ydCIsImNhY2hlVVJMIiwicmVzcG9uc2VIZWFkZXJzU3RyaW5nIiwicmVzcG9uc2VIZWFkZXJzIiwidGltZW91dFRpbWVyIiwidXJsQW5jaG9yIiwiZmlyZUdsb2JhbHMiLCJzIiwiY2FsbGJhY2tDb250ZXh0IiwiZ2xvYmFsRXZlbnRDb250ZXh0IiwiY29tcGxldGVEZWZlcnJlZCIsInN0YXR1c0NvZGUiLCJyZXF1ZXN0SGVhZGVycyIsInJlcXVlc3RIZWFkZXJzTmFtZXMiLCJzdHJBYm9ydCIsImdldFJlc3BvbnNlSGVhZGVyIiwiZ2V0QWxsUmVzcG9uc2VIZWFkZXJzIiwic2V0UmVxdWVzdEhlYWRlciIsImxuYW1lIiwib3ZlcnJpZGVNaW1lVHlwZSIsIm1pbWVUeXBlIiwic3RhdHVzIiwiYWJvcnQiLCJzdGF0dXNUZXh0IiwiZmluYWxUZXh0Iiwic3VjY2VzcyIsIm1ldGhvZCIsImNyb3NzRG9tYWluIiwiaG9zdCIsInBhcmFtIiwidHJhZGl0aW9uYWwiLCJoYXNDb250ZW50IiwiaWZNb2RpZmllZCIsImhlYWRlcnMiLCJiZWZvcmVTZW5kIiwic2VuZCIsIm5hdGl2ZVN0YXR1c1RleHQiLCJyZXNwb25zZXMiLCJpc1N1Y2Nlc3MiLCJyZXNwb25zZSIsIm1vZGlmaWVkIiwiY3QiLCJmaW5hbERhdGFUeXBlIiwiZmlyc3REYXRhVHlwZSIsImFqYXhIYW5kbGVSZXNwb25zZXMiLCJjb252MiIsImN1cnJlbnQiLCJjb252IiwiZGF0YUZpbHRlciIsInRocm93cyIsImFqYXhDb252ZXJ0IiwiZ2V0SlNPTiIsImdldFNjcmlwdCIsIndyYXBBbGwiLCJmaXJzdEVsZW1lbnRDaGlsZCIsIndyYXBJbm5lciIsInVud3JhcCIsInZpc2libGUiLCJnZXRDbGllbnRSZWN0cyIsInIyMCIsInJicmFja2V0IiwickNSTEYiLCJyc3VibWl0dGVyVHlwZXMiLCJyc3VibWl0dGFibGUiLCJidWlsZFBhcmFtcyIsInYiLCJlbmNvZGVVUklDb21wb25lbnQiLCJzZXJpYWxpemUiLCJzZXJpYWxpemVBcnJheSIsInhociIsIlhNTEh0dHBSZXF1ZXN0IiwieGhyU3VjY2Vzc1N0YXR1cyIsIjAiLCIxMjIzIiwieGhyU3VwcG9ydGVkIiwiY29ycyIsImVycm9yQ2FsbGJhY2siLCJvcGVuIiwidXNlcm5hbWUiLCJ4aHJGaWVsZHMiLCJvbmxvYWQiLCJvbmVycm9yIiwib25hYm9ydCIsIm9ucmVhZHlzdGF0ZWNoYW5nZSIsInJlc3BvbnNlVHlwZSIsInJlc3BvbnNlVGV4dCIsImJpbmFyeSIsInRleHQgc2NyaXB0IiwiY2hhcnNldCIsInNjcmlwdENoYXJzZXQiLCJldnQiLCJvbGRDYWxsYmFja3MiLCJyanNvbnAiLCJqc29ucCIsImpzb25wQ2FsbGJhY2siLCJvcmlnaW5hbFNldHRpbmdzIiwiY2FsbGJhY2tOYW1lIiwib3ZlcndyaXR0ZW4iLCJyZXNwb25zZUNvbnRhaW5lciIsImpzb25Qcm9wIiwia2VlcFNjcmlwdHMiLCJwYXJzZWQiLCJfbG9hZCIsImdldFdpbmRvdyIsInBhcmFtcyIsImFuaW1hdGVkIiwib2Zmc2V0Iiwic2V0T2Zmc2V0IiwiY3VyUG9zaXRpb24iLCJjdXJMZWZ0IiwiY3VyQ1NTVG9wIiwiY3VyVG9wIiwiY3VyT2Zmc2V0IiwiY3VyQ1NTTGVmdCIsImN1ckVsZW0iLCJ1c2luZyIsIndpbiIsImJveCIsInBhZ2VZT2Zmc2V0IiwicGFnZVhPZmZzZXQiLCJvZmZzZXRQYXJlbnQiLCJwYXJlbnRPZmZzZXQiLCJzY3JvbGxUbyIsIkhlaWdodCIsIldpZHRoIiwiIiwiZGVmYXVsdEV4dHJhIiwiZnVuY05hbWUiLCJiaW5kIiwidW5iaW5kIiwiZGVsZWdhdGUiLCJ1bmRlbGVnYXRlIiwic2l6ZSIsImFuZFNlbGYiLCJkZWZpbmUiLCJhbWQiLCJfalF1ZXJ5IiwiXyQiLCIkIiwibm9Db25mbGljdCIsIndOdW1iIiwiRm9ybWF0T3B0aW9ucyIsInN0clJldmVyc2UiLCJzdHJTdGFydHNXaXRoIiwic3Vic3RyaW5nIiwidGhyb3dFcXVhbEVycm9yIiwiRiIsImlzVmFsaWROdW1iZXIiLCJmb3JtYXRUbyIsImRlY2ltYWxzIiwidGhvdXNhbmQiLCJtYXJrIiwiZW5jb2RlciIsImRlY29kZXIiLCJuZWdhdGl2ZUJlZm9yZSIsIm5lZ2F0aXZlIiwiZWRpdCIsInVuZG8iLCJpbnB1dElzTmVnYXRpdmUiLCJpbnB1dFBpZWNlcyIsImlucHV0QmFzZSIsImV4cCIsIm9yaWdpbmFsSW5wdXQiLCJpbnB1dERlY2ltYWxzIiwib3V0cHV0IiwidG9GaXhlZCIsImFicyIsInJvdW5kIiwiZm9ybWF0RnJvbSIsIk51bWJlciIsInBhc3NBbGwiLCJpbnB1dE9wdGlvbnMiLCJvcHRpb25OYW1lIiwib3B0aW9uVmFsdWUiLCJmaWx0ZXJlZE9wdGlvbnMiLCJ2YWxpZGF0ZSIsImZyb20iLCJub1VpU2xpZGVyIiwiZXQiLCJydCIsIm50IiwiciIsImF0Iiwic3QiLCJpdCIsIm1pbiIsIm90IiwiY2xhc3NMaXN0IiwiY29tcGF0TW9kZSIsIngiLCJ5IiwiYyIsImYiLCJvIiwieFBjdCIsInhWYWwiLCJ4U3RlcHMiLCJ4SGlnaGVzdENvbXBsZXRlU3RlcCIsInhOdW1TdGVwcyIsImNlaWwiLCJzbmFwIiwiZ2V0TWFyZ2luIiwidG9TdGVwcGluZyIsInUiLCJmcm9tU3RlcHBpbmciLCJnZXRTdGVwIiwiZ2V0TmVhcmJ5U3RlcHMiLCJzdGVwQmVmb3JlIiwic3RhcnRWYWx1ZSIsImhpZ2hlc3RTdGVwIiwidGhpc1N0ZXAiLCJzdGVwQWZ0ZXIiLCJjb3VudFN0ZXBEZWNpbWFscyIsImNvbnZlcnQiLCJkIiwiaCIsInNpbmdsZVN0ZXAiLCJzcGVjdHJ1bSIsImciLCJoYW5kbGVzIiwiUyIsImFuaW1hdGlvbkR1cmF0aW9uIiwiY29ubmVjdCIsIm9ydCIsIkUiLCJsaW1pdCIsIkMiLCJOIiwiVSIsInRhcCIsImRyYWciLCJmaXhlZCIsInVuY29uc3RyYWluZWQiLCJrIiwidG9vbHRpcHMiLCJmb3JFYWNoIiwiUCIsImFyaWFGb3JtYXQiLCJBIiwiZm9ybWF0IiwiTSIsImtleWJvYXJkU3VwcG9ydCIsIlYiLCJPIiwiY3NzUHJlZml4IiwiTCIsImNzc0NsYXNzZXMiLCJ1dCIsImRpcmVjdGlvbiIsInJhbmdlIiwib3JpZW50YXRpb24iLCJiZWhhdmlvdXIiLCJvcmlnaW4iLCJoYW5kbGVMb3dlciIsImhhbmRsZVVwcGVyIiwiaG9yaXpvbnRhbCIsInZlcnRpY2FsIiwiYmFja2dyb3VuZCIsImNvbm5lY3RzIiwibHRyIiwicnRsIiwiZHJhZ2dhYmxlIiwidG9vbHRpcCIsInBpcHMiLCJwaXBzSG9yaXpvbnRhbCIsInBpcHNWZXJ0aWNhbCIsIm1hcmtlciIsIm1hcmtlckhvcml6b250YWwiLCJtYXJrZXJWZXJ0aWNhbCIsIm1hcmtlck5vcm1hbCIsIm1hcmtlckxhcmdlIiwibWFya2VyU3ViIiwidmFsdWVIb3Jpem9udGFsIiwidmFsdWVWZXJ0aWNhbCIsInZhbHVlTm9ybWFsIiwidmFsdWVMYXJnZSIsInZhbHVlU3ViIiwibXNUcmFuc2Zvcm0iLCJ0cmFuc2Zvcm0iLCJ0cmFuc2Zvcm1SdWxlIiwieiIsIm5hdmlnYXRvciIsInBvaW50ZXJFbmFibGVkIiwibW92ZSIsIm1zUG9pbnRlckVuYWJsZWQiLCJDU1MiLCJzdXBwb3J0cyIsInBhcmVudEVsZW1lbnQiLCJtb2RlIiwiZGVuc2l0eSIsInN0ZXBwZWQiLCJ0b3VjaGVzIiwiY2hhbmdlZFRvdWNoZXMiLCJwYWdlT2Zmc2V0IiwicG9pbnRzIiwiY3Vyc29yIiwiaGFzQXR0cmlidXRlIiwiZG9Ob3RSZWplY3QiLCJidXR0b25zIiwiY2FsY1BvaW50IiwicGFzc2l2ZSIsIkgiLCJ1c2VyQWdlbnQiLCJEIiwiUiIsIlQiLCJhcHBWZXJzaW9uIiwiYnV0dG9uc1Byb3BlcnR5Iiwic3RhcnRDYWxjUG9pbnQiLCJiYXNlU2l6ZSIsImxvY2F0aW9ucyIsImhhbmRsZU51bWJlcnMiLCJsaXN0ZW5lcnMiLCJKIiwiWSIsInEiLCJYIiwiSSIsIlciLCJLIiwiRyIsIlEiLCJaIiwidHQiLCJkZXN0cm95Iiwic3RlcHMiLCJzZXRIYW5kbGUiLCJfX21vdmVIYW5kbGVzIiwidXBkYXRlT3B0aW9ucyIsInJlbW92ZVBpcHMiLCJfX3NwZWN0cnVtIiwiY3JlYXRlIiwiZXhpc3RzIiwia2V5Q29udHJvbCIsInRoZW1lIiwiY3VycmVudE5vIiwidG90YWxObyIsInNsaWRlIiwiZGlmZmVyZW5jZSIsInRvdGFsIiwibWF4SGl0Iiwic2V0U2xpZGUiLCJzbGlkZVN0YXR1cyIsImdldFNsaWRlIiwic2xpZGVTd2l0Y2giLCJpbWFnZVBhdGgiLCJza2lwIiwia2V5dXAiLCJrZXlwcmVzcyIsIlNsaWNrIiwibmljZVNlbGVjdCIsImNvbnNvbGUiLCJsb2ciLCJwb2ludGVyRXZlbnRzIiwicmVxdWlyZSIsImRlZmF1bHRzIiwiYWNjZXNzaWJpbGl0eSIsImFkYXB0aXZlSGVpZ2h0IiwiYXBwZW5kQXJyb3dzIiwiYXBwZW5kRG90cyIsImFycm93cyIsImFzTmF2Rm9yIiwicHJldkFycm93IiwibmV4dEFycm93IiwiYXV0b3BsYXkiLCJhdXRvcGxheVNwZWVkIiwiY2VudGVyTW9kZSIsImNlbnRlclBhZGRpbmciLCJjc3NFYXNlIiwiY3VzdG9tUGFnaW5nIiwiZG90cyIsImRvdHNDbGFzcyIsImVkZ2VGcmljdGlvbiIsImZhZGUiLCJmb2N1c09uU2VsZWN0IiwiZm9jdXNPbkNoYW5nZSIsImluZmluaXRlIiwiaW5pdGlhbFNsaWRlIiwibGF6eUxvYWQiLCJtb2JpbGVGaXJzdCIsInBhdXNlT25Ib3ZlciIsInBhdXNlT25Gb2N1cyIsInBhdXNlT25Eb3RzSG92ZXIiLCJyZXNwb25kVG8iLCJyZXNwb25zaXZlIiwicm93cyIsInNsaWRlc1BlclJvdyIsInNsaWRlc1RvU2hvdyIsInNsaWRlc1RvU2Nyb2xsIiwic3dpcGUiLCJzd2lwZVRvU2xpZGUiLCJ0b3VjaE1vdmUiLCJ0b3VjaFRocmVzaG9sZCIsInVzZUNTUyIsInVzZVRyYW5zZm9ybSIsInZhcmlhYmxlV2lkdGgiLCJ2ZXJ0aWNhbFN3aXBpbmciLCJ3YWl0Rm9yQW5pbWF0ZSIsImluaXRpYWxzIiwiYW5pbWF0aW5nIiwiZHJhZ2dpbmciLCJhdXRvUGxheVRpbWVyIiwiY3VycmVudERpcmVjdGlvbiIsImN1cnJlbnRMZWZ0IiwiY3VycmVudFNsaWRlIiwiJGRvdHMiLCJsaXN0V2lkdGgiLCJsaXN0SGVpZ2h0IiwibG9hZEluZGV4IiwiJG5leHRBcnJvdyIsIiRwcmV2QXJyb3ciLCJzY3JvbGxpbmciLCJzbGlkZUNvdW50Iiwic2xpZGVXaWR0aCIsIiRzbGlkZVRyYWNrIiwiJHNsaWRlcyIsInNsaWRpbmciLCJzbGlkZU9mZnNldCIsInN3aXBlTGVmdCIsInN3aXBpbmciLCIkbGlzdCIsInRvdWNoT2JqZWN0IiwidHJhbnNmb3Jtc0VuYWJsZWQiLCJ1bnNsaWNrZWQiLCJhY3RpdmVCcmVha3BvaW50IiwiYW5pbVR5cGUiLCJhbmltUHJvcCIsImJyZWFrcG9pbnRzIiwiYnJlYWtwb2ludFNldHRpbmdzIiwiY3NzVHJhbnNpdGlvbnMiLCJmb2N1c3NlZCIsImludGVycnVwdGVkIiwicGF1c2VkIiwicG9zaXRpb25Qcm9wIiwicm93Q291bnQiLCJzaG91bGRDbGljayIsIiRzbGlkZXIiLCIkc2xpZGVzQ2FjaGUiLCJ0cmFuc2Zvcm1UeXBlIiwidHJhbnNpdGlvblR5cGUiLCJ2aXNpYmlsaXR5Q2hhbmdlIiwid2luZG93V2lkdGgiLCJ3aW5kb3dUaW1lciIsIm1vekhpZGRlbiIsIndlYmtpdEhpZGRlbiIsImF1dG9QbGF5IiwiYXV0b1BsYXlDbGVhciIsImF1dG9QbGF5SXRlcmF0b3IiLCJjaGFuZ2VTbGlkZSIsImNsaWNrSGFuZGxlciIsInNlbGVjdEhhbmRsZXIiLCJzZXRQb3NpdGlvbiIsInN3aXBlSGFuZGxlciIsImRyYWdIYW5kbGVyIiwia2V5SGFuZGxlciIsImluc3RhbmNlVWlkIiwiaHRtbEV4cHIiLCJyZWdpc3RlckJyZWFrcG9pbnRzIiwiYWN0aXZhdGVBREEiLCJhcmlhLWhpZGRlbiIsImFkZFNsaWRlIiwic2xpY2tBZGQiLCJ1bmxvYWQiLCJyZWluaXQiLCJhbmltYXRlSGVpZ2h0Iiwib3V0ZXJIZWlnaHQiLCJhbmltYXRlU2xpZGUiLCJhbmltU3RhcnQiLCJhcHBseVRyYW5zaXRpb24iLCJkaXNhYmxlVHJhbnNpdGlvbiIsImdldE5hdlRhcmdldCIsInNsaWNrIiwic2xpZGVIYW5kbGVyIiwiYnVpbGRBcnJvd3MiLCJhcmlhLWRpc2FibGVkIiwiYnVpbGREb3RzIiwiZ2V0RG90Q291bnQiLCJidWlsZE91dCIsInNldHVwSW5maW5pdGUiLCJ1cGRhdGVEb3RzIiwic2V0U2xpZGVDbGFzc2VzIiwiYnVpbGRSb3dzIiwiY2hlY2tSZXNwb25zaXZlIiwiaW5uZXJXaWR0aCIsInVuc2xpY2siLCJyZWZyZXNoIiwibWVzc2FnZSIsImNoZWNrTmF2aWdhYmxlIiwiZ2V0TmF2aWdhYmxlSW5kZXhlcyIsImNsZWFuVXBFdmVudHMiLCJpbnRlcnJ1cHQiLCJjbGVhblVwU2xpZGVFdmVudHMiLCJvcmllbnRhdGlvbkNoYW5nZSIsInJlc2l6ZSIsImNsZWFuVXBSb3dzIiwiZmFkZVNsaWRlIiwiZmFkZVNsaWRlT3V0IiwiZmlsdGVyU2xpZGVzIiwic2xpY2tGaWx0ZXIiLCJmb2N1c0hhbmRsZXIiLCJnZXRDdXJyZW50Iiwic2xpY2tDdXJyZW50U2xpZGUiLCJnZXRMZWZ0IiwiZmxvb3IiLCJvZmZzZXRMZWZ0Iiwib3V0ZXJXaWR0aCIsImdldE9wdGlvbiIsInNsaWNrR2V0T3B0aW9uIiwiZ2V0U2xpY2siLCJnZXRTbGlkZUNvdW50IiwiZ29UbyIsInNsaWNrR29UbyIsInNldFByb3BzIiwic3RhcnRMb2FkIiwibG9hZFNsaWRlciIsImluaXRpYWxpemVFdmVudHMiLCJ1cGRhdGVBcnJvd3MiLCJpbml0QURBIiwicm9sZSIsImFyaWEtZGVzY3JpYmVkYnkiLCJhcmlhLWNvbnRyb2xzIiwiYXJpYS1sYWJlbCIsImFyaWEtc2VsZWN0ZWQiLCJpbml0QXJyb3dFdmVudHMiLCJpbml0RG90RXZlbnRzIiwiaW5pdFNsaWRlRXZlbnRzIiwiYWN0aW9uIiwiaW5pdFVJIiwidGFnTmFtZSIsInByb2dyZXNzaXZlTGF6eUxvYWQiLCJzbGlja05leHQiLCJwYXVzZSIsInNsaWNrUGF1c2UiLCJwbGF5Iiwic2xpY2tQbGF5IiwicG9zdFNsaWRlIiwic2xpY2tQcmV2IiwiYnJlYWtwb2ludCIsIndpbmRvd0RlbGF5IiwicmVtb3ZlU2xpZGUiLCJzbGlja1JlbW92ZSIsInNldENTUyIsInNldERpbWVuc2lvbnMiLCJzZXRGYWRlIiwicmlnaHQiLCJzZXRIZWlnaHQiLCJzZXRPcHRpb24iLCJzbGlja1NldE9wdGlvbiIsIldlYmtpdFRyYW5zaXRpb24iLCJNb3pUcmFuc2l0aW9uIiwibXNUcmFuc2l0aW9uIiwiT1RyYW5zZm9ybSIsInBlcnNwZWN0aXZlUHJvcGVydHkiLCJ3ZWJraXRQZXJzcGVjdGl2ZSIsIk1velRyYW5zZm9ybSIsIk1velBlcnNwZWN0aXZlIiwid2Via2l0VHJhbnNmb3JtIiwic3dpcGVEaXJlY3Rpb24iLCJzdGFydFgiLCJjdXJYIiwic3RhcnRZIiwiY3VyWSIsImF0YW4yIiwic3dpcGVFbmQiLCJzd2lwZUxlbmd0aCIsImVkZ2VIaXQiLCJtaW5Td2lwZSIsImZpbmdlckNvdW50Iiwic3dpcGVTdGFydCIsInN3aXBlTW92ZSIsInNxcnQiLCJwb3ciLCJ1bmZpbHRlclNsaWRlcyIsInNsaWNrVW5maWx0ZXIiLCJ2YWx1ZVNpemVQb3B1bGFyZSIsIkhvdmVyRG93biIsIkhlYWRlclRvcExhbmciLCJBcnJvd0NsaWNrIiwiU2xpZGVyUHJvZHVjdEFycm93IiwiU2xpZGVyUHJvZHVjdEhpdHNBcnJvdyIsIlNsaWRlckZlZWRiYWNrQXJyb3ciLCJTaXplIiwiU2l6ZVVwIiwiU2xpZGVyUHJvZHVjdERvdHMiLCJTbGlkZXJQcm9kdWN0SGl0c0RvdHMiLCJTbGlkZXJGZWVkYmFja0RvdHMiLCJGZWVkYmFja0l0ZW1zIiwiY291bnRlcnMiLCJGZWVkYmFja0dyYXlTdmciLCJhbGVydCIsIlRhYlNwcm9kdWN0Iiwib25tb3VzZW92ZXIiLCJvbm1vdXNlb3V0IiwiQ2F0YWxvZ1Byb2R1Y3RBbGwiLCJjcmVhdGVFbGVtZW50VHdvIiwiTW91c2UiLCJidXR0b25fY2F0YWxvZyIsIkRldmljZSIsImFkZENsaWNrIiwibGlua2hvdmVyIiwiaGFtYnVyZ2VyIiwiTW9kYWxIZWFkZXJNZW51IiwiTW9kYWxIZWFkZXJUb3AiLCJNb2JSb3dFbGVtZW50IiwiTW9iQWRhcHRpdmUiLCJNb2JUZWxTZWFyY2giLCJNb2JpbGVIZWFkZXJUb3AiLCJtZW51IiwibGFzdEVsZW1lbnRDaGlsZCIsIm1hc3NpdmVUd28iLCJkZXZpY2VMaSIsImNyZWF0ZUVsZW0iLCJjb3VudEFkYXB0aXZlIiwiRHJvcERvd24iLCJkcm9wRG93biIsIm1hc3NpdmUiLCJGaWx0ZXJzUHJvZHVjdENvbnRhaW5lciIsIkJhbm5lciIsIkJ1dHRvbkNsb3NlIiwiVGV4dENvbnRhaW5lciIsIkl0ZW1zT25saW5lU3RvcmUiLCJGaWx0ZXJQcm9kdWN0IiwiUG9wVXBNb2JpbGVGaWx0ZXIiLCJrZXlwcmVzc1NsaWRlciIsImlucHV0cyIsImFycm93IiwiY2xpY2tQb3oiXSwibWFwcGluZ3MiOiJDQWNDLFNBQVVBLEVBQVFDLEdBRUssaUJBQVhDLFFBQWlELGlCQUFuQkEsT0FBT0MsUUFRaERELE9BQU9DLFFBQVVILEVB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czFCLEVBQWU5YixXQUFXcUosVUFBVXJzQixFQUFRL2UsRUFBUXVvQixHQUd4RCxNQUVKLEtBQUssSUFJZ0IsS0FGakJBLEVBQVcyRCxFQUFLLE1BR1ozRCxFQUFXLEdBR0UsT0FBYkEsR0FDQXMxQixFQUFlOWIsV0FBV3FKLFVBQVVyc0IsRUFBUS9lLEVBQVF1b0IsUUFRNUVpWCxFQUFFM21DLFVBQVUrWixNQUFNLFdBQ2Q0c0IsRUFBRSxVQUFVb04iLCJmaWxlIjoibWFpbi5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qIVxyXG4gKiBqUXVlcnkgSmF2YVNjcmlwdCBMaWJyYXJ5IHYyLjIuNFxyXG4gKiBodHRwOi8vanF1ZXJ5LmNvbS9cclxuICpcclxuICogSW5jbHVkZXMgU2l6emxlLmpzXHJcbiAqIGh0dHA6Ly9zaXp6bGVqcy5jb20vXHJcbiAqXHJcbiAqIENvcHlyaWdodCBqUXVlcnkgRm91bmRhdGlvbiBhbmQgb3RoZXIgY29udHJpYnV0b3JzXHJcbiAqIFJlbGVhc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZVxyXG4gKiBodHRwOi8vanF1ZXJ5Lm9yZy9saWNlbnNlXHJcbiAqXHJcbiAqIERhdGU6IDIwMTYtMDUtMjBUMTc6MjNaXHJcbiAqL1xyXG5cclxuKGZ1bmN0aW9uKCBnbG9iYWwsIGZhY3RvcnkgKSB7XHJcblxyXG5cdGlmICggdHlwZW9mIG1vZHVsZSA9PT0gXCJvYmplY3RcIiAmJiB0eXBlb2YgbW9kdWxlLmV4cG9ydHMgPT09IFwib2JqZWN0XCIgKSB7XHJcblx0XHQvLyBGb3IgQ29tbW9uSlMgYW5kIENvbW1vbkpTLWxpa2UgZW52aXJvbm1lbnRzIHdoZXJlIGEgcHJvcGVyIGB3aW5kb3dgXHJcblx0XHQvLyBpcyBwcmVzZW50LCBleGVjdXRlIHRoZSBmYWN0b3J5IGFuZCBnZXQgalF1ZXJ5LlxyXG5cdFx0Ly8gRm9yIGVudmlyb25tZW50cyB0aGF0IGRvIG5vdCBoYXZlIGEgYHdpbmRvd2Agd2l0aCBhIGBkb2N1bWVudGBcclxuXHRcdC8vIChzdWNoIGFzIE5vZGUuanMpLCBleHBvc2UgYSBmYWN0b3J5IGFzIG1vZHVsZS5leHBvcnRzLlxyXG5cdFx0Ly8gVGhpcyBhY2NlbnR1YXRlcyB0aGUgbmVlZCBmb3IgdGhlIGNyZWF0aW9uIG9mIGEgcmVhbCBgd2luZG93YC5cclxuXHRcdC8vIGUuZy4gdmFyIGpRdWVyeSA9IHJlcXVpcmUoXCJqcXVlcnlcIikod2luZG93KTtcclxuXHRcdC8vIFNlZSB0aWNrZXQgIzE0NTQ5IGZvciBtb3JlIGluZm8uXHJcblx0XHRtb2R1bGUuZXhwb3J0cyA9IGdsb2JhbC5kb2N1bWVudCA/XHJcblx0XHRcdGZhY3RvcnkoIGdsb2JhbCwgdHJ1ZSApIDpcclxuXHRcdFx0ZnVuY3Rpb24oIHcgKSB7XHJcblx0XHRcdFx0aWYgKCAhdy5kb2N1bWVudCApIHtcclxuXHRcdFx0XHRcdHRocm93IG5ldyBFcnJvciggXCJqUXVlcnkgcmVxdWlyZXMgYSB3aW5kb3cgd2l0aCBhIGRvY3VtZW50XCIgKTtcclxuXHRcdFx0XHR9XHJcblx0XHRcdFx0cmV0dXJuIGZhY3RvcnkoIHcgKTtcclxuXHRcdFx0fTtcclxuXHR9IGVsc2Uge1xyXG5cdFx0ZmFjdG9yeSggZ2xvYmFsICk7XHJcblx0fVxyXG5cclxuLy8gUGFzcyB0aGlzIGlmIHdpbmRvdyBpcyBub3QgZGVmaW5lZCB5ZXRcclxufSh0eXBlb2Ygd2luZG93ICE9PSBcInVuZGVmaW5lZFwiID8gd2luZG93IDogdGhpcywgZnVuY3Rpb24oIHdpbmRvdywgbm9HbG9iYWwgKSB7XHJcblxyXG4vLyBTdXBwb3J0OiBGaXJlZm94IDE4K1xyXG4vLyBDYW4ndCBiZSBpbiBzdHJpY3QgbW9kZSwgc2V2ZXJhbCBsaWJzIGluY2x1ZGluZyBBU1AuTkVUIHRyYWNlXHJcbi8vIHRoZSBzdGFjayB2aWEgYXJndW1lbnRzLmNhbGxlci5jYWxsZWUgYW5kIEZpcmVmb3ggZGllcyBpZlxyXG4vLyB5b3UgdHJ5IHRvIHRyYWNlIHRocm91Z2ggXCJ1c2Ugc3RyaWN0XCIgY2FsbCBjaGFpbnMuICgjMTMzMzUpXHJcbi8vXCJ1c2Ugc3RyaWN0XCI7XHJcbnZhciBhcnIgPSBbXTtcclxuXHJcbnZhciBkb2N1bWVudCA9IHdpbmRvdy5kb2N1bWVudDtcclxuXHJcbnZhciBzbGljZSA9IGFyci5zbGljZTtcclxuXHJcbnZhciBjb25jYXQgPSBhcnIuY29uY2F0O1xyXG5cclxudmFyIHB1c2ggPSBhcnIucHVzaDtcclxuXHJcbnZhciBpbmRleE9mID0gYXJyLmluZGV4T2Y7XHJcblxyXG52YXIgY2xhc3MydHlwZSA9IHt9O1xyXG5cclxudmFyIHRvU3RyaW5nID0gY2xhc3MydHlwZS50b1N0cmluZztcclxuXHJcbnZhciBoYXNPd24gPSBjbGFzczJ0eXBlLmhhc093blByb3BlcnR5O1xyXG5cclxudmFyIHN1cHBvcnQgPSB7fTtcclxuXHJcblxyXG5cclxudmFyXHJcblx0dmVyc2lvbiA9IFwiMi4yLjRcIixcclxuXHJcblx0Ly8gRGVmaW5lIGEgbG9jYWwgY29weSBvZiBqUXVlcnlcclxuXHRqUXVlcnkgPSBmdW5jdGlvbiggc2VsZWN0b3IsIGNvbnRleHQgKSB7XHJcblxyXG5cdFx0Ly8gVGhlIGpRdWVyeSBvYmplY3QgaXMgYWN0dWFsbHkganVzdCB0aGUgaW5pdCBjb25zdHJ1Y3RvciAnZW5oYW5jZWQnXHJcblx0XHQvLyBOZWVkIGluaXQgaWYgalF1ZXJ5IGlzIGNhbGxlZCAoanVzdCBhbGxvdyBlcnJvciB0byBiZSB0aHJvd24gaWYgbm90IGluY2x1ZGVkKVxyXG5cdFx0cmV0dXJuIG5ldyBqUXVlcnkuZm4uaW5pdCggc2VsZWN0b3IsIGNvbnRleHQgKTtcclxuXHR9LFxyXG5cclxuXHQvLyBTdXBwb3J0OiBBbmRyb2lkPDQuMVxyXG5cdC8vIE1ha2Ugc3VyZSB3ZSB0cmltIEJPTSBhbmQgTkJTUFxyXG5cdHJ0cmltID0gL15bXFxzXFx1RkVGRlxceEEwXSt8W1xcc1xcdUZFRkZcXHhBMF0rJC9nLFxyXG5cclxuXHQvLyBNYXRjaGVzIGRhc2hlZCBzdHJpbmcgZm9yIGNhbWVsaXppbmdcclxuXHRybXNQcmVmaXggPSAvXi1tcy0vLFxyXG5cdHJkYXNoQWxwaGEgPSAvLShbXFxkYS16XSkvZ2ksXHJcblxyXG5cdC8vIFVzZWQgYnkgalF1ZXJ5LmNhbWVsQ2FzZSBhcyBjYWxsYmFjayB0byByZXBsYWNlKClcclxuXHRmY2FtZWxDYXNlID0gZnVuY3Rpb24oIGFsbCwgbGV0dGVyICkge1xyXG5cdFx0cmV0dXJuIGxldHRlci50b1VwcGVyQ2FzZSgpO1xyXG5cdH07XHJcblxyXG5qUXVlcnkuZm4gPSBqUXVlcnkucHJvdG90eXBlID0ge1xyXG5cclxuXHQvLyBUaGUgY3VycmVudCB2ZXJzaW9uIG9mIGpRdWVyeSBiZWluZyB1c2VkXHJcblx0anF1ZXJ5OiB2ZXJzaW9uLFxyXG5cclxuXHRjb25zdHJ1Y3RvcjogalF1ZXJ5LFxyXG5cclxuXHQvLyBTdGFydCB3aXRoIGFuIGVtcHR5IHNlbGVjdG9yXHJcblx0c2VsZWN0b3I6IFwiXCIsXHJcblxyXG5cdC8vIFRoZSBkZWZhdWx0IGxlbmd0aCBvZiBhIGpRdWVyeSBvYmplY3QgaXMgMFxyXG5cdGxlbmd0aDogMCxcclxuXHJcblx0dG9BcnJheTogZnVuY3Rpb24oKSB7XHJcblx0XHRyZXR1cm4gc2xpY2UuY2FsbCggdGhpcyApO1xyXG5cdH0sXHJcblxyXG5cdC8vIEdldCB0aGUgTnRoIGVsZW1lbnQgaW4gdGhlIG1hdGNoZWQgZWxlbWVudCBzZXQgT1JcclxuXHQvLyBHZXQgdGhlIHdob2xlIG1hdGNoZWQgZWxlbWVudCBzZXQgYXMgYSBjbGVhbiBhcnJheVxyXG5cdGdldDogZnVuY3Rpb24oIG51bSApIHtcclxuXHRcdHJldHVybiBudW0gIT0gbnVsbCA/XHJcblxyXG5cdFx0XHQvLyBSZXR1cm4ganVzdCB0aGUgb25lIGVsZW1lbnQgZnJvbSB0aGUgc2V0XHJcblx0XHRcdCggbnVtIDwgMCA/IHRoaXNbIG51bSArIHRoaXMubGVuZ3RoIF0gOiB0aGlzWyBudW0gXSApIDpcclxuXHJcblx0XHRcdC8vIFJldHVybiBhbGwgdGhlIGVsZW1lbnRzIGluIGEgY2xlYW4gYXJyYXlcclxuXHRcdFx0c2xpY2UuY2FsbCggdGhpcyApO1xyXG5cdH0sXHJcblxyXG5cdC8vIFRha2UgYW4gYXJyYXkgb2YgZWxlbWVudHMgYW5kIHB1c2ggaXQgb250byB0aGUgc3RhY2tcclxuXHQvLyAocmV0dXJuaW5nIHRoZSBuZXcgbWF0Y2hlZCBlbGVtZW50IHNldClcclxuXHRwdXNoU3RhY2s6IGZ1bmN0aW9uKCBlbGVtcyApIHtcclxuXHJcblx0XHQvLyBCdWlsZCBhIG5ldyBqUXVlcnkgbWF0Y2hlZCBlbGVtZW50IHNldFxyXG5cdFx0dmFyIHJldCA9IGpRdWVyeS5tZXJnZSggdGhpcy5jb25zdHJ1Y3RvcigpLCBlbGVtcyApO1xyXG5cclxuXHRcdC8vIEFkZCB0aGUgb2xkIG9iamVjdCBvbnRvIHRoZSBzdGFjayAoYXMgYSByZWZlcmVuY2UpXHJcblx0XHRyZXQucHJldk9iamVjdCA9IHRoaXM7XHJcblx0XHRyZXQuY29udGV4dCA9IHRoaXMuY29udGV4dDtcclxuXHJcblx0XHQvLyBSZXR1cm4gdGhlIG5ld2x5LWZvcm1lZCBlbGVtZW50IHNldFxyXG5cdFx0cmV0dXJuIHJldDtcclxuXHR9LFxyXG5cclxuXHQvLyBFeGVjdXRlIGEgY2FsbGJhY2sgZm9yIGV2ZXJ5IGVsZW1lbnQgaW4gdGhlIG1hdGNoZWQgc2V0LlxyXG5cdGVhY2g6IGZ1bmN0aW9uKCBjYWxsYmFjayApIHtcclxuXHRcdHJldHVybiBqUXVlcnkuZWFjaCggdGhpcywgY2FsbGJhY2sgKTtcclxuXHR9LFxyXG5cclxuXHRtYXA6IGZ1bmN0aW9uKCBjYWxsYmFjayApIHtcclxuXHRcdHJldHVybiB0aGlzLnB1c2hTdGFjayggalF1ZXJ5Lm1hcCggdGhpcywgZnVuY3Rpb24oIGVsZW0sIGkgKSB7XHJcblx0XHRcdHJldHVybiBjYWxsYmFjay5jYWxsKCBlbGVtLCBpLCBlbGVtICk7XHJcblx0XHR9ICkgKTtcclxuXHR9LFxyXG5cclxuXHRzbGljZTogZnVuY3Rpb24oKSB7XHJcblx0XHRyZXR1cm4gdGhpcy5wdXNoU3RhY2soIHNsaWNlLmFwcGx5KCB0aGlzLCBhcmd1bWVudHMgKSApO1xyXG5cdH0sXHJcblxyXG5cdGZpcnN0OiBmdW5jdGlvbigpIHtcclxuXHRcdHJldHVybiB0aGlzLmVxKCAwICk7XHJcblx0fSxcclxuXHJcblx0bGFzdDogZnVuY3Rpb24oKSB7XHJcblx0XHRyZXR1cm4gdGhpcy5lcSggLTEgKTtcclxuXHR9LFxyXG5cclxuXHRlcTogZnVuY3Rpb24oIGkgKSB7XHJcblx0XHR2YXIgbGVuID0gdGhpcy5sZW5ndGgsXHJcblx0XHRcdGogPSAraSArICggaSA8IDAgPyBsZW4gOiAwICk7XHJcblx0XHRyZXR1cm4gdGhpcy5wdXNoU3RhY2soIGogPj0gMCAmJiBqIDwgbGVuID8gWyB0aGlzWyBqIF0gXSA6IFtdICk7XHJcblx0fSxcclxuXHJcblx0ZW5kOiBmdW5jdGlvbigpIHtcclxuXHRcdHJldHVybiB0aGlzLnByZXZPYmplY3QgfHwgdGhpcy5jb25zdHJ1Y3RvcigpO1xyXG5cdH0sXHJcblxyXG5cdC8vIEZvciBpbnRlcm5hbCB1c2Ugb25seS5cclxuXHQvLyBCZWhhdmVzIGxpa2UgYW4gQXJyYXkncyBtZXRob2QsIG5vdCBsaWtlIGEgalF1ZXJ5IG1ldGhvZC5cclxuXHRwdXNoOiBwdXNoLFxyXG5cdHNvcnQ6IGFyci5zb3J0LFxyXG5cdHNwbGljZTogYXJyLnNwbGljZVxyXG59O1xyXG5cclxualF1ZXJ5LmV4dGVuZCA9IGpRdWVyeS5mbi5leHRlbmQgPSBmdW5jdGlvbigpIHtcclxuXHR2YXIgb3B0aW9ucywgbmFtZSwgc3JjLCBjb3B5LCBjb3B5SXNBcnJheSwgY2xvbmUsXHJcblx0XHR0YXJnZXQgPSBhcmd1bWVudHNbIDAgXSB8fCB7fSxcclxuXHRcdGkgPSAxLFxyXG5cdFx0bGVuZ3RoID0gYXJndW1lbnRzLmxlbmd0aCxcclxuXHRcdGRlZXAgPSBmYWxzZTtcclxuXHJcblx0Ly8gSGFuZGxlIGEgZGVlcCBjb3B5IHNpdHVhdGlvblxyXG5cdGlmICggdHlwZW9mIHRhcmdldCA9PT0gXCJib29sZWFuXCIgKSB7XHJcblx0XHRkZWVwID0gdGFyZ2V0O1xyXG5cclxuXHRcdC8vIFNraXAgdGhlIGJvb2xlYW4gYW5kIHRoZSB0YXJnZXRcclxuXHRcdHRhcmdldCA9IGFyZ3VtZW50c1sgaSBdIHx8IHt9O1xyXG5cdFx0aSsrO1xyXG5cdH1cclxuXHJcblx0Ly8gSGFuZGxlIGNhc2Ugd2hlbiB0YXJnZXQgaXMgYSBzdHJpbmcgb3Igc29tZXRoaW5nIChwb3NzaWJsZSBpbiBkZWVwIGNvcHkpXHJcblx0aWYgKCB0eXBlb2YgdGFyZ2V0ICE9PSBcIm9iamVjdFwiICYmICFqUXVlcnkuaXNGdW5jdGlvbiggdGFyZ2V0ICkgKSB7XHJcblx0XHR0YXJnZXQgPSB7fTtcclxuXHR9XHJcblxyXG5cdC8vIEV4dGVuZCBqUXVlcnkgaXRzZWxmIGlmIG9ubHkgb25lIGFyZ3VtZW50IGlzIHBhc3NlZFxyXG5cdGlmICggaSA9PT0gbGVuZ3RoICkge1xyXG5cdFx0dGFyZ2V0ID0gdGhpcztcclxuXHRcdGktLTtcclxuXHR9XHJcblxyXG5cdGZvciAoIDsgaSA8IGxlbmd0aDsgaSsrICkge1xyXG5cclxuXHRcdC8vIE9ubHkgZGVhbCB3aXRoIG5vbi1udWxsL3VuZGVmaW5lZCB2YWx1ZXNcclxuXHRcdGlmICggKCBvcHRpb25zID0gYXJndW1lbnRzWyBpIF0gKSAhPSBudWxsICkge1xyXG5cclxuXHRcdFx0Ly8gRXh0ZW5kIHRoZSBiYXNlIG9iamVjdFxyXG5cdFx0XHRmb3IgKCBuYW1lIGluIG9wdGlvbnMgKSB7XHJcblx0XHRcdFx0c3JjID0gdGFyZ2V0WyBuYW1lIF07XHJcblx0XHRcdFx0Y29weSA9IG9wdGlvbnNbIG5hbWUgXTtcclxuXHJcblx0XHRcdFx0Ly8gUHJldmVudCBuZXZlci1lbmRpbmcgbG9vcFxyXG5cdFx0XHRcdGlmICggdGFyZ2V0ID09PSBjb3B5ICkge1xyXG5cdFx0XHRcdFx0Y29udGludWU7XHJcblx0XHRcdFx0fVxyXG5cclxuXHRcdFx0XHQvLyBSZWN1cnNlIGlmIHdlJ3JlIG1lcmdpbmcgcGxhaW4gb2JqZWN0cyBvciBhcnJheXNcclxuXHRcdFx0XHRpZiAoIGRlZXAgJiYgY29weSAmJiAoIGpRdWVyeS5pc1BsYWluT2JqZWN0KCBjb3B5ICkgfHxcclxuXHRcdFx0XHRcdCggY29weUlzQXJyYXkgPSBqUXVlcnkuaXNBcnJheSggY29weSApICkgKSApIHtcclxuXHJcblx0XHRcdFx0XHRpZiAoIGNvcHlJc0FycmF5ICkge1xyXG5cdFx0XHRcdFx0XHRjb3B5SXNBcnJheSA9IGZhbHNlO1xyXG5cdFx0XHRcdFx0XHRjbG9uZSA9IHNyYyAmJiBqUXVlcnkuaXNBcnJheSggc3JjICkgPyBzcmMgOiBbXTtcclxuXHJcblx0XHRcdFx0XHR9IGVsc2Uge1xyXG5cdFx0XHRcdFx0XHRjbG9uZSA9IHNyYyAmJiBqUXVlcnkuaXNQbGFpbk9iamVjdCggc3JjICkgPyBzcmMgOiB7fTtcclxuXHRcdFx0XHRcdH1cclxuXHJcblx0XHRcdFx0XHQvLyBOZXZlciBtb3ZlIG9yaWdpbmFsIG9iamVjdHMsIGNsb25lIHRoZW1cclxuXHRcdFx0XHRcdHRhcmdldFsgbmFtZSBdID0galF1ZXJ5LmV4dGVuZCggZGVlcCwgY2xvbmUsIGNvcHkgKTtcclxuXHJcblx0XHRcdFx0Ly8gRG9uJ3QgYnJpbmcgaW4gdW5kZWZpbmVkIHZhbHVlc1xyXG5cdFx0XHRcdH0gZWxzZSBpZiAoIGNvcHkgIT09IHVuZGVmaW5lZCApIHtcclxuXHRcdFx0XHRcdHRhcmdldFsgbmFtZSBdID0gY29weTtcclxuXHRcdFx0XHR9XHJcblx0XHRcdH1cclxuXHRcdH1cclxuXHR9XHJcblxyXG5cdC8vIFJldHVybiB0aGUgbW9kaWZpZWQgb2JqZWN0XHJcblx0cmV0dXJuIHRhcmdldDtcclxufTtcclxuXHJcbmpRdWVyeS5leHRlbmQoIHtcclxuXHJcblx0Ly8gVW5pcXVlIGZvciBlYWNoIGNvcHkgb2YgalF1ZXJ5IG9uIHRoZSBwYWdlXHJcblx0ZXhwYW5kbzogXCJqUXVlcnlcIiArICggdmVyc2lvbiArIE1hdGgucmFuZG9tKCkgKS5yZXBsYWNlKCAvXFxEL2csIFwiXCIgKSxcclxuXHJcblx0Ly8gQXNzdW1lIGpRdWVyeSBpcyByZWFkeSB3aXRob3V0IHRoZSByZWFkeSBtb2R1bGVcclxuXHRpc1JlYWR5OiB0cnVlLFxyXG5cclxuXHRlcnJvcjogZnVuY3Rpb24oIG1zZyApIHtcclxuXHRcdHRocm93IG5ldyBFcnJvciggbXNnICk7XHJcblx0fSxcclxuXHJcblx0bm9vcDogZnVuY3Rpb24oKSB7fSxcclxuXHJcblx0aXNGdW5jdGlvbjogZnVuY3Rpb24oIG9iaiApIHtcclxuXHRcdHJldHVybiBqUXVlcnkudHlwZSggb2JqICkgPT09IFwiZnVuY3Rpb25cIjtcclxuXHR9LFxyXG5cclxuXHRpc0FycmF5OiBBcnJheS5pc0FycmF5LFxyXG5cclxuXHRpc1dpbmRvdzogZnVuY3Rpb24oIG9iaiApIHtcclxuXHRcdHJldHVybiBvYmogIT0gbnVsbCAmJiBvYmogPT09IG9iai53aW5kb3c7XHJcblx0fSxcclxuXHJcblx0aXNOdW1lcmljOiBmdW5jdGlvbiggb2JqICkge1xyXG5cclxuXHRcdC8vIHBhcnNlRmxvYXQgTmFOcyBudW1lcmljLWNhc3QgZmFsc2UgcG9zaXRpdmVzIChudWxsfHRydWV8ZmFsc2V8XCJcIilcclxuXHRcdC8vIC4uLmJ1dCBtaXNpbnRlcnByZXRzIGxlYWRpbmctbnVtYmVyIHN0cmluZ3MsIHBhcnRpY3VsYXJseSBoZXggbGl0ZXJhbHMgKFwiMHguLi5cIilcclxuXHRcdC8vIHN1YnRyYWN0aW9uIGZvcmNlcyBpbmZpbml0aWVzIHRvIE5hTlxyXG5cdFx0Ly8gYWRkaW5nIDEgY29ycmVjdHMgbG9zcyBvZiBwcmVjaXNpb24gZnJvbSBwYXJzZUZsb2F0ICgjMTUxMDApXHJcblx0XHR2YXIgcmVhbFN0cmluZ09iaiA9IG9iaiAmJiBvYmoudG9TdHJpbmcoKTtcclxuXHRcdHJldHVybiAhalF1ZXJ5LmlzQXJyYXkoIG9iaiApICYmICggcmVhbFN0cmluZ09iaiAtIHBhcnNlRmxvYXQoIHJlYWxTdHJpbmdPYmogKSArIDEgKSA+PSAwO1xyXG5cdH0sXHJcblxyXG5cdGlzUGxhaW5PYmplY3Q6IGZ1bmN0aW9uKCBvYmogKSB7XHJcblx0XHR2YXIga2V5O1xyXG5cclxuXHRcdC8vIE5vdCBwbGFpbiBvYmplY3RzOlxyXG5cdFx0Ly8gLSBBbnkgb2JqZWN0IG9yIHZhbHVlIHdob3NlIGludGVybmFsIFtbQ2xhc3NdXSBwcm9wZXJ0eSBpcyBub3QgXCJbb2JqZWN0IE9iamVjdF1cIlxyXG5cdFx0Ly8gLSBET00gbm9kZXNcclxuXHRcdC8vIC0gd2luZG93XHJcblx0XHRpZiAoIGpRdWVyeS50eXBlKCBvYmogKSAhPT0gXCJvYmplY3RcIiB8fCBvYmoubm9kZVR5cGUgfHwgalF1ZXJ5LmlzV2luZG93KCBvYmogKSApIHtcclxuXHRcdFx0cmV0dXJuIGZhbHNlO1xyXG5cdFx0fVxyXG5cclxuXHRcdC8vIE5vdCBvd24gY29uc3RydWN0b3IgcHJvcGVydHkgbXVzdCBiZSBPYmplY3RcclxuXHRcdGlmICggb2JqLmNvbnN0cnVjdG9yICYmXHJcblx0XHRcdFx0IWhhc093bi5jYWxsKCBvYmosIFwiY29uc3RydWN0b3JcIiApICYmXHJcblx0XHRcdFx0IWhhc093bi5jYWxsKCBvYmouY29uc3RydWN0b3IucHJvdG90eXBlIHx8IHt9LCBcImlzUHJvdG90eXBlT2ZcIiApICkge1xyXG5cdFx0XHRyZXR1cm4gZmFsc2U7XHJcblx0XHR9XHJcblxyXG5cdFx0Ly8gT3duIHByb3BlcnRpZXMgYXJlIGVudW1lcmF0ZWQgZmlyc3RseSwgc28gdG8gc3BlZWQgdXAsXHJcblx0XHQvLyBpZiBsYXN0IG9uZSBpcyBvd24sIHRoZW4gYWxsIHByb3BlcnRpZXMgYXJlIG93blxyXG5cdFx0Zm9yICgga2V5IGluIG9iaiApIHt9XHJcblxyXG5cdFx0cmV0dXJuIGtleSA9PT0gdW5kZWZpbmVkIHx8IGhhc093bi5jYWxsKCBvYmosIGtleSApO1xyXG5cdH0sXHJcblxyXG5cdGlzRW1wdHlPYmplY3Q6IGZ1bmN0aW9uKCBvYmogKSB7XHJcblx0XHR2YXIgbmFtZTtcclxuXHRcdGZvciAoIG5hbWUgaW4gb2JqICkge1xyXG5cdFx0XHRyZXR1cm4gZmFsc2U7XHJcblx0XHR9XHJcblx0XHRyZXR1cm4gdHJ1ZTtcclxuXHR9LFxyXG5cclxuXHR0eXBlOiBmdW5jdGlvbiggb2JqICkge1xyXG5cdFx0aWYgKCBvYmogPT0gbnVsbCApIHtcclxuXHRcdFx0cmV0dXJuIG9iaiArIFwiXCI7XHJcblx0XHR9XHJcblxyXG5cdFx0Ly8gU3VwcG9ydDogQW5kcm9pZDw0LjAsIGlPUzw2IChmdW5jdGlvbmlzaCBSZWdFeHApXHJcblx0XHRyZXR1cm4gdHlwZW9mIG9iaiA9PT0gXCJvYmplY3RcIiB8fCB0eXBlb2Ygb2JqID09PSBcImZ1bmN0aW9uXCIgP1xyXG5cdFx0XHRjbGFzczJ0eXBlWyB0b1N0cmluZy5jYWxsKCBvYmogKSBdIHx8IFwib2JqZWN0XCIgOlxyXG5cdFx0XHR0eXBlb2Ygb2JqO1xyXG5cdH0sXHJcblxyXG5cdC8vIEV2YWx1YXRlcyBhIHNjcmlwdCBpbiBhIGdsb2JhbCBjb250ZXh0XHJcblx0Z2xvYmFsRXZhbDogZnVuY3Rpb24oIGNvZGUgKSB7XHJcblx0XHR2YXIgc2NyaXB0LFxyXG5cdFx0XHRpbmRpcmVjdCA9IGV2YWw7XHJcblxyXG5cdFx0Y29kZSA9IGpRdWVyeS50cmltKCBjb2RlICk7XHJcblxyXG5cdFx0aWYgKCBjb2RlICkge1xyXG5cclxuXHRcdFx0Ly8gSWYgdGhlIGNvZGUgaW5jbHVkZXMgYSB2YWxpZCwgcHJvbG9ndWUgcG9zaXRpb25cclxuXHRcdFx0Ly8gc3RyaWN0IG1vZGUgcHJhZ21hLCBleGVjdXRlIGNvZGUgYnkgaW5qZWN0aW5nIGFcclxuXHRcdFx0Ly8gc2NyaXB0IHRhZyBpbnRvIHRoZSBkb2N1bWVudC5cclxuXHRcdFx0aWYgKCBjb2RlLmluZGV4T2YoIFwidXNlIHN0cmljdFwiICkgPT09IDEgKSB7XHJcblx0XHRcdFx0c2NyaXB0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCggXCJzY3JpcHRcIiApO1xyXG5cdFx0XHRcdHNjcmlwdC50ZXh0ID0gY29kZTtcclxuXHRcdFx0XHRkb2N1bWVudC5oZWFkLmFwcGVuZENoaWxkKCBzY3JpcHQgKS5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKCBzY3JpcHQgKTtcclxuXHRcdFx0fSBlbHNlIHtcclxuXHJcblx0XHRcdFx0Ly8gT3RoZXJ3aXNlLCBhdm9pZCB0aGUgRE9NIG5vZGUgY3JlYXRpb24sIGluc2VydGlvblxyXG5cdFx0XHRcdC8vIGFuZCByZW1vdmFsIGJ5IHVzaW5nIGFuIGluZGlyZWN0IGdsb2JhbCBldmFsXHJcblxyXG5cdFx0XHRcdGluZGlyZWN0KCBjb2RlICk7XHJcblx0XHRcdH1cclxuXHRcdH1cclxuXHR9LFxyXG5cclxuXHQvLyBDb252ZXJ0IGRhc2hlZCB0byBjYW1lbENhc2U7IHVzZWQgYnkgdGhlIGNzcyBhbmQgZGF0YSBtb2R1bGVzXHJcblx0Ly8gU3VwcG9ydDogSUU5LTExK1xyXG5cdC8vIE1pY3Jvc29mdCBmb3Jnb3QgdG8gaHVtcCB0aGVpciB2ZW5kb3IgcHJlZml4ICgjOTU3MilcclxuXHRjYW1lbENhc2U6IGZ1bmN0aW9uKCBzdHJpbmcgKSB7XHJcblx0XHRyZXR1cm4gc3RyaW5nLnJlcGxhY2UoIHJtc1ByZWZpeCwgXCJtcy1cIiApLnJlcGxhY2UoIHJkYXNoQWxwaGEsIGZjYW1lbENhc2UgKTtcclxuXHR9LFxyXG5cclxuXHRub2RlTmFtZTogZnVuY3Rpb24oIGVsZW0sIG5hbWUgKSB7XHJcblx0XHRyZXR1cm4gZWxlbS5ub2RlTmFtZSAmJiBlbGVtLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCkgPT09IG5hbWUudG9Mb3dlckNhc2UoKTtcclxuXHR9LFxyXG5cclxuXHRlYWNoOiBmdW5jdGlvbiggb2JqLCBjYWxsYmFjayApIHtcclxuXHRcdHZhciBsZW5ndGgsIGkgPSAwO1xyXG5cclxuXHRcdGlmICggaXNBcnJheUxpa2UoIG9iaiApICkge1xyXG5cdFx0XHRsZW5ndGggPSBvYmoubGVuZ3RoO1xyXG5cdFx0XHRmb3IgKCA7IGkgPCBsZW5ndGg7IGkrKyApIHtcclxuXHRcdFx0XHRpZiAoIGNhbGxiYWNrLmNhbGwoIG9ialsgaSBdLCBpLCBvYmpbIGkgXSApID09PSBmYWxzZSApIHtcclxuXHRcdFx0XHRcdGJyZWFrO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0fVxyXG5cdFx0fSBlbHNlIHtcclxuXHRcdFx0Zm9yICggaSBpbiBvYmogKSB7XHJcblx0XHRcdFx0aWYgKCBjYWxsYmFjay5jYWxsKCBvYmpbIGkgXSwgaSwgb2JqWyBpIF0gKSA9PT0gZmFsc2UgKSB7XHJcblx0XHRcdFx0XHRicmVhaztcclxuXHRcdFx0XHR9XHJcblx0XHRcdH1cclxuXHRcdH1cclxuXHJcblx0XHRyZXR1cm4gb2JqO1xyXG5cdH0sXHJcblxyXG5cdC8vIFN1cHBvcnQ6IEFuZHJvaWQ8NC4xXHJcblx0dHJpbTogZnVuY3Rpb24oIHRleHQgKSB7XHJcblx0XHRyZXR1cm4gdGV4dCA9PSBudWxsID9cclxuXHRcdFx0XCJcIiA6XHJcblx0XHRcdCggdGV4dCArIFwiXCIgKS5yZXBsYWNlKCBydHJpbSwgXCJcIiApO1xyXG5cdH0sXHJcblxyXG5cdC8vIHJlc3VsdHMgaXMgZm9yIGludGVybmFsIHVzYWdlIG9ubHlcclxuXHRtYWtlQXJyYXk6IGZ1bmN0aW9uKCBhcnIsIHJlc3VsdHMgKSB7XHJcblx0XHR2YXIgcmV0ID0gcmVzdWx0cyB8fCBbXTtcclxuXHJcblx0XHRpZiAoIGFyciAhPSBudWxsICkge1xyXG5cdFx0XHRpZiAoIGlzQXJyYXlMaWtlKCBPYmplY3QoIGFyciApICkgKSB7XHJcblx0XHRcdFx0alF1ZXJ5Lm1lcmdlKCByZXQsXHJcblx0XHRcdFx0XHR0eXBlb2YgYXJyID09PSBcInN0cmluZ1wiID9cclxuXHRcdFx0XHRcdFsgYXJyIF0gOiBhcnJcclxuXHRcdFx0XHQpO1xyXG5cdFx0XHR9IGVsc2Uge1xyXG5cdFx0XHRcdHB1c2guY2FsbCggcmV0LCBhcnIgKTtcclxuXHRcdFx0fVxyXG5cdFx0fVxyXG5cclxuXHRcdHJldHVybiByZXQ7XHJcblx0fSxcclxuXHJcblx0aW5BcnJheTogZnVuY3Rpb24oIGVsZW0sIGFyciwgaSApIHtcclxuXHRcdHJldHVybiBhcnIgPT0gbnVsbCA/IC0xIDogaW5kZXhPZi5jYWxsKCBhcnIsIGVsZW0sIGkgKTtcclxuXHR9LFxyXG5cclxuXHRtZXJnZTogZnVuY3Rpb24oIGZpcnN0LCBzZWNvbmQgKSB7XHJcblx0XHR2YXIgbGVuID0gK3NlY29uZC5sZW5ndGgsXHJcblx0XHRcdGogPSAwLFxyXG5cdFx0XHRpID0gZmlyc3QubGVuZ3RoO1xyXG5cclxuXHRcdGZvciAoIDsgaiA8IGxlbjsgaisrICkge1xyXG5cdFx0XHRmaXJzdFsgaSsrIF0gPSBzZWNvbmRbIGogXTtcclxuXHRcdH1cclxuXHJcblx0XHRmaXJzdC5sZW5ndGggPSBpO1xyXG5cclxuXHRcdHJldHVybiBmaXJzdDtcclxuXHR9LFxyXG5cclxuXHRncmVwOiBmdW5jdGlvbiggZWxlbXMsIGNhbGxiYWNrLCBpbnZlcnQgKSB7XHJcblx0XHR2YXIgY2FsbGJhY2tJbnZlcnNlLFxyXG5cdFx0XHRtYXRjaGVzID0gW10sXHJcblx0XHRcdGkgPSAwLFxyXG5cdFx0XHRsZW5ndGggPSBlbGVtcy5sZW5ndGgsXHJcblx0XHRcdGNhbGxiYWNrRXhwZWN0ID0gIWludmVydDtcclxuXHJcblx0XHQvLyBHbyB0aHJvdWdoIHRoZSBhcnJheSwgb25seSBzYXZpbmcgdGhlIGl0ZW1zXHJcblx0XHQvLyB0aGF0IHBhc3MgdGhlIHZhbGlkYXRvciBmdW5jdGlvblxyXG5cdFx0Zm9yICggOyBpIDwgbGVuZ3RoOyBpKysgKSB7XHJcblx0XHRcdGNhbGxiYWNrSW52ZXJzZSA9ICFjYWxsYmFjayggZWxlbXNbIGkgXSwgaSApO1xyXG5cdFx0XHRpZiAoIGNhbGxiYWNrSW52ZXJzZSAhPT0gY2FsbGJhY2tFeHBlY3QgKSB7XHJcblx0XHRcdFx0bWF0Y2hlcy5wdXNoKCBlbGVtc1sgaSBdICk7XHJcblx0XHRcdH1cclxuXHRcdH1cclxuXHJcblx0XHRyZXR1cm4gbWF0Y2hlcztcclxuXHR9LFxyXG5cclxuXHQvLyBhcmcgaXMgZm9yIGludGVybmFsIHVzYWdlIG9ubHlcclxuXHRtYXA6IGZ1bmN0aW9uKCBlbGVtcywgY2FsbGJhY2ssIGFyZyApIHtcclxuXHRcdHZhciBsZW5ndGgsIHZhbHVlLFxyXG5cdFx0XHRpID0gMCxcclxuXHRcdFx0cmV0ID0gW107XHJcblxyXG5cdFx0Ly8gR28gdGhyb3VnaCB0aGUgYXJyYXksIHRyYW5zbGF0aW5nIGVhY2ggb2YgdGhlIGl0ZW1zIHRvIHRoZWlyIG5ldyB2YWx1ZXNcclxuXHRcdGlmICggaXNBcnJheUxpa2UoIGVsZW1zICkgKSB7XHJcblx0XHRcdGxlbmd0aCA9IGVsZW1zLmxlbmd0aDtcclxuXHRcdFx0Zm9yICggOyBpIDwgbGVuZ3RoOyBpKysgKSB7XHJcblx0XHRcdFx0dmFsdWUgPSBjYWxsYmFjayggZWxlbXNbIGkgXSwgaSwgYXJnICk7XHJcblxyXG5cdFx0XHRcdGlmICggdmFsdWUgIT0gbnVsbCApIHtcclxuXHRcdFx0XHRcdHJldC5wdXNoKCB2YWx1ZSApO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0fVxyXG5cclxuXHRcdC8vIEdvIHRocm91Z2ggZXZlcnkga2V5IG9uIHRoZSBvYmplY3QsXHJcblx0XHR9IGVsc2Uge1xyXG5cdFx0XHRmb3IgKCBpIGluIGVsZW1zICkge1xyXG5cdFx0XHRcdHZhbHVlID0gY2FsbGJhY2soIGVsZW1zWyBpIF0sIGksIGFyZyApO1xyXG5cclxuXHRcdFx0XHRpZiAoIHZhbHVlICE9IG51bGwgKSB7XHJcblx0XHRcdFx0XHRyZXQucHVzaCggdmFsdWUgKTtcclxuXHRcdFx0XHR9XHJcblx0XHRcdH1cclxuXHRcdH1cclxuXHJcblx0XHQvLyBGbGF0dGVuIGFueSBuZXN0ZWQgYXJyYXlzXHJcblx0XHRyZXR1cm4gY29uY2F0LmFwcGx5KCBbXSwgcmV0ICk7XHJcblx0fSxcclxuXHJcblx0Ly8gQSBnbG9iYWwgR1VJRCBjb3VudGVyIGZvciBvYmplY3RzXHJcblx0Z3VpZDogMSxcclxuXHJcblx0Ly8gQmluZCBhIGZ1bmN0aW9uIHRvIGEgY29udGV4dCwgb3B0aW9uYWxseSBwYXJ0aWFsbHkgYXBwbHlpbmcgYW55XHJcblx0Ly8gYXJndW1lbnRzLlxyXG5cdHByb3h5OiBmdW5jdGlvbiggZm4sIGNvbnRleHQgKSB7XHJcblx0XHR2YXIgdG1wLCBhcmdzLCBwcm94eTtcclxuXHJcblx0XHRpZiAoIHR5cGVvZiBjb250ZXh0ID09PSBcInN0cmluZ1wiICkge1xyXG5cdFx0XHR0bXAgPSBmblsgY29udGV4dCBdO1xyXG5cdFx0XHRjb250ZXh0ID0gZm47XHJcblx0XHRcdGZuID0gdG1wO1xyXG5cdFx0fVxyXG5cclxuXHRcdC8vIFF1aWNrIGNoZWNrIHRvIGRldGVybWluZSBpZiB0YXJnZXQgaXMgY2FsbGFibGUsIGluIHRoZSBzcGVjXHJcblx0XHQvLyB0aGlzIHRocm93cyBhIFR5cGVFcnJvciwgYnV0IHdlIHdpbGwganVzdCByZXR1cm4gdW5kZWZpbmVkLlxyXG5cdFx0aWYgKCAhalF1ZXJ5LmlzRnVuY3Rpb24oIGZuICkgKSB7XHJcblx0XHRcdHJldHVybiB1bmRlZmluZWQ7XHJcblx0XHR9XHJcblxyXG5cdFx0Ly8gU2ltdWxhdGVkIGJpbmRcclxuXHRcdGFyZ3MgPSBzbGljZS5jYWxsKCBhcmd1bWVudHMsIDIgKTtcclxuXHRcdHByb3h5ID0gZnVuY3Rpb24oKSB7XHJcblx0XHRcdHJldHVybiBmbi5hcHBseSggY29udGV4dCB8fCB0aGlzLCBhcmdzLmNvbmNhdCggc2xpY2UuY2FsbCggYXJndW1lbnRzICkgKSApO1xyXG5cdFx0fTtcclxuXHJcblx0XHQvLyBTZXQgdGhlIGd1aWQgb2YgdW5pcXVlIGhhbmRsZXIgdG8gdGhlIHNhbWUgb2Ygb3JpZ2luYWwgaGFuZGxlciwgc28gaXQgY2FuIGJlIHJlbW92ZWRcclxuXHRcdHByb3h5Lmd1aWQgPSBmbi5ndWlkID0gZm4uZ3VpZCB8fCBqUXVlcnkuZ3VpZCsrO1xyXG5cclxuXHRcdHJldHVybiBwcm94eTtcclxuXHR9LFxyXG5cclxuXHRub3c6IERhdGUubm93LFxyXG5cclxuXHQvLyBqUXVlcnkuc3VwcG9ydCBpcyBub3QgdXNlZCBpbiBDb3JlIGJ1dCBvdGhlciBwcm9qZWN0cyBhdHRhY2ggdGhlaXJcclxuXHQvLyBwcm9wZXJ0aWVzIHRvIGl0IHNvIGl0IG5lZWRzIHRvIGV4aXN0LlxyXG5cdHN1cHBvcnQ6IHN1cHBvcnRcclxufSApO1xyXG5cclxuLy8gSlNIaW50IHdvdWxkIGVycm9yIG9uIHRoaXMgY29kZSBkdWUgdG8gdGhlIFN5bWJvbCBub3QgYmVpbmcgZGVmaW5lZCBpbiBFUzUuXHJcbi8vIERlZmluaW5nIHRoaXMgZ2xvYmFsIGluIC5qc2hpbnRyYyB3b3VsZCBjcmVhdGUgYSBkYW5nZXIgb2YgdXNpbmcgdGhlIGdsb2JhbFxyXG4vLyB1bmd1YXJkZWQgaW4gYW5vdGhlciBwbGFjZSwgaXQgc2VlbXMgc2FmZXIgdG8ganVzdCBkaXNhYmxlIEpTSGludCBmb3IgdGhlc2VcclxuLy8gdGhyZWUgbGluZXMuXHJcbi8qIGpzaGludCBpZ25vcmU6IHN0YXJ0ICovXHJcbmlmICggdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICkge1xyXG5cdGpRdWVyeS5mblsgU3ltYm9sLml0ZXJhdG9yIF0gPSBhcnJbIFN5bWJvbC5pdGVyYXRvciBdO1xyXG59XHJcbi8qIGpzaGludCBpZ25vcmU6IGVuZCAqL1xyXG5cclxuLy8gUG9wdWxhdGUgdGhlIGNsYXNzMnR5cGUgbWFwXHJcbmpRdWVyeS5lYWNoKCBcIkJvb2xlYW4gTnVtYmVyIFN0cmluZyBGdW5jdGlvbiBBcnJheSBEYXRlIFJlZ0V4cCBPYmplY3QgRXJyb3IgU3ltYm9sXCIuc3BsaXQoIFwiIFwiICksXHJcbmZ1bmN0aW9uKCBpLCBuYW1lICkge1xyXG5cdGNsYXNzMnR5cGVbIFwiW29iamVjdCBcIiArIG5hbWUgKyBcIl1cIiBdID0gbmFtZS50b0xvd2VyQ2FzZSgpO1xyXG59ICk7XHJcblxyXG5mdW5jdGlvbiBpc0FycmF5TGlrZSggb2JqICkge1xyXG5cclxuXHQvLyBTdXBwb3J0OiBpT1MgOC4yIChub3QgcmVwcm9kdWNpYmxlIGluIHNpbXVsYXRvcilcclxuXHQvLyBgaW5gIGNoZWNrIHVzZWQgdG8gcHJldmVudCBKSVQgZXJyb3IgKGdoLTIxNDUpXHJcblx0Ly8gaGFzT3duIGlzbid0IHVzZWQgaGVyZSBkdWUgdG8gZmFsc2UgbmVnYXRpdmVzXHJcblx0Ly8gcmVnYXJkaW5nIE5vZGVsaXN0IGxlbmd0aCBpbiBJRVxyXG5cdHZhciBsZW5ndGggPSAhIW9iaiAmJiBcImxlbmd0aFwiIGluIG9iaiAmJiBvYmoubGVuZ3RoLFxyXG5cdFx0dHlwZSA9IGpRdWVyeS50eXBlKCBvYmogKTtcclxuXHJcblx0aWYgKCB0eXBlID09PSBcImZ1bmN0aW9uXCIgfHwgalF1ZXJ5LmlzV2luZG93KCBvYmogKSApIHtcclxuXHRcdHJldHVybiBmYWxzZTtcclxuXHR9XHJcblxyXG5cdHJldHVybiB0eXBlID09PSBcImFycmF5XCIgfHwgbGVuZ3RoID09PSAwIHx8XHJcblx0XHR0eXBlb2YgbGVuZ3RoID09PSBcIm51bWJlclwiICYmIGxlbmd0aCA+IDAgJiYgKCBsZW5ndGggLSAxICkgaW4gb2JqO1xyXG59XHJcbnZhciBTaXp6bGUgPVxyXG4vKiFcclxuICogU2l6emxlIENTUyBTZWxlY3RvciBFbmdpbmUgdjIuMi4xXHJcbiAqIGh0dHA6Ly9zaXp6bGVqcy5jb20vXHJcbiAqXHJcbiAqIENvcHlyaWdodCBqUXVlcnkgRm91bmRhdGlvbiBhbmQgb3RoZXIgY29udHJpYnV0b3JzXHJcbiAqIFJlbGVhc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZVxyXG4gKiBodHRwOi8vanF1ZXJ5Lm9yZy9saWNlbnNlXHJcbiAqXHJcbiAqIERhdGU6IDIwMTUtMTAtMTdcclxuICovXHJcbihmdW5jdGlvbiggd2luZG93ICkge1xyXG5cclxudmFyIGksXHJcblx0c3VwcG9ydCxcclxuXHRFeHByLFxyXG5cdGdldFRleHQsXHJcblx0aXNYTUwsXHJcblx0dG9rZW5pemUsXHJcblx0Y29tcGlsZSxcclxuXHRzZWxlY3QsXHJcblx0b3V0ZXJtb3N0Q29udGV4dCxcclxuXHRzb3J0SW5wdXQsXHJcblx0aGFzRHVwbGljYXRlLFxyXG5cclxuXHQvLyBMb2NhbCBkb2N1bWVudCB2YXJzXHJcblx0c2V0RG9jdW1lbnQsXHJcblx0ZG9jdW1lbnQsXHJcblx0ZG9jRWxlbSxcclxuXHRkb2N1bWVudElzSFRNTCxcclxuXHRyYnVnZ3lRU0EsXHJcblx0cmJ1Z2d5TWF0Y2hlcyxcclxuXHRtYXRjaGVzLFxyXG5cdGNvbnRhaW5zLFxyXG5cclxuXHQvLyBJbnN0YW5jZS1zcGVjaWZpYyBkYXRhXHJcblx0ZXhwYW5kbyA9IFwic2l6emxlXCIgKyAxICogbmV3IERhdGUoKSxcclxuXHRwcmVmZXJyZWREb2MgPSB3aW5kb3cuZG9jdW1lbnQsXHJcblx0ZGlycnVucyA9IDAsXHJcblx0ZG9uZSA9IDAsXHJcblx0Y2xhc3NDYWNoZSA9IGNyZWF0ZUNhY2hlKCksXHJcblx0dG9rZW5DYWNoZSA9IGNyZWF0ZUNhY2hlKCksXHJcblx0Y29tcGlsZXJDYWNoZSA9IGNyZWF0ZUNhY2hlKCksXHJcblx0c29ydE9yZGVyID0gZnVuY3Rpb24oIGEsIGIgKSB7XHJcblx0XHRpZiAoIGEgPT09IGIgKSB7XHJcblx0XHRcdGhhc0R1cGxpY2F0ZSA9IHRydWU7XHJcblx0XHR9XHJcblx0XHRyZXR1cm4gMDtcclxuXHR9LFxyXG5cclxuXHQvLyBHZW5lcmFsLXB1cnBvc2UgY29uc3RhbnRzXHJcblx0TUFYX05FR0FUSVZFID0gMSA8PCAzMSxcclxuXHJcblx0Ly8gSW5zdGFuY2UgbWV0aG9kc1xyXG5cdGhhc093biA9ICh7fSkuaGFzT3duUHJvcGVydHksXHJcblx0YXJyID0gW10sXHJcblx0cG9wID0gYXJyLnBvcCxcclxuXHRwdXNoX25hdGl2ZSA9IGFyci5wdXNoLFxyXG5cdHB1c2ggPSBhcnIucHVzaCxcclxuXHRzbGljZSA9IGFyci5zbGljZSxcclxuXHQvLyBVc2UgYSBzdHJpcHBlZC1kb3duIGluZGV4T2YgYXMgaXQncyBmYXN0ZXIgdGhhbiBuYXRpdmVcclxuXHQvLyBodHRwOi8vanNwZXJmLmNvbS90aG9yLWluZGV4b2YtdnMtZm9yLzVcclxuXHRpbmRleE9mID0gZnVuY3Rpb24oIGxpc3QsIGVsZW0gKSB7XHJcblx0XHR2YXIgaSA9IDAsXHJcblx0XHRcdGxlbiA9IGxpc3QubGVuZ3RoO1xyXG5cdFx0Zm9yICggOyBpIDwgbGVuOyBpKysgKSB7XHJcblx0XHRcdGlmICggbGlzdFtpXSA9PT0gZWxlbSApIHtcclxuXHRcdFx0XHRyZXR1cm4gaTtcclxuXHRcdFx0fVxyXG5cdFx0fVxyXG5cdFx0cmV0dXJuIC0xO1xyXG5cdH0sXHJcblxyXG5cdGJvb2xlYW5zID0gXCJjaGVja2VkfHNlbGVjdGVkfGFzeW5jfGF1dG9mb2N1c3xhdXRvcGxheXxjb250cm9sc3xkZWZlcnxkaXNhYmxlZHxoaWRkZW58aXNtYXB8bG9vcHxtdWx0aXBsZXxvcGVufHJlYWRvbmx5fHJlcXVpcmVkfHNjb3BlZFwiLFxyXG5cclxuXHQvLyBSZWd1bGFyIGV4cHJlc3Npb25zXHJcblxyXG5cdC8vIGh0dHA6Ly93d3cudzMub3JnL1RSL2NzczMtc2VsZWN0b3JzLyN3aGl0ZXNwYWNlXHJcblx0d2hpdGVzcGFjZSA9IFwiW1xcXFx4MjBcXFxcdFxcXFxyXFxcXG5cXFxcZl1cIixcclxuXHJcblx0Ly8gaHR0cDovL3d3dy53My5vcmcvVFIvQ1NTMjEvc3luZGF0YS5odG1sI3ZhbHVlLWRlZi1pZGVudGlmaWVyXHJcblx0aWRlbnRpZmllciA9IFwiKD86XFxcXFxcXFwufFtcXFxcdy1dfFteXFxcXHgwMC1cXFxceGEwXSkrXCIsXHJcblxyXG5cdC8vIEF0dHJpYnV0ZSBzZWxlY3RvcnM6IGh0dHA6Ly93d3cudzMub3JnL1RSL3NlbGVjdG9ycy8jYXR0cmlidXRlLXNlbGVjdG9yc1xyXG5cdGF0dHJpYnV0ZXMgPSBcIlxcXFxbXCIgKyB3aGl0ZXNwYWNlICsgXCIqKFwiICsgaWRlbnRpZmllciArIFwiKSg/OlwiICsgd2hpdGVzcGFjZSArXHJcblx0XHQvLyBPcGVyYXRvciAoY2FwdHVyZSAyKVxyXG5cdFx0XCIqKFsqXiR8IX5dPz0pXCIgKyB3aGl0ZXNwYWNlICtcclxuXHRcdC8vIFwiQXR0cmlidXRlIHZhbHVlcyBtdXN0IGJlIENTUyBpZGVudGlmaWVycyBbY2FwdHVyZSA1XSBvciBzdHJpbmdzIFtjYXB0dXJlIDMgb3IgY2FwdHVyZSA0XVwiXHJcblx0XHRcIiooPzonKCg/OlxcXFxcXFxcLnxbXlxcXFxcXFxcJ10pKiknfFxcXCIoKD86XFxcXFxcXFwufFteXFxcXFxcXFxcXFwiXSkqKVxcXCJ8KFwiICsgaWRlbnRpZmllciArIFwiKSl8KVwiICsgd2hpdGVzcGFjZSArXHJcblx0XHRcIipcXFxcXVwiLFxyXG5cclxuXHRwc2V1ZG9zID0gXCI6KFwiICsgaWRlbnRpZmllciArIFwiKSg/OlxcXFwoKFwiICtcclxuXHRcdC8vIFRvIHJlZHVjZSB0aGUgbnVtYmVyIG9mIHNlbGVjdG9ycyBuZWVkaW5nIHRva2VuaXplIGluIHRoZSBwcmVGaWx0ZXIsIHByZWZlciBhcmd1bWVudHM6XHJcblx0XHQvLyAxLiBxdW90ZWQgKGNhcHR1cmUgMzsgY2FwdHVyZSA0IG9yIGNhcHR1cmUgNSlcclxuXHRcdFwiKCcoKD86XFxcXFxcXFwufFteXFxcXFxcXFwnXSkqKSd8XFxcIigoPzpcXFxcXFxcXC58W15cXFxcXFxcXFxcXCJdKSopXFxcIil8XCIgK1xyXG5cdFx0Ly8gMi4gc2ltcGxlIChjYXB0dXJlIDYpXHJcblx0XHRcIigoPzpcXFxcXFxcXC58W15cXFxcXFxcXCgpW1xcXFxdXXxcIiArIGF0dHJpYnV0ZXMgKyBcIikqKXxcIiArXHJcblx0XHQvLyAzLiBhbnl0aGluZyBlbHNlIChjYXB0dXJlIDIpXHJcblx0XHRcIi4qXCIgK1xyXG5cdFx0XCIpXFxcXCl8KVwiLFxyXG5cclxuXHQvLyBMZWFkaW5nIGFuZCBub24tZXNjYXBlZCB0cmFpbGluZyB3aGl0ZXNwYWNlLCBjYXB0dXJpbmcgc29tZSBub24td2hpdGVzcGFjZSBjaGFyYWN0ZXJzIHByZWNlZGluZyB0aGUgbGF0dGVyXHJcblx0cndoaXRlc3BhY2UgPSBuZXcgUmVnRXhwKCB3aGl0ZXNwYWNlICsgXCIrXCIsIFwiZ1wiICksXHJcblx0cnRyaW0gPSBuZXcgUmVnRXhwKCBcIl5cIiArIHdoaXRlc3BhY2UgKyBcIit8KCg/Ol58W15cXFxcXFxcXF0pKD86XFxcXFxcXFwuKSopXCIgKyB3aGl0ZXNwYWNlICsgXCIrJFwiLCBcImdcIiApLFxyXG5cclxuXHRyY29tbWEgPSBuZXcgUmVnRXhwKCBcIl5cIiArIHdoaXRlc3BhY2UgKyBcIiosXCIgKyB3aGl0ZXNwYWNlICsgXCIqXCIgKSxcclxuXHRyY29tYmluYXRvcnMgPSBuZXcgUmVnRXhwKCBcIl5cIiArIHdoaXRlc3BhY2UgKyBcIiooWz4rfl18XCIgKyB3aGl0ZXNwYWNlICsgXCIpXCIgKyB3aGl0ZXNwYWNlICsgXCIqXCIgKSxcclxuXHJcblx0cmF0dHJpYnV0ZVF1b3RlcyA9IG5ldyBSZWdFeHAoIFwiPVwiICsgd2hpdGVzcGFjZSArIFwiKihbXlxcXFxdJ1xcXCJdKj8pXCIgKyB3aGl0ZXNwYWNlICsgXCIqXFxcXF1cIiwgXCJnXCIgKSxcclxuXHJcblx0cnBzZXVkbyA9IG5ldyBSZWdFeHAoIHBzZXVkb3MgKSxcclxuXHRyaWRlbnRpZmllciA9IG5ldyBSZWdFeHAoIFwiXlwiICsgaWRlbnRpZmllciArIFwiJFwiICksXHJcblxyXG5cdG1hdGNoRXhwciA9IHtcclxuXHRcdFwiSURcIjogbmV3IFJlZ0V4cCggXCJeIyhcIiArIGlkZW50aWZpZXIgKyBcIilcIiApLFxyXG5cdFx0XCJDTEFTU1wiOiBuZXcgUmVnRXhwKCBcIl5cXFxcLihcIiArIGlkZW50aWZpZXIgKyBcIilcIiApLFxyXG5cdFx0XCJUQUdcIjogbmV3IFJlZ0V4cCggXCJeKFwiICsgaWRlbnRpZmllciArIFwifFsqXSlcIiApLFxyXG5cdFx0XCJBVFRSXCI6IG5ldyBSZWdFeHAoIFwiXlwiICsgYXR0cmlidXRlcyApLFxyXG5cdFx0XCJQU0VVRE9cIjogbmV3IFJlZ0V4cCggXCJeXCIgKyBwc2V1ZG9zICksXHJcblx0XHRcIkNISUxEXCI6IG5ldyBSZWdFeHAoIFwiXjoob25seXxmaXJzdHxsYXN0fG50aHxudGgtbGFzdCktKGNoaWxkfG9mLXR5cGUpKD86XFxcXChcIiArIHdoaXRlc3BhY2UgK1xyXG5cdFx0XHRcIiooZXZlbnxvZGR8KChbKy1dfCkoXFxcXGQqKW58KVwiICsgd2hpdGVzcGFjZSArIFwiKig/OihbKy1dfClcIiArIHdoaXRlc3BhY2UgK1xyXG5cdFx0XHRcIiooXFxcXGQrKXwpKVwiICsgd2hpdGVzcGFjZSArIFwiKlxcXFwpfClcIiwgXCJpXCIgKSxcclxuXHRcdFwiYm9vbFwiOiBuZXcgUmVnRXhwKCBcIl4oPzpcIiArIGJvb2xlYW5zICsgXCIpJFwiLCBcImlcIiApLFxyXG5cdFx0Ly8gRm9yIHVzZSBpbiBsaWJyYXJpZXMgaW1wbGVtZW50aW5nIC5pcygpXHJcblx0XHQvLyBXZSB1c2UgdGhpcyBmb3IgUE9TIG1hdGNoaW5nIGluIGBzZWxlY3RgXHJcblx0XHRcIm5lZWRzQ29udGV4dFwiOiBuZXcgUmVnRXhwKCBcIl5cIiArIHdoaXRlc3BhY2UgKyBcIipbPit+XXw6KGV2ZW58b2RkfGVxfGd0fGx0fG50aHxmaXJzdHxsYXN0KSg/OlxcXFwoXCIgK1xyXG5cdFx0XHR3aGl0ZXNwYWNlICsgXCIqKCg/Oi1cXFxcZCk/XFxcXGQqKVwiICsgd2hpdGVzcGFjZSArIFwiKlxcXFwpfCkoPz1bXi1dfCQpXCIsIFwiaVwiIClcclxuXHR9LFxyXG5cclxuXHRyaW5wdXRzID0gL14oPzppbnB1dHxzZWxlY3R8dGV4dGFyZWF8YnV0dG9uKSQvaSxcclxuXHRyaGVhZGVyID0gL15oXFxkJC9pLFxyXG5cclxuXHRybmF0aXZlID0gL15bXntdK1xce1xccypcXFtuYXRpdmUgXFx3LyxcclxuXHJcblx0Ly8gRWFzaWx5LXBhcnNlYWJsZS9yZXRyaWV2YWJsZSBJRCBvciBUQUcgb3IgQ0xBU1Mgc2VsZWN0b3JzXHJcblx0cnF1aWNrRXhwciA9IC9eKD86IyhbXFx3LV0rKXwoXFx3Kyl8XFwuKFtcXHctXSspKSQvLFxyXG5cclxuXHRyc2libGluZyA9IC9bK35dLyxcclxuXHRyZXNjYXBlID0gLyd8XFxcXC9nLFxyXG5cclxuXHQvLyBDU1MgZXNjYXBlcyBodHRwOi8vd3d3LnczLm9yZy9UUi9DU1MyMS9zeW5kYXRhLmh0bWwjZXNjYXBlZC1jaGFyYWN0ZXJzXHJcblx0cnVuZXNjYXBlID0gbmV3IFJlZ0V4cCggXCJcXFxcXFxcXChbXFxcXGRhLWZdezEsNn1cIiArIHdoaXRlc3BhY2UgKyBcIj98KFwiICsgd2hpdGVzcGFjZSArIFwiKXwuKVwiLCBcImlnXCIgKSxcclxuXHRmdW5lc2NhcGUgPSBmdW5jdGlvbiggXywgZXNjYXBlZCwgZXNjYXBlZFdoaXRlc3BhY2UgKSB7XHJcblx0XHR2YXIgaGlnaCA9IFwiMHhcIiArIGVzY2FwZWQgLSAweDEwMDAwO1xyXG5cdFx0Ly8gTmFOIG1lYW5zIG5vbi1jb2RlcG9pbnRcclxuXHRcdC8vIFN1cHBvcnQ6IEZpcmVmb3g8MjRcclxuXHRcdC8vIFdvcmthcm91bmQgZXJyb25lb3VzIG51bWVyaWMgaW50ZXJwcmV0YXRpb24gb2YgK1wiMHhcIlxyXG5cdFx0cmV0dXJuIGhpZ2ggIT09IGhpZ2ggfHwgZXNjYXBlZFdoaXRlc3BhY2UgP1xyXG5cdFx0XHRlc2NhcGVkIDpcclxuXHRcdFx0aGlnaCA8IDAgP1xyXG5cdFx0XHRcdC8vIEJNUCBjb2RlcG9pbnRcclxuXHRcdFx0XHRTdHJpbmcuZnJvbUNoYXJDb2RlKCBoaWdoICsgMHgxMDAwMCApIDpcclxuXHRcdFx0XHQvLyBTdXBwbGVtZW50YWwgUGxhbmUgY29kZXBvaW50IChzdXJyb2dhdGUgcGFpcilcclxuXHRcdFx0XHRTdHJpbmcuZnJvbUNoYXJDb2RlKCBoaWdoID4+IDEwIHwgMHhEODAwLCBoaWdoICYgMHgzRkYgfCAweERDMDAgKTtcclxuXHR9LFxyXG5cclxuXHQvLyBVc2VkIGZvciBpZnJhbWVzXHJcblx0Ly8gU2VlIHNldERvY3VtZW50KClcclxuXHQvLyBSZW1vdmluZyB0aGUgZnVuY3Rpb24gd3JhcHBlciBjYXVzZXMgYSBcIlBlcm1pc3Npb24gRGVuaWVkXCJcclxuXHQvLyBlcnJvciBpbiBJRVxyXG5cdHVubG9hZEhhbmRsZXIgPSBmdW5jdGlvbigpIHtcclxuXHRcdHNldERvY3VtZW50KCk7XHJcblx0fTtcclxuXHJcbi8vIE9wdGltaXplIGZvciBwdXNoLmFwcGx5KCBfLCBOb2RlTGlzdCApXHJcbnRyeSB7XHJcblx0cHVzaC5hcHBseShcclxuXHRcdChhcnIgPSBzbGljZS5jYWxsKCBwcmVmZXJyZWREb2MuY2hpbGROb2RlcyApKSxcclxuXHRcdHByZWZlcnJlZERvYy5jaGlsZE5vZGVzXHJcblx0KTtcclxuXHQvLyBTdXBwb3J0OiBBbmRyb2lkPDQuMFxyXG5cdC8vIERldGVjdCBzaWxlbnRseSBmYWlsaW5nIHB1c2guYXBwbHlcclxuXHRhcnJbIHByZWZlcnJlZERvYy5jaGlsZE5vZGVzLmxlbmd0aCBdLm5vZGVUeXBlO1xyXG59IGNhdGNoICggZSApIHtcclxuXHRwdXNoID0geyBhcHBseTogYXJyLmxlbmd0aCA/XHJcblxyXG5cdFx0Ly8gTGV2ZXJhZ2Ugc2xpY2UgaWYgcG9zc2libGVcclxuXHRcdGZ1bmN0aW9uKCB0YXJnZXQsIGVscyApIHtcclxuXHRcdFx0cHVzaF9uYXRpdmUuYXBwbHkoIHRhcmdldCwgc2xpY2UuY2FsbChlbHMpICk7XHJcblx0XHR9IDpcclxuXHJcblx0XHQvLyBTdXBwb3J0OiBJRTw5XHJcblx0XHQvLyBPdGhlcndpc2UgYXBwZW5kIGRpcmVjdGx5XHJcblx0XHRmdW5jdGlvbiggdGFyZ2V0LCBlbHMgKSB7XHJcblx0XHRcdHZhciBqID0gdGFyZ2V0Lmxlbmd0aCxcclxuXHRcdFx0XHRpID0gMDtcclxuXHRcdFx0Ly8gQ2FuJ3QgdHJ1c3QgTm9kZUxpc3QubGVuZ3RoXHJcblx0XHRcdHdoaWxlICggKHRhcmdldFtqKytdID0gZWxzW2krK10pICkge31cclxuXHRcdFx0dGFyZ2V0Lmxlbmd0aCA9IGogLSAxO1xyXG5cdFx0fVxyXG5cdH07XHJcbn1cclxuXHJcbmZ1bmN0aW9uIFNpenpsZSggc2VsZWN0b3IsIGNvbnRleHQsIHJlc3VsdHMsIHNlZWQgKSB7XHJcblx0dmFyIG0sIGksIGVsZW0sIG5pZCwgbmlkc2VsZWN0LCBtYXRjaCwgZ3JvdXBzLCBuZXdTZWxlY3RvcixcclxuXHRcdG5ld0NvbnRleHQgPSBjb250ZXh0ICYmIGNvbnRleHQub3duZXJEb2N1bWVudCxcclxuXHJcblx0XHQvLyBub2RlVHlwZSBkZWZhdWx0cyB0byA5LCBzaW5jZSBjb250ZXh0IGRlZmF1bHRzIHRvIGRvY3VtZW50XHJcblx0XHRub2RlVHlwZSA9IGNvbnRleHQgPyBjb250ZXh0Lm5vZGVUeXBlIDogOTtcclxuXHJcblx0cmVzdWx0cyA9IHJlc3VsdHMgfHwgW107XHJcblxyXG5cdC8vIFJldHVybiBlYXJseSBmcm9tIGNhbGxzIHdpdGggaW52YWxpZCBzZWxlY3RvciBvciBjb250ZXh0XHJcblx0aWYgKCB0eXBlb2Ygc2VsZWN0b3IgIT09IFwic3RyaW5nXCIgfHwgIXNlbGVjdG9yIHx8XHJcblx0XHRub2RlVHlwZSAhPT0gMSAmJiBub2RlVHlwZSAhPT0gOSAmJiBub2RlVHlwZSAhPT0gMTEgKSB7XHJcblxyXG5cdFx0cmV0dXJuIHJlc3VsdHM7XHJcblx0fVxyXG5cclxuXHQvLyBUcnkgdG8gc2hvcnRjdXQgZmluZCBvcGVyYXRpb25zIChhcyBvcHBvc2VkIHRvIGZpbHRlcnMpIGluIEhUTUwgZG9jdW1lbnRzXHJcblx0aWYgKCAhc2VlZCApIHtcclxuXHJcblx0XHRpZiAoICggY29udGV4dCA/IGNvbnRleHQub3duZXJEb2N1bWVudCB8fCBjb250ZXh0IDogcHJlZmVycmVkRG9jICkgIT09IGRvY3VtZW50ICkge1xyXG5cdFx0XHRzZXREb2N1bWVudCggY29udGV4dCApO1xyXG5cdFx0fVxyXG5cdFx0Y29udGV4dCA9IGNvbnRleHQgfHwgZG9jdW1lbnQ7XHJcblxyXG5cdFx0aWYgKCBkb2N1bWVudElzSFRNTCApIHtcclxuXHJcblx0XHRcdC8vIElmIHRoZSBzZWxlY3RvciBpcyBzdWZmaWNpZW50bHkgc2ltcGxlLCB0cnkgdXNpbmcgYSBcImdldCpCeSpcIiBET00gbWV0aG9kXHJcblx0XHRcdC8vIChleGNlcHRpbmcgRG9jdW1lbnRGcmFnbWVudCBjb250ZXh0LCB3aGVyZSB0aGUgbWV0aG9kcyBkb24ndCBleGlzdClcclxuXHRcdFx0aWYgKCBub2RlVHlwZSAhPT0gMTEgJiYgKG1hdGNoID0gcnF1aWNrRXhwci5leGVjKCBzZWxlY3RvciApKSApIHtcclxuXHJcblx0XHRcdFx0Ly8gSUQgc2VsZWN0b3JcclxuXHRcdFx0XHRpZiAoIChtID0gbWF0Y2hbMV0pICkge1xyXG5cclxuXHRcdFx0XHRcdC8vIERvY3VtZW50IGNvbnRleHRcclxuXHRcdFx0XHRcdGlmICggbm9kZVR5cGUgPT09IDkgKSB7XHJcblx0XHRcdFx0XHRcdGlmICggKGVsZW0gPSBjb250ZXh0LmdldEVsZW1lbnRCeUlkKCBtICkpICkge1xyXG5cclxuXHRcdFx0XHRcdFx0XHQvLyBTdXBwb3J0OiBJRSwgT3BlcmEsIFdlYmtpdFxyXG5cdFx0XHRcdFx0XHRcdC8vIFRPRE86IGlkZW50aWZ5IHZlcnNpb25zXHJcblx0XHRcdFx0XHRcdFx0Ly8gZ2V0RWxlbWVudEJ5SWQgY2FuIG1hdGNoIGVsZW1lbnRzIGJ5IG5hbWUgaW5zdGVhZCBvZiBJRFxyXG5cdFx0XHRcdFx0XHRcdGlmICggZWxlbS5pZCA9PT0gbSApIHtcclxuXHRcdFx0XHRcdFx0XHRcdHJlc3VsdHMucHVzaCggZWxlbSApO1xyXG5cdFx0XHRcdFx0XHRcdFx0cmV0dXJuIHJlc3VsdHM7XHJcblx0XHRcdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0XHR9IGVsc2Uge1xyXG5cdFx0XHRcdFx0XHRcdHJldHVybiByZXN1bHRzO1xyXG5cdFx0XHRcdFx0XHR9XHJcblxyXG5cdFx0XHRcdFx0Ly8gRWxlbWVudCBjb250ZXh0XHJcblx0XHRcdFx0XHR9IGVsc2Uge1xyXG5cclxuXHRcdFx0XHRcdFx0Ly8gU3VwcG9ydDogSUUsIE9wZXJhLCBXZWJraXRcclxuXHRcdFx0XHRcdFx0Ly8gVE9ETzogaWRlbnRpZnkgdmVyc2lvbnNcclxuXHRcdFx0XHRcdFx0Ly8gZ2V0RWxlbWVudEJ5SWQgY2FuIG1hdGNoIGVsZW1lbnRzIGJ5IG5hbWUgaW5zdGVhZCBvZiBJRFxyXG5cdFx0XHRcdFx0XHRpZiAoIG5ld0NvbnRleHQgJiYgKGVsZW0gPSBuZXdDb250ZXh0LmdldEVsZW1lbnRCeUlkKCBtICkpICYmXHJcblx0XHRcdFx0XHRcdFx0Y29udGFpbnMoIGNvbnRleHQsIGVsZW0gKSAmJlxyXG5cdFx0XHRcdFx0XHRcdGVsZW0uaWQgPT09IG0gKSB7XHJcblxyXG5cdFx0XHRcdFx0XHRcdHJlc3VsdHMucHVzaCggZWxlbSApO1xyXG5cdFx0XHRcdFx0XHRcdHJldHVybiByZXN1bHRzO1xyXG5cdFx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHR9XHJcblxyXG5cdFx0XHRcdC8vIFR5cGUgc2VsZWN0b3JcclxuXHRcdFx0XHR9IGVsc2UgaWYgKCBtYXRjaFsyXSApIHtcclxuXHRcdFx0XHRcdHB1c2guYXBwbHkoIHJlc3VsdHMsIGNvbnRleHQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoIHNlbGVjdG9yICkgKTtcclxuXHRcdFx0XHRcdHJldHVybiByZXN1bHRzO1xyXG5cclxuXHRcdFx0XHQvLyBDbGFzcyBzZWxlY3RvclxyXG5cdFx0XHRcdH0gZWxzZSBpZiAoIChtID0gbWF0Y2hbM10pICYmIHN1cHBvcnQuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSAmJlxyXG5cdFx0XHRcdFx0Y29udGV4dC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lICkge1xyXG5cclxuXHRcdFx0XHRcdHB1c2guYXBwbHkoIHJlc3VsdHMsIGNvbnRleHQuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSggbSApICk7XHJcblx0XHRcdFx0XHRyZXR1cm4gcmVzdWx0cztcclxuXHRcdFx0XHR9XHJcblx0XHRcdH1cclxuXHJcblx0XHRcdC8vIFRha2UgYWR2YW50YWdlIG9mIHF1ZXJ5U2VsZWN0b3JBbGxcclxuXHRcdFx0aWYgKCBzdXBwb3J0LnFzYSAmJlxyXG5cdFx0XHRcdCFjb21waWxlckNhY2hlWyBzZWxlY3RvciArIFwiIFwiIF0gJiZcclxuXHRcdFx0XHQoIXJidWdneVFTQSB8fCAhcmJ1Z2d5UVNBLnRlc3QoIHNlbGVjdG9yICkpICkge1xyXG5cclxuXHRcdFx0XHRpZiAoIG5vZGVUeXBlICE9PSAxICkge1xyXG5cdFx0XHRcdFx0bmV3Q29udGV4dCA9IGNvbnRleHQ7XHJcblx0XHRcdFx0XHRuZXdTZWxlY3RvciA9IHNlbGVjdG9yO1xyXG5cclxuXHRcdFx0XHQvLyBxU0EgbG9va3Mgb3V0c2lkZSBFbGVtZW50IGNvbnRleHQsIHdoaWNoIGlzIG5vdCB3aGF0IHdlIHdhbnRcclxuXHRcdFx0XHQvLyBUaGFua3MgdG8gQW5kcmV3IER1cG9udCBmb3IgdGhpcyB3b3JrYXJvdW5kIHRlY2huaXF1ZVxyXG5cdFx0XHRcdC8vIFN1cHBvcnQ6IElFIDw9OFxyXG5cdFx0XHRcdC8vIEV4Y2x1ZGUgb2JqZWN0IGVsZW1lbnRzXHJcblx0XHRcdFx0fSBlbHNlIGlmICggY29udGV4dC5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpICE9PSBcIm9iamVjdFwiICkge1xyXG5cclxuXHRcdFx0XHRcdC8vIENhcHR1cmUgdGhlIGNvbnRleHQgSUQsIHNldHRpbmcgaXQgZmlyc3QgaWYgbmVjZXNzYXJ5XHJcblx0XHRcdFx0XHRpZiAoIChuaWQgPSBjb250ZXh0LmdldEF0dHJpYnV0ZSggXCJpZFwiICkpICkge1xyXG5cdFx0XHRcdFx0XHRuaWQgPSBuaWQucmVwbGFjZSggcmVzY2FwZSwgXCJcXFxcJCZcIiApO1xyXG5cdFx0XHRcdFx0fSBlbHNlIHtcclxuXHRcdFx0XHRcdFx0Y29udGV4dC5zZXRBdHRyaWJ1dGUoIFwiaWRcIiwgKG5pZCA9IGV4cGFuZG8pICk7XHJcblx0XHRcdFx0XHR9XHJcblxyXG5cdFx0XHRcdFx0Ly8gUHJlZml4IGV2ZXJ5IHNlbGVjdG9yIGluIHRoZSBsaXN0XHJcblx0XHRcdFx0XHRncm91cHMgPSB0b2tlbml6ZSggc2VsZWN0b3IgKTtcclxuXHRcdFx0XHRcdGkgPSBncm91cHMubGVuZ3RoO1xyXG5cdFx0XHRcdFx0bmlkc2VsZWN0ID0gcmlkZW50aWZpZXIudGVzdCggbmlkICkgPyBcIiNcIiArIG5pZCA6IFwiW2lkPSdcIiArIG5pZCArIFwiJ11cIjtcclxuXHRcdFx0XHRcdHdoaWxlICggaS0tICkge1xyXG5cdFx0XHRcdFx0XHRncm91cHNbaV0gPSBuaWRzZWxlY3QgKyBcIiBcIiArIHRvU2VsZWN0b3IoIGdyb3Vwc1tpXSApO1xyXG5cdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0bmV3U2VsZWN0b3IgPSBncm91cHMuam9pbiggXCIsXCIgKTtcclxuXHJcblx0XHRcdFx0XHQvLyBFeHBhbmQgY29udGV4dCBmb3Igc2libGluZyBzZWxlY3RvcnNcclxuXHRcdFx0XHRcdG5ld0NvbnRleHQgPSByc2libGluZy50ZXN0KCBzZWxlY3RvciApICYmIHRlc3RDb250ZXh0KCBjb250ZXh0LnBhcmVudE5vZGUgKSB8fFxyXG5cdFx0XHRcdFx0XHRjb250ZXh0O1xyXG5cdFx0XHRcdH1cclxuXHJcblx0XHRcdFx0aWYgKCBuZXdTZWxlY3RvciApIHtcclxuXHRcdFx0XHRcdHRyeSB7XHJcblx0XHRcdFx0XHRcdHB1c2guYXBwbHkoIHJlc3VsdHMsXHJcblx0XHRcdFx0XHRcdFx0bmV3Q29udGV4dC5xdWVyeVNlbGVjdG9yQWxsKCBuZXdTZWxlY3RvciApXHJcblx0XHRcdFx0XHRcdCk7XHJcblx0XHRcdFx0XHRcdHJldHVybiByZXN1bHRzO1xyXG5cdFx0XHRcdFx0fSBjYXRjaCAoIHFzYUVycm9yICkge1xyXG5cdFx0XHRcdFx0fSBmaW5hbGx5IHtcclxuXHRcdFx0XHRcdFx0aWYgKCBuaWQgPT09IGV4cGFuZG8gKSB7XHJcblx0XHRcdFx0XHRcdFx0Y29udGV4dC5yZW1vdmVBdHRyaWJ1dGUoIFwiaWRcIiApO1xyXG5cdFx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHR9XHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9XHJcblx0XHR9XHJcblx0fVxyXG5cclxuXHQvLyBBbGwgb3RoZXJzXHJcblx0cmV0dXJuIHNlbGVjdCggc2VsZWN0b3IucmVwbGFjZSggcnRyaW0sIFwiJDFcIiApLCBjb250ZXh0LCByZXN1bHRzLCBzZWVkICk7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBDcmVhdGUga2V5LXZhbHVlIGNhY2hlcyBvZiBsaW1pdGVkIHNpemVcclxuICogQHJldHVybnMge2Z1bmN0aW9uKHN0cmluZywgb2JqZWN0KX0gUmV0dXJucyB0aGUgT2JqZWN0IGRhdGEgYWZ0ZXIgc3RvcmluZyBpdCBvbiBpdHNlbGYgd2l0aFxyXG4gKlx0cHJvcGVydHkgbmFtZSB0aGUgKHNwYWNlLXN1ZmZpeGVkKSBzdHJpbmcgYW5kIChpZiB0aGUgY2FjaGUgaXMgbGFyZ2VyIHRoYW4gRXhwci5jYWNoZUxlbmd0aClcclxuICpcdGRlbGV0aW5nIHRoZSBvbGRlc3QgZW50cnlcclxuICovXHJcbmZ1bmN0aW9uIGNyZWF0ZUNhY2hlKCkge1xyXG5cdHZhciBrZXlzID0gW107XHJcblxyXG5cdGZ1bmN0aW9uIGNhY2hlKCBrZXksIHZhbHVlICkge1xyXG5cdFx0Ly8gVXNlIChrZXkgKyBcIiBcIikgdG8gYXZvaWQgY29sbGlzaW9uIHdpdGggbmF0aXZlIHByb3RvdHlwZSBwcm9wZXJ0aWVzIChzZWUgSXNzdWUgIzE1NylcclxuXHRcdGlmICgga2V5cy5wdXNoKCBrZXkgKyBcIiBcIiApID4gRXhwci5jYWNoZUxlbmd0aCApIHtcclxuXHRcdFx0Ly8gT25seSBrZWVwIHRoZSBtb3N0IHJlY2VudCBlbnRyaWVzXHJcblx0XHRcdGRlbGV0ZSBjYWNoZVsga2V5cy5zaGlmdCgpIF07XHJcblx0XHR9XHJcblx0XHRyZXR1cm4gKGNhY2hlWyBrZXkgKyBcIiBcIiBdID0gdmFsdWUpO1xyXG5cdH1cclxuXHRyZXR1cm4gY2FjaGU7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBNYXJrIGEgZnVuY3Rpb24gZm9yIHNwZWNpYWwgdXNlIGJ5IFNpenpsZVxyXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmbiBUaGUgZnVuY3Rpb24gdG8gbWFya1xyXG4gKi9cclxuZnVuY3Rpb24gbWFya0Z1bmN0aW9uKCBmbiApIHtcclxuXHRmblsgZXhwYW5kbyBdID0gdHJ1ZTtcclxuXHRyZXR1cm4gZm47XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBTdXBwb3J0IHRlc3RpbmcgdXNpbmcgYW4gZWxlbWVudFxyXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmbiBQYXNzZWQgdGhlIGNyZWF0ZWQgZGl2IGFuZCBleHBlY3RzIGEgYm9vbGVhbiByZXN1bHRcclxuICovXHJcbmZ1bmN0aW9uIGFzc2VydCggZm4gKSB7XHJcblx0dmFyIGRpdiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7XHJcblxyXG5cdHRyeSB7XHJcblx0XHRyZXR1cm4gISFmbiggZGl2ICk7XHJcblx0fSBjYXRjaCAoZSkge1xyXG5cdFx0cmV0dXJuIGZhbHNlO1xyXG5cdH0gZmluYWxseSB7XHJcblx0XHQvLyBSZW1vdmUgZnJvbSBpdHMgcGFyZW50IGJ5IGRlZmF1bHRcclxuXHRcdGlmICggZGl2LnBhcmVudE5vZGUgKSB7XHJcblx0XHRcdGRpdi5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKCBkaXYgKTtcclxuXHRcdH1cclxuXHRcdC8vIHJlbGVhc2UgbWVtb3J5IGluIElFXHJcblx0XHRkaXYgPSBudWxsO1xyXG5cdH1cclxufVxyXG5cclxuLyoqXHJcbiAqIEFkZHMgdGhlIHNhbWUgaGFuZGxlciBmb3IgYWxsIG9mIHRoZSBzcGVjaWZpZWQgYXR0cnNcclxuICogQHBhcmFtIHtTdHJpbmd9IGF0dHJzIFBpcGUtc2VwYXJhdGVkIGxpc3Qgb2YgYXR0cmlidXRlc1xyXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBoYW5kbGVyIFRoZSBtZXRob2QgdGhhdCB3aWxsIGJlIGFwcGxpZWRcclxuICovXHJcbmZ1bmN0aW9uIGFkZEhhbmRsZSggYXR0cnMsIGhhbmRsZXIgKSB7XHJcblx0dmFyIGFyciA9IGF0dHJzLnNwbGl0KFwifFwiKSxcclxuXHRcdGkgPSBhcnIubGVuZ3RoO1xyXG5cclxuXHR3aGlsZSAoIGktLSApIHtcclxuXHRcdEV4cHIuYXR0ckhhbmRsZVsgYXJyW2ldIF0gPSBoYW5kbGVyO1xyXG5cdH1cclxufVxyXG5cclxuLyoqXHJcbiAqIENoZWNrcyBkb2N1bWVudCBvcmRlciBvZiB0d28gc2libGluZ3NcclxuICogQHBhcmFtIHtFbGVtZW50fSBhXHJcbiAqIEBwYXJhbSB7RWxlbWVudH0gYlxyXG4gKiBAcmV0dXJucyB7TnVtYmVyfSBSZXR1cm5zIGxlc3MgdGhhbiAwIGlmIGEgcHJlY2VkZXMgYiwgZ3JlYXRlciB0aGFuIDAgaWYgYSBmb2xsb3dzIGJcclxuICovXHJcbmZ1bmN0aW9uIHNpYmxpbmdDaGVjayggYSwgYiApIHtcclxuXHR2YXIgY3VyID0gYiAmJiBhLFxyXG5cdFx0ZGlmZiA9IGN1ciAmJiBhLm5vZGVUeXBlID09PSAxICYmIGIubm9kZVR5cGUgPT09IDEgJiZcclxuXHRcdFx0KCB+Yi5zb3VyY2VJbmRleCB8fCBNQVhfTkVHQVRJVkUgKSAtXHJcblx0XHRcdCggfmEuc291cmNlSW5kZXggfHwgTUFYX05FR0FUSVZFICk7XHJcblxyXG5cdC8vIFVzZSBJRSBzb3VyY2VJbmRleCBpZiBhdmFpbGFibGUgb24gYm90aCBub2Rlc1xyXG5cdGlmICggZGlmZiApIHtcclxuXHRcdHJldHVybiBkaWZmO1xyXG5cdH1cclxuXHJcblx0Ly8gQ2hlY2sgaWYgYiBmb2xsb3dzIGFcclxuXHRpZiAoIGN1ciApIHtcclxuXHRcdHdoaWxlICggKGN1ciA9IGN1ci5uZXh0U2libGluZykgKSB7XHJcblx0XHRcdGlmICggY3VyID09PSBiICkge1xyXG5cdFx0XHRcdHJldHVybiAtMTtcclxuXHRcdFx0fVxyXG5cdFx0fVxyXG5cdH1cclxuXHJcblx0cmV0dXJuIGEgPyAxIDogLTE7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBSZXR1cm5zIGEgZnVuY3Rpb24gdG8gdXNlIGluIHBzZXVkb3MgZm9yIGlucHV0IHR5cGVzXHJcbiAqIEBwYXJhbSB7U3RyaW5nfSB0eXBlXHJcbiAqL1xyXG5mdW5jdGlvbiBjcmVhdGVJbnB1dFBzZXVkbyggdHlwZSApIHtcclxuXHRyZXR1cm4gZnVuY3Rpb24oIGVsZW0gKSB7XHJcblx0XHR2YXIgbmFtZSA9IGVsZW0ubm9kZU5hbWUudG9Mb3dlckNhc2UoKTtcclxuXHRcdHJldHVybiBuYW1lID09PSBcImlucHV0XCIgJiYgZWxlbS50eXBlID09PSB0eXBlO1xyXG5cdH07XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBSZXR1cm5zIGEgZnVuY3Rpb24gdG8gdXNlIGluIHBzZXVkb3MgZm9yIGJ1dHRvbnNcclxuICogQHBhcmFtIHtTdHJpbmd9IHR5cGVcclxuICovXHJcbmZ1bmN0aW9uIGNyZWF0ZUJ1dHRvblBzZXVkbyggdHlwZSApIHtcclxuXHRyZXR1cm4gZnVuY3Rpb24oIGVsZW0gKSB7XHJcblx0XHR2YXIgbmFtZSA9IGVsZW0ubm9kZU5hbWUudG9Mb3dlckNhc2UoKTtcclxuXHRcdHJldHVybiAobmFtZSA9PT0gXCJpbnB1dFwiIHx8IG5hbWUgPT09IFwiYnV0dG9uXCIpICYmIGVsZW0udHlwZSA9PT0gdHlwZTtcclxuXHR9O1xyXG59XHJcblxyXG4vKipcclxuICogUmV0dXJucyBhIGZ1bmN0aW9uIHRvIHVzZSBpbiBwc2V1ZG9zIGZvciBwb3NpdGlvbmFsc1xyXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmblxyXG4gKi9cclxuZnVuY3Rpb24gY3JlYXRlUG9zaXRpb25hbFBzZXVkbyggZm4gKSB7XHJcblx0cmV0dXJuIG1hcmtGdW5jdGlvbihmdW5jdGlvbiggYXJndW1lbnQgKSB7XHJcblx0XHRhcmd1bWVudCA9ICthcmd1bWVudDtcclxuXHRcdHJldHVybiBtYXJrRnVuY3Rpb24oZnVuY3Rpb24oIHNlZWQsIG1hdGNoZXMgKSB7XHJcblx0XHRcdHZhciBqLFxyXG5cdFx0XHRcdG1hdGNoSW5kZXhlcyA9IGZuKCBbXSwgc2VlZC5sZW5ndGgsIGFyZ3VtZW50ICksXHJcblx0XHRcdFx0aSA9IG1hdGNoSW5kZXhlcy5sZW5ndGg7XHJcblxyXG5cdFx0XHQvLyBNYXRjaCBlbGVtZW50cyBmb3VuZCBhdCB0aGUgc3BlY2lmaWVkIGluZGV4ZXNcclxuXHRcdFx0d2hpbGUgKCBpLS0gKSB7XHJcblx0XHRcdFx0aWYgKCBzZWVkWyAoaiA9IG1hdGNoSW5kZXhlc1tpXSkgXSApIHtcclxuXHRcdFx0XHRcdHNlZWRbal0gPSAhKG1hdGNoZXNbal0gPSBzZWVkW2pdKTtcclxuXHRcdFx0XHR9XHJcblx0XHRcdH1cclxuXHRcdH0pO1xyXG5cdH0pO1xyXG59XHJcblxyXG4vKipcclxuICogQ2hlY2tzIGEgbm9kZSBmb3IgdmFsaWRpdHkgYXMgYSBTaXp6bGUgY29udGV4dFxyXG4gKiBAcGFyYW0ge0VsZW1lbnR8T2JqZWN0PX0gY29udGV4dFxyXG4gKiBAcmV0dXJucyB7RWxlbWVudHxPYmplY3R8Qm9vbGVhbn0gVGhlIGlucHV0IG5vZGUgaWYgYWNjZXB0YWJsZSwgb3RoZXJ3aXNlIGEgZmFsc3kgdmFsdWVcclxuICovXHJcbmZ1bmN0aW9uIHRlc3RDb250ZXh0KCBjb250ZXh0ICkge1xyXG5cdHJldHVybiBjb250ZXh0ICYmIHR5cGVvZiBjb250ZXh0LmdldEVsZW1lbnRzQnlUYWdOYW1lICE9PSBcInVuZGVmaW5lZFwiICYmIGNvbnRleHQ7XHJcbn1cclxuXHJcbi8vIEV4cG9zZSBzdXBwb3J0IHZhcnMgZm9yIGNvbnZlbmllbmNlXHJcbnN1cHBvcnQgPSBTaXp6bGUuc3VwcG9ydCA9IHt9O1xyXG5cclxuLyoqXHJcbiAqIERldGVjdHMgWE1MIG5vZGVzXHJcbiAqIEBwYXJhbSB7RWxlbWVudHxPYmplY3R9IGVsZW0gQW4gZWxlbWVudCBvciBhIGRvY3VtZW50XHJcbiAqIEByZXR1cm5zIHtCb29sZWFufSBUcnVlIGlmZiBlbGVtIGlzIGEgbm9uLUhUTUwgWE1MIG5vZGVcclxuICovXHJcbmlzWE1MID0gU2l6emxlLmlzWE1MID0gZnVuY3Rpb24oIGVsZW0gKSB7XHJcblx0Ly8gZG9jdW1lbnRFbGVtZW50IGlzIHZlcmlmaWVkIGZvciBjYXNlcyB3aGVyZSBpdCBkb2Vzbid0IHlldCBleGlzdFxyXG5cdC8vIChzdWNoIGFzIGxvYWRpbmcgaWZyYW1lcyBpbiBJRSAtICM0ODMzKVxyXG5cdHZhciBkb2N1bWVudEVsZW1lbnQgPSBlbGVtICYmIChlbGVtLm93bmVyRG9jdW1lbnQgfHwgZWxlbSkuZG9jdW1lbnRFbGVtZW50O1xyXG5cdHJldHVybiBkb2N1bWVudEVsZW1lbnQgPyBkb2N1bWVudEVsZW1lbnQubm9kZU5hbWUgIT09IFwiSFRNTFwiIDogZmFsc2U7XHJcbn07XHJcblxyXG4vKipcclxuICogU2V0cyBkb2N1bWVudC1yZWxhdGVkIHZhcmlhYmxlcyBvbmNlIGJhc2VkIG9uIHRoZSBjdXJyZW50IGRvY3VtZW50XHJcbiAqIEBwYXJhbSB7RWxlbWVudHxPYmplY3R9IFtkb2NdIEFuIGVsZW1lbnQgb3IgZG9jdW1lbnQgb2JqZWN0IHRvIHVzZSB0byBzZXQgdGhlIGRvY3VtZW50XHJcbiAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIGN1cnJlbnQgZG9jdW1lbnRcclxuICovXHJcbnNldERvY3VtZW50ID0gU2l6emxlLnNldERvY3VtZW50ID0gZnVuY3Rpb24oIG5vZGUgKSB7XHJcblx0dmFyIGhhc0NvbXBhcmUsIHBhcmVudCxcclxuXHRcdGRvYyA9IG5vZGUgPyBub2RlLm93bmVyRG9jdW1lbnQgfHwgbm9kZSA6IHByZWZlcnJlZERvYztcclxuXHJcblx0Ly8gUmV0dXJuIGVhcmx5IGlmIGRvYyBpcyBpbnZhbGlkIG9yIGFscmVhZHkgc2VsZWN0ZWRcclxuXHRpZiAoIGRvYyA9PT0gZG9jdW1lbnQgfHwgZG9jLm5vZGVUeXBlICE9PSA5IHx8ICFkb2MuZG9jdW1lbnRFbGVtZW50ICkge1xyXG5cdFx0cmV0dXJuIGRvY3VtZW50O1xyXG5cdH1cclxuXHJcblx0Ly8gVXBkYXRlIGdsb2JhbCB2YXJpYWJsZXNcclxuXHRkb2N1bWVudCA9IGRvYztcclxuXHRkb2NFbGVtID0gZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50O1xyXG5cdGRvY3VtZW50SXNIVE1MID0gIWlzWE1MKCBkb2N1bWVudCApO1xyXG5cclxuXHQvLyBTdXBwb3J0OiBJRSA5LTExLCBFZGdlXHJcblx0Ly8gQWNjZXNzaW5nIGlmcmFtZSBkb2N1bWVudHMgYWZ0ZXIgdW5sb2FkIHRocm93cyBcInBlcm1pc3Npb24gZGVuaWVkXCIgZXJyb3JzIChqUXVlcnkgIzEzOTM2KVxyXG5cdGlmICggKHBhcmVudCA9IGRvY3VtZW50LmRlZmF1bHRWaWV3KSAmJiBwYXJlbnQudG9wICE9PSBwYXJlbnQgKSB7XHJcblx0XHQvLyBTdXBwb3J0OiBJRSAxMVxyXG5cdFx0aWYgKCBwYXJlbnQuYWRkRXZlbnRMaXN0ZW5lciApIHtcclxuXHRcdFx0cGFyZW50LmFkZEV2ZW50TGlzdGVuZXIoIFwidW5sb2FkXCIsIHVubG9hZEhhbmRsZXIsIGZhbHNlICk7XHJcblxyXG5cdFx0Ly8gU3VwcG9ydDogSUUgOSAtIDEwIG9ubHlcclxuXHRcdH0gZWxzZSBpZiAoIHBhcmVudC5hdHRhY2hFdmVudCApIHtcclxuXHRcdFx0cGFyZW50LmF0dGFjaEV2ZW50KCBcIm9udW5sb2FkXCIsIHVubG9hZEhhbmRsZXIgKTtcclxuXHRcdH1cclxuXHR9XHJcblxyXG5cdC8qIEF0dHJpYnV0ZXNcclxuXHQtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tICovXHJcblxyXG5cdC8vIFN1cHBvcnQ6IElFPDhcclxuXHQvLyBWZXJpZnkgdGhhdCBnZXRBdHRyaWJ1dGUgcmVhbGx5IHJldHVybnMgYXR0cmlidXRlcyBhbmQgbm90IHByb3BlcnRpZXNcclxuXHQvLyAoZXhjZXB0aW5nIElFOCBib29sZWFucylcclxuXHRzdXBwb3J0LmF0dHJpYnV0ZXMgPSBhc3NlcnQoZnVuY3Rpb24oIGRpdiApIHtcclxuXHRcdGRpdi5jbGFzc05hbWUgPSBcImlcIjtcclxuXHRcdHJldHVybiAhZGl2LmdldEF0dHJpYnV0ZShcImNsYXNzTmFtZVwiKTtcclxuXHR9KTtcclxuXHJcblx0LyogZ2V0RWxlbWVudChzKUJ5KlxyXG5cdC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gKi9cclxuXHJcblx0Ly8gQ2hlY2sgaWYgZ2V0RWxlbWVudHNCeVRhZ05hbWUoXCIqXCIpIHJldHVybnMgb25seSBlbGVtZW50c1xyXG5cdHN1cHBvcnQuZ2V0RWxlbWVudHNCeVRhZ05hbWUgPSBhc3NlcnQoZnVuY3Rpb24oIGRpdiApIHtcclxuXHRcdGRpdi5hcHBlbmRDaGlsZCggZG9jdW1lbnQuY3JlYXRlQ29tbWVudChcIlwiKSApO1xyXG5cdFx0cmV0dXJuICFkaXYuZ2V0RWxlbWVudHNCeVRhZ05hbWUoXCIqXCIpLmxlbmd0aDtcclxuXHR9KTtcclxuXHJcblx0Ly8gU3VwcG9ydDogSUU8OVxyXG5cdHN1cHBvcnQuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSA9IHJuYXRpdmUudGVzdCggZG9jdW1lbnQuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSApO1xyXG5cclxuXHQvLyBTdXBwb3J0OiBJRTwxMFxyXG5cdC8vIENoZWNrIGlmIGdldEVsZW1lbnRCeUlkIHJldHVybnMgZWxlbWVudHMgYnkgbmFtZVxyXG5cdC8vIFRoZSBicm9rZW4gZ2V0RWxlbWVudEJ5SWQgbWV0aG9kcyBkb24ndCBwaWNrIHVwIHByb2dyYW1hdGljYWxseS1zZXQgbmFtZXMsXHJcblx0Ly8gc28gdXNlIGEgcm91bmRhYm91dCBnZXRFbGVtZW50c0J5TmFtZSB0ZXN0XHJcblx0c3VwcG9ydC5nZXRCeUlkID0gYXNzZXJ0KGZ1bmN0aW9uKCBkaXYgKSB7XHJcblx0XHRkb2NFbGVtLmFwcGVuZENoaWxkKCBkaXYgKS5pZCA9IGV4cGFuZG87XHJcblx0XHRyZXR1cm4gIWRvY3VtZW50LmdldEVsZW1lbnRzQnlOYW1lIHx8ICFkb2N1bWVudC5nZXRFbGVtZW50c0J5TmFtZSggZXhwYW5kbyApLmxlbmd0aDtcclxuXHR9KTtcclxuXHJcblx0Ly8gSUQgZmluZCBhbmQgZmlsdGVyXHJcblx0aWYgKCBzdXBwb3J0LmdldEJ5SWQgKSB7XHJcblx0XHRFeHByLmZpbmRbXCJJRFwiXSA9IGZ1bmN0aW9uKCBpZCwgY29udGV4dCApIHtcclxuXHRcdFx0aWYgKCB0eXBlb2YgY29udGV4dC5nZXRFbGVtZW50QnlJZCAhPT0gXCJ1bmRlZmluZWRcIiAmJiBkb2N1bWVudElzSFRNTCApIHtcclxuXHRcdFx0XHR2YXIgbSA9IGNvbnRleHQuZ2V0RWxlbWVudEJ5SWQoIGlkICk7XHJcblx0XHRcdFx0cmV0dXJuIG0gPyBbIG0gXSA6IFtdO1xyXG5cdFx0XHR9XHJcblx0XHR9O1xyXG5cdFx0RXhwci5maWx0ZXJbXCJJRFwiXSA9IGZ1bmN0aW9uKCBpZCApIHtcclxuXHRcdFx0dmFyIGF0dHJJZCA9IGlkLnJlcGxhY2UoIHJ1bmVzY2FwZSwgZnVuZXNjYXBlICk7XHJcblx0XHRcdHJldHVybiBmdW5jdGlvbiggZWxlbSApIHtcclxuXHRcdFx0XHRyZXR1cm4gZWxlbS5nZXRBdHRyaWJ1dGUoXCJpZFwiKSA9PT0gYXR0cklkO1xyXG5cdFx0XHR9O1xyXG5cdFx0fTtcclxuXHR9IGVsc2Uge1xyXG5cdFx0Ly8gU3VwcG9ydDogSUU2LzdcclxuXHRcdC8vIGdldEVsZW1lbnRCeUlkIGlzIG5vdCByZWxpYWJsZSBhcyBhIGZpbmQgc2hvcnRjdXRcclxuXHRcdGRlbGV0ZSBFeHByLmZpbmRbXCJJRFwiXTtcclxuXHJcblx0XHRFeHByLmZpbHRlcltcIklEXCJdID0gIGZ1bmN0aW9uKCBpZCApIHtcclxuXHRcdFx0dmFyIGF0dHJJZCA9IGlkLnJlcGxhY2UoIHJ1bmVzY2FwZSwgZnVuZXNjYXBlICk7XHJcblx0XHRcdHJldHVybiBmdW5jdGlvbiggZWxlbSApIHtcclxuXHRcdFx0XHR2YXIgbm9kZSA9IHR5cGVvZiBlbGVtLmdldEF0dHJpYnV0ZU5vZGUgIT09IFwidW5kZWZpbmVkXCIgJiZcclxuXHRcdFx0XHRcdGVsZW0uZ2V0QXR0cmlidXRlTm9kZShcImlkXCIpO1xyXG5cdFx0XHRcdHJldHVybiBub2RlICYmIG5vZGUudmFsdWUgPT09IGF0dHJJZDtcclxuXHRcdFx0fTtcclxuXHRcdH07XHJcblx0fVxyXG5cclxuXHQvLyBUYWdcclxuXHRFeHByLmZpbmRbXCJUQUdcIl0gPSBzdXBwb3J0LmdldEVsZW1lbnRzQnlUYWdOYW1lID9cclxuXHRcdGZ1bmN0aW9uKCB0YWcsIGNvbnRleHQgKSB7XHJcblx0XHRcdGlmICggdHlwZW9mIGNvbnRleHQuZ2V0RWxlbWVudHNCeVRhZ05hbWUgIT09IFwidW5kZWZpbmVkXCIgKSB7XHJcblx0XHRcdFx0cmV0dXJuIGNvbnRleHQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoIHRhZyApO1xyXG5cclxuXHRcdFx0Ly8gRG9jdW1lbnRGcmFnbWVudCBub2RlcyBkb24ndCBoYXZlIGdFQlROXHJcblx0XHRcdH0gZWxzZSBpZiAoIHN1cHBvcnQucXNhICkge1xyXG5cdFx0XHRcdHJldHVybiBjb250ZXh0LnF1ZXJ5U2VsZWN0b3JBbGwoIHRhZyApO1xyXG5cdFx0XHR9XHJcblx0XHR9IDpcclxuXHJcblx0XHRmdW5jdGlvbiggdGFnLCBjb250ZXh0ICkge1xyXG5cdFx0XHR2YXIgZWxlbSxcclxuXHRcdFx0XHR0bXAgPSBbXSxcclxuXHRcdFx0XHRpID0gMCxcclxuXHRcdFx0XHQvLyBCeSBoYXBweSBjb2luY2lkZW5jZSwgYSAoYnJva2VuKSBnRUJUTiBhcHBlYXJzIG9uIERvY3VtZW50RnJhZ21lbnQgbm9kZXMgdG9vXHJcblx0XHRcdFx0cmVzdWx0cyA9IGNvbnRleHQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoIHRhZyApO1xyXG5cclxuXHRcdFx0Ly8gRmlsdGVyIG91dCBwb3NzaWJsZSBjb21tZW50c1xyXG5cdFx0XHRpZiAoIHRhZyA9PT0gXCIqXCIgKSB7XHJcblx0XHRcdFx0d2hpbGUgKCAoZWxlbSA9IHJlc3VsdHNbaSsrXSkgKSB7XHJcblx0XHRcdFx0XHRpZiAoIGVsZW0ubm9kZVR5cGUgPT09IDEgKSB7XHJcblx0XHRcdFx0XHRcdHRtcC5wdXNoKCBlbGVtICk7XHJcblx0XHRcdFx0XHR9XHJcblx0XHRcdFx0fVxyXG5cclxuXHRcdFx0XHRyZXR1cm4gdG1wO1xyXG5cdFx0XHR9XHJcblx0XHRcdHJldHVybiByZXN1bHRzO1xyXG5cdFx0fTtcclxuXHJcblx0Ly8gQ2xhc3NcclxuXHRFeHByLmZpbmRbXCJDTEFTU1wiXSA9IHN1cHBvcnQuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSAmJiBmdW5jdGlvbiggY2xhc3NOYW1lLCBjb250ZXh0ICkge1xyXG5cdFx0aWYgKCB0eXBlb2YgY29udGV4dC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lICE9PSBcInVuZGVmaW5lZFwiICYmIGRvY3VtZW50SXNIVE1MICkge1xyXG5cdFx0XHRyZXR1cm4gY29udGV4dC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lKCBjbGFzc05hbWUgKTtcclxuXHRcdH1cclxuXHR9O1xyXG5cclxuXHQvKiBRU0EvbWF0Y2hlc1NlbGVjdG9yXHJcblx0LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSAqL1xyXG5cclxuXHQvLyBRU0EgYW5kIG1hdGNoZXNTZWxlY3RvciBzdXBwb3J0XHJcblxyXG5cdC8vIG1hdGNoZXNTZWxlY3Rvcig6YWN0aXZlKSByZXBvcnRzIGZhbHNlIHdoZW4gdHJ1ZSAoSUU5L09wZXJhIDExLjUpXHJcblx0cmJ1Z2d5TWF0Y2hlcyA9IFtdO1xyXG5cclxuXHQvLyBxU2EoOmZvY3VzKSByZXBvcnRzIGZhbHNlIHdoZW4gdHJ1ZSAoQ2hyb21lIDIxKVxyXG5cdC8vIFdlIGFsbG93IHRoaXMgYmVjYXVzZSBvZiBhIGJ1ZyBpbiBJRTgvOSB0aGF0IHRocm93cyBhbiBlcnJvclxyXG5cdC8vIHdoZW5ldmVyIGBkb2N1bWVudC5hY3RpdmVFbGVtZW50YCBpcyBhY2Nlc3NlZCBvbiBhbiBpZnJhbWVcclxuXHQvLyBTbywgd2UgYWxsb3cgOmZvY3VzIHRvIHBhc3MgdGhyb3VnaCBRU0EgYWxsIHRoZSB0aW1lIHRvIGF2b2lkIHRoZSBJRSBlcnJvclxyXG5cdC8vIFNlZSBodHRwOi8vYnVncy5qcXVlcnkuY29tL3RpY2tldC8xMzM3OFxyXG5cdHJidWdneVFTQSA9IFtdO1xyXG5cclxuXHRpZiAoIChzdXBwb3J0LnFzYSA9IHJuYXRpdmUudGVzdCggZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCApKSApIHtcclxuXHRcdC8vIEJ1aWxkIFFTQSByZWdleFxyXG5cdFx0Ly8gUmVnZXggc3RyYXRlZ3kgYWRvcHRlZCBmcm9tIERpZWdvIFBlcmluaVxyXG5cdFx0YXNzZXJ0KGZ1bmN0aW9uKCBkaXYgKSB7XHJcblx0XHRcdC8vIFNlbGVjdCBpcyBzZXQgdG8gZW1wdHkgc3RyaW5nIG9uIHB1cnBvc2VcclxuXHRcdFx0Ly8gVGhpcyBpcyB0byB0ZXN0IElFJ3MgdHJlYXRtZW50IG9mIG5vdCBleHBsaWNpdGx5XHJcblx0XHRcdC8vIHNldHRpbmcgYSBib29sZWFuIGNvbnRlbnQgYXR0cmlidXRlLFxyXG5cdFx0XHQvLyBzaW5jZSBpdHMgcHJlc2VuY2Ugc2hvdWxkIGJlIGVub3VnaFxyXG5cdFx0XHQvLyBodHRwOi8vYnVncy5qcXVlcnkuY29tL3RpY2tldC8xMjM1OVxyXG5cdFx0XHRkb2NFbGVtLmFwcGVuZENoaWxkKCBkaXYgKS5pbm5lckhUTUwgPSBcIjxhIGlkPSdcIiArIGV4cGFuZG8gKyBcIic+PC9hPlwiICtcclxuXHRcdFx0XHRcIjxzZWxlY3QgaWQ9J1wiICsgZXhwYW5kbyArIFwiLVxcclxcXFwnIG1zYWxsb3djYXB0dXJlPScnPlwiICtcclxuXHRcdFx0XHRcIjxvcHRpb24gc2VsZWN0ZWQ9Jyc+PC9vcHRpb24+PC9zZWxlY3Q+XCI7XHJcblxyXG5cdFx0XHQvLyBTdXBwb3J0OiBJRTgsIE9wZXJhIDExLTEyLjE2XHJcblx0XHRcdC8vIE5vdGhpbmcgc2hvdWxkIGJlIHNlbGVjdGVkIHdoZW4gZW1wdHkgc3RyaW5ncyBmb2xsb3cgXj0gb3IgJD0gb3IgKj1cclxuXHRcdFx0Ly8gVGhlIHRlc3QgYXR0cmlidXRlIG11c3QgYmUgdW5rbm93biBpbiBPcGVyYSBidXQgXCJzYWZlXCIgZm9yIFdpblJUXHJcblx0XHRcdC8vIGh0dHA6Ly9tc2RuLm1pY3Jvc29mdC5jb20vZW4tdXMvbGlicmFyeS9pZS9oaDQ2NTM4OC5hc3B4I2F0dHJpYnV0ZV9zZWN0aW9uXHJcblx0XHRcdGlmICggZGl2LnF1ZXJ5U2VsZWN0b3JBbGwoXCJbbXNhbGxvd2NhcHR1cmVePScnXVwiKS5sZW5ndGggKSB7XHJcblx0XHRcdFx0cmJ1Z2d5UVNBLnB1c2goIFwiWypeJF09XCIgKyB3aGl0ZXNwYWNlICsgXCIqKD86Jyd8XFxcIlxcXCIpXCIgKTtcclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0Ly8gU3VwcG9ydDogSUU4XHJcblx0XHRcdC8vIEJvb2xlYW4gYXR0cmlidXRlcyBhbmQgXCJ2YWx1ZVwiIGFyZSBub3QgdHJlYXRlZCBjb3JyZWN0bHlcclxuXHRcdFx0aWYgKCAhZGl2LnF1ZXJ5U2VsZWN0b3JBbGwoXCJbc2VsZWN0ZWRdXCIpLmxlbmd0aCApIHtcclxuXHRcdFx0XHRyYnVnZ3lRU0EucHVzaCggXCJcXFxcW1wiICsgd2hpdGVzcGFjZSArIFwiKig/OnZhbHVlfFwiICsgYm9vbGVhbnMgKyBcIilcIiApO1xyXG5cdFx0XHR9XHJcblxyXG5cdFx0XHQvLyBTdXBwb3J0OiBDaHJvbWU8MjksIEFuZHJvaWQ8NC40LCBTYWZhcmk8Ny4wKywgaU9TPDcuMCssIFBoYW50b21KUzwxLjkuOCtcclxuXHRcdFx0aWYgKCAhZGl2LnF1ZXJ5U2VsZWN0b3JBbGwoIFwiW2lkfj1cIiArIGV4cGFuZG8gKyBcIi1dXCIgKS5sZW5ndGggKSB7XHJcblx0XHRcdFx0cmJ1Z2d5UVNBLnB1c2goXCJ+PVwiKTtcclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0Ly8gV2Via2l0L09wZXJhIC0gOmNoZWNrZWQgc2hvdWxkIHJldHVybiBzZWxlY3RlZCBvcHRpb24gZWxlbWVudHNcclxuXHRcdFx0Ly8gaHR0cDovL3d3dy53My5vcmcvVFIvMjAxMS9SRUMtY3NzMy1zZWxlY3RvcnMtMjAxMTA5MjkvI2NoZWNrZWRcclxuXHRcdFx0Ly8gSUU4IHRocm93cyBlcnJvciBoZXJlIGFuZCB3aWxsIG5vdCBzZWUgbGF0ZXIgdGVzdHNcclxuXHRcdFx0aWYgKCAhZGl2LnF1ZXJ5U2VsZWN0b3JBbGwoXCI6Y2hlY2tlZFwiKS5sZW5ndGggKSB7XHJcblx0XHRcdFx0cmJ1Z2d5UVNBLnB1c2goXCI6Y2hlY2tlZFwiKTtcclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0Ly8gU3VwcG9ydDogU2FmYXJpIDgrLCBpT1MgOCtcclxuXHRcdFx0Ly8gaHR0cHM6Ly9idWdzLndlYmtpdC5vcmcvc2hvd19idWcuY2dpP2lkPTEzNjg1MVxyXG5cdFx0XHQvLyBJbi1wYWdlIGBzZWxlY3RvciNpZCBzaWJpbmctY29tYmluYXRvciBzZWxlY3RvcmAgZmFpbHNcclxuXHRcdFx0aWYgKCAhZGl2LnF1ZXJ5U2VsZWN0b3JBbGwoIFwiYSNcIiArIGV4cGFuZG8gKyBcIisqXCIgKS5sZW5ndGggKSB7XHJcblx0XHRcdFx0cmJ1Z2d5UVNBLnB1c2goXCIuIy4rWyt+XVwiKTtcclxuXHRcdFx0fVxyXG5cdFx0fSk7XHJcblxyXG5cdFx0YXNzZXJ0KGZ1bmN0aW9uKCBkaXYgKSB7XHJcblx0XHRcdC8vIFN1cHBvcnQ6IFdpbmRvd3MgOCBOYXRpdmUgQXBwc1xyXG5cdFx0XHQvLyBUaGUgdHlwZSBhbmQgbmFtZSBhdHRyaWJ1dGVzIGFyZSByZXN0cmljdGVkIGR1cmluZyAuaW5uZXJIVE1MIGFzc2lnbm1lbnRcclxuXHRcdFx0dmFyIGlucHV0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImlucHV0XCIpO1xyXG5cdFx0XHRpbnB1dC5zZXRBdHRyaWJ1dGUoIFwidHlwZVwiLCBcImhpZGRlblwiICk7XHJcblx0XHRcdGRpdi5hcHBlbmRDaGlsZCggaW5wdXQgKS5zZXRBdHRyaWJ1dGUoIFwibmFtZVwiLCBcIkRcIiApO1xyXG5cclxuXHRcdFx0Ly8gU3VwcG9ydDogSUU4XHJcblx0XHRcdC8vIEVuZm9yY2UgY2FzZS1zZW5zaXRpdml0eSBvZiBuYW1lIGF0dHJpYnV0ZVxyXG5cdFx0XHRpZiAoIGRpdi5xdWVyeVNlbGVjdG9yQWxsKFwiW25hbWU9ZF1cIikubGVuZ3RoICkge1xyXG5cdFx0XHRcdHJidWdneVFTQS5wdXNoKCBcIm5hbWVcIiArIHdoaXRlc3BhY2UgKyBcIipbKl4kfCF+XT89XCIgKTtcclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0Ly8gRkYgMy41IC0gOmVuYWJsZWQvOmRpc2FibGVkIGFuZCBoaWRkZW4gZWxlbWVudHMgKGhpZGRlbiBlbGVtZW50cyBhcmUgc3RpbGwgZW5hYmxlZClcclxuXHRcdFx0Ly8gSUU4IHRocm93cyBlcnJvciBoZXJlIGFuZCB3aWxsIG5vdCBzZWUgbGF0ZXIgdGVzdHNcclxuXHRcdFx0aWYgKCAhZGl2LnF1ZXJ5U2VsZWN0b3JBbGwoXCI6ZW5hYmxlZFwiKS5sZW5ndGggKSB7XHJcblx0XHRcdFx0cmJ1Z2d5UVNBLnB1c2goIFwiOmVuYWJsZWRcIiwgXCI6ZGlzYWJsZWRcIiApO1xyXG5cdFx0XHR9XHJcblxyXG5cdFx0XHQvLyBPcGVyYSAxMC0xMSBkb2VzIG5vdCB0aHJvdyBvbiBwb3N0LWNvbW1hIGludmFsaWQgcHNldWRvc1xyXG5cdFx0XHRkaXYucXVlcnlTZWxlY3RvckFsbChcIiosOnhcIik7XHJcblx0XHRcdHJidWdneVFTQS5wdXNoKFwiLC4qOlwiKTtcclxuXHRcdH0pO1xyXG5cdH1cclxuXHJcblx0aWYgKCAoc3VwcG9ydC5tYXRjaGVzU2VsZWN0b3IgPSBybmF0aXZlLnRlc3QoIChtYXRjaGVzID0gZG9jRWxlbS5tYXRjaGVzIHx8XHJcblx0XHRkb2NFbGVtLndlYmtpdE1hdGNoZXNTZWxlY3RvciB8fFxyXG5cdFx0ZG9jRWxlbS5tb3pNYXRjaGVzU2VsZWN0b3IgfHxcclxuXHRcdGRvY0VsZW0ub01hdGNoZXNTZWxlY3RvciB8fFxyXG5cdFx0ZG9jRWxlbS5tc01hdGNoZXNTZWxlY3RvcikgKSkgKSB7XHJcblxyXG5cdFx0YXNzZXJ0KGZ1bmN0aW9uKCBkaXYgKSB7XHJcblx0XHRcdC8vIENoZWNrIHRvIHNlZSBpZiBpdCdzIHBvc3NpYmxlIHRvIGRvIG1hdGNoZXNTZWxlY3RvclxyXG5cdFx0XHQvLyBvbiBhIGRpc2Nvbm5lY3RlZCBub2RlIChJRSA5KVxyXG5cdFx0XHRzdXBwb3J0LmRpc2Nvbm5lY3RlZE1hdGNoID0gbWF0Y2hlcy5jYWxsKCBkaXYsIFwiZGl2XCIgKTtcclxuXHJcblx0XHRcdC8vIFRoaXMgc2hvdWxkIGZhaWwgd2l0aCBhbiBleGNlcHRpb25cclxuXHRcdFx0Ly8gR2Vja28gZG9lcyBub3QgZXJyb3IsIHJldHVybnMgZmFsc2UgaW5zdGVhZFxyXG5cdFx0XHRtYXRjaGVzLmNhbGwoIGRpdiwgXCJbcyE9JyddOnhcIiApO1xyXG5cdFx0XHRyYnVnZ3lNYXRjaGVzLnB1c2goIFwiIT1cIiwgcHNldWRvcyApO1xyXG5cdFx0fSk7XHJcblx0fVxyXG5cclxuXHRyYnVnZ3lRU0EgPSByYnVnZ3lRU0EubGVuZ3RoICYmIG5ldyBSZWdFeHAoIHJidWdneVFTQS5qb2luKFwifFwiKSApO1xyXG5cdHJidWdneU1hdGNoZXMgPSByYnVnZ3lNYXRjaGVzLmxlbmd0aCAmJiBuZXcgUmVnRXhwKCByYnVnZ3lNYXRjaGVzLmpvaW4oXCJ8XCIpICk7XHJcblxyXG5cdC8qIENvbnRhaW5zXHJcblx0LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSAqL1xyXG5cdGhhc0NvbXBhcmUgPSBybmF0aXZlLnRlc3QoIGRvY0VsZW0uY29tcGFyZURvY3VtZW50UG9zaXRpb24gKTtcclxuXHJcblx0Ly8gRWxlbWVudCBjb250YWlucyBhbm90aGVyXHJcblx0Ly8gUHVycG9zZWZ1bGx5IHNlbGYtZXhjbHVzaXZlXHJcblx0Ly8gQXMgaW4sIGFuIGVsZW1lbnQgZG9lcyBub3QgY29udGFpbiBpdHNlbGZcclxuXHRjb250YWlucyA9IGhhc0NvbXBhcmUgfHwgcm5hdGl2ZS50ZXN0KCBkb2NFbGVtLmNvbnRhaW5zICkgP1xyXG5cdFx0ZnVuY3Rpb24oIGEsIGIgKSB7XHJcblx0XHRcdHZhciBhZG93biA9IGEubm9kZVR5cGUgPT09IDkgPyBhLmRvY3VtZW50RWxlbWVudCA6IGEsXHJcblx0XHRcdFx0YnVwID0gYiAmJiBiLnBhcmVudE5vZGU7XHJcblx0XHRcdHJldHVybiBhID09PSBidXAgfHwgISEoIGJ1cCAmJiBidXAubm9kZVR5cGUgPT09IDEgJiYgKFxyXG5cdFx0XHRcdGFkb3duLmNvbnRhaW5zID9cclxuXHRcdFx0XHRcdGFkb3duLmNvbnRhaW5zKCBidXAgKSA6XHJcblx0XHRcdFx0XHRhLmNvbXBhcmVEb2N1bWVudFBvc2l0aW9uICYmIGEuY29tcGFyZURvY3VtZW50UG9zaXRpb24oIGJ1cCApICYgMTZcclxuXHRcdFx0KSk7XHJcblx0XHR9IDpcclxuXHRcdGZ1bmN0aW9uKCBhLCBiICkge1xyXG5cdFx0XHRpZiAoIGIgKSB7XHJcblx0XHRcdFx0d2hpbGUgKCAoYiA9IGIucGFyZW50Tm9kZSkgKSB7XHJcblx0XHRcdFx0XHRpZiAoIGIgPT09IGEgKSB7XHJcblx0XHRcdFx0XHRcdHJldHVybiB0cnVlO1xyXG5cdFx0XHRcdFx0fVxyXG5cdFx0XHRcdH1cclxuXHRcdFx0fVxyXG5cdFx0XHRyZXR1cm4gZmFsc2U7XHJcblx0XHR9O1xyXG5cclxuXHQvKiBTb3J0aW5nXHJcblx0LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSAqL1xyXG5cclxuXHQvLyBEb2N1bWVudCBvcmRlciBzb3J0aW5nXHJcblx0c29ydE9yZGVyID0gaGFzQ29tcGFyZSA/XHJcblx0ZnVuY3Rpb24oIGEsIGIgKSB7XHJcblxyXG5cdFx0Ly8gRmxhZyBmb3IgZHVwbGljYXRlIHJlbW92YWxcclxuXHRcdGlmICggYSA9PT0gYiApIHtcclxuXHRcdFx0aGFzRHVwbGljYXRlID0gdHJ1ZTtcclxuXHRcdFx0cmV0dXJuIDA7XHJcblx0XHR9XHJcblxyXG5cdFx0Ly8gU29ydCBvbiBtZXRob2QgZXhpc3RlbmNlIGlmIG9ubHkgb25lIGlucHV0IGhhcyBjb21wYXJlRG9jdW1lbnRQb3NpdGlvblxyXG5cdFx0dmFyIGNvbXBhcmUgPSAhYS5jb21wYXJlRG9jdW1lbnRQb3NpdGlvbiAtICFiLmNvbXBhcmVEb2N1bWVudFBvc2l0aW9uO1xyXG5cdFx0aWYgKCBjb21wYXJlICkge1xyXG5cdFx0XHRyZXR1cm4gY29tcGFyZTtcclxuXHRcdH1cclxuXHJcblx0XHQvLyBDYWxjdWxhdGUgcG9zaXRpb24gaWYgYm90aCBpbnB1dHMgYmVsb25nIHRvIHRoZSBzYW1lIGRvY3VtZW50XHJcblx0XHRjb21wYXJlID0gKCBhLm93bmVyRG9jdW1lbnQgfHwgYSApID09PSAoIGIub3duZXJEb2N1bWVudCB8fCBiICkgP1xyXG5cdFx0XHRhLmNvbXBhcmVEb2N1bWVudFBvc2l0aW9uKCBiICkgOlxyXG5cclxuXHRcdFx0Ly8gT3RoZXJ3aXNlIHdlIGtub3cgdGhleSBhcmUgZGlzY29ubmVjdGVkXHJcblx0XHRcdDE7XHJcblxyXG5cdFx0Ly8gRGlzY29ubmVjdGVkIG5vZGVzXHJcblx0XHRpZiAoIGNvbXBhcmUgJiAxIHx8XHJcblx0XHRcdCghc3VwcG9ydC5zb3J0RGV0YWNoZWQgJiYgYi5jb21wYXJlRG9jdW1lbnRQb3NpdGlvbiggYSApID09PSBjb21wYXJlKSApIHtcclxuXHJcblx0XHRcdC8vIENob29zZSB0aGUgZmlyc3QgZWxlbWVudCB0aGF0IGlzIHJlbGF0ZWQgdG8gb3VyIHByZWZlcnJlZCBkb2N1bWVudFxyXG5cdFx0XHRpZiAoIGEgPT09IGRvY3VtZW50IHx8IGEub3duZXJEb2N1bWVudCA9PT0gcHJlZmVycmVkRG9jICYmIGNvbnRhaW5zKHByZWZlcnJlZERvYywgYSkgKSB7XHJcblx0XHRcdFx0cmV0dXJuIC0xO1xyXG5cdFx0XHR9XHJcblx0XHRcdGlmICggYiA9PT0gZG9jdW1lbnQgfHwgYi5vd25lckRvY3VtZW50ID09PSBwcmVmZXJyZWREb2MgJiYgY29udGFpbnMocHJlZmVycmVkRG9jLCBiKSApIHtcclxuXHRcdFx0XHRyZXR1cm4gMTtcclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0Ly8gTWFpbnRhaW4gb3JpZ2luYWwgb3JkZXJcclxuXHRcdFx0cmV0dXJuIHNvcnRJbnB1dCA/XHJcblx0XHRcdFx0KCBpbmRleE9mKCBzb3J0SW5wdXQsIGEgKSAtIGluZGV4T2YoIHNvcnRJbnB1dCwgYiApICkgOlxyXG5cdFx0XHRcdDA7XHJcblx0XHR9XHJcblxyXG5cdFx0cmV0dXJuIGNvbXBhcmUgJiA0ID8gLTEgOiAxO1xyXG5cdH0gOlxyXG5cdGZ1bmN0aW9uKCBhLCBiICkge1xyXG5cdFx0Ly8gRXhpdCBlYXJseSBpZiB0aGUgbm9kZXMgYXJlIGlkZW50aWNhbFxyXG5cdFx0aWYgKCBhID09PSBiICkge1xyXG5cdFx0XHRoYXNEdXBsaWNhdGUgPSB0cnVlO1xyXG5cdFx0XHRyZXR1cm4gMDtcclxuXHRcdH1cclxuXHJcblx0XHR2YXIgY3VyLFxyXG5cdFx0XHRpID0gMCxcclxuXHRcdFx0YXVwID0gYS5wYXJlbnROb2RlLFxyXG5cdFx0XHRidXAgPSBiLnBhcmVudE5vZGUsXHJcblx0XHRcdGFwID0gWyBhIF0sXHJcblx0XHRcdGJwID0gWyBiIF07XHJcblxyXG5cdFx0Ly8gUGFyZW50bGVzcyBub2RlcyBhcmUgZWl0aGVyIGRvY3VtZW50cyBvciBkaXNjb25uZWN0ZWRcclxuXHRcdGlmICggIWF1cCB8fCAhYnVwICkge1xyXG5cdFx0XHRyZXR1cm4gYSA9PT0gZG9jdW1lbnQgPyAtMSA6XHJcblx0XHRcdFx0YiA9PT0gZG9jdW1lbnQgPyAxIDpcclxuXHRcdFx0XHRhdXAgPyAtMSA6XHJcblx0XHRcdFx0YnVwID8gMSA6XHJcblx0XHRcdFx0c29ydElucHV0ID9cclxuXHRcdFx0XHQoIGluZGV4T2YoIHNvcnRJbnB1dCwgYSApIC0gaW5kZXhPZiggc29ydElucHV0LCBiICkgKSA6XHJcblx0XHRcdFx0MDtcclxuXHJcblx0XHQvLyBJZiB0aGUgbm9kZXMgYXJlIHNpYmxpbmdzLCB3ZSBjYW4gZG8gYSBxdWljayBjaGVja1xyXG5cdFx0fSBlbHNlIGlmICggYXVwID09PSBidXAgKSB7XHJcblx0XHRcdHJldHVybiBzaWJsaW5nQ2hlY2soIGEsIGIgKTtcclxuXHRcdH1cclxuXHJcblx0XHQvLyBPdGhlcndpc2Ugd2UgbmVlZCBmdWxsIGxpc3RzIG9mIHRoZWlyIGFuY2VzdG9ycyBmb3IgY29tcGFyaXNvblxyXG5cdFx0Y3VyID0gYTtcclxuXHRcdHdoaWxlICggKGN1ciA9IGN1ci5wYXJlbnROb2RlKSApIHtcclxuXHRcdFx0YXAudW5zaGlmdCggY3VyICk7XHJcblx0XHR9XHJcblx0XHRjdXIgPSBiO1xyXG5cdFx0d2hpbGUgKCAoY3VyID0gY3VyLnBhcmVudE5vZGUpICkge1xyXG5cdFx0XHRicC51bnNoaWZ0KCBjdXIgKTtcclxuXHRcdH1cclxuXHJcblx0XHQvLyBXYWxrIGRvd24gdGhlIHRyZWUgbG9va2luZyBmb3IgYSBkaXNjcmVwYW5jeVxyXG5cdFx0d2hpbGUgKCBhcFtpXSA9PT0gYnBbaV0gKSB7XHJcblx0XHRcdGkrKztcclxuXHRcdH1cclxuXHJcblx0XHRyZXR1cm4gaSA/XHJcblx0XHRcdC8vIERvIGEgc2libGluZyBjaGVjayBpZiB0aGUgbm9kZXMgaGF2ZSBhIGNvbW1vbiBhbmNlc3RvclxyXG5cdFx0XHRzaWJsaW5nQ2hlY2soIGFwW2ldLCBicFtpXSApIDpcclxuXHJcblx0XHRcdC8vIE90aGVyd2lzZSBub2RlcyBpbiBvdXIgZG9jdW1lbnQgc29ydCBmaXJzdFxyXG5cdFx0XHRhcFtpXSA9PT0gcHJlZmVycmVkRG9jID8gLTEgOlxyXG5cdFx0XHRicFtpXSA9PT0gcHJlZmVycmVkRG9jID8gMSA6XHJcblx0XHRcdDA7XHJcblx0fTtcclxuXHJcblx0cmV0dXJuIGRvY3VtZW50O1xyXG59O1xyXG5cclxuU2l6emxlLm1hdGNoZXMgPSBmdW5jdGlvbiggZXhwciwgZWxlbWVudHMgKSB7XHJcblx0cmV0dXJuIFNpenpsZSggZXhwciwgbnVsbCwgbnVsbCwgZWxlbWVudHMgKTtcclxufTtcclxuXHJcblNpenpsZS5tYXRjaGVzU2VsZWN0b3IgPSBmdW5jdGlvbiggZWxlbSwgZXhwciApIHtcclxuXHQvLyBTZXQgZG9jdW1lbnQgdmFycyBpZiBuZWVkZWRcclxuXHRpZiAoICggZWxlbS5vd25lckRvY3VtZW50IHx8IGVsZW0gKSAhPT0gZG9jdW1lbnQgKSB7XHJcblx0XHRzZXREb2N1bWVudCggZWxlbSApO1xyXG5cdH1cclxuXHJcblx0Ly8gTWFrZSBzdXJlIHRoYXQgYXR0cmlidXRlIHNlbGVjdG9ycyBhcmUgcXVvdGVkXHJcblx0ZXhwciA9IGV4cHIucmVwbGFjZSggcmF0dHJpYnV0ZVF1b3RlcywgXCI9JyQxJ11cIiApO1xyXG5cclxuXHRpZiAoIHN1cHBvcnQubWF0Y2hlc1NlbGVjdG9yICYmIGRvY3VtZW50SXNIVE1MICYmXHJcblx0XHQhY29tcGlsZXJDYWNoZVsgZXhwciArIFwiIFwiIF0gJiZcclxuXHRcdCggIXJidWdneU1hdGNoZXMgfHwgIXJidWdneU1hdGNoZXMudGVzdCggZXhwciApICkgJiZcclxuXHRcdCggIXJidWdneVFTQSAgICAgfHwgIXJidWdneVFTQS50ZXN0KCBleHByICkgKSApIHtcclxuXHJcblx0XHR0cnkge1xyXG5cdFx0XHR2YXIgcmV0ID0gbWF0Y2hlcy5jYWxsKCBlbGVtLCBleHByICk7XHJcblxyXG5cdFx0XHQvLyBJRSA5J3MgbWF0Y2hlc1NlbGVjdG9yIHJldHVybnMgZmFsc2Ugb24gZGlzY29ubmVjdGVkIG5vZGVzXHJcblx0XHRcdGlmICggcmV0IHx8IHN1cHBvcnQuZGlzY29ubmVjdGVkTWF0Y2ggfHxcclxuXHRcdFx0XHRcdC8vIEFzIHdlbGwsIGRpc2Nvbm5lY3RlZCBub2RlcyBhcmUgc2FpZCB0byBiZSBpbiBhIGRvY3VtZW50XHJcblx0XHRcdFx0XHQvLyBmcmFnbWVudCBpbiBJRSA5XHJcblx0XHRcdFx0XHRlbGVtLmRvY3VtZW50ICYmIGVsZW0uZG9jdW1lbnQubm9kZVR5cGUgIT09IDExICkge1xyXG5cdFx0XHRcdHJldHVybiByZXQ7XHJcblx0XHRcdH1cclxuXHRcdH0gY2F0Y2ggKGUpIHt9XHJcblx0fVxyXG5cclxuXHRyZXR1cm4gU2l6emxlKCBleHByLCBkb2N1bWVudCwgbnVsbCwgWyBlbGVtIF0gKS5sZW5ndGggPiAwO1xyXG59O1xyXG5cclxuU2l6emxlLmNvbnRhaW5zID0gZnVuY3Rpb24oIGNvbnRleHQsIGVsZW0gKSB7XHJcblx0Ly8gU2V0IGRvY3VtZW50IHZhcnMgaWYgbmVlZGVkXHJcblx0aWYgKCAoIGNvbnRleHQub3duZXJEb2N1bWVudCB8fCBjb250ZXh0ICkgIT09IGRvY3VtZW50ICkge1xyXG5cdFx0c2V0RG9jdW1lbnQoIGNvbnRleHQgKTtcclxuXHR9XHJcblx0cmV0dXJuIGNvbnRhaW5zKCBjb250ZXh0LCBlbGVtICk7XHJcbn07XHJcblxyXG5TaXp6bGUuYXR0ciA9IGZ1bmN0aW9uKCBlbGVtLCBuYW1lICkge1xyXG5cdC8vIFNldCBkb2N1bWVudCB2YXJzIGlmIG5lZWRlZFxyXG5cdGlmICggKCBlbGVtLm93bmVyRG9jdW1lbnQgfHwgZWxlbSApICE9PSBkb2N1bWVudCApIHtcclxuXHRcdHNldERvY3VtZW50KCBlbGVtICk7XHJcblx0fVxyXG5cclxuXHR2YXIgZm4gPSBFeHByLmF0dHJIYW5kbGVbIG5hbWUudG9Mb3dlckNhc2UoKSBdLFxyXG5cdFx0Ly8gRG9uJ3QgZ2V0IGZvb2xlZCBieSBPYmplY3QucHJvdG90eXBlIHByb3BlcnRpZXMgKGpRdWVyeSAjMTM4MDcpXHJcblx0XHR2YWwgPSBmbiAmJiBoYXNPd24uY2FsbCggRXhwci5hdHRySGFuZGxlLCBuYW1lLnRvTG93ZXJDYXNlKCkgKSA/XHJcblx0XHRcdGZuKCBlbGVtLCBuYW1lLCAhZG9jdW1lbnRJc0hUTUwgKSA6XHJcblx0XHRcdHVuZGVmaW5lZDtcclxuXHJcblx0cmV0dXJuIHZhbCAhPT0gdW5kZWZpbmVkID9cclxuXHRcdHZhbCA6XHJcblx0XHRzdXBwb3J0LmF0dHJpYnV0ZXMgfHwgIWRvY3VtZW50SXNIVE1MID9cclxuXHRcdFx0ZWxlbS5nZXRBdHRyaWJ1dGUoIG5hbWUgKSA6XHJcblx0XHRcdCh2YWwgPSBlbGVtLmdldEF0dHJpYnV0ZU5vZGUobmFtZSkpICYmIHZhbC5zcGVjaWZpZWQgP1xyXG5cdFx0XHRcdHZhbC52YWx1ZSA6XHJcblx0XHRcdFx0bnVsbDtcclxufTtcclxuXHJcblNpenpsZS5lcnJvciA9IGZ1bmN0aW9uKCBtc2cgKSB7XHJcblx0dGhyb3cgbmV3IEVycm9yKCBcIlN5bnRheCBlcnJvciwgdW5yZWNvZ25pemVkIGV4cHJlc3Npb246IFwiICsgbXNnICk7XHJcbn07XHJcblxyXG4vKipcclxuICogRG9jdW1lbnQgc29ydGluZyBhbmQgcmVtb3ZpbmcgZHVwbGljYXRlc1xyXG4gKiBAcGFyYW0ge0FycmF5TGlrZX0gcmVzdWx0c1xyXG4gKi9cclxuU2l6emxlLnVuaXF1ZVNvcnQgPSBmdW5jdGlvbiggcmVzdWx0cyApIHtcclxuXHR2YXIgZWxlbSxcclxuXHRcdGR1cGxpY2F0ZXMgPSBbXSxcclxuXHRcdGogPSAwLFxyXG5cdFx0aSA9IDA7XHJcblxyXG5cdC8vIFVubGVzcyB3ZSAqa25vdyogd2UgY2FuIGRldGVjdCBkdXBsaWNhdGVzLCBhc3N1bWUgdGhlaXIgcHJlc2VuY2VcclxuXHRoYXNEdXBsaWNhdGUgPSAhc3VwcG9ydC5kZXRlY3REdXBsaWNhdGVzO1xyXG5cdHNvcnRJbnB1dCA9ICFzdXBwb3J0LnNvcnRTdGFibGUgJiYgcmVzdWx0cy5zbGljZSggMCApO1xyXG5cdHJlc3VsdHMuc29ydCggc29ydE9yZGVyICk7XHJcblxyXG5cdGlmICggaGFzRHVwbGljYXRlICkge1xyXG5cdFx0d2hpbGUgKCAoZWxlbSA9IHJlc3VsdHNbaSsrXSkgKSB7XHJcblx0XHRcdGlmICggZWxlbSA9PT0gcmVzdWx0c1sgaSBdICkge1xyXG5cdFx0XHRcdGogPSBkdXBsaWNhdGVzLnB1c2goIGkgKTtcclxuXHRcdFx0fVxyXG5cdFx0fVxyXG5cdFx0d2hpbGUgKCBqLS0gKSB7XHJcblx0XHRcdHJlc3VsdHMuc3BsaWNlKCBkdXBsaWNhdGVzWyBqIF0sIDEgKTtcclxuXHRcdH1cclxuXHR9XHJcblxyXG5cdC8vIENsZWFyIGlucHV0IGFmdGVyIHNvcnRpbmcgdG8gcmVsZWFzZSBvYmplY3RzXHJcblx0Ly8gU2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9qcXVlcnkvc2l6emxlL3B1bGwvMjI1XHJcblx0c29ydElucHV0ID0gbnVsbDtcclxuXHJcblx0cmV0dXJuIHJlc3VsdHM7XHJcbn07XHJcblxyXG4vKipcclxuICogVXRpbGl0eSBmdW5jdGlvbiBmb3IgcmV0cmlldmluZyB0aGUgdGV4dCB2YWx1ZSBvZiBhbiBhcnJheSBvZiBET00gbm9kZXNcclxuICogQHBhcmFtIHtBcnJheXxFbGVtZW50fSBlbGVtXHJcbiAqL1xyXG5nZXRUZXh0ID0gU2l6emxlLmdldFRleHQgPSBmdW5jdGlvbiggZWxlbSApIHtcclxuXHR2YXIgbm9kZSxcclxuXHRcdHJldCA9IFwiXCIsXHJcblx0XHRpID0gMCxcclxuXHRcdG5vZGVUeXBlID0gZWxlbS5ub2RlVHlwZTtcclxuXHJcblx0aWYgKCAhbm9kZVR5cGUgKSB7XHJcblx0XHQvLyBJZiBubyBub2RlVHlwZSwgdGhpcyBpcyBleHBlY3RlZCB0byBiZSBhbiBhcnJheVxyXG5cdFx0d2hpbGUgKCAobm9kZSA9IGVsZW1baSsrXSkgKSB7XHJcblx0XHRcdC8vIERvIG5vdCB0cmF2ZXJzZSBjb21tZW50IG5vZGVzXHJcblx0XHRcdHJldCArPSBnZXRUZXh0KCBub2RlICk7XHJcblx0XHR9XHJcblx0fSBlbHNlIGlmICggbm9kZVR5cGUgPT09IDEgfHwgbm9kZVR5cGUgPT09IDkgfHwgbm9kZVR5cGUgPT09IDExICkge1xyXG5cdFx0Ly8gVXNlIHRleHRDb250ZW50IGZvciBlbGVtZW50c1xyXG5cdFx0Ly8gaW5uZXJUZXh0IHVzYWdlIHJlbW92ZWQgZm9yIGNvbnNpc3RlbmN5IG9mIG5ldyBsaW5lcyAoalF1ZXJ5ICMxMTE1MylcclxuXHRcdGlmICggdHlwZW9mIGVsZW0udGV4dENvbnRlbnQgPT09IFwic3RyaW5nXCIgKSB7XHJcblx0XHRcdHJldHVybiBlbGVtLnRleHRDb250ZW50O1xyXG5cdFx0fSBlbHNlIHtcclxuXHRcdFx0Ly8gVHJhdmVyc2UgaXRzIGNoaWxkcmVuXHJcblx0XHRcdGZvciAoIGVsZW0gPSBlbGVtLmZpcnN0Q2hpbGQ7IGVsZW07IGVsZW0gPSBlbGVtLm5leHRTaWJsaW5nICkge1xyXG5cdFx0XHRcdHJldCArPSBnZXRUZXh0KCBlbGVtICk7XHJcblx0XHRcdH1cclxuXHRcdH1cclxuXHR9IGVsc2UgaWYgKCBub2RlVHlwZSA9PT0gMyB8fCBub2RlVHlwZSA9PT0gNCApIHtcclxuXHRcdHJldHVybiBlbGVtLm5vZGVWYWx1ZTtcclxuXHR9XHJcblx0Ly8gRG8gbm90IGluY2x1ZGUgY29tbWVudCBvciBwcm9jZXNzaW5nIGluc3RydWN0aW9uIG5vZGVzXHJcblxyXG5cdHJldHVybiByZXQ7XHJcbn07XHJcblxyXG5FeHByID0gU2l6emxlLnNlbGVjdG9ycyA9IHtcclxuXHJcblx0Ly8gQ2FuIGJlIGFkanVzdGVkIGJ5IHRoZSB1c2VyXHJcblx0Y2FjaGVMZW5ndGg6IDUwLFxyXG5cclxuXHRjcmVhdGVQc2V1ZG86IG1hcmtGdW5jdGlvbixcclxuXHJcblx0bWF0Y2g6IG1hdGNoRXhwcixcclxuXHJcblx0YXR0ckhhbmRsZToge30sXHJcblxyXG5cdGZpbmQ6IHt9LFxyXG5cclxuXHRyZWxhdGl2ZToge1xyXG5cdFx0XCI+XCI6IHsgZGlyOiBcInBhcmVudE5vZGVcIiwgZmlyc3Q6IHRydWUgfSxcclxuXHRcdFwiIFwiOiB7IGRpcjogXCJwYXJlbnROb2RlXCIgfSxcclxuXHRcdFwiK1wiOiB7IGRpcjogXCJwcmV2aW91c1NpYmxpbmdcIiwgZmlyc3Q6IHRydWUgfSxcclxuXHRcdFwiflwiOiB7IGRpcjogXCJwcmV2aW91c1NpYmxpbmdcIiB9XHJcblx0fSxcclxuXHJcblx0cHJlRmlsdGVyOiB7XHJcblx0XHRcIkFUVFJcIjogZnVuY3Rpb24oIG1hdGNoICkge1xyXG5cdFx0XHRtYXRjaFsxXSA9IG1hdGNoWzFdLnJlcGxhY2UoIHJ1bmVzY2FwZSwgZnVuZXNjYXBlICk7XHJcblxyXG5cdFx0XHQvLyBNb3ZlIHRoZSBnaXZlbiB2YWx1ZSB0byBtYXRjaFszXSB3aGV0aGVyIHF1b3RlZCBvciB1bnF1b3RlZFxyXG5cdFx0XHRtYXRjaFszXSA9ICggbWF0Y2hbM10gfHwgbWF0Y2hbNF0gfHwgbWF0Y2hbNV0gfHwgXCJcIiApLnJlcGxhY2UoIHJ1bmVzY2FwZSwgZnVuZXNjYXBlICk7XHJcblxyXG5cdFx0XHRpZiAoIG1hdGNoWzJdID09PSBcIn49XCIgKSB7XHJcblx0XHRcdFx0bWF0Y2hbM10gPSBcIiBcIiArIG1hdGNoWzNdICsgXCIgXCI7XHJcblx0XHRcdH1cclxuXHJcblx0XHRcdHJldHVybiBtYXRjaC5zbGljZSggMCwgNCApO1xyXG5cdFx0fSxcclxuXHJcblx0XHRcIkNISUxEXCI6IGZ1bmN0aW9uKCBtYXRjaCApIHtcclxuXHRcdFx0LyogbWF0Y2hlcyBmcm9tIG1hdGNoRXhwcltcIkNISUxEXCJdXHJcblx0XHRcdFx0MSB0eXBlIChvbmx5fG50aHwuLi4pXHJcblx0XHRcdFx0MiB3aGF0IChjaGlsZHxvZi10eXBlKVxyXG5cdFx0XHRcdDMgYXJndW1lbnQgKGV2ZW58b2RkfFxcZCp8XFxkKm4oWystXVxcZCspP3wuLi4pXHJcblx0XHRcdFx0NCB4bi1jb21wb25lbnQgb2YgeG4reSBhcmd1bWVudCAoWystXT9cXGQqbnwpXHJcblx0XHRcdFx0NSBzaWduIG9mIHhuLWNvbXBvbmVudFxyXG5cdFx0XHRcdDYgeCBvZiB4bi1jb21wb25lbnRcclxuXHRcdFx0XHQ3IHNpZ24gb2YgeS1jb21wb25lbnRcclxuXHRcdFx0XHQ4IHkgb2YgeS1jb21wb25lbnRcclxuXHRcdFx0Ki9cclxuXHRcdFx0bWF0Y2hbMV0gPSBtYXRjaFsxXS50b0xvd2VyQ2FzZSgpO1xyXG5cclxuXHRcdFx0aWYgKCBtYXRjaFsxXS5zbGljZSggMCwgMyApID09PSBcIm50aFwiICkge1xyXG5cdFx0XHRcdC8vIG50aC0qIHJlcXVpcmVzIGFyZ3VtZW50XHJcblx0XHRcdFx0aWYgKCAhbWF0Y2hbM10gKSB7XHJcblx0XHRcdFx0XHRTaXp6bGUuZXJyb3IoIG1hdGNoWzBdICk7XHJcblx0XHRcdFx0fVxyXG5cclxuXHRcdFx0XHQvLyBudW1lcmljIHggYW5kIHkgcGFyYW1ldGVycyBmb3IgRXhwci5maWx0ZXIuQ0hJTERcclxuXHRcdFx0XHQvLyByZW1lbWJlciB0aGF0IGZhbHNlL3RydWUgY2FzdCByZXNwZWN0aXZlbHkgdG8gMC8xXHJcblx0XHRcdFx0bWF0Y2hbNF0gPSArKCBtYXRjaFs0XSA/IG1hdGNoWzVdICsgKG1hdGNoWzZdIHx8IDEpIDogMiAqICggbWF0Y2hbM10gPT09IFwiZXZlblwiIHx8IG1hdGNoWzNdID09PSBcIm9kZFwiICkgKTtcclxuXHRcdFx0XHRtYXRjaFs1XSA9ICsoICggbWF0Y2hbN10gKyBtYXRjaFs4XSApIHx8IG1hdGNoWzNdID09PSBcIm9kZFwiICk7XHJcblxyXG5cdFx0XHQvLyBvdGhlciB0eXBlcyBwcm9oaWJpdCBhcmd1bWVudHNcclxuXHRcdFx0fSBlbHNlIGlmICggbWF0Y2hbM10gKSB7XHJcblx0XHRcdFx0U2l6emxlLmVycm9yKCBtYXRjaFswXSApO1xyXG5cdFx0XHR9XHJcblxyXG5cdFx0XHRyZXR1cm4gbWF0Y2g7XHJcblx0XHR9LFxyXG5cclxuXHRcdFwiUFNFVURPXCI6IGZ1bmN0aW9uKCBtYXRjaCApIHtcclxuXHRcdFx0dmFyIGV4Y2VzcyxcclxuXHRcdFx0XHR1bnF1b3RlZCA9ICFtYXRjaFs2XSAmJiBtYXRjaFsyXTtcclxuXHJcblx0XHRcdGlmICggbWF0Y2hFeHByW1wiQ0hJTERcIl0udGVzdCggbWF0Y2hbMF0gKSApIHtcclxuXHRcdFx0XHRyZXR1cm4gbnVsbDtcclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0Ly8gQWNjZXB0IHF1b3RlZCBhcmd1bWVudHMgYXMtaXNcclxuXHRcdFx0aWYgKCBtYXRjaFszXSApIHtcclxuXHRcdFx0XHRtYXRjaFsyXSA9IG1hdGNoWzRdIHx8IG1hdGNoWzVdIHx8IFwiXCI7XHJcblxyXG5cdFx0XHQvLyBTdHJpcCBleGNlc3MgY2hhcmFjdGVycyBmcm9tIHVucXVvdGVkIGFyZ3VtZW50c1xyXG5cdFx0XHR9IGVsc2UgaWYgKCB1bnF1b3RlZCAmJiBycHNldWRvLnRlc3QoIHVucXVvdGVkICkgJiZcclxuXHRcdFx0XHQvLyBHZXQgZXhjZXNzIGZyb20gdG9rZW5pemUgKHJlY3Vyc2l2ZWx5KVxyXG5cdFx0XHRcdChleGNlc3MgPSB0b2tlbml6ZSggdW5xdW90ZWQsIHRydWUgKSkgJiZcclxuXHRcdFx0XHQvLyBhZHZhbmNlIHRvIHRoZSBuZXh0IGNsb3NpbmcgcGFyZW50aGVzaXNcclxuXHRcdFx0XHQoZXhjZXNzID0gdW5xdW90ZWQuaW5kZXhPZiggXCIpXCIsIHVucXVvdGVkLmxlbmd0aCAtIGV4Y2VzcyApIC0gdW5xdW90ZWQubGVuZ3RoKSApIHtcclxuXHJcblx0XHRcdFx0Ly8gZXhjZXNzIGlzIGEgbmVnYXRpdmUgaW5kZXhcclxuXHRcdFx0XHRtYXRjaFswXSA9IG1hdGNoWzBdLnNsaWNlKCAwLCBleGNlc3MgKTtcclxuXHRcdFx0XHRtYXRjaFsyXSA9IHVucXVvdGVkLnNsaWNlKCAwLCBleGNlc3MgKTtcclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0Ly8gUmV0dXJuIG9ubHkgY2FwdHVyZXMgbmVlZGVkIGJ5IHRoZSBwc2V1ZG8gZmlsdGVyIG1ldGhvZCAodHlwZSBhbmQgYXJndW1lbnQpXHJcblx0XHRcdHJldHVybiBtYXRjaC5zbGljZSggMCwgMyApO1xyXG5cdFx0fVxyXG5cdH0sXHJcblxyXG5cdGZpbHRlcjoge1xyXG5cclxuXHRcdFwiVEFHXCI6IGZ1bmN0aW9uKCBub2RlTmFtZVNlbGVjdG9yICkge1xyXG5cdFx0XHR2YXIgbm9kZU5hbWUgPSBub2RlTmFtZVNlbGVjdG9yLnJlcGxhY2UoIHJ1bmVzY2FwZSwgZnVuZXNjYXBlICkudG9Mb3dlckNhc2UoKTtcclxuXHRcdFx0cmV0dXJuIG5vZGVOYW1lU2VsZWN0b3IgPT09IFwiKlwiID9cclxuXHRcdFx0XHRmdW5jdGlvbigpIHsgcmV0dXJuIHRydWU7IH0gOlxyXG5cdFx0XHRcdGZ1bmN0aW9uKCBlbGVtICkge1xyXG5cdFx0XHRcdFx0cmV0dXJuIGVsZW0ubm9kZU5hbWUgJiYgZWxlbS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpID09PSBub2RlTmFtZTtcclxuXHRcdFx0XHR9O1xyXG5cdFx0fSxcclxuXHJcblx0XHRcIkNMQVNTXCI6IGZ1bmN0aW9uKCBjbGFzc05hbWUgKSB7XHJcblx0XHRcdHZhciBwYXR0ZXJuID0gY2xhc3NDYWNoZVsgY2xhc3NOYW1lICsgXCIgXCIgXTtcclxuXHJcblx0XHRcdHJldHVybiBwYXR0ZXJuIHx8XHJcblx0XHRcdFx0KHBhdHRlcm4gPSBuZXcgUmVnRXhwKCBcIihefFwiICsgd2hpdGVzcGFjZSArIFwiKVwiICsgY2xhc3NOYW1lICsgXCIoXCIgKyB3aGl0ZXNwYWNlICsgXCJ8JClcIiApKSAmJlxyXG5cdFx0XHRcdGNsYXNzQ2FjaGUoIGNsYXNzTmFtZSwgZnVuY3Rpb24oIGVsZW0gKSB7XHJcblx0XHRcdFx0XHRyZXR1cm4gcGF0dGVybi50ZXN0KCB0eXBlb2YgZWxlbS5jbGFzc05hbWUgPT09IFwic3RyaW5nXCIgJiYgZWxlbS5jbGFzc05hbWUgfHwgdHlwZW9mIGVsZW0uZ2V0QXR0cmlidXRlICE9PSBcInVuZGVmaW5lZFwiICYmIGVsZW0uZ2V0QXR0cmlidXRlKFwiY2xhc3NcIikgfHwgXCJcIiApO1xyXG5cdFx0XHRcdH0pO1xyXG5cdFx0fSxcclxuXHJcblx0XHRcIkFUVFJcIjogZnVuY3Rpb24oIG5hbWUsIG9wZXJhdG9yLCBjaGVjayApIHtcclxuXHRcdFx0cmV0dXJuIGZ1bmN0aW9uKCBlbGVtICkge1xyXG5cdFx0XHRcdHZhciByZXN1bHQgPSBTaXp6bGUuYXR0ciggZWxlbSwgbmFtZSApO1xyXG5cclxuXHRcdFx0XHRpZiAoIHJlc3VsdCA9PSBudWxsICkge1xyXG5cdFx0XHRcdFx0cmV0dXJuIG9wZXJhdG9yID09PSBcIiE9XCI7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHRcdGlmICggIW9wZXJhdG9yICkge1xyXG5cdFx0XHRcdFx0cmV0dXJuIHRydWU7XHJcblx0XHRcdFx0fVxyXG5cclxuXHRcdFx0XHRyZXN1bHQgKz0gXCJcIjtcclxuXHJcblx0XHRcdFx0cmV0dXJuIG9wZXJhdG9yID09PSBcIj1cIiA/IHJlc3VsdCA9PT0gY2hlY2sgOlxyXG5cdFx0XHRcdFx0b3BlcmF0b3IgPT09IFwiIT1cIiA/IHJlc3VsdCAhPT0gY2hlY2sgOlxyXG5cdFx0XHRcdFx0b3BlcmF0b3IgPT09IFwiXj1cIiA/IGNoZWNrICYmIHJlc3VsdC5pbmRleE9mKCBjaGVjayApID09PSAwIDpcclxuXHRcdFx0XHRcdG9wZXJhdG9yID09PSBcIio9XCIgPyBjaGVjayAmJiByZXN1bHQuaW5kZXhPZiggY2hlY2sgKSA+IC0xIDpcclxuXHRcdFx0XHRcdG9wZXJhdG9yID09PSBcIiQ9XCIgPyBjaGVjayAmJiByZXN1bHQuc2xpY2UoIC1jaGVjay5sZW5ndGggKSA9PT0gY2hlY2sgOlxyXG5cdFx0XHRcdFx0b3BlcmF0b3IgPT09IFwifj1cIiA/ICggXCIgXCIgKyByZXN1bHQucmVwbGFjZSggcndoaXRlc3BhY2UsIFwiIFwiICkgKyBcIiBcIiApLmluZGV4T2YoIGNoZWNrICkgPiAtMSA6XHJcblx0XHRcdFx0XHRvcGVyYXRvciA9PT0gXCJ8PVwiID8gcmVzdWx0ID09PSBjaGVjayB8fCByZXN1bHQuc2xpY2UoIDAsIGNoZWNrLmxlbmd0aCArIDEgKSA9PT0gY2hlY2sgKyBcIi1cIiA6XHJcblx0XHRcdFx0XHRmYWxzZTtcclxuXHRcdFx0fTtcclxuXHRcdH0sXHJcblxyXG5cdFx0XCJDSElMRFwiOiBmdW5jdGlvbiggdHlwZSwgd2hhdCwgYXJndW1lbnQsIGZpcnN0LCBsYXN0ICkge1xyXG5cdFx0XHR2YXIgc2ltcGxlID0gdHlwZS5zbGljZSggMCwgMyApICE9PSBcIm50aFwiLFxyXG5cdFx0XHRcdGZvcndhcmQgPSB0eXBlLnNsaWNlKCAtNCApICE9PSBcImxhc3RcIixcclxuXHRcdFx0XHRvZlR5cGUgPSB3aGF0ID09PSBcIm9mLXR5cGVcIjtcclxuXHJcblx0XHRcdHJldHVybiBmaXJzdCA9PT0gMSAmJiBsYXN0ID09PSAwID9cclxuXHJcblx0XHRcdFx0Ly8gU2hvcnRjdXQgZm9yIDpudGgtKihuKVxyXG5cdFx0XHRcdGZ1bmN0aW9uKCBlbGVtICkge1xyXG5cdFx0XHRcdFx0cmV0dXJuICEhZWxlbS5wYXJlbnROb2RlO1xyXG5cdFx0XHRcdH0gOlxyXG5cclxuXHRcdFx0XHRmdW5jdGlvbiggZWxlbSwgY29udGV4dCwgeG1sICkge1xyXG5cdFx0XHRcdFx0dmFyIGNhY2hlLCB1bmlxdWVDYWNoZSwgb3V0ZXJDYWNoZSwgbm9kZSwgbm9kZUluZGV4LCBzdGFydCxcclxuXHRcdFx0XHRcdFx0ZGlyID0gc2ltcGxlICE9PSBmb3J3YXJkID8gXCJuZXh0U2libGluZ1wiIDogXCJwcmV2aW91c1NpYmxpbmdcIixcclxuXHRcdFx0XHRcdFx0cGFyZW50ID0gZWxlbS5wYXJlbnROb2RlLFxyXG5cdFx0XHRcdFx0XHRuYW1lID0gb2ZUeXBlICYmIGVsZW0ubm9kZU5hbWUudG9Mb3dlckNhc2UoKSxcclxuXHRcdFx0XHRcdFx0dXNlQ2FjaGUgPSAheG1sICYmICFvZlR5cGUsXHJcblx0XHRcdFx0XHRcdGRpZmYgPSBmYWxzZTtcclxuXHJcblx0XHRcdFx0XHRpZiAoIHBhcmVudCApIHtcclxuXHJcblx0XHRcdFx0XHRcdC8vIDooZmlyc3R8bGFzdHxvbmx5KS0oY2hpbGR8b2YtdHlwZSlcclxuXHRcdFx0XHRcdFx0aWYgKCBzaW1wbGUgKSB7XHJcblx0XHRcdFx0XHRcdFx0d2hpbGUgKCBkaXIgKSB7XHJcblx0XHRcdFx0XHRcdFx0XHRub2RlID0gZWxlbTtcclxuXHRcdFx0XHRcdFx0XHRcdHdoaWxlICggKG5vZGUgPSBub2RlWyBkaXIgXSkgKSB7XHJcblx0XHRcdFx0XHRcdFx0XHRcdGlmICggb2ZUeXBlID9cclxuXHRcdFx0XHRcdFx0XHRcdFx0XHRub2RlLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCkgPT09IG5hbWUgOlxyXG5cdFx0XHRcdFx0XHRcdFx0XHRcdG5vZGUubm9kZVR5cGUgPT09IDEgKSB7XHJcblxyXG5cdFx0XHRcdFx0XHRcdFx0XHRcdHJldHVybiBmYWxzZTtcclxuXHRcdFx0XHRcdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0XHRcdFx0Ly8gUmV2ZXJzZSBkaXJlY3Rpb24gZm9yIDpvbmx5LSogKGlmIHdlIGhhdmVuJ3QgeWV0IGRvbmUgc28pXHJcblx0XHRcdFx0XHRcdFx0XHRzdGFydCA9IGRpciA9IHR5cGUgPT09IFwib25seVwiICYmICFzdGFydCAmJiBcIm5leHRTaWJsaW5nXCI7XHJcblx0XHRcdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0XHRcdHJldHVybiB0cnVlO1xyXG5cdFx0XHRcdFx0XHR9XHJcblxyXG5cdFx0XHRcdFx0XHRzdGFydCA9IFsgZm9yd2FyZCA/IHBhcmVudC5maXJzdENoaWxkIDogcGFyZW50Lmxhc3RDaGlsZCBdO1xyXG5cclxuXHRcdFx0XHRcdFx0Ly8gbm9uLXhtbCA6bnRoLWNoaWxkKC4uLikgc3RvcmVzIGNhY2hlIGRhdGEgb24gYHBhcmVudGBcclxuXHRcdFx0XHRcdFx0aWYgKCBmb3J3YXJkICYmIHVzZUNhY2hlICkge1xyXG5cclxuXHRcdFx0XHRcdFx0XHQvLyBTZWVrIGBlbGVtYCBmcm9tIGEgcHJldmlvdXNseS1jYWNoZWQgaW5kZXhcclxuXHJcblx0XHRcdFx0XHRcdFx0Ly8gLi4uaW4gYSBnemlwLWZyaWVuZGx5IHdheVxyXG5cdFx0XHRcdFx0XHRcdG5vZGUgPSBwYXJlbnQ7XHJcblx0XHRcdFx0XHRcdFx0b3V0ZXJDYWNoZSA9IG5vZGVbIGV4cGFuZG8gXSB8fCAobm9kZVsgZXhwYW5kbyBdID0ge30pO1xyXG5cclxuXHRcdFx0XHRcdFx0XHQvLyBTdXBwb3J0OiBJRSA8OSBvbmx5XHJcblx0XHRcdFx0XHRcdFx0Ly8gRGVmZW5kIGFnYWluc3QgY2xvbmVkIGF0dHJvcGVydGllcyAoalF1ZXJ5IGdoLTE3MDkpXHJcblx0XHRcdFx0XHRcdFx0dW5pcXVlQ2FjaGUgPSBvdXRlckNhY2hlWyBub2RlLnVuaXF1ZUlEIF0gfHxcclxuXHRcdFx0XHRcdFx0XHRcdChvdXRlckNhY2hlWyBub2RlLnVuaXF1ZUlEIF0gPSB7fSk7XHJcblxyXG5cdFx0XHRcdFx0XHRcdGNhY2hlID0gdW5pcXVlQ2FjaGVbIHR5cGUgXSB8fCBbXTtcclxuXHRcdFx0XHRcdFx0XHRub2RlSW5kZXggPSBjYWNoZVsgMCBdID09PSBkaXJydW5zICYmIGNhY2hlWyAxIF07XHJcblx0XHRcdFx0XHRcdFx0ZGlmZiA9IG5vZGVJbmRleCAmJiBjYWNoZVsgMiBdO1xyXG5cdFx0XHRcdFx0XHRcdG5vZGUgPSBub2RlSW5kZXggJiYgcGFyZW50LmNoaWxkTm9kZXNbIG5vZGVJbmRleCBdO1xyXG5cclxuXHRcdFx0XHRcdFx0XHR3aGlsZSAoIChub2RlID0gKytub2RlSW5kZXggJiYgbm9kZSAmJiBub2RlWyBkaXIgXSB8fFxyXG5cclxuXHRcdFx0XHRcdFx0XHRcdC8vIEZhbGxiYWNrIHRvIHNlZWtpbmcgYGVsZW1gIGZyb20gdGhlIHN0YXJ0XHJcblx0XHRcdFx0XHRcdFx0XHQoZGlmZiA9IG5vZGVJbmRleCA9IDApIHx8IHN0YXJ0LnBvcCgpKSApIHtcclxuXHJcblx0XHRcdFx0XHRcdFx0XHQvLyBXaGVuIGZvdW5kLCBjYWNoZSBpbmRleGVzIG9uIGBwYXJlbnRgIGFuZCBicmVha1xyXG5cdFx0XHRcdFx0XHRcdFx0aWYgKCBub2RlLm5vZGVUeXBlID09PSAxICYmICsrZGlmZiAmJiBub2RlID09PSBlbGVtICkge1xyXG5cdFx0XHRcdFx0XHRcdFx0XHR1bmlxdWVDYWNoZVsgdHlwZSBdID0gWyBkaXJydW5zLCBub2RlSW5kZXgsIGRpZmYgXTtcclxuXHRcdFx0XHRcdFx0XHRcdFx0YnJlYWs7XHJcblx0XHRcdFx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHRcdFx0fVxyXG5cclxuXHRcdFx0XHRcdFx0fSBlbHNlIHtcclxuXHRcdFx0XHRcdFx0XHQvLyBVc2UgcHJldmlvdXNseS1jYWNoZWQgZWxlbWVudCBpbmRleCBpZiBhdmFpbGFibGVcclxuXHRcdFx0XHRcdFx0XHRpZiAoIHVzZUNhY2hlICkge1xyXG5cdFx0XHRcdFx0XHRcdFx0Ly8gLi4uaW4gYSBnemlwLWZyaWVuZGx5IHdheVxyXG5cdFx0XHRcdFx0XHRcdFx0bm9kZSA9IGVsZW07XHJcblx0XHRcdFx0XHRcdFx0XHRvdXRlckNhY2hlID0gbm9kZVsgZXhwYW5kbyBdIHx8IChub2RlWyBleHBhbmRvIF0gPSB7fSk7XHJcblxyXG5cdFx0XHRcdFx0XHRcdFx0Ly8gU3VwcG9ydDogSUUgPDkgb25seVxyXG5cdFx0XHRcdFx0XHRcdFx0Ly8gRGVmZW5kIGFnYWluc3QgY2xvbmVkIGF0dHJvcGVydGllcyAoalF1ZXJ5IGdoLTE3MDkpXHJcblx0XHRcdFx0XHRcdFx0XHR1bmlxdWVDYWNoZSA9IG91dGVyQ2FjaGVbIG5vZGUudW5pcXVlSUQgXSB8fFxyXG5cdFx0XHRcdFx0XHRcdFx0XHQob3V0ZXJDYWNoZVsgbm9kZS51bmlxdWVJRCBdID0ge30pO1xyXG5cclxuXHRcdFx0XHRcdFx0XHRcdGNhY2hlID0gdW5pcXVlQ2FjaGVbIHR5cGUgXSB8fCBbXTtcclxuXHRcdFx0XHRcdFx0XHRcdG5vZGVJbmRleCA9IGNhY2hlWyAwIF0gPT09IGRpcnJ1bnMgJiYgY2FjaGVbIDEgXTtcclxuXHRcdFx0XHRcdFx0XHRcdGRpZmYgPSBub2RlSW5kZXg7XHJcblx0XHRcdFx0XHRcdFx0fVxyXG5cclxuXHRcdFx0XHRcdFx0XHQvLyB4bWwgOm50aC1jaGlsZCguLi4pXHJcblx0XHRcdFx0XHRcdFx0Ly8gb3IgOm50aC1sYXN0LWNoaWxkKC4uLikgb3IgOm50aCgtbGFzdCk/LW9mLXR5cGUoLi4uKVxyXG5cdFx0XHRcdFx0XHRcdGlmICggZGlmZiA9PT0gZmFsc2UgKSB7XHJcblx0XHRcdFx0XHRcdFx0XHQvLyBVc2UgdGhlIHNhbWUgbG9vcCBhcyBhYm92ZSB0byBzZWVrIGBlbGVtYCBmcm9tIHRoZSBzdGFydFxyXG5cdFx0XHRcdFx0XHRcdFx0d2hpbGUgKCAobm9kZSA9ICsrbm9kZUluZGV4ICYmIG5vZGUgJiYgbm9kZVsgZGlyIF0gfHxcclxuXHRcdFx0XHRcdFx0XHRcdFx0KGRpZmYgPSBub2RlSW5kZXggPSAwKSB8fCBzdGFydC5wb3AoKSkgKSB7XHJcblxyXG5cdFx0XHRcdFx0XHRcdFx0XHRpZiAoICggb2ZUeXBlID9cclxuXHRcdFx0XHRcdFx0XHRcdFx0XHRub2RlLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCkgPT09IG5hbWUgOlxyXG5cdFx0XHRcdFx0XHRcdFx0XHRcdG5vZGUubm9kZVR5cGUgPT09IDEgKSAmJlxyXG5cdFx0XHRcdFx0XHRcdFx0XHRcdCsrZGlmZiApIHtcclxuXHJcblx0XHRcdFx0XHRcdFx0XHRcdFx0Ly8gQ2FjaGUgdGhlIGluZGV4IG9mIGVhY2ggZW5jb3VudGVyZWQgZWxlbWVudFxyXG5cdFx0XHRcdFx0XHRcdFx0XHRcdGlmICggdXNlQ2FjaGUgKSB7XHJcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRvdXRlckNhY2hlID0gbm9kZVsgZXhwYW5kbyBdIHx8IChub2RlWyBleHBhbmRvIF0gPSB7fSk7XHJcblxyXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0Ly8gU3VwcG9ydDogSUUgPDkgb25seVxyXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0Ly8gRGVmZW5kIGFnYWluc3QgY2xvbmVkIGF0dHJvcGVydGllcyAoalF1ZXJ5IGdoLTE3MDkpXHJcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHR1bmlxdWVDYWNoZSA9IG91dGVyQ2FjaGVbIG5vZGUudW5pcXVlSUQgXSB8fFxyXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHQob3V0ZXJDYWNoZVsgbm9kZS51bmlxdWVJRCBdID0ge30pO1xyXG5cclxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdHVuaXF1ZUNhY2hlWyB0eXBlIF0gPSBbIGRpcnJ1bnMsIGRpZmYgXTtcclxuXHRcdFx0XHRcdFx0XHRcdFx0XHR9XHJcblxyXG5cdFx0XHRcdFx0XHRcdFx0XHRcdGlmICggbm9kZSA9PT0gZWxlbSApIHtcclxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdGJyZWFrO1xyXG5cdFx0XHRcdFx0XHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdFx0fVxyXG5cclxuXHRcdFx0XHRcdFx0Ly8gSW5jb3Jwb3JhdGUgdGhlIG9mZnNldCwgdGhlbiBjaGVjayBhZ2FpbnN0IGN5Y2xlIHNpemVcclxuXHRcdFx0XHRcdFx0ZGlmZiAtPSBsYXN0O1xyXG5cdFx0XHRcdFx0XHRyZXR1cm4gZGlmZiA9PT0gZmlyc3QgfHwgKCBkaWZmICUgZmlyc3QgPT09IDAgJiYgZGlmZiAvIGZpcnN0ID49IDAgKTtcclxuXHRcdFx0XHRcdH1cclxuXHRcdFx0XHR9O1xyXG5cdFx0fSxcclxuXHJcblx0XHRcIlBTRVVET1wiOiBmdW5jdGlvbiggcHNldWRvLCBhcmd1bWVudCApIHtcclxuXHRcdFx0Ly8gcHNldWRvLWNsYXNzIG5hbWVzIGFyZSBjYXNlLWluc2Vuc2l0aXZlXHJcblx0XHRcdC8vIGh0dHA6Ly93d3cudzMub3JnL1RSL3NlbGVjdG9ycy8jcHNldWRvLWNsYXNzZXNcclxuXHRcdFx0Ly8gUHJpb3JpdGl6ZSBieSBjYXNlIHNlbnNpdGl2aXR5IGluIGNhc2UgY3VzdG9tIHBzZXVkb3MgYXJlIGFkZGVkIHdpdGggdXBwZXJjYXNlIGxldHRlcnNcclxuXHRcdFx0Ly8gUmVtZW1iZXIgdGhhdCBzZXRGaWx0ZXJzIGluaGVyaXRzIGZyb20gcHNldWRvc1xyXG5cdFx0XHR2YXIgYXJncyxcclxuXHRcdFx0XHRmbiA9IEV4cHIucHNldWRvc1sgcHNldWRvIF0gfHwgRXhwci5zZXRGaWx0ZXJzWyBwc2V1ZG8udG9Mb3dlckNhc2UoKSBdIHx8XHJcblx0XHRcdFx0XHRTaXp6bGUuZXJyb3IoIFwidW5zdXBwb3J0ZWQgcHNldWRvOiBcIiArIHBzZXVkbyApO1xyXG5cclxuXHRcdFx0Ly8gVGhlIHVzZXIgbWF5IHVzZSBjcmVhdGVQc2V1ZG8gdG8gaW5kaWNhdGUgdGhhdFxyXG5cdFx0XHQvLyBhcmd1bWVudHMgYXJlIG5lZWRlZCB0byBjcmVhdGUgdGhlIGZpbHRlciBmdW5jdGlvblxyXG5cdFx0XHQvLyBqdXN0IGFzIFNpenpsZSBkb2VzXHJcblx0XHRcdGlmICggZm5bIGV4cGFuZG8gXSApIHtcclxuXHRcdFx0XHRyZXR1cm4gZm4oIGFyZ3VtZW50ICk7XHJcblx0XHRcdH1cclxuXHJcblx0XHRcdC8vIEJ1dCBtYWludGFpbiBzdXBwb3J0IGZvciBvbGQgc2lnbmF0dXJlc1xyXG5cdFx0XHRpZiAoIGZuLmxlbmd0aCA+IDEgKSB7XHJcblx0XHRcdFx0YXJncyA9IFsgcHNldWRvLCBwc2V1ZG8sIFwiXCIsIGFyZ3VtZW50IF07XHJcblx0XHRcdFx0cmV0dXJuIEV4cHIuc2V0RmlsdGVycy5oYXNPd25Qcm9wZXJ0eSggcHNldWRvLnRvTG93ZXJDYXNlKCkgKSA/XHJcblx0XHRcdFx0XHRtYXJrRnVuY3Rpb24oZnVuY3Rpb24oIHNlZWQsIG1hdGNoZXMgKSB7XHJcblx0XHRcdFx0XHRcdHZhciBpZHgsXHJcblx0XHRcdFx0XHRcdFx0bWF0Y2hlZCA9IGZuKCBzZWVkLCBhcmd1bWVudCApLFxyXG5cdFx0XHRcdFx0XHRcdGkgPSBtYXRjaGVkLmxlbmd0aDtcclxuXHRcdFx0XHRcdFx0d2hpbGUgKCBpLS0gKSB7XHJcblx0XHRcdFx0XHRcdFx0aWR4ID0gaW5kZXhPZiggc2VlZCwgbWF0Y2hlZFtpXSApO1xyXG5cdFx0XHRcdFx0XHRcdHNlZWRbIGlkeCBdID0gISggbWF0Y2hlc1sgaWR4IF0gPSBtYXRjaGVkW2ldICk7XHJcblx0XHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdH0pIDpcclxuXHRcdFx0XHRcdGZ1bmN0aW9uKCBlbGVtICkge1xyXG5cdFx0XHRcdFx0XHRyZXR1cm4gZm4oIGVsZW0sIDAsIGFyZ3MgKTtcclxuXHRcdFx0XHRcdH07XHJcblx0XHRcdH1cclxuXHJcblx0XHRcdHJldHVybiBmbjtcclxuXHRcdH1cclxuXHR9LFxyXG5cclxuXHRwc2V1ZG9zOiB7XHJcblx0XHQvLyBQb3RlbnRpYWxseSBjb21wbGV4IHBzZXVkb3NcclxuXHRcdFwibm90XCI6IG1hcmtGdW5jdGlvbihmdW5jdGlvbiggc2VsZWN0b3IgKSB7XHJcblx0XHRcdC8vIFRyaW0gdGhlIHNlbGVjdG9yIHBhc3NlZCB0byBjb21waWxlXHJcblx0XHRcdC8vIHRvIGF2b2lkIHRyZWF0aW5nIGxlYWRpbmcgYW5kIHRyYWlsaW5nXHJcblx0XHRcdC8vIHNwYWNlcyBhcyBjb21iaW5hdG9yc1xyXG5cdFx0XHR2YXIgaW5wdXQgPSBbXSxcclxuXHRcdFx0XHRyZXN1bHRzID0gW10sXHJcblx0XHRcdFx0bWF0Y2hlciA9IGNvbXBpbGUoIHNlbGVjdG9yLnJlcGxhY2UoIHJ0cmltLCBcIiQxXCIgKSApO1xyXG5cclxuXHRcdFx0cmV0dXJuIG1hdGNoZXJbIGV4cGFuZG8gXSA/XHJcblx0XHRcdFx0bWFya0Z1bmN0aW9uKGZ1bmN0aW9uKCBzZWVkLCBtYXRjaGVzLCBjb250ZXh0LCB4bWwgKSB7XHJcblx0XHRcdFx0XHR2YXIgZWxlbSxcclxuXHRcdFx0XHRcdFx0dW5tYXRjaGVkID0gbWF0Y2hlciggc2VlZCwgbnVsbCwgeG1sLCBbXSApLFxyXG5cdFx0XHRcdFx0XHRpID0gc2VlZC5sZW5ndGg7XHJcblxyXG5cdFx0XHRcdFx0Ly8gTWF0Y2ggZWxlbWVudHMgdW5tYXRjaGVkIGJ5IGBtYXRjaGVyYFxyXG5cdFx0XHRcdFx0d2hpbGUgKCBpLS0gKSB7XHJcblx0XHRcdFx0XHRcdGlmICggKGVsZW0gPSB1bm1hdGNoZWRbaV0pICkge1xyXG5cdFx0XHRcdFx0XHRcdHNlZWRbaV0gPSAhKG1hdGNoZXNbaV0gPSBlbGVtKTtcclxuXHRcdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0fVxyXG5cdFx0XHRcdH0pIDpcclxuXHRcdFx0XHRmdW5jdGlvbiggZWxlbSwgY29udGV4dCwgeG1sICkge1xyXG5cdFx0XHRcdFx0aW5wdXRbMF0gPSBlbGVtO1xyXG5cdFx0XHRcdFx0bWF0Y2hlciggaW5wdXQsIG51bGwsIHhtbCwgcmVzdWx0cyApO1xyXG5cdFx0XHRcdFx0Ly8gRG9uJ3Qga2VlcCB0aGUgZWxlbWVudCAoaXNzdWUgIzI5OSlcclxuXHRcdFx0XHRcdGlucHV0WzBdID0gbnVsbDtcclxuXHRcdFx0XHRcdHJldHVybiAhcmVzdWx0cy5wb3AoKTtcclxuXHRcdFx0XHR9O1xyXG5cdFx0fSksXHJcblxyXG5cdFx0XCJoYXNcIjogbWFya0Z1bmN0aW9uKGZ1bmN0aW9uKCBzZWxlY3RvciApIHtcclxuXHRcdFx0cmV0dXJuIGZ1bmN0aW9uKCBlbGVtICkge1xyXG5cdFx0XHRcdHJldHVybiBTaXp6bGUoIHNlbGVjdG9yLCBlbGVtICkubGVuZ3RoID4gMDtcclxuXHRcdFx0fTtcclxuXHRcdH0pLFxyXG5cclxuXHRcdFwiY29udGFpbnNcIjogbWFya0Z1bmN0aW9uKGZ1bmN0aW9uKCB0ZXh0ICkge1xyXG5cdFx0XHR0ZXh0ID0gdGV4dC5yZXBsYWNlKCBydW5lc2NhcGUsIGZ1bmVzY2FwZSApO1xyXG5cdFx0XHRyZXR1cm4gZnVuY3Rpb24oIGVsZW0gKSB7XHJcblx0XHRcdFx0cmV0dXJuICggZWxlbS50ZXh0Q29udGVudCB8fCBlbGVtLmlubmVyVGV4dCB8fCBnZXRUZXh0KCBlbGVtICkgKS5pbmRleE9mKCB0ZXh0ICkgPiAtMTtcclxuXHRcdFx0fTtcclxuXHRcdH0pLFxyXG5cclxuXHRcdC8vIFwiV2hldGhlciBhbiBlbGVtZW50IGlzIHJlcHJlc2VudGVkIGJ5IGEgOmxhbmcoKSBzZWxlY3RvclxyXG5cdFx0Ly8gaXMgYmFzZWQgc29sZWx5IG9uIHRoZSBlbGVtZW50J3MgbGFuZ3VhZ2UgdmFsdWVcclxuXHRcdC8vIGJlaW5nIGVxdWFsIHRvIHRoZSBpZGVudGlmaWVyIEMsXHJcblx0XHQvLyBvciBiZWdpbm5pbmcgd2l0aCB0aGUgaWRlbnRpZmllciBDIGltbWVkaWF0ZWx5IGZvbGxvd2VkIGJ5IFwiLVwiLlxyXG5cdFx0Ly8gVGhlIG1hdGNoaW5nIG9mIEMgYWdhaW5zdCB0aGUgZWxlbWVudCdzIGxhbmd1YWdlIHZhbHVlIGlzIHBlcmZvcm1lZCBjYXNlLWluc2Vuc2l0aXZlbHkuXHJcblx0XHQvLyBUaGUgaWRlbnRpZmllciBDIGRvZXMgbm90IGhhdmUgdG8gYmUgYSB2YWxpZCBsYW5ndWFnZSBuYW1lLlwiXHJcblx0XHQvLyBodHRwOi8vd3d3LnczLm9yZy9UUi9zZWxlY3RvcnMvI2xhbmctcHNldWRvXHJcblx0XHRcImxhbmdcIjogbWFya0Z1bmN0aW9uKCBmdW5jdGlvbiggbGFuZyApIHtcclxuXHRcdFx0Ly8gbGFuZyB2YWx1ZSBtdXN0IGJlIGEgdmFsaWQgaWRlbnRpZmllclxyXG5cdFx0XHRpZiAoICFyaWRlbnRpZmllci50ZXN0KGxhbmcgfHwgXCJcIikgKSB7XHJcblx0XHRcdFx0U2l6emxlLmVycm9yKCBcInVuc3VwcG9ydGVkIGxhbmc6IFwiICsgbGFuZyApO1xyXG5cdFx0XHR9XHJcblx0XHRcdGxhbmcgPSBsYW5nLnJlcGxhY2UoIHJ1bmVzY2FwZSwgZnVuZXNjYXBlICkudG9Mb3dlckNhc2UoKTtcclxuXHRcdFx0cmV0dXJuIGZ1bmN0aW9uKCBlbGVtICkge1xyXG5cdFx0XHRcdHZhciBlbGVtTGFuZztcclxuXHRcdFx0XHRkbyB7XHJcblx0XHRcdFx0XHRpZiAoIChlbGVtTGFuZyA9IGRvY3VtZW50SXNIVE1MID9cclxuXHRcdFx0XHRcdFx0ZWxlbS5sYW5nIDpcclxuXHRcdFx0XHRcdFx0ZWxlbS5nZXRBdHRyaWJ1dGUoXCJ4bWw6bGFuZ1wiKSB8fCBlbGVtLmdldEF0dHJpYnV0ZShcImxhbmdcIikpICkge1xyXG5cclxuXHRcdFx0XHRcdFx0ZWxlbUxhbmcgPSBlbGVtTGFuZy50b0xvd2VyQ2FzZSgpO1xyXG5cdFx0XHRcdFx0XHRyZXR1cm4gZWxlbUxhbmcgPT09IGxhbmcgfHwgZWxlbUxhbmcuaW5kZXhPZiggbGFuZyArIFwiLVwiICkgPT09IDA7XHJcblx0XHRcdFx0XHR9XHJcblx0XHRcdFx0fSB3aGlsZSAoIChlbGVtID0gZWxlbS5wYXJlbnROb2RlKSAmJiBlbGVtLm5vZGVUeXBlID09PSAxICk7XHJcblx0XHRcdFx0cmV0dXJuIGZhbHNlO1xyXG5cdFx0XHR9O1xyXG5cdFx0fSksXHJcblxyXG5cdFx0Ly8gTWlzY2VsbGFuZW91c1xyXG5cdFx0XCJ0YXJnZXRcIjogZnVuY3Rpb24oIGVsZW0gKSB7XHJcblx0XHRcdHZhciBoYXNoID0gd2luZG93LmxvY2F0aW9uICYmIHdpbmRvdy5sb2NhdGlvbi5oYXNoO1xyXG5cdFx0XHRyZXR1cm4gaGFzaCAmJiBoYXNoLnNsaWNlKCAxICkgPT09IGVsZW0uaWQ7XHJcblx0XHR9LFxyXG5cclxuXHRcdFwicm9vdFwiOiBmdW5jdGlvbiggZWxlbSApIHtcclxuXHRcdFx0cmV0dXJuIGVsZW0gPT09IGRvY0VsZW07XHJcblx0XHR9LFxyXG5cclxuXHRcdFwiZm9jdXNcIjogZnVuY3Rpb24oIGVsZW0gKSB7XHJcblx0XHRcdHJldHVybiBlbGVtID09PSBkb2N1bWVudC5hY3RpdmVFbGVtZW50ICYmICghZG9jdW1lbnQuaGFzRm9jdXMgfHwgZG9jdW1lbnQuaGFzRm9jdXMoKSkgJiYgISEoZWxlbS50eXBlIHx8IGVsZW0uaHJlZiB8fCB+ZWxlbS50YWJJbmRleCk7XHJcblx0XHR9LFxyXG5cclxuXHRcdC8vIEJvb2xlYW4gcHJvcGVydGllc1xyXG5cdFx0XCJlbmFibGVkXCI6IGZ1bmN0aW9uKCBlbGVtICkge1xyXG5cdFx0XHRyZXR1cm4gZWxlbS5kaXNhYmxlZCA9PT0gZmFsc2U7XHJcblx0XHR9LFxyXG5cclxuXHRcdFwiZGlzYWJsZWRcIjogZnVuY3Rpb24oIGVsZW0gKSB7XHJcblx0XHRcdHJldHVybiBlbGVtLmRpc2FibGVkID09PSB0cnVlO1xyXG5cdFx0fSxcclxuXHJcblx0XHRcImNoZWNrZWRcIjogZnVuY3Rpb24oIGVsZW0gKSB7XHJcblx0XHRcdC8vIEluIENTUzMsIDpjaGVja2VkIHNob3VsZCByZXR1cm4gYm90aCBjaGVja2VkIGFuZCBzZWxlY3RlZCBlbGVtZW50c1xyXG5cdFx0XHQvLyBodHRwOi8vd3d3LnczLm9yZy9UUi8yMDExL1JFQy1jc3MzLXNlbGVjdG9ycy0yMDExMDkyOS8jY2hlY2tlZFxyXG5cdFx0XHR2YXIgbm9kZU5hbWUgPSBlbGVtLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCk7XHJcblx0XHRcdHJldHVybiAobm9kZU5hbWUgPT09IFwiaW5wdXRcIiAmJiAhIWVsZW0uY2hlY2tlZCkgfHwgKG5vZGVOYW1lID09PSBcIm9wdGlvblwiICYmICEhZWxlbS5zZWxlY3RlZCk7XHJcblx0XHR9LFxyXG5cclxuXHRcdFwic2VsZWN0ZWRcIjogZnVuY3Rpb24oIGVsZW0gKSB7XHJcblx0XHRcdC8vIEFjY2Vzc2luZyB0aGlzIHByb3BlcnR5IG1ha2VzIHNlbGVjdGVkLWJ5LWRlZmF1bHRcclxuXHRcdFx0Ly8gb3B0aW9ucyBpbiBTYWZhcmkgd29yayBwcm9wZXJseVxyXG5cdFx0XHRpZiAoIGVsZW0ucGFyZW50Tm9kZSApIHtcclxuXHRcdFx0XHRlbGVtLnBhcmVudE5vZGUuc2VsZWN0ZWRJbmRleDtcclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0cmV0dXJuIGVsZW0uc2VsZWN0ZWQgPT09IHRydWU7XHJcblx0XHR9LFxyXG5cclxuXHRcdC8vIENvbnRlbnRzXHJcblx0XHRcImVtcHR5XCI6IGZ1bmN0aW9uKCBlbGVtICkge1xyXG5cdFx0XHQvLyBodHRwOi8vd3d3LnczLm9yZy9UUi9zZWxlY3RvcnMvI2VtcHR5LXBzZXVkb1xyXG5cdFx0XHQvLyA6ZW1wdHkgaXMgbmVnYXRlZCBieSBlbGVtZW50ICgxKSBvciBjb250ZW50IG5vZGVzICh0ZXh0OiAzOyBjZGF0YTogNDsgZW50aXR5IHJlZjogNSksXHJcblx0XHRcdC8vICAgYnV0IG5vdCBieSBvdGhlcnMgKGNvbW1lbnQ6IDg7IHByb2Nlc3NpbmcgaW5zdHJ1Y3Rpb246IDc7IGV0Yy4pXHJcblx0XHRcdC8vIG5vZGVUeXBlIDwgNiB3b3JrcyBiZWNhdXNlIGF0dHJpYnV0ZXMgKDIpIGRvIG5vdCBhcHBlYXIgYXMgY2hpbGRyZW5cclxuXHRcdFx0Zm9yICggZWxlbSA9IGVsZW0uZmlyc3RDaGlsZDsgZWxlbTsgZWxlbSA9IGVsZW0ubmV4dFNpYmxpbmcgKSB7XHJcblx0XHRcdFx0aWYgKCBlbGVtLm5vZGVUeXBlIDwgNiApIHtcclxuXHRcdFx0XHRcdHJldHVybiBmYWxzZTtcclxuXHRcdFx0XHR9XHJcblx0XHRcdH1cclxuXHRcdFx0cmV0dXJuIHRydWU7XHJcblx0XHR9LFxyXG5cclxuXHRcdFwicGFyZW50XCI6IGZ1bmN0aW9uKCBlbGVtICkge1xyXG5cdFx0XHRyZXR1cm4gIUV4cHIucHNldWRvc1tcImVtcHR5XCJdKCBlbGVtICk7XHJcblx0XHR9LFxyXG5cclxuXHRcdC8vIEVsZW1lbnQvaW5wdXQgdHlwZXNcclxuXHRcdFwiaGVhZGVyXCI6IGZ1bmN0aW9uKCBlbGVtICkge1xyXG5cdFx0XHRyZXR1cm4gcmhlYWRlci50ZXN0KCBlbGVtLm5vZGVOYW1lICk7XHJcblx0XHR9LFxyXG5cclxuXHRcdFwiaW5wdXRcIjogZnVuY3Rpb24oIGVsZW0gKSB7XHJcblx0XHRcdHJldHVybiByaW5wdXRzLnRlc3QoIGVsZW0ubm9kZU5hbWUgKTtcclxuXHRcdH0sXHJcblxyXG5cdFx0XCJidXR0b25cIjogZnVuY3Rpb24oIGVsZW0gKSB7XHJcblx0XHRcdHZhciBuYW1lID0gZWxlbS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpO1xyXG5cdFx0XHRyZXR1cm4gbmFtZSA9PT0gXCJpbnB1dFwiICYmIGVsZW0udHlwZSA9PT0gXCJidXR0b25cIiB8fCBuYW1lID09PSBcImJ1dHRvblwiO1xyXG5cdFx0fSxcclxuXHJcblx0XHRcInRleHRcIjogZnVuY3Rpb24oIGVsZW0gKSB7XHJcblx0XHRcdHZhciBhdHRyO1xyXG5cdFx0XHRyZXR1cm4gZWxlbS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpID09PSBcImlucHV0XCIgJiZcclxuXHRcdFx0XHRlbGVtLnR5cGUgPT09IFwidGV4dFwiICYmXHJcblxyXG5cdFx0XHRcdC8vIFN1cHBvcnQ6IElFPDhcclxuXHRcdFx0XHQvLyBOZXcgSFRNTDUgYXR0cmlidXRlIHZhbHVlcyAoZS5nLiwgXCJzZWFyY2hcIikgYXBwZWFyIHdpdGggZWxlbS50eXBlID09PSBcInRleHRcIlxyXG5cdFx0XHRcdCggKGF0dHIgPSBlbGVtLmdldEF0dHJpYnV0ZShcInR5cGVcIikpID09IG51bGwgfHwgYXR0ci50b0xvd2VyQ2FzZSgpID09PSBcInRleHRcIiApO1xyXG5cdFx0fSxcclxuXHJcblx0XHQvLyBQb3NpdGlvbi1pbi1jb2xsZWN0aW9uXHJcblx0XHRcImZpcnN0XCI6IGNyZWF0ZVBvc2l0aW9uYWxQc2V1ZG8oZnVuY3Rpb24oKSB7XHJcblx0XHRcdHJldHVybiBbIDAgXTtcclxuXHRcdH0pLFxyXG5cclxuXHRcdFwibGFzdFwiOiBjcmVhdGVQb3NpdGlvbmFsUHNldWRvKGZ1bmN0aW9uKCBtYXRjaEluZGV4ZXMsIGxlbmd0aCApIHtcclxuXHRcdFx0cmV0dXJuIFsgbGVuZ3RoIC0gMSBdO1xyXG5cdFx0fSksXHJcblxyXG5cdFx0XCJlcVwiOiBjcmVhdGVQb3NpdGlvbmFsUHNldWRvKGZ1bmN0aW9uKCBtYXRjaEluZGV4ZXMsIGxlbmd0aCwgYXJndW1lbnQgKSB7XHJcblx0XHRcdHJldHVybiBbIGFyZ3VtZW50IDwgMCA/IGFyZ3VtZW50ICsgbGVuZ3RoIDogYXJndW1lbnQgXTtcclxuXHRcdH0pLFxyXG5cclxuXHRcdFwiZXZlblwiOiBjcmVhdGVQb3NpdGlvbmFsUHNldWRvKGZ1bmN0aW9uKCBtYXRjaEluZGV4ZXMsIGxlbmd0aCApIHtcclxuXHRcdFx0dmFyIGkgPSAwO1xyXG5cdFx0XHRmb3IgKCA7IGkgPCBsZW5ndGg7IGkgKz0gMiApIHtcclxuXHRcdFx0XHRtYXRjaEluZGV4ZXMucHVzaCggaSApO1xyXG5cdFx0XHR9XHJcblx0XHRcdHJldHVybiBtYXRjaEluZGV4ZXM7XHJcblx0XHR9KSxcclxuXHJcblx0XHRcIm9kZFwiOiBjcmVhdGVQb3NpdGlvbmFsUHNldWRvKGZ1bmN0aW9uKCBtYXRjaEluZGV4ZXMsIGxlbmd0aCApIHtcclxuXHRcdFx0dmFyIGkgPSAxO1xyXG5cdFx0XHRmb3IgKCA7IGkgPCBsZW5ndGg7IGkgKz0gMiApIHtcclxuXHRcdFx0XHRtYXRjaEluZGV4ZXMucHVzaCggaSApO1xyXG5cdFx0XHR9XHJcblx0XHRcdHJldHVybiBtYXRjaEluZGV4ZXM7XHJcblx0XHR9KSxcclxuXHJcblx0XHRcImx0XCI6IGNyZWF0ZVBvc2l0aW9uYWxQc2V1ZG8oZnVuY3Rpb24oIG1hdGNoSW5kZXhlcywgbGVuZ3RoLCBhcmd1bWVudCApIHtcclxuXHRcdFx0dmFyIGkgPSBhcmd1bWVudCA8IDAgPyBhcmd1bWVudCArIGxlbmd0aCA6IGFyZ3VtZW50O1xyXG5cdFx0XHRmb3IgKCA7IC0taSA+PSAwOyApIHtcclxuXHRcdFx0XHRtYXRjaEluZGV4ZXMucHVzaCggaSApO1xyXG5cdFx0XHR9XHJcblx0XHRcdHJldHVybiBtYXRjaEluZGV4ZXM7XHJcblx0XHR9KSxcclxuXHJcblx0XHRcImd0XCI6IGNyZWF0ZVBvc2l0aW9uYWxQc2V1ZG8oZnVuY3Rpb24oIG1hdGNoSW5kZXhlcywgbGVuZ3RoLCBhcmd1bWVudCApIHtcclxuXHRcdFx0dmFyIGkgPSBhcmd1bWVudCA8IDAgPyBhcmd1bWVudCArIGxlbmd0aCA6IGFyZ3VtZW50O1xyXG5cdFx0XHRmb3IgKCA7ICsraSA8IGxlbmd0aDsgKSB7XHJcblx0XHRcdFx0bWF0Y2hJbmRleGVzLnB1c2goIGkgKTtcclxuXHRcdFx0fVxyXG5cdFx0XHRyZXR1cm4gbWF0Y2hJbmRleGVzO1xyXG5cdFx0fSlcclxuXHR9XHJcbn07XHJcblxyXG5FeHByLnBzZXVkb3NbXCJudGhcIl0gPSBFeHByLnBzZXVkb3NbXCJlcVwiXTtcclxuXHJcbi8vIEFkZCBidXR0b24vaW5wdXQgdHlwZSBwc2V1ZG9zXHJcbmZvciAoIGkgaW4geyByYWRpbzogdHJ1ZSwgY2hlY2tib3g6IHRydWUsIGZpbGU6IHRydWUsIHBhc3N3b3JkOiB0cnVlLCBpbWFnZTogdHJ1ZSB9ICkge1xyXG5cdEV4cHIucHNldWRvc1sgaSBdID0gY3JlYXRlSW5wdXRQc2V1ZG8oIGkgKTtcclxufVxyXG5mb3IgKCBpIGluIHsgc3VibWl0OiB0cnVlLCByZXNldDogdHJ1ZSB9ICkge1xyXG5cdEV4cHIucHNldWRvc1sgaSBdID0gY3JlYXRlQnV0dG9uUHNldWRvKCBpICk7XHJcbn1cclxuXHJcbi8vIEVhc3kgQVBJIGZvciBjcmVhdGluZyBuZXcgc2V0RmlsdGVyc1xyXG5mdW5jdGlvbiBzZXRGaWx0ZXJzKCkge31cclxuc2V0RmlsdGVycy5wcm90b3R5cGUgPSBFeHByLmZpbHRlcnMgPSBFeHByLnBzZXVkb3M7XHJcbkV4cHIuc2V0RmlsdGVycyA9IG5ldyBzZXRGaWx0ZXJzKCk7XHJcblxyXG50b2tlbml6ZSA9IFNpenpsZS50b2tlbml6ZSA9IGZ1bmN0aW9uKCBzZWxlY3RvciwgcGFyc2VPbmx5ICkge1xyXG5cdHZhciBtYXRjaGVkLCBtYXRjaCwgdG9rZW5zLCB0eXBlLFxyXG5cdFx0c29GYXIsIGdyb3VwcywgcHJlRmlsdGVycyxcclxuXHRcdGNhY2hlZCA9IHRva2VuQ2FjaGVbIHNlbGVjdG9yICsgXCIgXCIgXTtcclxuXHJcblx0aWYgKCBjYWNoZWQgKSB7XHJcblx0XHRyZXR1cm4gcGFyc2VPbmx5ID8gMCA6IGNhY2hlZC5zbGljZSggMCApO1xyXG5cdH1cclxuXHJcblx0c29GYXIgPSBzZWxlY3RvcjtcclxuXHRncm91cHMgPSBbXTtcclxuXHRwcmVGaWx0ZXJzID0gRXhwci5wcmVGaWx0ZXI7XHJcblxyXG5cdHdoaWxlICggc29GYXIgKSB7XHJcblxyXG5cdFx0Ly8gQ29tbWEgYW5kIGZpcnN0IHJ1blxyXG5cdFx0aWYgKCAhbWF0Y2hlZCB8fCAobWF0Y2ggPSByY29tbWEuZXhlYyggc29GYXIgKSkgKSB7XHJcblx0XHRcdGlmICggbWF0Y2ggKSB7XHJcblx0XHRcdFx0Ly8gRG9uJ3QgY29uc3VtZSB0cmFpbGluZyBjb21tYXMgYXMgdmFsaWRcclxuXHRcdFx0XHRzb0ZhciA9IHNvRmFyLnNsaWNlKCBtYXRjaFswXS5sZW5ndGggKSB8fCBzb0ZhcjtcclxuXHRcdFx0fVxyXG5cdFx0XHRncm91cHMucHVzaCggKHRva2VucyA9IFtdKSApO1xyXG5cdFx0fVxyXG5cclxuXHRcdG1hdGNoZWQgPSBmYWxzZTtcclxuXHJcblx0XHQvLyBDb21iaW5hdG9yc1xyXG5cdFx0aWYgKCAobWF0Y2ggPSByY29tYmluYXRvcnMuZXhlYyggc29GYXIgKSkgKSB7XHJcblx0XHRcdG1hdGNoZWQgPSBtYXRjaC5zaGlmdCgpO1xyXG5cdFx0XHR0b2tlbnMucHVzaCh7XHJcblx0XHRcdFx0dmFsdWU6IG1hdGNoZWQsXHJcblx0XHRcdFx0Ly8gQ2FzdCBkZXNjZW5kYW50IGNvbWJpbmF0b3JzIHRvIHNwYWNlXHJcblx0XHRcdFx0dHlwZTogbWF0Y2hbMF0ucmVwbGFjZSggcnRyaW0sIFwiIFwiIClcclxuXHRcdFx0fSk7XHJcblx0XHRcdHNvRmFyID0gc29GYXIuc2xpY2UoIG1hdGNoZWQubGVuZ3RoICk7XHJcblx0XHR9XHJcblxyXG5cdFx0Ly8gRmlsdGVyc1xyXG5cdFx0Zm9yICggdHlwZSBpbiBFeHByLmZpbHRlciApIHtcclxuXHRcdFx0aWYgKCAobWF0Y2ggPSBtYXRjaEV4cHJbIHR5cGUgXS5leGVjKCBzb0ZhciApKSAmJiAoIXByZUZpbHRlcnNbIHR5cGUgXSB8fFxyXG5cdFx0XHRcdChtYXRjaCA9IHByZUZpbHRlcnNbIHR5cGUgXSggbWF0Y2ggKSkpICkge1xyXG5cdFx0XHRcdG1hdGNoZWQgPSBtYXRjaC5zaGlmdCgpO1xyXG5cdFx0XHRcdHRva2Vucy5wdXNoKHtcclxuXHRcdFx0XHRcdHZhbHVlOiBtYXRjaGVkLFxyXG5cdFx0XHRcdFx0dHlwZTogdHlwZSxcclxuXHRcdFx0XHRcdG1hdGNoZXM6IG1hdGNoXHJcblx0XHRcdFx0fSk7XHJcblx0XHRcdFx0c29GYXIgPSBzb0Zhci5zbGljZSggbWF0Y2hlZC5sZW5ndGggKTtcclxuXHRcdFx0fVxyXG5cdFx0fVxyXG5cclxuXHRcdGlmICggIW1hdGNoZWQgKSB7XHJcblx0XHRcdGJyZWFrO1xyXG5cdFx0fVxyXG5cdH1cclxuXHJcblx0Ly8gUmV0dXJuIHRoZSBsZW5ndGggb2YgdGhlIGludmFsaWQgZXhjZXNzXHJcblx0Ly8gaWYgd2UncmUganVzdCBwYXJzaW5nXHJcblx0Ly8gT3RoZXJ3aXNlLCB0aHJvdyBhbiBlcnJvciBvciByZXR1cm4gdG9rZW5zXHJcblx0cmV0dXJuIHBhcnNlT25seSA/XHJcblx0XHRzb0Zhci5sZW5ndGggOlxyXG5cdFx0c29GYXIgP1xyXG5cdFx0XHRTaXp6bGUuZXJyb3IoIHNlbGVjdG9yICkgOlxyXG5cdFx0XHQvLyBDYWNoZSB0aGUgdG9rZW5zXHJcblx0XHRcdHRva2VuQ2FjaGUoIHNlbGVjdG9yLCBncm91cHMgKS5zbGljZSggMCApO1xyXG59O1xyXG5cclxuZnVuY3Rpb24gdG9TZWxlY3RvciggdG9rZW5zICkge1xyXG5cdHZhciBpID0gMCxcclxuXHRcdGxlbiA9IHRva2Vucy5sZW5ndGgsXHJcblx0XHRzZWxlY3RvciA9IFwiXCI7XHJcblx0Zm9yICggOyBpIDwgbGVuOyBpKysgKSB7XHJcblx0XHRzZWxlY3RvciArPSB0b2tlbnNbaV0udmFsdWU7XHJcblx0fVxyXG5cdHJldHVybiBzZWxlY3RvcjtcclxufVxyXG5cclxuZnVuY3Rpb24gYWRkQ29tYmluYXRvciggbWF0Y2hlciwgY29tYmluYXRvciwgYmFzZSApIHtcclxuXHR2YXIgZGlyID0gY29tYmluYXRvci5kaXIsXHJcblx0XHRjaGVja05vbkVsZW1lbnRzID0gYmFzZSAmJiBkaXIgPT09IFwicGFyZW50Tm9kZVwiLFxyXG5cdFx0ZG9uZU5hbWUgPSBkb25lKys7XHJcblxyXG5cdHJldHVybiBjb21iaW5hdG9yLmZpcnN0ID9cclxuXHRcdC8vIENoZWNrIGFnYWluc3QgY2xvc2VzdCBhbmNlc3Rvci9wcmVjZWRpbmcgZWxlbWVudFxyXG5cdFx0ZnVuY3Rpb24oIGVsZW0sIGNvbnRleHQsIHhtbCApIHtcclxuXHRcdFx0d2hpbGUgKCAoZWxlbSA9IGVsZW1bIGRpciBdKSApIHtcclxuXHRcdFx0XHRpZiAoIGVsZW0ubm9kZVR5cGUgPT09IDEgfHwgY2hlY2tOb25FbGVtZW50cyApIHtcclxuXHRcdFx0XHRcdHJldHVybiBtYXRjaGVyKCBlbGVtLCBjb250ZXh0LCB4bWwgKTtcclxuXHRcdFx0XHR9XHJcblx0XHRcdH1cclxuXHRcdH0gOlxyXG5cclxuXHRcdC8vIENoZWNrIGFnYWluc3QgYWxsIGFuY2VzdG9yL3ByZWNlZGluZyBlbGVtZW50c1xyXG5cdFx0ZnVuY3Rpb24oIGVsZW0sIGNvbnRleHQsIHhtbCApIHtcclxuXHRcdFx0dmFyIG9sZENhY2hlLCB1bmlxdWVDYWNoZSwgb3V0ZXJDYWNoZSxcclxuXHRcdFx0XHRuZXdDYWNoZSA9IFsgZGlycnVucywgZG9uZU5hbWUgXTtcclxuXHJcblx0XHRcdC8vIFdlIGNhbid0IHNldCBhcmJpdHJhcnkgZGF0YSBvbiBYTUwgbm9kZXMsIHNvIHRoZXkgZG9uJ3QgYmVuZWZpdCBmcm9tIGNvbWJpbmF0b3IgY2FjaGluZ1xyXG5cdFx0XHRpZiAoIHhtbCApIHtcclxuXHRcdFx0XHR3aGlsZSAoIChlbGVtID0gZWxlbVsgZGlyIF0pICkge1xyXG5cdFx0XHRcdFx0aWYgKCBlbGVtLm5vZGVUeXBlID09PSAxIHx8IGNoZWNrTm9uRWxlbWVudHMgKSB7XHJcblx0XHRcdFx0XHRcdGlmICggbWF0Y2hlciggZWxlbSwgY29udGV4dCwgeG1sICkgKSB7XHJcblx0XHRcdFx0XHRcdFx0cmV0dXJuIHRydWU7XHJcblx0XHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdH1cclxuXHRcdFx0XHR9XHJcblx0XHRcdH0gZWxzZSB7XHJcblx0XHRcdFx0d2hpbGUgKCAoZWxlbSA9IGVsZW1bIGRpciBdKSApIHtcclxuXHRcdFx0XHRcdGlmICggZWxlbS5ub2RlVHlwZSA9PT0gMSB8fCBjaGVja05vbkVsZW1lbnRzICkge1xyXG5cdFx0XHRcdFx0XHRvdXRlckNhY2hlID0gZWxlbVsgZXhwYW5kbyBdIHx8IChlbGVtWyBleHBhbmRvIF0gPSB7fSk7XHJcblxyXG5cdFx0XHRcdFx0XHQvLyBTdXBwb3J0OiBJRSA8OSBvbmx5XHJcblx0XHRcdFx0XHRcdC8vIERlZmVuZCBhZ2FpbnN0IGNsb25lZCBhdHRyb3BlcnRpZXMgKGpRdWVyeSBnaC0xNzA5KVxyXG5cdFx0XHRcdFx0XHR1bmlxdWVDYWNoZSA9IG91dGVyQ2FjaGVbIGVsZW0udW5pcXVlSUQgXSB8fCAob3V0ZXJDYWNoZVsgZWxlbS51bmlxdWVJRCBdID0ge30pO1xyXG5cclxuXHRcdFx0XHRcdFx0aWYgKCAob2xkQ2FjaGUgPSB1bmlxdWVDYWNoZVsgZGlyIF0pICYmXHJcblx0XHRcdFx0XHRcdFx0b2xkQ2FjaGVbIDAgXSA9PT0gZGlycnVucyAmJiBvbGRDYWNoZVsgMSBdID09PSBkb25lTmFtZSApIHtcclxuXHJcblx0XHRcdFx0XHRcdFx0Ly8gQXNzaWduIHRvIG5ld0NhY2hlIHNvIHJlc3VsdHMgYmFjay1wcm9wYWdhdGUgdG8gcHJldmlvdXMgZWxlbWVudHNcclxuXHRcdFx0XHRcdFx0XHRyZXR1cm4gKG5ld0NhY2hlWyAyIF0gPSBvbGRDYWNoZVsgMiBdKTtcclxuXHRcdFx0XHRcdFx0fSBlbHNlIHtcclxuXHRcdFx0XHRcdFx0XHQvLyBSZXVzZSBuZXdjYWNoZSBzbyByZXN1bHRzIGJhY2stcHJvcGFnYXRlIHRvIHByZXZpb3VzIGVsZW1lbnRzXHJcblx0XHRcdFx0XHRcdFx0dW5pcXVlQ2FjaGVbIGRpciBdID0gbmV3Q2FjaGU7XHJcblxyXG5cdFx0XHRcdFx0XHRcdC8vIEEgbWF0Y2ggbWVhbnMgd2UncmUgZG9uZTsgYSBmYWlsIG1lYW5zIHdlIGhhdmUgdG8ga2VlcCBjaGVja2luZ1xyXG5cdFx0XHRcdFx0XHRcdGlmICggKG5ld0NhY2hlWyAyIF0gPSBtYXRjaGVyKCBlbGVtLCBjb250ZXh0LCB4bWwgKSkgKSB7XHJcblx0XHRcdFx0XHRcdFx0XHRyZXR1cm4gdHJ1ZTtcclxuXHRcdFx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdH1cclxuXHRcdFx0XHR9XHJcblx0XHRcdH1cclxuXHRcdH07XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGVsZW1lbnRNYXRjaGVyKCBtYXRjaGVycyApIHtcclxuXHRyZXR1cm4gbWF0Y2hlcnMubGVuZ3RoID4gMSA/XHJcblx0XHRmdW5jdGlvbiggZWxlbSwgY29udGV4dCwgeG1sICkge1xyXG5cdFx0XHR2YXIgaSA9IG1hdGNoZXJzLmxlbmd0aDtcclxuXHRcdFx0d2hpbGUgKCBpLS0gKSB7XHJcblx0XHRcdFx0aWYgKCAhbWF0Y2hlcnNbaV0oIGVsZW0sIGNvbnRleHQsIHhtbCApICkge1xyXG5cdFx0XHRcdFx0cmV0dXJuIGZhbHNlO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0fVxyXG5cdFx0XHRyZXR1cm4gdHJ1ZTtcclxuXHRcdH0gOlxyXG5cdFx0bWF0Y2hlcnNbMF07XHJcbn1cclxuXHJcbmZ1bmN0aW9uIG11bHRpcGxlQ29udGV4dHMoIHNlbGVjdG9yLCBjb250ZXh0cywgcmVzdWx0cyApIHtcclxuXHR2YXIgaSA9IDAsXHJcblx0XHRsZW4gPSBjb250ZXh0cy5sZW5ndGg7XHJcblx0Zm9yICggOyBpIDwgbGVuOyBpKysgKSB7XHJcblx0XHRTaXp6bGUoIHNlbGVjdG9yLCBjb250ZXh0c1tpXSwgcmVzdWx0cyApO1xyXG5cdH1cclxuXHRyZXR1cm4gcmVzdWx0cztcclxufVxyXG5cclxuZnVuY3Rpb24gY29uZGVuc2UoIHVubWF0Y2hlZCwgbWFwLCBmaWx0ZXIsIGNvbnRleHQsIHhtbCApIHtcclxuXHR2YXIgZWxlbSxcclxuXHRcdG5ld1VubWF0Y2hlZCA9IFtdLFxyXG5cdFx0aSA9IDAsXHJcblx0XHRsZW4gPSB1bm1hdGNoZWQubGVuZ3RoLFxyXG5cdFx0bWFwcGVkID0gbWFwICE9IG51bGw7XHJcblxyXG5cdGZvciAoIDsgaSA8IGxlbjsgaSsrICkge1xyXG5cdFx0aWYgKCAoZWxlbSA9IHVubWF0Y2hlZFtpXSkgKSB7XHJcblx0XHRcdGlmICggIWZpbHRlciB8fCBmaWx0ZXIoIGVsZW0sIGNvbnRleHQsIHhtbCApICkge1xyXG5cdFx0XHRcdG5ld1VubWF0Y2hlZC5wdXNoKCBlbGVtICk7XHJcblx0XHRcdFx0aWYgKCBtYXBwZWQgKSB7XHJcblx0XHRcdFx0XHRtYXAucHVzaCggaSApO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0fVxyXG5cdFx0fVxyXG5cdH1cclxuXHJcblx0cmV0dXJuIG5ld1VubWF0Y2hlZDtcclxufVxyXG5cclxuZnVuY3Rpb24gc2V0TWF0Y2hlciggcHJlRmlsdGVyLCBzZWxlY3RvciwgbWF0Y2hlciwgcG9zdEZpbHRlciwgcG9zdEZpbmRlciwgcG9zdFNlbGVjdG9yICkge1xyXG5cdGlmICggcG9zdEZpbHRlciAmJiAhcG9zdEZpbHRlclsgZXhwYW5kbyBdICkge1xyXG5cdFx0cG9zdEZpbHRlciA9IHNldE1hdGNoZXIoIHBvc3RGaWx0ZXIgKTtcclxuXHR9XHJcblx0aWYgKCBwb3N0RmluZGVyICYmICFwb3N0RmluZGVyWyBleHBhbmRvIF0gKSB7XHJcblx0XHRwb3N0RmluZGVyID0gc2V0TWF0Y2hlciggcG9zdEZpbmRlciwgcG9zdFNlbGVjdG9yICk7XHJcblx0fVxyXG5cdHJldHVybiBtYXJrRnVuY3Rpb24oZnVuY3Rpb24oIHNlZWQsIHJlc3VsdHMsIGNvbnRleHQsIHhtbCApIHtcclxuXHRcdHZhciB0ZW1wLCBpLCBlbGVtLFxyXG5cdFx0XHRwcmVNYXAgPSBbXSxcclxuXHRcdFx0cG9zdE1hcCA9IFtdLFxyXG5cdFx0XHRwcmVleGlzdGluZyA9IHJlc3VsdHMubGVuZ3RoLFxyXG5cclxuXHRcdFx0Ly8gR2V0IGluaXRpYWwgZWxlbWVudHMgZnJvbSBzZWVkIG9yIGNvbnRleHRcclxuXHRcdFx0ZWxlbXMgPSBzZWVkIHx8IG11bHRpcGxlQ29udGV4dHMoIHNlbGVjdG9yIHx8IFwiKlwiLCBjb250ZXh0Lm5vZGVUeXBlID8gWyBjb250ZXh0IF0gOiBjb250ZXh0LCBbXSApLFxyXG5cclxuXHRcdFx0Ly8gUHJlZmlsdGVyIHRvIGdldCBtYXRjaGVyIGlucHV0LCBwcmVzZXJ2aW5nIGEgbWFwIGZvciBzZWVkLXJlc3VsdHMgc3luY2hyb25pemF0aW9uXHJcblx0XHRcdG1hdGNoZXJJbiA9IHByZUZpbHRlciAmJiAoIHNlZWQgfHwgIXNlbGVjdG9yICkgP1xyXG5cdFx0XHRcdGNvbmRlbnNlKCBlbGVtcywgcHJlTWFwLCBwcmVGaWx0ZXIsIGNvbnRleHQsIHhtbCApIDpcclxuXHRcdFx0XHRlbGVtcyxcclxuXHJcblx0XHRcdG1hdGNoZXJPdXQgPSBtYXRjaGVyID9cclxuXHRcdFx0XHQvLyBJZiB3ZSBoYXZlIGEgcG9zdEZpbmRlciwgb3IgZmlsdGVyZWQgc2VlZCwgb3Igbm9uLXNlZWQgcG9zdEZpbHRlciBvciBwcmVleGlzdGluZyByZXN1bHRzLFxyXG5cdFx0XHRcdHBvc3RGaW5kZXIgfHwgKCBzZWVkID8gcHJlRmlsdGVyIDogcHJlZXhpc3RpbmcgfHwgcG9zdEZpbHRlciApID9cclxuXHJcblx0XHRcdFx0XHQvLyAuLi5pbnRlcm1lZGlhdGUgcHJvY2Vzc2luZyBpcyBuZWNlc3NhcnlcclxuXHRcdFx0XHRcdFtdIDpcclxuXHJcblx0XHRcdFx0XHQvLyAuLi5vdGhlcndpc2UgdXNlIHJlc3VsdHMgZGlyZWN0bHlcclxuXHRcdFx0XHRcdHJlc3VsdHMgOlxyXG5cdFx0XHRcdG1hdGNoZXJJbjtcclxuXHJcblx0XHQvLyBGaW5kIHByaW1hcnkgbWF0Y2hlc1xyXG5cdFx0aWYgKCBtYXRjaGVyICkge1xyXG5cdFx0XHRtYXRjaGVyKCBtYXRjaGVySW4sIG1hdGNoZXJPdXQsIGNvbnRleHQsIHhtbCApO1xyXG5cdFx0fVxyXG5cclxuXHRcdC8vIEFwcGx5IHBvc3RGaWx0ZXJcclxuXHRcdGlmICggcG9zdEZpbHRlciApIHtcclxuXHRcdFx0dGVtcCA9IGNvbmRlbnNlKCBtYXRjaGVyT3V0LCBwb3N0TWFwICk7XHJcblx0XHRcdHBvc3RGaWx0ZXIoIHRlbXAsIFtdLCBjb250ZXh0LCB4bWwgKTtcclxuXHJcblx0XHRcdC8vIFVuLW1hdGNoIGZhaWxpbmcgZWxlbWVudHMgYnkgbW92aW5nIHRoZW0gYmFjayB0byBtYXRjaGVySW5cclxuXHRcdFx0aSA9IHRlbXAubGVuZ3RoO1xyXG5cdFx0XHR3aGlsZSAoIGktLSApIHtcclxuXHRcdFx0XHRpZiAoIChlbGVtID0gdGVtcFtpXSkgKSB7XHJcblx0XHRcdFx0XHRtYXRjaGVyT3V0WyBwb3N0TWFwW2ldIF0gPSAhKG1hdGNoZXJJblsgcG9zdE1hcFtpXSBdID0gZWxlbSk7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9XHJcblx0XHR9XHJcblxyXG5cdFx0aWYgKCBzZWVkICkge1xyXG5cdFx0XHRpZiAoIHBvc3RGaW5kZXIgfHwgcHJlRmlsdGVyICkge1xyXG5cdFx0XHRcdGlmICggcG9zdEZpbmRlciApIHtcclxuXHRcdFx0XHRcdC8vIEdldCB0aGUgZmluYWwgbWF0Y2hlck91dCBieSBjb25kZW5zaW5nIHRoaXMgaW50ZXJtZWRpYXRlIGludG8gcG9zdEZpbmRlciBjb250ZXh0c1xyXG5cdFx0XHRcdFx0dGVtcCA9IFtdO1xyXG5cdFx0XHRcdFx0aSA9IG1hdGNoZXJPdXQubGVuZ3RoO1xyXG5cdFx0XHRcdFx0d2hpbGUgKCBpLS0gKSB7XHJcblx0XHRcdFx0XHRcdGlmICggKGVsZW0gPSBtYXRjaGVyT3V0W2ldKSApIHtcclxuXHRcdFx0XHRcdFx0XHQvLyBSZXN0b3JlIG1hdGNoZXJJbiBzaW5jZSBlbGVtIGlzIG5vdCB5ZXQgYSBmaW5hbCBtYXRjaFxyXG5cdFx0XHRcdFx0XHRcdHRlbXAucHVzaCggKG1hdGNoZXJJbltpXSA9IGVsZW0pICk7XHJcblx0XHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdHBvc3RGaW5kZXIoIG51bGwsIChtYXRjaGVyT3V0ID0gW10pLCB0ZW1wLCB4bWwgKTtcclxuXHRcdFx0XHR9XHJcblxyXG5cdFx0XHRcdC8vIE1vdmUgbWF0Y2hlZCBlbGVtZW50cyBmcm9tIHNlZWQgdG8gcmVzdWx0cyB0byBrZWVwIHRoZW0gc3luY2hyb25pemVkXHJcblx0XHRcdFx0aSA9IG1hdGNoZXJPdXQubGVuZ3RoO1xyXG5cdFx0XHRcdHdoaWxlICggaS0tICkge1xyXG5cdFx0XHRcdFx0aWYgKCAoZWxlbSA9IG1hdGNoZXJPdXRbaV0pICYmXHJcblx0XHRcdFx0XHRcdCh0ZW1wID0gcG9zdEZpbmRlciA/IGluZGV4T2YoIHNlZWQsIGVsZW0gKSA6IHByZU1hcFtpXSkgPiAtMSApIHtcclxuXHJcblx0XHRcdFx0XHRcdHNlZWRbdGVtcF0gPSAhKHJlc3VsdHNbdGVtcF0gPSBlbGVtKTtcclxuXHRcdFx0XHRcdH1cclxuXHRcdFx0XHR9XHJcblx0XHRcdH1cclxuXHJcblx0XHQvLyBBZGQgZWxlbWVudHMgdG8gcmVzdWx0cywgdGhyb3VnaCBwb3N0RmluZGVyIGlmIGRlZmluZWRcclxuXHRcdH0gZWxzZSB7XHJcblx0XHRcdG1hdGNoZXJPdXQgPSBjb25kZW5zZShcclxuXHRcdFx0XHRtYXRjaGVyT3V0ID09PSByZXN1bHRzID9cclxuXHRcdFx0XHRcdG1hdGNoZXJPdXQuc3BsaWNlKCBwcmVleGlzdGluZywgbWF0Y2hlck91dC5sZW5ndGggKSA6XHJcblx0XHRcdFx0XHRtYXRjaGVyT3V0XHJcblx0XHRcdCk7XHJcblx0XHRcdGlmICggcG9zdEZpbmRlciApIHtcclxuXHRcdFx0XHRwb3N0RmluZGVyKCBudWxsLCByZXN1bHRzLCBtYXRjaGVyT3V0LCB4bWwgKTtcclxuXHRcdFx0fSBlbHNlIHtcclxuXHRcdFx0XHRwdXNoLmFwcGx5KCByZXN1bHRzLCBtYXRjaGVyT3V0ICk7XHJcblx0XHRcdH1cclxuXHRcdH1cclxuXHR9KTtcclxufVxyXG5cclxuZnVuY3Rpb24gbWF0Y2hlckZyb21Ub2tlbnMoIHRva2VucyApIHtcclxuXHR2YXIgY2hlY2tDb250ZXh0LCBtYXRjaGVyLCBqLFxyXG5cdFx0bGVuID0gdG9rZW5zLmxlbmd0aCxcclxuXHRcdGxlYWRpbmdSZWxhdGl2ZSA9IEV4cHIucmVsYXRpdmVbIHRva2Vuc1swXS50eXBlIF0sXHJcblx0XHRpbXBsaWNpdFJlbGF0aXZlID0gbGVhZGluZ1JlbGF0aXZlIHx8IEV4cHIucmVsYXRpdmVbXCIgXCJdLFxyXG5cdFx0aSA9IGxlYWRpbmdSZWxhdGl2ZSA/IDEgOiAwLFxyXG5cclxuXHRcdC8vIFRoZSBmb3VuZGF0aW9uYWwgbWF0Y2hlciBlbnN1cmVzIHRoYXQgZWxlbWVudHMgYXJlIHJlYWNoYWJsZSBmcm9tIHRvcC1sZXZlbCBjb250ZXh0KHMpXHJcblx0XHRtYXRjaENvbnRleHQgPSBhZGRDb21iaW5hdG9yKCBmdW5jdGlvbiggZWxlbSApIHtcclxuXHRcdFx0cmV0dXJuIGVsZW0gPT09IGNoZWNrQ29udGV4dDtcclxuXHRcdH0sIGltcGxpY2l0UmVsYXRpdmUsIHRydWUgKSxcclxuXHRcdG1hdGNoQW55Q29udGV4dCA9IGFkZENvbWJpbmF0b3IoIGZ1bmN0aW9uKCBlbGVtICkge1xyXG5cdFx0XHRyZXR1cm4gaW5kZXhPZiggY2hlY2tDb250ZXh0LCBlbGVtICkgPiAtMTtcclxuXHRcdH0sIGltcGxpY2l0UmVsYXRpdmUsIHRydWUgKSxcclxuXHRcdG1hdGNoZXJzID0gWyBmdW5jdGlvbiggZWxlbSwgY29udGV4dCwgeG1sICkge1xyXG5cdFx0XHR2YXIgcmV0ID0gKCAhbGVhZGluZ1JlbGF0aXZlICYmICggeG1sIHx8IGNvbnRleHQgIT09IG91dGVybW9zdENvbnRleHQgKSApIHx8IChcclxuXHRcdFx0XHQoY2hlY2tDb250ZXh0ID0gY29udGV4dCkubm9kZVR5cGUgP1xyXG5cdFx0XHRcdFx0bWF0Y2hDb250ZXh0KCBlbGVtLCBjb250ZXh0LCB4bWwgKSA6XHJcblx0XHRcdFx0XHRtYXRjaEFueUNvbnRleHQoIGVsZW0sIGNvbnRleHQsIHhtbCApICk7XHJcblx0XHRcdC8vIEF2b2lkIGhhbmdpbmcgb250byBlbGVtZW50IChpc3N1ZSAjMjk5KVxyXG5cdFx0XHRjaGVja0NvbnRleHQgPSBudWxsO1xyXG5cdFx0XHRyZXR1cm4gcmV0O1xyXG5cdFx0fSBdO1xyXG5cclxuXHRmb3IgKCA7IGkgPCBsZW47IGkrKyApIHtcclxuXHRcdGlmICggKG1hdGNoZXIgPSBFeHByLnJlbGF0aXZlWyB0b2tlbnNbaV0udHlwZSBdKSApIHtcclxuXHRcdFx0bWF0Y2hlcnMgPSBbIGFkZENvbWJpbmF0b3IoZWxlbWVudE1hdGNoZXIoIG1hdGNoZXJzICksIG1hdGNoZXIpIF07XHJcblx0XHR9IGVsc2Uge1xyXG5cdFx0XHRtYXRjaGVyID0gRXhwci5maWx0ZXJbIHRva2Vuc1tpXS50eXBlIF0uYXBwbHkoIG51bGwsIHRva2Vuc1tpXS5tYXRjaGVzICk7XHJcblxyXG5cdFx0XHQvLyBSZXR1cm4gc3BlY2lhbCB1cG9uIHNlZWluZyBhIHBvc2l0aW9uYWwgbWF0Y2hlclxyXG5cdFx0XHRpZiAoIG1hdGNoZXJbIGV4cGFuZG8gXSApIHtcclxuXHRcdFx0XHQvLyBGaW5kIHRoZSBuZXh0IHJlbGF0aXZlIG9wZXJhdG9yIChpZiBhbnkpIGZvciBwcm9wZXIgaGFuZGxpbmdcclxuXHRcdFx0XHRqID0gKytpO1xyXG5cdFx0XHRcdGZvciAoIDsgaiA8IGxlbjsgaisrICkge1xyXG5cdFx0XHRcdFx0aWYgKCBFeHByLnJlbGF0aXZlWyB0b2tlbnNbal0udHlwZSBdICkge1xyXG5cdFx0XHRcdFx0XHRicmVhaztcclxuXHRcdFx0XHRcdH1cclxuXHRcdFx0XHR9XHJcblx0XHRcdFx0cmV0dXJuIHNldE1hdGNoZXIoXHJcblx0XHRcdFx0XHRpID4gMSAmJiBlbGVtZW50TWF0Y2hlciggbWF0Y2hlcnMgKSxcclxuXHRcdFx0XHRcdGkgPiAxICYmIHRvU2VsZWN0b3IoXHJcblx0XHRcdFx0XHRcdC8vIElmIHRoZSBwcmVjZWRpbmcgdG9rZW4gd2FzIGEgZGVzY2VuZGFudCBjb21iaW5hdG9yLCBpbnNlcnQgYW4gaW1wbGljaXQgYW55LWVsZW1lbnQgYCpgXHJcblx0XHRcdFx0XHRcdHRva2Vucy5zbGljZSggMCwgaSAtIDEgKS5jb25jYXQoeyB2YWx1ZTogdG9rZW5zWyBpIC0gMiBdLnR5cGUgPT09IFwiIFwiID8gXCIqXCIgOiBcIlwiIH0pXHJcblx0XHRcdFx0XHQpLnJlcGxhY2UoIHJ0cmltLCBcIiQxXCIgKSxcclxuXHRcdFx0XHRcdG1hdGNoZXIsXHJcblx0XHRcdFx0XHRpIDwgaiAmJiBtYXRjaGVyRnJvbVRva2VucyggdG9rZW5zLnNsaWNlKCBpLCBqICkgKSxcclxuXHRcdFx0XHRcdGogPCBsZW4gJiYgbWF0Y2hlckZyb21Ub2tlbnMoICh0b2tlbnMgPSB0b2tlbnMuc2xpY2UoIGogKSkgKSxcclxuXHRcdFx0XHRcdGogPCBsZW4gJiYgdG9TZWxlY3RvciggdG9rZW5zIClcclxuXHRcdFx0XHQpO1xyXG5cdFx0XHR9XHJcblx0XHRcdG1hdGNoZXJzLnB1c2goIG1hdGNoZXIgKTtcclxuXHRcdH1cclxuXHR9XHJcblxyXG5cdHJldHVybiBlbGVtZW50TWF0Y2hlciggbWF0Y2hlcnMgKTtcclxufVxyXG5cclxuZnVuY3Rpb24gbWF0Y2hlckZyb21Hcm91cE1hdGNoZXJzKCBlbGVtZW50TWF0Y2hlcnMsIHNldE1hdGNoZXJzICkge1xyXG5cdHZhciBieVNldCA9IHNldE1hdGNoZXJzLmxlbmd0aCA+IDAsXHJcblx0XHRieUVsZW1lbnQgPSBlbGVtZW50TWF0Y2hlcnMubGVuZ3RoID4gMCxcclxuXHRcdHN1cGVyTWF0Y2hlciA9IGZ1bmN0aW9uKCBzZWVkLCBjb250ZXh0LCB4bWwsIHJlc3VsdHMsIG91dGVybW9zdCApIHtcclxuXHRcdFx0dmFyIGVsZW0sIGosIG1hdGNoZXIsXHJcblx0XHRcdFx0bWF0Y2hlZENvdW50ID0gMCxcclxuXHRcdFx0XHRpID0gXCIwXCIsXHJcblx0XHRcdFx0dW5tYXRjaGVkID0gc2VlZCAmJiBbXSxcclxuXHRcdFx0XHRzZXRNYXRjaGVkID0gW10sXHJcblx0XHRcdFx0Y29udGV4dEJhY2t1cCA9IG91dGVybW9zdENvbnRleHQsXHJcblx0XHRcdFx0Ly8gV2UgbXVzdCBhbHdheXMgaGF2ZSBlaXRoZXIgc2VlZCBlbGVtZW50cyBvciBvdXRlcm1vc3QgY29udGV4dFxyXG5cdFx0XHRcdGVsZW1zID0gc2VlZCB8fCBieUVsZW1lbnQgJiYgRXhwci5maW5kW1wiVEFHXCJdKCBcIipcIiwgb3V0ZXJtb3N0ICksXHJcblx0XHRcdFx0Ly8gVXNlIGludGVnZXIgZGlycnVucyBpZmYgdGhpcyBpcyB0aGUgb3V0ZXJtb3N0IG1hdGNoZXJcclxuXHRcdFx0XHRkaXJydW5zVW5pcXVlID0gKGRpcnJ1bnMgKz0gY29udGV4dEJhY2t1cCA9PSBudWxsID8gMSA6IE1hdGgucmFuZG9tKCkgfHwgMC4xKSxcclxuXHRcdFx0XHRsZW4gPSBlbGVtcy5sZW5ndGg7XHJcblxyXG5cdFx0XHRpZiAoIG91dGVybW9zdCApIHtcclxuXHRcdFx0XHRvdXRlcm1vc3RDb250ZXh0ID0gY29udGV4dCA9PT0gZG9jdW1lbnQgfHwgY29udGV4dCB8fCBvdXRlcm1vc3Q7XHJcblx0XHRcdH1cclxuXHJcblx0XHRcdC8vIEFkZCBlbGVtZW50cyBwYXNzaW5nIGVsZW1lbnRNYXRjaGVycyBkaXJlY3RseSB0byByZXN1bHRzXHJcblx0XHRcdC8vIFN1cHBvcnQ6IElFPDksIFNhZmFyaVxyXG5cdFx0XHQvLyBUb2xlcmF0ZSBOb2RlTGlzdCBwcm9wZXJ0aWVzIChJRTogXCJsZW5ndGhcIjsgU2FmYXJpOiA8bnVtYmVyPikgbWF0Y2hpbmcgZWxlbWVudHMgYnkgaWRcclxuXHRcdFx0Zm9yICggOyBpICE9PSBsZW4gJiYgKGVsZW0gPSBlbGVtc1tpXSkgIT0gbnVsbDsgaSsrICkge1xyXG5cdFx0XHRcdGlmICggYnlFbGVtZW50ICYmIGVsZW0gKSB7XHJcblx0XHRcdFx0XHRqID0gMDtcclxuXHRcdFx0XHRcdGlmICggIWNvbnRleHQgJiYgZWxlbS5vd25lckRvY3VtZW50ICE9PSBkb2N1bWVudCApIHtcclxuXHRcdFx0XHRcdFx0c2V0RG9jdW1lbnQoIGVsZW0gKTtcclxuXHRcdFx0XHRcdFx0eG1sID0gIWRvY3VtZW50SXNIVE1MO1xyXG5cdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0d2hpbGUgKCAobWF0Y2hlciA9IGVsZW1lbnRNYXRjaGVyc1tqKytdKSApIHtcclxuXHRcdFx0XHRcdFx0aWYgKCBtYXRjaGVyKCBlbGVtLCBjb250ZXh0IHx8IGRvY3VtZW50LCB4bWwpICkge1xyXG5cdFx0XHRcdFx0XHRcdHJlc3VsdHMucHVzaCggZWxlbSApO1xyXG5cdFx0XHRcdFx0XHRcdGJyZWFrO1xyXG5cdFx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHRpZiAoIG91dGVybW9zdCApIHtcclxuXHRcdFx0XHRcdFx0ZGlycnVucyA9IGRpcnJ1bnNVbmlxdWU7XHJcblx0XHRcdFx0XHR9XHJcblx0XHRcdFx0fVxyXG5cclxuXHRcdFx0XHQvLyBUcmFjayB1bm1hdGNoZWQgZWxlbWVudHMgZm9yIHNldCBmaWx0ZXJzXHJcblx0XHRcdFx0aWYgKCBieVNldCApIHtcclxuXHRcdFx0XHRcdC8vIFRoZXkgd2lsbCBoYXZlIGdvbmUgdGhyb3VnaCBhbGwgcG9zc2libGUgbWF0Y2hlcnNcclxuXHRcdFx0XHRcdGlmICggKGVsZW0gPSAhbWF0Y2hlciAmJiBlbGVtKSApIHtcclxuXHRcdFx0XHRcdFx0bWF0Y2hlZENvdW50LS07XHJcblx0XHRcdFx0XHR9XHJcblxyXG5cdFx0XHRcdFx0Ly8gTGVuZ3RoZW4gdGhlIGFycmF5IGZvciBldmVyeSBlbGVtZW50LCBtYXRjaGVkIG9yIG5vdFxyXG5cdFx0XHRcdFx0aWYgKCBzZWVkICkge1xyXG5cdFx0XHRcdFx0XHR1bm1hdGNoZWQucHVzaCggZWxlbSApO1xyXG5cdFx0XHRcdFx0fVxyXG5cdFx0XHRcdH1cclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0Ly8gYGlgIGlzIG5vdyB0aGUgY291bnQgb2YgZWxlbWVudHMgdmlzaXRlZCBhYm92ZSwgYW5kIGFkZGluZyBpdCB0byBgbWF0Y2hlZENvdW50YFxyXG5cdFx0XHQvLyBtYWtlcyB0aGUgbGF0dGVyIG5vbm5lZ2F0aXZlLlxyXG5cdFx0XHRtYXRjaGVkQ291bnQgKz0gaTtcclxuXHJcblx0XHRcdC8vIEFwcGx5IHNldCBmaWx0ZXJzIHRvIHVubWF0Y2hlZCBlbGVtZW50c1xyXG5cdFx0XHQvLyBOT1RFOiBUaGlzIGNhbiBiZSBza2lwcGVkIGlmIHRoZXJlIGFyZSBubyB1bm1hdGNoZWQgZWxlbWVudHMgKGkuZS4sIGBtYXRjaGVkQ291bnRgXHJcblx0XHRcdC8vIGVxdWFscyBgaWApLCB1bmxlc3Mgd2UgZGlkbid0IHZpc2l0IF9hbnlfIGVsZW1lbnRzIGluIHRoZSBhYm92ZSBsb29wIGJlY2F1c2Ugd2UgaGF2ZVxyXG5cdFx0XHQvLyBubyBlbGVtZW50IG1hdGNoZXJzIGFuZCBubyBzZWVkLlxyXG5cdFx0XHQvLyBJbmNyZW1lbnRpbmcgYW4gaW5pdGlhbGx5LXN0cmluZyBcIjBcIiBgaWAgYWxsb3dzIGBpYCB0byByZW1haW4gYSBzdHJpbmcgb25seSBpbiB0aGF0XHJcblx0XHRcdC8vIGNhc2UsIHdoaWNoIHdpbGwgcmVzdWx0IGluIGEgXCIwMFwiIGBtYXRjaGVkQ291bnRgIHRoYXQgZGlmZmVycyBmcm9tIGBpYCBidXQgaXMgYWxzb1xyXG5cdFx0XHQvLyBudW1lcmljYWxseSB6ZXJvLlxyXG5cdFx0XHRpZiAoIGJ5U2V0ICYmIGkgIT09IG1hdGNoZWRDb3VudCApIHtcclxuXHRcdFx0XHRqID0gMDtcclxuXHRcdFx0XHR3aGlsZSAoIChtYXRjaGVyID0gc2V0TWF0Y2hlcnNbaisrXSkgKSB7XHJcblx0XHRcdFx0XHRtYXRjaGVyKCB1bm1hdGNoZWQsIHNldE1hdGNoZWQsIGNvbnRleHQsIHhtbCApO1xyXG5cdFx0XHRcdH1cclxuXHJcblx0XHRcdFx0aWYgKCBzZWVkICkge1xyXG5cdFx0XHRcdFx0Ly8gUmVpbnRlZ3JhdGUgZWxlbWVudCBtYXRjaGVzIHRvIGVsaW1pbmF0ZSB0aGUgbmVlZCBmb3Igc29ydGluZ1xyXG5cdFx0XHRcdFx0aWYgKCBtYXRjaGVkQ291bnQgPiAwICkge1xyXG5cdFx0XHRcdFx0XHR3aGlsZSAoIGktLSApIHtcclxuXHRcdFx0XHRcdFx0XHRpZiAoICEodW5tYXRjaGVkW2ldIHx8IHNldE1hdGNoZWRbaV0pICkge1xyXG5cdFx0XHRcdFx0XHRcdFx0c2V0TWF0Y2hlZFtpXSA9IHBvcC5jYWxsKCByZXN1bHRzICk7XHJcblx0XHRcdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHR9XHJcblxyXG5cdFx0XHRcdFx0Ly8gRGlzY2FyZCBpbmRleCBwbGFjZWhvbGRlciB2YWx1ZXMgdG8gZ2V0IG9ubHkgYWN0dWFsIG1hdGNoZXNcclxuXHRcdFx0XHRcdHNldE1hdGNoZWQgPSBjb25kZW5zZSggc2V0TWF0Y2hlZCApO1xyXG5cdFx0XHRcdH1cclxuXHJcblx0XHRcdFx0Ly8gQWRkIG1hdGNoZXMgdG8gcmVzdWx0c1xyXG5cdFx0XHRcdHB1c2guYXBwbHkoIHJlc3VsdHMsIHNldE1hdGNoZWQgKTtcclxuXHJcblx0XHRcdFx0Ly8gU2VlZGxlc3Mgc2V0IG1hdGNoZXMgc3VjY2VlZGluZyBtdWx0aXBsZSBzdWNjZXNzZnVsIG1hdGNoZXJzIHN0aXB1bGF0ZSBzb3J0aW5nXHJcblx0XHRcdFx0aWYgKCBvdXRlcm1vc3QgJiYgIXNlZWQgJiYgc2V0TWF0Y2hlZC5sZW5ndGggPiAwICYmXHJcblx0XHRcdFx0XHQoIG1hdGNoZWRDb3VudCArIHNldE1hdGNoZXJzLmxlbmd0aCApID4gMSApIHtcclxuXHJcblx0XHRcdFx0XHRTaXp6bGUudW5pcXVlU29ydCggcmVzdWx0cyApO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0Ly8gT3ZlcnJpZGUgbWFuaXB1bGF0aW9uIG9mIGdsb2JhbHMgYnkgbmVzdGVkIG1hdGNoZXJzXHJcblx0XHRcdGlmICggb3V0ZXJtb3N0ICkge1xyXG5cdFx0XHRcdGRpcnJ1bnMgPSBkaXJydW5zVW5pcXVlO1xyXG5cdFx0XHRcdG91dGVybW9zdENvbnRleHQgPSBjb250ZXh0QmFja3VwO1xyXG5cdFx0XHR9XHJcblxyXG5cdFx0XHRyZXR1cm4gdW5tYXRjaGVkO1xyXG5cdFx0fTtcclxuXHJcblx0cmV0dXJuIGJ5U2V0ID9cclxuXHRcdG1hcmtGdW5jdGlvbiggc3VwZXJNYXRjaGVyICkgOlxyXG5cdFx0c3VwZXJNYXRjaGVyO1xyXG59XHJcblxyXG5jb21waWxlID0gU2l6emxlLmNvbXBpbGUgPSBmdW5jdGlvbiggc2VsZWN0b3IsIG1hdGNoIC8qIEludGVybmFsIFVzZSBPbmx5ICovICkge1xyXG5cdHZhciBpLFxyXG5cdFx0c2V0TWF0Y2hlcnMgPSBbXSxcclxuXHRcdGVsZW1lbnRNYXRjaGVycyA9IFtdLFxyXG5cdFx0Y2FjaGVkID0gY29tcGlsZXJDYWNoZVsgc2VsZWN0b3IgKyBcIiBcIiBdO1xyXG5cclxuXHRpZiAoICFjYWNoZWQgKSB7XHJcblx0XHQvLyBHZW5lcmF0ZSBhIGZ1bmN0aW9uIG9mIHJlY3Vyc2l2ZSBmdW5jdGlvbnMgdGhhdCBjYW4gYmUgdXNlZCB0byBjaGVjayBlYWNoIGVsZW1lbnRcclxuXHRcdGlmICggIW1hdGNoICkge1xyXG5cdFx0XHRtYXRjaCA9IHRva2VuaXplKCBzZWxlY3RvciApO1xyXG5cdFx0fVxyXG5cdFx0aSA9IG1hdGNoLmxlbmd0aDtcclxuXHRcdHdoaWxlICggaS0tICkge1xyXG5cdFx0XHRjYWNoZWQgPSBtYXRjaGVyRnJvbVRva2VucyggbWF0Y2hbaV0gKTtcclxuXHRcdFx0aWYgKCBjYWNoZWRbIGV4cGFuZG8gXSApIHtcclxuXHRcdFx0XHRzZXRNYXRjaGVycy5wdXNoKCBjYWNoZWQgKTtcclxuXHRcdFx0fSBlbHNlIHtcclxuXHRcdFx0XHRlbGVtZW50TWF0Y2hlcnMucHVzaCggY2FjaGVkICk7XHJcblx0XHRcdH1cclxuXHRcdH1cclxuXHJcblx0XHQvLyBDYWNoZSB0aGUgY29tcGlsZWQgZnVuY3Rpb25cclxuXHRcdGNhY2hlZCA9IGNvbXBpbGVyQ2FjaGUoIHNlbGVjdG9yLCBtYXRjaGVyRnJvbUdyb3VwTWF0Y2hlcnMoIGVsZW1lbnRNYXRjaGVycywgc2V0TWF0Y2hlcnMgKSApO1xyXG5cclxuXHRcdC8vIFNhdmUgc2VsZWN0b3IgYW5kIHRva2VuaXphdGlvblxyXG5cdFx0Y2FjaGVkLnNlbGVjdG9yID0gc2VsZWN0b3I7XHJcblx0fVxyXG5cdHJldHVybiBjYWNoZWQ7XHJcbn07XHJcblxyXG4vKipcclxuICogQSBsb3ctbGV2ZWwgc2VsZWN0aW9uIGZ1bmN0aW9uIHRoYXQgd29ya3Mgd2l0aCBTaXp6bGUncyBjb21waWxlZFxyXG4gKiAgc2VsZWN0b3IgZnVuY3Rpb25zXHJcbiAqIEBwYXJhbSB7U3RyaW5nfEZ1bmN0aW9ufSBzZWxlY3RvciBBIHNlbGVjdG9yIG9yIGEgcHJlLWNvbXBpbGVkXHJcbiAqICBzZWxlY3RvciBmdW5jdGlvbiBidWlsdCB3aXRoIFNpenpsZS5jb21waWxlXHJcbiAqIEBwYXJhbSB7RWxlbWVudH0gY29udGV4dFxyXG4gKiBAcGFyYW0ge0FycmF5fSBbcmVzdWx0c11cclxuICogQHBhcmFtIHtBcnJheX0gW3NlZWRdIEEgc2V0IG9mIGVsZW1lbnRzIHRvIG1hdGNoIGFnYWluc3RcclxuICovXHJcbnNlbGVjdCA9IFNpenpsZS5zZWxlY3QgPSBmdW5jdGlvbiggc2VsZWN0b3IsIGNvbnRleHQsIHJlc3VsdHMsIHNlZWQgKSB7XHJcblx0dmFyIGksIHRva2VucywgdG9rZW4sIHR5cGUsIGZpbmQsXHJcblx0XHRjb21waWxlZCA9IHR5cGVvZiBzZWxlY3RvciA9PT0gXCJmdW5jdGlvblwiICYmIHNlbGVjdG9yLFxyXG5cdFx0bWF0Y2ggPSAhc2VlZCAmJiB0b2tlbml6ZSggKHNlbGVjdG9yID0gY29tcGlsZWQuc2VsZWN0b3IgfHwgc2VsZWN0b3IpICk7XHJcblxyXG5cdHJlc3VsdHMgPSByZXN1bHRzIHx8IFtdO1xyXG5cclxuXHQvLyBUcnkgdG8gbWluaW1pemUgb3BlcmF0aW9ucyBpZiB0aGVyZSBpcyBvbmx5IG9uZSBzZWxlY3RvciBpbiB0aGUgbGlzdCBhbmQgbm8gc2VlZFxyXG5cdC8vICh0aGUgbGF0dGVyIG9mIHdoaWNoIGd1YXJhbnRlZXMgdXMgY29udGV4dClcclxuXHRpZiAoIG1hdGNoLmxlbmd0aCA9PT0gMSApIHtcclxuXHJcblx0XHQvLyBSZWR1Y2UgY29udGV4dCBpZiB0aGUgbGVhZGluZyBjb21wb3VuZCBzZWxlY3RvciBpcyBhbiBJRFxyXG5cdFx0dG9rZW5zID0gbWF0Y2hbMF0gPSBtYXRjaFswXS5zbGljZSggMCApO1xyXG5cdFx0aWYgKCB0b2tlbnMubGVuZ3RoID4gMiAmJiAodG9rZW4gPSB0b2tlbnNbMF0pLnR5cGUgPT09IFwiSURcIiAmJlxyXG5cdFx0XHRcdHN1cHBvcnQuZ2V0QnlJZCAmJiBjb250ZXh0Lm5vZGVUeXBlID09PSA5ICYmIGRvY3VtZW50SXNIVE1MICYmXHJcblx0XHRcdFx0RXhwci5yZWxhdGl2ZVsgdG9rZW5zWzFdLnR5cGUgXSApIHtcclxuXHJcblx0XHRcdGNvbnRleHQgPSAoIEV4cHIuZmluZFtcIklEXCJdKCB0b2tlbi5tYXRjaGVzWzBdLnJlcGxhY2UocnVuZXNjYXBlLCBmdW5lc2NhcGUpLCBjb250ZXh0ICkgfHwgW10gKVswXTtcclxuXHRcdFx0aWYgKCAhY29udGV4dCApIHtcclxuXHRcdFx0XHRyZXR1cm4gcmVzdWx0cztcclxuXHJcblx0XHRcdC8vIFByZWNvbXBpbGVkIG1hdGNoZXJzIHdpbGwgc3RpbGwgdmVyaWZ5IGFuY2VzdHJ5LCBzbyBzdGVwIHVwIGEgbGV2ZWxcclxuXHRcdFx0fSBlbHNlIGlmICggY29tcGlsZWQgKSB7XHJcblx0XHRcdFx0Y29udGV4dCA9IGNvbnRleHQucGFyZW50Tm9kZTtcclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0c2VsZWN0b3IgPSBzZWxlY3Rvci5zbGljZSggdG9rZW5zLnNoaWZ0KCkudmFsdWUubGVuZ3RoICk7XHJcblx0XHR9XHJcblxyXG5cdFx0Ly8gRmV0Y2ggYSBzZWVkIHNldCBmb3IgcmlnaHQtdG8tbGVmdCBtYXRjaGluZ1xyXG5cdFx0aSA9IG1hdGNoRXhwcltcIm5lZWRzQ29udGV4dFwiXS50ZXN0KCBzZWxlY3RvciApID8gMCA6IHRva2Vucy5sZW5ndGg7XHJcblx0XHR3aGlsZSAoIGktLSApIHtcclxuXHRcdFx0dG9rZW4gPSB0b2tlbnNbaV07XHJcblxyXG5cdFx0XHQvLyBBYm9ydCBpZiB3ZSBoaXQgYSBjb21iaW5hdG9yXHJcblx0XHRcdGlmICggRXhwci5yZWxhdGl2ZVsgKHR5cGUgPSB0b2tlbi50eXBlKSBdICkge1xyXG5cdFx0XHRcdGJyZWFrO1xyXG5cdFx0XHR9XHJcblx0XHRcdGlmICggKGZpbmQgPSBFeHByLmZpbmRbIHR5cGUgXSkgKSB7XHJcblx0XHRcdFx0Ly8gU2VhcmNoLCBleHBhbmRpbmcgY29udGV4dCBmb3IgbGVhZGluZyBzaWJsaW5nIGNvbWJpbmF0b3JzXHJcblx0XHRcdFx0aWYgKCAoc2VlZCA9IGZpbmQoXHJcblx0XHRcdFx0XHR0b2tlbi5tYXRjaGVzWzBdLnJlcGxhY2UoIHJ1bmVzY2FwZSwgZnVuZXNjYXBlICksXHJcblx0XHRcdFx0XHRyc2libGluZy50ZXN0KCB0b2tlbnNbMF0udHlwZSApICYmIHRlc3RDb250ZXh0KCBjb250ZXh0LnBhcmVudE5vZGUgKSB8fCBjb250ZXh0XHJcblx0XHRcdFx0KSkgKSB7XHJcblxyXG5cdFx0XHRcdFx0Ly8gSWYgc2VlZCBpcyBlbXB0eSBvciBubyB0b2tlbnMgcmVtYWluLCB3ZSBjYW4gcmV0dXJuIGVhcmx5XHJcblx0XHRcdFx0XHR0b2tlbnMuc3BsaWNlKCBpLCAxICk7XHJcblx0XHRcdFx0XHRzZWxlY3RvciA9IHNlZWQubGVuZ3RoICYmIHRvU2VsZWN0b3IoIHRva2VucyApO1xyXG5cdFx0XHRcdFx0aWYgKCAhc2VsZWN0b3IgKSB7XHJcblx0XHRcdFx0XHRcdHB1c2guYXBwbHkoIHJlc3VsdHMsIHNlZWQgKTtcclxuXHRcdFx0XHRcdFx0cmV0dXJuIHJlc3VsdHM7XHJcblx0XHRcdFx0XHR9XHJcblxyXG5cdFx0XHRcdFx0YnJlYWs7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9XHJcblx0XHR9XHJcblx0fVxyXG5cclxuXHQvLyBDb21waWxlIGFuZCBleGVjdXRlIGEgZmlsdGVyaW5nIGZ1bmN0aW9uIGlmIG9uZSBpcyBub3QgcHJvdmlkZWRcclxuXHQvLyBQcm92aWRlIGBtYXRjaGAgdG8gYXZvaWQgcmV0b2tlbml6YXRpb24gaWYgd2UgbW9kaWZpZWQgdGhlIHNlbGVjdG9yIGFib3ZlXHJcblx0KCBjb21waWxlZCB8fCBjb21waWxlKCBzZWxlY3RvciwgbWF0Y2ggKSApKFxyXG5cdFx0c2VlZCxcclxuXHRcdGNvbnRleHQsXHJcblx0XHQhZG9jdW1lbnRJc0hUTUwsXHJcblx0XHRyZXN1bHRzLFxyXG5cdFx0IWNvbnRleHQgfHwgcnNpYmxpbmcudGVzdCggc2VsZWN0b3IgKSAmJiB0ZXN0Q29udGV4dCggY29udGV4dC5wYXJlbnROb2RlICkgfHwgY29udGV4dFxyXG5cdCk7XHJcblx0cmV0dXJuIHJlc3VsdHM7XHJcbn07XHJcblxyXG4vLyBPbmUtdGltZSBhc3NpZ25tZW50c1xyXG5cclxuLy8gU29ydCBzdGFiaWxpdHlcclxuc3VwcG9ydC5zb3J0U3RhYmxlID0gZXhwYW5kby5zcGxpdChcIlwiKS5zb3J0KCBzb3J0T3JkZXIgKS5qb2luKFwiXCIpID09PSBleHBhbmRvO1xyXG5cclxuLy8gU3VwcG9ydDogQ2hyb21lIDE0LTM1K1xyXG4vLyBBbHdheXMgYXNzdW1lIGR1cGxpY2F0ZXMgaWYgdGhleSBhcmVuJ3QgcGFzc2VkIHRvIHRoZSBjb21wYXJpc29uIGZ1bmN0aW9uXHJcbnN1cHBvcnQuZGV0ZWN0RHVwbGljYXRlcyA9ICEhaGFzRHVwbGljYXRlO1xyXG5cclxuLy8gSW5pdGlhbGl6ZSBhZ2FpbnN0IHRoZSBkZWZhdWx0IGRvY3VtZW50XHJcbnNldERvY3VtZW50KCk7XHJcblxyXG4vLyBTdXBwb3J0OiBXZWJraXQ8NTM3LjMyIC0gU2FmYXJpIDYuMC4zL0Nocm9tZSAyNSAoZml4ZWQgaW4gQ2hyb21lIDI3KVxyXG4vLyBEZXRhY2hlZCBub2RlcyBjb25mb3VuZGluZ2x5IGZvbGxvdyAqZWFjaCBvdGhlcipcclxuc3VwcG9ydC5zb3J0RGV0YWNoZWQgPSBhc3NlcnQoZnVuY3Rpb24oIGRpdjEgKSB7XHJcblx0Ly8gU2hvdWxkIHJldHVybiAxLCBidXQgcmV0dXJucyA0IChmb2xsb3dpbmcpXHJcblx0cmV0dXJuIGRpdjEuY29tcGFyZURvY3VtZW50UG9zaXRpb24oIGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIikgKSAmIDE7XHJcbn0pO1xyXG5cclxuLy8gU3VwcG9ydDogSUU8OFxyXG4vLyBQcmV2ZW50IGF0dHJpYnV0ZS9wcm9wZXJ0eSBcImludGVycG9sYXRpb25cIlxyXG4vLyBodHRwOi8vbXNkbi5taWNyb3NvZnQuY29tL2VuLXVzL2xpYnJhcnkvbXM1MzY0MjklMjhWUy44NSUyOS5hc3B4XHJcbmlmICggIWFzc2VydChmdW5jdGlvbiggZGl2ICkge1xyXG5cdGRpdi5pbm5lckhUTUwgPSBcIjxhIGhyZWY9JyMnPjwvYT5cIjtcclxuXHRyZXR1cm4gZGl2LmZpcnN0Q2hpbGQuZ2V0QXR0cmlidXRlKFwiaHJlZlwiKSA9PT0gXCIjXCIgO1xyXG59KSApIHtcclxuXHRhZGRIYW5kbGUoIFwidHlwZXxocmVmfGhlaWdodHx3aWR0aFwiLCBmdW5jdGlvbiggZWxlbSwgbmFtZSwgaXNYTUwgKSB7XHJcblx0XHRpZiAoICFpc1hNTCApIHtcclxuXHRcdFx0cmV0dXJuIGVsZW0uZ2V0QXR0cmlidXRlKCBuYW1lLCBuYW1lLnRvTG93ZXJDYXNlKCkgPT09IFwidHlwZVwiID8gMSA6IDIgKTtcclxuXHRcdH1cclxuXHR9KTtcclxufVxyXG5cclxuLy8gU3VwcG9ydDogSUU8OVxyXG4vLyBVc2UgZGVmYXVsdFZhbHVlIGluIHBsYWNlIG9mIGdldEF0dHJpYnV0ZShcInZhbHVlXCIpXHJcbmlmICggIXN1cHBvcnQuYXR0cmlidXRlcyB8fCAhYXNzZXJ0KGZ1bmN0aW9uKCBkaXYgKSB7XHJcblx0ZGl2LmlubmVySFRNTCA9IFwiPGlucHV0Lz5cIjtcclxuXHRkaXYuZmlyc3RDaGlsZC5zZXRBdHRyaWJ1dGUoIFwidmFsdWVcIiwgXCJcIiApO1xyXG5cdHJldHVybiBkaXYuZmlyc3RDaGlsZC5nZXRBdHRyaWJ1dGUoIFwidmFsdWVcIiApID09PSBcIlwiO1xyXG59KSApIHtcclxuXHRhZGRIYW5kbGUoIFwidmFsdWVcIiwgZnVuY3Rpb24oIGVsZW0sIG5hbWUsIGlzWE1MICkge1xyXG5cdFx0aWYgKCAhaXNYTUwgJiYgZWxlbS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpID09PSBcImlucHV0XCIgKSB7XHJcblx0XHRcdHJldHVybiBlbGVtLmRlZmF1bHRWYWx1ZTtcclxuXHRcdH1cclxuXHR9KTtcclxufVxyXG5cclxuLy8gU3VwcG9ydDogSUU8OVxyXG4vLyBVc2UgZ2V0QXR0cmlidXRlTm9kZSB0byBmZXRjaCBib29sZWFucyB3aGVuIGdldEF0dHJpYnV0ZSBsaWVzXHJcbmlmICggIWFzc2VydChmdW5jdGlvbiggZGl2ICkge1xyXG5cdHJldHVybiBkaXYuZ2V0QXR0cmlidXRlKFwiZGlzYWJsZWRcIikgPT0gbnVsbDtcclxufSkgKSB7XHJcblx0YWRkSGFuZGxlKCBib29sZWFucywgZnVuY3Rpb24oIGVsZW0sIG5hbWUsIGlzWE1MICkge1xyXG5cdFx0dmFyIHZhbDtcclxuXHRcdGlmICggIWlzWE1MICkge1xyXG5cdFx0XHRyZXR1cm4gZWxlbVsgbmFtZSBdID09PSB0cnVlID8gbmFtZS50b0xvd2VyQ2FzZSgpIDpcclxuXHRcdFx0XHRcdCh2YWwgPSBlbGVtLmdldEF0dHJpYnV0ZU5vZGUoIG5hbWUgKSkgJiYgdmFsLnNwZWNpZmllZCA/XHJcblx0XHRcdFx0XHR2YWwudmFsdWUgOlxyXG5cdFx0XHRcdG51bGw7XHJcblx0XHR9XHJcblx0fSk7XHJcbn1cclxuXHJcbnJldHVybiBTaXp6bGU7XHJcblxyXG59KSggd2luZG93ICk7XHJcblxyXG5cclxuXHJcbmpRdWVyeS5maW5kID0gU2l6emxlO1xyXG5qUXVlcnkuZXhwciA9IFNpenpsZS5zZWxlY3RvcnM7XHJcbmpRdWVyeS5leHByWyBcIjpcIiBdID0galF1ZXJ5LmV4cHIucHNldWRvcztcclxualF1ZXJ5LnVuaXF1ZVNvcnQgPSBqUXVlcnkudW5pcXVlID0gU2l6emxlLnVuaXF1ZVNvcnQ7XHJcbmpRdWVyeS50ZXh0ID0gU2l6emxlLmdldFRleHQ7XHJcbmpRdWVyeS5pc1hNTERvYyA9IFNpenpsZS5pc1hNTDtcclxualF1ZXJ5LmNvbnRhaW5zID0gU2l6emxlLmNvbnRhaW5zO1xyXG5cclxuXHJcblxyXG52YXIgZGlyID0gZnVuY3Rpb24oIGVsZW0sIGRpciwgdW50aWwgKSB7XHJcblx0dmFyIG1hdGNoZWQgPSBbXSxcclxuXHRcdHRydW5jYXRlID0gdW50aWwgIT09IHVuZGVmaW5lZDtcclxuXHJcblx0d2hpbGUgKCAoIGVsZW0gPSBlbGVtWyBkaXIgXSApICYmIGVsZW0ubm9kZVR5cGUgIT09IDkgKSB7XHJcblx0XHRpZiAoIGVsZW0ubm9kZVR5cGUgPT09IDEgKSB7XHJcblx0XHRcdGlmICggdHJ1bmNhdGUgJiYgalF1ZXJ5KCBlbGVtICkuaXMoIHVudGlsICkgKSB7XHJcblx0XHRcdFx0YnJlYWs7XHJcblx0XHRcdH1cclxuXHRcdFx0bWF0Y2hlZC5wdXNoKCBlbGVtICk7XHJcblx0XHR9XHJcblx0fVxyXG5cdHJldHVybiBtYXRjaGVkO1xyXG59O1xyXG5cclxuXHJcbnZhciBzaWJsaW5ncyA9IGZ1bmN0aW9uKCBuLCBlbGVtICkge1xyXG5cdHZhciBtYXRjaGVkID0gW107XHJcblxyXG5cdGZvciAoIDsgbjsgbiA9IG4ubmV4dFNpYmxpbmcgKSB7XHJcblx0XHRpZiAoIG4ubm9kZVR5cGUgPT09IDEgJiYgbiAhPT0gZWxlbSApIHtcclxuXHRcdFx0bWF0Y2hlZC5wdXNoKCBuICk7XHJcblx0XHR9XHJcblx0fVxyXG5cclxuXHRyZXR1cm4gbWF0Y2hlZDtcclxufTtcclxuXHJcblxyXG52YXIgcm5lZWRzQ29udGV4dCA9IGpRdWVyeS5leHByLm1hdGNoLm5lZWRzQ29udGV4dDtcclxuXHJcbnZhciByc2luZ2xlVGFnID0gKCAvXjwoW1xcdy1dKylcXHMqXFwvPz4oPzo8XFwvXFwxPnwpJC8gKTtcclxuXHJcblxyXG5cclxudmFyIHJpc1NpbXBsZSA9IC9eLlteOiNcXFtcXC4sXSokLztcclxuXHJcbi8vIEltcGxlbWVudCB0aGUgaWRlbnRpY2FsIGZ1bmN0aW9uYWxpdHkgZm9yIGZpbHRlciBhbmQgbm90XHJcbmZ1bmN0aW9uIHdpbm5vdyggZWxlbWVudHMsIHF1YWxpZmllciwgbm90ICkge1xyXG5cdGlmICggalF1ZXJ5LmlzRnVuY3Rpb24oIHF1YWxpZmllciApICkge1xyXG5cdFx0cmV0dXJuIGpRdWVyeS5ncmVwKCBlbGVtZW50cywgZnVuY3Rpb24oIGVsZW0sIGkgKSB7XHJcblx0XHRcdC8qIGpzaGludCAtVzAxOCAqL1xyXG5cdFx0XHRyZXR1cm4gISFxdWFsaWZpZXIuY2FsbCggZWxlbSwgaSwgZWxlbSApICE9PSBub3Q7XHJcblx0XHR9ICk7XHJcblxyXG5cdH1cclxuXHJcblx0aWYgKCBxdWFsaWZpZXIubm9kZVR5cGUgKSB7XHJcblx0XHRyZXR1cm4galF1ZXJ5LmdyZXAoIGVsZW1lbnRzLCBmdW5jdGlvbiggZWxlbSApIHtcclxuXHRcdFx0cmV0dXJuICggZWxlbSA9PT0gcXVhbGlmaWVyICkgIT09IG5vdDtcclxuXHRcdH0gKTtcclxuXHJcblx0fVxyXG5cclxuXHRpZiAoIHR5cGVvZiBxdWFsaWZpZXIgPT09IFwic3RyaW5nXCIgKSB7XHJcblx0XHRpZiAoIHJpc1NpbXBsZS50ZXN0KCBxdWFsaWZpZXIgKSApIHtcclxuXHRcdFx0cmV0dXJuIGpRdWVyeS5maWx0ZXIoIHF1YWxpZmllciwgZWxlbWVudHMsIG5vdCApO1xyXG5cdFx0fVxyXG5cclxuXHRcdHF1YWxpZmllciA9IGpRdWVyeS5maWx0ZXIoIHF1YWxpZmllciwgZWxlbWVudHMgKTtcclxuXHR9XHJcblxyXG5cdHJldHVybiBqUXVlcnkuZ3JlcCggZWxlbWVudHMsIGZ1bmN0aW9uKCBlbGVtICkge1xyXG5cdFx0cmV0dXJuICggaW5kZXhPZi5jYWxsKCBxdWFsaWZpZXIsIGVsZW0gKSA+IC0xICkgIT09IG5vdDtcclxuXHR9ICk7XHJcbn1cclxuXHJcbmpRdWVyeS5maWx0ZXIgPSBmdW5jdGlvbiggZXhwciwgZWxlbXMsIG5vdCApIHtcclxuXHR2YXIgZWxlbSA9IGVsZW1zWyAwIF07XHJcblxyXG5cdGlmICggbm90ICkge1xyXG5cdFx0ZXhwciA9IFwiOm5vdChcIiArIGV4cHIgKyBcIilcIjtcclxuXHR9XHJcblxyXG5cdHJldHVybiBlbGVtcy5sZW5ndGggPT09IDEgJiYgZWxlbS5ub2RlVHlwZSA9PT0gMSA/XHJcblx0XHRqUXVlcnkuZmluZC5tYXRjaGVzU2VsZWN0b3IoIGVsZW0sIGV4cHIgKSA/IFsgZWxlbSBdIDogW10gOlxyXG5cdFx0alF1ZXJ5LmZpbmQubWF0Y2hlcyggZXhwciwgalF1ZXJ5LmdyZXAoIGVsZW1zLCBmdW5jdGlvbiggZWxlbSApIHtcclxuXHRcdFx0cmV0dXJuIGVsZW0ubm9kZVR5cGUgPT09IDE7XHJcblx0XHR9ICkgKTtcclxufTtcclxuXHJcbmpRdWVyeS5mbi5leHRlbmQoIHtcclxuXHRmaW5kOiBmdW5jdGlvbiggc2VsZWN0b3IgKSB7XHJcblx0XHR2YXIgaSxcclxuXHRcdFx0bGVuID0gdGhpcy5sZW5ndGgsXHJcblx0XHRcdHJldCA9IFtdLFxyXG5cdFx0XHRzZWxmID0gdGhpcztcclxuXHJcblx0XHRpZiAoIHR5cGVvZiBzZWxlY3RvciAhPT0gXCJzdHJpbmdcIiApIHtcclxuXHRcdFx0cmV0dXJuIHRoaXMucHVzaFN0YWNrKCBqUXVlcnkoIHNlbGVjdG9yICkuZmlsdGVyKCBmdW5jdGlvbigpIHtcclxuXHRcdFx0XHRmb3IgKCBpID0gMDsgaSA8IGxlbjsgaSsrICkge1xyXG5cdFx0XHRcdFx0aWYgKCBqUXVlcnkuY29udGFpbnMoIHNlbGZbIGkgXSwgdGhpcyApICkge1xyXG5cdFx0XHRcdFx0XHRyZXR1cm4gdHJ1ZTtcclxuXHRcdFx0XHRcdH1cclxuXHRcdFx0XHR9XHJcblx0XHRcdH0gKSApO1xyXG5cdFx0fVxyXG5cclxuXHRcdGZvciAoIGkgPSAwOyBpIDwgbGVuOyBpKysgKSB7XHJcblx0XHRcdGpRdWVyeS5maW5kKCBzZWxlY3Rvciwgc2VsZlsgaSBdLCByZXQgKTtcclxuXHRcdH1cclxuXHJcblx0XHQvLyBOZWVkZWQgYmVjYXVzZSAkKCBzZWxlY3RvciwgY29udGV4dCApIGJlY29tZXMgJCggY29udGV4dCApLmZpbmQoIHNlbGVjdG9yIClcclxuXHRcdHJldCA9IHRoaXMucHVzaFN0YWNrKCBsZW4gPiAxID8galF1ZXJ5LnVuaXF1ZSggcmV0ICkgOiByZXQgKTtcclxuXHRcdHJldC5zZWxlY3RvciA9IHRoaXMuc2VsZWN0b3IgPyB0aGlzLnNlbGVjdG9yICsgXCIgXCIgKyBzZWxlY3RvciA6IHNlbGVjdG9yO1xyXG5cdFx0cmV0dXJuIHJldDtcclxuXHR9LFxyXG5cdGZpbHRlcjogZnVuY3Rpb24oIHNlbGVjdG9yICkge1xyXG5cdFx0cmV0dXJuIHRoaXMucHVzaFN0YWNrKCB3aW5ub3coIHRoaXMsIHNlbGVjdG9yIHx8IFtdLCBmYWxzZSApICk7XHJcblx0fSxcclxuXHRub3Q6IGZ1bmN0aW9uKCBzZWxlY3RvciApIHtcclxuXHRcdHJldHVybiB0aGlzLnB1c2hTdGFjayggd2lubm93KCB0aGlzLCBzZWxlY3RvciB8fCBbXSwgdHJ1ZSApICk7XHJcblx0fSxcclxuXHRpczogZnVuY3Rpb24oIHNlbGVjdG9yICkge1xyXG5cdFx0cmV0dXJuICEhd2lubm93KFxyXG5cdFx0XHR0aGlzLFxyXG5cclxuXHRcdFx0Ly8gSWYgdGhpcyBpcyBhIHBvc2l0aW9uYWwvcmVsYXRpdmUgc2VsZWN0b3IsIGNoZWNrIG1lbWJlcnNoaXAgaW4gdGhlIHJldHVybmVkIHNldFxyXG5cdFx0XHQvLyBzbyAkKFwicDpmaXJzdFwiKS5pcyhcInA6bGFzdFwiKSB3b24ndCByZXR1cm4gdHJ1ZSBmb3IgYSBkb2Mgd2l0aCB0d28gXCJwXCIuXHJcblx0XHRcdHR5cGVvZiBzZWxlY3RvciA9PT0gXCJzdHJpbmdcIiAmJiBybmVlZHNDb250ZXh0LnRlc3QoIHNlbGVjdG9yICkgP1xyXG5cdFx0XHRcdGpRdWVyeSggc2VsZWN0b3IgKSA6XHJcblx0XHRcdFx0c2VsZWN0b3IgfHwgW10sXHJcblx0XHRcdGZhbHNlXHJcblx0XHQpLmxlbmd0aDtcclxuXHR9XHJcbn0gKTtcclxuXHJcblxyXG4vLyBJbml0aWFsaXplIGEgalF1ZXJ5IG9iamVjdFxyXG5cclxuXHJcbi8vIEEgY2VudHJhbCByZWZlcmVuY2UgdG8gdGhlIHJvb3QgalF1ZXJ5KGRvY3VtZW50KVxyXG52YXIgcm9vdGpRdWVyeSxcclxuXHJcblx0Ly8gQSBzaW1wbGUgd2F5IHRvIGNoZWNrIGZvciBIVE1MIHN0cmluZ3NcclxuXHQvLyBQcmlvcml0aXplICNpZCBvdmVyIDx0YWc+IHRvIGF2b2lkIFhTUyB2aWEgbG9jYXRpb24uaGFzaCAoIzk1MjEpXHJcblx0Ly8gU3RyaWN0IEhUTUwgcmVjb2duaXRpb24gKCMxMTI5MDogbXVzdCBzdGFydCB3aXRoIDwpXHJcblx0cnF1aWNrRXhwciA9IC9eKD86XFxzKig8W1xcd1xcV10rPilbXj5dKnwjKFtcXHctXSopKSQvLFxyXG5cclxuXHRpbml0ID0galF1ZXJ5LmZuLmluaXQgPSBmdW5jdGlvbiggc2VsZWN0b3IsIGNvbnRleHQsIHJvb3QgKSB7XHJcblx0XHR2YXIgbWF0Y2gsIGVsZW07XHJcblxyXG5cdFx0Ly8gSEFORExFOiAkKFwiXCIpLCAkKG51bGwpLCAkKHVuZGVmaW5lZCksICQoZmFsc2UpXHJcblx0XHRpZiAoICFzZWxlY3RvciApIHtcclxuXHRcdFx0cmV0dXJuIHRoaXM7XHJcblx0XHR9XHJcblxyXG5cdFx0Ly8gTWV0aG9kIGluaXQoKSBhY2NlcHRzIGFuIGFsdGVybmF0ZSByb290alF1ZXJ5XHJcblx0XHQvLyBzbyBtaWdyYXRlIGNhbiBzdXBwb3J0IGpRdWVyeS5zdWIgKGdoLTIxMDEpXHJcblx0XHRyb290ID0gcm9vdCB8fCByb290alF1ZXJ5O1xyXG5cclxuXHRcdC8vIEhhbmRsZSBIVE1MIHN0cmluZ3NcclxuXHRcdGlmICggdHlwZW9mIHNlbGVjdG9yID09PSBcInN0cmluZ1wiICkge1xyXG5cdFx0XHRpZiAoIHNlbGVjdG9yWyAwIF0gPT09IFwiPFwiICYmXHJcblx0XHRcdFx0c2VsZWN0b3JbIHNlbGVjdG9yLmxlbmd0aCAtIDEgXSA9PT0gXCI+XCIgJiZcclxuXHRcdFx0XHRzZWxlY3Rvci5sZW5ndGggPj0gMyApIHtcclxuXHJcblx0XHRcdFx0Ly8gQXNzdW1lIHRoYXQgc3RyaW5ncyB0aGF0IHN0YXJ0IGFuZCBlbmQgd2l0aCA8PiBhcmUgSFRNTCBhbmQgc2tpcCB0aGUgcmVnZXggY2hlY2tcclxuXHRcdFx0XHRtYXRjaCA9IFsgbnVsbCwgc2VsZWN0b3IsIG51bGwgXTtcclxuXHJcblx0XHRcdH0gZWxzZSB7XHJcblx0XHRcdFx0bWF0Y2ggPSBycXVpY2tFeHByLmV4ZWMoIHNlbGVjdG9yICk7XHJcblx0XHRcdH1cclxuXHJcblx0XHRcdC8vIE1hdGNoIGh0bWwgb3IgbWFrZSBzdXJlIG5vIGNvbnRleHQgaXMgc3BlY2lmaWVkIGZvciAjaWRcclxuXHRcdFx0aWYgKCBtYXRjaCAmJiAoIG1hdGNoWyAxIF0gfHwgIWNvbnRleHQgKSApIHtcclxuXHJcblx0XHRcdFx0Ly8gSEFORExFOiAkKGh0bWwpIC0+ICQoYXJyYXkpXHJcblx0XHRcdFx0aWYgKCBtYXRjaFsgMSBdICkge1xyXG5cdFx0XHRcdFx0Y29udGV4dCA9IGNvbnRleHQgaW5zdGFuY2VvZiBqUXVlcnkgPyBjb250ZXh0WyAwIF0gOiBjb250ZXh0O1xyXG5cclxuXHRcdFx0XHRcdC8vIE9wdGlvbiB0byBydW4gc2NyaXB0cyBpcyB0cnVlIGZvciBiYWNrLWNvbXBhdFxyXG5cdFx0XHRcdFx0Ly8gSW50ZW50aW9uYWxseSBsZXQgdGhlIGVycm9yIGJlIHRocm93biBpZiBwYXJzZUhUTUwgaXMgbm90IHByZXNlbnRcclxuXHRcdFx0XHRcdGpRdWVyeS5tZXJnZSggdGhpcywgalF1ZXJ5LnBhcnNlSFRNTChcclxuXHRcdFx0XHRcdFx0bWF0Y2hbIDEgXSxcclxuXHRcdFx0XHRcdFx0Y29udGV4dCAmJiBjb250ZXh0Lm5vZGVUeXBlID8gY29udGV4dC5vd25lckRvY3VtZW50IHx8IGNvbnRleHQgOiBkb2N1bWVudCxcclxuXHRcdFx0XHRcdFx0dHJ1ZVxyXG5cdFx0XHRcdFx0KSApO1xyXG5cclxuXHRcdFx0XHRcdC8vIEhBTkRMRTogJChodG1sLCBwcm9wcylcclxuXHRcdFx0XHRcdGlmICggcnNpbmdsZVRhZy50ZXN0KCBtYXRjaFsgMSBdICkgJiYgalF1ZXJ5LmlzUGxhaW5PYmplY3QoIGNvbnRleHQgKSApIHtcclxuXHRcdFx0XHRcdFx0Zm9yICggbWF0Y2ggaW4gY29udGV4dCApIHtcclxuXHJcblx0XHRcdFx0XHRcdFx0Ly8gUHJvcGVydGllcyBvZiBjb250ZXh0IGFyZSBjYWxsZWQgYXMgbWV0aG9kcyBpZiBwb3NzaWJsZVxyXG5cdFx0XHRcdFx0XHRcdGlmICggalF1ZXJ5LmlzRnVuY3Rpb24oIHRoaXNbIG1hdGNoIF0gKSApIHtcclxuXHRcdFx0XHRcdFx0XHRcdHRoaXNbIG1hdGNoIF0oIGNvbnRleHRbIG1hdGNoIF0gKTtcclxuXHJcblx0XHRcdFx0XHRcdFx0Ly8gLi4uYW5kIG90aGVyd2lzZSBzZXQgYXMgYXR0cmlidXRlc1xyXG5cdFx0XHRcdFx0XHRcdH0gZWxzZSB7XHJcblx0XHRcdFx0XHRcdFx0XHR0aGlzLmF0dHIoIG1hdGNoLCBjb250ZXh0WyBtYXRjaCBdICk7XHJcblx0XHRcdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHR9XHJcblxyXG5cdFx0XHRcdFx0cmV0dXJuIHRoaXM7XHJcblxyXG5cdFx0XHRcdC8vIEhBTkRMRTogJCgjaWQpXHJcblx0XHRcdFx0fSBlbHNlIHtcclxuXHRcdFx0XHRcdGVsZW0gPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCggbWF0Y2hbIDIgXSApO1xyXG5cclxuXHRcdFx0XHRcdC8vIFN1cHBvcnQ6IEJsYWNrYmVycnkgNC42XHJcblx0XHRcdFx0XHQvLyBnRUJJRCByZXR1cm5zIG5vZGVzIG5vIGxvbmdlciBpbiB0aGUgZG9jdW1lbnQgKCM2OTYzKVxyXG5cdFx0XHRcdFx0aWYgKCBlbGVtICYmIGVsZW0ucGFyZW50Tm9kZSApIHtcclxuXHJcblx0XHRcdFx0XHRcdC8vIEluamVjdCB0aGUgZWxlbWVudCBkaXJlY3RseSBpbnRvIHRoZSBqUXVlcnkgb2JqZWN0XHJcblx0XHRcdFx0XHRcdHRoaXMubGVuZ3RoID0gMTtcclxuXHRcdFx0XHRcdFx0dGhpc1sgMCBdID0gZWxlbTtcclxuXHRcdFx0XHRcdH1cclxuXHJcblx0XHRcdFx0XHR0aGlzLmNvbnRleHQgPSBkb2N1bWVudDtcclxuXHRcdFx0XHRcdHRoaXMuc2VsZWN0b3IgPSBzZWxlY3RvcjtcclxuXHRcdFx0XHRcdHJldHVybiB0aGlzO1xyXG5cdFx0XHRcdH1cclxuXHJcblx0XHRcdC8vIEhBTkRMRTogJChleHByLCAkKC4uLikpXHJcblx0XHRcdH0gZWxzZSBpZiAoICFjb250ZXh0IHx8IGNvbnRleHQuanF1ZXJ5ICkge1xyXG5cdFx0XHRcdHJldHVybiAoIGNvbnRleHQgfHwgcm9vdCApLmZpbmQoIHNlbGVjdG9yICk7XHJcblxyXG5cdFx0XHQvLyBIQU5ETEU6ICQoZXhwciwgY29udGV4dClcclxuXHRcdFx0Ly8gKHdoaWNoIGlzIGp1c3QgZXF1aXZhbGVudCB0bzogJChjb250ZXh0KS5maW5kKGV4cHIpXHJcblx0XHRcdH0gZWxzZSB7XHJcblx0XHRcdFx0cmV0dXJuIHRoaXMuY29uc3RydWN0b3IoIGNvbnRleHQgKS5maW5kKCBzZWxlY3RvciApO1xyXG5cdFx0XHR9XHJcblxyXG5cdFx0Ly8gSEFORExFOiAkKERPTUVsZW1lbnQpXHJcblx0XHR9IGVsc2UgaWYgKCBzZWxlY3Rvci5ub2RlVHlwZSApIHtcclxuXHRcdFx0dGhpcy5jb250ZXh0ID0gdGhpc1sgMCBdID0gc2VsZWN0b3I7XHJcblx0XHRcdHRoaXMubGVuZ3RoID0gMTtcclxuXHRcdFx0cmV0dXJuIHRoaXM7XHJcblxyXG5cdFx0Ly8gSEFORExFOiAkKGZ1bmN0aW9uKVxyXG5cdFx0Ly8gU2hvcnRjdXQgZm9yIGRvY3VtZW50IHJlYWR5XHJcblx0XHR9IGVsc2UgaWYgKCBqUXVlcnkuaXNGdW5jdGlvbiggc2VsZWN0b3IgKSApIHtcclxuXHRcdFx0cmV0dXJuIHJvb3QucmVhZHkgIT09IHVuZGVmaW5lZCA/XHJcblx0XHRcdFx0cm9vdC5yZWFkeSggc2VsZWN0b3IgKSA6XHJcblxyXG5cdFx0XHRcdC8vIEV4ZWN1dGUgaW1tZWRpYXRlbHkgaWYgcmVhZHkgaXMgbm90IHByZXNlbnRcclxuXHRcdFx0XHRzZWxlY3RvciggalF1ZXJ5ICk7XHJcblx0XHR9XHJcblxyXG5cdFx0aWYgKCBzZWxlY3Rvci5zZWxlY3RvciAhPT0gdW5kZWZpbmVkICkge1xyXG5cdFx0XHR0aGlzLnNlbGVjdG9yID0gc2VsZWN0b3Iuc2VsZWN0b3I7XHJcblx0XHRcdHRoaXMuY29udGV4dCA9IHNlbGVjdG9yLmNvbnRleHQ7XHJcblx0XHR9XHJcblxyXG5cdFx0cmV0dXJuIGpRdWVyeS5tYWtlQXJyYXkoIHNlbGVjdG9yLCB0aGlzICk7XHJcblx0fTtcclxuXHJcbi8vIEdpdmUgdGhlIGluaXQgZnVuY3Rpb24gdGhlIGpRdWVyeSBwcm90b3R5cGUgZm9yIGxhdGVyIGluc3RhbnRpYXRpb25cclxuaW5pdC5wcm90b3R5cGUgPSBqUXVlcnkuZm47XHJcblxyXG4vLyBJbml0aWFsaXplIGNlbnRyYWwgcmVmZXJlbmNlXHJcbnJvb3RqUXVlcnkgPSBqUXVlcnkoIGRvY3VtZW50ICk7XHJcblxyXG5cclxudmFyIHJwYXJlbnRzcHJldiA9IC9eKD86cGFyZW50c3xwcmV2KD86VW50aWx8QWxsKSkvLFxyXG5cclxuXHQvLyBNZXRob2RzIGd1YXJhbnRlZWQgdG8gcHJvZHVjZSBhIHVuaXF1ZSBzZXQgd2hlbiBzdGFydGluZyBmcm9tIGEgdW5pcXVlIHNldFxyXG5cdGd1YXJhbnRlZWRVbmlxdWUgPSB7XHJcblx0XHRjaGlsZHJlbjogdHJ1ZSxcclxuXHRcdGNvbnRlbnRzOiB0cnVlLFxyXG5cdFx0bmV4dDogdHJ1ZSxcclxuXHRcdHByZXY6IHRydWVcclxuXHR9O1xyXG5cclxualF1ZXJ5LmZuLmV4dGVuZCgge1xyXG5cdGhhczogZnVuY3Rpb24oIHRhcmdldCApIHtcclxuXHRcdHZhciB0YXJnZXRzID0galF1ZXJ5KCB0YXJnZXQsIHRoaXMgKSxcclxuXHRcdFx0bCA9IHRhcmdldHMubGVuZ3RoO1xyXG5cclxuXHRcdHJldHVybiB0aGlzLmZpbHRlciggZnVuY3Rpb24oKSB7XHJcblx0XHRcdHZhciBpID0gMDtcclxuXHRcdFx0Zm9yICggOyBpIDwgbDsgaSsrICkge1xyXG5cdFx0XHRcdGlmICggalF1ZXJ5LmNvbnRhaW5zKCB0aGlzLCB0YXJnZXRzWyBpIF0gKSApIHtcclxuXHRcdFx0XHRcdHJldHVybiB0cnVlO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0fVxyXG5cdFx0fSApO1xyXG5cdH0sXHJcblxyXG5cdGNsb3Nlc3Q6IGZ1bmN0aW9uKCBzZWxlY3RvcnMsIGNvbnRleHQgKSB7XHJcblx0XHR2YXIgY3VyLFxyXG5cdFx0XHRpID0gMCxcclxuXHRcdFx0bCA9IHRoaXMubGVuZ3RoLFxyXG5cdFx0XHRtYXRjaGVkID0gW10sXHJcblx0XHRcdHBvcyA9IHJuZWVkc0NvbnRleHQudGVzdCggc2VsZWN0b3JzICkgfHwgdHlwZW9mIHNlbGVjdG9ycyAhPT0gXCJzdHJpbmdcIiA/XHJcblx0XHRcdFx0alF1ZXJ5KCBzZWxlY3RvcnMsIGNvbnRleHQgfHwgdGhpcy5jb250ZXh0ICkgOlxyXG5cdFx0XHRcdDA7XHJcblxyXG5cdFx0Zm9yICggOyBpIDwgbDsgaSsrICkge1xyXG5cdFx0XHRmb3IgKCBjdXIgPSB0aGlzWyBpIF07IGN1ciAmJiBjdXIgIT09IGNvbnRleHQ7IGN1ciA9IGN1ci5wYXJlbnROb2RlICkge1xyXG5cclxuXHRcdFx0XHQvLyBBbHdheXMgc2tpcCBkb2N1bWVudCBmcmFnbWVudHNcclxuXHRcdFx0XHRpZiAoIGN1ci5ub2RlVHlwZSA8IDExICYmICggcG9zID9cclxuXHRcdFx0XHRcdHBvcy5pbmRleCggY3VyICkgPiAtMSA6XHJcblxyXG5cdFx0XHRcdFx0Ly8gRG9uJ3QgcGFzcyBub24tZWxlbWVudHMgdG8gU2l6emxlXHJcblx0XHRcdFx0XHRjdXIubm9kZVR5cGUgPT09IDEgJiZcclxuXHRcdFx0XHRcdFx0alF1ZXJ5LmZpbmQubWF0Y2hlc1NlbGVjdG9yKCBjdXIsIHNlbGVjdG9ycyApICkgKSB7XHJcblxyXG5cdFx0XHRcdFx0bWF0Y2hlZC5wdXNoKCBjdXIgKTtcclxuXHRcdFx0XHRcdGJyZWFrO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0fVxyXG5cdFx0fVxyXG5cclxuXHRcdHJldHVybiB0aGlzLnB1c2hTdGFjayggbWF0Y2hlZC5sZW5ndGggPiAxID8galF1ZXJ5LnVuaXF1ZVNvcnQoIG1hdGNoZWQgKSA6IG1hdGNoZWQgKTtcclxuXHR9LFxyXG5cclxuXHQvLyBEZXRlcm1pbmUgdGhlIHBvc2l0aW9uIG9mIGFuIGVsZW1lbnQgd2l0aGluIHRoZSBzZXRcclxuXHRpbmRleDogZnVuY3Rpb24oIGVsZW0gKSB7XHJcblxyXG5cdFx0Ly8gTm8gYXJndW1lbnQsIHJldHVybiBpbmRleCBpbiBwYXJlbnRcclxuXHRcdGlmICggIWVsZW0gKSB7XHJcblx0XHRcdHJldHVybiAoIHRoaXNbIDAgXSAmJiB0aGlzWyAwIF0ucGFyZW50Tm9kZSApID8gdGhpcy5maXJzdCgpLnByZXZBbGwoKS5sZW5ndGggOiAtMTtcclxuXHRcdH1cclxuXHJcblx0XHQvLyBJbmRleCBpbiBzZWxlY3RvclxyXG5cdFx0aWYgKCB0eXBlb2YgZWxlbSA9PT0gXCJzdHJpbmdcIiApIHtcclxuXHRcdFx0cmV0dXJuIGluZGV4T2YuY2FsbCggalF1ZXJ5KCBlbGVtICksIHRoaXNbIDAgXSApO1xyXG5cdFx0fVxyXG5cclxuXHRcdC8vIExvY2F0ZSB0aGUgcG9zaXRpb24gb2YgdGhlIGRlc2lyZWQgZWxlbWVudFxyXG5cdFx0cmV0dXJuIGluZGV4T2YuY2FsbCggdGhpcyxcclxuXHJcblx0XHRcdC8vIElmIGl0IHJlY2VpdmVzIGEgalF1ZXJ5IG9iamVjdCwgdGhlIGZpcnN0IGVsZW1lbnQgaXMgdXNlZFxyXG5cdFx0XHRlbGVtLmpxdWVyeSA/IGVsZW1bIDAgXSA6IGVsZW1cclxuXHRcdCk7XHJcblx0fSxcclxuXHJcblx0YWRkOiBmdW5jdGlvbiggc2VsZWN0b3IsIGNvbnRleHQgKSB7XHJcblx0XHRyZXR1cm4gdGhpcy5wdXNoU3RhY2soXHJcblx0XHRcdGpRdWVyeS51bmlxdWVTb3J0KFxyXG5cdFx0XHRcdGpRdWVyeS5tZXJnZSggdGhpcy5nZXQoKSwgalF1ZXJ5KCBzZWxlY3RvciwgY29udGV4dCApIClcclxuXHRcdFx0KVxyXG5cdFx0KTtcclxuXHR9LFxyXG5cclxuXHRhZGRCYWNrOiBmdW5jdGlvbiggc2VsZWN0b3IgKSB7XHJcblx0XHRyZXR1cm4gdGhpcy5hZGQoIHNlbGVjdG9yID09IG51bGwgP1xyXG5cdFx0XHR0aGlzLnByZXZPYmplY3QgOiB0aGlzLnByZXZPYmplY3QuZmlsdGVyKCBzZWxlY3RvciApXHJcblx0XHQpO1xyXG5cdH1cclxufSApO1xyXG5cclxuZnVuY3Rpb24gc2libGluZyggY3VyLCBkaXIgKSB7XHJcblx0d2hpbGUgKCAoIGN1ciA9IGN1clsgZGlyIF0gKSAmJiBjdXIubm9kZVR5cGUgIT09IDEgKSB7fVxyXG5cdHJldHVybiBjdXI7XHJcbn1cclxuXHJcbmpRdWVyeS5lYWNoKCB7XHJcblx0cGFyZW50OiBmdW5jdGlvbiggZWxlbSApIHtcclxuXHRcdHZhciBwYXJlbnQgPSBlbGVtLnBhcmVudE5vZGU7XHJcblx0XHRyZXR1cm4gcGFyZW50ICYmIHBhcmVudC5ub2RlVHlwZSAhPT0gMTEgPyBwYXJlbnQgOiBudWxsO1xyXG5cdH0sXHJcblx0cGFyZW50czogZnVuY3Rpb24oIGVsZW0gKSB7XHJcblx0XHRyZXR1cm4gZGlyKCBlbGVtLCBcInBhcmVudE5vZGVcIiApO1xyXG5cdH0sXHJcblx0cGFyZW50c1VudGlsOiBmdW5jdGlvbiggZWxlbSwgaSwgdW50aWwgKSB7XHJcblx0XHRyZXR1cm4gZGlyKCBlbGVtLCBcInBhcmVudE5vZGVcIiwgdW50aWwgKTtcclxuXHR9LFxyXG5cdG5leHQ6IGZ1bmN0aW9uKCBlbGVtICkge1xyXG5cdFx0cmV0dXJuIHNpYmxpbmcoIGVsZW0sIFwibmV4dFNpYmxpbmdcIiApO1xyXG5cdH0sXHJcblx0cHJldjogZnVuY3Rpb24oIGVsZW0gKSB7XHJcblx0XHRyZXR1cm4gc2libGluZyggZWxlbSwgXCJwcmV2aW91c1NpYmxpbmdcIiApO1xyXG5cdH0sXHJcblx0bmV4dEFsbDogZnVuY3Rpb24oIGVsZW0gKSB7XHJcblx0XHRyZXR1cm4gZGlyKCBlbGVtLCBcIm5leHRTaWJsaW5nXCIgKTtcclxuXHR9LFxyXG5cdHByZXZBbGw6IGZ1bmN0aW9uKCBlbGVtICkge1xyXG5cdFx0cmV0dXJuIGRpciggZWxlbSwgXCJwcmV2aW91c1NpYmxpbmdcIiApO1xyXG5cdH0sXHJcblx0bmV4dFVudGlsOiBmdW5jdGlvbiggZWxlbSwgaSwgdW50aWwgKSB7XHJcblx0XHRyZXR1cm4gZGlyKCBlbGVtLCBcIm5leHRTaWJsaW5nXCIsIHVudGlsICk7XHJcblx0fSxcclxuXHRwcmV2VW50aWw6IGZ1bmN0aW9uKCBlbGVtLCBpLCB1bnRpbCApIHtcclxuXHRcdHJldHVybiBkaXIoIGVsZW0sIFwicHJldmlvdXNTaWJsaW5nXCIsIHVudGlsICk7XHJcblx0fSxcclxuXHRzaWJsaW5nczogZnVuY3Rpb24oIGVsZW0gKSB7XHJcblx0XHRyZXR1cm4gc2libGluZ3MoICggZWxlbS5wYXJlbnROb2RlIHx8IHt9ICkuZmlyc3RDaGlsZCwgZWxlbSApO1xyXG5cdH0sXHJcblx0Y2hpbGRyZW46IGZ1bmN0aW9uKCBlbGVtICkge1xyXG5cdFx0cmV0dXJuIHNpYmxpbmdzKCBlbGVtLmZpcnN0Q2hpbGQgKTtcclxuXHR9LFxyXG5cdGNvbnRlbnRzOiBmdW5jdGlvbiggZWxlbSApIHtcclxuXHRcdHJldHVybiBlbGVtLmNvbnRlbnREb2N1bWVudCB8fCBqUXVlcnkubWVyZ2UoIFtdLCBlbGVtLmNoaWxkTm9kZXMgKTtcclxuXHR9XHJcbn0sIGZ1bmN0aW9uKCBuYW1lLCBmbiApIHtcclxuXHRqUXVlcnkuZm5bIG5hbWUgXSA9IGZ1bmN0aW9uKCB1bnRpbCwgc2VsZWN0b3IgKSB7XHJcblx0XHR2YXIgbWF0Y2hlZCA9IGpRdWVyeS5tYXAoIHRoaXMsIGZuLCB1bnRpbCApO1xyXG5cclxuXHRcdGlmICggbmFtZS5zbGljZSggLTUgKSAhPT0gXCJVbnRpbFwiICkge1xyXG5cdFx0XHRzZWxlY3RvciA9IHVudGlsO1xyXG5cdFx0fVxyXG5cclxuXHRcdGlmICggc2VsZWN0b3IgJiYgdHlwZW9mIHNlbGVjdG9yID09PSBcInN0cmluZ1wiICkge1xyXG5cdFx0XHRtYXRjaGVkID0galF1ZXJ5LmZpbHRlciggc2VsZWN0b3IsIG1hdGNoZWQgKTtcclxuXHRcdH1cclxuXHJcblx0XHRpZiAoIHRoaXMubGVuZ3RoID4gMSApIHtcclxuXHJcblx0XHRcdC8vIFJlbW92ZSBkdXBsaWNhdGVzXHJcblx0XHRcdGlmICggIWd1YXJhbnRlZWRVbmlxdWVbIG5hbWUgXSApIHtcclxuXHRcdFx0XHRqUXVlcnkudW5pcXVlU29ydCggbWF0Y2hlZCApO1xyXG5cdFx0XHR9XHJcblxyXG5cdFx0XHQvLyBSZXZlcnNlIG9yZGVyIGZvciBwYXJlbnRzKiBhbmQgcHJldi1kZXJpdmF0aXZlc1xyXG5cdFx0XHRpZiAoIHJwYXJlbnRzcHJldi50ZXN0KCBuYW1lICkgKSB7XHJcblx0XHRcdFx0bWF0Y2hlZC5yZXZlcnNlKCk7XHJcblx0XHRcdH1cclxuXHRcdH1cclxuXHJcblx0XHRyZXR1cm4gdGhpcy5wdXNoU3RhY2soIG1hdGNoZWQgKTtcclxuXHR9O1xyXG59ICk7XHJcbnZhciBybm90d2hpdGUgPSAoIC9cXFMrL2cgKTtcclxuXHJcblxyXG5cclxuLy8gQ29udmVydCBTdHJpbmctZm9ybWF0dGVkIG9wdGlvbnMgaW50byBPYmplY3QtZm9ybWF0dGVkIG9uZXNcclxuZnVuY3Rpb24gY3JlYXRlT3B0aW9ucyggb3B0aW9ucyApIHtcclxuXHR2YXIgb2JqZWN0ID0ge307XHJcblx0alF1ZXJ5LmVhY2goIG9wdGlvbnMubWF0Y2goIHJub3R3aGl0ZSApIHx8IFtdLCBmdW5jdGlvbiggXywgZmxhZyApIHtcclxuXHRcdG9iamVjdFsgZmxhZyBdID0gdHJ1ZTtcclxuXHR9ICk7XHJcblx0cmV0dXJuIG9iamVjdDtcclxufVxyXG5cclxuLypcclxuICogQ3JlYXRlIGEgY2FsbGJhY2sgbGlzdCB1c2luZyB0aGUgZm9sbG93aW5nIHBhcmFtZXRlcnM6XHJcbiAqXHJcbiAqXHRvcHRpb25zOiBhbiBvcHRpb25hbCBsaXN0IG9mIHNwYWNlLXNlcGFyYXRlZCBvcHRpb25zIHRoYXQgd2lsbCBjaGFuZ2UgaG93XHJcbiAqXHRcdFx0dGhlIGNhbGxiYWNrIGxpc3QgYmVoYXZlcyBvciBhIG1vcmUgdHJhZGl0aW9uYWwgb3B0aW9uIG9iamVjdFxyXG4gKlxyXG4gKiBCeSBkZWZhdWx0IGEgY2FsbGJhY2sgbGlzdCB3aWxsIGFjdCBsaWtlIGFuIGV2ZW50IGNhbGxiYWNrIGxpc3QgYW5kIGNhbiBiZVxyXG4gKiBcImZpcmVkXCIgbXVsdGlwbGUgdGltZXMuXHJcbiAqXHJcbiAqIFBvc3NpYmxlIG9wdGlvbnM6XHJcbiAqXHJcbiAqXHRvbmNlOlx0XHRcdHdpbGwgZW5zdXJlIHRoZSBjYWxsYmFjayBsaXN0IGNhbiBvbmx5IGJlIGZpcmVkIG9uY2UgKGxpa2UgYSBEZWZlcnJlZClcclxuICpcclxuICpcdG1lbW9yeTpcdFx0XHR3aWxsIGtlZXAgdHJhY2sgb2YgcHJldmlvdXMgdmFsdWVzIGFuZCB3aWxsIGNhbGwgYW55IGNhbGxiYWNrIGFkZGVkXHJcbiAqXHRcdFx0XHRcdGFmdGVyIHRoZSBsaXN0IGhhcyBiZWVuIGZpcmVkIHJpZ2h0IGF3YXkgd2l0aCB0aGUgbGF0ZXN0IFwibWVtb3JpemVkXCJcclxuICpcdFx0XHRcdFx0dmFsdWVzIChsaWtlIGEgRGVmZXJyZWQpXHJcbiAqXHJcbiAqXHR1bmlxdWU6XHRcdFx0d2lsbCBlbnN1cmUgYSBjYWxsYmFjayBjYW4gb25seSBiZSBhZGRlZCBvbmNlIChubyBkdXBsaWNhdGUgaW4gdGhlIGxpc3QpXHJcbiAqXHJcbiAqXHRzdG9wT25GYWxzZTpcdGludGVycnVwdCBjYWxsaW5ncyB3aGVuIGEgY2FsbGJhY2sgcmV0dXJucyBmYWxzZVxyXG4gKlxyXG4gKi9cclxualF1ZXJ5LkNhbGxiYWNrcyA9IGZ1bmN0aW9uKCBvcHRpb25zICkge1xyXG5cclxuXHQvLyBDb252ZXJ0IG9wdGlvbnMgZnJvbSBTdHJpbmctZm9ybWF0dGVkIHRvIE9iamVjdC1mb3JtYXR0ZWQgaWYgbmVlZGVkXHJcblx0Ly8gKHdlIGNoZWNrIGluIGNhY2hlIGZpcnN0KVxyXG5cdG9wdGlvbnMgPSB0eXBlb2Ygb3B0aW9ucyA9PT0gXCJzdHJpbmdcIiA/XHJcblx0XHRjcmVhdGVPcHRpb25zKCBvcHRpb25zICkgOlxyXG5cdFx0alF1ZXJ5LmV4dGVuZCgge30sIG9wdGlvbnMgKTtcclxuXHJcblx0dmFyIC8vIEZsYWcgdG8ga25vdyBpZiBsaXN0IGlzIGN1cnJlbnRseSBmaXJpbmdcclxuXHRcdGZpcmluZyxcclxuXHJcblx0XHQvLyBMYXN0IGZpcmUgdmFsdWUgZm9yIG5vbi1mb3JnZXR0YWJsZSBsaXN0c1xyXG5cdFx0bWVtb3J5LFxyXG5cclxuXHRcdC8vIEZsYWcgdG8ga25vdyBpZiBsaXN0IHdhcyBhbHJlYWR5IGZpcmVkXHJcblx0XHRmaXJlZCxcclxuXHJcblx0XHQvLyBGbGFnIHRvIHByZXZlbnQgZmlyaW5nXHJcblx0XHRsb2NrZWQsXHJcblxyXG5cdFx0Ly8gQWN0dWFsIGNhbGxiYWNrIGxpc3RcclxuXHRcdGxpc3QgPSBbXSxcclxuXHJcblx0XHQvLyBRdWV1ZSBvZiBleGVjdXRpb24gZGF0YSBmb3IgcmVwZWF0YWJsZSBsaXN0c1xyXG5cdFx0cXVldWUgPSBbXSxcclxuXHJcblx0XHQvLyBJbmRleCBvZiBjdXJyZW50bHkgZmlyaW5nIGNhbGxiYWNrIChtb2RpZmllZCBieSBhZGQvcmVtb3ZlIGFzIG5lZWRlZClcclxuXHRcdGZpcmluZ0luZGV4ID0gLTEsXHJcblxyXG5cdFx0Ly8gRmlyZSBjYWxsYmFja3NcclxuXHRcdGZpcmUgPSBmdW5jdGlvbigpIHtcclxuXHJcblx0XHRcdC8vIEVuZm9yY2Ugc2luZ2xlLWZpcmluZ1xyXG5cdFx0XHRsb2NrZWQgPSBvcHRpb25zLm9uY2U7XHJcblxyXG5cdFx0XHQvLyBFeGVjdXRlIGNhbGxiYWNrcyBmb3IgYWxsIHBlbmRpbmcgZXhlY3V0aW9ucyxcclxuXHRcdFx0Ly8gcmVzcGVjdGluZyBmaXJpbmdJbmRleCBvdmVycmlkZXMgYW5kIHJ1bnRpbWUgY2hhbmdlc1xyXG5cdFx0XHRmaXJlZCA9IGZpcmluZyA9IHRydWU7XHJcblx0XHRcdGZvciAoIDsgcXVldWUubGVuZ3RoOyBmaXJpbmdJbmRleCA9IC0xICkge1xyXG5cdFx0XHRcdG1lbW9yeSA9IHF1ZXVlLnNoaWZ0KCk7XHJcblx0XHRcdFx0d2hpbGUgKCArK2ZpcmluZ0luZGV4IDwgbGlzdC5sZW5ndGggKSB7XHJcblxyXG5cdFx0XHRcdFx0Ly8gUnVuIGNhbGxiYWNrIGFuZCBjaGVjayBmb3IgZWFybHkgdGVybWluYXRpb25cclxuXHRcdFx0XHRcdGlmICggbGlzdFsgZmlyaW5nSW5kZXggXS5hcHBseSggbWVtb3J5WyAwIF0sIG1lbW9yeVsgMSBdICkgPT09IGZhbHNlICYmXHJcblx0XHRcdFx0XHRcdG9wdGlvbnMuc3RvcE9uRmFsc2UgKSB7XHJcblxyXG5cdFx0XHRcdFx0XHQvLyBKdW1wIHRvIGVuZCBhbmQgZm9yZ2V0IHRoZSBkYXRhIHNvIC5hZGQgZG9lc24ndCByZS1maXJlXHJcblx0XHRcdFx0XHRcdGZpcmluZ0luZGV4ID0gbGlzdC5sZW5ndGg7XHJcblx0XHRcdFx0XHRcdG1lbW9yeSA9IGZhbHNlO1xyXG5cdFx0XHRcdFx0fVxyXG5cdFx0XHRcdH1cclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0Ly8gRm9yZ2V0IHRoZSBkYXRhIGlmIHdlJ3JlIGRvbmUgd2l0aCBpdFxyXG5cdFx0XHRpZiAoICFvcHRpb25zLm1lbW9yeSApIHtcclxuXHRcdFx0XHRtZW1vcnkgPSBmYWxzZTtcclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0ZmlyaW5nID0gZmFsc2U7XHJcblxyXG5cdFx0XHQvLyBDbGVhbiB1cCBpZiB3ZSdyZSBkb25lIGZpcmluZyBmb3IgZ29vZFxyXG5cdFx0XHRpZiAoIGxvY2tlZCApIHtcclxuXHJcblx0XHRcdFx0Ly8gS2VlcCBhbiBlbXB0eSBsaXN0IGlmIHdlIGhhdmUgZGF0YSBmb3IgZnV0dXJlIGFkZCBjYWxsc1xyXG5cdFx0XHRcdGlmICggbWVtb3J5ICkge1xyXG5cdFx0XHRcdFx0bGlzdCA9IFtdO1xyXG5cclxuXHRcdFx0XHQvLyBPdGhlcndpc2UsIHRoaXMgb2JqZWN0IGlzIHNwZW50XHJcblx0XHRcdFx0fSBlbHNlIHtcclxuXHRcdFx0XHRcdGxpc3QgPSBcIlwiO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0fVxyXG5cdFx0fSxcclxuXHJcblx0XHQvLyBBY3R1YWwgQ2FsbGJhY2tzIG9iamVjdFxyXG5cdFx0c2VsZiA9IHtcclxuXHJcblx0XHRcdC8vIEFkZCBhIGNhbGxiYWNrIG9yIGEgY29sbGVjdGlvbiBvZiBjYWxsYmFja3MgdG8gdGhlIGxpc3RcclxuXHRcdFx0YWRkOiBmdW5jdGlvbigpIHtcclxuXHRcdFx0XHRpZiAoIGxpc3QgKSB7XHJcblxyXG5cdFx0XHRcdFx0Ly8gSWYgd2UgaGF2ZSBtZW1vcnkgZnJvbSBhIHBhc3QgcnVuLCB3ZSBzaG91bGQgZmlyZSBhZnRlciBhZGRpbmdcclxuXHRcdFx0XHRcdGlmICggbWVtb3J5ICYmICFmaXJpbmcgKSB7XHJcblx0XHRcdFx0XHRcdGZpcmluZ0luZGV4ID0gbGlzdC5sZW5ndGggLSAxO1xyXG5cdFx0XHRcdFx0XHRxdWV1ZS5wdXNoKCBtZW1vcnkgKTtcclxuXHRcdFx0XHRcdH1cclxuXHJcblx0XHRcdFx0XHQoIGZ1bmN0aW9uIGFkZCggYXJncyApIHtcclxuXHRcdFx0XHRcdFx0alF1ZXJ5LmVhY2goIGFyZ3MsIGZ1bmN0aW9uKCBfLCBhcmcgKSB7XHJcblx0XHRcdFx0XHRcdFx0aWYgKCBqUXVlcnkuaXNGdW5jdGlvbiggYXJnICkgKSB7XHJcblx0XHRcdFx0XHRcdFx0XHRpZiAoICFvcHRpb25zLnVuaXF1ZSB8fCAhc2VsZi5oYXMoIGFyZyApICkge1xyXG5cdFx0XHRcdFx0XHRcdFx0XHRsaXN0LnB1c2goIGFyZyApO1xyXG5cdFx0XHRcdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0XHRcdH0gZWxzZSBpZiAoIGFyZyAmJiBhcmcubGVuZ3RoICYmIGpRdWVyeS50eXBlKCBhcmcgKSAhPT0gXCJzdHJpbmdcIiApIHtcclxuXHJcblx0XHRcdFx0XHRcdFx0XHQvLyBJbnNwZWN0IHJlY3Vyc2l2ZWx5XHJcblx0XHRcdFx0XHRcdFx0XHRhZGQoIGFyZyApO1xyXG5cdFx0XHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdFx0fSApO1xyXG5cdFx0XHRcdFx0fSApKCBhcmd1bWVudHMgKTtcclxuXHJcblx0XHRcdFx0XHRpZiAoIG1lbW9yeSAmJiAhZmlyaW5nICkge1xyXG5cdFx0XHRcdFx0XHRmaXJlKCk7XHJcblx0XHRcdFx0XHR9XHJcblx0XHRcdFx0fVxyXG5cdFx0XHRcdHJldHVybiB0aGlzO1xyXG5cdFx0XHR9LFxyXG5cclxuXHRcdFx0Ly8gUmVtb3ZlIGEgY2FsbGJhY2sgZnJvbSB0aGUgbGlzdFxyXG5cdFx0XHRyZW1vdmU6IGZ1bmN0aW9uKCkge1xyXG5cdFx0XHRcdGpRdWVyeS5lYWNoKCBhcmd1bWVudHMsIGZ1bmN0aW9uKCBfLCBhcmcgKSB7XHJcblx0XHRcdFx0XHR2YXIgaW5kZXg7XHJcblx0XHRcdFx0XHR3aGlsZSAoICggaW5kZXggPSBqUXVlcnkuaW5BcnJheSggYXJnLCBsaXN0LCBpbmRleCApICkgPiAtMSApIHtcclxuXHRcdFx0XHRcdFx0bGlzdC5zcGxpY2UoIGluZGV4LCAxICk7XHJcblxyXG5cdFx0XHRcdFx0XHQvLyBIYW5kbGUgZmlyaW5nIGluZGV4ZXNcclxuXHRcdFx0XHRcdFx0aWYgKCBpbmRleCA8PSBmaXJpbmdJbmRleCApIHtcclxuXHRcdFx0XHRcdFx0XHRmaXJpbmdJbmRleC0tO1xyXG5cdFx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHR9XHJcblx0XHRcdFx0fSApO1xyXG5cdFx0XHRcdHJldHVybiB0aGlzO1xyXG5cdFx0XHR9LFxyXG5cclxuXHRcdFx0Ly8gQ2hlY2sgaWYgYSBnaXZlbiBjYWxsYmFjayBpcyBpbiB0aGUgbGlzdC5cclxuXHRcdFx0Ly8gSWYgbm8gYXJndW1lbnQgaXMgZ2l2ZW4sIHJldHVybiB3aGV0aGVyIG9yIG5vdCBsaXN0IGhhcyBjYWxsYmFja3MgYXR0YWNoZWQuXHJcblx0XHRcdGhhczogZnVuY3Rpb24oIGZuICkge1xyXG5cdFx0XHRcdHJldHVybiBmbiA/XHJcblx0XHRcdFx0XHRqUXVlcnkuaW5BcnJheSggZm4sIGxpc3QgKSA+IC0xIDpcclxuXHRcdFx0XHRcdGxpc3QubGVuZ3RoID4gMDtcclxuXHRcdFx0fSxcclxuXHJcblx0XHRcdC8vIFJlbW92ZSBhbGwgY2FsbGJhY2tzIGZyb20gdGhlIGxpc3RcclxuXHRcdFx0ZW1wdHk6IGZ1bmN0aW9uKCkge1xyXG5cdFx0XHRcdGlmICggbGlzdCApIHtcclxuXHRcdFx0XHRcdGxpc3QgPSBbXTtcclxuXHRcdFx0XHR9XHJcblx0XHRcdFx0cmV0dXJuIHRoaXM7XHJcblx0XHRcdH0sXHJcblxyXG5cdFx0XHQvLyBEaXNhYmxlIC5maXJlIGFuZCAuYWRkXHJcblx0XHRcdC8vIEFib3J0IGFueSBjdXJyZW50L3BlbmRpbmcgZXhlY3V0aW9uc1xyXG5cdFx0XHQvLyBDbGVhciBhbGwgY2FsbGJhY2tzIGFuZCB2YWx1ZXNcclxuXHRcdFx0ZGlzYWJsZTogZnVuY3Rpb24oKSB7XHJcblx0XHRcdFx0bG9ja2VkID0gcXVldWUgPSBbXTtcclxuXHRcdFx0XHRsaXN0ID0gbWVtb3J5ID0gXCJcIjtcclxuXHRcdFx0XHRyZXR1cm4gdGhpcztcclxuXHRcdFx0fSxcclxuXHRcdFx0ZGlzYWJsZWQ6IGZ1bmN0aW9uKCkge1xyXG5cdFx0XHRcdHJldHVybiAhbGlzdDtcclxuXHRcdFx0fSxcclxuXHJcblx0XHRcdC8vIERpc2FibGUgLmZpcmVcclxuXHRcdFx0Ly8gQWxzbyBkaXNhYmxlIC5hZGQgdW5sZXNzIHdlIGhhdmUgbWVtb3J5IChzaW5jZSBpdCB3b3VsZCBoYXZlIG5vIGVmZmVjdClcclxuXHRcdFx0Ly8gQWJvcnQgYW55IHBlbmRpbmcgZXhlY3V0aW9uc1xyXG5cdFx0XHRsb2NrOiBmdW5jdGlvbigpIHtcclxuXHRcdFx0XHRsb2NrZWQgPSBxdWV1ZSA9IFtdO1xyXG5cdFx0XHRcdGlmICggIW1lbW9yeSApIHtcclxuXHRcdFx0XHRcdGxpc3QgPSBtZW1vcnkgPSBcIlwiO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0XHRyZXR1cm4gdGhpcztcclxuXHRcdFx0fSxcclxuXHRcdFx0bG9ja2VkOiBmdW5jdGlvbigpIHtcclxuXHRcdFx0XHRyZXR1cm4gISFsb2NrZWQ7XHJcblx0XHRcdH0sXHJcblxyXG5cdFx0XHQvLyBDYWxsIGFsbCBjYWxsYmFja3Mgd2l0aCB0aGUgZ2l2ZW4gY29udGV4dCBhbmQgYXJndW1lbnRzXHJcblx0XHRcdGZpcmVXaXRoOiBmdW5jdGlvbiggY29udGV4dCwgYXJncyApIHtcclxuXHRcdFx0XHRpZiAoICFsb2NrZWQgKSB7XHJcblx0XHRcdFx0XHRhcmdzID0gYXJncyB8fCBbXTtcclxuXHRcdFx0XHRcdGFyZ3MgPSBbIGNvbnRleHQsIGFyZ3Muc2xpY2UgPyBhcmdzLnNsaWNlKCkgOiBhcmdzIF07XHJcblx0XHRcdFx0XHRxdWV1ZS5wdXNoKCBhcmdzICk7XHJcblx0XHRcdFx0XHRpZiAoICFmaXJpbmcgKSB7XHJcblx0XHRcdFx0XHRcdGZpcmUoKTtcclxuXHRcdFx0XHRcdH1cclxuXHRcdFx0XHR9XHJcblx0XHRcdFx0cmV0dXJuIHRoaXM7XHJcblx0XHRcdH0sXHJcblxyXG5cdFx0XHQvLyBDYWxsIGFsbCB0aGUgY2FsbGJhY2tzIHdpdGggdGhlIGdpdmVuIGFyZ3VtZW50c1xyXG5cdFx0XHRmaXJlOiBmdW5jdGlvbigpIHtcclxuXHRcdFx0XHRzZWxmLmZpcmVXaXRoKCB0aGlzLCBhcmd1bWVudHMgKTtcclxuXHRcdFx0XHRyZXR1cm4gdGhpcztcclxuXHRcdFx0fSxcclxuXHJcblx0XHRcdC8vIFRvIGtub3cgaWYgdGhlIGNhbGxiYWNrcyBoYXZlIGFscmVhZHkgYmVlbiBjYWxsZWQgYXQgbGVhc3Qgb25jZVxyXG5cdFx0XHRmaXJlZDogZnVuY3Rpb24oKSB7XHJcblx0XHRcdFx0cmV0dXJuICEhZmlyZWQ7XHJcblx0XHRcdH1cclxuXHRcdH07XHJcblxyXG5cdHJldHVybiBzZWxmO1xyXG59O1xyXG5cclxuXHJcbmpRdWVyeS5leHRlbmQoIHtcclxuXHJcblx0RGVmZXJyZWQ6IGZ1bmN0aW9uKCBmdW5jICkge1xyXG5cdFx0dmFyIHR1cGxlcyA9IFtcclxuXHJcblx0XHRcdFx0Ly8gYWN0aW9uLCBhZGQgbGlzdGVuZXIsIGxpc3RlbmVyIGxpc3QsIGZpbmFsIHN0YXRlXHJcblx0XHRcdFx0WyBcInJlc29sdmVcIiwgXCJkb25lXCIsIGpRdWVyeS5DYWxsYmFja3MoIFwib25jZSBtZW1vcnlcIiApLCBcInJlc29sdmVkXCIgXSxcclxuXHRcdFx0XHRbIFwicmVqZWN0XCIsIFwiZmFpbFwiLCBqUXVlcnkuQ2FsbGJhY2tzKCBcIm9uY2UgbWVtb3J5XCIgKSwgXCJyZWplY3RlZFwiIF0sXHJcblx0XHRcdFx0WyBcIm5vdGlmeVwiLCBcInByb2dyZXNzXCIsIGpRdWVyeS5DYWxsYmFja3MoIFwibWVtb3J5XCIgKSBdXHJcblx0XHRcdF0sXHJcblx0XHRcdHN0YXRlID0gXCJwZW5kaW5nXCIsXHJcblx0XHRcdHByb21pc2UgPSB7XHJcblx0XHRcdFx0c3RhdGU6IGZ1bmN0aW9uKCkge1xyXG5cdFx0XHRcdFx0cmV0dXJuIHN0YXRlO1xyXG5cdFx0XHRcdH0sXHJcblx0XHRcdFx0YWx3YXlzOiBmdW5jdGlvbigpIHtcclxuXHRcdFx0XHRcdGRlZmVycmVkLmRvbmUoIGFyZ3VtZW50cyApLmZhaWwoIGFyZ3VtZW50cyApO1xyXG5cdFx0XHRcdFx0cmV0dXJuIHRoaXM7XHJcblx0XHRcdFx0fSxcclxuXHRcdFx0XHR0aGVuOiBmdW5jdGlvbiggLyogZm5Eb25lLCBmbkZhaWwsIGZuUHJvZ3Jlc3MgKi8gKSB7XHJcblx0XHRcdFx0XHR2YXIgZm5zID0gYXJndW1lbnRzO1xyXG5cdFx0XHRcdFx0cmV0dXJuIGpRdWVyeS5EZWZlcnJlZCggZnVuY3Rpb24oIG5ld0RlZmVyICkge1xyXG5cdFx0XHRcdFx0XHRqUXVlcnkuZWFjaCggdHVwbGVzLCBmdW5jdGlvbiggaSwgdHVwbGUgKSB7XHJcblx0XHRcdFx0XHRcdFx0dmFyIGZuID0galF1ZXJ5LmlzRnVuY3Rpb24oIGZuc1sgaSBdICkgJiYgZm5zWyBpIF07XHJcblxyXG5cdFx0XHRcdFx0XHRcdC8vIGRlZmVycmVkWyBkb25lIHwgZmFpbCB8IHByb2dyZXNzIF0gZm9yIGZvcndhcmRpbmcgYWN0aW9ucyB0byBuZXdEZWZlclxyXG5cdFx0XHRcdFx0XHRcdGRlZmVycmVkWyB0dXBsZVsgMSBdIF0oIGZ1bmN0aW9uKCkge1xyXG5cdFx0XHRcdFx0XHRcdFx0dmFyIHJldHVybmVkID0gZm4gJiYgZm4uYXBwbHkoIHRoaXMsIGFyZ3VtZW50cyApO1xyXG5cdFx0XHRcdFx0XHRcdFx0aWYgKCByZXR1cm5lZCAmJiBqUXVlcnkuaXNGdW5jdGlvbiggcmV0dXJuZWQucHJvbWlzZSApICkge1xyXG5cdFx0XHRcdFx0XHRcdFx0XHRyZXR1cm5lZC5wcm9taXNlKClcclxuXHRcdFx0XHRcdFx0XHRcdFx0XHQucHJvZ3Jlc3MoIG5ld0RlZmVyLm5vdGlmeSApXHJcblx0XHRcdFx0XHRcdFx0XHRcdFx0LmRvbmUoIG5ld0RlZmVyLnJlc29sdmUgKVxyXG5cdFx0XHRcdFx0XHRcdFx0XHRcdC5mYWlsKCBuZXdEZWZlci5yZWplY3QgKTtcclxuXHRcdFx0XHRcdFx0XHRcdH0gZWxzZSB7XHJcblx0XHRcdFx0XHRcdFx0XHRcdG5ld0RlZmVyWyB0dXBsZVsgMCBdICsgXCJXaXRoXCIgXShcclxuXHRcdFx0XHRcdFx0XHRcdFx0XHR0aGlzID09PSBwcm9taXNlID8gbmV3RGVmZXIucHJvbWlzZSgpIDogdGhpcyxcclxuXHRcdFx0XHRcdFx0XHRcdFx0XHRmbiA/IFsgcmV0dXJuZWQgXSA6IGFyZ3VtZW50c1xyXG5cdFx0XHRcdFx0XHRcdFx0XHQpO1xyXG5cdFx0XHRcdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0XHRcdH0gKTtcclxuXHRcdFx0XHRcdFx0fSApO1xyXG5cdFx0XHRcdFx0XHRmbnMgPSBudWxsO1xyXG5cdFx0XHRcdFx0fSApLnByb21pc2UoKTtcclxuXHRcdFx0XHR9LFxyXG5cclxuXHRcdFx0XHQvLyBHZXQgYSBwcm9taXNlIGZvciB0aGlzIGRlZmVycmVkXHJcblx0XHRcdFx0Ly8gSWYgb2JqIGlzIHByb3ZpZGVkLCB0aGUgcHJvbWlzZSBhc3BlY3QgaXMgYWRkZWQgdG8gdGhlIG9iamVjdFxyXG5cdFx0XHRcdHByb21pc2U6IGZ1bmN0aW9uKCBvYmogKSB7XHJcblx0XHRcdFx0XHRyZXR1cm4gb2JqICE9IG51bGwgPyBqUXVlcnkuZXh0ZW5kKCBvYmosIHByb21pc2UgKSA6IHByb21pc2U7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9LFxyXG5cdFx0XHRkZWZlcnJlZCA9IHt9O1xyXG5cclxuXHRcdC8vIEtlZXAgcGlwZSBmb3IgYmFjay1jb21wYXRcclxuXHRcdHByb21pc2UucGlwZSA9IHByb21pc2UudGhlbjtcclxuXHJcblx0XHQvLyBBZGQgbGlzdC1zcGVjaWZpYyBtZXRob2RzXHJcblx0XHRqUXVlcnkuZWFjaCggdHVwbGVzLCBmdW5jdGlvbiggaSwgdHVwbGUgKSB7XHJcblx0XHRcdHZhciBsaXN0ID0gdHVwbGVbIDIgXSxcclxuXHRcdFx0XHRzdGF0ZVN0cmluZyA9IHR1cGxlWyAzIF07XHJcblxyXG5cdFx0XHQvLyBwcm9taXNlWyBkb25lIHwgZmFpbCB8IHByb2dyZXNzIF0gPSBsaXN0LmFkZFxyXG5cdFx0XHRwcm9taXNlWyB0dXBsZVsgMSBdIF0gPSBsaXN0LmFkZDtcclxuXHJcblx0XHRcdC8vIEhhbmRsZSBzdGF0ZVxyXG5cdFx0XHRpZiAoIHN0YXRlU3RyaW5nICkge1xyXG5cdFx0XHRcdGxpc3QuYWRkKCBmdW5jdGlvbigpIHtcclxuXHJcblx0XHRcdFx0XHQvLyBzdGF0ZSA9IFsgcmVzb2x2ZWQgfCByZWplY3RlZCBdXHJcblx0XHRcdFx0XHRzdGF0ZSA9IHN0YXRlU3RyaW5nO1xyXG5cclxuXHRcdFx0XHQvLyBbIHJlamVjdF9saXN0IHwgcmVzb2x2ZV9saXN0IF0uZGlzYWJsZTsgcHJvZ3Jlc3NfbGlzdC5sb2NrXHJcblx0XHRcdFx0fSwgdHVwbGVzWyBpIF4gMSBdWyAyIF0uZGlzYWJsZSwgdHVwbGVzWyAyIF1bIDIgXS5sb2NrICk7XHJcblx0XHRcdH1cclxuXHJcblx0XHRcdC8vIGRlZmVycmVkWyByZXNvbHZlIHwgcmVqZWN0IHwgbm90aWZ5IF1cclxuXHRcdFx0ZGVmZXJyZWRbIHR1cGxlWyAwIF0gXSA9IGZ1bmN0aW9uKCkge1xyXG5cdFx0XHRcdGRlZmVycmVkWyB0dXBsZVsgMCBdICsgXCJXaXRoXCIgXSggdGhpcyA9PT0gZGVmZXJyZWQgPyBwcm9taXNlIDogdGhpcywgYXJndW1lbnRzICk7XHJcblx0XHRcdFx0cmV0dXJuIHRoaXM7XHJcblx0XHRcdH07XHJcblx0XHRcdGRlZmVycmVkWyB0dXBsZVsgMCBdICsgXCJXaXRoXCIgXSA9IGxpc3QuZmlyZVdpdGg7XHJcblx0XHR9ICk7XHJcblxyXG5cdFx0Ly8gTWFrZSB0aGUgZGVmZXJyZWQgYSBwcm9taXNlXHJcblx0XHRwcm9taXNlLnByb21pc2UoIGRlZmVycmVkICk7XHJcblxyXG5cdFx0Ly8gQ2FsbCBnaXZlbiBmdW5jIGlmIGFueVxyXG5cdFx0aWYgKCBmdW5jICkge1xyXG5cdFx0XHRmdW5jLmNhbGwoIGRlZmVycmVkLCBkZWZlcnJlZCApO1xyXG5cdFx0fVxyXG5cclxuXHRcdC8vIEFsbCBkb25lIVxyXG5cdFx0cmV0dXJuIGRlZmVycmVkO1xyXG5cdH0sXHJcblxyXG5cdC8vIERlZmVycmVkIGhlbHBlclxyXG5cdHdoZW46IGZ1bmN0aW9uKCBzdWJvcmRpbmF0ZSAvKiAsIC4uLiwgc3Vib3JkaW5hdGVOICovICkge1xyXG5cdFx0dmFyIGkgPSAwLFxyXG5cdFx0XHRyZXNvbHZlVmFsdWVzID0gc2xpY2UuY2FsbCggYXJndW1lbnRzICksXHJcblx0XHRcdGxlbmd0aCA9IHJlc29sdmVWYWx1ZXMubGVuZ3RoLFxyXG5cclxuXHRcdFx0Ly8gdGhlIGNvdW50IG9mIHVuY29tcGxldGVkIHN1Ym9yZGluYXRlc1xyXG5cdFx0XHRyZW1haW5pbmcgPSBsZW5ndGggIT09IDEgfHxcclxuXHRcdFx0XHQoIHN1Ym9yZGluYXRlICYmIGpRdWVyeS5pc0Z1bmN0aW9uKCBzdWJvcmRpbmF0ZS5wcm9taXNlICkgKSA/IGxlbmd0aCA6IDAsXHJcblxyXG5cdFx0XHQvLyB0aGUgbWFzdGVyIERlZmVycmVkLlxyXG5cdFx0XHQvLyBJZiByZXNvbHZlVmFsdWVzIGNvbnNpc3Qgb2Ygb25seSBhIHNpbmdsZSBEZWZlcnJlZCwganVzdCB1c2UgdGhhdC5cclxuXHRcdFx0ZGVmZXJyZWQgPSByZW1haW5pbmcgPT09IDEgPyBzdWJvcmRpbmF0ZSA6IGpRdWVyeS5EZWZlcnJlZCgpLFxyXG5cclxuXHRcdFx0Ly8gVXBkYXRlIGZ1bmN0aW9uIGZvciBib3RoIHJlc29sdmUgYW5kIHByb2dyZXNzIHZhbHVlc1xyXG5cdFx0XHR1cGRhdGVGdW5jID0gZnVuY3Rpb24oIGksIGNvbnRleHRzLCB2YWx1ZXMgKSB7XHJcblx0XHRcdFx0cmV0dXJuIGZ1bmN0aW9uKCB2YWx1ZSApIHtcclxuXHRcdFx0XHRcdGNvbnRleHRzWyBpIF0gPSB0aGlzO1xyXG5cdFx0XHRcdFx0dmFsdWVzWyBpIF0gPSBhcmd1bWVudHMubGVuZ3RoID4gMSA/IHNsaWNlLmNhbGwoIGFyZ3VtZW50cyApIDogdmFsdWU7XHJcblx0XHRcdFx0XHRpZiAoIHZhbHVlcyA9PT0gcHJvZ3Jlc3NWYWx1ZXMgKSB7XHJcblx0XHRcdFx0XHRcdGRlZmVycmVkLm5vdGlmeVdpdGgoIGNvbnRleHRzLCB2YWx1ZXMgKTtcclxuXHRcdFx0XHRcdH0gZWxzZSBpZiAoICEoIC0tcmVtYWluaW5nICkgKSB7XHJcblx0XHRcdFx0XHRcdGRlZmVycmVkLnJlc29sdmVXaXRoKCBjb250ZXh0cywgdmFsdWVzICk7XHJcblx0XHRcdFx0XHR9XHJcblx0XHRcdFx0fTtcclxuXHRcdFx0fSxcclxuXHJcblx0XHRcdHByb2dyZXNzVmFsdWVzLCBwcm9ncmVzc0NvbnRleHRzLCByZXNvbHZlQ29udGV4dHM7XHJcblxyXG5cdFx0Ly8gQWRkIGxpc3RlbmVycyB0byBEZWZlcnJlZCBzdWJvcmRpbmF0ZXM7IHRyZWF0IG90aGVycyBhcyByZXNvbHZlZFxyXG5cdFx0aWYgKCBsZW5ndGggPiAxICkge1xyXG5cdFx0XHRwcm9ncmVzc1ZhbHVlcyA9IG5ldyBBcnJheSggbGVuZ3RoICk7XHJcblx0XHRcdHByb2dyZXNzQ29udGV4dHMgPSBuZXcgQXJyYXkoIGxlbmd0aCApO1xyXG5cdFx0XHRyZXNvbHZlQ29udGV4dHMgPSBuZXcgQXJyYXkoIGxlbmd0aCApO1xyXG5cdFx0XHRmb3IgKCA7IGkgPCBsZW5ndGg7IGkrKyApIHtcclxuXHRcdFx0XHRpZiAoIHJlc29sdmVWYWx1ZXNbIGkgXSAmJiBqUXVlcnkuaXNGdW5jdGlvbiggcmVzb2x2ZVZhbHVlc1sgaSBdLnByb21pc2UgKSApIHtcclxuXHRcdFx0XHRcdHJlc29sdmVWYWx1ZXNbIGkgXS5wcm9taXNlKClcclxuXHRcdFx0XHRcdFx0LnByb2dyZXNzKCB1cGRhdGVGdW5jKCBpLCBwcm9ncmVzc0NvbnRleHRzLCBwcm9ncmVzc1ZhbHVlcyApIClcclxuXHRcdFx0XHRcdFx0LmRvbmUoIHVwZGF0ZUZ1bmMoIGksIHJlc29sdmVDb250ZXh0cywgcmVzb2x2ZVZhbHVlcyApIClcclxuXHRcdFx0XHRcdFx0LmZhaWwoIGRlZmVycmVkLnJlamVjdCApO1xyXG5cdFx0XHRcdH0gZWxzZSB7XHJcblx0XHRcdFx0XHQtLXJlbWFpbmluZztcclxuXHRcdFx0XHR9XHJcblx0XHRcdH1cclxuXHRcdH1cclxuXHJcblx0XHQvLyBJZiB3ZSdyZSBub3Qgd2FpdGluZyBvbiBhbnl0aGluZywgcmVzb2x2ZSB0aGUgbWFzdGVyXHJcblx0XHRpZiAoICFyZW1haW5pbmcgKSB7XHJcblx0XHRcdGRlZmVycmVkLnJlc29sdmVXaXRoKCByZXNvbHZlQ29udGV4dHMsIHJlc29sdmVWYWx1ZXMgKTtcclxuXHRcdH1cclxuXHJcblx0XHRyZXR1cm4gZGVmZXJyZWQucHJvbWlzZSgpO1xyXG5cdH1cclxufSApO1xyXG5cclxuXHJcbi8vIFRoZSBkZWZlcnJlZCB1c2VkIG9uIERPTSByZWFkeVxyXG52YXIgcmVhZHlMaXN0O1xyXG5cclxualF1ZXJ5LmZuLnJlYWR5ID0gZnVuY3Rpb24oIGZuICkge1xyXG5cclxuXHQvLyBBZGQgdGhlIGNhbGxiYWNrXHJcblx0alF1ZXJ5LnJlYWR5LnByb21pc2UoKS5kb25lKCBmbiApO1xyXG5cclxuXHRyZXR1cm4gdGhpcztcclxufTtcclxuXHJcbmpRdWVyeS5leHRlbmQoIHtcclxuXHJcblx0Ly8gSXMgdGhlIERPTSByZWFkeSB0byBiZSB1c2VkPyBTZXQgdG8gdHJ1ZSBvbmNlIGl0IG9jY3Vycy5cclxuXHRpc1JlYWR5OiBmYWxzZSxcclxuXHJcblx0Ly8gQSBjb3VudGVyIHRvIHRyYWNrIGhvdyBtYW55IGl0ZW1zIHRvIHdhaXQgZm9yIGJlZm9yZVxyXG5cdC8vIHRoZSByZWFkeSBldmVudCBmaXJlcy4gU2VlICM2NzgxXHJcblx0cmVhZHlXYWl0OiAxLFxyXG5cclxuXHQvLyBIb2xkIChvciByZWxlYXNlKSB0aGUgcmVhZHkgZXZlbnRcclxuXHRob2xkUmVhZHk6IGZ1bmN0aW9uKCBob2xkICkge1xyXG5cdFx0aWYgKCBob2xkICkge1xyXG5cdFx0XHRqUXVlcnkucmVhZHlXYWl0Kys7XHJcblx0XHR9IGVsc2Uge1xyXG5cdFx0XHRqUXVlcnkucmVhZHkoIHRydWUgKTtcclxuXHRcdH1cclxuXHR9LFxyXG5cclxuXHQvLyBIYW5kbGUgd2hlbiB0aGUgRE9NIGlzIHJlYWR5XHJcblx0cmVhZHk6IGZ1bmN0aW9uKCB3YWl0ICkge1xyXG5cclxuXHRcdC8vIEFib3J0IGlmIHRoZXJlIGFyZSBwZW5kaW5nIGhvbGRzIG9yIHdlJ3JlIGFscmVhZHkgcmVhZHlcclxuXHRcdGlmICggd2FpdCA9PT0gdHJ1ZSA/IC0talF1ZXJ5LnJlYWR5V2FpdCA6IGpRdWVyeS5pc1JlYWR5ICkge1xyXG5cdFx0XHRyZXR1cm47XHJcblx0XHR9XHJcblxyXG5cdFx0Ly8gUmVtZW1iZXIgdGhhdCB0aGUgRE9NIGlzIHJlYWR5XHJcblx0XHRqUXVlcnkuaXNSZWFkeSA9IHRydWU7XHJcblxyXG5cdFx0Ly8gSWYgYSBub3JtYWwgRE9NIFJlYWR5IGV2ZW50IGZpcmVkLCBkZWNyZW1lbnQsIGFuZCB3YWl0IGlmIG5lZWQgYmVcclxuXHRcdGlmICggd2FpdCAhPT0gdHJ1ZSAmJiAtLWpRdWVyeS5yZWFkeVdhaXQgPiAwICkge1xyXG5cdFx0XHRyZXR1cm47XHJcblx0XHR9XHJcblxyXG5cdFx0Ly8gSWYgdGhlcmUgYXJlIGZ1bmN0aW9ucyBib3VuZCwgdG8gZXhlY3V0ZVxyXG5cdFx0cmVhZHlMaXN0LnJlc29sdmVXaXRoKCBkb2N1bWVudCwgWyBqUXVlcnkgXSApO1xyXG5cclxuXHRcdC8vIFRyaWdnZXIgYW55IGJvdW5kIHJlYWR5IGV2ZW50c1xyXG5cdFx0aWYgKCBqUXVlcnkuZm4udHJpZ2dlckhhbmRsZXIgKSB7XHJcblx0XHRcdGpRdWVyeSggZG9jdW1lbnQgKS50cmlnZ2VySGFuZGxlciggXCJyZWFkeVwiICk7XHJcblx0XHRcdGpRdWVyeSggZG9jdW1lbnQgKS5vZmYoIFwicmVhZHlcIiApO1xyXG5cdFx0fVxyXG5cdH1cclxufSApO1xyXG5cclxuLyoqXHJcbiAqIFRoZSByZWFkeSBldmVudCBoYW5kbGVyIGFuZCBzZWxmIGNsZWFudXAgbWV0aG9kXHJcbiAqL1xyXG5mdW5jdGlvbiBjb21wbGV0ZWQoKSB7XHJcblx0ZG9jdW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lciggXCJET01Db250ZW50TG9hZGVkXCIsIGNvbXBsZXRlZCApO1xyXG5cdHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKCBcImxvYWRcIiwgY29tcGxldGVkICk7XHJcblx0alF1ZXJ5LnJlYWR5KCk7XHJcbn1cclxuXHJcbmpRdWVyeS5yZWFkeS5wcm9taXNlID0gZnVuY3Rpb24oIG9iaiApIHtcclxuXHRpZiAoICFyZWFkeUxpc3QgKSB7XHJcblxyXG5cdFx0cmVhZHlMaXN0ID0galF1ZXJ5LkRlZmVycmVkKCk7XHJcblxyXG5cdFx0Ly8gQ2F0Y2ggY2FzZXMgd2hlcmUgJChkb2N1bWVudCkucmVhZHkoKSBpcyBjYWxsZWRcclxuXHRcdC8vIGFmdGVyIHRoZSBicm93c2VyIGV2ZW50IGhhcyBhbHJlYWR5IG9jY3VycmVkLlxyXG5cdFx0Ly8gU3VwcG9ydDogSUU5LTEwIG9ubHlcclxuXHRcdC8vIE9sZGVyIElFIHNvbWV0aW1lcyBzaWduYWxzIFwiaW50ZXJhY3RpdmVcIiB0b28gc29vblxyXG5cdFx0aWYgKCBkb2N1bWVudC5yZWFkeVN0YXRlID09PSBcImNvbXBsZXRlXCIgfHxcclxuXHRcdFx0KCBkb2N1bWVudC5yZWFkeVN0YXRlICE9PSBcImxvYWRpbmdcIiAmJiAhZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LmRvU2Nyb2xsICkgKSB7XHJcblxyXG5cdFx0XHQvLyBIYW5kbGUgaXQgYXN5bmNocm9ub3VzbHkgdG8gYWxsb3cgc2NyaXB0cyB0aGUgb3Bwb3J0dW5pdHkgdG8gZGVsYXkgcmVhZHlcclxuXHRcdFx0d2luZG93LnNldFRpbWVvdXQoIGpRdWVyeS5yZWFkeSApO1xyXG5cclxuXHRcdH0gZWxzZSB7XHJcblxyXG5cdFx0XHQvLyBVc2UgdGhlIGhhbmR5IGV2ZW50IGNhbGxiYWNrXHJcblx0XHRcdGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoIFwiRE9NQ29udGVudExvYWRlZFwiLCBjb21wbGV0ZWQgKTtcclxuXHJcblx0XHRcdC8vIEEgZmFsbGJhY2sgdG8gd2luZG93Lm9ubG9hZCwgdGhhdCB3aWxsIGFsd2F5cyB3b3JrXHJcblx0XHRcdHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCBcImxvYWRcIiwgY29tcGxldGVkICk7XHJcblx0XHR9XHJcblx0fVxyXG5cdHJldHVybiByZWFkeUxpc3QucHJvbWlzZSggb2JqICk7XHJcbn07XHJcblxyXG4vLyBLaWNrIG9mZiB0aGUgRE9NIHJlYWR5IGNoZWNrIGV2ZW4gaWYgdGhlIHVzZXIgZG9lcyBub3RcclxualF1ZXJ5LnJlYWR5LnByb21pc2UoKTtcclxuXHJcblxyXG5cclxuXHJcbi8vIE11bHRpZnVuY3Rpb25hbCBtZXRob2QgdG8gZ2V0IGFuZCBzZXQgdmFsdWVzIG9mIGEgY29sbGVjdGlvblxyXG4vLyBUaGUgdmFsdWUvcyBjYW4gb3B0aW9uYWxseSBiZSBleGVjdXRlZCBpZiBpdCdzIGEgZnVuY3Rpb25cclxudmFyIGFjY2VzcyA9IGZ1bmN0aW9uKCBlbGVtcywgZm4sIGtleSwgdmFsdWUsIGNoYWluYWJsZSwgZW1wdHlHZXQsIHJhdyApIHtcclxuXHR2YXIgaSA9IDAsXHJcblx0XHRsZW4gPSBlbGVtcy5sZW5ndGgsXHJcblx0XHRidWxrID0ga2V5ID09IG51bGw7XHJcblxyXG5cdC8vIFNldHMgbWFueSB2YWx1ZXNcclxuXHRpZiAoIGpRdWVyeS50eXBlKCBrZXkgKSA9PT0gXCJvYmplY3RcIiApIHtcclxuXHRcdGNoYWluYWJsZSA9IHRydWU7XHJcblx0XHRmb3IgKCBpIGluIGtleSApIHtcclxuXHRcdFx0YWNjZXNzKCBlbGVtcywgZm4sIGksIGtleVsgaSBdLCB0cnVlLCBlbXB0eUdldCwgcmF3ICk7XHJcblx0XHR9XHJcblxyXG5cdC8vIFNldHMgb25lIHZhbHVlXHJcblx0fSBlbHNlIGlmICggdmFsdWUgIT09IHVuZGVmaW5lZCApIHtcclxuXHRcdGNoYWluYWJsZSA9IHRydWU7XHJcblxyXG5cdFx0aWYgKCAhalF1ZXJ5LmlzRnVuY3Rpb24oIHZhbHVlICkgKSB7XHJcblx0XHRcdHJhdyA9IHRydWU7XHJcblx0XHR9XHJcblxyXG5cdFx0aWYgKCBidWxrICkge1xyXG5cclxuXHRcdFx0Ly8gQnVsayBvcGVyYXRpb25zIHJ1biBhZ2FpbnN0IHRoZSBlbnRpcmUgc2V0XHJcblx0XHRcdGlmICggcmF3ICkge1xyXG5cdFx0XHRcdGZuLmNhbGwoIGVsZW1zLCB2YWx1ZSApO1xyXG5cdFx0XHRcdGZuID0gbnVsbDtcclxuXHJcblx0XHRcdC8vIC4uLmV4Y2VwdCB3aGVuIGV4ZWN1dGluZyBmdW5jdGlvbiB2YWx1ZXNcclxuXHRcdFx0fSBlbHNlIHtcclxuXHRcdFx0XHRidWxrID0gZm47XHJcblx0XHRcdFx0Zm4gPSBmdW5jdGlvbiggZWxlbSwga2V5LCB2YWx1ZSApIHtcclxuXHRcdFx0XHRcdHJldHVybiBidWxrLmNhbGwoIGpRdWVyeSggZWxlbSApLCB2YWx1ZSApO1xyXG5cdFx0XHRcdH07XHJcblx0XHRcdH1cclxuXHRcdH1cclxuXHJcblx0XHRpZiAoIGZuICkge1xyXG5cdFx0XHRmb3IgKCA7IGkgPCBsZW47IGkrKyApIHtcclxuXHRcdFx0XHRmbihcclxuXHRcdFx0XHRcdGVsZW1zWyBpIF0sIGtleSwgcmF3ID9cclxuXHRcdFx0XHRcdHZhbHVlIDpcclxuXHRcdFx0XHRcdHZhbHVlLmNhbGwoIGVsZW1zWyBpIF0sIGksIGZuKCBlbGVtc1sgaSBdLCBrZXkgKSApXHJcblx0XHRcdFx0KTtcclxuXHRcdFx0fVxyXG5cdFx0fVxyXG5cdH1cclxuXHJcblx0cmV0dXJuIGNoYWluYWJsZSA/XHJcblx0XHRlbGVtcyA6XHJcblxyXG5cdFx0Ly8gR2V0c1xyXG5cdFx0YnVsayA/XHJcblx0XHRcdGZuLmNhbGwoIGVsZW1zICkgOlxyXG5cdFx0XHRsZW4gPyBmbiggZWxlbXNbIDAgXSwga2V5ICkgOiBlbXB0eUdldDtcclxufTtcclxudmFyIGFjY2VwdERhdGEgPSBmdW5jdGlvbiggb3duZXIgKSB7XHJcblxyXG5cdC8vIEFjY2VwdHMgb25seTpcclxuXHQvLyAgLSBOb2RlXHJcblx0Ly8gICAgLSBOb2RlLkVMRU1FTlRfTk9ERVxyXG5cdC8vICAgIC0gTm9kZS5ET0NVTUVOVF9OT0RFXHJcblx0Ly8gIC0gT2JqZWN0XHJcblx0Ly8gICAgLSBBbnlcclxuXHQvKiBqc2hpbnQgLVcwMTggKi9cclxuXHRyZXR1cm4gb3duZXIubm9kZVR5cGUgPT09IDEgfHwgb3duZXIubm9kZVR5cGUgPT09IDkgfHwgISggK293bmVyLm5vZGVUeXBlICk7XHJcbn07XHJcblxyXG5cclxuXHJcblxyXG5mdW5jdGlvbiBEYXRhKCkge1xyXG5cdHRoaXMuZXhwYW5kbyA9IGpRdWVyeS5leHBhbmRvICsgRGF0YS51aWQrKztcclxufVxyXG5cclxuRGF0YS51aWQgPSAxO1xyXG5cclxuRGF0YS5wcm90b3R5cGUgPSB7XHJcblxyXG5cdHJlZ2lzdGVyOiBmdW5jdGlvbiggb3duZXIsIGluaXRpYWwgKSB7XHJcblx0XHR2YXIgdmFsdWUgPSBpbml0aWFsIHx8IHt9O1xyXG5cclxuXHRcdC8vIElmIGl0IGlzIGEgbm9kZSB1bmxpa2VseSB0byBiZSBzdHJpbmdpZnktZWQgb3IgbG9vcGVkIG92ZXJcclxuXHRcdC8vIHVzZSBwbGFpbiBhc3NpZ25tZW50XHJcblx0XHRpZiAoIG93bmVyLm5vZGVUeXBlICkge1xyXG5cdFx0XHRvd25lclsgdGhpcy5leHBhbmRvIF0gPSB2YWx1ZTtcclxuXHJcblx0XHQvLyBPdGhlcndpc2Ugc2VjdXJlIGl0IGluIGEgbm9uLWVudW1lcmFibGUsIG5vbi13cml0YWJsZSBwcm9wZXJ0eVxyXG5cdFx0Ly8gY29uZmlndXJhYmlsaXR5IG11c3QgYmUgdHJ1ZSB0byBhbGxvdyB0aGUgcHJvcGVydHkgdG8gYmVcclxuXHRcdC8vIGRlbGV0ZWQgd2l0aCB0aGUgZGVsZXRlIG9wZXJhdG9yXHJcblx0XHR9IGVsc2Uge1xyXG5cdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoIG93bmVyLCB0aGlzLmV4cGFuZG8sIHtcclxuXHRcdFx0XHR2YWx1ZTogdmFsdWUsXHJcblx0XHRcdFx0d3JpdGFibGU6IHRydWUsXHJcblx0XHRcdFx0Y29uZmlndXJhYmxlOiB0cnVlXHJcblx0XHRcdH0gKTtcclxuXHRcdH1cclxuXHRcdHJldHVybiBvd25lclsgdGhpcy5leHBhbmRvIF07XHJcblx0fSxcclxuXHRjYWNoZTogZnVuY3Rpb24oIG93bmVyICkge1xyXG5cclxuXHRcdC8vIFdlIGNhbiBhY2NlcHQgZGF0YSBmb3Igbm9uLWVsZW1lbnQgbm9kZXMgaW4gbW9kZXJuIGJyb3dzZXJzLFxyXG5cdFx0Ly8gYnV0IHdlIHNob3VsZCBub3QsIHNlZSAjODMzNS5cclxuXHRcdC8vIEFsd2F5cyByZXR1cm4gYW4gZW1wdHkgb2JqZWN0LlxyXG5cdFx0aWYgKCAhYWNjZXB0RGF0YSggb3duZXIgKSApIHtcclxuXHRcdFx0cmV0dXJuIHt9O1xyXG5cdFx0fVxyXG5cclxuXHRcdC8vIENoZWNrIGlmIHRoZSBvd25lciBvYmplY3QgYWxyZWFkeSBoYXMgYSBjYWNoZVxyXG5cdFx0dmFyIHZhbHVlID0gb3duZXJbIHRoaXMuZXhwYW5kbyBdO1xyXG5cclxuXHRcdC8vIElmIG5vdCwgY3JlYXRlIG9uZVxyXG5cdFx0aWYgKCAhdmFsdWUgKSB7XHJcblx0XHRcdHZhbHVlID0ge307XHJcblxyXG5cdFx0XHQvLyBXZSBjYW4gYWNjZXB0IGRhdGEgZm9yIG5vbi1lbGVtZW50IG5vZGVzIGluIG1vZGVybiBicm93c2VycyxcclxuXHRcdFx0Ly8gYnV0IHdlIHNob3VsZCBub3QsIHNlZSAjODMzNS5cclxuXHRcdFx0Ly8gQWx3YXlzIHJldHVybiBhbiBlbXB0eSBvYmplY3QuXHJcblx0XHRcdGlmICggYWNjZXB0RGF0YSggb3duZXIgKSApIHtcclxuXHJcblx0XHRcdFx0Ly8gSWYgaXQgaXMgYSBub2RlIHVubGlrZWx5IHRvIGJlIHN0cmluZ2lmeS1lZCBvciBsb29wZWQgb3ZlclxyXG5cdFx0XHRcdC8vIHVzZSBwbGFpbiBhc3NpZ25tZW50XHJcblx0XHRcdFx0aWYgKCBvd25lci5ub2RlVHlwZSApIHtcclxuXHRcdFx0XHRcdG93bmVyWyB0aGlzLmV4cGFuZG8gXSA9IHZhbHVlO1xyXG5cclxuXHRcdFx0XHQvLyBPdGhlcndpc2Ugc2VjdXJlIGl0IGluIGEgbm9uLWVudW1lcmFibGUgcHJvcGVydHlcclxuXHRcdFx0XHQvLyBjb25maWd1cmFibGUgbXVzdCBiZSB0cnVlIHRvIGFsbG93IHRoZSBwcm9wZXJ0eSB0byBiZVxyXG5cdFx0XHRcdC8vIGRlbGV0ZWQgd2hlbiBkYXRhIGlzIHJlbW92ZWRcclxuXHRcdFx0XHR9IGVsc2Uge1xyXG5cdFx0XHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KCBvd25lciwgdGhpcy5leHBhbmRvLCB7XHJcblx0XHRcdFx0XHRcdHZhbHVlOiB2YWx1ZSxcclxuXHRcdFx0XHRcdFx0Y29uZmlndXJhYmxlOiB0cnVlXHJcblx0XHRcdFx0XHR9ICk7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9XHJcblx0XHR9XHJcblxyXG5cdFx0cmV0dXJuIHZhbHVlO1xyXG5cdH0sXHJcblx0c2V0OiBmdW5jdGlvbiggb3duZXIsIGRhdGEsIHZhbHVlICkge1xyXG5cdFx0dmFyIHByb3AsXHJcblx0XHRcdGNhY2hlID0gdGhpcy5jYWNoZSggb3duZXIgKTtcclxuXHJcblx0XHQvLyBIYW5kbGU6IFsgb3duZXIsIGtleSwgdmFsdWUgXSBhcmdzXHJcblx0XHRpZiAoIHR5cGVvZiBkYXRhID09PSBcInN0cmluZ1wiICkge1xyXG5cdFx0XHRjYWNoZVsgZGF0YSBdID0gdmFsdWU7XHJcblxyXG5cdFx0Ly8gSGFuZGxlOiBbIG93bmVyLCB7IHByb3BlcnRpZXMgfSBdIGFyZ3NcclxuXHRcdH0gZWxzZSB7XHJcblxyXG5cdFx0XHQvLyBDb3B5IHRoZSBwcm9wZXJ0aWVzIG9uZS1ieS1vbmUgdG8gdGhlIGNhY2hlIG9iamVjdFxyXG5cdFx0XHRmb3IgKCBwcm9wIGluIGRhdGEgKSB7XHJcblx0XHRcdFx0Y2FjaGVbIHByb3AgXSA9IGRhdGFbIHByb3AgXTtcclxuXHRcdFx0fVxyXG5cdFx0fVxyXG5cdFx0cmV0dXJuIGNhY2hlO1xyXG5cdH0sXHJcblx0Z2V0OiBmdW5jdGlvbiggb3duZXIsIGtleSApIHtcclxuXHRcdHJldHVybiBrZXkgPT09IHVuZGVmaW5lZCA/XHJcblx0XHRcdHRoaXMuY2FjaGUoIG93bmVyICkgOlxyXG5cdFx0XHRvd25lclsgdGhpcy5leHBhbmRvIF0gJiYgb3duZXJbIHRoaXMuZXhwYW5kbyBdWyBrZXkgXTtcclxuXHR9LFxyXG5cdGFjY2VzczogZnVuY3Rpb24oIG93bmVyLCBrZXksIHZhbHVlICkge1xyXG5cdFx0dmFyIHN0b3JlZDtcclxuXHJcblx0XHQvLyBJbiBjYXNlcyB3aGVyZSBlaXRoZXI6XHJcblx0XHQvL1xyXG5cdFx0Ly8gICAxLiBObyBrZXkgd2FzIHNwZWNpZmllZFxyXG5cdFx0Ly8gICAyLiBBIHN0cmluZyBrZXkgd2FzIHNwZWNpZmllZCwgYnV0IG5vIHZhbHVlIHByb3ZpZGVkXHJcblx0XHQvL1xyXG5cdFx0Ly8gVGFrZSB0aGUgXCJyZWFkXCIgcGF0aCBhbmQgYWxsb3cgdGhlIGdldCBtZXRob2QgdG8gZGV0ZXJtaW5lXHJcblx0XHQvLyB3aGljaCB2YWx1ZSB0byByZXR1cm4sIHJlc3BlY3RpdmVseSBlaXRoZXI6XHJcblx0XHQvL1xyXG5cdFx0Ly8gICAxLiBUaGUgZW50aXJlIGNhY2hlIG9iamVjdFxyXG5cdFx0Ly8gICAyLiBUaGUgZGF0YSBzdG9yZWQgYXQgdGhlIGtleVxyXG5cdFx0Ly9cclxuXHRcdGlmICgga2V5ID09PSB1bmRlZmluZWQgfHxcclxuXHRcdFx0XHQoICgga2V5ICYmIHR5cGVvZiBrZXkgPT09IFwic3RyaW5nXCIgKSAmJiB2YWx1ZSA9PT0gdW5kZWZpbmVkICkgKSB7XHJcblxyXG5cdFx0XHRzdG9yZWQgPSB0aGlzLmdldCggb3duZXIsIGtleSApO1xyXG5cclxuXHRcdFx0cmV0dXJuIHN0b3JlZCAhPT0gdW5kZWZpbmVkID9cclxuXHRcdFx0XHRzdG9yZWQgOiB0aGlzLmdldCggb3duZXIsIGpRdWVyeS5jYW1lbENhc2UoIGtleSApICk7XHJcblx0XHR9XHJcblxyXG5cdFx0Ly8gV2hlbiB0aGUga2V5IGlzIG5vdCBhIHN0cmluZywgb3IgYm90aCBhIGtleSBhbmQgdmFsdWVcclxuXHRcdC8vIGFyZSBzcGVjaWZpZWQsIHNldCBvciBleHRlbmQgKGV4aXN0aW5nIG9iamVjdHMpIHdpdGggZWl0aGVyOlxyXG5cdFx0Ly9cclxuXHRcdC8vICAgMS4gQW4gb2JqZWN0IG9mIHByb3BlcnRpZXNcclxuXHRcdC8vICAgMi4gQSBrZXkgYW5kIHZhbHVlXHJcblx0XHQvL1xyXG5cdFx0dGhpcy5zZXQoIG93bmVyLCBrZXksIHZhbHVlICk7XHJcblxyXG5cdFx0Ly8gU2luY2UgdGhlIFwic2V0XCIgcGF0aCBjYW4gaGF2ZSB0d28gcG9zc2libGUgZW50cnkgcG9pbnRzXHJcblx0XHQvLyByZXR1cm4gdGhlIGV4cGVjdGVkIGRhdGEgYmFzZWQgb24gd2hpY2ggcGF0aCB3YXMgdGFrZW5bKl1cclxuXHRcdHJldHVybiB2YWx1ZSAhPT0gdW5kZWZpbmVkID8gdmFsdWUgOiBrZXk7XHJcblx0fSxcclxuXHRyZW1vdmU6IGZ1bmN0aW9uKCBvd25lciwga2V5ICkge1xyXG5cdFx0dmFyIGksIG5hbWUsIGNhbWVsLFxyXG5cdFx0XHRjYWNoZSA9IG93bmVyWyB0aGlzLmV4cGFuZG8gXTtcclxuXHJcblx0XHRpZiAoIGNhY2hlID09PSB1bmRlZmluZWQgKSB7XHJcblx0XHRcdHJldHVybjtcclxuXHRcdH1cclxuXHJcblx0XHRpZiAoIGtleSA9PT0gdW5kZWZpbmVkICkge1xyXG5cdFx0XHR0aGlzLnJlZ2lzdGVyKCBvd25lciApO1xyXG5cclxuXHRcdH0gZWxzZSB7XHJcblxyXG5cdFx0XHQvLyBTdXBwb3J0IGFycmF5IG9yIHNwYWNlIHNlcGFyYXRlZCBzdHJpbmcgb2Yga2V5c1xyXG5cdFx0XHRpZiAoIGpRdWVyeS5pc0FycmF5KCBrZXkgKSApIHtcclxuXHJcblx0XHRcdFx0Ly8gSWYgXCJuYW1lXCIgaXMgYW4gYXJyYXkgb2Yga2V5cy4uLlxyXG5cdFx0XHRcdC8vIFdoZW4gZGF0YSBpcyBpbml0aWFsbHkgY3JlYXRlZCwgdmlhIChcImtleVwiLCBcInZhbFwiKSBzaWduYXR1cmUsXHJcblx0XHRcdFx0Ly8ga2V5cyB3aWxsIGJlIGNvbnZlcnRlZCB0byBjYW1lbENhc2UuXHJcblx0XHRcdFx0Ly8gU2luY2UgdGhlcmUgaXMgbm8gd2F5IHRvIHRlbGwgX2hvd18gYSBrZXkgd2FzIGFkZGVkLCByZW1vdmVcclxuXHRcdFx0XHQvLyBib3RoIHBsYWluIGtleSBhbmQgY2FtZWxDYXNlIGtleS4gIzEyNzg2XHJcblx0XHRcdFx0Ly8gVGhpcyB3aWxsIG9ubHkgcGVuYWxpemUgdGhlIGFycmF5IGFyZ3VtZW50IHBhdGguXHJcblx0XHRcdFx0bmFtZSA9IGtleS5jb25jYXQoIGtleS5tYXAoIGpRdWVyeS5jYW1lbENhc2UgKSApO1xyXG5cdFx0XHR9IGVsc2Uge1xyXG5cdFx0XHRcdGNhbWVsID0galF1ZXJ5LmNhbWVsQ2FzZSgga2V5ICk7XHJcblxyXG5cdFx0XHRcdC8vIFRyeSB0aGUgc3RyaW5nIGFzIGEga2V5IGJlZm9yZSBhbnkgbWFuaXB1bGF0aW9uXHJcblx0XHRcdFx0aWYgKCBrZXkgaW4gY2FjaGUgKSB7XHJcblx0XHRcdFx0XHRuYW1lID0gWyBrZXksIGNhbWVsIF07XHJcblx0XHRcdFx0fSBlbHNlIHtcclxuXHJcblx0XHRcdFx0XHQvLyBJZiBhIGtleSB3aXRoIHRoZSBzcGFjZXMgZXhpc3RzLCB1c2UgaXQuXHJcblx0XHRcdFx0XHQvLyBPdGhlcndpc2UsIGNyZWF0ZSBhbiBhcnJheSBieSBtYXRjaGluZyBub24td2hpdGVzcGFjZVxyXG5cdFx0XHRcdFx0bmFtZSA9IGNhbWVsO1xyXG5cdFx0XHRcdFx0bmFtZSA9IG5hbWUgaW4gY2FjaGUgP1xyXG5cdFx0XHRcdFx0XHRbIG5hbWUgXSA6ICggbmFtZS5tYXRjaCggcm5vdHdoaXRlICkgfHwgW10gKTtcclxuXHRcdFx0XHR9XHJcblx0XHRcdH1cclxuXHJcblx0XHRcdGkgPSBuYW1lLmxlbmd0aDtcclxuXHJcblx0XHRcdHdoaWxlICggaS0tICkge1xyXG5cdFx0XHRcdGRlbGV0ZSBjYWNoZVsgbmFtZVsgaSBdIF07XHJcblx0XHRcdH1cclxuXHRcdH1cclxuXHJcblx0XHQvLyBSZW1vdmUgdGhlIGV4cGFuZG8gaWYgdGhlcmUncyBubyBtb3JlIGRhdGFcclxuXHRcdGlmICgga2V5ID09PSB1bmRlZmluZWQgfHwgalF1ZXJ5LmlzRW1wdHlPYmplY3QoIGNhY2hlICkgKSB7XHJcblxyXG5cdFx0XHQvLyBTdXBwb3J0OiBDaHJvbWUgPD0gMzUtNDUrXHJcblx0XHRcdC8vIFdlYmtpdCAmIEJsaW5rIHBlcmZvcm1hbmNlIHN1ZmZlcnMgd2hlbiBkZWxldGluZyBwcm9wZXJ0aWVzXHJcblx0XHRcdC8vIGZyb20gRE9NIG5vZGVzLCBzbyBzZXQgdG8gdW5kZWZpbmVkIGluc3RlYWRcclxuXHRcdFx0Ly8gaHR0cHM6Ly9jb2RlLmdvb2dsZS5jb20vcC9jaHJvbWl1bS9pc3N1ZXMvZGV0YWlsP2lkPTM3ODYwN1xyXG5cdFx0XHRpZiAoIG93bmVyLm5vZGVUeXBlICkge1xyXG5cdFx0XHRcdG93bmVyWyB0aGlzLmV4cGFuZG8gXSA9IHVuZGVmaW5lZDtcclxuXHRcdFx0fSBlbHNlIHtcclxuXHRcdFx0XHRkZWxldGUgb3duZXJbIHRoaXMuZXhwYW5kbyBdO1xyXG5cdFx0XHR9XHJcblx0XHR9XHJcblx0fSxcclxuXHRoYXNEYXRhOiBmdW5jdGlvbiggb3duZXIgKSB7XHJcblx0XHR2YXIgY2FjaGUgPSBvd25lclsgdGhpcy5leHBhbmRvIF07XHJcblx0XHRyZXR1cm4gY2FjaGUgIT09IHVuZGVmaW5lZCAmJiAhalF1ZXJ5LmlzRW1wdHlPYmplY3QoIGNhY2hlICk7XHJcblx0fVxyXG59O1xyXG52YXIgZGF0YVByaXYgPSBuZXcgRGF0YSgpO1xyXG5cclxudmFyIGRhdGFVc2VyID0gbmV3IERhdGEoKTtcclxuXHJcblxyXG5cclxuLy9cdEltcGxlbWVudGF0aW9uIFN1bW1hcnlcclxuLy9cclxuLy9cdDEuIEVuZm9yY2UgQVBJIHN1cmZhY2UgYW5kIHNlbWFudGljIGNvbXBhdGliaWxpdHkgd2l0aCAxLjkueCBicmFuY2hcclxuLy9cdDIuIEltcHJvdmUgdGhlIG1vZHVsZSdzIG1haW50YWluYWJpbGl0eSBieSByZWR1Y2luZyB0aGUgc3RvcmFnZVxyXG4vL1x0XHRwYXRocyB0byBhIHNpbmdsZSBtZWNoYW5pc20uXHJcbi8vXHQzLiBVc2UgdGhlIHNhbWUgc2luZ2xlIG1lY2hhbmlzbSB0byBzdXBwb3J0IFwicHJpdmF0ZVwiIGFuZCBcInVzZXJcIiBkYXRhLlxyXG4vL1x0NC4gX05ldmVyXyBleHBvc2UgXCJwcml2YXRlXCIgZGF0YSB0byB1c2VyIGNvZGUgKFRPRE86IERyb3AgX2RhdGEsIF9yZW1vdmVEYXRhKVxyXG4vL1x0NS4gQXZvaWQgZXhwb3NpbmcgaW1wbGVtZW50YXRpb24gZGV0YWlscyBvbiB1c2VyIG9iamVjdHMgKGVnLiBleHBhbmRvIHByb3BlcnRpZXMpXHJcbi8vXHQ2LiBQcm92aWRlIGEgY2xlYXIgcGF0aCBmb3IgaW1wbGVtZW50YXRpb24gdXBncmFkZSB0byBXZWFrTWFwIGluIDIwMTRcclxuXHJcbnZhciByYnJhY2UgPSAvXig/Olxce1tcXHdcXFddKlxcfXxcXFtbXFx3XFxXXSpcXF0pJC8sXHJcblx0cm11bHRpRGFzaCA9IC9bQS1aXS9nO1xyXG5cclxuZnVuY3Rpb24gZGF0YUF0dHIoIGVsZW0sIGtleSwgZGF0YSApIHtcclxuXHR2YXIgbmFtZTtcclxuXHJcblx0Ly8gSWYgbm90aGluZyB3YXMgZm91bmQgaW50ZXJuYWxseSwgdHJ5IHRvIGZldGNoIGFueVxyXG5cdC8vIGRhdGEgZnJvbSB0aGUgSFRNTDUgZGF0YS0qIGF0dHJpYnV0ZVxyXG5cdGlmICggZGF0YSA9PT0gdW5kZWZpbmVkICYmIGVsZW0ubm9kZVR5cGUgPT09IDEgKSB7XHJcblx0XHRuYW1lID0gXCJkYXRhLVwiICsga2V5LnJlcGxhY2UoIHJtdWx0aURhc2gsIFwiLSQmXCIgKS50b0xvd2VyQ2FzZSgpO1xyXG5cdFx0ZGF0YSA9IGVsZW0uZ2V0QXR0cmlidXRlKCBuYW1lICk7XHJcblxyXG5cdFx0aWYgKCB0eXBlb2YgZGF0YSA9PT0gXCJzdHJpbmdcIiApIHtcclxuXHRcdFx0dHJ5IHtcclxuXHRcdFx0XHRkYXRhID0gZGF0YSA9PT0gXCJ0cnVlXCIgPyB0cnVlIDpcclxuXHRcdFx0XHRcdGRhdGEgPT09IFwiZmFsc2VcIiA/IGZhbHNlIDpcclxuXHRcdFx0XHRcdGRhdGEgPT09IFwibnVsbFwiID8gbnVsbCA6XHJcblxyXG5cdFx0XHRcdFx0Ly8gT25seSBjb252ZXJ0IHRvIGEgbnVtYmVyIGlmIGl0IGRvZXNuJ3QgY2hhbmdlIHRoZSBzdHJpbmdcclxuXHRcdFx0XHRcdCtkYXRhICsgXCJcIiA9PT0gZGF0YSA/ICtkYXRhIDpcclxuXHRcdFx0XHRcdHJicmFjZS50ZXN0KCBkYXRhICkgPyBqUXVlcnkucGFyc2VKU09OKCBkYXRhICkgOlxyXG5cdFx0XHRcdFx0ZGF0YTtcclxuXHRcdFx0fSBjYXRjaCAoIGUgKSB7fVxyXG5cclxuXHRcdFx0Ly8gTWFrZSBzdXJlIHdlIHNldCB0aGUgZGF0YSBzbyBpdCBpc24ndCBjaGFuZ2VkIGxhdGVyXHJcblx0XHRcdGRhdGFVc2VyLnNldCggZWxlbSwga2V5LCBkYXRhICk7XHJcblx0XHR9IGVsc2Uge1xyXG5cdFx0XHRkYXRhID0gdW5kZWZpbmVkO1xyXG5cdFx0fVxyXG5cdH1cclxuXHRyZXR1cm4gZGF0YTtcclxufVxyXG5cclxualF1ZXJ5LmV4dGVuZCgge1xyXG5cdGhhc0RhdGE6IGZ1bmN0aW9uKCBlbGVtICkge1xyXG5cdFx0cmV0dXJuIGRhdGFVc2VyLmhhc0RhdGEoIGVsZW0gKSB8fCBkYXRhUHJpdi5oYXNEYXRhKCBlbGVtICk7XHJcblx0fSxcclxuXHJcblx0ZGF0YTogZnVuY3Rpb24oIGVsZW0sIG5hbWUsIGRhdGEgKSB7XHJcblx0XHRyZXR1cm4gZGF0YVVzZXIuYWNjZXNzKCBlbGVtLCBuYW1lLCBkYXRhICk7XHJcblx0fSxcclxuXHJcblx0cmVtb3ZlRGF0YTogZnVuY3Rpb24oIGVsZW0sIG5hbWUgKSB7XHJcblx0XHRkYXRhVXNlci5yZW1vdmUoIGVsZW0sIG5hbWUgKTtcclxuXHR9LFxyXG5cclxuXHQvLyBUT0RPOiBOb3cgdGhhdCBhbGwgY2FsbHMgdG8gX2RhdGEgYW5kIF9yZW1vdmVEYXRhIGhhdmUgYmVlbiByZXBsYWNlZFxyXG5cdC8vIHdpdGggZGlyZWN0IGNhbGxzIHRvIGRhdGFQcml2IG1ldGhvZHMsIHRoZXNlIGNhbiBiZSBkZXByZWNhdGVkLlxyXG5cdF9kYXRhOiBmdW5jdGlvbiggZWxlbSwgbmFtZSwgZGF0YSApIHtcclxuXHRcdHJldHVybiBkYXRhUHJpdi5hY2Nlc3MoIGVsZW0sIG5hbWUsIGRhdGEgKTtcclxuXHR9LFxyXG5cclxuXHRfcmVtb3ZlRGF0YTogZnVuY3Rpb24oIGVsZW0sIG5hbWUgKSB7XHJcblx0XHRkYXRhUHJpdi5yZW1vdmUoIGVsZW0sIG5hbWUgKTtcclxuXHR9XHJcbn0gKTtcclxuXHJcbmpRdWVyeS5mbi5leHRlbmQoIHtcclxuXHRkYXRhOiBmdW5jdGlvbigga2V5LCB2YWx1ZSApIHtcclxuXHRcdHZhciBpLCBuYW1lLCBkYXRhLFxyXG5cdFx0XHRlbGVtID0gdGhpc1sgMCBdLFxyXG5cdFx0XHRhdHRycyA9IGVsZW0gJiYgZWxlbS5hdHRyaWJ1dGVzO1xyXG5cclxuXHRcdC8vIEdldHMgYWxsIHZhbHVlc1xyXG5cdFx0aWYgKCBrZXkgPT09IHVuZGVmaW5lZCApIHtcclxuXHRcdFx0aWYgKCB0aGlzLmxlbmd0aCApIHtcclxuXHRcdFx0XHRkYXRhID0gZGF0YVVzZXIuZ2V0KCBlbGVtICk7XHJcblxyXG5cdFx0XHRcdGlmICggZWxlbS5ub2RlVHlwZSA9PT0gMSAmJiAhZGF0YVByaXYuZ2V0KCBlbGVtLCBcImhhc0RhdGFBdHRyc1wiICkgKSB7XHJcblx0XHRcdFx0XHRpID0gYXR0cnMubGVuZ3RoO1xyXG5cdFx0XHRcdFx0d2hpbGUgKCBpLS0gKSB7XHJcblxyXG5cdFx0XHRcdFx0XHQvLyBTdXBwb3J0OiBJRTExK1xyXG5cdFx0XHRcdFx0XHQvLyBUaGUgYXR0cnMgZWxlbWVudHMgY2FuIGJlIG51bGwgKCMxNDg5NClcclxuXHRcdFx0XHRcdFx0aWYgKCBhdHRyc1sgaSBdICkge1xyXG5cdFx0XHRcdFx0XHRcdG5hbWUgPSBhdHRyc1sgaSBdLm5hbWU7XHJcblx0XHRcdFx0XHRcdFx0aWYgKCBuYW1lLmluZGV4T2YoIFwiZGF0YS1cIiApID09PSAwICkge1xyXG5cdFx0XHRcdFx0XHRcdFx0bmFtZSA9IGpRdWVyeS5jYW1lbENhc2UoIG5hbWUuc2xpY2UoIDUgKSApO1xyXG5cdFx0XHRcdFx0XHRcdFx0ZGF0YUF0dHIoIGVsZW0sIG5hbWUsIGRhdGFbIG5hbWUgXSApO1xyXG5cdFx0XHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0ZGF0YVByaXYuc2V0KCBlbGVtLCBcImhhc0RhdGFBdHRyc1wiLCB0cnVlICk7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9XHJcblxyXG5cdFx0XHRyZXR1cm4gZGF0YTtcclxuXHRcdH1cclxuXHJcblx0XHQvLyBTZXRzIG11bHRpcGxlIHZhbHVlc1xyXG5cdFx0aWYgKCB0eXBlb2Yga2V5ID09PSBcIm9iamVjdFwiICkge1xyXG5cdFx0XHRyZXR1cm4gdGhpcy5lYWNoKCBmdW5jdGlvbigpIHtcclxuXHRcdFx0XHRkYXRhVXNlci5zZXQoIHRoaXMsIGtleSApO1xyXG5cdFx0XHR9ICk7XHJcblx0XHR9XHJcblxyXG5cdFx0cmV0dXJuIGFjY2VzcyggdGhpcywgZnVuY3Rpb24oIHZhbHVlICkge1xyXG5cdFx0XHR2YXIgZGF0YSwgY2FtZWxLZXk7XHJcblxyXG5cdFx0XHQvLyBUaGUgY2FsbGluZyBqUXVlcnkgb2JqZWN0IChlbGVtZW50IG1hdGNoZXMpIGlzIG5vdCBlbXB0eVxyXG5cdFx0XHQvLyAoYW5kIHRoZXJlZm9yZSBoYXMgYW4gZWxlbWVudCBhcHBlYXJzIGF0IHRoaXNbIDAgXSkgYW5kIHRoZVxyXG5cdFx0XHQvLyBgdmFsdWVgIHBhcmFtZXRlciB3YXMgbm90IHVuZGVmaW5lZC4gQW4gZW1wdHkgalF1ZXJ5IG9iamVjdFxyXG5cdFx0XHQvLyB3aWxsIHJlc3VsdCBpbiBgdW5kZWZpbmVkYCBmb3IgZWxlbSA9IHRoaXNbIDAgXSB3aGljaCB3aWxsXHJcblx0XHRcdC8vIHRocm93IGFuIGV4Y2VwdGlvbiBpZiBhbiBhdHRlbXB0IHRvIHJlYWQgYSBkYXRhIGNhY2hlIGlzIG1hZGUuXHJcblx0XHRcdGlmICggZWxlbSAmJiB2YWx1ZSA9PT0gdW5kZWZpbmVkICkge1xyXG5cclxuXHRcdFx0XHQvLyBBdHRlbXB0IHRvIGdldCBkYXRhIGZyb20gdGhlIGNhY2hlXHJcblx0XHRcdFx0Ly8gd2l0aCB0aGUga2V5IGFzLWlzXHJcblx0XHRcdFx0ZGF0YSA9IGRhdGFVc2VyLmdldCggZWxlbSwga2V5ICkgfHxcclxuXHJcblx0XHRcdFx0XHQvLyBUcnkgdG8gZmluZCBkYXNoZWQga2V5IGlmIGl0IGV4aXN0cyAoZ2gtMjc3OSlcclxuXHRcdFx0XHRcdC8vIFRoaXMgaXMgZm9yIDIuMi54IG9ubHlcclxuXHRcdFx0XHRcdGRhdGFVc2VyLmdldCggZWxlbSwga2V5LnJlcGxhY2UoIHJtdWx0aURhc2gsIFwiLSQmXCIgKS50b0xvd2VyQ2FzZSgpICk7XHJcblxyXG5cdFx0XHRcdGlmICggZGF0YSAhPT0gdW5kZWZpbmVkICkge1xyXG5cdFx0XHRcdFx0cmV0dXJuIGRhdGE7XHJcblx0XHRcdFx0fVxyXG5cclxuXHRcdFx0XHRjYW1lbEtleSA9IGpRdWVyeS5jYW1lbENhc2UoIGtleSApO1xyXG5cclxuXHRcdFx0XHQvLyBBdHRlbXB0IHRvIGdldCBkYXRhIGZyb20gdGhlIGNhY2hlXHJcblx0XHRcdFx0Ly8gd2l0aCB0aGUga2V5IGNhbWVsaXplZFxyXG5cdFx0XHRcdGRhdGEgPSBkYXRhVXNlci5nZXQoIGVsZW0sIGNhbWVsS2V5ICk7XHJcblx0XHRcdFx0aWYgKCBkYXRhICE9PSB1bmRlZmluZWQgKSB7XHJcblx0XHRcdFx0XHRyZXR1cm4gZGF0YTtcclxuXHRcdFx0XHR9XHJcblxyXG5cdFx0XHRcdC8vIEF0dGVtcHQgdG8gXCJkaXNjb3ZlclwiIHRoZSBkYXRhIGluXHJcblx0XHRcdFx0Ly8gSFRNTDUgY3VzdG9tIGRhdGEtKiBhdHRyc1xyXG5cdFx0XHRcdGRhdGEgPSBkYXRhQXR0ciggZWxlbSwgY2FtZWxLZXksIHVuZGVmaW5lZCApO1xyXG5cdFx0XHRcdGlmICggZGF0YSAhPT0gdW5kZWZpbmVkICkge1xyXG5cdFx0XHRcdFx0cmV0dXJuIGRhdGE7XHJcblx0XHRcdFx0fVxyXG5cclxuXHRcdFx0XHQvLyBXZSB0cmllZCByZWFsbHkgaGFyZCwgYnV0IHRoZSBkYXRhIGRvZXNuJ3QgZXhpc3QuXHJcblx0XHRcdFx0cmV0dXJuO1xyXG5cdFx0XHR9XHJcblxyXG5cdFx0XHQvLyBTZXQgdGhlIGRhdGEuLi5cclxuXHRcdFx0Y2FtZWxLZXkgPSBqUXVlcnkuY2FtZWxDYXNlKCBrZXkgKTtcclxuXHRcdFx0dGhpcy5lYWNoKCBmdW5jdGlvbigpIHtcclxuXHJcblx0XHRcdFx0Ly8gRmlyc3QsIGF0dGVtcHQgdG8gc3RvcmUgYSBjb3B5IG9yIHJlZmVyZW5jZSBvZiBhbnlcclxuXHRcdFx0XHQvLyBkYXRhIHRoYXQgbWlnaHQndmUgYmVlbiBzdG9yZSB3aXRoIGEgY2FtZWxDYXNlZCBrZXkuXHJcblx0XHRcdFx0dmFyIGRhdGEgPSBkYXRhVXNlci5nZXQoIHRoaXMsIGNhbWVsS2V5ICk7XHJcblxyXG5cdFx0XHRcdC8vIEZvciBIVE1MNSBkYXRhLSogYXR0cmlidXRlIGludGVyb3AsIHdlIGhhdmUgdG9cclxuXHRcdFx0XHQvLyBzdG9yZSBwcm9wZXJ0eSBuYW1lcyB3aXRoIGRhc2hlcyBpbiBhIGNhbWVsQ2FzZSBmb3JtLlxyXG5cdFx0XHRcdC8vIFRoaXMgbWlnaHQgbm90IGFwcGx5IHRvIGFsbCBwcm9wZXJ0aWVzLi4uKlxyXG5cdFx0XHRcdGRhdGFVc2VyLnNldCggdGhpcywgY2FtZWxLZXksIHZhbHVlICk7XHJcblxyXG5cdFx0XHRcdC8vICouLi4gSW4gdGhlIGNhc2Ugb2YgcHJvcGVydGllcyB0aGF0IG1pZ2h0IF9hY3R1YWxseV9cclxuXHRcdFx0XHQvLyBoYXZlIGRhc2hlcywgd2UgbmVlZCB0byBhbHNvIHN0b3JlIGEgY29weSBvZiB0aGF0XHJcblx0XHRcdFx0Ly8gdW5jaGFuZ2VkIHByb3BlcnR5LlxyXG5cdFx0XHRcdGlmICgga2V5LmluZGV4T2YoIFwiLVwiICkgPiAtMSAmJiBkYXRhICE9PSB1bmRlZmluZWQgKSB7XHJcblx0XHRcdFx0XHRkYXRhVXNlci5zZXQoIHRoaXMsIGtleSwgdmFsdWUgKTtcclxuXHRcdFx0XHR9XHJcblx0XHRcdH0gKTtcclxuXHRcdH0sIG51bGwsIHZhbHVlLCBhcmd1bWVudHMubGVuZ3RoID4gMSwgbnVsbCwgdHJ1ZSApO1xyXG5cdH0sXHJcblxyXG5cdHJlbW92ZURhdGE6IGZ1bmN0aW9uKCBrZXkgKSB7XHJcblx0XHRyZXR1cm4gdGhpcy5lYWNoKCBmdW5jdGlvbigpIHtcclxuXHRcdFx0ZGF0YVVzZXIucmVtb3ZlKCB0aGlzLCBrZXkgKTtcclxuXHRcdH0gKTtcclxuXHR9XHJcbn0gKTtcclxuXHJcblxyXG5qUXVlcnkuZXh0ZW5kKCB7XHJcblx0cXVldWU6IGZ1bmN0aW9uKCBlbGVtLCB0eXBlLCBkYXRhICkge1xyXG5cdFx0dmFyIHF1ZXVlO1xyXG5cclxuXHRcdGlmICggZWxlbSApIHtcclxuXHRcdFx0dHlwZSA9ICggdHlwZSB8fCBcImZ4XCIgKSArIFwicXVldWVcIjtcclxuXHRcdFx0cXVldWUgPSBkYXRhUHJpdi5nZXQoIGVsZW0sIHR5cGUgKTtcclxuXHJcblx0XHRcdC8vIFNwZWVkIHVwIGRlcXVldWUgYnkgZ2V0dGluZyBvdXQgcXVpY2tseSBpZiB0aGlzIGlzIGp1c3QgYSBsb29rdXBcclxuXHRcdFx0aWYgKCBkYXRhICkge1xyXG5cdFx0XHRcdGlmICggIXF1ZXVlIHx8IGpRdWVyeS5pc0FycmF5KCBkYXRhICkgKSB7XHJcblx0XHRcdFx0XHRxdWV1ZSA9IGRhdGFQcml2LmFjY2VzcyggZWxlbSwgdHlwZSwgalF1ZXJ5Lm1ha2VBcnJheSggZGF0YSApICk7XHJcblx0XHRcdFx0fSBlbHNlIHtcclxuXHRcdFx0XHRcdHF1ZXVlLnB1c2goIGRhdGEgKTtcclxuXHRcdFx0XHR9XHJcblx0XHRcdH1cclxuXHRcdFx0cmV0dXJuIHF1ZXVlIHx8IFtdO1xyXG5cdFx0fVxyXG5cdH0sXHJcblxyXG5cdGRlcXVldWU6IGZ1bmN0aW9uKCBlbGVtLCB0eXBlICkge1xyXG5cdFx0dHlwZSA9IHR5cGUgfHwgXCJmeFwiO1xyXG5cclxuXHRcdHZhciBxdWV1ZSA9IGpRdWVyeS5xdWV1ZSggZWxlbSwgdHlwZSApLFxyXG5cdFx0XHRzdGFydExlbmd0aCA9IHF1ZXVlLmxlbmd0aCxcclxuXHRcdFx0Zm4gPSBxdWV1ZS5zaGlmdCgpLFxyXG5cdFx0XHRob29rcyA9IGpRdWVyeS5fcXVldWVIb29rcyggZWxlbSwgdHlwZSApLFxyXG5cdFx0XHRuZXh0ID0gZnVuY3Rpb24oKSB7XHJcblx0XHRcdFx0alF1ZXJ5LmRlcXVldWUoIGVsZW0sIHR5cGUgKTtcclxuXHRcdFx0fTtcclxuXHJcblx0XHQvLyBJZiB0aGUgZnggcXVldWUgaXMgZGVxdWV1ZWQsIGFsd2F5cyByZW1vdmUgdGhlIHByb2dyZXNzIHNlbnRpbmVsXHJcblx0XHRpZiAoIGZuID09PSBcImlucHJvZ3Jlc3NcIiApIHtcclxuXHRcdFx0Zm4gPSBxdWV1ZS5zaGlmdCgpO1xyXG5cdFx0XHRzdGFydExlbmd0aC0tO1xyXG5cdFx0fVxyXG5cclxuXHRcdGlmICggZm4gKSB7XHJcblxyXG5cdFx0XHQvLyBBZGQgYSBwcm9ncmVzcyBzZW50aW5lbCB0byBwcmV2ZW50IHRoZSBmeCBxdWV1ZSBmcm9tIGJlaW5nXHJcblx0XHRcdC8vIGF1dG9tYXRpY2FsbHkgZGVxdWV1ZWRcclxuXHRcdFx0aWYgKCB0eXBlID09PSBcImZ4XCIgKSB7XHJcblx0XHRcdFx0cXVldWUudW5zaGlmdCggXCJpbnByb2dyZXNzXCIgKTtcclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0Ly8gQ2xlYXIgdXAgdGhlIGxhc3QgcXVldWUgc3RvcCBmdW5jdGlvblxyXG5cdFx0XHRkZWxldGUgaG9va3Muc3RvcDtcclxuXHRcdFx0Zm4uY2FsbCggZWxlbSwgbmV4dCwgaG9va3MgKTtcclxuXHRcdH1cclxuXHJcblx0XHRpZiAoICFzdGFydExlbmd0aCAmJiBob29rcyApIHtcclxuXHRcdFx0aG9va3MuZW1wdHkuZmlyZSgpO1xyXG5cdFx0fVxyXG5cdH0sXHJcblxyXG5cdC8vIE5vdCBwdWJsaWMgLSBnZW5lcmF0ZSBhIHF1ZXVlSG9va3Mgb2JqZWN0LCBvciByZXR1cm4gdGhlIGN1cnJlbnQgb25lXHJcblx0X3F1ZXVlSG9va3M6IGZ1bmN0aW9uKCBlbGVtLCB0eXBlICkge1xyXG5cdFx0dmFyIGtleSA9IHR5cGUgKyBcInF1ZXVlSG9va3NcIjtcclxuXHRcdHJldHVybiBkYXRhUHJpdi5nZXQoIGVsZW0sIGtleSApIHx8IGRhdGFQcml2LmFjY2VzcyggZWxlbSwga2V5LCB7XHJcblx0XHRcdGVtcHR5OiBqUXVlcnkuQ2FsbGJhY2tzKCBcIm9uY2UgbWVtb3J5XCIgKS5hZGQoIGZ1bmN0aW9uKCkge1xyXG5cdFx0XHRcdGRhdGFQcml2LnJlbW92ZSggZWxlbSwgWyB0eXBlICsgXCJxdWV1ZVwiLCBrZXkgXSApO1xyXG5cdFx0XHR9IClcclxuXHRcdH0gKTtcclxuXHR9XHJcbn0gKTtcclxuXHJcbmpRdWVyeS5mbi5leHRlbmQoIHtcclxuXHRxdWV1ZTogZnVuY3Rpb24oIHR5cGUsIGRhdGEgKSB7XHJcblx0XHR2YXIgc2V0dGVyID0gMjtcclxuXHJcblx0XHRpZiAoIHR5cGVvZiB0eXBlICE9PSBcInN0cmluZ1wiICkge1xyXG5cdFx0XHRkYXRhID0gdHlwZTtcclxuXHRcdFx0dHlwZSA9IFwiZnhcIjtcclxuXHRcdFx0c2V0dGVyLS07XHJcblx0XHR9XHJcblxyXG5cdFx0aWYgKCBhcmd1bWVudHMubGVuZ3RoIDwgc2V0dGVyICkge1xyXG5cdFx0XHRyZXR1cm4galF1ZXJ5LnF1ZXVlKCB0aGlzWyAwIF0sIHR5cGUgKTtcclxuXHRcdH1cclxuXHJcblx0XHRyZXR1cm4gZGF0YSA9PT0gdW5kZWZpbmVkID9cclxuXHRcdFx0dGhpcyA6XHJcblx0XHRcdHRoaXMuZWFjaCggZnVuY3Rpb24oKSB7XHJcblx0XHRcdFx0dmFyIHF1ZXVlID0galF1ZXJ5LnF1ZXVlKCB0aGlzLCB0eXBlLCBkYXRhICk7XHJcblxyXG5cdFx0XHRcdC8vIEVuc3VyZSBhIGhvb2tzIGZvciB0aGlzIHF1ZXVlXHJcblx0XHRcdFx0alF1ZXJ5Ll9xdWV1ZUhvb2tzKCB0aGlzLCB0eXBlICk7XHJcblxyXG5cdFx0XHRcdGlmICggdHlwZSA9PT0gXCJmeFwiICYmIHF1ZXVlWyAwIF0gIT09IFwiaW5wcm9ncmVzc1wiICkge1xyXG5cdFx0XHRcdFx0alF1ZXJ5LmRlcXVldWUoIHRoaXMsIHR5cGUgKTtcclxuXHRcdFx0XHR9XHJcblx0XHRcdH0gKTtcclxuXHR9LFxyXG5cdGRlcXVldWU6IGZ1bmN0aW9uKCB0eXBlICkge1xyXG5cdFx0cmV0dXJuIHRoaXMuZWFjaCggZnVuY3Rpb24oKSB7XHJcblx0XHRcdGpRdWVyeS5kZXF1ZXVlKCB0aGlzLCB0eXBlICk7XHJcblx0XHR9ICk7XHJcblx0fSxcclxuXHRjbGVhclF1ZXVlOiBmdW5jdGlvbiggdHlwZSApIHtcclxuXHRcdHJldHVybiB0aGlzLnF1ZXVlKCB0eXBlIHx8IFwiZnhcIiwgW10gKTtcclxuXHR9LFxyXG5cclxuXHQvLyBHZXQgYSBwcm9taXNlIHJlc29sdmVkIHdoZW4gcXVldWVzIG9mIGEgY2VydGFpbiB0eXBlXHJcblx0Ly8gYXJlIGVtcHRpZWQgKGZ4IGlzIHRoZSB0eXBlIGJ5IGRlZmF1bHQpXHJcblx0cHJvbWlzZTogZnVuY3Rpb24oIHR5cGUsIG9iaiApIHtcclxuXHRcdHZhciB0bXAsXHJcblx0XHRcdGNvdW50ID0gMSxcclxuXHRcdFx0ZGVmZXIgPSBqUXVlcnkuRGVmZXJyZWQoKSxcclxuXHRcdFx0ZWxlbWVudHMgPSB0aGlzLFxyXG5cdFx0XHRpID0gdGhpcy5sZW5ndGgsXHJcblx0XHRcdHJlc29sdmUgPSBmdW5jdGlvbigpIHtcclxuXHRcdFx0XHRpZiAoICEoIC0tY291bnQgKSApIHtcclxuXHRcdFx0XHRcdGRlZmVyLnJlc29sdmVXaXRoKCBlbGVtZW50cywgWyBlbGVtZW50cyBdICk7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9O1xyXG5cclxuXHRcdGlmICggdHlwZW9mIHR5cGUgIT09IFwic3RyaW5nXCIgKSB7XHJcblx0XHRcdG9iaiA9IHR5cGU7XHJcblx0XHRcdHR5cGUgPSB1bmRlZmluZWQ7XHJcblx0XHR9XHJcblx0XHR0eXBlID0gdHlwZSB8fCBcImZ4XCI7XHJcblxyXG5cdFx0d2hpbGUgKCBpLS0gKSB7XHJcblx0XHRcdHRtcCA9IGRhdGFQcml2LmdldCggZWxlbWVudHNbIGkgXSwgdHlwZSArIFwicXVldWVIb29rc1wiICk7XHJcblx0XHRcdGlmICggdG1wICYmIHRtcC5lbXB0eSApIHtcclxuXHRcdFx0XHRjb3VudCsrO1xyXG5cdFx0XHRcdHRtcC5lbXB0eS5hZGQoIHJlc29sdmUgKTtcclxuXHRcdFx0fVxyXG5cdFx0fVxyXG5cdFx0cmVzb2x2ZSgpO1xyXG5cdFx0cmV0dXJuIGRlZmVyLnByb21pc2UoIG9iaiApO1xyXG5cdH1cclxufSApO1xyXG52YXIgcG51bSA9ICggL1srLV0/KD86XFxkKlxcLnwpXFxkKyg/OltlRV1bKy1dP1xcZCt8KS8gKS5zb3VyY2U7XHJcblxyXG52YXIgcmNzc051bSA9IG5ldyBSZWdFeHAoIFwiXig/OihbKy1dKT18KShcIiArIHBudW0gKyBcIikoW2EteiVdKikkXCIsIFwiaVwiICk7XHJcblxyXG5cclxudmFyIGNzc0V4cGFuZCA9IFsgXCJUb3BcIiwgXCJSaWdodFwiLCBcIkJvdHRvbVwiLCBcIkxlZnRcIiBdO1xyXG5cclxudmFyIGlzSGlkZGVuID0gZnVuY3Rpb24oIGVsZW0sIGVsICkge1xyXG5cclxuXHRcdC8vIGlzSGlkZGVuIG1pZ2h0IGJlIGNhbGxlZCBmcm9tIGpRdWVyeSNmaWx0ZXIgZnVuY3Rpb247XHJcblx0XHQvLyBpbiB0aGF0IGNhc2UsIGVsZW1lbnQgd2lsbCBiZSBzZWNvbmQgYXJndW1lbnRcclxuXHRcdGVsZW0gPSBlbCB8fCBlbGVtO1xyXG5cdFx0cmV0dXJuIGpRdWVyeS5jc3MoIGVsZW0sIFwiZGlzcGxheVwiICkgPT09IFwibm9uZVwiIHx8XHJcblx0XHRcdCFqUXVlcnkuY29udGFpbnMoIGVsZW0ub3duZXJEb2N1bWVudCwgZWxlbSApO1xyXG5cdH07XHJcblxyXG5cclxuXHJcbmZ1bmN0aW9uIGFkanVzdENTUyggZWxlbSwgcHJvcCwgdmFsdWVQYXJ0cywgdHdlZW4gKSB7XHJcblx0dmFyIGFkanVzdGVkLFxyXG5cdFx0c2NhbGUgPSAxLFxyXG5cdFx0bWF4SXRlcmF0aW9ucyA9IDIwLFxyXG5cdFx0Y3VycmVudFZhbHVlID0gdHdlZW4gP1xyXG5cdFx0XHRmdW5jdGlvbigpIHsgcmV0dXJuIHR3ZWVuLmN1cigpOyB9IDpcclxuXHRcdFx0ZnVuY3Rpb24oKSB7IHJldHVybiBqUXVlcnkuY3NzKCBlbGVtLCBwcm9wLCBcIlwiICk7IH0sXHJcblx0XHRpbml0aWFsID0gY3VycmVudFZhbHVlKCksXHJcblx0XHR1bml0ID0gdmFsdWVQYXJ0cyAmJiB2YWx1ZVBhcnRzWyAzIF0gfHwgKCBqUXVlcnkuY3NzTnVtYmVyWyBwcm9wIF0gPyBcIlwiIDogXCJweFwiICksXHJcblxyXG5cdFx0Ly8gU3RhcnRpbmcgdmFsdWUgY29tcHV0YXRpb24gaXMgcmVxdWlyZWQgZm9yIHBvdGVudGlhbCB1bml0IG1pc21hdGNoZXNcclxuXHRcdGluaXRpYWxJblVuaXQgPSAoIGpRdWVyeS5jc3NOdW1iZXJbIHByb3AgXSB8fCB1bml0ICE9PSBcInB4XCIgJiYgK2luaXRpYWwgKSAmJlxyXG5cdFx0XHRyY3NzTnVtLmV4ZWMoIGpRdWVyeS5jc3MoIGVsZW0sIHByb3AgKSApO1xyXG5cclxuXHRpZiAoIGluaXRpYWxJblVuaXQgJiYgaW5pdGlhbEluVW5pdFsgMyBdICE9PSB1bml0ICkge1xyXG5cclxuXHRcdC8vIFRydXN0IHVuaXRzIHJlcG9ydGVkIGJ5IGpRdWVyeS5jc3NcclxuXHRcdHVuaXQgPSB1bml0IHx8IGluaXRpYWxJblVuaXRbIDMgXTtcclxuXHJcblx0XHQvLyBNYWtlIHN1cmUgd2UgdXBkYXRlIHRoZSB0d2VlbiBwcm9wZXJ0aWVzIGxhdGVyIG9uXHJcblx0XHR2YWx1ZVBhcnRzID0gdmFsdWVQYXJ0cyB8fCBbXTtcclxuXHJcblx0XHQvLyBJdGVyYXRpdmVseSBhcHByb3hpbWF0ZSBmcm9tIGEgbm9uemVybyBzdGFydGluZyBwb2ludFxyXG5cdFx0aW5pdGlhbEluVW5pdCA9ICtpbml0aWFsIHx8IDE7XHJcblxyXG5cdFx0ZG8ge1xyXG5cclxuXHRcdFx0Ly8gSWYgcHJldmlvdXMgaXRlcmF0aW9uIHplcm9lZCBvdXQsIGRvdWJsZSB1bnRpbCB3ZSBnZXQgKnNvbWV0aGluZyouXHJcblx0XHRcdC8vIFVzZSBzdHJpbmcgZm9yIGRvdWJsaW5nIHNvIHdlIGRvbid0IGFjY2lkZW50YWxseSBzZWUgc2NhbGUgYXMgdW5jaGFuZ2VkIGJlbG93XHJcblx0XHRcdHNjYWxlID0gc2NhbGUgfHwgXCIuNVwiO1xyXG5cclxuXHRcdFx0Ly8gQWRqdXN0IGFuZCBhcHBseVxyXG5cdFx0XHRpbml0aWFsSW5Vbml0ID0gaW5pdGlhbEluVW5pdCAvIHNjYWxlO1xyXG5cdFx0XHRqUXVlcnkuc3R5bGUoIGVsZW0sIHByb3AsIGluaXRpYWxJblVuaXQgKyB1bml0ICk7XHJcblxyXG5cdFx0Ly8gVXBkYXRlIHNjYWxlLCB0b2xlcmF0aW5nIHplcm8gb3IgTmFOIGZyb20gdHdlZW4uY3VyKClcclxuXHRcdC8vIEJyZWFrIHRoZSBsb29wIGlmIHNjYWxlIGlzIHVuY2hhbmdlZCBvciBwZXJmZWN0LCBvciBpZiB3ZSd2ZSBqdXN0IGhhZCBlbm91Z2guXHJcblx0XHR9IHdoaWxlIChcclxuXHRcdFx0c2NhbGUgIT09ICggc2NhbGUgPSBjdXJyZW50VmFsdWUoKSAvIGluaXRpYWwgKSAmJiBzY2FsZSAhPT0gMSAmJiAtLW1heEl0ZXJhdGlvbnNcclxuXHRcdCk7XHJcblx0fVxyXG5cclxuXHRpZiAoIHZhbHVlUGFydHMgKSB7XHJcblx0XHRpbml0aWFsSW5Vbml0ID0gK2luaXRpYWxJblVuaXQgfHwgK2luaXRpYWwgfHwgMDtcclxuXHJcblx0XHQvLyBBcHBseSByZWxhdGl2ZSBvZmZzZXQgKCs9Ly09KSBpZiBzcGVjaWZpZWRcclxuXHRcdGFkanVzdGVkID0gdmFsdWVQYXJ0c1sgMSBdID9cclxuXHRcdFx0aW5pdGlhbEluVW5pdCArICggdmFsdWVQYXJ0c1sgMSBdICsgMSApICogdmFsdWVQYXJ0c1sgMiBdIDpcclxuXHRcdFx0K3ZhbHVlUGFydHNbIDIgXTtcclxuXHRcdGlmICggdHdlZW4gKSB7XHJcblx0XHRcdHR3ZWVuLnVuaXQgPSB1bml0O1xyXG5cdFx0XHR0d2Vlbi5zdGFydCA9IGluaXRpYWxJblVuaXQ7XHJcblx0XHRcdHR3ZWVuLmVuZCA9IGFkanVzdGVkO1xyXG5cdFx0fVxyXG5cdH1cclxuXHRyZXR1cm4gYWRqdXN0ZWQ7XHJcbn1cclxudmFyIHJjaGVja2FibGVUeXBlID0gKCAvXig/OmNoZWNrYm94fHJhZGlvKSQvaSApO1xyXG5cclxudmFyIHJ0YWdOYW1lID0gKCAvPChbXFx3Oi1dKykvICk7XHJcblxyXG52YXIgcnNjcmlwdFR5cGUgPSAoIC9eJHxcXC8oPzpqYXZhfGVjbWEpc2NyaXB0L2kgKTtcclxuXHJcblxyXG5cclxuLy8gV2UgaGF2ZSB0byBjbG9zZSB0aGVzZSB0YWdzIHRvIHN1cHBvcnQgWEhUTUwgKCMxMzIwMClcclxudmFyIHdyYXBNYXAgPSB7XHJcblxyXG5cdC8vIFN1cHBvcnQ6IElFOVxyXG5cdG9wdGlvbjogWyAxLCBcIjxzZWxlY3QgbXVsdGlwbGU9J211bHRpcGxlJz5cIiwgXCI8L3NlbGVjdD5cIiBdLFxyXG5cclxuXHQvLyBYSFRNTCBwYXJzZXJzIGRvIG5vdCBtYWdpY2FsbHkgaW5zZXJ0IGVsZW1lbnRzIGluIHRoZVxyXG5cdC8vIHNhbWUgd2F5IHRoYXQgdGFnIHNvdXAgcGFyc2VycyBkby4gU28gd2UgY2Fubm90IHNob3J0ZW5cclxuXHQvLyB0aGlzIGJ5IG9taXR0aW5nIDx0Ym9keT4gb3Igb3RoZXIgcmVxdWlyZWQgZWxlbWVudHMuXHJcblx0dGhlYWQ6IFsgMSwgXCI8dGFibGU+XCIsIFwiPC90YWJsZT5cIiBdLFxyXG5cdGNvbDogWyAyLCBcIjx0YWJsZT48Y29sZ3JvdXA+XCIsIFwiPC9jb2xncm91cD48L3RhYmxlPlwiIF0sXHJcblx0dHI6IFsgMiwgXCI8dGFibGU+PHRib2R5PlwiLCBcIjwvdGJvZHk+PC90YWJsZT5cIiBdLFxyXG5cdHRkOiBbIDMsIFwiPHRhYmxlPjx0Ym9keT48dHI+XCIsIFwiPC90cj48L3Rib2R5PjwvdGFibGU+XCIgXSxcclxuXHJcblx0X2RlZmF1bHQ6IFsgMCwgXCJcIiwgXCJcIiBdXHJcbn07XHJcblxyXG4vLyBTdXBwb3J0OiBJRTlcclxud3JhcE1hcC5vcHRncm91cCA9IHdyYXBNYXAub3B0aW9uO1xyXG5cclxud3JhcE1hcC50Ym9keSA9IHdyYXBNYXAudGZvb3QgPSB3cmFwTWFwLmNvbGdyb3VwID0gd3JhcE1hcC5jYXB0aW9uID0gd3JhcE1hcC50aGVhZDtcclxud3JhcE1hcC50aCA9IHdyYXBNYXAudGQ7XHJcblxyXG5cclxuZnVuY3Rpb24gZ2V0QWxsKCBjb250ZXh0LCB0YWcgKSB7XHJcblxyXG5cdC8vIFN1cHBvcnQ6IElFOS0xMStcclxuXHQvLyBVc2UgdHlwZW9mIHRvIGF2b2lkIHplcm8tYXJndW1lbnQgbWV0aG9kIGludm9jYXRpb24gb24gaG9zdCBvYmplY3RzICgjMTUxNTEpXHJcblx0dmFyIHJldCA9IHR5cGVvZiBjb250ZXh0LmdldEVsZW1lbnRzQnlUYWdOYW1lICE9PSBcInVuZGVmaW5lZFwiID9cclxuXHRcdFx0Y29udGV4dC5nZXRFbGVtZW50c0J5VGFnTmFtZSggdGFnIHx8IFwiKlwiICkgOlxyXG5cdFx0XHR0eXBlb2YgY29udGV4dC5xdWVyeVNlbGVjdG9yQWxsICE9PSBcInVuZGVmaW5lZFwiID9cclxuXHRcdFx0XHRjb250ZXh0LnF1ZXJ5U2VsZWN0b3JBbGwoIHRhZyB8fCBcIipcIiApIDpcclxuXHRcdFx0W107XHJcblxyXG5cdHJldHVybiB0YWcgPT09IHVuZGVmaW5lZCB8fCB0YWcgJiYgalF1ZXJ5Lm5vZGVOYW1lKCBjb250ZXh0LCB0YWcgKSA/XHJcblx0XHRqUXVlcnkubWVyZ2UoIFsgY29udGV4dCBdLCByZXQgKSA6XHJcblx0XHRyZXQ7XHJcbn1cclxuXHJcblxyXG4vLyBNYXJrIHNjcmlwdHMgYXMgaGF2aW5nIGFscmVhZHkgYmVlbiBldmFsdWF0ZWRcclxuZnVuY3Rpb24gc2V0R2xvYmFsRXZhbCggZWxlbXMsIHJlZkVsZW1lbnRzICkge1xyXG5cdHZhciBpID0gMCxcclxuXHRcdGwgPSBlbGVtcy5sZW5ndGg7XHJcblxyXG5cdGZvciAoIDsgaSA8IGw7IGkrKyApIHtcclxuXHRcdGRhdGFQcml2LnNldChcclxuXHRcdFx0ZWxlbXNbIGkgXSxcclxuXHRcdFx0XCJnbG9iYWxFdmFsXCIsXHJcblx0XHRcdCFyZWZFbGVtZW50cyB8fCBkYXRhUHJpdi5nZXQoIHJlZkVsZW1lbnRzWyBpIF0sIFwiZ2xvYmFsRXZhbFwiIClcclxuXHRcdCk7XHJcblx0fVxyXG59XHJcblxyXG5cclxudmFyIHJodG1sID0gLzx8JiM/XFx3KzsvO1xyXG5cclxuZnVuY3Rpb24gYnVpbGRGcmFnbWVudCggZWxlbXMsIGNvbnRleHQsIHNjcmlwdHMsIHNlbGVjdGlvbiwgaWdub3JlZCApIHtcclxuXHR2YXIgZWxlbSwgdG1wLCB0YWcsIHdyYXAsIGNvbnRhaW5zLCBqLFxyXG5cdFx0ZnJhZ21lbnQgPSBjb250ZXh0LmNyZWF0ZURvY3VtZW50RnJhZ21lbnQoKSxcclxuXHRcdG5vZGVzID0gW10sXHJcblx0XHRpID0gMCxcclxuXHRcdGwgPSBlbGVtcy5sZW5ndGg7XHJcblxyXG5cdGZvciAoIDsgaSA8IGw7IGkrKyApIHtcclxuXHRcdGVsZW0gPSBlbGVtc1sgaSBdO1xyXG5cclxuXHRcdGlmICggZWxlbSB8fCBlbGVtID09PSAwICkge1xyXG5cclxuXHRcdFx0Ly8gQWRkIG5vZGVzIGRpcmVjdGx5XHJcblx0XHRcdGlmICggalF1ZXJ5LnR5cGUoIGVsZW0gKSA9PT0gXCJvYmplY3RcIiApIHtcclxuXHJcblx0XHRcdFx0Ly8gU3VwcG9ydDogQW5kcm9pZDw0LjEsIFBoYW50b21KUzwyXHJcblx0XHRcdFx0Ly8gcHVzaC5hcHBseShfLCBhcnJheWxpa2UpIHRocm93cyBvbiBhbmNpZW50IFdlYktpdFxyXG5cdFx0XHRcdGpRdWVyeS5tZXJnZSggbm9kZXMsIGVsZW0ubm9kZVR5cGUgPyBbIGVsZW0gXSA6IGVsZW0gKTtcclxuXHJcblx0XHRcdC8vIENvbnZlcnQgbm9uLWh0bWwgaW50byBhIHRleHQgbm9kZVxyXG5cdFx0XHR9IGVsc2UgaWYgKCAhcmh0bWwudGVzdCggZWxlbSApICkge1xyXG5cdFx0XHRcdG5vZGVzLnB1c2goIGNvbnRleHQuY3JlYXRlVGV4dE5vZGUoIGVsZW0gKSApO1xyXG5cclxuXHRcdFx0Ly8gQ29udmVydCBodG1sIGludG8gRE9NIG5vZGVzXHJcblx0XHRcdH0gZWxzZSB7XHJcblx0XHRcdFx0dG1wID0gdG1wIHx8IGZyYWdtZW50LmFwcGVuZENoaWxkKCBjb250ZXh0LmNyZWF0ZUVsZW1lbnQoIFwiZGl2XCIgKSApO1xyXG5cclxuXHRcdFx0XHQvLyBEZXNlcmlhbGl6ZSBhIHN0YW5kYXJkIHJlcHJlc2VudGF0aW9uXHJcblx0XHRcdFx0dGFnID0gKCBydGFnTmFtZS5leGVjKCBlbGVtICkgfHwgWyBcIlwiLCBcIlwiIF0gKVsgMSBdLnRvTG93ZXJDYXNlKCk7XHJcblx0XHRcdFx0d3JhcCA9IHdyYXBNYXBbIHRhZyBdIHx8IHdyYXBNYXAuX2RlZmF1bHQ7XHJcblx0XHRcdFx0dG1wLmlubmVySFRNTCA9IHdyYXBbIDEgXSArIGpRdWVyeS5odG1sUHJlZmlsdGVyKCBlbGVtICkgKyB3cmFwWyAyIF07XHJcblxyXG5cdFx0XHRcdC8vIERlc2NlbmQgdGhyb3VnaCB3cmFwcGVycyB0byB0aGUgcmlnaHQgY29udGVudFxyXG5cdFx0XHRcdGogPSB3cmFwWyAwIF07XHJcblx0XHRcdFx0d2hpbGUgKCBqLS0gKSB7XHJcblx0XHRcdFx0XHR0bXAgPSB0bXAubGFzdENoaWxkO1xyXG5cdFx0XHRcdH1cclxuXHJcblx0XHRcdFx0Ly8gU3VwcG9ydDogQW5kcm9pZDw0LjEsIFBoYW50b21KUzwyXHJcblx0XHRcdFx0Ly8gcHVzaC5hcHBseShfLCBhcnJheWxpa2UpIHRocm93cyBvbiBhbmNpZW50IFdlYktpdFxyXG5cdFx0XHRcdGpRdWVyeS5tZXJnZSggbm9kZXMsIHRtcC5jaGlsZE5vZGVzICk7XHJcblxyXG5cdFx0XHRcdC8vIFJlbWVtYmVyIHRoZSB0b3AtbGV2ZWwgY29udGFpbmVyXHJcblx0XHRcdFx0dG1wID0gZnJhZ21lbnQuZmlyc3RDaGlsZDtcclxuXHJcblx0XHRcdFx0Ly8gRW5zdXJlIHRoZSBjcmVhdGVkIG5vZGVzIGFyZSBvcnBoYW5lZCAoIzEyMzkyKVxyXG5cdFx0XHRcdHRtcC50ZXh0Q29udGVudCA9IFwiXCI7XHJcblx0XHRcdH1cclxuXHRcdH1cclxuXHR9XHJcblxyXG5cdC8vIFJlbW92ZSB3cmFwcGVyIGZyb20gZnJhZ21lbnRcclxuXHRmcmFnbWVudC50ZXh0Q29udGVudCA9IFwiXCI7XHJcblxyXG5cdGkgPSAwO1xyXG5cdHdoaWxlICggKCBlbGVtID0gbm9kZXNbIGkrKyBdICkgKSB7XHJcblxyXG5cdFx0Ly8gU2tpcCBlbGVtZW50cyBhbHJlYWR5IGluIHRoZSBjb250ZXh0IGNvbGxlY3Rpb24gKHRyYWMtNDA4NylcclxuXHRcdGlmICggc2VsZWN0aW9uICYmIGpRdWVyeS5pbkFycmF5KCBlbGVtLCBzZWxlY3Rpb24gKSA+IC0xICkge1xyXG5cdFx0XHRpZiAoIGlnbm9yZWQgKSB7XHJcblx0XHRcdFx0aWdub3JlZC5wdXNoKCBlbGVtICk7XHJcblx0XHRcdH1cclxuXHRcdFx0Y29udGludWU7XHJcblx0XHR9XHJcblxyXG5cdFx0Y29udGFpbnMgPSBqUXVlcnkuY29udGFpbnMoIGVsZW0ub3duZXJEb2N1bWVudCwgZWxlbSApO1xyXG5cclxuXHRcdC8vIEFwcGVuZCB0byBmcmFnbWVudFxyXG5cdFx0dG1wID0gZ2V0QWxsKCBmcmFnbWVudC5hcHBlbmRDaGlsZCggZWxlbSApLCBcInNjcmlwdFwiICk7XHJcblxyXG5cdFx0Ly8gUHJlc2VydmUgc2NyaXB0IGV2YWx1YXRpb24gaGlzdG9yeVxyXG5cdFx0aWYgKCBjb250YWlucyApIHtcclxuXHRcdFx0c2V0R2xvYmFsRXZhbCggdG1wICk7XHJcblx0XHR9XHJcblxyXG5cdFx0Ly8gQ2FwdHVyZSBleGVjdXRhYmxlc1xyXG5cdFx0aWYgKCBzY3JpcHRzICkge1xyXG5cdFx0XHRqID0gMDtcclxuXHRcdFx0d2hpbGUgKCAoIGVsZW0gPSB0bXBbIGorKyBdICkgKSB7XHJcblx0XHRcdFx0aWYgKCByc2NyaXB0VHlwZS50ZXN0KCBlbGVtLnR5cGUgfHwgXCJcIiApICkge1xyXG5cdFx0XHRcdFx0c2NyaXB0cy5wdXNoKCBlbGVtICk7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9XHJcblx0XHR9XHJcblx0fVxyXG5cclxuXHRyZXR1cm4gZnJhZ21lbnQ7XHJcbn1cclxuXHJcblxyXG4oIGZ1bmN0aW9uKCkge1xyXG5cdHZhciBmcmFnbWVudCA9IGRvY3VtZW50LmNyZWF0ZURvY3VtZW50RnJhZ21lbnQoKSxcclxuXHRcdGRpdiA9IGZyYWdtZW50LmFwcGVuZENoaWxkKCBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCBcImRpdlwiICkgKSxcclxuXHRcdGlucHV0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCggXCJpbnB1dFwiICk7XHJcblxyXG5cdC8vIFN1cHBvcnQ6IEFuZHJvaWQgNC4wLTQuMywgU2FmYXJpPD01LjFcclxuXHQvLyBDaGVjayBzdGF0ZSBsb3N0IGlmIHRoZSBuYW1lIGlzIHNldCAoIzExMjE3KVxyXG5cdC8vIFN1cHBvcnQ6IFdpbmRvd3MgV2ViIEFwcHMgKFdXQSlcclxuXHQvLyBgbmFtZWAgYW5kIGB0eXBlYCBtdXN0IHVzZSAuc2V0QXR0cmlidXRlIGZvciBXV0EgKCMxNDkwMSlcclxuXHRpbnB1dC5zZXRBdHRyaWJ1dGUoIFwidHlwZVwiLCBcInJhZGlvXCIgKTtcclxuXHRpbnB1dC5zZXRBdHRyaWJ1dGUoIFwiY2hlY2tlZFwiLCBcImNoZWNrZWRcIiApO1xyXG5cdGlucHV0LnNldEF0dHJpYnV0ZSggXCJuYW1lXCIsIFwidFwiICk7XHJcblxyXG5cdGRpdi5hcHBlbmRDaGlsZCggaW5wdXQgKTtcclxuXHJcblx0Ly8gU3VwcG9ydDogU2FmYXJpPD01LjEsIEFuZHJvaWQ8NC4yXHJcblx0Ly8gT2xkZXIgV2ViS2l0IGRvZXNuJ3QgY2xvbmUgY2hlY2tlZCBzdGF0ZSBjb3JyZWN0bHkgaW4gZnJhZ21lbnRzXHJcblx0c3VwcG9ydC5jaGVja0Nsb25lID0gZGl2LmNsb25lTm9kZSggdHJ1ZSApLmNsb25lTm9kZSggdHJ1ZSApLmxhc3RDaGlsZC5jaGVja2VkO1xyXG5cclxuXHQvLyBTdXBwb3J0OiBJRTw9MTErXHJcblx0Ly8gTWFrZSBzdXJlIHRleHRhcmVhIChhbmQgY2hlY2tib3gpIGRlZmF1bHRWYWx1ZSBpcyBwcm9wZXJseSBjbG9uZWRcclxuXHRkaXYuaW5uZXJIVE1MID0gXCI8dGV4dGFyZWE+eDwvdGV4dGFyZWE+XCI7XHJcblx0c3VwcG9ydC5ub0Nsb25lQ2hlY2tlZCA9ICEhZGl2LmNsb25lTm9kZSggdHJ1ZSApLmxhc3RDaGlsZC5kZWZhdWx0VmFsdWU7XHJcbn0gKSgpO1xyXG5cclxuXHJcbnZhclxyXG5cdHJrZXlFdmVudCA9IC9ea2V5LyxcclxuXHRybW91c2VFdmVudCA9IC9eKD86bW91c2V8cG9pbnRlcnxjb250ZXh0bWVudXxkcmFnfGRyb3ApfGNsaWNrLyxcclxuXHRydHlwZW5hbWVzcGFjZSA9IC9eKFteLl0qKSg/OlxcLiguKyl8KS87XHJcblxyXG5mdW5jdGlvbiByZXR1cm5UcnVlKCkge1xyXG5cdHJldHVybiB0cnVlO1xyXG59XHJcblxyXG5mdW5jdGlvbiByZXR1cm5GYWxzZSgpIHtcclxuXHRyZXR1cm4gZmFsc2U7XHJcbn1cclxuXHJcbi8vIFN1cHBvcnQ6IElFOVxyXG4vLyBTZWUgIzEzMzkzIGZvciBtb3JlIGluZm9cclxuZnVuY3Rpb24gc2FmZUFjdGl2ZUVsZW1lbnQoKSB7XHJcblx0dHJ5IHtcclxuXHRcdHJldHVybiBkb2N1bWVudC5hY3RpdmVFbGVtZW50O1xyXG5cdH0gY2F0Y2ggKCBlcnIgKSB7IH1cclxufVxyXG5cclxuZnVuY3Rpb24gb24oIGVsZW0sIHR5cGVzLCBzZWxlY3RvciwgZGF0YSwgZm4sIG9uZSApIHtcclxuXHR2YXIgb3JpZ0ZuLCB0eXBlO1xyXG5cclxuXHQvLyBUeXBlcyBjYW4gYmUgYSBtYXAgb2YgdHlwZXMvaGFuZGxlcnNcclxuXHRpZiAoIHR5cGVvZiB0eXBlcyA9PT0gXCJvYmplY3RcIiApIHtcclxuXHJcblx0XHQvLyAoIHR5cGVzLU9iamVjdCwgc2VsZWN0b3IsIGRhdGEgKVxyXG5cdFx0aWYgKCB0eXBlb2Ygc2VsZWN0b3IgIT09IFwic3RyaW5nXCIgKSB7XHJcblxyXG5cdFx0XHQvLyAoIHR5cGVzLU9iamVjdCwgZGF0YSApXHJcblx0XHRcdGRhdGEgPSBkYXRhIHx8IHNlbGVjdG9yO1xyXG5cdFx0XHRzZWxlY3RvciA9IHVuZGVmaW5lZDtcclxuXHRcdH1cclxuXHRcdGZvciAoIHR5cGUgaW4gdHlwZXMgKSB7XHJcblx0XHRcdG9uKCBlbGVtLCB0eXBlLCBzZWxlY3RvciwgZGF0YSwgdHlwZXNbIHR5cGUgXSwgb25lICk7XHJcblx0XHR9XHJcblx0XHRyZXR1cm4gZWxlbTtcclxuXHR9XHJcblxyXG5cdGlmICggZGF0YSA9PSBudWxsICYmIGZuID09IG51bGwgKSB7XHJcblxyXG5cdFx0Ly8gKCB0eXBlcywgZm4gKVxyXG5cdFx0Zm4gPSBzZWxlY3RvcjtcclxuXHRcdGRhdGEgPSBzZWxlY3RvciA9IHVuZGVmaW5lZDtcclxuXHR9IGVsc2UgaWYgKCBmbiA9PSBudWxsICkge1xyXG5cdFx0aWYgKCB0eXBlb2Ygc2VsZWN0b3IgPT09IFwic3RyaW5nXCIgKSB7XHJcblxyXG5cdFx0XHQvLyAoIHR5cGVzLCBzZWxlY3RvciwgZm4gKVxyXG5cdFx0XHRmbiA9IGRhdGE7XHJcblx0XHRcdGRhdGEgPSB1bmRlZmluZWQ7XHJcblx0XHR9IGVsc2Uge1xyXG5cclxuXHRcdFx0Ly8gKCB0eXBlcywgZGF0YSwgZm4gKVxyXG5cdFx0XHRmbiA9IGRhdGE7XHJcblx0XHRcdGRhdGEgPSBzZWxlY3RvcjtcclxuXHRcdFx0c2VsZWN0b3IgPSB1bmRlZmluZWQ7XHJcblx0XHR9XHJcblx0fVxyXG5cdGlmICggZm4gPT09IGZhbHNlICkge1xyXG5cdFx0Zm4gPSByZXR1cm5GYWxzZTtcclxuXHR9IGVsc2UgaWYgKCAhZm4gKSB7XHJcblx0XHRyZXR1cm4gZWxlbTtcclxuXHR9XHJcblxyXG5cdGlmICggb25lID09PSAxICkge1xyXG5cdFx0b3JpZ0ZuID0gZm47XHJcblx0XHRmbiA9IGZ1bmN0aW9uKCBldmVudCApIHtcclxuXHJcblx0XHRcdC8vIENhbiB1c2UgYW4gZW1wdHkgc2V0LCBzaW5jZSBldmVudCBjb250YWlucyB0aGUgaW5mb1xyXG5cdFx0XHRqUXVlcnkoKS5vZmYoIGV2ZW50ICk7XHJcblx0XHRcdHJldHVybiBvcmlnRm4uYXBwbHkoIHRoaXMsIGFyZ3VtZW50cyApO1xyXG5cdFx0fTtcclxuXHJcblx0XHQvLyBVc2Ugc2FtZSBndWlkIHNvIGNhbGxlciBjYW4gcmVtb3ZlIHVzaW5nIG9yaWdGblxyXG5cdFx0Zm4uZ3VpZCA9IG9yaWdGbi5ndWlkIHx8ICggb3JpZ0ZuLmd1aWQgPSBqUXVlcnkuZ3VpZCsrICk7XHJcblx0fVxyXG5cdHJldHVybiBlbGVtLmVhY2goIGZ1bmN0aW9uKCkge1xyXG5cdFx0alF1ZXJ5LmV2ZW50LmFkZCggdGhpcywgdHlwZXMsIGZuLCBkYXRhLCBzZWxlY3RvciApO1xyXG5cdH0gKTtcclxufVxyXG5cclxuLypcclxuICogSGVscGVyIGZ1bmN0aW9ucyBmb3IgbWFuYWdpbmcgZXZlbnRzIC0tIG5vdCBwYXJ0IG9mIHRoZSBwdWJsaWMgaW50ZXJmYWNlLlxyXG4gKiBQcm9wcyB0byBEZWFuIEVkd2FyZHMnIGFkZEV2ZW50IGxpYnJhcnkgZm9yIG1hbnkgb2YgdGhlIGlkZWFzLlxyXG4gKi9cclxualF1ZXJ5LmV2ZW50ID0ge1xyXG5cclxuXHRnbG9iYWw6IHt9LFxyXG5cclxuXHRhZGQ6IGZ1bmN0aW9uKCBlbGVtLCB0eXBlcywgaGFuZGxlciwgZGF0YSwgc2VsZWN0b3IgKSB7XHJcblxyXG5cdFx0dmFyIGhhbmRsZU9iakluLCBldmVudEhhbmRsZSwgdG1wLFxyXG5cdFx0XHRldmVudHMsIHQsIGhhbmRsZU9iaixcclxuXHRcdFx0c3BlY2lhbCwgaGFuZGxlcnMsIHR5cGUsIG5hbWVzcGFjZXMsIG9yaWdUeXBlLFxyXG5cdFx0XHRlbGVtRGF0YSA9IGRhdGFQcml2LmdldCggZWxlbSApO1xyXG5cclxuXHRcdC8vIERvbid0IGF0dGFjaCBldmVudHMgdG8gbm9EYXRhIG9yIHRleHQvY29tbWVudCBub2RlcyAoYnV0IGFsbG93IHBsYWluIG9iamVjdHMpXHJcblx0XHRpZiAoICFlbGVtRGF0YSApIHtcclxuXHRcdFx0cmV0dXJuO1xyXG5cdFx0fVxyXG5cclxuXHRcdC8vIENhbGxlciBjYW4gcGFzcyBpbiBhbiBvYmplY3Qgb2YgY3VzdG9tIGRhdGEgaW4gbGlldSBvZiB0aGUgaGFuZGxlclxyXG5cdFx0aWYgKCBoYW5kbGVyLmhhbmRsZXIgKSB7XHJcblx0XHRcdGhhbmRsZU9iakluID0gaGFuZGxlcjtcclxuXHRcdFx0aGFuZGxlciA9IGhhbmRsZU9iakluLmhhbmRsZXI7XHJcblx0XHRcdHNlbGVjdG9yID0gaGFuZGxlT2JqSW4uc2VsZWN0b3I7XHJcblx0XHR9XHJcblxyXG5cdFx0Ly8gTWFrZSBzdXJlIHRoYXQgdGhlIGhhbmRsZXIgaGFzIGEgdW5pcXVlIElELCB1c2VkIHRvIGZpbmQvcmVtb3ZlIGl0IGxhdGVyXHJcblx0XHRpZiAoICFoYW5kbGVyLmd1aWQgKSB7XHJcblx0XHRcdGhhbmRsZXIuZ3VpZCA9IGpRdWVyeS5ndWlkKys7XHJcblx0XHR9XHJcblxyXG5cdFx0Ly8gSW5pdCB0aGUgZWxlbWVudCdzIGV2ZW50IHN0cnVjdHVyZSBhbmQgbWFpbiBoYW5kbGVyLCBpZiB0aGlzIGlzIHRoZSBmaXJzdFxyXG5cdFx0aWYgKCAhKCBldmVudHMgPSBlbGVtRGF0YS5ldmVudHMgKSApIHtcclxuXHRcdFx0ZXZlbnRzID0gZWxlbURhdGEuZXZlbnRzID0ge307XHJcblx0XHR9XHJcblx0XHRpZiAoICEoIGV2ZW50SGFuZGxlID0gZWxlbURhdGEuaGFuZGxlICkgKSB7XHJcblx0XHRcdGV2ZW50SGFuZGxlID0gZWxlbURhdGEuaGFuZGxlID0gZnVuY3Rpb24oIGUgKSB7XHJcblxyXG5cdFx0XHRcdC8vIERpc2NhcmQgdGhlIHNlY29uZCBldmVudCBvZiBhIGpRdWVyeS5ldmVudC50cmlnZ2VyKCkgYW5kXHJcblx0XHRcdFx0Ly8gd2hlbiBhbiBldmVudCBpcyBjYWxsZWQgYWZ0ZXIgYSBwYWdlIGhhcyB1bmxvYWRlZFxyXG5cdFx0XHRcdHJldHVybiB0eXBlb2YgalF1ZXJ5ICE9PSBcInVuZGVmaW5lZFwiICYmIGpRdWVyeS5ldmVudC50cmlnZ2VyZWQgIT09IGUudHlwZSA/XHJcblx0XHRcdFx0XHRqUXVlcnkuZXZlbnQuZGlzcGF0Y2guYXBwbHkoIGVsZW0sIGFyZ3VtZW50cyApIDogdW5kZWZpbmVkO1xyXG5cdFx0XHR9O1xyXG5cdFx0fVxyXG5cclxuXHRcdC8vIEhhbmRsZSBtdWx0aXBsZSBldmVudHMgc2VwYXJhdGVkIGJ5IGEgc3BhY2VcclxuXHRcdHR5cGVzID0gKCB0eXBlcyB8fCBcIlwiICkubWF0Y2goIHJub3R3aGl0ZSApIHx8IFsgXCJcIiBdO1xyXG5cdFx0dCA9IHR5cGVzLmxlbmd0aDtcclxuXHRcdHdoaWxlICggdC0tICkge1xyXG5cdFx0XHR0bXAgPSBydHlwZW5hbWVzcGFjZS5leGVjKCB0eXBlc1sgdCBdICkgfHwgW107XHJcblx0XHRcdHR5cGUgPSBvcmlnVHlwZSA9IHRtcFsgMSBdO1xyXG5cdFx0XHRuYW1lc3BhY2VzID0gKCB0bXBbIDIgXSB8fCBcIlwiICkuc3BsaXQoIFwiLlwiICkuc29ydCgpO1xyXG5cclxuXHRcdFx0Ly8gVGhlcmUgKm11c3QqIGJlIGEgdHlwZSwgbm8gYXR0YWNoaW5nIG5hbWVzcGFjZS1vbmx5IGhhbmRsZXJzXHJcblx0XHRcdGlmICggIXR5cGUgKSB7XHJcblx0XHRcdFx0Y29udGludWU7XHJcblx0XHRcdH1cclxuXHJcblx0XHRcdC8vIElmIGV2ZW50IGNoYW5nZXMgaXRzIHR5cGUsIHVzZSB0aGUgc3BlY2lhbCBldmVudCBoYW5kbGVycyBmb3IgdGhlIGNoYW5nZWQgdHlwZVxyXG5cdFx0XHRzcGVjaWFsID0galF1ZXJ5LmV2ZW50LnNwZWNpYWxbIHR5cGUgXSB8fCB7fTtcclxuXHJcblx0XHRcdC8vIElmIHNlbGVjdG9yIGRlZmluZWQsIGRldGVybWluZSBzcGVjaWFsIGV2ZW50IGFwaSB0eXBlLCBvdGhlcndpc2UgZ2l2ZW4gdHlwZVxyXG5cdFx0XHR0eXBlID0gKCBzZWxlY3RvciA/IHNwZWNpYWwuZGVsZWdhdGVUeXBlIDogc3BlY2lhbC5iaW5kVHlwZSApIHx8IHR5cGU7XHJcblxyXG5cdFx0XHQvLyBVcGRhdGUgc3BlY2lhbCBiYXNlZCBvbiBuZXdseSByZXNldCB0eXBlXHJcblx0XHRcdHNwZWNpYWwgPSBqUXVlcnkuZXZlbnQuc3BlY2lhbFsgdHlwZSBdIHx8IHt9O1xyXG5cclxuXHRcdFx0Ly8gaGFuZGxlT2JqIGlzIHBhc3NlZCB0byBhbGwgZXZlbnQgaGFuZGxlcnNcclxuXHRcdFx0aGFuZGxlT2JqID0galF1ZXJ5LmV4dGVuZCgge1xyXG5cdFx0XHRcdHR5cGU6IHR5cGUsXHJcblx0XHRcdFx0b3JpZ1R5cGU6IG9yaWdUeXBlLFxyXG5cdFx0XHRcdGRhdGE6IGRhdGEsXHJcblx0XHRcdFx0aGFuZGxlcjogaGFuZGxlcixcclxuXHRcdFx0XHRndWlkOiBoYW5kbGVyLmd1aWQsXHJcblx0XHRcdFx0c2VsZWN0b3I6IHNlbGVjdG9yLFxyXG5cdFx0XHRcdG5lZWRzQ29udGV4dDogc2VsZWN0b3IgJiYgalF1ZXJ5LmV4cHIubWF0Y2gubmVlZHNDb250ZXh0LnRlc3QoIHNlbGVjdG9yICksXHJcblx0XHRcdFx0bmFtZXNwYWNlOiBuYW1lc3BhY2VzLmpvaW4oIFwiLlwiIClcclxuXHRcdFx0fSwgaGFuZGxlT2JqSW4gKTtcclxuXHJcblx0XHRcdC8vIEluaXQgdGhlIGV2ZW50IGhhbmRsZXIgcXVldWUgaWYgd2UncmUgdGhlIGZpcnN0XHJcblx0XHRcdGlmICggISggaGFuZGxlcnMgPSBldmVudHNbIHR5cGUgXSApICkge1xyXG5cdFx0XHRcdGhhbmRsZXJzID0gZXZlbnRzWyB0eXBlIF0gPSBbXTtcclxuXHRcdFx0XHRoYW5kbGVycy5kZWxlZ2F0ZUNvdW50ID0gMDtcclxuXHJcblx0XHRcdFx0Ly8gT25seSB1c2UgYWRkRXZlbnRMaXN0ZW5lciBpZiB0aGUgc3BlY2lhbCBldmVudHMgaGFuZGxlciByZXR1cm5zIGZhbHNlXHJcblx0XHRcdFx0aWYgKCAhc3BlY2lhbC5zZXR1cCB8fFxyXG5cdFx0XHRcdFx0c3BlY2lhbC5zZXR1cC5jYWxsKCBlbGVtLCBkYXRhLCBuYW1lc3BhY2VzLCBldmVudEhhbmRsZSApID09PSBmYWxzZSApIHtcclxuXHJcblx0XHRcdFx0XHRpZiAoIGVsZW0uYWRkRXZlbnRMaXN0ZW5lciApIHtcclxuXHRcdFx0XHRcdFx0ZWxlbS5hZGRFdmVudExpc3RlbmVyKCB0eXBlLCBldmVudEhhbmRsZSApO1xyXG5cdFx0XHRcdFx0fVxyXG5cdFx0XHRcdH1cclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0aWYgKCBzcGVjaWFsLmFkZCApIHtcclxuXHRcdFx0XHRzcGVjaWFsLmFkZC5jYWxsKCBlbGVtLCBoYW5kbGVPYmogKTtcclxuXHJcblx0XHRcdFx0aWYgKCAhaGFuZGxlT2JqLmhhbmRsZXIuZ3VpZCApIHtcclxuXHRcdFx0XHRcdGhhbmRsZU9iai5oYW5kbGVyLmd1aWQgPSBoYW5kbGVyLmd1aWQ7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9XHJcblxyXG5cdFx0XHQvLyBBZGQgdG8gdGhlIGVsZW1lbnQncyBoYW5kbGVyIGxpc3QsIGRlbGVnYXRlcyBpbiBmcm9udFxyXG5cdFx0XHRpZiAoIHNlbGVjdG9yICkge1xyXG5cdFx0XHRcdGhhbmRsZXJzLnNwbGljZSggaGFuZGxlcnMuZGVsZWdhdGVDb3VudCsrLCAwLCBoYW5kbGVPYmogKTtcclxuXHRcdFx0fSBlbHNlIHtcclxuXHRcdFx0XHRoYW5kbGVycy5wdXNoKCBoYW5kbGVPYmogKTtcclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0Ly8gS2VlcCB0cmFjayBvZiB3aGljaCBldmVudHMgaGF2ZSBldmVyIGJlZW4gdXNlZCwgZm9yIGV2ZW50IG9wdGltaXphdGlvblxyXG5cdFx0XHRqUXVlcnkuZXZlbnQuZ2xvYmFsWyB0eXBlIF0gPSB0cnVlO1xyXG5cdFx0fVxyXG5cclxuXHR9LFxyXG5cclxuXHQvLyBEZXRhY2ggYW4gZXZlbnQgb3Igc2V0IG9mIGV2ZW50cyBmcm9tIGFuIGVsZW1lbnRcclxuXHRyZW1vdmU6IGZ1bmN0aW9uKCBlbGVtLCB0eXBlcywgaGFuZGxlciwgc2VsZWN0b3IsIG1hcHBlZFR5cGVzICkge1xyXG5cclxuXHRcdHZhciBqLCBvcmlnQ291bnQsIHRtcCxcclxuXHRcdFx0ZXZlbnRzLCB0LCBoYW5kbGVPYmosXHJcblx0XHRcdHNwZWNpYWwsIGhhbmRsZXJzLCB0eXBlLCBuYW1lc3BhY2VzLCBvcmlnVHlwZSxcclxuXHRcdFx0ZWxlbURhdGEgPSBkYXRhUHJpdi5oYXNEYXRhKCBlbGVtICkgJiYgZGF0YVByaXYuZ2V0KCBlbGVtICk7XHJcblxyXG5cdFx0aWYgKCAhZWxlbURhdGEgfHwgISggZXZlbnRzID0gZWxlbURhdGEuZXZlbnRzICkgKSB7XHJcblx0XHRcdHJldHVybjtcclxuXHRcdH1cclxuXHJcblx0XHQvLyBPbmNlIGZvciBlYWNoIHR5cGUubmFtZXNwYWNlIGluIHR5cGVzOyB0eXBlIG1heSBiZSBvbWl0dGVkXHJcblx0XHR0eXBlcyA9ICggdHlwZXMgfHwgXCJcIiApLm1hdGNoKCBybm90d2hpdGUgKSB8fCBbIFwiXCIgXTtcclxuXHRcdHQgPSB0eXBlcy5sZW5ndGg7XHJcblx0XHR3aGlsZSAoIHQtLSApIHtcclxuXHRcdFx0dG1wID0gcnR5cGVuYW1lc3BhY2UuZXhlYyggdHlwZXNbIHQgXSApIHx8IFtdO1xyXG5cdFx0XHR0eXBlID0gb3JpZ1R5cGUgPSB0bXBbIDEgXTtcclxuXHRcdFx0bmFtZXNwYWNlcyA9ICggdG1wWyAyIF0gfHwgXCJcIiApLnNwbGl0KCBcIi5cIiApLnNvcnQoKTtcclxuXHJcblx0XHRcdC8vIFVuYmluZCBhbGwgZXZlbnRzIChvbiB0aGlzIG5hbWVzcGFjZSwgaWYgcHJvdmlkZWQpIGZvciB0aGUgZWxlbWVudFxyXG5cdFx0XHRpZiAoICF0eXBlICkge1xyXG5cdFx0XHRcdGZvciAoIHR5cGUgaW4gZXZlbnRzICkge1xyXG5cdFx0XHRcdFx0alF1ZXJ5LmV2ZW50LnJlbW92ZSggZWxlbSwgdHlwZSArIHR5cGVzWyB0IF0sIGhhbmRsZXIsIHNlbGVjdG9yLCB0cnVlICk7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHRcdGNvbnRpbnVlO1xyXG5cdFx0XHR9XHJcblxyXG5cdFx0XHRzcGVjaWFsID0galF1ZXJ5LmV2ZW50LnNwZWNpYWxbIHR5cGUgXSB8fCB7fTtcclxuXHRcdFx0dHlwZSA9ICggc2VsZWN0b3IgPyBzcGVjaWFsLmRlbGVnYXRlVHlwZSA6IHNwZWNpYWwuYmluZFR5cGUgKSB8fCB0eXBlO1xyXG5cdFx0XHRoYW5kbGVycyA9IGV2ZW50c1sgdHlwZSBdIHx8IFtdO1xyXG5cdFx0XHR0bXAgPSB0bXBbIDIgXSAmJlxyXG5cdFx0XHRcdG5ldyBSZWdFeHAoIFwiKF58XFxcXC4pXCIgKyBuYW1lc3BhY2VzLmpvaW4oIFwiXFxcXC4oPzouKlxcXFwufClcIiApICsgXCIoXFxcXC58JClcIiApO1xyXG5cclxuXHRcdFx0Ly8gUmVtb3ZlIG1hdGNoaW5nIGV2ZW50c1xyXG5cdFx0XHRvcmlnQ291bnQgPSBqID0gaGFuZGxlcnMubGVuZ3RoO1xyXG5cdFx0XHR3aGlsZSAoIGotLSApIHtcclxuXHRcdFx0XHRoYW5kbGVPYmogPSBoYW5kbGVyc1sgaiBdO1xyXG5cclxuXHRcdFx0XHRpZiAoICggbWFwcGVkVHlwZXMgfHwgb3JpZ1R5cGUgPT09IGhhbmRsZU9iai5vcmlnVHlwZSApICYmXHJcblx0XHRcdFx0XHQoICFoYW5kbGVyIHx8IGhhbmRsZXIuZ3VpZCA9PT0gaGFuZGxlT2JqLmd1aWQgKSAmJlxyXG5cdFx0XHRcdFx0KCAhdG1wIHx8IHRtcC50ZXN0KCBoYW5kbGVPYmoubmFtZXNwYWNlICkgKSAmJlxyXG5cdFx0XHRcdFx0KCAhc2VsZWN0b3IgfHwgc2VsZWN0b3IgPT09IGhhbmRsZU9iai5zZWxlY3RvciB8fFxyXG5cdFx0XHRcdFx0XHRzZWxlY3RvciA9PT0gXCIqKlwiICYmIGhhbmRsZU9iai5zZWxlY3RvciApICkge1xyXG5cdFx0XHRcdFx0aGFuZGxlcnMuc3BsaWNlKCBqLCAxICk7XHJcblxyXG5cdFx0XHRcdFx0aWYgKCBoYW5kbGVPYmouc2VsZWN0b3IgKSB7XHJcblx0XHRcdFx0XHRcdGhhbmRsZXJzLmRlbGVnYXRlQ291bnQtLTtcclxuXHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdGlmICggc3BlY2lhbC5yZW1vdmUgKSB7XHJcblx0XHRcdFx0XHRcdHNwZWNpYWwucmVtb3ZlLmNhbGwoIGVsZW0sIGhhbmRsZU9iaiApO1xyXG5cdFx0XHRcdFx0fVxyXG5cdFx0XHRcdH1cclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0Ly8gUmVtb3ZlIGdlbmVyaWMgZXZlbnQgaGFuZGxlciBpZiB3ZSByZW1vdmVkIHNvbWV0aGluZyBhbmQgbm8gbW9yZSBoYW5kbGVycyBleGlzdFxyXG5cdFx0XHQvLyAoYXZvaWRzIHBvdGVudGlhbCBmb3IgZW5kbGVzcyByZWN1cnNpb24gZHVyaW5nIHJlbW92YWwgb2Ygc3BlY2lhbCBldmVudCBoYW5kbGVycylcclxuXHRcdFx0aWYgKCBvcmlnQ291bnQgJiYgIWhhbmRsZXJzLmxlbmd0aCApIHtcclxuXHRcdFx0XHRpZiAoICFzcGVjaWFsLnRlYXJkb3duIHx8XHJcblx0XHRcdFx0XHRzcGVjaWFsLnRlYXJkb3duLmNhbGwoIGVsZW0sIG5hbWVzcGFjZXMsIGVsZW1EYXRhLmhhbmRsZSApID09PSBmYWxzZSApIHtcclxuXHJcblx0XHRcdFx0XHRqUXVlcnkucmVtb3ZlRXZlbnQoIGVsZW0sIHR5cGUsIGVsZW1EYXRhLmhhbmRsZSApO1xyXG5cdFx0XHRcdH1cclxuXHJcblx0XHRcdFx0ZGVsZXRlIGV2ZW50c1sgdHlwZSBdO1xyXG5cdFx0XHR9XHJcblx0XHR9XHJcblxyXG5cdFx0Ly8gUmVtb3ZlIGRhdGEgYW5kIHRoZSBleHBhbmRvIGlmIGl0J3Mgbm8gbG9uZ2VyIHVzZWRcclxuXHRcdGlmICggalF1ZXJ5LmlzRW1wdHlPYmplY3QoIGV2ZW50cyApICkge1xyXG5cdFx0XHRkYXRhUHJpdi5yZW1vdmUoIGVsZW0sIFwiaGFuZGxlIGV2ZW50c1wiICk7XHJcblx0XHR9XHJcblx0fSxcclxuXHJcblx0ZGlzcGF0Y2g6IGZ1bmN0aW9uKCBldmVudCApIHtcclxuXHJcblx0XHQvLyBNYWtlIGEgd3JpdGFibGUgalF1ZXJ5LkV2ZW50IGZyb20gdGhlIG5hdGl2ZSBldmVudCBvYmplY3RcclxuXHRcdGV2ZW50ID0galF1ZXJ5LmV2ZW50LmZpeCggZXZlbnQgKTtcclxuXHJcblx0XHR2YXIgaSwgaiwgcmV0LCBtYXRjaGVkLCBoYW5kbGVPYmosXHJcblx0XHRcdGhhbmRsZXJRdWV1ZSA9IFtdLFxyXG5cdFx0XHRhcmdzID0gc2xpY2UuY2FsbCggYXJndW1lbnRzICksXHJcblx0XHRcdGhhbmRsZXJzID0gKCBkYXRhUHJpdi5nZXQoIHRoaXMsIFwiZXZlbnRzXCIgKSB8fCB7fSApWyBldmVudC50eXBlIF0gfHwgW10sXHJcblx0XHRcdHNwZWNpYWwgPSBqUXVlcnkuZXZlbnQuc3BlY2lhbFsgZXZlbnQudHlwZSBdIHx8IHt9O1xyXG5cclxuXHRcdC8vIFVzZSB0aGUgZml4LWVkIGpRdWVyeS5FdmVudCByYXRoZXIgdGhhbiB0aGUgKHJlYWQtb25seSkgbmF0aXZlIGV2ZW50XHJcblx0XHRhcmdzWyAwIF0gPSBldmVudDtcclxuXHRcdGV2ZW50LmRlbGVnYXRlVGFyZ2V0ID0gdGhpcztcclxuXHJcblx0XHQvLyBDYWxsIHRoZSBwcmVEaXNwYXRjaCBob29rIGZvciB0aGUgbWFwcGVkIHR5cGUsIGFuZCBsZXQgaXQgYmFpbCBpZiBkZXNpcmVkXHJcblx0XHRpZiAoIHNwZWNpYWwucHJlRGlzcGF0Y2ggJiYgc3BlY2lhbC5wcmVEaXNwYXRjaC5jYWxsKCB0aGlzLCBldmVudCApID09PSBmYWxzZSApIHtcclxuXHRcdFx0cmV0dXJuO1xyXG5cdFx0fVxyXG5cclxuXHRcdC8vIERldGVybWluZSBoYW5kbGVyc1xyXG5cdFx0aGFuZGxlclF1ZXVlID0galF1ZXJ5LmV2ZW50LmhhbmRsZXJzLmNhbGwoIHRoaXMsIGV2ZW50LCBoYW5kbGVycyApO1xyXG5cclxuXHRcdC8vIFJ1biBkZWxlZ2F0ZXMgZmlyc3Q7IHRoZXkgbWF5IHdhbnQgdG8gc3RvcCBwcm9wYWdhdGlvbiBiZW5lYXRoIHVzXHJcblx0XHRpID0gMDtcclxuXHRcdHdoaWxlICggKCBtYXRjaGVkID0gaGFuZGxlclF1ZXVlWyBpKysgXSApICYmICFldmVudC5pc1Byb3BhZ2F0aW9uU3RvcHBlZCgpICkge1xyXG5cdFx0XHRldmVudC5jdXJyZW50VGFyZ2V0ID0gbWF0Y2hlZC5lbGVtO1xyXG5cclxuXHRcdFx0aiA9IDA7XHJcblx0XHRcdHdoaWxlICggKCBoYW5kbGVPYmogPSBtYXRjaGVkLmhhbmRsZXJzWyBqKysgXSApICYmXHJcblx0XHRcdFx0IWV2ZW50LmlzSW1tZWRpYXRlUHJvcGFnYXRpb25TdG9wcGVkKCkgKSB7XHJcblxyXG5cdFx0XHRcdC8vIFRyaWdnZXJlZCBldmVudCBtdXN0IGVpdGhlciAxKSBoYXZlIG5vIG5hbWVzcGFjZSwgb3IgMikgaGF2ZSBuYW1lc3BhY2UocylcclxuXHRcdFx0XHQvLyBhIHN1YnNldCBvciBlcXVhbCB0byB0aG9zZSBpbiB0aGUgYm91bmQgZXZlbnQgKGJvdGggY2FuIGhhdmUgbm8gbmFtZXNwYWNlKS5cclxuXHRcdFx0XHRpZiAoICFldmVudC5ybmFtZXNwYWNlIHx8IGV2ZW50LnJuYW1lc3BhY2UudGVzdCggaGFuZGxlT2JqLm5hbWVzcGFjZSApICkge1xyXG5cclxuXHRcdFx0XHRcdGV2ZW50LmhhbmRsZU9iaiA9IGhhbmRsZU9iajtcclxuXHRcdFx0XHRcdGV2ZW50LmRhdGEgPSBoYW5kbGVPYmouZGF0YTtcclxuXHJcblx0XHRcdFx0XHRyZXQgPSAoICggalF1ZXJ5LmV2ZW50LnNwZWNpYWxbIGhhbmRsZU9iai5vcmlnVHlwZSBdIHx8IHt9ICkuaGFuZGxlIHx8XHJcblx0XHRcdFx0XHRcdGhhbmRsZU9iai5oYW5kbGVyICkuYXBwbHkoIG1hdGNoZWQuZWxlbSwgYXJncyApO1xyXG5cclxuXHRcdFx0XHRcdGlmICggcmV0ICE9PSB1bmRlZmluZWQgKSB7XHJcblx0XHRcdFx0XHRcdGlmICggKCBldmVudC5yZXN1bHQgPSByZXQgKSA9PT0gZmFsc2UgKSB7XHJcblx0XHRcdFx0XHRcdFx0ZXZlbnQucHJldmVudERlZmF1bHQoKTtcclxuXHRcdFx0XHRcdFx0XHRldmVudC5zdG9wUHJvcGFnYXRpb24oKTtcclxuXHRcdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0fVxyXG5cdFx0XHRcdH1cclxuXHRcdFx0fVxyXG5cdFx0fVxyXG5cclxuXHRcdC8vIENhbGwgdGhlIHBvc3REaXNwYXRjaCBob29rIGZvciB0aGUgbWFwcGVkIHR5cGVcclxuXHRcdGlmICggc3BlY2lhbC5wb3N0RGlzcGF0Y2ggKSB7XHJcblx0XHRcdHNwZWNpYWwucG9zdERpc3BhdGNoLmNhbGwoIHRoaXMsIGV2ZW50ICk7XHJcblx0XHR9XHJcblxyXG5cdFx0cmV0dXJuIGV2ZW50LnJlc3VsdDtcclxuXHR9LFxyXG5cclxuXHRoYW5kbGVyczogZnVuY3Rpb24oIGV2ZW50LCBoYW5kbGVycyApIHtcclxuXHRcdHZhciBpLCBtYXRjaGVzLCBzZWwsIGhhbmRsZU9iaixcclxuXHRcdFx0aGFuZGxlclF1ZXVlID0gW10sXHJcblx0XHRcdGRlbGVnYXRlQ291bnQgPSBoYW5kbGVycy5kZWxlZ2F0ZUNvdW50LFxyXG5cdFx0XHRjdXIgPSBldmVudC50YXJnZXQ7XHJcblxyXG5cdFx0Ly8gU3VwcG9ydCAoYXQgbGVhc3QpOiBDaHJvbWUsIElFOVxyXG5cdFx0Ly8gRmluZCBkZWxlZ2F0ZSBoYW5kbGVyc1xyXG5cdFx0Ly8gQmxhY2staG9sZSBTVkcgPHVzZT4gaW5zdGFuY2UgdHJlZXMgKCMxMzE4MClcclxuXHRcdC8vXHJcblx0XHQvLyBTdXBwb3J0OiBGaXJlZm94PD00MitcclxuXHRcdC8vIEF2b2lkIG5vbi1sZWZ0LWNsaWNrIGluIEZGIGJ1dCBkb24ndCBibG9jayBJRSByYWRpbyBldmVudHMgKCMzODYxLCBnaC0yMzQzKVxyXG5cdFx0aWYgKCBkZWxlZ2F0ZUNvdW50ICYmIGN1ci5ub2RlVHlwZSAmJlxyXG5cdFx0XHQoIGV2ZW50LnR5cGUgIT09IFwiY2xpY2tcIiB8fCBpc05hTiggZXZlbnQuYnV0dG9uICkgfHwgZXZlbnQuYnV0dG9uIDwgMSApICkge1xyXG5cclxuXHRcdFx0Zm9yICggOyBjdXIgIT09IHRoaXM7IGN1ciA9IGN1ci5wYXJlbnROb2RlIHx8IHRoaXMgKSB7XHJcblxyXG5cdFx0XHRcdC8vIERvbid0IGNoZWNrIG5vbi1lbGVtZW50cyAoIzEzMjA4KVxyXG5cdFx0XHRcdC8vIERvbid0IHByb2Nlc3MgY2xpY2tzIG9uIGRpc2FibGVkIGVsZW1lbnRzICgjNjkxMSwgIzgxNjUsICMxMTM4MiwgIzExNzY0KVxyXG5cdFx0XHRcdGlmICggY3VyLm5vZGVUeXBlID09PSAxICYmICggY3VyLmRpc2FibGVkICE9PSB0cnVlIHx8IGV2ZW50LnR5cGUgIT09IFwiY2xpY2tcIiApICkge1xyXG5cdFx0XHRcdFx0bWF0Y2hlcyA9IFtdO1xyXG5cdFx0XHRcdFx0Zm9yICggaSA9IDA7IGkgPCBkZWxlZ2F0ZUNvdW50OyBpKysgKSB7XHJcblx0XHRcdFx0XHRcdGhhbmRsZU9iaiA9IGhhbmRsZXJzWyBpIF07XHJcblxyXG5cdFx0XHRcdFx0XHQvLyBEb24ndCBjb25mbGljdCB3aXRoIE9iamVjdC5wcm90b3R5cGUgcHJvcGVydGllcyAoIzEzMjAzKVxyXG5cdFx0XHRcdFx0XHRzZWwgPSBoYW5kbGVPYmouc2VsZWN0b3IgKyBcIiBcIjtcclxuXHJcblx0XHRcdFx0XHRcdGlmICggbWF0Y2hlc1sgc2VsIF0gPT09IHVuZGVmaW5lZCApIHtcclxuXHRcdFx0XHRcdFx0XHRtYXRjaGVzWyBzZWwgXSA9IGhhbmRsZU9iai5uZWVkc0NvbnRleHQgP1xyXG5cdFx0XHRcdFx0XHRcdFx0alF1ZXJ5KCBzZWwsIHRoaXMgKS5pbmRleCggY3VyICkgPiAtMSA6XHJcblx0XHRcdFx0XHRcdFx0XHRqUXVlcnkuZmluZCggc2VsLCB0aGlzLCBudWxsLCBbIGN1ciBdICkubGVuZ3RoO1xyXG5cdFx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHRcdGlmICggbWF0Y2hlc1sgc2VsIF0gKSB7XHJcblx0XHRcdFx0XHRcdFx0bWF0Y2hlcy5wdXNoKCBoYW5kbGVPYmogKTtcclxuXHRcdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0aWYgKCBtYXRjaGVzLmxlbmd0aCApIHtcclxuXHRcdFx0XHRcdFx0aGFuZGxlclF1ZXVlLnB1c2goIHsgZWxlbTogY3VyLCBoYW5kbGVyczogbWF0Y2hlcyB9ICk7XHJcblx0XHRcdFx0XHR9XHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9XHJcblx0XHR9XHJcblxyXG5cdFx0Ly8gQWRkIHRoZSByZW1haW5pbmcgKGRpcmVjdGx5LWJvdW5kKSBoYW5kbGVyc1xyXG5cdFx0aWYgKCBkZWxlZ2F0ZUNvdW50IDwgaGFuZGxlcnMubGVuZ3RoICkge1xyXG5cdFx0XHRoYW5kbGVyUXVldWUucHVzaCggeyBlbGVtOiB0aGlzLCBoYW5kbGVyczogaGFuZGxlcnMuc2xpY2UoIGRlbGVnYXRlQ291bnQgKSB9ICk7XHJcblx0XHR9XHJcblxyXG5cdFx0cmV0dXJuIGhhbmRsZXJRdWV1ZTtcclxuXHR9LFxyXG5cclxuXHQvLyBJbmNsdWRlcyBzb21lIGV2ZW50IHByb3BzIHNoYXJlZCBieSBLZXlFdmVudCBhbmQgTW91c2VFdmVudFxyXG5cdHByb3BzOiAoIFwiYWx0S2V5IGJ1YmJsZXMgY2FuY2VsYWJsZSBjdHJsS2V5IGN1cnJlbnRUYXJnZXQgZGV0YWlsIGV2ZW50UGhhc2UgXCIgK1xyXG5cdFx0XCJtZXRhS2V5IHJlbGF0ZWRUYXJnZXQgc2hpZnRLZXkgdGFyZ2V0IHRpbWVTdGFtcCB2aWV3IHdoaWNoXCIgKS5zcGxpdCggXCIgXCIgKSxcclxuXHJcblx0Zml4SG9va3M6IHt9LFxyXG5cclxuXHRrZXlIb29rczoge1xyXG5cdFx0cHJvcHM6IFwiY2hhciBjaGFyQ29kZSBrZXkga2V5Q29kZVwiLnNwbGl0KCBcIiBcIiApLFxyXG5cdFx0ZmlsdGVyOiBmdW5jdGlvbiggZXZlbnQsIG9yaWdpbmFsICkge1xyXG5cclxuXHRcdFx0Ly8gQWRkIHdoaWNoIGZvciBrZXkgZXZlbnRzXHJcblx0XHRcdGlmICggZXZlbnQud2hpY2ggPT0gbnVsbCApIHtcclxuXHRcdFx0XHRldmVudC53aGljaCA9IG9yaWdpbmFsLmNoYXJDb2RlICE9IG51bGwgPyBvcmlnaW5hbC5jaGFyQ29kZSA6IG9yaWdpbmFsLmtleUNvZGU7XHJcblx0XHRcdH1cclxuXHJcblx0XHRcdHJldHVybiBldmVudDtcclxuXHRcdH1cclxuXHR9LFxyXG5cclxuXHRtb3VzZUhvb2tzOiB7XHJcblx0XHRwcm9wczogKCBcImJ1dHRvbiBidXR0b25zIGNsaWVudFggY2xpZW50WSBvZmZzZXRYIG9mZnNldFkgcGFnZVggcGFnZVkgXCIgK1xyXG5cdFx0XHRcInNjcmVlblggc2NyZWVuWSB0b0VsZW1lbnRcIiApLnNwbGl0KCBcIiBcIiApLFxyXG5cdFx0ZmlsdGVyOiBmdW5jdGlvbiggZXZlbnQsIG9yaWdpbmFsICkge1xyXG5cdFx0XHR2YXIgZXZlbnREb2MsIGRvYywgYm9keSxcclxuXHRcdFx0XHRidXR0b24gPSBvcmlnaW5hbC5idXR0b247XHJcblxyXG5cdFx0XHQvLyBDYWxjdWxhdGUgcGFnZVgvWSBpZiBtaXNzaW5nIGFuZCBjbGllbnRYL1kgYXZhaWxhYmxlXHJcblx0XHRcdGlmICggZXZlbnQucGFnZVggPT0gbnVsbCAmJiBvcmlnaW5hbC5jbGllbnRYICE9IG51bGwgKSB7XHJcblx0XHRcdFx0ZXZlbnREb2MgPSBldmVudC50YXJnZXQub3duZXJEb2N1bWVudCB8fCBkb2N1bWVudDtcclxuXHRcdFx0XHRkb2MgPSBldmVudERvYy5kb2N1bWVudEVsZW1lbnQ7XHJcblx0XHRcdFx0Ym9keSA9IGV2ZW50RG9jLmJvZHk7XHJcblxyXG5cdFx0XHRcdGV2ZW50LnBhZ2VYID0gb3JpZ2luYWwuY2xpZW50WCArXHJcblx0XHRcdFx0XHQoIGRvYyAmJiBkb2Muc2Nyb2xsTGVmdCB8fCBib2R5ICYmIGJvZHkuc2Nyb2xsTGVmdCB8fCAwICkgLVxyXG5cdFx0XHRcdFx0KCBkb2MgJiYgZG9jLmNsaWVudExlZnQgfHwgYm9keSAmJiBib2R5LmNsaWVudExlZnQgfHwgMCApO1xyXG5cdFx0XHRcdGV2ZW50LnBhZ2VZID0gb3JpZ2luYWwuY2xpZW50WSArXHJcblx0XHRcdFx0XHQoIGRvYyAmJiBkb2Muc2Nyb2xsVG9wICB8fCBib2R5ICYmIGJvZHkuc2Nyb2xsVG9wICB8fCAwICkgLVxyXG5cdFx0XHRcdFx0KCBkb2MgJiYgZG9jLmNsaWVudFRvcCAgfHwgYm9keSAmJiBib2R5LmNsaWVudFRvcCAgfHwgMCApO1xyXG5cdFx0XHR9XHJcblxyXG5cdFx0XHQvLyBBZGQgd2hpY2ggZm9yIGNsaWNrOiAxID09PSBsZWZ0OyAyID09PSBtaWRkbGU7IDMgPT09IHJpZ2h0XHJcblx0XHRcdC8vIE5vdGU6IGJ1dHRvbiBpcyBub3Qgbm9ybWFsaXplZCwgc28gZG9uJ3QgdXNlIGl0XHJcblx0XHRcdGlmICggIWV2ZW50LndoaWNoICYmIGJ1dHRvbiAhPT0gdW5kZWZpbmVkICkge1xyXG5cdFx0XHRcdGV2ZW50LndoaWNoID0gKCBidXR0b24gJiAxID8gMSA6ICggYnV0dG9uICYgMiA/IDMgOiAoIGJ1dHRvbiAmIDQgPyAyIDogMCApICkgKTtcclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0cmV0dXJuIGV2ZW50O1xyXG5cdFx0fVxyXG5cdH0sXHJcblxyXG5cdGZpeDogZnVuY3Rpb24oIGV2ZW50ICkge1xyXG5cdFx0aWYgKCBldmVudFsgalF1ZXJ5LmV4cGFuZG8gXSApIHtcclxuXHRcdFx0cmV0dXJuIGV2ZW50O1xyXG5cdFx0fVxyXG5cclxuXHRcdC8vIENyZWF0ZSBhIHdyaXRhYmxlIGNvcHkgb2YgdGhlIGV2ZW50IG9iamVjdCBhbmQgbm9ybWFsaXplIHNvbWUgcHJvcGVydGllc1xyXG5cdFx0dmFyIGksIHByb3AsIGNvcHksXHJcblx0XHRcdHR5cGUgPSBldmVudC50eXBlLFxyXG5cdFx0XHRvcmlnaW5hbEV2ZW50ID0gZXZlbnQsXHJcblx0XHRcdGZpeEhvb2sgPSB0aGlzLmZpeEhvb2tzWyB0eXBlIF07XHJcblxyXG5cdFx0aWYgKCAhZml4SG9vayApIHtcclxuXHRcdFx0dGhpcy5maXhIb29rc1sgdHlwZSBdID0gZml4SG9vayA9XHJcblx0XHRcdFx0cm1vdXNlRXZlbnQudGVzdCggdHlwZSApID8gdGhpcy5tb3VzZUhvb2tzIDpcclxuXHRcdFx0XHRya2V5RXZlbnQudGVzdCggdHlwZSApID8gdGhpcy5rZXlIb29rcyA6XHJcblx0XHRcdFx0e307XHJcblx0XHR9XHJcblx0XHRjb3B5ID0gZml4SG9vay5wcm9wcyA/IHRoaXMucHJvcHMuY29uY2F0KCBmaXhIb29rLnByb3BzICkgOiB0aGlzLnByb3BzO1xyXG5cclxuXHRcdGV2ZW50ID0gbmV3IGpRdWVyeS5FdmVudCggb3JpZ2luYWxFdmVudCApO1xyXG5cclxuXHRcdGkgPSBjb3B5Lmxlbmd0aDtcclxuXHRcdHdoaWxlICggaS0tICkge1xyXG5cdFx0XHRwcm9wID0gY29weVsgaSBdO1xyXG5cdFx0XHRldmVudFsgcHJvcCBdID0gb3JpZ2luYWxFdmVudFsgcHJvcCBdO1xyXG5cdFx0fVxyXG5cclxuXHRcdC8vIFN1cHBvcnQ6IENvcmRvdmEgMi41IChXZWJLaXQpICgjMTMyNTUpXHJcblx0XHQvLyBBbGwgZXZlbnRzIHNob3VsZCBoYXZlIGEgdGFyZ2V0OyBDb3Jkb3ZhIGRldmljZXJlYWR5IGRvZXNuJ3RcclxuXHRcdGlmICggIWV2ZW50LnRhcmdldCApIHtcclxuXHRcdFx0ZXZlbnQudGFyZ2V0ID0gZG9jdW1lbnQ7XHJcblx0XHR9XHJcblxyXG5cdFx0Ly8gU3VwcG9ydDogU2FmYXJpIDYuMCssIENocm9tZTwyOFxyXG5cdFx0Ly8gVGFyZ2V0IHNob3VsZCBub3QgYmUgYSB0ZXh0IG5vZGUgKCM1MDQsICMxMzE0MylcclxuXHRcdGlmICggZXZlbnQudGFyZ2V0Lm5vZGVUeXBlID09PSAzICkge1xyXG5cdFx0XHRldmVudC50YXJnZXQgPSBldmVudC50YXJnZXQucGFyZW50Tm9kZTtcclxuXHRcdH1cclxuXHJcblx0XHRyZXR1cm4gZml4SG9vay5maWx0ZXIgPyBmaXhIb29rLmZpbHRlciggZXZlbnQsIG9yaWdpbmFsRXZlbnQgKSA6IGV2ZW50O1xyXG5cdH0sXHJcblxyXG5cdHNwZWNpYWw6IHtcclxuXHRcdGxvYWQ6IHtcclxuXHJcblx0XHRcdC8vIFByZXZlbnQgdHJpZ2dlcmVkIGltYWdlLmxvYWQgZXZlbnRzIGZyb20gYnViYmxpbmcgdG8gd2luZG93LmxvYWRcclxuXHRcdFx0bm9CdWJibGU6IHRydWVcclxuXHRcdH0sXHJcblx0XHRmb2N1czoge1xyXG5cclxuXHRcdFx0Ly8gRmlyZSBuYXRpdmUgZXZlbnQgaWYgcG9zc2libGUgc28gYmx1ci9mb2N1cyBzZXF1ZW5jZSBpcyBjb3JyZWN0XHJcblx0XHRcdHRyaWdnZXI6IGZ1bmN0aW9uKCkge1xyXG5cdFx0XHRcdGlmICggdGhpcyAhPT0gc2FmZUFjdGl2ZUVsZW1lbnQoKSAmJiB0aGlzLmZvY3VzICkge1xyXG5cdFx0XHRcdFx0dGhpcy5mb2N1cygpO1xyXG5cdFx0XHRcdFx0cmV0dXJuIGZhbHNlO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0fSxcclxuXHRcdFx0ZGVsZWdhdGVUeXBlOiBcImZvY3VzaW5cIlxyXG5cdFx0fSxcclxuXHRcdGJsdXI6IHtcclxuXHRcdFx0dHJpZ2dlcjogZnVuY3Rpb24oKSB7XHJcblx0XHRcdFx0aWYgKCB0aGlzID09PSBzYWZlQWN0aXZlRWxlbWVudCgpICYmIHRoaXMuYmx1ciApIHtcclxuXHRcdFx0XHRcdHRoaXMuYmx1cigpO1xyXG5cdFx0XHRcdFx0cmV0dXJuIGZhbHNlO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0fSxcclxuXHRcdFx0ZGVsZWdhdGVUeXBlOiBcImZvY3Vzb3V0XCJcclxuXHRcdH0sXHJcblx0XHRjbGljazoge1xyXG5cclxuXHRcdFx0Ly8gRm9yIGNoZWNrYm94LCBmaXJlIG5hdGl2ZSBldmVudCBzbyBjaGVja2VkIHN0YXRlIHdpbGwgYmUgcmlnaHRcclxuXHRcdFx0dHJpZ2dlcjogZnVuY3Rpb24oKSB7XHJcblx0XHRcdFx0aWYgKCB0aGlzLnR5cGUgPT09IFwiY2hlY2tib3hcIiAmJiB0aGlzLmNsaWNrICYmIGpRdWVyeS5ub2RlTmFtZSggdGhpcywgXCJpbnB1dFwiICkgKSB7XHJcblx0XHRcdFx0XHR0aGlzLmNsaWNrKCk7XHJcblx0XHRcdFx0XHRyZXR1cm4gZmFsc2U7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9LFxyXG5cclxuXHRcdFx0Ly8gRm9yIGNyb3NzLWJyb3dzZXIgY29uc2lzdGVuY3ksIGRvbid0IGZpcmUgbmF0aXZlIC5jbGljaygpIG9uIGxpbmtzXHJcblx0XHRcdF9kZWZhdWx0OiBmdW5jdGlvbiggZXZlbnQgKSB7XHJcblx0XHRcdFx0cmV0dXJuIGpRdWVyeS5ub2RlTmFtZSggZXZlbnQudGFyZ2V0LCBcImFcIiApO1xyXG5cdFx0XHR9XHJcblx0XHR9LFxyXG5cclxuXHRcdGJlZm9yZXVubG9hZDoge1xyXG5cdFx0XHRwb3N0RGlzcGF0Y2g6IGZ1bmN0aW9uKCBldmVudCApIHtcclxuXHJcblx0XHRcdFx0Ly8gU3VwcG9ydDogRmlyZWZveCAyMCtcclxuXHRcdFx0XHQvLyBGaXJlZm94IGRvZXNuJ3QgYWxlcnQgaWYgdGhlIHJldHVyblZhbHVlIGZpZWxkIGlzIG5vdCBzZXQuXHJcblx0XHRcdFx0aWYgKCBldmVudC5yZXN1bHQgIT09IHVuZGVmaW5lZCAmJiBldmVudC5vcmlnaW5hbEV2ZW50ICkge1xyXG5cdFx0XHRcdFx0ZXZlbnQub3JpZ2luYWxFdmVudC5yZXR1cm5WYWx1ZSA9IGV2ZW50LnJlc3VsdDtcclxuXHRcdFx0XHR9XHJcblx0XHRcdH1cclxuXHRcdH1cclxuXHR9XHJcbn07XHJcblxyXG5qUXVlcnkucmVtb3ZlRXZlbnQgPSBmdW5jdGlvbiggZWxlbSwgdHlwZSwgaGFuZGxlICkge1xyXG5cclxuXHQvLyBUaGlzIFwiaWZcIiBpcyBuZWVkZWQgZm9yIHBsYWluIG9iamVjdHNcclxuXHRpZiAoIGVsZW0ucmVtb3ZlRXZlbnRMaXN0ZW5lciApIHtcclxuXHRcdGVsZW0ucmVtb3ZlRXZlbnRMaXN0ZW5lciggdHlwZSwgaGFuZGxlICk7XHJcblx0fVxyXG59O1xyXG5cclxualF1ZXJ5LkV2ZW50ID0gZnVuY3Rpb24oIHNyYywgcHJvcHMgKSB7XHJcblxyXG5cdC8vIEFsbG93IGluc3RhbnRpYXRpb24gd2l0aG91dCB0aGUgJ25ldycga2V5d29yZFxyXG5cdGlmICggISggdGhpcyBpbnN0YW5jZW9mIGpRdWVyeS5FdmVudCApICkge1xyXG5cdFx0cmV0dXJuIG5ldyBqUXVlcnkuRXZlbnQoIHNyYywgcHJvcHMgKTtcclxuXHR9XHJcblxyXG5cdC8vIEV2ZW50IG9iamVjdFxyXG5cdGlmICggc3JjICYmIHNyYy50eXBlICkge1xyXG5cdFx0dGhpcy5vcmlnaW5hbEV2ZW50ID0gc3JjO1xyXG5cdFx0dGhpcy50eXBlID0gc3JjLnR5cGU7XHJcblxyXG5cdFx0Ly8gRXZlbnRzIGJ1YmJsaW5nIHVwIHRoZSBkb2N1bWVudCBtYXkgaGF2ZSBiZWVuIG1hcmtlZCBhcyBwcmV2ZW50ZWRcclxuXHRcdC8vIGJ5IGEgaGFuZGxlciBsb3dlciBkb3duIHRoZSB0cmVlOyByZWZsZWN0IHRoZSBjb3JyZWN0IHZhbHVlLlxyXG5cdFx0dGhpcy5pc0RlZmF1bHRQcmV2ZW50ZWQgPSBzcmMuZGVmYXVsdFByZXZlbnRlZCB8fFxyXG5cdFx0XHRcdHNyYy5kZWZhdWx0UHJldmVudGVkID09PSB1bmRlZmluZWQgJiZcclxuXHJcblx0XHRcdFx0Ly8gU3VwcG9ydDogQW5kcm9pZDw0LjBcclxuXHRcdFx0XHRzcmMucmV0dXJuVmFsdWUgPT09IGZhbHNlID9cclxuXHRcdFx0cmV0dXJuVHJ1ZSA6XHJcblx0XHRcdHJldHVybkZhbHNlO1xyXG5cclxuXHQvLyBFdmVudCB0eXBlXHJcblx0fSBlbHNlIHtcclxuXHRcdHRoaXMudHlwZSA9IHNyYztcclxuXHR9XHJcblxyXG5cdC8vIFB1dCBleHBsaWNpdGx5IHByb3ZpZGVkIHByb3BlcnRpZXMgb250byB0aGUgZXZlbnQgb2JqZWN0XHJcblx0aWYgKCBwcm9wcyApIHtcclxuXHRcdGpRdWVyeS5leHRlbmQoIHRoaXMsIHByb3BzICk7XHJcblx0fVxyXG5cclxuXHQvLyBDcmVhdGUgYSB0aW1lc3RhbXAgaWYgaW5jb21pbmcgZXZlbnQgZG9lc24ndCBoYXZlIG9uZVxyXG5cdHRoaXMudGltZVN0YW1wID0gc3JjICYmIHNyYy50aW1lU3RhbXAgfHwgalF1ZXJ5Lm5vdygpO1xyXG5cclxuXHQvLyBNYXJrIGl0IGFzIGZpeGVkXHJcblx0dGhpc1sgalF1ZXJ5LmV4cGFuZG8gXSA9IHRydWU7XHJcbn07XHJcblxyXG4vLyBqUXVlcnkuRXZlbnQgaXMgYmFzZWQgb24gRE9NMyBFdmVudHMgYXMgc3BlY2lmaWVkIGJ5IHRoZSBFQ01BU2NyaXB0IExhbmd1YWdlIEJpbmRpbmdcclxuLy8gaHR0cDovL3d3dy53My5vcmcvVFIvMjAwMy9XRC1ET00tTGV2ZWwtMy1FdmVudHMtMjAwMzAzMzEvZWNtYS1zY3JpcHQtYmluZGluZy5odG1sXHJcbmpRdWVyeS5FdmVudC5wcm90b3R5cGUgPSB7XHJcblx0Y29uc3RydWN0b3I6IGpRdWVyeS5FdmVudCxcclxuXHRpc0RlZmF1bHRQcmV2ZW50ZWQ6IHJldHVybkZhbHNlLFxyXG5cdGlzUHJvcGFnYXRpb25TdG9wcGVkOiByZXR1cm5GYWxzZSxcclxuXHRpc0ltbWVkaWF0ZVByb3BhZ2F0aW9uU3RvcHBlZDogcmV0dXJuRmFsc2UsXHJcblx0aXNTaW11bGF0ZWQ6IGZhbHNlLFxyXG5cclxuXHRwcmV2ZW50RGVmYXVsdDogZnVuY3Rpb24oKSB7XHJcblx0XHR2YXIgZSA9IHRoaXMub3JpZ2luYWxFdmVudDtcclxuXHJcblx0XHR0aGlzLmlzRGVmYXVsdFByZXZlbnRlZCA9IHJldHVyblRydWU7XHJcblxyXG5cdFx0aWYgKCBlICYmICF0aGlzLmlzU2ltdWxhdGVkICkge1xyXG5cdFx0XHRlLnByZXZlbnREZWZhdWx0KCk7XHJcblx0XHR9XHJcblx0fSxcclxuXHRzdG9wUHJvcGFnYXRpb246IGZ1bmN0aW9uKCkge1xyXG5cdFx0dmFyIGUgPSB0aGlzLm9yaWdpbmFsRXZlbnQ7XHJcblxyXG5cdFx0dGhpcy5pc1Byb3BhZ2F0aW9uU3RvcHBlZCA9IHJldHVyblRydWU7XHJcblxyXG5cdFx0aWYgKCBlICYmICF0aGlzLmlzU2ltdWxhdGVkICkge1xyXG5cdFx0XHRlLnN0b3BQcm9wYWdhdGlvbigpO1xyXG5cdFx0fVxyXG5cdH0sXHJcblx0c3RvcEltbWVkaWF0ZVByb3BhZ2F0aW9uOiBmdW5jdGlvbigpIHtcclxuXHRcdHZhciBlID0gdGhpcy5vcmlnaW5hbEV2ZW50O1xyXG5cclxuXHRcdHRoaXMuaXNJbW1lZGlhdGVQcm9wYWdhdGlvblN0b3BwZWQgPSByZXR1cm5UcnVlO1xyXG5cclxuXHRcdGlmICggZSAmJiAhdGhpcy5pc1NpbXVsYXRlZCApIHtcclxuXHRcdFx0ZS5zdG9wSW1tZWRpYXRlUHJvcGFnYXRpb24oKTtcclxuXHRcdH1cclxuXHJcblx0XHR0aGlzLnN0b3BQcm9wYWdhdGlvbigpO1xyXG5cdH1cclxufTtcclxuXHJcbi8vIENyZWF0ZSBtb3VzZWVudGVyL2xlYXZlIGV2ZW50cyB1c2luZyBtb3VzZW92ZXIvb3V0IGFuZCBldmVudC10aW1lIGNoZWNrc1xyXG4vLyBzbyB0aGF0IGV2ZW50IGRlbGVnYXRpb24gd29ya3MgaW4galF1ZXJ5LlxyXG4vLyBEbyB0aGUgc2FtZSBmb3IgcG9pbnRlcmVudGVyL3BvaW50ZXJsZWF2ZSBhbmQgcG9pbnRlcm92ZXIvcG9pbnRlcm91dFxyXG4vL1xyXG4vLyBTdXBwb3J0OiBTYWZhcmkgNyBvbmx5XHJcbi8vIFNhZmFyaSBzZW5kcyBtb3VzZWVudGVyIHRvbyBvZnRlbjsgc2VlOlxyXG4vLyBodHRwczovL2NvZGUuZ29vZ2xlLmNvbS9wL2Nocm9taXVtL2lzc3Vlcy9kZXRhaWw/aWQ9NDcwMjU4XHJcbi8vIGZvciB0aGUgZGVzY3JpcHRpb24gb2YgdGhlIGJ1ZyAoaXQgZXhpc3RlZCBpbiBvbGRlciBDaHJvbWUgdmVyc2lvbnMgYXMgd2VsbCkuXHJcbmpRdWVyeS5lYWNoKCB7XHJcblx0bW91c2VlbnRlcjogXCJtb3VzZW92ZXJcIixcclxuXHRtb3VzZWxlYXZlOiBcIm1vdXNlb3V0XCIsXHJcblx0cG9pbnRlcmVudGVyOiBcInBvaW50ZXJvdmVyXCIsXHJcblx0cG9pbnRlcmxlYXZlOiBcInBvaW50ZXJvdXRcIlxyXG59LCBmdW5jdGlvbiggb3JpZywgZml4ICkge1xyXG5cdGpRdWVyeS5ldmVudC5zcGVjaWFsWyBvcmlnIF0gPSB7XHJcblx0XHRkZWxlZ2F0ZVR5cGU6IGZpeCxcclxuXHRcdGJpbmRUeXBlOiBmaXgsXHJcblxyXG5cdFx0aGFuZGxlOiBmdW5jdGlvbiggZXZlbnQgKSB7XHJcblx0XHRcdHZhciByZXQsXHJcblx0XHRcdFx0dGFyZ2V0ID0gdGhpcyxcclxuXHRcdFx0XHRyZWxhdGVkID0gZXZlbnQucmVsYXRlZFRhcmdldCxcclxuXHRcdFx0XHRoYW5kbGVPYmogPSBldmVudC5oYW5kbGVPYmo7XHJcblxyXG5cdFx0XHQvLyBGb3IgbW91c2VlbnRlci9sZWF2ZSBjYWxsIHRoZSBoYW5kbGVyIGlmIHJlbGF0ZWQgaXMgb3V0c2lkZSB0aGUgdGFyZ2V0LlxyXG5cdFx0XHQvLyBOQjogTm8gcmVsYXRlZFRhcmdldCBpZiB0aGUgbW91c2UgbGVmdC9lbnRlcmVkIHRoZSBicm93c2VyIHdpbmRvd1xyXG5cdFx0XHRpZiAoICFyZWxhdGVkIHx8ICggcmVsYXRlZCAhPT0gdGFyZ2V0ICYmICFqUXVlcnkuY29udGFpbnMoIHRhcmdldCwgcmVsYXRlZCApICkgKSB7XHJcblx0XHRcdFx0ZXZlbnQudHlwZSA9IGhhbmRsZU9iai5vcmlnVHlwZTtcclxuXHRcdFx0XHRyZXQgPSBoYW5kbGVPYmouaGFuZGxlci5hcHBseSggdGhpcywgYXJndW1lbnRzICk7XHJcblx0XHRcdFx0ZXZlbnQudHlwZSA9IGZpeDtcclxuXHRcdFx0fVxyXG5cdFx0XHRyZXR1cm4gcmV0O1xyXG5cdFx0fVxyXG5cdH07XHJcbn0gKTtcclxuXHJcbmpRdWVyeS5mbi5leHRlbmQoIHtcclxuXHRvbjogZnVuY3Rpb24oIHR5cGVzLCBzZWxlY3RvciwgZGF0YSwgZm4gKSB7XHJcblx0XHRyZXR1cm4gb24oIHRoaXMsIHR5cGVzLCBzZWxlY3RvciwgZGF0YSwgZm4gKTtcclxuXHR9LFxyXG5cdG9uZTogZnVuY3Rpb24oIHR5cGVzLCBzZWxlY3RvciwgZGF0YSwgZm4gKSB7XHJcblx0XHRyZXR1cm4gb24oIHRoaXMsIHR5cGVzLCBzZWxlY3RvciwgZGF0YSwgZm4sIDEgKTtcclxuXHR9LFxyXG5cdG9mZjogZnVuY3Rpb24oIHR5cGVzLCBzZWxlY3RvciwgZm4gKSB7XHJcblx0XHR2YXIgaGFuZGxlT2JqLCB0eXBlO1xyXG5cdFx0aWYgKCB0eXBlcyAmJiB0eXBlcy5wcmV2ZW50RGVmYXVsdCAmJiB0eXBlcy5oYW5kbGVPYmogKSB7XHJcblxyXG5cdFx0XHQvLyAoIGV2ZW50ICkgIGRpc3BhdGNoZWQgalF1ZXJ5LkV2ZW50XHJcblx0XHRcdGhhbmRsZU9iaiA9IHR5cGVzLmhhbmRsZU9iajtcclxuXHRcdFx0alF1ZXJ5KCB0eXBlcy5kZWxlZ2F0ZVRhcmdldCApLm9mZihcclxuXHRcdFx0XHRoYW5kbGVPYmoubmFtZXNwYWNlID9cclxuXHRcdFx0XHRcdGhhbmRsZU9iai5vcmlnVHlwZSArIFwiLlwiICsgaGFuZGxlT2JqLm5hbWVzcGFjZSA6XHJcblx0XHRcdFx0XHRoYW5kbGVPYmoub3JpZ1R5cGUsXHJcblx0XHRcdFx0aGFuZGxlT2JqLnNlbGVjdG9yLFxyXG5cdFx0XHRcdGhhbmRsZU9iai5oYW5kbGVyXHJcblx0XHRcdCk7XHJcblx0XHRcdHJldHVybiB0aGlzO1xyXG5cdFx0fVxyXG5cdFx0aWYgKCB0eXBlb2YgdHlwZXMgPT09IFwib2JqZWN0XCIgKSB7XHJcblxyXG5cdFx0XHQvLyAoIHR5cGVzLW9iamVjdCBbLCBzZWxlY3Rvcl0gKVxyXG5cdFx0XHRmb3IgKCB0eXBlIGluIHR5cGVzICkge1xyXG5cdFx0XHRcdHRoaXMub2ZmKCB0eXBlLCBzZWxlY3RvciwgdHlwZXNbIHR5cGUgXSApO1xyXG5cdFx0XHR9XHJcblx0XHRcdHJldHVybiB0aGlzO1xyXG5cdFx0fVxyXG5cdFx0aWYgKCBzZWxlY3RvciA9PT0gZmFsc2UgfHwgdHlwZW9mIHNlbGVjdG9yID09PSBcImZ1bmN0aW9uXCIgKSB7XHJcblxyXG5cdFx0XHQvLyAoIHR5cGVzIFssIGZuXSApXHJcblx0XHRcdGZuID0gc2VsZWN0b3I7XHJcblx0XHRcdHNlbGVjdG9yID0gdW5kZWZpbmVkO1xyXG5cdFx0fVxyXG5cdFx0aWYgKCBmbiA9PT0gZmFsc2UgKSB7XHJcblx0XHRcdGZuID0gcmV0dXJuRmFsc2U7XHJcblx0XHR9XHJcblx0XHRyZXR1cm4gdGhpcy5lYWNoKCBmdW5jdGlvbigpIHtcclxuXHRcdFx0alF1ZXJ5LmV2ZW50LnJlbW92ZSggdGhpcywgdHlwZXMsIGZuLCBzZWxlY3RvciApO1xyXG5cdFx0fSApO1xyXG5cdH1cclxufSApO1xyXG5cclxuXHJcbnZhclxyXG5cdHJ4aHRtbFRhZyA9IC88KD8hYXJlYXxicnxjb2x8ZW1iZWR8aHJ8aW1nfGlucHV0fGxpbmt8bWV0YXxwYXJhbSkoKFtcXHc6LV0rKVtePl0qKVxcLz4vZ2ksXHJcblxyXG5cdC8vIFN1cHBvcnQ6IElFIDEwLTExLCBFZGdlIDEwMjQwK1xyXG5cdC8vIEluIElFL0VkZ2UgdXNpbmcgcmVnZXggZ3JvdXBzIGhlcmUgY2F1c2VzIHNldmVyZSBzbG93ZG93bnMuXHJcblx0Ly8gU2VlIGh0dHBzOi8vY29ubmVjdC5taWNyb3NvZnQuY29tL0lFL2ZlZWRiYWNrL2RldGFpbHMvMTczNjUxMi9cclxuXHRybm9Jbm5lcmh0bWwgPSAvPHNjcmlwdHw8c3R5bGV8PGxpbmsvaSxcclxuXHJcblx0Ly8gY2hlY2tlZD1cImNoZWNrZWRcIiBvciBjaGVja2VkXHJcblx0cmNoZWNrZWQgPSAvY2hlY2tlZFxccyooPzpbXj1dfD1cXHMqLmNoZWNrZWQuKS9pLFxyXG5cdHJzY3JpcHRUeXBlTWFza2VkID0gL150cnVlXFwvKC4qKS8sXHJcblx0cmNsZWFuU2NyaXB0ID0gL15cXHMqPCEoPzpcXFtDREFUQVxcW3wtLSl8KD86XFxdXFxdfC0tKT5cXHMqJC9nO1xyXG5cclxuLy8gTWFuaXB1bGF0aW5nIHRhYmxlcyByZXF1aXJlcyBhIHRib2R5XHJcbmZ1bmN0aW9uIG1hbmlwdWxhdGlvblRhcmdldCggZWxlbSwgY29udGVudCApIHtcclxuXHRyZXR1cm4galF1ZXJ5Lm5vZGVOYW1lKCBlbGVtLCBcInRhYmxlXCIgKSAmJlxyXG5cdFx0alF1ZXJ5Lm5vZGVOYW1lKCBjb250ZW50Lm5vZGVUeXBlICE9PSAxMSA/IGNvbnRlbnQgOiBjb250ZW50LmZpcnN0Q2hpbGQsIFwidHJcIiApID9cclxuXHJcblx0XHRlbGVtLmdldEVsZW1lbnRzQnlUYWdOYW1lKCBcInRib2R5XCIgKVsgMCBdIHx8XHJcblx0XHRcdGVsZW0uYXBwZW5kQ2hpbGQoIGVsZW0ub3duZXJEb2N1bWVudC5jcmVhdGVFbGVtZW50KCBcInRib2R5XCIgKSApIDpcclxuXHRcdGVsZW07XHJcbn1cclxuXHJcbi8vIFJlcGxhY2UvcmVzdG9yZSB0aGUgdHlwZSBhdHRyaWJ1dGUgb2Ygc2NyaXB0IGVsZW1lbnRzIGZvciBzYWZlIERPTSBtYW5pcHVsYXRpb25cclxuZnVuY3Rpb24gZGlzYWJsZVNjcmlwdCggZWxlbSApIHtcclxuXHRlbGVtLnR5cGUgPSAoIGVsZW0uZ2V0QXR0cmlidXRlKCBcInR5cGVcIiApICE9PSBudWxsICkgKyBcIi9cIiArIGVsZW0udHlwZTtcclxuXHRyZXR1cm4gZWxlbTtcclxufVxyXG5mdW5jdGlvbiByZXN0b3JlU2NyaXB0KCBlbGVtICkge1xyXG5cdHZhciBtYXRjaCA9IHJzY3JpcHRUeXBlTWFza2VkLmV4ZWMoIGVsZW0udHlwZSApO1xyXG5cclxuXHRpZiAoIG1hdGNoICkge1xyXG5cdFx0ZWxlbS50eXBlID0gbWF0Y2hbIDEgXTtcclxuXHR9IGVsc2Uge1xyXG5cdFx0ZWxlbS5yZW1vdmVBdHRyaWJ1dGUoIFwidHlwZVwiICk7XHJcblx0fVxyXG5cclxuXHRyZXR1cm4gZWxlbTtcclxufVxyXG5cclxuZnVuY3Rpb24gY2xvbmVDb3B5RXZlbnQoIHNyYywgZGVzdCApIHtcclxuXHR2YXIgaSwgbCwgdHlwZSwgcGRhdGFPbGQsIHBkYXRhQ3VyLCB1ZGF0YU9sZCwgdWRhdGFDdXIsIGV2ZW50cztcclxuXHJcblx0aWYgKCBkZXN0Lm5vZGVUeXBlICE9PSAxICkge1xyXG5cdFx0cmV0dXJuO1xyXG5cdH1cclxuXHJcblx0Ly8gMS4gQ29weSBwcml2YXRlIGRhdGE6IGV2ZW50cywgaGFuZGxlcnMsIGV0Yy5cclxuXHRpZiAoIGRhdGFQcml2Lmhhc0RhdGEoIHNyYyApICkge1xyXG5cdFx0cGRhdGFPbGQgPSBkYXRhUHJpdi5hY2Nlc3MoIHNyYyApO1xyXG5cdFx0cGRhdGFDdXIgPSBkYXRhUHJpdi5zZXQoIGRlc3QsIHBkYXRhT2xkICk7XHJcblx0XHRldmVudHMgPSBwZGF0YU9sZC5ldmVudHM7XHJcblxyXG5cdFx0aWYgKCBldmVudHMgKSB7XHJcblx0XHRcdGRlbGV0ZSBwZGF0YUN1ci5oYW5kbGU7XHJcblx0XHRcdHBkYXRhQ3VyLmV2ZW50cyA9IHt9O1xyXG5cclxuXHRcdFx0Zm9yICggdHlwZSBpbiBldmVudHMgKSB7XHJcblx0XHRcdFx0Zm9yICggaSA9IDAsIGwgPSBldmVudHNbIHR5cGUgXS5sZW5ndGg7IGkgPCBsOyBpKysgKSB7XHJcblx0XHRcdFx0XHRqUXVlcnkuZXZlbnQuYWRkKCBkZXN0LCB0eXBlLCBldmVudHNbIHR5cGUgXVsgaSBdICk7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9XHJcblx0XHR9XHJcblx0fVxyXG5cclxuXHQvLyAyLiBDb3B5IHVzZXIgZGF0YVxyXG5cdGlmICggZGF0YVVzZXIuaGFzRGF0YSggc3JjICkgKSB7XHJcblx0XHR1ZGF0YU9sZCA9IGRhdGFVc2VyLmFjY2Vzcyggc3JjICk7XHJcblx0XHR1ZGF0YUN1ciA9IGpRdWVyeS5leHRlbmQoIHt9LCB1ZGF0YU9sZCApO1xyXG5cclxuXHRcdGRhdGFVc2VyLnNldCggZGVzdCwgdWRhdGFDdXIgKTtcclxuXHR9XHJcbn1cclxuXHJcbi8vIEZpeCBJRSBidWdzLCBzZWUgc3VwcG9ydCB0ZXN0c1xyXG5mdW5jdGlvbiBmaXhJbnB1dCggc3JjLCBkZXN0ICkge1xyXG5cdHZhciBub2RlTmFtZSA9IGRlc3Qubm9kZU5hbWUudG9Mb3dlckNhc2UoKTtcclxuXHJcblx0Ly8gRmFpbHMgdG8gcGVyc2lzdCB0aGUgY2hlY2tlZCBzdGF0ZSBvZiBhIGNsb25lZCBjaGVja2JveCBvciByYWRpbyBidXR0b24uXHJcblx0aWYgKCBub2RlTmFtZSA9PT0gXCJpbnB1dFwiICYmIHJjaGVja2FibGVUeXBlLnRlc3QoIHNyYy50eXBlICkgKSB7XHJcblx0XHRkZXN0LmNoZWNrZWQgPSBzcmMuY2hlY2tlZDtcclxuXHJcblx0Ly8gRmFpbHMgdG8gcmV0dXJuIHRoZSBzZWxlY3RlZCBvcHRpb24gdG8gdGhlIGRlZmF1bHQgc2VsZWN0ZWQgc3RhdGUgd2hlbiBjbG9uaW5nIG9wdGlvbnNcclxuXHR9IGVsc2UgaWYgKCBub2RlTmFtZSA9PT0gXCJpbnB1dFwiIHx8IG5vZGVOYW1lID09PSBcInRleHRhcmVhXCIgKSB7XHJcblx0XHRkZXN0LmRlZmF1bHRWYWx1ZSA9IHNyYy5kZWZhdWx0VmFsdWU7XHJcblx0fVxyXG59XHJcblxyXG5mdW5jdGlvbiBkb21NYW5pcCggY29sbGVjdGlvbiwgYXJncywgY2FsbGJhY2ssIGlnbm9yZWQgKSB7XHJcblxyXG5cdC8vIEZsYXR0ZW4gYW55IG5lc3RlZCBhcnJheXNcclxuXHRhcmdzID0gY29uY2F0LmFwcGx5KCBbXSwgYXJncyApO1xyXG5cclxuXHR2YXIgZnJhZ21lbnQsIGZpcnN0LCBzY3JpcHRzLCBoYXNTY3JpcHRzLCBub2RlLCBkb2MsXHJcblx0XHRpID0gMCxcclxuXHRcdGwgPSBjb2xsZWN0aW9uLmxlbmd0aCxcclxuXHRcdGlOb0Nsb25lID0gbCAtIDEsXHJcblx0XHR2YWx1ZSA9IGFyZ3NbIDAgXSxcclxuXHRcdGlzRnVuY3Rpb24gPSBqUXVlcnkuaXNGdW5jdGlvbiggdmFsdWUgKTtcclxuXHJcblx0Ly8gV2UgY2FuJ3QgY2xvbmVOb2RlIGZyYWdtZW50cyB0aGF0IGNvbnRhaW4gY2hlY2tlZCwgaW4gV2ViS2l0XHJcblx0aWYgKCBpc0Z1bmN0aW9uIHx8XHJcblx0XHRcdCggbCA+IDEgJiYgdHlwZW9mIHZhbHVlID09PSBcInN0cmluZ1wiICYmXHJcblx0XHRcdFx0IXN1cHBvcnQuY2hlY2tDbG9uZSAmJiByY2hlY2tlZC50ZXN0KCB2YWx1ZSApICkgKSB7XHJcblx0XHRyZXR1cm4gY29sbGVjdGlvbi5lYWNoKCBmdW5jdGlvbiggaW5kZXggKSB7XHJcblx0XHRcdHZhciBzZWxmID0gY29sbGVjdGlvbi5lcSggaW5kZXggKTtcclxuXHRcdFx0aWYgKCBpc0Z1bmN0aW9uICkge1xyXG5cdFx0XHRcdGFyZ3NbIDAgXSA9IHZhbHVlLmNhbGwoIHRoaXMsIGluZGV4LCBzZWxmLmh0bWwoKSApO1xyXG5cdFx0XHR9XHJcblx0XHRcdGRvbU1hbmlwKCBzZWxmLCBhcmdzLCBjYWxsYmFjaywgaWdub3JlZCApO1xyXG5cdFx0fSApO1xyXG5cdH1cclxuXHJcblx0aWYgKCBsICkge1xyXG5cdFx0ZnJhZ21lbnQgPSBidWlsZEZyYWdtZW50KCBhcmdzLCBjb2xsZWN0aW9uWyAwIF0ub3duZXJEb2N1bWVudCwgZmFsc2UsIGNvbGxlY3Rpb24sIGlnbm9yZWQgKTtcclxuXHRcdGZpcnN0ID0gZnJhZ21lbnQuZmlyc3RDaGlsZDtcclxuXHJcblx0XHRpZiAoIGZyYWdtZW50LmNoaWxkTm9kZXMubGVuZ3RoID09PSAxICkge1xyXG5cdFx0XHRmcmFnbWVudCA9IGZpcnN0O1xyXG5cdFx0fVxyXG5cclxuXHRcdC8vIFJlcXVpcmUgZWl0aGVyIG5ldyBjb250ZW50IG9yIGFuIGludGVyZXN0IGluIGlnbm9yZWQgZWxlbWVudHMgdG8gaW52b2tlIHRoZSBjYWxsYmFja1xyXG5cdFx0aWYgKCBmaXJzdCB8fCBpZ25vcmVkICkge1xyXG5cdFx0XHRzY3JpcHRzID0galF1ZXJ5Lm1hcCggZ2V0QWxsKCBmcmFnbWVudCwgXCJzY3JpcHRcIiApLCBkaXNhYmxlU2NyaXB0ICk7XHJcblx0XHRcdGhhc1NjcmlwdHMgPSBzY3JpcHRzLmxlbmd0aDtcclxuXHJcblx0XHRcdC8vIFVzZSB0aGUgb3JpZ2luYWwgZnJhZ21lbnQgZm9yIHRoZSBsYXN0IGl0ZW1cclxuXHRcdFx0Ly8gaW5zdGVhZCBvZiB0aGUgZmlyc3QgYmVjYXVzZSBpdCBjYW4gZW5kIHVwXHJcblx0XHRcdC8vIGJlaW5nIGVtcHRpZWQgaW5jb3JyZWN0bHkgaW4gY2VydGFpbiBzaXR1YXRpb25zICgjODA3MCkuXHJcblx0XHRcdGZvciAoIDsgaSA8IGw7IGkrKyApIHtcclxuXHRcdFx0XHRub2RlID0gZnJhZ21lbnQ7XHJcblxyXG5cdFx0XHRcdGlmICggaSAhPT0gaU5vQ2xvbmUgKSB7XHJcblx0XHRcdFx0XHRub2RlID0galF1ZXJ5LmNsb25lKCBub2RlLCB0cnVlLCB0cnVlICk7XHJcblxyXG5cdFx0XHRcdFx0Ly8gS2VlcCByZWZlcmVuY2VzIHRvIGNsb25lZCBzY3JpcHRzIGZvciBsYXRlciByZXN0b3JhdGlvblxyXG5cdFx0XHRcdFx0aWYgKCBoYXNTY3JpcHRzICkge1xyXG5cclxuXHRcdFx0XHRcdFx0Ly8gU3VwcG9ydDogQW5kcm9pZDw0LjEsIFBoYW50b21KUzwyXHJcblx0XHRcdFx0XHRcdC8vIHB1c2guYXBwbHkoXywgYXJyYXlsaWtlKSB0aHJvd3Mgb24gYW5jaWVudCBXZWJLaXRcclxuXHRcdFx0XHRcdFx0alF1ZXJ5Lm1lcmdlKCBzY3JpcHRzLCBnZXRBbGwoIG5vZGUsIFwic2NyaXB0XCIgKSApO1xyXG5cdFx0XHRcdFx0fVxyXG5cdFx0XHRcdH1cclxuXHJcblx0XHRcdFx0Y2FsbGJhY2suY2FsbCggY29sbGVjdGlvblsgaSBdLCBub2RlLCBpICk7XHJcblx0XHRcdH1cclxuXHJcblx0XHRcdGlmICggaGFzU2NyaXB0cyApIHtcclxuXHRcdFx0XHRkb2MgPSBzY3JpcHRzWyBzY3JpcHRzLmxlbmd0aCAtIDEgXS5vd25lckRvY3VtZW50O1xyXG5cclxuXHRcdFx0XHQvLyBSZWVuYWJsZSBzY3JpcHRzXHJcblx0XHRcdFx0alF1ZXJ5Lm1hcCggc2NyaXB0cywgcmVzdG9yZVNjcmlwdCApO1xyXG5cclxuXHRcdFx0XHQvLyBFdmFsdWF0ZSBleGVjdXRhYmxlIHNjcmlwdHMgb24gZmlyc3QgZG9jdW1lbnQgaW5zZXJ0aW9uXHJcblx0XHRcdFx0Zm9yICggaSA9IDA7IGkgPCBoYXNTY3JpcHRzOyBpKysgKSB7XHJcblx0XHRcdFx0XHRub2RlID0gc2NyaXB0c1sgaSBdO1xyXG5cdFx0XHRcdFx0aWYgKCByc2NyaXB0VHlwZS50ZXN0KCBub2RlLnR5cGUgfHwgXCJcIiApICYmXHJcblx0XHRcdFx0XHRcdCFkYXRhUHJpdi5hY2Nlc3MoIG5vZGUsIFwiZ2xvYmFsRXZhbFwiICkgJiZcclxuXHRcdFx0XHRcdFx0alF1ZXJ5LmNvbnRhaW5zKCBkb2MsIG5vZGUgKSApIHtcclxuXHJcblx0XHRcdFx0XHRcdGlmICggbm9kZS5zcmMgKSB7XHJcblxyXG5cdFx0XHRcdFx0XHRcdC8vIE9wdGlvbmFsIEFKQVggZGVwZW5kZW5jeSwgYnV0IHdvbid0IHJ1biBzY3JpcHRzIGlmIG5vdCBwcmVzZW50XHJcblx0XHRcdFx0XHRcdFx0aWYgKCBqUXVlcnkuX2V2YWxVcmwgKSB7XHJcblx0XHRcdFx0XHRcdFx0XHRqUXVlcnkuX2V2YWxVcmwoIG5vZGUuc3JjICk7XHJcblx0XHRcdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0XHR9IGVsc2Uge1xyXG5cdFx0XHRcdFx0XHRcdGpRdWVyeS5nbG9iYWxFdmFsKCBub2RlLnRleHRDb250ZW50LnJlcGxhY2UoIHJjbGVhblNjcmlwdCwgXCJcIiApICk7XHJcblx0XHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdH1cclxuXHRcdFx0XHR9XHJcblx0XHRcdH1cclxuXHRcdH1cclxuXHR9XHJcblxyXG5cdHJldHVybiBjb2xsZWN0aW9uO1xyXG59XHJcblxyXG5mdW5jdGlvbiByZW1vdmUoIGVsZW0sIHNlbGVjdG9yLCBrZWVwRGF0YSApIHtcclxuXHR2YXIgbm9kZSxcclxuXHRcdG5vZGVzID0gc2VsZWN0b3IgPyBqUXVlcnkuZmlsdGVyKCBzZWxlY3RvciwgZWxlbSApIDogZWxlbSxcclxuXHRcdGkgPSAwO1xyXG5cclxuXHRmb3IgKCA7ICggbm9kZSA9IG5vZGVzWyBpIF0gKSAhPSBudWxsOyBpKysgKSB7XHJcblx0XHRpZiAoICFrZWVwRGF0YSAmJiBub2RlLm5vZGVUeXBlID09PSAxICkge1xyXG5cdFx0XHRqUXVlcnkuY2xlYW5EYXRhKCBnZXRBbGwoIG5vZGUgKSApO1xyXG5cdFx0fVxyXG5cclxuXHRcdGlmICggbm9kZS5wYXJlbnROb2RlICkge1xyXG5cdFx0XHRpZiAoIGtlZXBEYXRhICYmIGpRdWVyeS5jb250YWlucyggbm9kZS5vd25lckRvY3VtZW50LCBub2RlICkgKSB7XHJcblx0XHRcdFx0c2V0R2xvYmFsRXZhbCggZ2V0QWxsKCBub2RlLCBcInNjcmlwdFwiICkgKTtcclxuXHRcdFx0fVxyXG5cdFx0XHRub2RlLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoIG5vZGUgKTtcclxuXHRcdH1cclxuXHR9XHJcblxyXG5cdHJldHVybiBlbGVtO1xyXG59XHJcblxyXG5qUXVlcnkuZXh0ZW5kKCB7XHJcblx0aHRtbFByZWZpbHRlcjogZnVuY3Rpb24oIGh0bWwgKSB7XHJcblx0XHRyZXR1cm4gaHRtbC5yZXBsYWNlKCByeGh0bWxUYWcsIFwiPCQxPjwvJDI+XCIgKTtcclxuXHR9LFxyXG5cclxuXHRjbG9uZTogZnVuY3Rpb24oIGVsZW0sIGRhdGFBbmRFdmVudHMsIGRlZXBEYXRhQW5kRXZlbnRzICkge1xyXG5cdFx0dmFyIGksIGwsIHNyY0VsZW1lbnRzLCBkZXN0RWxlbWVudHMsXHJcblx0XHRcdGNsb25lID0gZWxlbS5jbG9uZU5vZGUoIHRydWUgKSxcclxuXHRcdFx0aW5QYWdlID0galF1ZXJ5LmNvbnRhaW5zKCBlbGVtLm93bmVyRG9jdW1lbnQsIGVsZW0gKTtcclxuXHJcblx0XHQvLyBGaXggSUUgY2xvbmluZyBpc3N1ZXNcclxuXHRcdGlmICggIXN1cHBvcnQubm9DbG9uZUNoZWNrZWQgJiYgKCBlbGVtLm5vZGVUeXBlID09PSAxIHx8IGVsZW0ubm9kZVR5cGUgPT09IDExICkgJiZcclxuXHRcdFx0XHQhalF1ZXJ5LmlzWE1MRG9jKCBlbGVtICkgKSB7XHJcblxyXG5cdFx0XHQvLyBXZSBlc2NoZXcgU2l6emxlIGhlcmUgZm9yIHBlcmZvcm1hbmNlIHJlYXNvbnM6IGh0dHA6Ly9qc3BlcmYuY29tL2dldGFsbC12cy1zaXp6bGUvMlxyXG5cdFx0XHRkZXN0RWxlbWVudHMgPSBnZXRBbGwoIGNsb25lICk7XHJcblx0XHRcdHNyY0VsZW1lbnRzID0gZ2V0QWxsKCBlbGVtICk7XHJcblxyXG5cdFx0XHRmb3IgKCBpID0gMCwgbCA9IHNyY0VsZW1lbnRzLmxlbmd0aDsgaSA8IGw7IGkrKyApIHtcclxuXHRcdFx0XHRmaXhJbnB1dCggc3JjRWxlbWVudHNbIGkgXSwgZGVzdEVsZW1lbnRzWyBpIF0gKTtcclxuXHRcdFx0fVxyXG5cdFx0fVxyXG5cclxuXHRcdC8vIENvcHkgdGhlIGV2ZW50cyBmcm9tIHRoZSBvcmlnaW5hbCB0byB0aGUgY2xvbmVcclxuXHRcdGlmICggZGF0YUFuZEV2ZW50cyApIHtcclxuXHRcdFx0aWYgKCBkZWVwRGF0YUFuZEV2ZW50cyApIHtcclxuXHRcdFx0XHRzcmNFbGVtZW50cyA9IHNyY0VsZW1lbnRzIHx8IGdldEFsbCggZWxlbSApO1xyXG5cdFx0XHRcdGRlc3RFbGVtZW50cyA9IGRlc3RFbGVtZW50cyB8fCBnZXRBbGwoIGNsb25lICk7XHJcblxyXG5cdFx0XHRcdGZvciAoIGkgPSAwLCBsID0gc3JjRWxlbWVudHMubGVuZ3RoOyBpIDwgbDsgaSsrICkge1xyXG5cdFx0XHRcdFx0Y2xvbmVDb3B5RXZlbnQoIHNyY0VsZW1lbnRzWyBpIF0sIGRlc3RFbGVtZW50c1sgaSBdICk7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9IGVsc2Uge1xyXG5cdFx0XHRcdGNsb25lQ29weUV2ZW50KCBlbGVtLCBjbG9uZSApO1xyXG5cdFx0XHR9XHJcblx0XHR9XHJcblxyXG5cdFx0Ly8gUHJlc2VydmUgc2NyaXB0IGV2YWx1YXRpb24gaGlzdG9yeVxyXG5cdFx0ZGVzdEVsZW1lbnRzID0gZ2V0QWxsKCBjbG9uZSwgXCJzY3JpcHRcIiApO1xyXG5cdFx0aWYgKCBkZXN0RWxlbWVudHMubGVuZ3RoID4gMCApIHtcclxuXHRcdFx0c2V0R2xvYmFsRXZhbCggZGVzdEVsZW1lbnRzLCAhaW5QYWdlICYmIGdldEFsbCggZWxlbSwgXCJzY3JpcHRcIiApICk7XHJcblx0XHR9XHJcblxyXG5cdFx0Ly8gUmV0dXJuIHRoZSBjbG9uZWQgc2V0XHJcblx0XHRyZXR1cm4gY2xvbmU7XHJcblx0fSxcclxuXHJcblx0Y2xlYW5EYXRhOiBmdW5jdGlvbiggZWxlbXMgKSB7XHJcblx0XHR2YXIgZGF0YSwgZWxlbSwgdHlwZSxcclxuXHRcdFx0c3BlY2lhbCA9IGpRdWVyeS5ldmVudC5zcGVjaWFsLFxyXG5cdFx0XHRpID0gMDtcclxuXHJcblx0XHRmb3IgKCA7ICggZWxlbSA9IGVsZW1zWyBpIF0gKSAhPT0gdW5kZWZpbmVkOyBpKysgKSB7XHJcblx0XHRcdGlmICggYWNjZXB0RGF0YSggZWxlbSApICkge1xyXG5cdFx0XHRcdGlmICggKCBkYXRhID0gZWxlbVsgZGF0YVByaXYuZXhwYW5kbyBdICkgKSB7XHJcblx0XHRcdFx0XHRpZiAoIGRhdGEuZXZlbnRzICkge1xyXG5cdFx0XHRcdFx0XHRmb3IgKCB0eXBlIGluIGRhdGEuZXZlbnRzICkge1xyXG5cdFx0XHRcdFx0XHRcdGlmICggc3BlY2lhbFsgdHlwZSBdICkge1xyXG5cdFx0XHRcdFx0XHRcdFx0alF1ZXJ5LmV2ZW50LnJlbW92ZSggZWxlbSwgdHlwZSApO1xyXG5cclxuXHRcdFx0XHRcdFx0XHQvLyBUaGlzIGlzIGEgc2hvcnRjdXQgdG8gYXZvaWQgalF1ZXJ5LmV2ZW50LnJlbW92ZSdzIG92ZXJoZWFkXHJcblx0XHRcdFx0XHRcdFx0fSBlbHNlIHtcclxuXHRcdFx0XHRcdFx0XHRcdGpRdWVyeS5yZW1vdmVFdmVudCggZWxlbSwgdHlwZSwgZGF0YS5oYW5kbGUgKTtcclxuXHRcdFx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdH1cclxuXHJcblx0XHRcdFx0XHQvLyBTdXBwb3J0OiBDaHJvbWUgPD0gMzUtNDUrXHJcblx0XHRcdFx0XHQvLyBBc3NpZ24gdW5kZWZpbmVkIGluc3RlYWQgb2YgdXNpbmcgZGVsZXRlLCBzZWUgRGF0YSNyZW1vdmVcclxuXHRcdFx0XHRcdGVsZW1bIGRhdGFQcml2LmV4cGFuZG8gXSA9IHVuZGVmaW5lZDtcclxuXHRcdFx0XHR9XHJcblx0XHRcdFx0aWYgKCBlbGVtWyBkYXRhVXNlci5leHBhbmRvIF0gKSB7XHJcblxyXG5cdFx0XHRcdFx0Ly8gU3VwcG9ydDogQ2hyb21lIDw9IDM1LTQ1K1xyXG5cdFx0XHRcdFx0Ly8gQXNzaWduIHVuZGVmaW5lZCBpbnN0ZWFkIG9mIHVzaW5nIGRlbGV0ZSwgc2VlIERhdGEjcmVtb3ZlXHJcblx0XHRcdFx0XHRlbGVtWyBkYXRhVXNlci5leHBhbmRvIF0gPSB1bmRlZmluZWQ7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9XHJcblx0XHR9XHJcblx0fVxyXG59ICk7XHJcblxyXG5qUXVlcnkuZm4uZXh0ZW5kKCB7XHJcblxyXG5cdC8vIEtlZXAgZG9tTWFuaXAgZXhwb3NlZCB1bnRpbCAzLjAgKGdoLTIyMjUpXHJcblx0ZG9tTWFuaXA6IGRvbU1hbmlwLFxyXG5cclxuXHRkZXRhY2g6IGZ1bmN0aW9uKCBzZWxlY3RvciApIHtcclxuXHRcdHJldHVybiByZW1vdmUoIHRoaXMsIHNlbGVjdG9yLCB0cnVlICk7XHJcblx0fSxcclxuXHJcblx0cmVtb3ZlOiBmdW5jdGlvbiggc2VsZWN0b3IgKSB7XHJcblx0XHRyZXR1cm4gcmVtb3ZlKCB0aGlzLCBzZWxlY3RvciApO1xyXG5cdH0sXHJcblxyXG5cdHRleHQ6IGZ1bmN0aW9uKCB2YWx1ZSApIHtcclxuXHRcdHJldHVybiBhY2Nlc3MoIHRoaXMsIGZ1bmN0aW9uKCB2YWx1ZSApIHtcclxuXHRcdFx0cmV0dXJuIHZhbHVlID09PSB1bmRlZmluZWQgP1xyXG5cdFx0XHRcdGpRdWVyeS50ZXh0KCB0aGlzICkgOlxyXG5cdFx0XHRcdHRoaXMuZW1wdHkoKS5lYWNoKCBmdW5jdGlvbigpIHtcclxuXHRcdFx0XHRcdGlmICggdGhpcy5ub2RlVHlwZSA9PT0gMSB8fCB0aGlzLm5vZGVUeXBlID09PSAxMSB8fCB0aGlzLm5vZGVUeXBlID09PSA5ICkge1xyXG5cdFx0XHRcdFx0XHR0aGlzLnRleHRDb250ZW50ID0gdmFsdWU7XHJcblx0XHRcdFx0XHR9XHJcblx0XHRcdFx0fSApO1xyXG5cdFx0fSwgbnVsbCwgdmFsdWUsIGFyZ3VtZW50cy5sZW5ndGggKTtcclxuXHR9LFxyXG5cclxuXHRhcHBlbmQ6IGZ1bmN0aW9uKCkge1xyXG5cdFx0cmV0dXJuIGRvbU1hbmlwKCB0aGlzLCBhcmd1bWVudHMsIGZ1bmN0aW9uKCBlbGVtICkge1xyXG5cdFx0XHRpZiAoIHRoaXMubm9kZVR5cGUgPT09IDEgfHwgdGhpcy5ub2RlVHlwZSA9PT0gMTEgfHwgdGhpcy5ub2RlVHlwZSA9PT0gOSApIHtcclxuXHRcdFx0XHR2YXIgdGFyZ2V0ID0gbWFuaXB1bGF0aW9uVGFyZ2V0KCB0aGlzLCBlbGVtICk7XHJcblx0XHRcdFx0dGFyZ2V0LmFwcGVuZENoaWxkKCBlbGVtICk7XHJcblx0XHRcdH1cclxuXHRcdH0gKTtcclxuXHR9LFxyXG5cclxuXHRwcmVwZW5kOiBmdW5jdGlvbigpIHtcclxuXHRcdHJldHVybiBkb21NYW5pcCggdGhpcywgYXJndW1lbnRzLCBmdW5jdGlvbiggZWxlbSApIHtcclxuXHRcdFx0aWYgKCB0aGlzLm5vZGVUeXBlID09PSAxIHx8IHRoaXMubm9kZVR5cGUgPT09IDExIHx8IHRoaXMubm9kZVR5cGUgPT09IDkgKSB7XHJcblx0XHRcdFx0dmFyIHRhcmdldCA9IG1hbmlwdWxhdGlvblRhcmdldCggdGhpcywgZWxlbSApO1xyXG5cdFx0XHRcdHRhcmdldC5pbnNlcnRCZWZvcmUoIGVsZW0sIHRhcmdldC5maXJzdENoaWxkICk7XHJcblx0XHRcdH1cclxuXHRcdH0gKTtcclxuXHR9LFxyXG5cclxuXHRiZWZvcmU6IGZ1bmN0aW9uKCkge1xyXG5cdFx0cmV0dXJuIGRvbU1hbmlwKCB0aGlzLCBhcmd1bWVudHMsIGZ1bmN0aW9uKCBlbGVtICkge1xyXG5cdFx0XHRpZiAoIHRoaXMucGFyZW50Tm9kZSApIHtcclxuXHRcdFx0XHR0aGlzLnBhcmVudE5vZGUuaW5zZXJ0QmVmb3JlKCBlbGVtLCB0aGlzICk7XHJcblx0XHRcdH1cclxuXHRcdH0gKTtcclxuXHR9LFxyXG5cclxuXHRhZnRlcjogZnVuY3Rpb24oKSB7XHJcblx0XHRyZXR1cm4gZG9tTWFuaXAoIHRoaXMsIGFyZ3VtZW50cywgZnVuY3Rpb24oIGVsZW0gKSB7XHJcblx0XHRcdGlmICggdGhpcy5wYXJlbnROb2RlICkge1xyXG5cdFx0XHRcdHRoaXMucGFyZW50Tm9kZS5pbnNlcnRCZWZvcmUoIGVsZW0sIHRoaXMubmV4dFNpYmxpbmcgKTtcclxuXHRcdFx0fVxyXG5cdFx0fSApO1xyXG5cdH0sXHJcblxyXG5cdGVtcHR5OiBmdW5jdGlvbigpIHtcclxuXHRcdHZhciBlbGVtLFxyXG5cdFx0XHRpID0gMDtcclxuXHJcblx0XHRmb3IgKCA7ICggZWxlbSA9IHRoaXNbIGkgXSApICE9IG51bGw7IGkrKyApIHtcclxuXHRcdFx0aWYgKCBlbGVtLm5vZGVUeXBlID09PSAxICkge1xyXG5cclxuXHRcdFx0XHQvLyBQcmV2ZW50IG1lbW9yeSBsZWFrc1xyXG5cdFx0XHRcdGpRdWVyeS5jbGVhbkRhdGEoIGdldEFsbCggZWxlbSwgZmFsc2UgKSApO1xyXG5cclxuXHRcdFx0XHQvLyBSZW1vdmUgYW55IHJlbWFpbmluZyBub2Rlc1xyXG5cdFx0XHRcdGVsZW0udGV4dENvbnRlbnQgPSBcIlwiO1xyXG5cdFx0XHR9XHJcblx0XHR9XHJcblxyXG5cdFx0cmV0dXJuIHRoaXM7XHJcblx0fSxcclxuXHJcblx0Y2xvbmU6IGZ1bmN0aW9uKCBkYXRhQW5kRXZlbnRzLCBkZWVwRGF0YUFuZEV2ZW50cyApIHtcclxuXHRcdGRhdGFBbmRFdmVudHMgPSBkYXRhQW5kRXZlbnRzID09IG51bGwgPyBmYWxzZSA6IGRhdGFBbmRFdmVudHM7XHJcblx0XHRkZWVwRGF0YUFuZEV2ZW50cyA9IGRlZXBEYXRhQW5kRXZlbnRzID09IG51bGwgPyBkYXRhQW5kRXZlbnRzIDogZGVlcERhdGFBbmRFdmVudHM7XHJcblxyXG5cdFx0cmV0dXJuIHRoaXMubWFwKCBmdW5jdGlvbigpIHtcclxuXHRcdFx0cmV0dXJuIGpRdWVyeS5jbG9uZSggdGhpcywgZGF0YUFuZEV2ZW50cywgZGVlcERhdGFBbmRFdmVudHMgKTtcclxuXHRcdH0gKTtcclxuXHR9LFxyXG5cclxuXHRodG1sOiBmdW5jdGlvbiggdmFsdWUgKSB7XHJcblx0XHRyZXR1cm4gYWNjZXNzKCB0aGlzLCBmdW5jdGlvbiggdmFsdWUgKSB7XHJcblx0XHRcdHZhciBlbGVtID0gdGhpc1sgMCBdIHx8IHt9LFxyXG5cdFx0XHRcdGkgPSAwLFxyXG5cdFx0XHRcdGwgPSB0aGlzLmxlbmd0aDtcclxuXHJcblx0XHRcdGlmICggdmFsdWUgPT09IHVuZGVmaW5lZCAmJiBlbGVtLm5vZGVUeXBlID09PSAxICkge1xyXG5cdFx0XHRcdHJldHVybiBlbGVtLmlubmVySFRNTDtcclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0Ly8gU2VlIGlmIHdlIGNhbiB0YWtlIGEgc2hvcnRjdXQgYW5kIGp1c3QgdXNlIGlubmVySFRNTFxyXG5cdFx0XHRpZiAoIHR5cGVvZiB2YWx1ZSA9PT0gXCJzdHJpbmdcIiAmJiAhcm5vSW5uZXJodG1sLnRlc3QoIHZhbHVlICkgJiZcclxuXHRcdFx0XHQhd3JhcE1hcFsgKCBydGFnTmFtZS5leGVjKCB2YWx1ZSApIHx8IFsgXCJcIiwgXCJcIiBdIClbIDEgXS50b0xvd2VyQ2FzZSgpIF0gKSB7XHJcblxyXG5cdFx0XHRcdHZhbHVlID0galF1ZXJ5Lmh0bWxQcmVmaWx0ZXIoIHZhbHVlICk7XHJcblxyXG5cdFx0XHRcdHRyeSB7XHJcblx0XHRcdFx0XHRmb3IgKCA7IGkgPCBsOyBpKysgKSB7XHJcblx0XHRcdFx0XHRcdGVsZW0gPSB0aGlzWyBpIF0gfHwge307XHJcblxyXG5cdFx0XHRcdFx0XHQvLyBSZW1vdmUgZWxlbWVudCBub2RlcyBhbmQgcHJldmVudCBtZW1vcnkgbGVha3NcclxuXHRcdFx0XHRcdFx0aWYgKCBlbGVtLm5vZGVUeXBlID09PSAxICkge1xyXG5cdFx0XHRcdFx0XHRcdGpRdWVyeS5jbGVhbkRhdGEoIGdldEFsbCggZWxlbSwgZmFsc2UgKSApO1xyXG5cdFx0XHRcdFx0XHRcdGVsZW0uaW5uZXJIVE1MID0gdmFsdWU7XHJcblx0XHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdH1cclxuXHJcblx0XHRcdFx0XHRlbGVtID0gMDtcclxuXHJcblx0XHRcdFx0Ly8gSWYgdXNpbmcgaW5uZXJIVE1MIHRocm93cyBhbiBleGNlcHRpb24sIHVzZSB0aGUgZmFsbGJhY2sgbWV0aG9kXHJcblx0XHRcdFx0fSBjYXRjaCAoIGUgKSB7fVxyXG5cdFx0XHR9XHJcblxyXG5cdFx0XHRpZiAoIGVsZW0gKSB7XHJcblx0XHRcdFx0dGhpcy5lbXB0eSgpLmFwcGVuZCggdmFsdWUgKTtcclxuXHRcdFx0fVxyXG5cdFx0fSwgbnVsbCwgdmFsdWUsIGFyZ3VtZW50cy5sZW5ndGggKTtcclxuXHR9LFxyXG5cclxuXHRyZXBsYWNlV2l0aDogZnVuY3Rpb24oKSB7XHJcblx0XHR2YXIgaWdub3JlZCA9IFtdO1xyXG5cclxuXHRcdC8vIE1ha2UgdGhlIGNoYW5nZXMsIHJlcGxhY2luZyBlYWNoIG5vbi1pZ25vcmVkIGNvbnRleHQgZWxlbWVudCB3aXRoIHRoZSBuZXcgY29udGVudFxyXG5cdFx0cmV0dXJuIGRvbU1hbmlwKCB0aGlzLCBhcmd1bWVudHMsIGZ1bmN0aW9uKCBlbGVtICkge1xyXG5cdFx0XHR2YXIgcGFyZW50ID0gdGhpcy5wYXJlbnROb2RlO1xyXG5cclxuXHRcdFx0aWYgKCBqUXVlcnkuaW5BcnJheSggdGhpcywgaWdub3JlZCApIDwgMCApIHtcclxuXHRcdFx0XHRqUXVlcnkuY2xlYW5EYXRhKCBnZXRBbGwoIHRoaXMgKSApO1xyXG5cdFx0XHRcdGlmICggcGFyZW50ICkge1xyXG5cdFx0XHRcdFx0cGFyZW50LnJlcGxhY2VDaGlsZCggZWxlbSwgdGhpcyApO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0fVxyXG5cclxuXHRcdC8vIEZvcmNlIGNhbGxiYWNrIGludm9jYXRpb25cclxuXHRcdH0sIGlnbm9yZWQgKTtcclxuXHR9XHJcbn0gKTtcclxuXHJcbmpRdWVyeS5lYWNoKCB7XHJcblx0YXBwZW5kVG86IFwiYXBwZW5kXCIsXHJcblx0cHJlcGVuZFRvOiBcInByZXBlbmRcIixcclxuXHRpbnNlcnRCZWZvcmU6IFwiYmVmb3JlXCIsXHJcblx0aW5zZXJ0QWZ0ZXI6IFwiYWZ0ZXJcIixcclxuXHRyZXBsYWNlQWxsOiBcInJlcGxhY2VXaXRoXCJcclxufSwgZnVuY3Rpb24oIG5hbWUsIG9yaWdpbmFsICkge1xyXG5cdGpRdWVyeS5mblsgbmFtZSBdID0gZnVuY3Rpb24oIHNlbGVjdG9yICkge1xyXG5cdFx0dmFyIGVsZW1zLFxyXG5cdFx0XHRyZXQgPSBbXSxcclxuXHRcdFx0aW5zZXJ0ID0galF1ZXJ5KCBzZWxlY3RvciApLFxyXG5cdFx0XHRsYXN0ID0gaW5zZXJ0Lmxlbmd0aCAtIDEsXHJcblx0XHRcdGkgPSAwO1xyXG5cclxuXHRcdGZvciAoIDsgaSA8PSBsYXN0OyBpKysgKSB7XHJcblx0XHRcdGVsZW1zID0gaSA9PT0gbGFzdCA/IHRoaXMgOiB0aGlzLmNsb25lKCB0cnVlICk7XHJcblx0XHRcdGpRdWVyeSggaW5zZXJ0WyBpIF0gKVsgb3JpZ2luYWwgXSggZWxlbXMgKTtcclxuXHJcblx0XHRcdC8vIFN1cHBvcnQ6IFF0V2ViS2l0XHJcblx0XHRcdC8vIC5nZXQoKSBiZWNhdXNlIHB1c2guYXBwbHkoXywgYXJyYXlsaWtlKSB0aHJvd3NcclxuXHRcdFx0cHVzaC5hcHBseSggcmV0LCBlbGVtcy5nZXQoKSApO1xyXG5cdFx0fVxyXG5cclxuXHRcdHJldHVybiB0aGlzLnB1c2hTdGFjayggcmV0ICk7XHJcblx0fTtcclxufSApO1xyXG5cclxuXHJcbnZhciBpZnJhbWUsXHJcblx0ZWxlbWRpc3BsYXkgPSB7XHJcblxyXG5cdFx0Ly8gU3VwcG9ydDogRmlyZWZveFxyXG5cdFx0Ly8gV2UgaGF2ZSB0byBwcmUtZGVmaW5lIHRoZXNlIHZhbHVlcyBmb3IgRkYgKCMxMDIyNylcclxuXHRcdEhUTUw6IFwiYmxvY2tcIixcclxuXHRcdEJPRFk6IFwiYmxvY2tcIlxyXG5cdH07XHJcblxyXG4vKipcclxuICogUmV0cmlldmUgdGhlIGFjdHVhbCBkaXNwbGF5IG9mIGEgZWxlbWVudFxyXG4gKiBAcGFyYW0ge1N0cmluZ30gbmFtZSBub2RlTmFtZSBvZiB0aGUgZWxlbWVudFxyXG4gKiBAcGFyYW0ge09iamVjdH0gZG9jIERvY3VtZW50IG9iamVjdFxyXG4gKi9cclxuXHJcbi8vIENhbGxlZCBvbmx5IGZyb20gd2l0aGluIGRlZmF1bHREaXNwbGF5XHJcbmZ1bmN0aW9uIGFjdHVhbERpc3BsYXkoIG5hbWUsIGRvYyApIHtcclxuXHR2YXIgZWxlbSA9IGpRdWVyeSggZG9jLmNyZWF0ZUVsZW1lbnQoIG5hbWUgKSApLmFwcGVuZFRvKCBkb2MuYm9keSApLFxyXG5cclxuXHRcdGRpc3BsYXkgPSBqUXVlcnkuY3NzKCBlbGVtWyAwIF0sIFwiZGlzcGxheVwiICk7XHJcblxyXG5cdC8vIFdlIGRvbid0IGhhdmUgYW55IGRhdGEgc3RvcmVkIG9uIHRoZSBlbGVtZW50LFxyXG5cdC8vIHNvIHVzZSBcImRldGFjaFwiIG1ldGhvZCBhcyBmYXN0IHdheSB0byBnZXQgcmlkIG9mIHRoZSBlbGVtZW50XHJcblx0ZWxlbS5kZXRhY2goKTtcclxuXHJcblx0cmV0dXJuIGRpc3BsYXk7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBUcnkgdG8gZGV0ZXJtaW5lIHRoZSBkZWZhdWx0IGRpc3BsYXkgdmFsdWUgb2YgYW4gZWxlbWVudFxyXG4gKiBAcGFyYW0ge1N0cmluZ30gbm9kZU5hbWVcclxuICovXHJcbmZ1bmN0aW9uIGRlZmF1bHREaXNwbGF5KCBub2RlTmFtZSApIHtcclxuXHR2YXIgZG9jID0gZG9jdW1lbnQsXHJcblx0XHRkaXNwbGF5ID0gZWxlbWRpc3BsYXlbIG5vZGVOYW1lIF07XHJcblxyXG5cdGlmICggIWRpc3BsYXkgKSB7XHJcblx0XHRkaXNwbGF5ID0gYWN0dWFsRGlzcGxheSggbm9kZU5hbWUsIGRvYyApO1xyXG5cclxuXHRcdC8vIElmIHRoZSBzaW1wbGUgd2F5IGZhaWxzLCByZWFkIGZyb20gaW5zaWRlIGFuIGlmcmFtZVxyXG5cdFx0aWYgKCBkaXNwbGF5ID09PSBcIm5vbmVcIiB8fCAhZGlzcGxheSApIHtcclxuXHJcblx0XHRcdC8vIFVzZSB0aGUgYWxyZWFkeS1jcmVhdGVkIGlmcmFtZSBpZiBwb3NzaWJsZVxyXG5cdFx0XHRpZnJhbWUgPSAoIGlmcmFtZSB8fCBqUXVlcnkoIFwiPGlmcmFtZSBmcmFtZWJvcmRlcj0nMCcgd2lkdGg9JzAnIGhlaWdodD0nMCcvPlwiICkgKVxyXG5cdFx0XHRcdC5hcHBlbmRUbyggZG9jLmRvY3VtZW50RWxlbWVudCApO1xyXG5cclxuXHRcdFx0Ly8gQWx3YXlzIHdyaXRlIGEgbmV3IEhUTUwgc2tlbGV0b24gc28gV2Via2l0IGFuZCBGaXJlZm94IGRvbid0IGNob2tlIG9uIHJldXNlXHJcblx0XHRcdGRvYyA9IGlmcmFtZVsgMCBdLmNvbnRlbnREb2N1bWVudDtcclxuXHJcblx0XHRcdC8vIFN1cHBvcnQ6IElFXHJcblx0XHRcdGRvYy53cml0ZSgpO1xyXG5cdFx0XHRkb2MuY2xvc2UoKTtcclxuXHJcblx0XHRcdGRpc3BsYXkgPSBhY3R1YWxEaXNwbGF5KCBub2RlTmFtZSwgZG9jICk7XHJcblx0XHRcdGlmcmFtZS5kZXRhY2goKTtcclxuXHRcdH1cclxuXHJcblx0XHQvLyBTdG9yZSB0aGUgY29ycmVjdCBkZWZhdWx0IGRpc3BsYXlcclxuXHRcdGVsZW1kaXNwbGF5WyBub2RlTmFtZSBdID0gZGlzcGxheTtcclxuXHR9XHJcblxyXG5cdHJldHVybiBkaXNwbGF5O1xyXG59XHJcbnZhciBybWFyZ2luID0gKCAvXm1hcmdpbi8gKTtcclxuXHJcbnZhciBybnVtbm9ucHggPSBuZXcgUmVnRXhwKCBcIl4oXCIgKyBwbnVtICsgXCIpKD8hcHgpW2EteiVdKyRcIiwgXCJpXCIgKTtcclxuXHJcbnZhciBnZXRTdHlsZXMgPSBmdW5jdGlvbiggZWxlbSApIHtcclxuXHJcblx0XHQvLyBTdXBwb3J0OiBJRTw9MTErLCBGaXJlZm94PD0zMCsgKCMxNTA5OCwgIzE0MTUwKVxyXG5cdFx0Ly8gSUUgdGhyb3dzIG9uIGVsZW1lbnRzIGNyZWF0ZWQgaW4gcG9wdXBzXHJcblx0XHQvLyBGRiBtZWFud2hpbGUgdGhyb3dzIG9uIGZyYW1lIGVsZW1lbnRzIHRocm91Z2ggXCJkZWZhdWx0Vmlldy5nZXRDb21wdXRlZFN0eWxlXCJcclxuXHRcdHZhciB2aWV3ID0gZWxlbS5vd25lckRvY3VtZW50LmRlZmF1bHRWaWV3O1xyXG5cclxuXHRcdGlmICggIXZpZXcgfHwgIXZpZXcub3BlbmVyICkge1xyXG5cdFx0XHR2aWV3ID0gd2luZG93O1xyXG5cdFx0fVxyXG5cclxuXHRcdHJldHVybiB2aWV3LmdldENvbXB1dGVkU3R5bGUoIGVsZW0gKTtcclxuXHR9O1xyXG5cclxudmFyIHN3YXAgPSBmdW5jdGlvbiggZWxlbSwgb3B0aW9ucywgY2FsbGJhY2ssIGFyZ3MgKSB7XHJcblx0dmFyIHJldCwgbmFtZSxcclxuXHRcdG9sZCA9IHt9O1xyXG5cclxuXHQvLyBSZW1lbWJlciB0aGUgb2xkIHZhbHVlcywgYW5kIGluc2VydCB0aGUgbmV3IG9uZXNcclxuXHRmb3IgKCBuYW1lIGluIG9wdGlvbnMgKSB7XHJcblx0XHRvbGRbIG5hbWUgXSA9IGVsZW0uc3R5bGVbIG5hbWUgXTtcclxuXHRcdGVsZW0uc3R5bGVbIG5hbWUgXSA9IG9wdGlvbnNbIG5hbWUgXTtcclxuXHR9XHJcblxyXG5cdHJldCA9IGNhbGxiYWNrLmFwcGx5KCBlbGVtLCBhcmdzIHx8IFtdICk7XHJcblxyXG5cdC8vIFJldmVydCB0aGUgb2xkIHZhbHVlc1xyXG5cdGZvciAoIG5hbWUgaW4gb3B0aW9ucyApIHtcclxuXHRcdGVsZW0uc3R5bGVbIG5hbWUgXSA9IG9sZFsgbmFtZSBdO1xyXG5cdH1cclxuXHJcblx0cmV0dXJuIHJldDtcclxufTtcclxuXHJcblxyXG52YXIgZG9jdW1lbnRFbGVtZW50ID0gZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50O1xyXG5cclxuXHJcblxyXG4oIGZ1bmN0aW9uKCkge1xyXG5cdHZhciBwaXhlbFBvc2l0aW9uVmFsLCBib3hTaXppbmdSZWxpYWJsZVZhbCwgcGl4ZWxNYXJnaW5SaWdodFZhbCwgcmVsaWFibGVNYXJnaW5MZWZ0VmFsLFxyXG5cdFx0Y29udGFpbmVyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCggXCJkaXZcIiApLFxyXG5cdFx0ZGl2ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCggXCJkaXZcIiApO1xyXG5cclxuXHQvLyBGaW5pc2ggZWFybHkgaW4gbGltaXRlZCAobm9uLWJyb3dzZXIpIGVudmlyb25tZW50c1xyXG5cdGlmICggIWRpdi5zdHlsZSApIHtcclxuXHRcdHJldHVybjtcclxuXHR9XHJcblxyXG5cdC8vIFN1cHBvcnQ6IElFOS0xMStcclxuXHQvLyBTdHlsZSBvZiBjbG9uZWQgZWxlbWVudCBhZmZlY3RzIHNvdXJjZSBlbGVtZW50IGNsb25lZCAoIzg5MDgpXHJcblx0ZGl2LnN0eWxlLmJhY2tncm91bmRDbGlwID0gXCJjb250ZW50LWJveFwiO1xyXG5cdGRpdi5jbG9uZU5vZGUoIHRydWUgKS5zdHlsZS5iYWNrZ3JvdW5kQ2xpcCA9IFwiXCI7XHJcblx0c3VwcG9ydC5jbGVhckNsb25lU3R5bGUgPSBkaXYuc3R5bGUuYmFja2dyb3VuZENsaXAgPT09IFwiY29udGVudC1ib3hcIjtcclxuXHJcblx0Y29udGFpbmVyLnN0eWxlLmNzc1RleHQgPSBcImJvcmRlcjowO3dpZHRoOjhweDtoZWlnaHQ6MDt0b3A6MDtsZWZ0Oi05OTk5cHg7XCIgK1xyXG5cdFx0XCJwYWRkaW5nOjA7bWFyZ2luLXRvcDoxcHg7cG9zaXRpb246YWJzb2x1dGVcIjtcclxuXHRjb250YWluZXIuYXBwZW5kQ2hpbGQoIGRpdiApO1xyXG5cclxuXHQvLyBFeGVjdXRpbmcgYm90aCBwaXhlbFBvc2l0aW9uICYgYm94U2l6aW5nUmVsaWFibGUgdGVzdHMgcmVxdWlyZSBvbmx5IG9uZSBsYXlvdXRcclxuXHQvLyBzbyB0aGV5J3JlIGV4ZWN1dGVkIGF0IHRoZSBzYW1lIHRpbWUgdG8gc2F2ZSB0aGUgc2Vjb25kIGNvbXB1dGF0aW9uLlxyXG5cdGZ1bmN0aW9uIGNvbXB1dGVTdHlsZVRlc3RzKCkge1xyXG5cdFx0ZGl2LnN0eWxlLmNzc1RleHQgPVxyXG5cclxuXHRcdFx0Ly8gU3VwcG9ydDogRmlyZWZveDwyOSwgQW5kcm9pZCAyLjNcclxuXHRcdFx0Ly8gVmVuZG9yLXByZWZpeCBib3gtc2l6aW5nXHJcblx0XHRcdFwiLXdlYmtpdC1ib3gtc2l6aW5nOmJvcmRlci1ib3g7LW1vei1ib3gtc2l6aW5nOmJvcmRlci1ib3g7Ym94LXNpemluZzpib3JkZXItYm94O1wiICtcclxuXHRcdFx0XCJwb3NpdGlvbjpyZWxhdGl2ZTtkaXNwbGF5OmJsb2NrO1wiICtcclxuXHRcdFx0XCJtYXJnaW46YXV0bztib3JkZXI6MXB4O3BhZGRpbmc6MXB4O1wiICtcclxuXHRcdFx0XCJ0b3A6MSU7d2lkdGg6NTAlXCI7XHJcblx0XHRkaXYuaW5uZXJIVE1MID0gXCJcIjtcclxuXHRcdGRvY3VtZW50RWxlbWVudC5hcHBlbmRDaGlsZCggY29udGFpbmVyICk7XHJcblxyXG5cdFx0dmFyIGRpdlN0eWxlID0gd2luZG93LmdldENvbXB1dGVkU3R5bGUoIGRpdiApO1xyXG5cdFx0cGl4ZWxQb3NpdGlvblZhbCA9IGRpdlN0eWxlLnRvcCAhPT0gXCIxJVwiO1xyXG5cdFx0cmVsaWFibGVNYXJnaW5MZWZ0VmFsID0gZGl2U3R5bGUubWFyZ2luTGVmdCA9PT0gXCIycHhcIjtcclxuXHRcdGJveFNpemluZ1JlbGlhYmxlVmFsID0gZGl2U3R5bGUud2lkdGggPT09IFwiNHB4XCI7XHJcblxyXG5cdFx0Ly8gU3VwcG9ydDogQW5kcm9pZCA0LjAgLSA0LjMgb25seVxyXG5cdFx0Ly8gU29tZSBzdHlsZXMgY29tZSBiYWNrIHdpdGggcGVyY2VudGFnZSB2YWx1ZXMsIGV2ZW4gdGhvdWdoIHRoZXkgc2hvdWxkbid0XHJcblx0XHRkaXYuc3R5bGUubWFyZ2luUmlnaHQgPSBcIjUwJVwiO1xyXG5cdFx0cGl4ZWxNYXJnaW5SaWdodFZhbCA9IGRpdlN0eWxlLm1hcmdpblJpZ2h0ID09PSBcIjRweFwiO1xyXG5cclxuXHRcdGRvY3VtZW50RWxlbWVudC5yZW1vdmVDaGlsZCggY29udGFpbmVyICk7XHJcblx0fVxyXG5cclxuXHRqUXVlcnkuZXh0ZW5kKCBzdXBwb3J0LCB7XHJcblx0XHRwaXhlbFBvc2l0aW9uOiBmdW5jdGlvbigpIHtcclxuXHJcblx0XHRcdC8vIFRoaXMgdGVzdCBpcyBleGVjdXRlZCBvbmx5IG9uY2UgYnV0IHdlIHN0aWxsIGRvIG1lbW9pemluZ1xyXG5cdFx0XHQvLyBzaW5jZSB3ZSBjYW4gdXNlIHRoZSBib3hTaXppbmdSZWxpYWJsZSBwcmUtY29tcHV0aW5nLlxyXG5cdFx0XHQvLyBObyBuZWVkIHRvIGNoZWNrIGlmIHRoZSB0ZXN0IHdhcyBhbHJlYWR5IHBlcmZvcm1lZCwgdGhvdWdoLlxyXG5cdFx0XHRjb21wdXRlU3R5bGVUZXN0cygpO1xyXG5cdFx0XHRyZXR1cm4gcGl4ZWxQb3NpdGlvblZhbDtcclxuXHRcdH0sXHJcblx0XHRib3hTaXppbmdSZWxpYWJsZTogZnVuY3Rpb24oKSB7XHJcblx0XHRcdGlmICggYm94U2l6aW5nUmVsaWFibGVWYWwgPT0gbnVsbCApIHtcclxuXHRcdFx0XHRjb21wdXRlU3R5bGVUZXN0cygpO1xyXG5cdFx0XHR9XHJcblx0XHRcdHJldHVybiBib3hTaXppbmdSZWxpYWJsZVZhbDtcclxuXHRcdH0sXHJcblx0XHRwaXhlbE1hcmdpblJpZ2h0OiBmdW5jdGlvbigpIHtcclxuXHJcblx0XHRcdC8vIFN1cHBvcnQ6IEFuZHJvaWQgNC4wLTQuM1xyXG5cdFx0XHQvLyBXZSdyZSBjaGVja2luZyBmb3IgYm94U2l6aW5nUmVsaWFibGVWYWwgaGVyZSBpbnN0ZWFkIG9mIHBpeGVsTWFyZ2luUmlnaHRWYWxcclxuXHRcdFx0Ly8gc2luY2UgdGhhdCBjb21wcmVzc2VzIGJldHRlciBhbmQgdGhleSdyZSBjb21wdXRlZCB0b2dldGhlciBhbnl3YXkuXHJcblx0XHRcdGlmICggYm94U2l6aW5nUmVsaWFibGVWYWwgPT0gbnVsbCApIHtcclxuXHRcdFx0XHRjb21wdXRlU3R5bGVUZXN0cygpO1xyXG5cdFx0XHR9XHJcblx0XHRcdHJldHVybiBwaXhlbE1hcmdpblJpZ2h0VmFsO1xyXG5cdFx0fSxcclxuXHRcdHJlbGlhYmxlTWFyZ2luTGVmdDogZnVuY3Rpb24oKSB7XHJcblxyXG5cdFx0XHQvLyBTdXBwb3J0OiBJRSA8PTggb25seSwgQW5kcm9pZCA0LjAgLSA0LjMgb25seSwgRmlyZWZveCA8PTMgLSAzN1xyXG5cdFx0XHRpZiAoIGJveFNpemluZ1JlbGlhYmxlVmFsID09IG51bGwgKSB7XHJcblx0XHRcdFx0Y29tcHV0ZVN0eWxlVGVzdHMoKTtcclxuXHRcdFx0fVxyXG5cdFx0XHRyZXR1cm4gcmVsaWFibGVNYXJnaW5MZWZ0VmFsO1xyXG5cdFx0fSxcclxuXHRcdHJlbGlhYmxlTWFyZ2luUmlnaHQ6IGZ1bmN0aW9uKCkge1xyXG5cclxuXHRcdFx0Ly8gU3VwcG9ydDogQW5kcm9pZCAyLjNcclxuXHRcdFx0Ly8gQ2hlY2sgaWYgZGl2IHdpdGggZXhwbGljaXQgd2lkdGggYW5kIG5vIG1hcmdpbi1yaWdodCBpbmNvcnJlY3RseVxyXG5cdFx0XHQvLyBnZXRzIGNvbXB1dGVkIG1hcmdpbi1yaWdodCBiYXNlZCBvbiB3aWR0aCBvZiBjb250YWluZXIuICgjMzMzMylcclxuXHRcdFx0Ly8gV2ViS2l0IEJ1ZyAxMzM0MyAtIGdldENvbXB1dGVkU3R5bGUgcmV0dXJucyB3cm9uZyB2YWx1ZSBmb3IgbWFyZ2luLXJpZ2h0XHJcblx0XHRcdC8vIFRoaXMgc3VwcG9ydCBmdW5jdGlvbiBpcyBvbmx5IGV4ZWN1dGVkIG9uY2Ugc28gbm8gbWVtb2l6aW5nIGlzIG5lZWRlZC5cclxuXHRcdFx0dmFyIHJldCxcclxuXHRcdFx0XHRtYXJnaW5EaXYgPSBkaXYuYXBwZW5kQ2hpbGQoIGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoIFwiZGl2XCIgKSApO1xyXG5cclxuXHRcdFx0Ly8gUmVzZXQgQ1NTOiBib3gtc2l6aW5nOyBkaXNwbGF5OyBtYXJnaW47IGJvcmRlcjsgcGFkZGluZ1xyXG5cdFx0XHRtYXJnaW5EaXYuc3R5bGUuY3NzVGV4dCA9IGRpdi5zdHlsZS5jc3NUZXh0ID1cclxuXHJcblx0XHRcdFx0Ly8gU3VwcG9ydDogQW5kcm9pZCAyLjNcclxuXHRcdFx0XHQvLyBWZW5kb3ItcHJlZml4IGJveC1zaXppbmdcclxuXHRcdFx0XHRcIi13ZWJraXQtYm94LXNpemluZzpjb250ZW50LWJveDtib3gtc2l6aW5nOmNvbnRlbnQtYm94O1wiICtcclxuXHRcdFx0XHRcImRpc3BsYXk6YmxvY2s7bWFyZ2luOjA7Ym9yZGVyOjA7cGFkZGluZzowXCI7XHJcblx0XHRcdG1hcmdpbkRpdi5zdHlsZS5tYXJnaW5SaWdodCA9IG1hcmdpbkRpdi5zdHlsZS53aWR0aCA9IFwiMFwiO1xyXG5cdFx0XHRkaXYuc3R5bGUud2lkdGggPSBcIjFweFwiO1xyXG5cdFx0XHRkb2N1bWVudEVsZW1lbnQuYXBwZW5kQ2hpbGQoIGNvbnRhaW5lciApO1xyXG5cclxuXHRcdFx0cmV0ID0gIXBhcnNlRmxvYXQoIHdpbmRvdy5nZXRDb21wdXRlZFN0eWxlKCBtYXJnaW5EaXYgKS5tYXJnaW5SaWdodCApO1xyXG5cclxuXHRcdFx0ZG9jdW1lbnRFbGVtZW50LnJlbW92ZUNoaWxkKCBjb250YWluZXIgKTtcclxuXHRcdFx0ZGl2LnJlbW92ZUNoaWxkKCBtYXJnaW5EaXYgKTtcclxuXHJcblx0XHRcdHJldHVybiByZXQ7XHJcblx0XHR9XHJcblx0fSApO1xyXG59ICkoKTtcclxuXHJcblxyXG5mdW5jdGlvbiBjdXJDU1MoIGVsZW0sIG5hbWUsIGNvbXB1dGVkICkge1xyXG5cdHZhciB3aWR0aCwgbWluV2lkdGgsIG1heFdpZHRoLCByZXQsXHJcblx0XHRzdHlsZSA9IGVsZW0uc3R5bGU7XHJcblxyXG5cdGNvbXB1dGVkID0gY29tcHV0ZWQgfHwgZ2V0U3R5bGVzKCBlbGVtICk7XHJcblx0cmV0ID0gY29tcHV0ZWQgPyBjb21wdXRlZC5nZXRQcm9wZXJ0eVZhbHVlKCBuYW1lICkgfHwgY29tcHV0ZWRbIG5hbWUgXSA6IHVuZGVmaW5lZDtcclxuXHJcblx0Ly8gU3VwcG9ydDogT3BlcmEgMTIuMXggb25seVxyXG5cdC8vIEZhbGwgYmFjayB0byBzdHlsZSBldmVuIHdpdGhvdXQgY29tcHV0ZWRcclxuXHQvLyBjb21wdXRlZCBpcyB1bmRlZmluZWQgZm9yIGVsZW1zIG9uIGRvY3VtZW50IGZyYWdtZW50c1xyXG5cdGlmICggKCByZXQgPT09IFwiXCIgfHwgcmV0ID09PSB1bmRlZmluZWQgKSAmJiAhalF1ZXJ5LmNvbnRhaW5zKCBlbGVtLm93bmVyRG9jdW1lbnQsIGVsZW0gKSApIHtcclxuXHRcdHJldCA9IGpRdWVyeS5zdHlsZSggZWxlbSwgbmFtZSApO1xyXG5cdH1cclxuXHJcblx0Ly8gU3VwcG9ydDogSUU5XHJcblx0Ly8gZ2V0UHJvcGVydHlWYWx1ZSBpcyBvbmx5IG5lZWRlZCBmb3IgLmNzcygnZmlsdGVyJykgKCMxMjUzNylcclxuXHRpZiAoIGNvbXB1dGVkICkge1xyXG5cclxuXHRcdC8vIEEgdHJpYnV0ZSB0byB0aGUgXCJhd2Vzb21lIGhhY2sgYnkgRGVhbiBFZHdhcmRzXCJcclxuXHRcdC8vIEFuZHJvaWQgQnJvd3NlciByZXR1cm5zIHBlcmNlbnRhZ2UgZm9yIHNvbWUgdmFsdWVzLFxyXG5cdFx0Ly8gYnV0IHdpZHRoIHNlZW1zIHRvIGJlIHJlbGlhYmx5IHBpeGVscy5cclxuXHRcdC8vIFRoaXMgaXMgYWdhaW5zdCB0aGUgQ1NTT00gZHJhZnQgc3BlYzpcclxuXHRcdC8vIGh0dHA6Ly9kZXYudzMub3JnL2Nzc3dnL2Nzc29tLyNyZXNvbHZlZC12YWx1ZXNcclxuXHRcdGlmICggIXN1cHBvcnQucGl4ZWxNYXJnaW5SaWdodCgpICYmIHJudW1ub25weC50ZXN0KCByZXQgKSAmJiBybWFyZ2luLnRlc3QoIG5hbWUgKSApIHtcclxuXHJcblx0XHRcdC8vIFJlbWVtYmVyIHRoZSBvcmlnaW5hbCB2YWx1ZXNcclxuXHRcdFx0d2lkdGggPSBzdHlsZS53aWR0aDtcclxuXHRcdFx0bWluV2lkdGggPSBzdHlsZS5taW5XaWR0aDtcclxuXHRcdFx0bWF4V2lkdGggPSBzdHlsZS5tYXhXaWR0aDtcclxuXHJcblx0XHRcdC8vIFB1dCBpbiB0aGUgbmV3IHZhbHVlcyB0byBnZXQgYSBjb21wdXRlZCB2YWx1ZSBvdXRcclxuXHRcdFx0c3R5bGUubWluV2lkdGggPSBzdHlsZS5tYXhXaWR0aCA9IHN0eWxlLndpZHRoID0gcmV0O1xyXG5cdFx0XHRyZXQgPSBjb21wdXRlZC53aWR0aDtcclxuXHJcblx0XHRcdC8vIFJldmVydCB0aGUgY2hhbmdlZCB2YWx1ZXNcclxuXHRcdFx0c3R5bGUud2lkdGggPSB3aWR0aDtcclxuXHRcdFx0c3R5bGUubWluV2lkdGggPSBtaW5XaWR0aDtcclxuXHRcdFx0c3R5bGUubWF4V2lkdGggPSBtYXhXaWR0aDtcclxuXHRcdH1cclxuXHR9XHJcblxyXG5cdHJldHVybiByZXQgIT09IHVuZGVmaW5lZCA/XHJcblxyXG5cdFx0Ly8gU3VwcG9ydDogSUU5LTExK1xyXG5cdFx0Ly8gSUUgcmV0dXJucyB6SW5kZXggdmFsdWUgYXMgYW4gaW50ZWdlci5cclxuXHRcdHJldCArIFwiXCIgOlxyXG5cdFx0cmV0O1xyXG59XHJcblxyXG5cclxuZnVuY3Rpb24gYWRkR2V0SG9va0lmKCBjb25kaXRpb25GbiwgaG9va0ZuICkge1xyXG5cclxuXHQvLyBEZWZpbmUgdGhlIGhvb2ssIHdlJ2xsIGNoZWNrIG9uIHRoZSBmaXJzdCBydW4gaWYgaXQncyByZWFsbHkgbmVlZGVkLlxyXG5cdHJldHVybiB7XHJcblx0XHRnZXQ6IGZ1bmN0aW9uKCkge1xyXG5cdFx0XHRpZiAoIGNvbmRpdGlvbkZuKCkgKSB7XHJcblxyXG5cdFx0XHRcdC8vIEhvb2sgbm90IG5lZWRlZCAob3IgaXQncyBub3QgcG9zc2libGUgdG8gdXNlIGl0IGR1ZVxyXG5cdFx0XHRcdC8vIHRvIG1pc3NpbmcgZGVwZW5kZW5jeSksIHJlbW92ZSBpdC5cclxuXHRcdFx0XHRkZWxldGUgdGhpcy5nZXQ7XHJcblx0XHRcdFx0cmV0dXJuO1xyXG5cdFx0XHR9XHJcblxyXG5cdFx0XHQvLyBIb29rIG5lZWRlZDsgcmVkZWZpbmUgaXQgc28gdGhhdCB0aGUgc3VwcG9ydCB0ZXN0IGlzIG5vdCBleGVjdXRlZCBhZ2Fpbi5cclxuXHRcdFx0cmV0dXJuICggdGhpcy5nZXQgPSBob29rRm4gKS5hcHBseSggdGhpcywgYXJndW1lbnRzICk7XHJcblx0XHR9XHJcblx0fTtcclxufVxyXG5cclxuXHJcbnZhclxyXG5cclxuXHQvLyBTd2FwcGFibGUgaWYgZGlzcGxheSBpcyBub25lIG9yIHN0YXJ0cyB3aXRoIHRhYmxlXHJcblx0Ly8gZXhjZXB0IFwidGFibGVcIiwgXCJ0YWJsZS1jZWxsXCIsIG9yIFwidGFibGUtY2FwdGlvblwiXHJcblx0Ly8gU2VlIGhlcmUgZm9yIGRpc3BsYXkgdmFsdWVzOiBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL0NTUy9kaXNwbGF5XHJcblx0cmRpc3BsYXlzd2FwID0gL14obm9uZXx0YWJsZSg/IS1jW2VhXSkuKykvLFxyXG5cclxuXHRjc3NTaG93ID0geyBwb3NpdGlvbjogXCJhYnNvbHV0ZVwiLCB2aXNpYmlsaXR5OiBcImhpZGRlblwiLCBkaXNwbGF5OiBcImJsb2NrXCIgfSxcclxuXHRjc3NOb3JtYWxUcmFuc2Zvcm0gPSB7XHJcblx0XHRsZXR0ZXJTcGFjaW5nOiBcIjBcIixcclxuXHRcdGZvbnRXZWlnaHQ6IFwiNDAwXCJcclxuXHR9LFxyXG5cclxuXHRjc3NQcmVmaXhlcyA9IFsgXCJXZWJraXRcIiwgXCJPXCIsIFwiTW96XCIsIFwibXNcIiBdLFxyXG5cdGVtcHR5U3R5bGUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCBcImRpdlwiICkuc3R5bGU7XHJcblxyXG4vLyBSZXR1cm4gYSBjc3MgcHJvcGVydHkgbWFwcGVkIHRvIGEgcG90ZW50aWFsbHkgdmVuZG9yIHByZWZpeGVkIHByb3BlcnR5XHJcbmZ1bmN0aW9uIHZlbmRvclByb3BOYW1lKCBuYW1lICkge1xyXG5cclxuXHQvLyBTaG9ydGN1dCBmb3IgbmFtZXMgdGhhdCBhcmUgbm90IHZlbmRvciBwcmVmaXhlZFxyXG5cdGlmICggbmFtZSBpbiBlbXB0eVN0eWxlICkge1xyXG5cdFx0cmV0dXJuIG5hbWU7XHJcblx0fVxyXG5cclxuXHQvLyBDaGVjayBmb3IgdmVuZG9yIHByZWZpeGVkIG5hbWVzXHJcblx0dmFyIGNhcE5hbWUgPSBuYW1lWyAwIF0udG9VcHBlckNhc2UoKSArIG5hbWUuc2xpY2UoIDEgKSxcclxuXHRcdGkgPSBjc3NQcmVmaXhlcy5sZW5ndGg7XHJcblxyXG5cdHdoaWxlICggaS0tICkge1xyXG5cdFx0bmFtZSA9IGNzc1ByZWZpeGVzWyBpIF0gKyBjYXBOYW1lO1xyXG5cdFx0aWYgKCBuYW1lIGluIGVtcHR5U3R5bGUgKSB7XHJcblx0XHRcdHJldHVybiBuYW1lO1xyXG5cdFx0fVxyXG5cdH1cclxufVxyXG5cclxuZnVuY3Rpb24gc2V0UG9zaXRpdmVOdW1iZXIoIGVsZW0sIHZhbHVlLCBzdWJ0cmFjdCApIHtcclxuXHJcblx0Ly8gQW55IHJlbGF0aXZlICgrLy0pIHZhbHVlcyBoYXZlIGFscmVhZHkgYmVlblxyXG5cdC8vIG5vcm1hbGl6ZWQgYXQgdGhpcyBwb2ludFxyXG5cdHZhciBtYXRjaGVzID0gcmNzc051bS5leGVjKCB2YWx1ZSApO1xyXG5cdHJldHVybiBtYXRjaGVzID9cclxuXHJcblx0XHQvLyBHdWFyZCBhZ2FpbnN0IHVuZGVmaW5lZCBcInN1YnRyYWN0XCIsIGUuZy4sIHdoZW4gdXNlZCBhcyBpbiBjc3NIb29rc1xyXG5cdFx0TWF0aC5tYXgoIDAsIG1hdGNoZXNbIDIgXSAtICggc3VidHJhY3QgfHwgMCApICkgKyAoIG1hdGNoZXNbIDMgXSB8fCBcInB4XCIgKSA6XHJcblx0XHR2YWx1ZTtcclxufVxyXG5cclxuZnVuY3Rpb24gYXVnbWVudFdpZHRoT3JIZWlnaHQoIGVsZW0sIG5hbWUsIGV4dHJhLCBpc0JvcmRlckJveCwgc3R5bGVzICkge1xyXG5cdHZhciBpID0gZXh0cmEgPT09ICggaXNCb3JkZXJCb3ggPyBcImJvcmRlclwiIDogXCJjb250ZW50XCIgKSA/XHJcblxyXG5cdFx0Ly8gSWYgd2UgYWxyZWFkeSBoYXZlIHRoZSByaWdodCBtZWFzdXJlbWVudCwgYXZvaWQgYXVnbWVudGF0aW9uXHJcblx0XHQ0IDpcclxuXHJcblx0XHQvLyBPdGhlcndpc2UgaW5pdGlhbGl6ZSBmb3IgaG9yaXpvbnRhbCBvciB2ZXJ0aWNhbCBwcm9wZXJ0aWVzXHJcblx0XHRuYW1lID09PSBcIndpZHRoXCIgPyAxIDogMCxcclxuXHJcblx0XHR2YWwgPSAwO1xyXG5cclxuXHRmb3IgKCA7IGkgPCA0OyBpICs9IDIgKSB7XHJcblxyXG5cdFx0Ly8gQm90aCBib3ggbW9kZWxzIGV4Y2x1ZGUgbWFyZ2luLCBzbyBhZGQgaXQgaWYgd2Ugd2FudCBpdFxyXG5cdFx0aWYgKCBleHRyYSA9PT0gXCJtYXJnaW5cIiApIHtcclxuXHRcdFx0dmFsICs9IGpRdWVyeS5jc3MoIGVsZW0sIGV4dHJhICsgY3NzRXhwYW5kWyBpIF0sIHRydWUsIHN0eWxlcyApO1xyXG5cdFx0fVxyXG5cclxuXHRcdGlmICggaXNCb3JkZXJCb3ggKSB7XHJcblxyXG5cdFx0XHQvLyBib3JkZXItYm94IGluY2x1ZGVzIHBhZGRpbmcsIHNvIHJlbW92ZSBpdCBpZiB3ZSB3YW50IGNvbnRlbnRcclxuXHRcdFx0aWYgKCBleHRyYSA9PT0gXCJjb250ZW50XCIgKSB7XHJcblx0XHRcdFx0dmFsIC09IGpRdWVyeS5jc3MoIGVsZW0sIFwicGFkZGluZ1wiICsgY3NzRXhwYW5kWyBpIF0sIHRydWUsIHN0eWxlcyApO1xyXG5cdFx0XHR9XHJcblxyXG5cdFx0XHQvLyBBdCB0aGlzIHBvaW50LCBleHRyYSBpc24ndCBib3JkZXIgbm9yIG1hcmdpbiwgc28gcmVtb3ZlIGJvcmRlclxyXG5cdFx0XHRpZiAoIGV4dHJhICE9PSBcIm1hcmdpblwiICkge1xyXG5cdFx0XHRcdHZhbCAtPSBqUXVlcnkuY3NzKCBlbGVtLCBcImJvcmRlclwiICsgY3NzRXhwYW5kWyBpIF0gKyBcIldpZHRoXCIsIHRydWUsIHN0eWxlcyApO1xyXG5cdFx0XHR9XHJcblx0XHR9IGVsc2Uge1xyXG5cclxuXHRcdFx0Ly8gQXQgdGhpcyBwb2ludCwgZXh0cmEgaXNuJ3QgY29udGVudCwgc28gYWRkIHBhZGRpbmdcclxuXHRcdFx0dmFsICs9IGpRdWVyeS5jc3MoIGVsZW0sIFwicGFkZGluZ1wiICsgY3NzRXhwYW5kWyBpIF0sIHRydWUsIHN0eWxlcyApO1xyXG5cclxuXHRcdFx0Ly8gQXQgdGhpcyBwb2ludCwgZXh0cmEgaXNuJ3QgY29udGVudCBub3IgcGFkZGluZywgc28gYWRkIGJvcmRlclxyXG5cdFx0XHRpZiAoIGV4dHJhICE9PSBcInBhZGRpbmdcIiApIHtcclxuXHRcdFx0XHR2YWwgKz0galF1ZXJ5LmNzcyggZWxlbSwgXCJib3JkZXJcIiArIGNzc0V4cGFuZFsgaSBdICsgXCJXaWR0aFwiLCB0cnVlLCBzdHlsZXMgKTtcclxuXHRcdFx0fVxyXG5cdFx0fVxyXG5cdH1cclxuXHJcblx0cmV0dXJuIHZhbDtcclxufVxyXG5cclxuZnVuY3Rpb24gZ2V0V2lkdGhPckhlaWdodCggZWxlbSwgbmFtZSwgZXh0cmEgKSB7XHJcblxyXG5cdC8vIFN0YXJ0IHdpdGggb2Zmc2V0IHByb3BlcnR5LCB3aGljaCBpcyBlcXVpdmFsZW50IHRvIHRoZSBib3JkZXItYm94IHZhbHVlXHJcblx0dmFyIHZhbHVlSXNCb3JkZXJCb3ggPSB0cnVlLFxyXG5cdFx0dmFsID0gbmFtZSA9PT0gXCJ3aWR0aFwiID8gZWxlbS5vZmZzZXRXaWR0aCA6IGVsZW0ub2Zmc2V0SGVpZ2h0LFxyXG5cdFx0c3R5bGVzID0gZ2V0U3R5bGVzKCBlbGVtICksXHJcblx0XHRpc0JvcmRlckJveCA9IGpRdWVyeS5jc3MoIGVsZW0sIFwiYm94U2l6aW5nXCIsIGZhbHNlLCBzdHlsZXMgKSA9PT0gXCJib3JkZXItYm94XCI7XHJcblxyXG5cdC8vIFNvbWUgbm9uLWh0bWwgZWxlbWVudHMgcmV0dXJuIHVuZGVmaW5lZCBmb3Igb2Zmc2V0V2lkdGgsIHNvIGNoZWNrIGZvciBudWxsL3VuZGVmaW5lZFxyXG5cdC8vIHN2ZyAtIGh0dHBzOi8vYnVnemlsbGEubW96aWxsYS5vcmcvc2hvd19idWcuY2dpP2lkPTY0OTI4NVxyXG5cdC8vIE1hdGhNTCAtIGh0dHBzOi8vYnVnemlsbGEubW96aWxsYS5vcmcvc2hvd19idWcuY2dpP2lkPTQ5MTY2OFxyXG5cdGlmICggdmFsIDw9IDAgfHwgdmFsID09IG51bGwgKSB7XHJcblxyXG5cdFx0Ly8gRmFsbCBiYWNrIHRvIGNvbXB1dGVkIHRoZW4gdW5jb21wdXRlZCBjc3MgaWYgbmVjZXNzYXJ5XHJcblx0XHR2YWwgPSBjdXJDU1MoIGVsZW0sIG5hbWUsIHN0eWxlcyApO1xyXG5cdFx0aWYgKCB2YWwgPCAwIHx8IHZhbCA9PSBudWxsICkge1xyXG5cdFx0XHR2YWwgPSBlbGVtLnN0eWxlWyBuYW1lIF07XHJcblx0XHR9XHJcblxyXG5cdFx0Ly8gQ29tcHV0ZWQgdW5pdCBpcyBub3QgcGl4ZWxzLiBTdG9wIGhlcmUgYW5kIHJldHVybi5cclxuXHRcdGlmICggcm51bW5vbnB4LnRlc3QoIHZhbCApICkge1xyXG5cdFx0XHRyZXR1cm4gdmFsO1xyXG5cdFx0fVxyXG5cclxuXHRcdC8vIENoZWNrIGZvciBzdHlsZSBpbiBjYXNlIGEgYnJvd3NlciB3aGljaCByZXR1cm5zIHVucmVsaWFibGUgdmFsdWVzXHJcblx0XHQvLyBmb3IgZ2V0Q29tcHV0ZWRTdHlsZSBzaWxlbnRseSBmYWxscyBiYWNrIHRvIHRoZSByZWxpYWJsZSBlbGVtLnN0eWxlXHJcblx0XHR2YWx1ZUlzQm9yZGVyQm94ID0gaXNCb3JkZXJCb3ggJiZcclxuXHRcdFx0KCBzdXBwb3J0LmJveFNpemluZ1JlbGlhYmxlKCkgfHwgdmFsID09PSBlbGVtLnN0eWxlWyBuYW1lIF0gKTtcclxuXHJcblx0XHQvLyBOb3JtYWxpemUgXCJcIiwgYXV0bywgYW5kIHByZXBhcmUgZm9yIGV4dHJhXHJcblx0XHR2YWwgPSBwYXJzZUZsb2F0KCB2YWwgKSB8fCAwO1xyXG5cdH1cclxuXHJcblx0Ly8gVXNlIHRoZSBhY3RpdmUgYm94LXNpemluZyBtb2RlbCB0byBhZGQvc3VidHJhY3QgaXJyZWxldmFudCBzdHlsZXNcclxuXHRyZXR1cm4gKCB2YWwgK1xyXG5cdFx0YXVnbWVudFdpZHRoT3JIZWlnaHQoXHJcblx0XHRcdGVsZW0sXHJcblx0XHRcdG5hbWUsXHJcblx0XHRcdGV4dHJhIHx8ICggaXNCb3JkZXJCb3ggPyBcImJvcmRlclwiIDogXCJjb250ZW50XCIgKSxcclxuXHRcdFx0dmFsdWVJc0JvcmRlckJveCxcclxuXHRcdFx0c3R5bGVzXHJcblx0XHQpXHJcblx0KSArIFwicHhcIjtcclxufVxyXG5cclxuZnVuY3Rpb24gc2hvd0hpZGUoIGVsZW1lbnRzLCBzaG93ICkge1xyXG5cdHZhciBkaXNwbGF5LCBlbGVtLCBoaWRkZW4sXHJcblx0XHR2YWx1ZXMgPSBbXSxcclxuXHRcdGluZGV4ID0gMCxcclxuXHRcdGxlbmd0aCA9IGVsZW1lbnRzLmxlbmd0aDtcclxuXHJcblx0Zm9yICggOyBpbmRleCA8IGxlbmd0aDsgaW5kZXgrKyApIHtcclxuXHRcdGVsZW0gPSBlbGVtZW50c1sgaW5kZXggXTtcclxuXHRcdGlmICggIWVsZW0uc3R5bGUgKSB7XHJcblx0XHRcdGNvbnRpbnVlO1xyXG5cdFx0fVxyXG5cclxuXHRcdHZhbHVlc1sgaW5kZXggXSA9IGRhdGFQcml2LmdldCggZWxlbSwgXCJvbGRkaXNwbGF5XCIgKTtcclxuXHRcdGRpc3BsYXkgPSBlbGVtLnN0eWxlLmRpc3BsYXk7XHJcblx0XHRpZiAoIHNob3cgKSB7XHJcblxyXG5cdFx0XHQvLyBSZXNldCB0aGUgaW5saW5lIGRpc3BsYXkgb2YgdGhpcyBlbGVtZW50IHRvIGxlYXJuIGlmIGl0IGlzXHJcblx0XHRcdC8vIGJlaW5nIGhpZGRlbiBieSBjYXNjYWRlZCBydWxlcyBvciBub3RcclxuXHRcdFx0aWYgKCAhdmFsdWVzWyBpbmRleCBdICYmIGRpc3BsYXkgPT09IFwibm9uZVwiICkge1xyXG5cdFx0XHRcdGVsZW0uc3R5bGUuZGlzcGxheSA9IFwiXCI7XHJcblx0XHRcdH1cclxuXHJcblx0XHRcdC8vIFNldCBlbGVtZW50cyB3aGljaCBoYXZlIGJlZW4gb3ZlcnJpZGRlbiB3aXRoIGRpc3BsYXk6IG5vbmVcclxuXHRcdFx0Ly8gaW4gYSBzdHlsZXNoZWV0IHRvIHdoYXRldmVyIHRoZSBkZWZhdWx0IGJyb3dzZXIgc3R5bGUgaXNcclxuXHRcdFx0Ly8gZm9yIHN1Y2ggYW4gZWxlbWVudFxyXG5cdFx0XHRpZiAoIGVsZW0uc3R5bGUuZGlzcGxheSA9PT0gXCJcIiAmJiBpc0hpZGRlbiggZWxlbSApICkge1xyXG5cdFx0XHRcdHZhbHVlc1sgaW5kZXggXSA9IGRhdGFQcml2LmFjY2VzcyhcclxuXHRcdFx0XHRcdGVsZW0sXHJcblx0XHRcdFx0XHRcIm9sZGRpc3BsYXlcIixcclxuXHRcdFx0XHRcdGRlZmF1bHREaXNwbGF5KCBlbGVtLm5vZGVOYW1lIClcclxuXHRcdFx0XHQpO1xyXG5cdFx0XHR9XHJcblx0XHR9IGVsc2Uge1xyXG5cdFx0XHRoaWRkZW4gPSBpc0hpZGRlbiggZWxlbSApO1xyXG5cclxuXHRcdFx0aWYgKCBkaXNwbGF5ICE9PSBcIm5vbmVcIiB8fCAhaGlkZGVuICkge1xyXG5cdFx0XHRcdGRhdGFQcml2LnNldChcclxuXHRcdFx0XHRcdGVsZW0sXHJcblx0XHRcdFx0XHRcIm9sZGRpc3BsYXlcIixcclxuXHRcdFx0XHRcdGhpZGRlbiA/IGRpc3BsYXkgOiBqUXVlcnkuY3NzKCBlbGVtLCBcImRpc3BsYXlcIiApXHJcblx0XHRcdFx0KTtcclxuXHRcdFx0fVxyXG5cdFx0fVxyXG5cdH1cclxuXHJcblx0Ly8gU2V0IHRoZSBkaXNwbGF5IG9mIG1vc3Qgb2YgdGhlIGVsZW1lbnRzIGluIGEgc2Vjb25kIGxvb3BcclxuXHQvLyB0byBhdm9pZCB0aGUgY29uc3RhbnQgcmVmbG93XHJcblx0Zm9yICggaW5kZXggPSAwOyBpbmRleCA8IGxlbmd0aDsgaW5kZXgrKyApIHtcclxuXHRcdGVsZW0gPSBlbGVtZW50c1sgaW5kZXggXTtcclxuXHRcdGlmICggIWVsZW0uc3R5bGUgKSB7XHJcblx0XHRcdGNvbnRpbnVlO1xyXG5cdFx0fVxyXG5cdFx0aWYgKCAhc2hvdyB8fCBlbGVtLnN0eWxlLmRpc3BsYXkgPT09IFwibm9uZVwiIHx8IGVsZW0uc3R5bGUuZGlzcGxheSA9PT0gXCJcIiApIHtcclxuXHRcdFx0ZWxlbS5zdHlsZS5kaXNwbGF5ID0gc2hvdyA/IHZhbHVlc1sgaW5kZXggXSB8fCBcIlwiIDogXCJub25lXCI7XHJcblx0XHR9XHJcblx0fVxyXG5cclxuXHRyZXR1cm4gZWxlbWVudHM7XHJcbn1cclxuXHJcbmpRdWVyeS5leHRlbmQoIHtcclxuXHJcblx0Ly8gQWRkIGluIHN0eWxlIHByb3BlcnR5IGhvb2tzIGZvciBvdmVycmlkaW5nIHRoZSBkZWZhdWx0XHJcblx0Ly8gYmVoYXZpb3Igb2YgZ2V0dGluZyBhbmQgc2V0dGluZyBhIHN0eWxlIHByb3BlcnR5XHJcblx0Y3NzSG9va3M6IHtcclxuXHRcdG9wYWNpdHk6IHtcclxuXHRcdFx0Z2V0OiBmdW5jdGlvbiggZWxlbSwgY29tcHV0ZWQgKSB7XHJcblx0XHRcdFx0aWYgKCBjb21wdXRlZCApIHtcclxuXHJcblx0XHRcdFx0XHQvLyBXZSBzaG91bGQgYWx3YXlzIGdldCBhIG51bWJlciBiYWNrIGZyb20gb3BhY2l0eVxyXG5cdFx0XHRcdFx0dmFyIHJldCA9IGN1ckNTUyggZWxlbSwgXCJvcGFjaXR5XCIgKTtcclxuXHRcdFx0XHRcdHJldHVybiByZXQgPT09IFwiXCIgPyBcIjFcIiA6IHJldDtcclxuXHRcdFx0XHR9XHJcblx0XHRcdH1cclxuXHRcdH1cclxuXHR9LFxyXG5cclxuXHQvLyBEb24ndCBhdXRvbWF0aWNhbGx5IGFkZCBcInB4XCIgdG8gdGhlc2UgcG9zc2libHktdW5pdGxlc3MgcHJvcGVydGllc1xyXG5cdGNzc051bWJlcjoge1xyXG5cdFx0XCJhbmltYXRpb25JdGVyYXRpb25Db3VudFwiOiB0cnVlLFxyXG5cdFx0XCJjb2x1bW5Db3VudFwiOiB0cnVlLFxyXG5cdFx0XCJmaWxsT3BhY2l0eVwiOiB0cnVlLFxyXG5cdFx0XCJmbGV4R3Jvd1wiOiB0cnVlLFxyXG5cdFx0XCJmbGV4U2hyaW5rXCI6IHRydWUsXHJcblx0XHRcImZvbnRXZWlnaHRcIjogdHJ1ZSxcclxuXHRcdFwibGluZUhlaWdodFwiOiB0cnVlLFxyXG5cdFx0XCJvcGFjaXR5XCI6IHRydWUsXHJcblx0XHRcIm9yZGVyXCI6IHRydWUsXHJcblx0XHRcIm9ycGhhbnNcIjogdHJ1ZSxcclxuXHRcdFwid2lkb3dzXCI6IHRydWUsXHJcblx0XHRcInpJbmRleFwiOiB0cnVlLFxyXG5cdFx0XCJ6b29tXCI6IHRydWVcclxuXHR9LFxyXG5cclxuXHQvLyBBZGQgaW4gcHJvcGVydGllcyB3aG9zZSBuYW1lcyB5b3Ugd2lzaCB0byBmaXggYmVmb3JlXHJcblx0Ly8gc2V0dGluZyBvciBnZXR0aW5nIHRoZSB2YWx1ZVxyXG5cdGNzc1Byb3BzOiB7XHJcblx0XHRcImZsb2F0XCI6IFwiY3NzRmxvYXRcIlxyXG5cdH0sXHJcblxyXG5cdC8vIEdldCBhbmQgc2V0IHRoZSBzdHlsZSBwcm9wZXJ0eSBvbiBhIERPTSBOb2RlXHJcblx0c3R5bGU6IGZ1bmN0aW9uKCBlbGVtLCBuYW1lLCB2YWx1ZSwgZXh0cmEgKSB7XHJcblxyXG5cdFx0Ly8gRG9uJ3Qgc2V0IHN0eWxlcyBvbiB0ZXh0IGFuZCBjb21tZW50IG5vZGVzXHJcblx0XHRpZiAoICFlbGVtIHx8IGVsZW0ubm9kZVR5cGUgPT09IDMgfHwgZWxlbS5ub2RlVHlwZSA9PT0gOCB8fCAhZWxlbS5zdHlsZSApIHtcclxuXHRcdFx0cmV0dXJuO1xyXG5cdFx0fVxyXG5cclxuXHRcdC8vIE1ha2Ugc3VyZSB0aGF0IHdlJ3JlIHdvcmtpbmcgd2l0aCB0aGUgcmlnaHQgbmFtZVxyXG5cdFx0dmFyIHJldCwgdHlwZSwgaG9va3MsXHJcblx0XHRcdG9yaWdOYW1lID0galF1ZXJ5LmNhbWVsQ2FzZSggbmFtZSApLFxyXG5cdFx0XHRzdHlsZSA9IGVsZW0uc3R5bGU7XHJcblxyXG5cdFx0bmFtZSA9IGpRdWVyeS5jc3NQcm9wc1sgb3JpZ05hbWUgXSB8fFxyXG5cdFx0XHQoIGpRdWVyeS5jc3NQcm9wc1sgb3JpZ05hbWUgXSA9IHZlbmRvclByb3BOYW1lKCBvcmlnTmFtZSApIHx8IG9yaWdOYW1lICk7XHJcblxyXG5cdFx0Ly8gR2V0cyBob29rIGZvciB0aGUgcHJlZml4ZWQgdmVyc2lvbiwgdGhlbiB1bnByZWZpeGVkIHZlcnNpb25cclxuXHRcdGhvb2tzID0galF1ZXJ5LmNzc0hvb2tzWyBuYW1lIF0gfHwgalF1ZXJ5LmNzc0hvb2tzWyBvcmlnTmFtZSBdO1xyXG5cclxuXHRcdC8vIENoZWNrIGlmIHdlJ3JlIHNldHRpbmcgYSB2YWx1ZVxyXG5cdFx0aWYgKCB2YWx1ZSAhPT0gdW5kZWZpbmVkICkge1xyXG5cdFx0XHR0eXBlID0gdHlwZW9mIHZhbHVlO1xyXG5cclxuXHRcdFx0Ly8gQ29udmVydCBcIis9XCIgb3IgXCItPVwiIHRvIHJlbGF0aXZlIG51bWJlcnMgKCM3MzQ1KVxyXG5cdFx0XHRpZiAoIHR5cGUgPT09IFwic3RyaW5nXCIgJiYgKCByZXQgPSByY3NzTnVtLmV4ZWMoIHZhbHVlICkgKSAmJiByZXRbIDEgXSApIHtcclxuXHRcdFx0XHR2YWx1ZSA9IGFkanVzdENTUyggZWxlbSwgbmFtZSwgcmV0ICk7XHJcblxyXG5cdFx0XHRcdC8vIEZpeGVzIGJ1ZyAjOTIzN1xyXG5cdFx0XHRcdHR5cGUgPSBcIm51bWJlclwiO1xyXG5cdFx0XHR9XHJcblxyXG5cdFx0XHQvLyBNYWtlIHN1cmUgdGhhdCBudWxsIGFuZCBOYU4gdmFsdWVzIGFyZW4ndCBzZXQgKCM3MTE2KVxyXG5cdFx0XHRpZiAoIHZhbHVlID09IG51bGwgfHwgdmFsdWUgIT09IHZhbHVlICkge1xyXG5cdFx0XHRcdHJldHVybjtcclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0Ly8gSWYgYSBudW1iZXIgd2FzIHBhc3NlZCBpbiwgYWRkIHRoZSB1bml0IChleGNlcHQgZm9yIGNlcnRhaW4gQ1NTIHByb3BlcnRpZXMpXHJcblx0XHRcdGlmICggdHlwZSA9PT0gXCJudW1iZXJcIiApIHtcclxuXHRcdFx0XHR2YWx1ZSArPSByZXQgJiYgcmV0WyAzIF0gfHwgKCBqUXVlcnkuY3NzTnVtYmVyWyBvcmlnTmFtZSBdID8gXCJcIiA6IFwicHhcIiApO1xyXG5cdFx0XHR9XHJcblxyXG5cdFx0XHQvLyBTdXBwb3J0OiBJRTktMTErXHJcblx0XHRcdC8vIGJhY2tncm91bmQtKiBwcm9wcyBhZmZlY3Qgb3JpZ2luYWwgY2xvbmUncyB2YWx1ZXNcclxuXHRcdFx0aWYgKCAhc3VwcG9ydC5jbGVhckNsb25lU3R5bGUgJiYgdmFsdWUgPT09IFwiXCIgJiYgbmFtZS5pbmRleE9mKCBcImJhY2tncm91bmRcIiApID09PSAwICkge1xyXG5cdFx0XHRcdHN0eWxlWyBuYW1lIF0gPSBcImluaGVyaXRcIjtcclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0Ly8gSWYgYSBob29rIHdhcyBwcm92aWRlZCwgdXNlIHRoYXQgdmFsdWUsIG90aGVyd2lzZSBqdXN0IHNldCB0aGUgc3BlY2lmaWVkIHZhbHVlXHJcblx0XHRcdGlmICggIWhvb2tzIHx8ICEoIFwic2V0XCIgaW4gaG9va3MgKSB8fFxyXG5cdFx0XHRcdCggdmFsdWUgPSBob29rcy5zZXQoIGVsZW0sIHZhbHVlLCBleHRyYSApICkgIT09IHVuZGVmaW5lZCApIHtcclxuXHJcblx0XHRcdFx0c3R5bGVbIG5hbWUgXSA9IHZhbHVlO1xyXG5cdFx0XHR9XHJcblxyXG5cdFx0fSBlbHNlIHtcclxuXHJcblx0XHRcdC8vIElmIGEgaG9vayB3YXMgcHJvdmlkZWQgZ2V0IHRoZSBub24tY29tcHV0ZWQgdmFsdWUgZnJvbSB0aGVyZVxyXG5cdFx0XHRpZiAoIGhvb2tzICYmIFwiZ2V0XCIgaW4gaG9va3MgJiZcclxuXHRcdFx0XHQoIHJldCA9IGhvb2tzLmdldCggZWxlbSwgZmFsc2UsIGV4dHJhICkgKSAhPT0gdW5kZWZpbmVkICkge1xyXG5cclxuXHRcdFx0XHRyZXR1cm4gcmV0O1xyXG5cdFx0XHR9XHJcblxyXG5cdFx0XHQvLyBPdGhlcndpc2UganVzdCBnZXQgdGhlIHZhbHVlIGZyb20gdGhlIHN0eWxlIG9iamVjdFxyXG5cdFx0XHRyZXR1cm4gc3R5bGVbIG5hbWUgXTtcclxuXHRcdH1cclxuXHR9LFxyXG5cclxuXHRjc3M6IGZ1bmN0aW9uKCBlbGVtLCBuYW1lLCBleHRyYSwgc3R5bGVzICkge1xyXG5cdFx0dmFyIHZhbCwgbnVtLCBob29rcyxcclxuXHRcdFx0b3JpZ05hbWUgPSBqUXVlcnkuY2FtZWxDYXNlKCBuYW1lICk7XHJcblxyXG5cdFx0Ly8gTWFrZSBzdXJlIHRoYXQgd2UncmUgd29ya2luZyB3aXRoIHRoZSByaWdodCBuYW1lXHJcblx0XHRuYW1lID0galF1ZXJ5LmNzc1Byb3BzWyBvcmlnTmFtZSBdIHx8XHJcblx0XHRcdCggalF1ZXJ5LmNzc1Byb3BzWyBvcmlnTmFtZSBdID0gdmVuZG9yUHJvcE5hbWUoIG9yaWdOYW1lICkgfHwgb3JpZ05hbWUgKTtcclxuXHJcblx0XHQvLyBUcnkgcHJlZml4ZWQgbmFtZSBmb2xsb3dlZCBieSB0aGUgdW5wcmVmaXhlZCBuYW1lXHJcblx0XHRob29rcyA9IGpRdWVyeS5jc3NIb29rc1sgbmFtZSBdIHx8IGpRdWVyeS5jc3NIb29rc1sgb3JpZ05hbWUgXTtcclxuXHJcblx0XHQvLyBJZiBhIGhvb2sgd2FzIHByb3ZpZGVkIGdldCB0aGUgY29tcHV0ZWQgdmFsdWUgZnJvbSB0aGVyZVxyXG5cdFx0aWYgKCBob29rcyAmJiBcImdldFwiIGluIGhvb2tzICkge1xyXG5cdFx0XHR2YWwgPSBob29rcy5nZXQoIGVsZW0sIHRydWUsIGV4dHJhICk7XHJcblx0XHR9XHJcblxyXG5cdFx0Ly8gT3RoZXJ3aXNlLCBpZiBhIHdheSB0byBnZXQgdGhlIGNvbXB1dGVkIHZhbHVlIGV4aXN0cywgdXNlIHRoYXRcclxuXHRcdGlmICggdmFsID09PSB1bmRlZmluZWQgKSB7XHJcblx0XHRcdHZhbCA9IGN1ckNTUyggZWxlbSwgbmFtZSwgc3R5bGVzICk7XHJcblx0XHR9XHJcblxyXG5cdFx0Ly8gQ29udmVydCBcIm5vcm1hbFwiIHRvIGNvbXB1dGVkIHZhbHVlXHJcblx0XHRpZiAoIHZhbCA9PT0gXCJub3JtYWxcIiAmJiBuYW1lIGluIGNzc05vcm1hbFRyYW5zZm9ybSApIHtcclxuXHRcdFx0dmFsID0gY3NzTm9ybWFsVHJhbnNmb3JtWyBuYW1lIF07XHJcblx0XHR9XHJcblxyXG5cdFx0Ly8gTWFrZSBudW1lcmljIGlmIGZvcmNlZCBvciBhIHF1YWxpZmllciB3YXMgcHJvdmlkZWQgYW5kIHZhbCBsb29rcyBudW1lcmljXHJcblx0XHRpZiAoIGV4dHJhID09PSBcIlwiIHx8IGV4dHJhICkge1xyXG5cdFx0XHRudW0gPSBwYXJzZUZsb2F0KCB2YWwgKTtcclxuXHRcdFx0cmV0dXJuIGV4dHJhID09PSB0cnVlIHx8IGlzRmluaXRlKCBudW0gKSA/IG51bSB8fCAwIDogdmFsO1xyXG5cdFx0fVxyXG5cdFx0cmV0dXJuIHZhbDtcclxuXHR9XHJcbn0gKTtcclxuXHJcbmpRdWVyeS5lYWNoKCBbIFwiaGVpZ2h0XCIsIFwid2lkdGhcIiBdLCBmdW5jdGlvbiggaSwgbmFtZSApIHtcclxuXHRqUXVlcnkuY3NzSG9va3NbIG5hbWUgXSA9IHtcclxuXHRcdGdldDogZnVuY3Rpb24oIGVsZW0sIGNvbXB1dGVkLCBleHRyYSApIHtcclxuXHRcdFx0aWYgKCBjb21wdXRlZCApIHtcclxuXHJcblx0XHRcdFx0Ly8gQ2VydGFpbiBlbGVtZW50cyBjYW4gaGF2ZSBkaW1lbnNpb24gaW5mbyBpZiB3ZSBpbnZpc2libHkgc2hvdyB0aGVtXHJcblx0XHRcdFx0Ly8gYnV0IGl0IG11c3QgaGF2ZSBhIGN1cnJlbnQgZGlzcGxheSBzdHlsZSB0aGF0IHdvdWxkIGJlbmVmaXRcclxuXHRcdFx0XHRyZXR1cm4gcmRpc3BsYXlzd2FwLnRlc3QoIGpRdWVyeS5jc3MoIGVsZW0sIFwiZGlzcGxheVwiICkgKSAmJlxyXG5cdFx0XHRcdFx0ZWxlbS5vZmZzZXRXaWR0aCA9PT0gMCA/XHJcblx0XHRcdFx0XHRcdHN3YXAoIGVsZW0sIGNzc1Nob3csIGZ1bmN0aW9uKCkge1xyXG5cdFx0XHRcdFx0XHRcdHJldHVybiBnZXRXaWR0aE9ySGVpZ2h0KCBlbGVtLCBuYW1lLCBleHRyYSApO1xyXG5cdFx0XHRcdFx0XHR9ICkgOlxyXG5cdFx0XHRcdFx0XHRnZXRXaWR0aE9ySGVpZ2h0KCBlbGVtLCBuYW1lLCBleHRyYSApO1xyXG5cdFx0XHR9XHJcblx0XHR9LFxyXG5cclxuXHRcdHNldDogZnVuY3Rpb24oIGVsZW0sIHZhbHVlLCBleHRyYSApIHtcclxuXHRcdFx0dmFyIG1hdGNoZXMsXHJcblx0XHRcdFx0c3R5bGVzID0gZXh0cmEgJiYgZ2V0U3R5bGVzKCBlbGVtICksXHJcblx0XHRcdFx0c3VidHJhY3QgPSBleHRyYSAmJiBhdWdtZW50V2lkdGhPckhlaWdodChcclxuXHRcdFx0XHRcdGVsZW0sXHJcblx0XHRcdFx0XHRuYW1lLFxyXG5cdFx0XHRcdFx0ZXh0cmEsXHJcblx0XHRcdFx0XHRqUXVlcnkuY3NzKCBlbGVtLCBcImJveFNpemluZ1wiLCBmYWxzZSwgc3R5bGVzICkgPT09IFwiYm9yZGVyLWJveFwiLFxyXG5cdFx0XHRcdFx0c3R5bGVzXHJcblx0XHRcdFx0KTtcclxuXHJcblx0XHRcdC8vIENvbnZlcnQgdG8gcGl4ZWxzIGlmIHZhbHVlIGFkanVzdG1lbnQgaXMgbmVlZGVkXHJcblx0XHRcdGlmICggc3VidHJhY3QgJiYgKCBtYXRjaGVzID0gcmNzc051bS5leGVjKCB2YWx1ZSApICkgJiZcclxuXHRcdFx0XHQoIG1hdGNoZXNbIDMgXSB8fCBcInB4XCIgKSAhPT0gXCJweFwiICkge1xyXG5cclxuXHRcdFx0XHRlbGVtLnN0eWxlWyBuYW1lIF0gPSB2YWx1ZTtcclxuXHRcdFx0XHR2YWx1ZSA9IGpRdWVyeS5jc3MoIGVsZW0sIG5hbWUgKTtcclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0cmV0dXJuIHNldFBvc2l0aXZlTnVtYmVyKCBlbGVtLCB2YWx1ZSwgc3VidHJhY3QgKTtcclxuXHRcdH1cclxuXHR9O1xyXG59ICk7XHJcblxyXG5qUXVlcnkuY3NzSG9va3MubWFyZ2luTGVmdCA9IGFkZEdldEhvb2tJZiggc3VwcG9ydC5yZWxpYWJsZU1hcmdpbkxlZnQsXHJcblx0ZnVuY3Rpb24oIGVsZW0sIGNvbXB1dGVkICkge1xyXG5cdFx0aWYgKCBjb21wdXRlZCApIHtcclxuXHRcdFx0cmV0dXJuICggcGFyc2VGbG9hdCggY3VyQ1NTKCBlbGVtLCBcIm1hcmdpbkxlZnRcIiApICkgfHxcclxuXHRcdFx0XHRlbGVtLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLmxlZnQgLVxyXG5cdFx0XHRcdFx0c3dhcCggZWxlbSwgeyBtYXJnaW5MZWZ0OiAwIH0sIGZ1bmN0aW9uKCkge1xyXG5cdFx0XHRcdFx0XHRyZXR1cm4gZWxlbS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKS5sZWZ0O1xyXG5cdFx0XHRcdFx0fSApXHJcblx0XHRcdFx0KSArIFwicHhcIjtcclxuXHRcdH1cclxuXHR9XHJcbik7XHJcblxyXG4vLyBTdXBwb3J0OiBBbmRyb2lkIDIuM1xyXG5qUXVlcnkuY3NzSG9va3MubWFyZ2luUmlnaHQgPSBhZGRHZXRIb29rSWYoIHN1cHBvcnQucmVsaWFibGVNYXJnaW5SaWdodCxcclxuXHRmdW5jdGlvbiggZWxlbSwgY29tcHV0ZWQgKSB7XHJcblx0XHRpZiAoIGNvbXB1dGVkICkge1xyXG5cdFx0XHRyZXR1cm4gc3dhcCggZWxlbSwgeyBcImRpc3BsYXlcIjogXCJpbmxpbmUtYmxvY2tcIiB9LFxyXG5cdFx0XHRcdGN1ckNTUywgWyBlbGVtLCBcIm1hcmdpblJpZ2h0XCIgXSApO1xyXG5cdFx0fVxyXG5cdH1cclxuKTtcclxuXHJcbi8vIFRoZXNlIGhvb2tzIGFyZSB1c2VkIGJ5IGFuaW1hdGUgdG8gZXhwYW5kIHByb3BlcnRpZXNcclxualF1ZXJ5LmVhY2goIHtcclxuXHRtYXJnaW46IFwiXCIsXHJcblx0cGFkZGluZzogXCJcIixcclxuXHRib3JkZXI6IFwiV2lkdGhcIlxyXG59LCBmdW5jdGlvbiggcHJlZml4LCBzdWZmaXggKSB7XHJcblx0alF1ZXJ5LmNzc0hvb2tzWyBwcmVmaXggKyBzdWZmaXggXSA9IHtcclxuXHRcdGV4cGFuZDogZnVuY3Rpb24oIHZhbHVlICkge1xyXG5cdFx0XHR2YXIgaSA9IDAsXHJcblx0XHRcdFx0ZXhwYW5kZWQgPSB7fSxcclxuXHJcblx0XHRcdFx0Ly8gQXNzdW1lcyBhIHNpbmdsZSBudW1iZXIgaWYgbm90IGEgc3RyaW5nXHJcblx0XHRcdFx0cGFydHMgPSB0eXBlb2YgdmFsdWUgPT09IFwic3RyaW5nXCIgPyB2YWx1ZS5zcGxpdCggXCIgXCIgKSA6IFsgdmFsdWUgXTtcclxuXHJcblx0XHRcdGZvciAoIDsgaSA8IDQ7IGkrKyApIHtcclxuXHRcdFx0XHRleHBhbmRlZFsgcHJlZml4ICsgY3NzRXhwYW5kWyBpIF0gKyBzdWZmaXggXSA9XHJcblx0XHRcdFx0XHRwYXJ0c1sgaSBdIHx8IHBhcnRzWyBpIC0gMiBdIHx8IHBhcnRzWyAwIF07XHJcblx0XHRcdH1cclxuXHJcblx0XHRcdHJldHVybiBleHBhbmRlZDtcclxuXHRcdH1cclxuXHR9O1xyXG5cclxuXHRpZiAoICFybWFyZ2luLnRlc3QoIHByZWZpeCApICkge1xyXG5cdFx0alF1ZXJ5LmNzc0hvb2tzWyBwcmVmaXggKyBzdWZmaXggXS5zZXQgPSBzZXRQb3NpdGl2ZU51bWJlcjtcclxuXHR9XHJcbn0gKTtcclxuXHJcbmpRdWVyeS5mbi5leHRlbmQoIHtcclxuXHRjc3M6IGZ1bmN0aW9uKCBuYW1lLCB2YWx1ZSApIHtcclxuXHRcdHJldHVybiBhY2Nlc3MoIHRoaXMsIGZ1bmN0aW9uKCBlbGVtLCBuYW1lLCB2YWx1ZSApIHtcclxuXHRcdFx0dmFyIHN0eWxlcywgbGVuLFxyXG5cdFx0XHRcdG1hcCA9IHt9LFxyXG5cdFx0XHRcdGkgPSAwO1xyXG5cclxuXHRcdFx0aWYgKCBqUXVlcnkuaXNBcnJheSggbmFtZSApICkge1xyXG5cdFx0XHRcdHN0eWxlcyA9IGdldFN0eWxlcyggZWxlbSApO1xyXG5cdFx0XHRcdGxlbiA9IG5hbWUubGVuZ3RoO1xyXG5cclxuXHRcdFx0XHRmb3IgKCA7IGkgPCBsZW47IGkrKyApIHtcclxuXHRcdFx0XHRcdG1hcFsgbmFtZVsgaSBdIF0gPSBqUXVlcnkuY3NzKCBlbGVtLCBuYW1lWyBpIF0sIGZhbHNlLCBzdHlsZXMgKTtcclxuXHRcdFx0XHR9XHJcblxyXG5cdFx0XHRcdHJldHVybiBtYXA7XHJcblx0XHRcdH1cclxuXHJcblx0XHRcdHJldHVybiB2YWx1ZSAhPT0gdW5kZWZpbmVkID9cclxuXHRcdFx0XHRqUXVlcnkuc3R5bGUoIGVsZW0sIG5hbWUsIHZhbHVlICkgOlxyXG5cdFx0XHRcdGpRdWVyeS5jc3MoIGVsZW0sIG5hbWUgKTtcclxuXHRcdH0sIG5hbWUsIHZhbHVlLCBhcmd1bWVudHMubGVuZ3RoID4gMSApO1xyXG5cdH0sXHJcblx0c2hvdzogZnVuY3Rpb24oKSB7XHJcblx0XHRyZXR1cm4gc2hvd0hpZGUoIHRoaXMsIHRydWUgKTtcclxuXHR9LFxyXG5cdGhpZGU6IGZ1bmN0aW9uKCkge1xyXG5cdFx0cmV0dXJuIHNob3dIaWRlKCB0aGlzICk7XHJcblx0fSxcclxuXHR0b2dnbGU6IGZ1bmN0aW9uKCBzdGF0ZSApIHtcclxuXHRcdGlmICggdHlwZW9mIHN0YXRlID09PSBcImJvb2xlYW5cIiApIHtcclxuXHRcdFx0cmV0dXJuIHN0YXRlID8gdGhpcy5zaG93KCkgOiB0aGlzLmhpZGUoKTtcclxuXHRcdH1cclxuXHJcblx0XHRyZXR1cm4gdGhpcy5lYWNoKCBmdW5jdGlvbigpIHtcclxuXHRcdFx0aWYgKCBpc0hpZGRlbiggdGhpcyApICkge1xyXG5cdFx0XHRcdGpRdWVyeSggdGhpcyApLnNob3coKTtcclxuXHRcdFx0fSBlbHNlIHtcclxuXHRcdFx0XHRqUXVlcnkoIHRoaXMgKS5oaWRlKCk7XHJcblx0XHRcdH1cclxuXHRcdH0gKTtcclxuXHR9XHJcbn0gKTtcclxuXHJcblxyXG5mdW5jdGlvbiBUd2VlbiggZWxlbSwgb3B0aW9ucywgcHJvcCwgZW5kLCBlYXNpbmcgKSB7XHJcblx0cmV0dXJuIG5ldyBUd2Vlbi5wcm90b3R5cGUuaW5pdCggZWxlbSwgb3B0aW9ucywgcHJvcCwgZW5kLCBlYXNpbmcgKTtcclxufVxyXG5qUXVlcnkuVHdlZW4gPSBUd2VlbjtcclxuXHJcblR3ZWVuLnByb3RvdHlwZSA9IHtcclxuXHRjb25zdHJ1Y3RvcjogVHdlZW4sXHJcblx0aW5pdDogZnVuY3Rpb24oIGVsZW0sIG9wdGlvbnMsIHByb3AsIGVuZCwgZWFzaW5nLCB1bml0ICkge1xyXG5cdFx0dGhpcy5lbGVtID0gZWxlbTtcclxuXHRcdHRoaXMucHJvcCA9IHByb3A7XHJcblx0XHR0aGlzLmVhc2luZyA9IGVhc2luZyB8fCBqUXVlcnkuZWFzaW5nLl9kZWZhdWx0O1xyXG5cdFx0dGhpcy5vcHRpb25zID0gb3B0aW9ucztcclxuXHRcdHRoaXMuc3RhcnQgPSB0aGlzLm5vdyA9IHRoaXMuY3VyKCk7XHJcblx0XHR0aGlzLmVuZCA9IGVuZDtcclxuXHRcdHRoaXMudW5pdCA9IHVuaXQgfHwgKCBqUXVlcnkuY3NzTnVtYmVyWyBwcm9wIF0gPyBcIlwiIDogXCJweFwiICk7XHJcblx0fSxcclxuXHRjdXI6IGZ1bmN0aW9uKCkge1xyXG5cdFx0dmFyIGhvb2tzID0gVHdlZW4ucHJvcEhvb2tzWyB0aGlzLnByb3AgXTtcclxuXHJcblx0XHRyZXR1cm4gaG9va3MgJiYgaG9va3MuZ2V0ID9cclxuXHRcdFx0aG9va3MuZ2V0KCB0aGlzICkgOlxyXG5cdFx0XHRUd2Vlbi5wcm9wSG9va3MuX2RlZmF1bHQuZ2V0KCB0aGlzICk7XHJcblx0fSxcclxuXHRydW46IGZ1bmN0aW9uKCBwZXJjZW50ICkge1xyXG5cdFx0dmFyIGVhc2VkLFxyXG5cdFx0XHRob29rcyA9IFR3ZWVuLnByb3BIb29rc1sgdGhpcy5wcm9wIF07XHJcblxyXG5cdFx0aWYgKCB0aGlzLm9wdGlvbnMuZHVyYXRpb24gKSB7XHJcblx0XHRcdHRoaXMucG9zID0gZWFzZWQgPSBqUXVlcnkuZWFzaW5nWyB0aGlzLmVhc2luZyBdKFxyXG5cdFx0XHRcdHBlcmNlbnQsIHRoaXMub3B0aW9ucy5kdXJhdGlvbiAqIHBlcmNlbnQsIDAsIDEsIHRoaXMub3B0aW9ucy5kdXJhdGlvblxyXG5cdFx0XHQpO1xyXG5cdFx0fSBlbHNlIHtcclxuXHRcdFx0dGhpcy5wb3MgPSBlYXNlZCA9IHBlcmNlbnQ7XHJcblx0XHR9XHJcblx0XHR0aGlzLm5vdyA9ICggdGhpcy5lbmQgLSB0aGlzLnN0YXJ0ICkgKiBlYXNlZCArIHRoaXMuc3RhcnQ7XHJcblxyXG5cdFx0aWYgKCB0aGlzLm9wdGlvbnMuc3RlcCApIHtcclxuXHRcdFx0dGhpcy5vcHRpb25zLnN0ZXAuY2FsbCggdGhpcy5lbGVtLCB0aGlzLm5vdywgdGhpcyApO1xyXG5cdFx0fVxyXG5cclxuXHRcdGlmICggaG9va3MgJiYgaG9va3Muc2V0ICkge1xyXG5cdFx0XHRob29rcy5zZXQoIHRoaXMgKTtcclxuXHRcdH0gZWxzZSB7XHJcblx0XHRcdFR3ZWVuLnByb3BIb29rcy5fZGVmYXVsdC5zZXQoIHRoaXMgKTtcclxuXHRcdH1cclxuXHRcdHJldHVybiB0aGlzO1xyXG5cdH1cclxufTtcclxuXHJcblR3ZWVuLnByb3RvdHlwZS5pbml0LnByb3RvdHlwZSA9IFR3ZWVuLnByb3RvdHlwZTtcclxuXHJcblR3ZWVuLnByb3BIb29rcyA9IHtcclxuXHRfZGVmYXVsdDoge1xyXG5cdFx0Z2V0OiBmdW5jdGlvbiggdHdlZW4gKSB7XHJcblx0XHRcdHZhciByZXN1bHQ7XHJcblxyXG5cdFx0XHQvLyBVc2UgYSBwcm9wZXJ0eSBvbiB0aGUgZWxlbWVudCBkaXJlY3RseSB3aGVuIGl0IGlzIG5vdCBhIERPTSBlbGVtZW50LFxyXG5cdFx0XHQvLyBvciB3aGVuIHRoZXJlIGlzIG5vIG1hdGNoaW5nIHN0eWxlIHByb3BlcnR5IHRoYXQgZXhpc3RzLlxyXG5cdFx0XHRpZiAoIHR3ZWVuLmVsZW0ubm9kZVR5cGUgIT09IDEgfHxcclxuXHRcdFx0XHR0d2Vlbi5lbGVtWyB0d2Vlbi5wcm9wIF0gIT0gbnVsbCAmJiB0d2Vlbi5lbGVtLnN0eWxlWyB0d2Vlbi5wcm9wIF0gPT0gbnVsbCApIHtcclxuXHRcdFx0XHRyZXR1cm4gdHdlZW4uZWxlbVsgdHdlZW4ucHJvcCBdO1xyXG5cdFx0XHR9XHJcblxyXG5cdFx0XHQvLyBQYXNzaW5nIGFuIGVtcHR5IHN0cmluZyBhcyBhIDNyZCBwYXJhbWV0ZXIgdG8gLmNzcyB3aWxsIGF1dG9tYXRpY2FsbHlcclxuXHRcdFx0Ly8gYXR0ZW1wdCBhIHBhcnNlRmxvYXQgYW5kIGZhbGxiYWNrIHRvIGEgc3RyaW5nIGlmIHRoZSBwYXJzZSBmYWlscy5cclxuXHRcdFx0Ly8gU2ltcGxlIHZhbHVlcyBzdWNoIGFzIFwiMTBweFwiIGFyZSBwYXJzZWQgdG8gRmxvYXQ7XHJcblx0XHRcdC8vIGNvbXBsZXggdmFsdWVzIHN1Y2ggYXMgXCJyb3RhdGUoMXJhZClcIiBhcmUgcmV0dXJuZWQgYXMtaXMuXHJcblx0XHRcdHJlc3VsdCA9IGpRdWVyeS5jc3MoIHR3ZWVuLmVsZW0sIHR3ZWVuLnByb3AsIFwiXCIgKTtcclxuXHJcblx0XHRcdC8vIEVtcHR5IHN0cmluZ3MsIG51bGwsIHVuZGVmaW5lZCBhbmQgXCJhdXRvXCIgYXJlIGNvbnZlcnRlZCB0byAwLlxyXG5cdFx0XHRyZXR1cm4gIXJlc3VsdCB8fCByZXN1bHQgPT09IFwiYXV0b1wiID8gMCA6IHJlc3VsdDtcclxuXHRcdH0sXHJcblx0XHRzZXQ6IGZ1bmN0aW9uKCB0d2VlbiApIHtcclxuXHJcblx0XHRcdC8vIFVzZSBzdGVwIGhvb2sgZm9yIGJhY2sgY29tcGF0LlxyXG5cdFx0XHQvLyBVc2UgY3NzSG9vayBpZiBpdHMgdGhlcmUuXHJcblx0XHRcdC8vIFVzZSAuc3R5bGUgaWYgYXZhaWxhYmxlIGFuZCB1c2UgcGxhaW4gcHJvcGVydGllcyB3aGVyZSBhdmFpbGFibGUuXHJcblx0XHRcdGlmICggalF1ZXJ5LmZ4LnN0ZXBbIHR3ZWVuLnByb3AgXSApIHtcclxuXHRcdFx0XHRqUXVlcnkuZnguc3RlcFsgdHdlZW4ucHJvcCBdKCB0d2VlbiApO1xyXG5cdFx0XHR9IGVsc2UgaWYgKCB0d2Vlbi5lbGVtLm5vZGVUeXBlID09PSAxICYmXHJcblx0XHRcdFx0KCB0d2Vlbi5lbGVtLnN0eWxlWyBqUXVlcnkuY3NzUHJvcHNbIHR3ZWVuLnByb3AgXSBdICE9IG51bGwgfHxcclxuXHRcdFx0XHRcdGpRdWVyeS5jc3NIb29rc1sgdHdlZW4ucHJvcCBdICkgKSB7XHJcblx0XHRcdFx0alF1ZXJ5LnN0eWxlKCB0d2Vlbi5lbGVtLCB0d2Vlbi5wcm9wLCB0d2Vlbi5ub3cgKyB0d2Vlbi51bml0ICk7XHJcblx0XHRcdH0gZWxzZSB7XHJcblx0XHRcdFx0dHdlZW4uZWxlbVsgdHdlZW4ucHJvcCBdID0gdHdlZW4ubm93O1xyXG5cdFx0XHR9XHJcblx0XHR9XHJcblx0fVxyXG59O1xyXG5cclxuLy8gU3VwcG9ydDogSUU5XHJcbi8vIFBhbmljIGJhc2VkIGFwcHJvYWNoIHRvIHNldHRpbmcgdGhpbmdzIG9uIGRpc2Nvbm5lY3RlZCBub2Rlc1xyXG5Ud2Vlbi5wcm9wSG9va3Muc2Nyb2xsVG9wID0gVHdlZW4ucHJvcEhvb2tzLnNjcm9sbExlZnQgPSB7XHJcblx0c2V0OiBmdW5jdGlvbiggdHdlZW4gKSB7XHJcblx0XHRpZiAoIHR3ZWVuLmVsZW0ubm9kZVR5cGUgJiYgdHdlZW4uZWxlbS5wYXJlbnROb2RlICkge1xyXG5cdFx0XHR0d2Vlbi5lbGVtWyB0d2Vlbi5wcm9wIF0gPSB0d2Vlbi5ub3c7XHJcblx0XHR9XHJcblx0fVxyXG59O1xyXG5cclxualF1ZXJ5LmVhc2luZyA9IHtcclxuXHRsaW5lYXI6IGZ1bmN0aW9uKCBwICkge1xyXG5cdFx0cmV0dXJuIHA7XHJcblx0fSxcclxuXHRzd2luZzogZnVuY3Rpb24oIHAgKSB7XHJcblx0XHRyZXR1cm4gMC41IC0gTWF0aC5jb3MoIHAgKiBNYXRoLlBJICkgLyAyO1xyXG5cdH0sXHJcblx0X2RlZmF1bHQ6IFwic3dpbmdcIlxyXG59O1xyXG5cclxualF1ZXJ5LmZ4ID0gVHdlZW4ucHJvdG90eXBlLmluaXQ7XHJcblxyXG4vLyBCYWNrIENvbXBhdCA8MS44IGV4dGVuc2lvbiBwb2ludFxyXG5qUXVlcnkuZnguc3RlcCA9IHt9O1xyXG5cclxuXHJcblxyXG5cclxudmFyXHJcblx0ZnhOb3csIHRpbWVySWQsXHJcblx0cmZ4dHlwZXMgPSAvXig/OnRvZ2dsZXxzaG93fGhpZGUpJC8sXHJcblx0cnJ1biA9IC9xdWV1ZUhvb2tzJC87XHJcblxyXG4vLyBBbmltYXRpb25zIGNyZWF0ZWQgc3luY2hyb25vdXNseSB3aWxsIHJ1biBzeW5jaHJvbm91c2x5XHJcbmZ1bmN0aW9uIGNyZWF0ZUZ4Tm93KCkge1xyXG5cdHdpbmRvdy5zZXRUaW1lb3V0KCBmdW5jdGlvbigpIHtcclxuXHRcdGZ4Tm93ID0gdW5kZWZpbmVkO1xyXG5cdH0gKTtcclxuXHRyZXR1cm4gKCBmeE5vdyA9IGpRdWVyeS5ub3coKSApO1xyXG59XHJcblxyXG4vLyBHZW5lcmF0ZSBwYXJhbWV0ZXJzIHRvIGNyZWF0ZSBhIHN0YW5kYXJkIGFuaW1hdGlvblxyXG5mdW5jdGlvbiBnZW5GeCggdHlwZSwgaW5jbHVkZVdpZHRoICkge1xyXG5cdHZhciB3aGljaCxcclxuXHRcdGkgPSAwLFxyXG5cdFx0YXR0cnMgPSB7IGhlaWdodDogdHlwZSB9O1xyXG5cclxuXHQvLyBJZiB3ZSBpbmNsdWRlIHdpZHRoLCBzdGVwIHZhbHVlIGlzIDEgdG8gZG8gYWxsIGNzc0V4cGFuZCB2YWx1ZXMsXHJcblx0Ly8gb3RoZXJ3aXNlIHN0ZXAgdmFsdWUgaXMgMiB0byBza2lwIG92ZXIgTGVmdCBhbmQgUmlnaHRcclxuXHRpbmNsdWRlV2lkdGggPSBpbmNsdWRlV2lkdGggPyAxIDogMDtcclxuXHRmb3IgKCA7IGkgPCA0IDsgaSArPSAyIC0gaW5jbHVkZVdpZHRoICkge1xyXG5cdFx0d2hpY2ggPSBjc3NFeHBhbmRbIGkgXTtcclxuXHRcdGF0dHJzWyBcIm1hcmdpblwiICsgd2hpY2ggXSA9IGF0dHJzWyBcInBhZGRpbmdcIiArIHdoaWNoIF0gPSB0eXBlO1xyXG5cdH1cclxuXHJcblx0aWYgKCBpbmNsdWRlV2lkdGggKSB7XHJcblx0XHRhdHRycy5vcGFjaXR5ID0gYXR0cnMud2lkdGggPSB0eXBlO1xyXG5cdH1cclxuXHJcblx0cmV0dXJuIGF0dHJzO1xyXG59XHJcblxyXG5mdW5jdGlvbiBjcmVhdGVUd2VlbiggdmFsdWUsIHByb3AsIGFuaW1hdGlvbiApIHtcclxuXHR2YXIgdHdlZW4sXHJcblx0XHRjb2xsZWN0aW9uID0gKCBBbmltYXRpb24udHdlZW5lcnNbIHByb3AgXSB8fCBbXSApLmNvbmNhdCggQW5pbWF0aW9uLnR3ZWVuZXJzWyBcIipcIiBdICksXHJcblx0XHRpbmRleCA9IDAsXHJcblx0XHRsZW5ndGggPSBjb2xsZWN0aW9uLmxlbmd0aDtcclxuXHRmb3IgKCA7IGluZGV4IDwgbGVuZ3RoOyBpbmRleCsrICkge1xyXG5cdFx0aWYgKCAoIHR3ZWVuID0gY29sbGVjdGlvblsgaW5kZXggXS5jYWxsKCBhbmltYXRpb24sIHByb3AsIHZhbHVlICkgKSApIHtcclxuXHJcblx0XHRcdC8vIFdlJ3JlIGRvbmUgd2l0aCB0aGlzIHByb3BlcnR5XHJcblx0XHRcdHJldHVybiB0d2VlbjtcclxuXHRcdH1cclxuXHR9XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGRlZmF1bHRQcmVmaWx0ZXIoIGVsZW0sIHByb3BzLCBvcHRzICkge1xyXG5cdC8qIGpzaGludCB2YWxpZHRoaXM6IHRydWUgKi9cclxuXHR2YXIgcHJvcCwgdmFsdWUsIHRvZ2dsZSwgdHdlZW4sIGhvb2tzLCBvbGRmaXJlLCBkaXNwbGF5LCBjaGVja0Rpc3BsYXksXHJcblx0XHRhbmltID0gdGhpcyxcclxuXHRcdG9yaWcgPSB7fSxcclxuXHRcdHN0eWxlID0gZWxlbS5zdHlsZSxcclxuXHRcdGhpZGRlbiA9IGVsZW0ubm9kZVR5cGUgJiYgaXNIaWRkZW4oIGVsZW0gKSxcclxuXHRcdGRhdGFTaG93ID0gZGF0YVByaXYuZ2V0KCBlbGVtLCBcImZ4c2hvd1wiICk7XHJcblxyXG5cdC8vIEhhbmRsZSBxdWV1ZTogZmFsc2UgcHJvbWlzZXNcclxuXHRpZiAoICFvcHRzLnF1ZXVlICkge1xyXG5cdFx0aG9va3MgPSBqUXVlcnkuX3F1ZXVlSG9va3MoIGVsZW0sIFwiZnhcIiApO1xyXG5cdFx0aWYgKCBob29rcy51bnF1ZXVlZCA9PSBudWxsICkge1xyXG5cdFx0XHRob29rcy51bnF1ZXVlZCA9IDA7XHJcblx0XHRcdG9sZGZpcmUgPSBob29rcy5lbXB0eS5maXJlO1xyXG5cdFx0XHRob29rcy5lbXB0eS5maXJlID0gZnVuY3Rpb24oKSB7XHJcblx0XHRcdFx0aWYgKCAhaG9va3MudW5xdWV1ZWQgKSB7XHJcblx0XHRcdFx0XHRvbGRmaXJlKCk7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9O1xyXG5cdFx0fVxyXG5cdFx0aG9va3MudW5xdWV1ZWQrKztcclxuXHJcblx0XHRhbmltLmFsd2F5cyggZnVuY3Rpb24oKSB7XHJcblxyXG5cdFx0XHQvLyBFbnN1cmUgdGhlIGNvbXBsZXRlIGhhbmRsZXIgaXMgY2FsbGVkIGJlZm9yZSB0aGlzIGNvbXBsZXRlc1xyXG5cdFx0XHRhbmltLmFsd2F5cyggZnVuY3Rpb24oKSB7XHJcblx0XHRcdFx0aG9va3MudW5xdWV1ZWQtLTtcclxuXHRcdFx0XHRpZiAoICFqUXVlcnkucXVldWUoIGVsZW0sIFwiZnhcIiApLmxlbmd0aCApIHtcclxuXHRcdFx0XHRcdGhvb2tzLmVtcHR5LmZpcmUoKTtcclxuXHRcdFx0XHR9XHJcblx0XHRcdH0gKTtcclxuXHRcdH0gKTtcclxuXHR9XHJcblxyXG5cdC8vIEhlaWdodC93aWR0aCBvdmVyZmxvdyBwYXNzXHJcblx0aWYgKCBlbGVtLm5vZGVUeXBlID09PSAxICYmICggXCJoZWlnaHRcIiBpbiBwcm9wcyB8fCBcIndpZHRoXCIgaW4gcHJvcHMgKSApIHtcclxuXHJcblx0XHQvLyBNYWtlIHN1cmUgdGhhdCBub3RoaW5nIHNuZWFrcyBvdXRcclxuXHRcdC8vIFJlY29yZCBhbGwgMyBvdmVyZmxvdyBhdHRyaWJ1dGVzIGJlY2F1c2UgSUU5LTEwIGRvIG5vdFxyXG5cdFx0Ly8gY2hhbmdlIHRoZSBvdmVyZmxvdyBhdHRyaWJ1dGUgd2hlbiBvdmVyZmxvd1ggYW5kXHJcblx0XHQvLyBvdmVyZmxvd1kgYXJlIHNldCB0byB0aGUgc2FtZSB2YWx1ZVxyXG5cdFx0b3B0cy5vdmVyZmxvdyA9IFsgc3R5bGUub3ZlcmZsb3csIHN0eWxlLm92ZXJmbG93WCwgc3R5bGUub3ZlcmZsb3dZIF07XHJcblxyXG5cdFx0Ly8gU2V0IGRpc3BsYXkgcHJvcGVydHkgdG8gaW5saW5lLWJsb2NrIGZvciBoZWlnaHQvd2lkdGhcclxuXHRcdC8vIGFuaW1hdGlvbnMgb24gaW5saW5lIGVsZW1lbnRzIHRoYXQgYXJlIGhhdmluZyB3aWR0aC9oZWlnaHQgYW5pbWF0ZWRcclxuXHRcdGRpc3BsYXkgPSBqUXVlcnkuY3NzKCBlbGVtLCBcImRpc3BsYXlcIiApO1xyXG5cclxuXHRcdC8vIFRlc3QgZGVmYXVsdCBkaXNwbGF5IGlmIGRpc3BsYXkgaXMgY3VycmVudGx5IFwibm9uZVwiXHJcblx0XHRjaGVja0Rpc3BsYXkgPSBkaXNwbGF5ID09PSBcIm5vbmVcIiA/XHJcblx0XHRcdGRhdGFQcml2LmdldCggZWxlbSwgXCJvbGRkaXNwbGF5XCIgKSB8fCBkZWZhdWx0RGlzcGxheSggZWxlbS5ub2RlTmFtZSApIDogZGlzcGxheTtcclxuXHJcblx0XHRpZiAoIGNoZWNrRGlzcGxheSA9PT0gXCJpbmxpbmVcIiAmJiBqUXVlcnkuY3NzKCBlbGVtLCBcImZsb2F0XCIgKSA9PT0gXCJub25lXCIgKSB7XHJcblx0XHRcdHN0eWxlLmRpc3BsYXkgPSBcImlubGluZS1ibG9ja1wiO1xyXG5cdFx0fVxyXG5cdH1cclxuXHJcblx0aWYgKCBvcHRzLm92ZXJmbG93ICkge1xyXG5cdFx0c3R5bGUub3ZlcmZsb3cgPSBcImhpZGRlblwiO1xyXG5cdFx0YW5pbS5hbHdheXMoIGZ1bmN0aW9uKCkge1xyXG5cdFx0XHRzdHlsZS5vdmVyZmxvdyA9IG9wdHMub3ZlcmZsb3dbIDAgXTtcclxuXHRcdFx0c3R5bGUub3ZlcmZsb3dYID0gb3B0cy5vdmVyZmxvd1sgMSBdO1xyXG5cdFx0XHRzdHlsZS5vdmVyZmxvd1kgPSBvcHRzLm92ZXJmbG93WyAyIF07XHJcblx0XHR9ICk7XHJcblx0fVxyXG5cclxuXHQvLyBzaG93L2hpZGUgcGFzc1xyXG5cdGZvciAoIHByb3AgaW4gcHJvcHMgKSB7XHJcblx0XHR2YWx1ZSA9IHByb3BzWyBwcm9wIF07XHJcblx0XHRpZiAoIHJmeHR5cGVzLmV4ZWMoIHZhbHVlICkgKSB7XHJcblx0XHRcdGRlbGV0ZSBwcm9wc1sgcHJvcCBdO1xyXG5cdFx0XHR0b2dnbGUgPSB0b2dnbGUgfHwgdmFsdWUgPT09IFwidG9nZ2xlXCI7XHJcblx0XHRcdGlmICggdmFsdWUgPT09ICggaGlkZGVuID8gXCJoaWRlXCIgOiBcInNob3dcIiApICkge1xyXG5cclxuXHRcdFx0XHQvLyBJZiB0aGVyZSBpcyBkYXRhU2hvdyBsZWZ0IG92ZXIgZnJvbSBhIHN0b3BwZWQgaGlkZSBvciBzaG93XHJcblx0XHRcdFx0Ly8gYW5kIHdlIGFyZSBnb2luZyB0byBwcm9jZWVkIHdpdGggc2hvdywgd2Ugc2hvdWxkIHByZXRlbmQgdG8gYmUgaGlkZGVuXHJcblx0XHRcdFx0aWYgKCB2YWx1ZSA9PT0gXCJzaG93XCIgJiYgZGF0YVNob3cgJiYgZGF0YVNob3dbIHByb3AgXSAhPT0gdW5kZWZpbmVkICkge1xyXG5cdFx0XHRcdFx0aGlkZGVuID0gdHJ1ZTtcclxuXHRcdFx0XHR9IGVsc2Uge1xyXG5cdFx0XHRcdFx0Y29udGludWU7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9XHJcblx0XHRcdG9yaWdbIHByb3AgXSA9IGRhdGFTaG93ICYmIGRhdGFTaG93WyBwcm9wIF0gfHwgalF1ZXJ5LnN0eWxlKCBlbGVtLCBwcm9wICk7XHJcblxyXG5cdFx0Ly8gQW55IG5vbi1meCB2YWx1ZSBzdG9wcyB1cyBmcm9tIHJlc3RvcmluZyB0aGUgb3JpZ2luYWwgZGlzcGxheSB2YWx1ZVxyXG5cdFx0fSBlbHNlIHtcclxuXHRcdFx0ZGlzcGxheSA9IHVuZGVmaW5lZDtcclxuXHRcdH1cclxuXHR9XHJcblxyXG5cdGlmICggIWpRdWVyeS5pc0VtcHR5T2JqZWN0KCBvcmlnICkgKSB7XHJcblx0XHRpZiAoIGRhdGFTaG93ICkge1xyXG5cdFx0XHRpZiAoIFwiaGlkZGVuXCIgaW4gZGF0YVNob3cgKSB7XHJcblx0XHRcdFx0aGlkZGVuID0gZGF0YVNob3cuaGlkZGVuO1xyXG5cdFx0XHR9XHJcblx0XHR9IGVsc2Uge1xyXG5cdFx0XHRkYXRhU2hvdyA9IGRhdGFQcml2LmFjY2VzcyggZWxlbSwgXCJmeHNob3dcIiwge30gKTtcclxuXHRcdH1cclxuXHJcblx0XHQvLyBTdG9yZSBzdGF0ZSBpZiBpdHMgdG9nZ2xlIC0gZW5hYmxlcyAuc3RvcCgpLnRvZ2dsZSgpIHRvIFwicmV2ZXJzZVwiXHJcblx0XHRpZiAoIHRvZ2dsZSApIHtcclxuXHRcdFx0ZGF0YVNob3cuaGlkZGVuID0gIWhpZGRlbjtcclxuXHRcdH1cclxuXHRcdGlmICggaGlkZGVuICkge1xyXG5cdFx0XHRqUXVlcnkoIGVsZW0gKS5zaG93KCk7XHJcblx0XHR9IGVsc2Uge1xyXG5cdFx0XHRhbmltLmRvbmUoIGZ1bmN0aW9uKCkge1xyXG5cdFx0XHRcdGpRdWVyeSggZWxlbSApLmhpZGUoKTtcclxuXHRcdFx0fSApO1xyXG5cdFx0fVxyXG5cdFx0YW5pbS5kb25lKCBmdW5jdGlvbigpIHtcclxuXHRcdFx0dmFyIHByb3A7XHJcblxyXG5cdFx0XHRkYXRhUHJpdi5yZW1vdmUoIGVsZW0sIFwiZnhzaG93XCIgKTtcclxuXHRcdFx0Zm9yICggcHJvcCBpbiBvcmlnICkge1xyXG5cdFx0XHRcdGpRdWVyeS5zdHlsZSggZWxlbSwgcHJvcCwgb3JpZ1sgcHJvcCBdICk7XHJcblx0XHRcdH1cclxuXHRcdH0gKTtcclxuXHRcdGZvciAoIHByb3AgaW4gb3JpZyApIHtcclxuXHRcdFx0dHdlZW4gPSBjcmVhdGVUd2VlbiggaGlkZGVuID8gZGF0YVNob3dbIHByb3AgXSA6IDAsIHByb3AsIGFuaW0gKTtcclxuXHJcblx0XHRcdGlmICggISggcHJvcCBpbiBkYXRhU2hvdyApICkge1xyXG5cdFx0XHRcdGRhdGFTaG93WyBwcm9wIF0gPSB0d2Vlbi5zdGFydDtcclxuXHRcdFx0XHRpZiAoIGhpZGRlbiApIHtcclxuXHRcdFx0XHRcdHR3ZWVuLmVuZCA9IHR3ZWVuLnN0YXJ0O1xyXG5cdFx0XHRcdFx0dHdlZW4uc3RhcnQgPSBwcm9wID09PSBcIndpZHRoXCIgfHwgcHJvcCA9PT0gXCJoZWlnaHRcIiA/IDEgOiAwO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0fVxyXG5cdFx0fVxyXG5cclxuXHQvLyBJZiB0aGlzIGlzIGEgbm9vcCBsaWtlIC5oaWRlKCkuaGlkZSgpLCByZXN0b3JlIGFuIG92ZXJ3cml0dGVuIGRpc3BsYXkgdmFsdWVcclxuXHR9IGVsc2UgaWYgKCAoIGRpc3BsYXkgPT09IFwibm9uZVwiID8gZGVmYXVsdERpc3BsYXkoIGVsZW0ubm9kZU5hbWUgKSA6IGRpc3BsYXkgKSA9PT0gXCJpbmxpbmVcIiApIHtcclxuXHRcdHN0eWxlLmRpc3BsYXkgPSBkaXNwbGF5O1xyXG5cdH1cclxufVxyXG5cclxuZnVuY3Rpb24gcHJvcEZpbHRlciggcHJvcHMsIHNwZWNpYWxFYXNpbmcgKSB7XHJcblx0dmFyIGluZGV4LCBuYW1lLCBlYXNpbmcsIHZhbHVlLCBob29rcztcclxuXHJcblx0Ly8gY2FtZWxDYXNlLCBzcGVjaWFsRWFzaW5nIGFuZCBleHBhbmQgY3NzSG9vayBwYXNzXHJcblx0Zm9yICggaW5kZXggaW4gcHJvcHMgKSB7XHJcblx0XHRuYW1lID0galF1ZXJ5LmNhbWVsQ2FzZSggaW5kZXggKTtcclxuXHRcdGVhc2luZyA9IHNwZWNpYWxFYXNpbmdbIG5hbWUgXTtcclxuXHRcdHZhbHVlID0gcHJvcHNbIGluZGV4IF07XHJcblx0XHRpZiAoIGpRdWVyeS5pc0FycmF5KCB2YWx1ZSApICkge1xyXG5cdFx0XHRlYXNpbmcgPSB2YWx1ZVsgMSBdO1xyXG5cdFx0XHR2YWx1ZSA9IHByb3BzWyBpbmRleCBdID0gdmFsdWVbIDAgXTtcclxuXHRcdH1cclxuXHJcblx0XHRpZiAoIGluZGV4ICE9PSBuYW1lICkge1xyXG5cdFx0XHRwcm9wc1sgbmFtZSBdID0gdmFsdWU7XHJcblx0XHRcdGRlbGV0ZSBwcm9wc1sgaW5kZXggXTtcclxuXHRcdH1cclxuXHJcblx0XHRob29rcyA9IGpRdWVyeS5jc3NIb29rc1sgbmFtZSBdO1xyXG5cdFx0aWYgKCBob29rcyAmJiBcImV4cGFuZFwiIGluIGhvb2tzICkge1xyXG5cdFx0XHR2YWx1ZSA9IGhvb2tzLmV4cGFuZCggdmFsdWUgKTtcclxuXHRcdFx0ZGVsZXRlIHByb3BzWyBuYW1lIF07XHJcblxyXG5cdFx0XHQvLyBOb3QgcXVpdGUgJC5leHRlbmQsIHRoaXMgd29uJ3Qgb3ZlcndyaXRlIGV4aXN0aW5nIGtleXMuXHJcblx0XHRcdC8vIFJldXNpbmcgJ2luZGV4JyBiZWNhdXNlIHdlIGhhdmUgdGhlIGNvcnJlY3QgXCJuYW1lXCJcclxuXHRcdFx0Zm9yICggaW5kZXggaW4gdmFsdWUgKSB7XHJcblx0XHRcdFx0aWYgKCAhKCBpbmRleCBpbiBwcm9wcyApICkge1xyXG5cdFx0XHRcdFx0cHJvcHNbIGluZGV4IF0gPSB2YWx1ZVsgaW5kZXggXTtcclxuXHRcdFx0XHRcdHNwZWNpYWxFYXNpbmdbIGluZGV4IF0gPSBlYXNpbmc7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9XHJcblx0XHR9IGVsc2Uge1xyXG5cdFx0XHRzcGVjaWFsRWFzaW5nWyBuYW1lIF0gPSBlYXNpbmc7XHJcblx0XHR9XHJcblx0fVxyXG59XHJcblxyXG5mdW5jdGlvbiBBbmltYXRpb24oIGVsZW0sIHByb3BlcnRpZXMsIG9wdGlvbnMgKSB7XHJcblx0dmFyIHJlc3VsdCxcclxuXHRcdHN0b3BwZWQsXHJcblx0XHRpbmRleCA9IDAsXHJcblx0XHRsZW5ndGggPSBBbmltYXRpb24ucHJlZmlsdGVycy5sZW5ndGgsXHJcblx0XHRkZWZlcnJlZCA9IGpRdWVyeS5EZWZlcnJlZCgpLmFsd2F5cyggZnVuY3Rpb24oKSB7XHJcblxyXG5cdFx0XHQvLyBEb24ndCBtYXRjaCBlbGVtIGluIHRoZSA6YW5pbWF0ZWQgc2VsZWN0b3JcclxuXHRcdFx0ZGVsZXRlIHRpY2suZWxlbTtcclxuXHRcdH0gKSxcclxuXHRcdHRpY2sgPSBmdW5jdGlvbigpIHtcclxuXHRcdFx0aWYgKCBzdG9wcGVkICkge1xyXG5cdFx0XHRcdHJldHVybiBmYWxzZTtcclxuXHRcdFx0fVxyXG5cdFx0XHR2YXIgY3VycmVudFRpbWUgPSBmeE5vdyB8fCBjcmVhdGVGeE5vdygpLFxyXG5cdFx0XHRcdHJlbWFpbmluZyA9IE1hdGgubWF4KCAwLCBhbmltYXRpb24uc3RhcnRUaW1lICsgYW5pbWF0aW9uLmR1cmF0aW9uIC0gY3VycmVudFRpbWUgKSxcclxuXHJcblx0XHRcdFx0Ly8gU3VwcG9ydDogQW5kcm9pZCAyLjNcclxuXHRcdFx0XHQvLyBBcmNoYWljIGNyYXNoIGJ1ZyB3b24ndCBhbGxvdyB1cyB0byB1c2UgYDEgLSAoIDAuNSB8fCAwIClgICgjMTI0OTcpXHJcblx0XHRcdFx0dGVtcCA9IHJlbWFpbmluZyAvIGFuaW1hdGlvbi5kdXJhdGlvbiB8fCAwLFxyXG5cdFx0XHRcdHBlcmNlbnQgPSAxIC0gdGVtcCxcclxuXHRcdFx0XHRpbmRleCA9IDAsXHJcblx0XHRcdFx0bGVuZ3RoID0gYW5pbWF0aW9uLnR3ZWVucy5sZW5ndGg7XHJcblxyXG5cdFx0XHRmb3IgKCA7IGluZGV4IDwgbGVuZ3RoIDsgaW5kZXgrKyApIHtcclxuXHRcdFx0XHRhbmltYXRpb24udHdlZW5zWyBpbmRleCBdLnJ1biggcGVyY2VudCApO1xyXG5cdFx0XHR9XHJcblxyXG5cdFx0XHRkZWZlcnJlZC5ub3RpZnlXaXRoKCBlbGVtLCBbIGFuaW1hdGlvbiwgcGVyY2VudCwgcmVtYWluaW5nIF0gKTtcclxuXHJcblx0XHRcdGlmICggcGVyY2VudCA8IDEgJiYgbGVuZ3RoICkge1xyXG5cdFx0XHRcdHJldHVybiByZW1haW5pbmc7XHJcblx0XHRcdH0gZWxzZSB7XHJcblx0XHRcdFx0ZGVmZXJyZWQucmVzb2x2ZVdpdGgoIGVsZW0sIFsgYW5pbWF0aW9uIF0gKTtcclxuXHRcdFx0XHRyZXR1cm4gZmFsc2U7XHJcblx0XHRcdH1cclxuXHRcdH0sXHJcblx0XHRhbmltYXRpb24gPSBkZWZlcnJlZC5wcm9taXNlKCB7XHJcblx0XHRcdGVsZW06IGVsZW0sXHJcblx0XHRcdHByb3BzOiBqUXVlcnkuZXh0ZW5kKCB7fSwgcHJvcGVydGllcyApLFxyXG5cdFx0XHRvcHRzOiBqUXVlcnkuZXh0ZW5kKCB0cnVlLCB7XHJcblx0XHRcdFx0c3BlY2lhbEVhc2luZzoge30sXHJcblx0XHRcdFx0ZWFzaW5nOiBqUXVlcnkuZWFzaW5nLl9kZWZhdWx0XHJcblx0XHRcdH0sIG9wdGlvbnMgKSxcclxuXHRcdFx0b3JpZ2luYWxQcm9wZXJ0aWVzOiBwcm9wZXJ0aWVzLFxyXG5cdFx0XHRvcmlnaW5hbE9wdGlvbnM6IG9wdGlvbnMsXHJcblx0XHRcdHN0YXJ0VGltZTogZnhOb3cgfHwgY3JlYXRlRnhOb3coKSxcclxuXHRcdFx0ZHVyYXRpb246IG9wdGlvbnMuZHVyYXRpb24sXHJcblx0XHRcdHR3ZWVuczogW10sXHJcblx0XHRcdGNyZWF0ZVR3ZWVuOiBmdW5jdGlvbiggcHJvcCwgZW5kICkge1xyXG5cdFx0XHRcdHZhciB0d2VlbiA9IGpRdWVyeS5Ud2VlbiggZWxlbSwgYW5pbWF0aW9uLm9wdHMsIHByb3AsIGVuZCxcclxuXHRcdFx0XHRcdFx0YW5pbWF0aW9uLm9wdHMuc3BlY2lhbEVhc2luZ1sgcHJvcCBdIHx8IGFuaW1hdGlvbi5vcHRzLmVhc2luZyApO1xyXG5cdFx0XHRcdGFuaW1hdGlvbi50d2VlbnMucHVzaCggdHdlZW4gKTtcclxuXHRcdFx0XHRyZXR1cm4gdHdlZW47XHJcblx0XHRcdH0sXHJcblx0XHRcdHN0b3A6IGZ1bmN0aW9uKCBnb3RvRW5kICkge1xyXG5cdFx0XHRcdHZhciBpbmRleCA9IDAsXHJcblxyXG5cdFx0XHRcdFx0Ly8gSWYgd2UgYXJlIGdvaW5nIHRvIHRoZSBlbmQsIHdlIHdhbnQgdG8gcnVuIGFsbCB0aGUgdHdlZW5zXHJcblx0XHRcdFx0XHQvLyBvdGhlcndpc2Ugd2Ugc2tpcCB0aGlzIHBhcnRcclxuXHRcdFx0XHRcdGxlbmd0aCA9IGdvdG9FbmQgPyBhbmltYXRpb24udHdlZW5zLmxlbmd0aCA6IDA7XHJcblx0XHRcdFx0aWYgKCBzdG9wcGVkICkge1xyXG5cdFx0XHRcdFx0cmV0dXJuIHRoaXM7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHRcdHN0b3BwZWQgPSB0cnVlO1xyXG5cdFx0XHRcdGZvciAoIDsgaW5kZXggPCBsZW5ndGggOyBpbmRleCsrICkge1xyXG5cdFx0XHRcdFx0YW5pbWF0aW9uLnR3ZWVuc1sgaW5kZXggXS5ydW4oIDEgKTtcclxuXHRcdFx0XHR9XHJcblxyXG5cdFx0XHRcdC8vIFJlc29sdmUgd2hlbiB3ZSBwbGF5ZWQgdGhlIGxhc3QgZnJhbWU7IG90aGVyd2lzZSwgcmVqZWN0XHJcblx0XHRcdFx0aWYgKCBnb3RvRW5kICkge1xyXG5cdFx0XHRcdFx0ZGVmZXJyZWQubm90aWZ5V2l0aCggZWxlbSwgWyBhbmltYXRpb24sIDEsIDAgXSApO1xyXG5cdFx0XHRcdFx0ZGVmZXJyZWQucmVzb2x2ZVdpdGgoIGVsZW0sIFsgYW5pbWF0aW9uLCBnb3RvRW5kIF0gKTtcclxuXHRcdFx0XHR9IGVsc2Uge1xyXG5cdFx0XHRcdFx0ZGVmZXJyZWQucmVqZWN0V2l0aCggZWxlbSwgWyBhbmltYXRpb24sIGdvdG9FbmQgXSApO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0XHRyZXR1cm4gdGhpcztcclxuXHRcdFx0fVxyXG5cdFx0fSApLFxyXG5cdFx0cHJvcHMgPSBhbmltYXRpb24ucHJvcHM7XHJcblxyXG5cdHByb3BGaWx0ZXIoIHByb3BzLCBhbmltYXRpb24ub3B0cy5zcGVjaWFsRWFzaW5nICk7XHJcblxyXG5cdGZvciAoIDsgaW5kZXggPCBsZW5ndGggOyBpbmRleCsrICkge1xyXG5cdFx0cmVzdWx0ID0gQW5pbWF0aW9uLnByZWZpbHRlcnNbIGluZGV4IF0uY2FsbCggYW5pbWF0aW9uLCBlbGVtLCBwcm9wcywgYW5pbWF0aW9uLm9wdHMgKTtcclxuXHRcdGlmICggcmVzdWx0ICkge1xyXG5cdFx0XHRpZiAoIGpRdWVyeS5pc0Z1bmN0aW9uKCByZXN1bHQuc3RvcCApICkge1xyXG5cdFx0XHRcdGpRdWVyeS5fcXVldWVIb29rcyggYW5pbWF0aW9uLmVsZW0sIGFuaW1hdGlvbi5vcHRzLnF1ZXVlICkuc3RvcCA9XHJcblx0XHRcdFx0XHRqUXVlcnkucHJveHkoIHJlc3VsdC5zdG9wLCByZXN1bHQgKTtcclxuXHRcdFx0fVxyXG5cdFx0XHRyZXR1cm4gcmVzdWx0O1xyXG5cdFx0fVxyXG5cdH1cclxuXHJcblx0alF1ZXJ5Lm1hcCggcHJvcHMsIGNyZWF0ZVR3ZWVuLCBhbmltYXRpb24gKTtcclxuXHJcblx0aWYgKCBqUXVlcnkuaXNGdW5jdGlvbiggYW5pbWF0aW9uLm9wdHMuc3RhcnQgKSApIHtcclxuXHRcdGFuaW1hdGlvbi5vcHRzLnN0YXJ0LmNhbGwoIGVsZW0sIGFuaW1hdGlvbiApO1xyXG5cdH1cclxuXHJcblx0alF1ZXJ5LmZ4LnRpbWVyKFxyXG5cdFx0alF1ZXJ5LmV4dGVuZCggdGljaywge1xyXG5cdFx0XHRlbGVtOiBlbGVtLFxyXG5cdFx0XHRhbmltOiBhbmltYXRpb24sXHJcblx0XHRcdHF1ZXVlOiBhbmltYXRpb24ub3B0cy5xdWV1ZVxyXG5cdFx0fSApXHJcblx0KTtcclxuXHJcblx0Ly8gYXR0YWNoIGNhbGxiYWNrcyBmcm9tIG9wdGlvbnNcclxuXHRyZXR1cm4gYW5pbWF0aW9uLnByb2dyZXNzKCBhbmltYXRpb24ub3B0cy5wcm9ncmVzcyApXHJcblx0XHQuZG9uZSggYW5pbWF0aW9uLm9wdHMuZG9uZSwgYW5pbWF0aW9uLm9wdHMuY29tcGxldGUgKVxyXG5cdFx0LmZhaWwoIGFuaW1hdGlvbi5vcHRzLmZhaWwgKVxyXG5cdFx0LmFsd2F5cyggYW5pbWF0aW9uLm9wdHMuYWx3YXlzICk7XHJcbn1cclxuXHJcbmpRdWVyeS5BbmltYXRpb24gPSBqUXVlcnkuZXh0ZW5kKCBBbmltYXRpb24sIHtcclxuXHR0d2VlbmVyczoge1xyXG5cdFx0XCIqXCI6IFsgZnVuY3Rpb24oIHByb3AsIHZhbHVlICkge1xyXG5cdFx0XHR2YXIgdHdlZW4gPSB0aGlzLmNyZWF0ZVR3ZWVuKCBwcm9wLCB2YWx1ZSApO1xyXG5cdFx0XHRhZGp1c3RDU1MoIHR3ZWVuLmVsZW0sIHByb3AsIHJjc3NOdW0uZXhlYyggdmFsdWUgKSwgdHdlZW4gKTtcclxuXHRcdFx0cmV0dXJuIHR3ZWVuO1xyXG5cdFx0fSBdXHJcblx0fSxcclxuXHJcblx0dHdlZW5lcjogZnVuY3Rpb24oIHByb3BzLCBjYWxsYmFjayApIHtcclxuXHRcdGlmICggalF1ZXJ5LmlzRnVuY3Rpb24oIHByb3BzICkgKSB7XHJcblx0XHRcdGNhbGxiYWNrID0gcHJvcHM7XHJcblx0XHRcdHByb3BzID0gWyBcIipcIiBdO1xyXG5cdFx0fSBlbHNlIHtcclxuXHRcdFx0cHJvcHMgPSBwcm9wcy5tYXRjaCggcm5vdHdoaXRlICk7XHJcblx0XHR9XHJcblxyXG5cdFx0dmFyIHByb3AsXHJcblx0XHRcdGluZGV4ID0gMCxcclxuXHRcdFx0bGVuZ3RoID0gcHJvcHMubGVuZ3RoO1xyXG5cclxuXHRcdGZvciAoIDsgaW5kZXggPCBsZW5ndGggOyBpbmRleCsrICkge1xyXG5cdFx0XHRwcm9wID0gcHJvcHNbIGluZGV4IF07XHJcblx0XHRcdEFuaW1hdGlvbi50d2VlbmVyc1sgcHJvcCBdID0gQW5pbWF0aW9uLnR3ZWVuZXJzWyBwcm9wIF0gfHwgW107XHJcblx0XHRcdEFuaW1hdGlvbi50d2VlbmVyc1sgcHJvcCBdLnVuc2hpZnQoIGNhbGxiYWNrICk7XHJcblx0XHR9XHJcblx0fSxcclxuXHJcblx0cHJlZmlsdGVyczogWyBkZWZhdWx0UHJlZmlsdGVyIF0sXHJcblxyXG5cdHByZWZpbHRlcjogZnVuY3Rpb24oIGNhbGxiYWNrLCBwcmVwZW5kICkge1xyXG5cdFx0aWYgKCBwcmVwZW5kICkge1xyXG5cdFx0XHRBbmltYXRpb24ucHJlZmlsdGVycy51bnNoaWZ0KCBjYWxsYmFjayApO1xyXG5cdFx0fSBlbHNlIHtcclxuXHRcdFx0QW5pbWF0aW9uLnByZWZpbHRlcnMucHVzaCggY2FsbGJhY2sgKTtcclxuXHRcdH1cclxuXHR9XHJcbn0gKTtcclxuXHJcbmpRdWVyeS5zcGVlZCA9IGZ1bmN0aW9uKCBzcGVlZCwgZWFzaW5nLCBmbiApIHtcclxuXHR2YXIgb3B0ID0gc3BlZWQgJiYgdHlwZW9mIHNwZWVkID09PSBcIm9iamVjdFwiID8galF1ZXJ5LmV4dGVuZCgge30sIHNwZWVkICkgOiB7XHJcblx0XHRjb21wbGV0ZTogZm4gfHwgIWZuICYmIGVhc2luZyB8fFxyXG5cdFx0XHRqUXVlcnkuaXNGdW5jdGlvbiggc3BlZWQgKSAmJiBzcGVlZCxcclxuXHRcdGR1cmF0aW9uOiBzcGVlZCxcclxuXHRcdGVhc2luZzogZm4gJiYgZWFzaW5nIHx8IGVhc2luZyAmJiAhalF1ZXJ5LmlzRnVuY3Rpb24oIGVhc2luZyApICYmIGVhc2luZ1xyXG5cdH07XHJcblxyXG5cdG9wdC5kdXJhdGlvbiA9IGpRdWVyeS5meC5vZmYgPyAwIDogdHlwZW9mIG9wdC5kdXJhdGlvbiA9PT0gXCJudW1iZXJcIiA/XHJcblx0XHRvcHQuZHVyYXRpb24gOiBvcHQuZHVyYXRpb24gaW4galF1ZXJ5LmZ4LnNwZWVkcyA/XHJcblx0XHRcdGpRdWVyeS5meC5zcGVlZHNbIG9wdC5kdXJhdGlvbiBdIDogalF1ZXJ5LmZ4LnNwZWVkcy5fZGVmYXVsdDtcclxuXHJcblx0Ly8gTm9ybWFsaXplIG9wdC5xdWV1ZSAtIHRydWUvdW5kZWZpbmVkL251bGwgLT4gXCJmeFwiXHJcblx0aWYgKCBvcHQucXVldWUgPT0gbnVsbCB8fCBvcHQucXVldWUgPT09IHRydWUgKSB7XHJcblx0XHRvcHQucXVldWUgPSBcImZ4XCI7XHJcblx0fVxyXG5cclxuXHQvLyBRdWV1ZWluZ1xyXG5cdG9wdC5vbGQgPSBvcHQuY29tcGxldGU7XHJcblxyXG5cdG9wdC5jb21wbGV0ZSA9IGZ1bmN0aW9uKCkge1xyXG5cdFx0aWYgKCBqUXVlcnkuaXNGdW5jdGlvbiggb3B0Lm9sZCApICkge1xyXG5cdFx0XHRvcHQub2xkLmNhbGwoIHRoaXMgKTtcclxuXHRcdH1cclxuXHJcblx0XHRpZiAoIG9wdC5xdWV1ZSApIHtcclxuXHRcdFx0alF1ZXJ5LmRlcXVldWUoIHRoaXMsIG9wdC5xdWV1ZSApO1xyXG5cdFx0fVxyXG5cdH07XHJcblxyXG5cdHJldHVybiBvcHQ7XHJcbn07XHJcblxyXG5qUXVlcnkuZm4uZXh0ZW5kKCB7XHJcblx0ZmFkZVRvOiBmdW5jdGlvbiggc3BlZWQsIHRvLCBlYXNpbmcsIGNhbGxiYWNrICkge1xyXG5cclxuXHRcdC8vIFNob3cgYW55IGhpZGRlbiBlbGVtZW50cyBhZnRlciBzZXR0aW5nIG9wYWNpdHkgdG8gMFxyXG5cdFx0cmV0dXJuIHRoaXMuZmlsdGVyKCBpc0hpZGRlbiApLmNzcyggXCJvcGFjaXR5XCIsIDAgKS5zaG93KClcclxuXHJcblx0XHRcdC8vIEFuaW1hdGUgdG8gdGhlIHZhbHVlIHNwZWNpZmllZFxyXG5cdFx0XHQuZW5kKCkuYW5pbWF0ZSggeyBvcGFjaXR5OiB0byB9LCBzcGVlZCwgZWFzaW5nLCBjYWxsYmFjayApO1xyXG5cdH0sXHJcblx0YW5pbWF0ZTogZnVuY3Rpb24oIHByb3AsIHNwZWVkLCBlYXNpbmcsIGNhbGxiYWNrICkge1xyXG5cdFx0dmFyIGVtcHR5ID0galF1ZXJ5LmlzRW1wdHlPYmplY3QoIHByb3AgKSxcclxuXHRcdFx0b3B0YWxsID0galF1ZXJ5LnNwZWVkKCBzcGVlZCwgZWFzaW5nLCBjYWxsYmFjayApLFxyXG5cdFx0XHRkb0FuaW1hdGlvbiA9IGZ1bmN0aW9uKCkge1xyXG5cclxuXHRcdFx0XHQvLyBPcGVyYXRlIG9uIGEgY29weSBvZiBwcm9wIHNvIHBlci1wcm9wZXJ0eSBlYXNpbmcgd29uJ3QgYmUgbG9zdFxyXG5cdFx0XHRcdHZhciBhbmltID0gQW5pbWF0aW9uKCB0aGlzLCBqUXVlcnkuZXh0ZW5kKCB7fSwgcHJvcCApLCBvcHRhbGwgKTtcclxuXHJcblx0XHRcdFx0Ly8gRW1wdHkgYW5pbWF0aW9ucywgb3IgZmluaXNoaW5nIHJlc29sdmVzIGltbWVkaWF0ZWx5XHJcblx0XHRcdFx0aWYgKCBlbXB0eSB8fCBkYXRhUHJpdi5nZXQoIHRoaXMsIFwiZmluaXNoXCIgKSApIHtcclxuXHRcdFx0XHRcdGFuaW0uc3RvcCggdHJ1ZSApO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0fTtcclxuXHRcdFx0ZG9BbmltYXRpb24uZmluaXNoID0gZG9BbmltYXRpb247XHJcblxyXG5cdFx0cmV0dXJuIGVtcHR5IHx8IG9wdGFsbC5xdWV1ZSA9PT0gZmFsc2UgP1xyXG5cdFx0XHR0aGlzLmVhY2goIGRvQW5pbWF0aW9uICkgOlxyXG5cdFx0XHR0aGlzLnF1ZXVlKCBvcHRhbGwucXVldWUsIGRvQW5pbWF0aW9uICk7XHJcblx0fSxcclxuXHRzdG9wOiBmdW5jdGlvbiggdHlwZSwgY2xlYXJRdWV1ZSwgZ290b0VuZCApIHtcclxuXHRcdHZhciBzdG9wUXVldWUgPSBmdW5jdGlvbiggaG9va3MgKSB7XHJcblx0XHRcdHZhciBzdG9wID0gaG9va3Muc3RvcDtcclxuXHRcdFx0ZGVsZXRlIGhvb2tzLnN0b3A7XHJcblx0XHRcdHN0b3AoIGdvdG9FbmQgKTtcclxuXHRcdH07XHJcblxyXG5cdFx0aWYgKCB0eXBlb2YgdHlwZSAhPT0gXCJzdHJpbmdcIiApIHtcclxuXHRcdFx0Z290b0VuZCA9IGNsZWFyUXVldWU7XHJcblx0XHRcdGNsZWFyUXVldWUgPSB0eXBlO1xyXG5cdFx0XHR0eXBlID0gdW5kZWZpbmVkO1xyXG5cdFx0fVxyXG5cdFx0aWYgKCBjbGVhclF1ZXVlICYmIHR5cGUgIT09IGZhbHNlICkge1xyXG5cdFx0XHR0aGlzLnF1ZXVlKCB0eXBlIHx8IFwiZnhcIiwgW10gKTtcclxuXHRcdH1cclxuXHJcblx0XHRyZXR1cm4gdGhpcy5lYWNoKCBmdW5jdGlvbigpIHtcclxuXHRcdFx0dmFyIGRlcXVldWUgPSB0cnVlLFxyXG5cdFx0XHRcdGluZGV4ID0gdHlwZSAhPSBudWxsICYmIHR5cGUgKyBcInF1ZXVlSG9va3NcIixcclxuXHRcdFx0XHR0aW1lcnMgPSBqUXVlcnkudGltZXJzLFxyXG5cdFx0XHRcdGRhdGEgPSBkYXRhUHJpdi5nZXQoIHRoaXMgKTtcclxuXHJcblx0XHRcdGlmICggaW5kZXggKSB7XHJcblx0XHRcdFx0aWYgKCBkYXRhWyBpbmRleCBdICYmIGRhdGFbIGluZGV4IF0uc3RvcCApIHtcclxuXHRcdFx0XHRcdHN0b3BRdWV1ZSggZGF0YVsgaW5kZXggXSApO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0fSBlbHNlIHtcclxuXHRcdFx0XHRmb3IgKCBpbmRleCBpbiBkYXRhICkge1xyXG5cdFx0XHRcdFx0aWYgKCBkYXRhWyBpbmRleCBdICYmIGRhdGFbIGluZGV4IF0uc3RvcCAmJiBycnVuLnRlc3QoIGluZGV4ICkgKSB7XHJcblx0XHRcdFx0XHRcdHN0b3BRdWV1ZSggZGF0YVsgaW5kZXggXSApO1xyXG5cdFx0XHRcdFx0fVxyXG5cdFx0XHRcdH1cclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0Zm9yICggaW5kZXggPSB0aW1lcnMubGVuZ3RoOyBpbmRleC0tOyApIHtcclxuXHRcdFx0XHRpZiAoIHRpbWVyc1sgaW5kZXggXS5lbGVtID09PSB0aGlzICYmXHJcblx0XHRcdFx0XHQoIHR5cGUgPT0gbnVsbCB8fCB0aW1lcnNbIGluZGV4IF0ucXVldWUgPT09IHR5cGUgKSApIHtcclxuXHJcblx0XHRcdFx0XHR0aW1lcnNbIGluZGV4IF0uYW5pbS5zdG9wKCBnb3RvRW5kICk7XHJcblx0XHRcdFx0XHRkZXF1ZXVlID0gZmFsc2U7XHJcblx0XHRcdFx0XHR0aW1lcnMuc3BsaWNlKCBpbmRleCwgMSApO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0Ly8gU3RhcnQgdGhlIG5leHQgaW4gdGhlIHF1ZXVlIGlmIHRoZSBsYXN0IHN0ZXAgd2Fzbid0IGZvcmNlZC5cclxuXHRcdFx0Ly8gVGltZXJzIGN1cnJlbnRseSB3aWxsIGNhbGwgdGhlaXIgY29tcGxldGUgY2FsbGJhY2tzLCB3aGljaFxyXG5cdFx0XHQvLyB3aWxsIGRlcXVldWUgYnV0IG9ubHkgaWYgdGhleSB3ZXJlIGdvdG9FbmQuXHJcblx0XHRcdGlmICggZGVxdWV1ZSB8fCAhZ290b0VuZCApIHtcclxuXHRcdFx0XHRqUXVlcnkuZGVxdWV1ZSggdGhpcywgdHlwZSApO1xyXG5cdFx0XHR9XHJcblx0XHR9ICk7XHJcblx0fSxcclxuXHRmaW5pc2g6IGZ1bmN0aW9uKCB0eXBlICkge1xyXG5cdFx0aWYgKCB0eXBlICE9PSBmYWxzZSApIHtcclxuXHRcdFx0dHlwZSA9IHR5cGUgfHwgXCJmeFwiO1xyXG5cdFx0fVxyXG5cdFx0cmV0dXJuIHRoaXMuZWFjaCggZnVuY3Rpb24oKSB7XHJcblx0XHRcdHZhciBpbmRleCxcclxuXHRcdFx0XHRkYXRhID0gZGF0YVByaXYuZ2V0KCB0aGlzICksXHJcblx0XHRcdFx0cXVldWUgPSBkYXRhWyB0eXBlICsgXCJxdWV1ZVwiIF0sXHJcblx0XHRcdFx0aG9va3MgPSBkYXRhWyB0eXBlICsgXCJxdWV1ZUhvb2tzXCIgXSxcclxuXHRcdFx0XHR0aW1lcnMgPSBqUXVlcnkudGltZXJzLFxyXG5cdFx0XHRcdGxlbmd0aCA9IHF1ZXVlID8gcXVldWUubGVuZ3RoIDogMDtcclxuXHJcblx0XHRcdC8vIEVuYWJsZSBmaW5pc2hpbmcgZmxhZyBvbiBwcml2YXRlIGRhdGFcclxuXHRcdFx0ZGF0YS5maW5pc2ggPSB0cnVlO1xyXG5cclxuXHRcdFx0Ly8gRW1wdHkgdGhlIHF1ZXVlIGZpcnN0XHJcblx0XHRcdGpRdWVyeS5xdWV1ZSggdGhpcywgdHlwZSwgW10gKTtcclxuXHJcblx0XHRcdGlmICggaG9va3MgJiYgaG9va3Muc3RvcCApIHtcclxuXHRcdFx0XHRob29rcy5zdG9wLmNhbGwoIHRoaXMsIHRydWUgKTtcclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0Ly8gTG9vayBmb3IgYW55IGFjdGl2ZSBhbmltYXRpb25zLCBhbmQgZmluaXNoIHRoZW1cclxuXHRcdFx0Zm9yICggaW5kZXggPSB0aW1lcnMubGVuZ3RoOyBpbmRleC0tOyApIHtcclxuXHRcdFx0XHRpZiAoIHRpbWVyc1sgaW5kZXggXS5lbGVtID09PSB0aGlzICYmIHRpbWVyc1sgaW5kZXggXS5xdWV1ZSA9PT0gdHlwZSApIHtcclxuXHRcdFx0XHRcdHRpbWVyc1sgaW5kZXggXS5hbmltLnN0b3AoIHRydWUgKTtcclxuXHRcdFx0XHRcdHRpbWVycy5zcGxpY2UoIGluZGV4LCAxICk7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9XHJcblxyXG5cdFx0XHQvLyBMb29rIGZvciBhbnkgYW5pbWF0aW9ucyBpbiB0aGUgb2xkIHF1ZXVlIGFuZCBmaW5pc2ggdGhlbVxyXG5cdFx0XHRmb3IgKCBpbmRleCA9IDA7IGluZGV4IDwgbGVuZ3RoOyBpbmRleCsrICkge1xyXG5cdFx0XHRcdGlmICggcXVldWVbIGluZGV4IF0gJiYgcXVldWVbIGluZGV4IF0uZmluaXNoICkge1xyXG5cdFx0XHRcdFx0cXVldWVbIGluZGV4IF0uZmluaXNoLmNhbGwoIHRoaXMgKTtcclxuXHRcdFx0XHR9XHJcblx0XHRcdH1cclxuXHJcblx0XHRcdC8vIFR1cm4gb2ZmIGZpbmlzaGluZyBmbGFnXHJcblx0XHRcdGRlbGV0ZSBkYXRhLmZpbmlzaDtcclxuXHRcdH0gKTtcclxuXHR9XHJcbn0gKTtcclxuXHJcbmpRdWVyeS5lYWNoKCBbIFwidG9nZ2xlXCIsIFwic2hvd1wiLCBcImhpZGVcIiBdLCBmdW5jdGlvbiggaSwgbmFtZSApIHtcclxuXHR2YXIgY3NzRm4gPSBqUXVlcnkuZm5bIG5hbWUgXTtcclxuXHRqUXVlcnkuZm5bIG5hbWUgXSA9IGZ1bmN0aW9uKCBzcGVlZCwgZWFzaW5nLCBjYWxsYmFjayApIHtcclxuXHRcdHJldHVybiBzcGVlZCA9PSBudWxsIHx8IHR5cGVvZiBzcGVlZCA9PT0gXCJib29sZWFuXCIgP1xyXG5cdFx0XHRjc3NGbi5hcHBseSggdGhpcywgYXJndW1lbnRzICkgOlxyXG5cdFx0XHR0aGlzLmFuaW1hdGUoIGdlbkZ4KCBuYW1lLCB0cnVlICksIHNwZWVkLCBlYXNpbmcsIGNhbGxiYWNrICk7XHJcblx0fTtcclxufSApO1xyXG5cclxuLy8gR2VuZXJhdGUgc2hvcnRjdXRzIGZvciBjdXN0b20gYW5pbWF0aW9uc1xyXG5qUXVlcnkuZWFjaCgge1xyXG5cdHNsaWRlRG93bjogZ2VuRngoIFwic2hvd1wiICksXHJcblx0c2xpZGVVcDogZ2VuRngoIFwiaGlkZVwiICksXHJcblx0c2xpZGVUb2dnbGU6IGdlbkZ4KCBcInRvZ2dsZVwiICksXHJcblx0ZmFkZUluOiB7IG9wYWNpdHk6IFwic2hvd1wiIH0sXHJcblx0ZmFkZU91dDogeyBvcGFjaXR5OiBcImhpZGVcIiB9LFxyXG5cdGZhZGVUb2dnbGU6IHsgb3BhY2l0eTogXCJ0b2dnbGVcIiB9XHJcbn0sIGZ1bmN0aW9uKCBuYW1lLCBwcm9wcyApIHtcclxuXHRqUXVlcnkuZm5bIG5hbWUgXSA9IGZ1bmN0aW9uKCBzcGVlZCwgZWFzaW5nLCBjYWxsYmFjayApIHtcclxuXHRcdHJldHVybiB0aGlzLmFuaW1hdGUoIHByb3BzLCBzcGVlZCwgZWFzaW5nLCBjYWxsYmFjayApO1xyXG5cdH07XHJcbn0gKTtcclxuXHJcbmpRdWVyeS50aW1lcnMgPSBbXTtcclxualF1ZXJ5LmZ4LnRpY2sgPSBmdW5jdGlvbigpIHtcclxuXHR2YXIgdGltZXIsXHJcblx0XHRpID0gMCxcclxuXHRcdHRpbWVycyA9IGpRdWVyeS50aW1lcnM7XHJcblxyXG5cdGZ4Tm93ID0galF1ZXJ5Lm5vdygpO1xyXG5cclxuXHRmb3IgKCA7IGkgPCB0aW1lcnMubGVuZ3RoOyBpKysgKSB7XHJcblx0XHR0aW1lciA9IHRpbWVyc1sgaSBdO1xyXG5cclxuXHRcdC8vIENoZWNrcyB0aGUgdGltZXIgaGFzIG5vdCBhbHJlYWR5IGJlZW4gcmVtb3ZlZFxyXG5cdFx0aWYgKCAhdGltZXIoKSAmJiB0aW1lcnNbIGkgXSA9PT0gdGltZXIgKSB7XHJcblx0XHRcdHRpbWVycy5zcGxpY2UoIGktLSwgMSApO1xyXG5cdFx0fVxyXG5cdH1cclxuXHJcblx0aWYgKCAhdGltZXJzLmxlbmd0aCApIHtcclxuXHRcdGpRdWVyeS5meC5zdG9wKCk7XHJcblx0fVxyXG5cdGZ4Tm93ID0gdW5kZWZpbmVkO1xyXG59O1xyXG5cclxualF1ZXJ5LmZ4LnRpbWVyID0gZnVuY3Rpb24oIHRpbWVyICkge1xyXG5cdGpRdWVyeS50aW1lcnMucHVzaCggdGltZXIgKTtcclxuXHRpZiAoIHRpbWVyKCkgKSB7XHJcblx0XHRqUXVlcnkuZnguc3RhcnQoKTtcclxuXHR9IGVsc2Uge1xyXG5cdFx0alF1ZXJ5LnRpbWVycy5wb3AoKTtcclxuXHR9XHJcbn07XHJcblxyXG5qUXVlcnkuZnguaW50ZXJ2YWwgPSAxMztcclxualF1ZXJ5LmZ4LnN0YXJ0ID0gZnVuY3Rpb24oKSB7XHJcblx0aWYgKCAhdGltZXJJZCApIHtcclxuXHRcdHRpbWVySWQgPSB3aW5kb3cuc2V0SW50ZXJ2YWwoIGpRdWVyeS5meC50aWNrLCBqUXVlcnkuZnguaW50ZXJ2YWwgKTtcclxuXHR9XHJcbn07XHJcblxyXG5qUXVlcnkuZnguc3RvcCA9IGZ1bmN0aW9uKCkge1xyXG5cdHdpbmRvdy5jbGVhckludGVydmFsKCB0aW1lcklkICk7XHJcblxyXG5cdHRpbWVySWQgPSBudWxsO1xyXG59O1xyXG5cclxualF1ZXJ5LmZ4LnNwZWVkcyA9IHtcclxuXHRzbG93OiA2MDAsXHJcblx0ZmFzdDogMjAwLFxyXG5cclxuXHQvLyBEZWZhdWx0IHNwZWVkXHJcblx0X2RlZmF1bHQ6IDQwMFxyXG59O1xyXG5cclxuXHJcbi8vIEJhc2VkIG9mZiBvZiB0aGUgcGx1Z2luIGJ5IENsaW50IEhlbGZlcnMsIHdpdGggcGVybWlzc2lvbi5cclxuLy8gaHR0cDovL3dlYi5hcmNoaXZlLm9yZy93ZWIvMjAxMDAzMjQwMTQ3NDcvaHR0cDovL2JsaW5kc2lnbmFscy5jb20vaW5kZXgucGhwLzIwMDkvMDcvanF1ZXJ5LWRlbGF5L1xyXG5qUXVlcnkuZm4uZGVsYXkgPSBmdW5jdGlvbiggdGltZSwgdHlwZSApIHtcclxuXHR0aW1lID0galF1ZXJ5LmZ4ID8galF1ZXJ5LmZ4LnNwZWVkc1sgdGltZSBdIHx8IHRpbWUgOiB0aW1lO1xyXG5cdHR5cGUgPSB0eXBlIHx8IFwiZnhcIjtcclxuXHJcblx0cmV0dXJuIHRoaXMucXVldWUoIHR5cGUsIGZ1bmN0aW9uKCBuZXh0LCBob29rcyApIHtcclxuXHRcdHZhciB0aW1lb3V0ID0gd2luZG93LnNldFRpbWVvdXQoIG5leHQsIHRpbWUgKTtcclxuXHRcdGhvb2tzLnN0b3AgPSBmdW5jdGlvbigpIHtcclxuXHRcdFx0d2luZG93LmNsZWFyVGltZW91dCggdGltZW91dCApO1xyXG5cdFx0fTtcclxuXHR9ICk7XHJcbn07XHJcblxyXG5cclxuKCBmdW5jdGlvbigpIHtcclxuXHR2YXIgaW5wdXQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCBcImlucHV0XCIgKSxcclxuXHRcdHNlbGVjdCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoIFwic2VsZWN0XCIgKSxcclxuXHRcdG9wdCA9IHNlbGVjdC5hcHBlbmRDaGlsZCggZG9jdW1lbnQuY3JlYXRlRWxlbWVudCggXCJvcHRpb25cIiApICk7XHJcblxyXG5cdGlucHV0LnR5cGUgPSBcImNoZWNrYm94XCI7XHJcblxyXG5cdC8vIFN1cHBvcnQ6IGlPUzw9NS4xLCBBbmRyb2lkPD00LjIrXHJcblx0Ly8gRGVmYXVsdCB2YWx1ZSBmb3IgYSBjaGVja2JveCBzaG91bGQgYmUgXCJvblwiXHJcblx0c3VwcG9ydC5jaGVja09uID0gaW5wdXQudmFsdWUgIT09IFwiXCI7XHJcblxyXG5cdC8vIFN1cHBvcnQ6IElFPD0xMStcclxuXHQvLyBNdXN0IGFjY2VzcyBzZWxlY3RlZEluZGV4IHRvIG1ha2UgZGVmYXVsdCBvcHRpb25zIHNlbGVjdFxyXG5cdHN1cHBvcnQub3B0U2VsZWN0ZWQgPSBvcHQuc2VsZWN0ZWQ7XHJcblxyXG5cdC8vIFN1cHBvcnQ6IEFuZHJvaWQ8PTIuM1xyXG5cdC8vIE9wdGlvbnMgaW5zaWRlIGRpc2FibGVkIHNlbGVjdHMgYXJlIGluY29ycmVjdGx5IG1hcmtlZCBhcyBkaXNhYmxlZFxyXG5cdHNlbGVjdC5kaXNhYmxlZCA9IHRydWU7XHJcblx0c3VwcG9ydC5vcHREaXNhYmxlZCA9ICFvcHQuZGlzYWJsZWQ7XHJcblxyXG5cdC8vIFN1cHBvcnQ6IElFPD0xMStcclxuXHQvLyBBbiBpbnB1dCBsb3NlcyBpdHMgdmFsdWUgYWZ0ZXIgYmVjb21pbmcgYSByYWRpb1xyXG5cdGlucHV0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCggXCJpbnB1dFwiICk7XHJcblx0aW5wdXQudmFsdWUgPSBcInRcIjtcclxuXHRpbnB1dC50eXBlID0gXCJyYWRpb1wiO1xyXG5cdHN1cHBvcnQucmFkaW9WYWx1ZSA9IGlucHV0LnZhbHVlID09PSBcInRcIjtcclxufSApKCk7XHJcblxyXG5cclxudmFyIGJvb2xIb29rLFxyXG5cdGF0dHJIYW5kbGUgPSBqUXVlcnkuZXhwci5hdHRySGFuZGxlO1xyXG5cclxualF1ZXJ5LmZuLmV4dGVuZCgge1xyXG5cdGF0dHI6IGZ1bmN0aW9uKCBuYW1lLCB2YWx1ZSApIHtcclxuXHRcdHJldHVybiBhY2Nlc3MoIHRoaXMsIGpRdWVyeS5hdHRyLCBuYW1lLCB2YWx1ZSwgYXJndW1lbnRzLmxlbmd0aCA+IDEgKTtcclxuXHR9LFxyXG5cclxuXHRyZW1vdmVBdHRyOiBmdW5jdGlvbiggbmFtZSApIHtcclxuXHRcdHJldHVybiB0aGlzLmVhY2goIGZ1bmN0aW9uKCkge1xyXG5cdFx0XHRqUXVlcnkucmVtb3ZlQXR0ciggdGhpcywgbmFtZSApO1xyXG5cdFx0fSApO1xyXG5cdH1cclxufSApO1xyXG5cclxualF1ZXJ5LmV4dGVuZCgge1xyXG5cdGF0dHI6IGZ1bmN0aW9uKCBlbGVtLCBuYW1lLCB2YWx1ZSApIHtcclxuXHRcdHZhciByZXQsIGhvb2tzLFxyXG5cdFx0XHRuVHlwZSA9IGVsZW0ubm9kZVR5cGU7XHJcblxyXG5cdFx0Ly8gRG9uJ3QgZ2V0L3NldCBhdHRyaWJ1dGVzIG9uIHRleHQsIGNvbW1lbnQgYW5kIGF0dHJpYnV0ZSBub2Rlc1xyXG5cdFx0aWYgKCBuVHlwZSA9PT0gMyB8fCBuVHlwZSA9PT0gOCB8fCBuVHlwZSA9PT0gMiApIHtcclxuXHRcdFx0cmV0dXJuO1xyXG5cdFx0fVxyXG5cclxuXHRcdC8vIEZhbGxiYWNrIHRvIHByb3Agd2hlbiBhdHRyaWJ1dGVzIGFyZSBub3Qgc3VwcG9ydGVkXHJcblx0XHRpZiAoIHR5cGVvZiBlbGVtLmdldEF0dHJpYnV0ZSA9PT0gXCJ1bmRlZmluZWRcIiApIHtcclxuXHRcdFx0cmV0dXJuIGpRdWVyeS5wcm9wKCBlbGVtLCBuYW1lLCB2YWx1ZSApO1xyXG5cdFx0fVxyXG5cclxuXHRcdC8vIEFsbCBhdHRyaWJ1dGVzIGFyZSBsb3dlcmNhc2VcclxuXHRcdC8vIEdyYWIgbmVjZXNzYXJ5IGhvb2sgaWYgb25lIGlzIGRlZmluZWRcclxuXHRcdGlmICggblR5cGUgIT09IDEgfHwgIWpRdWVyeS5pc1hNTERvYyggZWxlbSApICkge1xyXG5cdFx0XHRuYW1lID0gbmFtZS50b0xvd2VyQ2FzZSgpO1xyXG5cdFx0XHRob29rcyA9IGpRdWVyeS5hdHRySG9va3NbIG5hbWUgXSB8fFxyXG5cdFx0XHRcdCggalF1ZXJ5LmV4cHIubWF0Y2guYm9vbC50ZXN0KCBuYW1lICkgPyBib29sSG9vayA6IHVuZGVmaW5lZCApO1xyXG5cdFx0fVxyXG5cclxuXHRcdGlmICggdmFsdWUgIT09IHVuZGVmaW5lZCApIHtcclxuXHRcdFx0aWYgKCB2YWx1ZSA9PT0gbnVsbCApIHtcclxuXHRcdFx0XHRqUXVlcnkucmVtb3ZlQXR0ciggZWxlbSwgbmFtZSApO1xyXG5cdFx0XHRcdHJldHVybjtcclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0aWYgKCBob29rcyAmJiBcInNldFwiIGluIGhvb2tzICYmXHJcblx0XHRcdFx0KCByZXQgPSBob29rcy5zZXQoIGVsZW0sIHZhbHVlLCBuYW1lICkgKSAhPT0gdW5kZWZpbmVkICkge1xyXG5cdFx0XHRcdHJldHVybiByZXQ7XHJcblx0XHRcdH1cclxuXHJcblx0XHRcdGVsZW0uc2V0QXR0cmlidXRlKCBuYW1lLCB2YWx1ZSArIFwiXCIgKTtcclxuXHRcdFx0cmV0dXJuIHZhbHVlO1xyXG5cdFx0fVxyXG5cclxuXHRcdGlmICggaG9va3MgJiYgXCJnZXRcIiBpbiBob29rcyAmJiAoIHJldCA9IGhvb2tzLmdldCggZWxlbSwgbmFtZSApICkgIT09IG51bGwgKSB7XHJcblx0XHRcdHJldHVybiByZXQ7XHJcblx0XHR9XHJcblxyXG5cdFx0cmV0ID0galF1ZXJ5LmZpbmQuYXR0ciggZWxlbSwgbmFtZSApO1xyXG5cclxuXHRcdC8vIE5vbi1leGlzdGVudCBhdHRyaWJ1dGVzIHJldHVybiBudWxsLCB3ZSBub3JtYWxpemUgdG8gdW5kZWZpbmVkXHJcblx0XHRyZXR1cm4gcmV0ID09IG51bGwgPyB1bmRlZmluZWQgOiByZXQ7XHJcblx0fSxcclxuXHJcblx0YXR0ckhvb2tzOiB7XHJcblx0XHR0eXBlOiB7XHJcblx0XHRcdHNldDogZnVuY3Rpb24oIGVsZW0sIHZhbHVlICkge1xyXG5cdFx0XHRcdGlmICggIXN1cHBvcnQucmFkaW9WYWx1ZSAmJiB2YWx1ZSA9PT0gXCJyYWRpb1wiICYmXHJcblx0XHRcdFx0XHRqUXVlcnkubm9kZU5hbWUoIGVsZW0sIFwiaW5wdXRcIiApICkge1xyXG5cdFx0XHRcdFx0dmFyIHZhbCA9IGVsZW0udmFsdWU7XHJcblx0XHRcdFx0XHRlbGVtLnNldEF0dHJpYnV0ZSggXCJ0eXBlXCIsIHZhbHVlICk7XHJcblx0XHRcdFx0XHRpZiAoIHZhbCApIHtcclxuXHRcdFx0XHRcdFx0ZWxlbS52YWx1ZSA9IHZhbDtcclxuXHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdHJldHVybiB2YWx1ZTtcclxuXHRcdFx0XHR9XHJcblx0XHRcdH1cclxuXHRcdH1cclxuXHR9LFxyXG5cclxuXHRyZW1vdmVBdHRyOiBmdW5jdGlvbiggZWxlbSwgdmFsdWUgKSB7XHJcblx0XHR2YXIgbmFtZSwgcHJvcE5hbWUsXHJcblx0XHRcdGkgPSAwLFxyXG5cdFx0XHRhdHRyTmFtZXMgPSB2YWx1ZSAmJiB2YWx1ZS5tYXRjaCggcm5vdHdoaXRlICk7XHJcblxyXG5cdFx0aWYgKCBhdHRyTmFtZXMgJiYgZWxlbS5ub2RlVHlwZSA9PT0gMSApIHtcclxuXHRcdFx0d2hpbGUgKCAoIG5hbWUgPSBhdHRyTmFtZXNbIGkrKyBdICkgKSB7XHJcblx0XHRcdFx0cHJvcE5hbWUgPSBqUXVlcnkucHJvcEZpeFsgbmFtZSBdIHx8IG5hbWU7XHJcblxyXG5cdFx0XHRcdC8vIEJvb2xlYW4gYXR0cmlidXRlcyBnZXQgc3BlY2lhbCB0cmVhdG1lbnQgKCMxMDg3MClcclxuXHRcdFx0XHRpZiAoIGpRdWVyeS5leHByLm1hdGNoLmJvb2wudGVzdCggbmFtZSApICkge1xyXG5cclxuXHRcdFx0XHRcdC8vIFNldCBjb3JyZXNwb25kaW5nIHByb3BlcnR5IHRvIGZhbHNlXHJcblx0XHRcdFx0XHRlbGVtWyBwcm9wTmFtZSBdID0gZmFsc2U7XHJcblx0XHRcdFx0fVxyXG5cclxuXHRcdFx0XHRlbGVtLnJlbW92ZUF0dHJpYnV0ZSggbmFtZSApO1xyXG5cdFx0XHR9XHJcblx0XHR9XHJcblx0fVxyXG59ICk7XHJcblxyXG4vLyBIb29rcyBmb3IgYm9vbGVhbiBhdHRyaWJ1dGVzXHJcbmJvb2xIb29rID0ge1xyXG5cdHNldDogZnVuY3Rpb24oIGVsZW0sIHZhbHVlLCBuYW1lICkge1xyXG5cdFx0aWYgKCB2YWx1ZSA9PT0gZmFsc2UgKSB7XHJcblxyXG5cdFx0XHQvLyBSZW1vdmUgYm9vbGVhbiBhdHRyaWJ1dGVzIHdoZW4gc2V0IHRvIGZhbHNlXHJcblx0XHRcdGpRdWVyeS5yZW1vdmVBdHRyKCBlbGVtLCBuYW1lICk7XHJcblx0XHR9IGVsc2Uge1xyXG5cdFx0XHRlbGVtLnNldEF0dHJpYnV0ZSggbmFtZSwgbmFtZSApO1xyXG5cdFx0fVxyXG5cdFx0cmV0dXJuIG5hbWU7XHJcblx0fVxyXG59O1xyXG5qUXVlcnkuZWFjaCggalF1ZXJ5LmV4cHIubWF0Y2guYm9vbC5zb3VyY2UubWF0Y2goIC9cXHcrL2cgKSwgZnVuY3Rpb24oIGksIG5hbWUgKSB7XHJcblx0dmFyIGdldHRlciA9IGF0dHJIYW5kbGVbIG5hbWUgXSB8fCBqUXVlcnkuZmluZC5hdHRyO1xyXG5cclxuXHRhdHRySGFuZGxlWyBuYW1lIF0gPSBmdW5jdGlvbiggZWxlbSwgbmFtZSwgaXNYTUwgKSB7XHJcblx0XHR2YXIgcmV0LCBoYW5kbGU7XHJcblx0XHRpZiAoICFpc1hNTCApIHtcclxuXHJcblx0XHRcdC8vIEF2b2lkIGFuIGluZmluaXRlIGxvb3AgYnkgdGVtcG9yYXJpbHkgcmVtb3ZpbmcgdGhpcyBmdW5jdGlvbiBmcm9tIHRoZSBnZXR0ZXJcclxuXHRcdFx0aGFuZGxlID0gYXR0ckhhbmRsZVsgbmFtZSBdO1xyXG5cdFx0XHRhdHRySGFuZGxlWyBuYW1lIF0gPSByZXQ7XHJcblx0XHRcdHJldCA9IGdldHRlciggZWxlbSwgbmFtZSwgaXNYTUwgKSAhPSBudWxsID9cclxuXHRcdFx0XHRuYW1lLnRvTG93ZXJDYXNlKCkgOlxyXG5cdFx0XHRcdG51bGw7XHJcblx0XHRcdGF0dHJIYW5kbGVbIG5hbWUgXSA9IGhhbmRsZTtcclxuXHRcdH1cclxuXHRcdHJldHVybiByZXQ7XHJcblx0fTtcclxufSApO1xyXG5cclxuXHJcblxyXG5cclxudmFyIHJmb2N1c2FibGUgPSAvXig/OmlucHV0fHNlbGVjdHx0ZXh0YXJlYXxidXR0b24pJC9pLFxyXG5cdHJjbGlja2FibGUgPSAvXig/OmF8YXJlYSkkL2k7XHJcblxyXG5qUXVlcnkuZm4uZXh0ZW5kKCB7XHJcblx0cHJvcDogZnVuY3Rpb24oIG5hbWUsIHZhbHVlICkge1xyXG5cdFx0cmV0dXJuIGFjY2VzcyggdGhpcywgalF1ZXJ5LnByb3AsIG5hbWUsIHZhbHVlLCBhcmd1bWVudHMubGVuZ3RoID4gMSApO1xyXG5cdH0sXHJcblxyXG5cdHJlbW92ZVByb3A6IGZ1bmN0aW9uKCBuYW1lICkge1xyXG5cdFx0cmV0dXJuIHRoaXMuZWFjaCggZnVuY3Rpb24oKSB7XHJcblx0XHRcdGRlbGV0ZSB0aGlzWyBqUXVlcnkucHJvcEZpeFsgbmFtZSBdIHx8IG5hbWUgXTtcclxuXHRcdH0gKTtcclxuXHR9XHJcbn0gKTtcclxuXHJcbmpRdWVyeS5leHRlbmQoIHtcclxuXHRwcm9wOiBmdW5jdGlvbiggZWxlbSwgbmFtZSwgdmFsdWUgKSB7XHJcblx0XHR2YXIgcmV0LCBob29rcyxcclxuXHRcdFx0blR5cGUgPSBlbGVtLm5vZGVUeXBlO1xyXG5cclxuXHRcdC8vIERvbid0IGdldC9zZXQgcHJvcGVydGllcyBvbiB0ZXh0LCBjb21tZW50IGFuZCBhdHRyaWJ1dGUgbm9kZXNcclxuXHRcdGlmICggblR5cGUgPT09IDMgfHwgblR5cGUgPT09IDggfHwgblR5cGUgPT09IDIgKSB7XHJcblx0XHRcdHJldHVybjtcclxuXHRcdH1cclxuXHJcblx0XHRpZiAoIG5UeXBlICE9PSAxIHx8ICFqUXVlcnkuaXNYTUxEb2MoIGVsZW0gKSApIHtcclxuXHJcblx0XHRcdC8vIEZpeCBuYW1lIGFuZCBhdHRhY2ggaG9va3NcclxuXHRcdFx0bmFtZSA9IGpRdWVyeS5wcm9wRml4WyBuYW1lIF0gfHwgbmFtZTtcclxuXHRcdFx0aG9va3MgPSBqUXVlcnkucHJvcEhvb2tzWyBuYW1lIF07XHJcblx0XHR9XHJcblxyXG5cdFx0aWYgKCB2YWx1ZSAhPT0gdW5kZWZpbmVkICkge1xyXG5cdFx0XHRpZiAoIGhvb2tzICYmIFwic2V0XCIgaW4gaG9va3MgJiZcclxuXHRcdFx0XHQoIHJldCA9IGhvb2tzLnNldCggZWxlbSwgdmFsdWUsIG5hbWUgKSApICE9PSB1bmRlZmluZWQgKSB7XHJcblx0XHRcdFx0cmV0dXJuIHJldDtcclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0cmV0dXJuICggZWxlbVsgbmFtZSBdID0gdmFsdWUgKTtcclxuXHRcdH1cclxuXHJcblx0XHRpZiAoIGhvb2tzICYmIFwiZ2V0XCIgaW4gaG9va3MgJiYgKCByZXQgPSBob29rcy5nZXQoIGVsZW0sIG5hbWUgKSApICE9PSBudWxsICkge1xyXG5cdFx0XHRyZXR1cm4gcmV0O1xyXG5cdFx0fVxyXG5cclxuXHRcdHJldHVybiBlbGVtWyBuYW1lIF07XHJcblx0fSxcclxuXHJcblx0cHJvcEhvb2tzOiB7XHJcblx0XHR0YWJJbmRleDoge1xyXG5cdFx0XHRnZXQ6IGZ1bmN0aW9uKCBlbGVtICkge1xyXG5cclxuXHRcdFx0XHQvLyBlbGVtLnRhYkluZGV4IGRvZXNuJ3QgYWx3YXlzIHJldHVybiB0aGVcclxuXHRcdFx0XHQvLyBjb3JyZWN0IHZhbHVlIHdoZW4gaXQgaGFzbid0IGJlZW4gZXhwbGljaXRseSBzZXRcclxuXHRcdFx0XHQvLyBodHRwOi8vZmx1aWRwcm9qZWN0Lm9yZy9ibG9nLzIwMDgvMDEvMDkvZ2V0dGluZy1zZXR0aW5nLWFuZC1yZW1vdmluZy10YWJpbmRleC12YWx1ZXMtd2l0aC1qYXZhc2NyaXB0L1xyXG5cdFx0XHRcdC8vIFVzZSBwcm9wZXIgYXR0cmlidXRlIHJldHJpZXZhbCgjMTIwNzIpXHJcblx0XHRcdFx0dmFyIHRhYmluZGV4ID0galF1ZXJ5LmZpbmQuYXR0ciggZWxlbSwgXCJ0YWJpbmRleFwiICk7XHJcblxyXG5cdFx0XHRcdHJldHVybiB0YWJpbmRleCA/XHJcblx0XHRcdFx0XHRwYXJzZUludCggdGFiaW5kZXgsIDEwICkgOlxyXG5cdFx0XHRcdFx0cmZvY3VzYWJsZS50ZXN0KCBlbGVtLm5vZGVOYW1lICkgfHxcclxuXHRcdFx0XHRcdFx0cmNsaWNrYWJsZS50ZXN0KCBlbGVtLm5vZGVOYW1lICkgJiYgZWxlbS5ocmVmID9cclxuXHRcdFx0XHRcdFx0XHQwIDpcclxuXHRcdFx0XHRcdFx0XHQtMTtcclxuXHRcdFx0fVxyXG5cdFx0fVxyXG5cdH0sXHJcblxyXG5cdHByb3BGaXg6IHtcclxuXHRcdFwiZm9yXCI6IFwiaHRtbEZvclwiLFxyXG5cdFx0XCJjbGFzc1wiOiBcImNsYXNzTmFtZVwiXHJcblx0fVxyXG59ICk7XHJcblxyXG4vLyBTdXBwb3J0OiBJRSA8PTExIG9ubHlcclxuLy8gQWNjZXNzaW5nIHRoZSBzZWxlY3RlZEluZGV4IHByb3BlcnR5XHJcbi8vIGZvcmNlcyB0aGUgYnJvd3NlciB0byByZXNwZWN0IHNldHRpbmcgc2VsZWN0ZWRcclxuLy8gb24gdGhlIG9wdGlvblxyXG4vLyBUaGUgZ2V0dGVyIGVuc3VyZXMgYSBkZWZhdWx0IG9wdGlvbiBpcyBzZWxlY3RlZFxyXG4vLyB3aGVuIGluIGFuIG9wdGdyb3VwXHJcbmlmICggIXN1cHBvcnQub3B0U2VsZWN0ZWQgKSB7XHJcblx0alF1ZXJ5LnByb3BIb29rcy5zZWxlY3RlZCA9IHtcclxuXHRcdGdldDogZnVuY3Rpb24oIGVsZW0gKSB7XHJcblx0XHRcdHZhciBwYXJlbnQgPSBlbGVtLnBhcmVudE5vZGU7XHJcblx0XHRcdGlmICggcGFyZW50ICYmIHBhcmVudC5wYXJlbnROb2RlICkge1xyXG5cdFx0XHRcdHBhcmVudC5wYXJlbnROb2RlLnNlbGVjdGVkSW5kZXg7XHJcblx0XHRcdH1cclxuXHRcdFx0cmV0dXJuIG51bGw7XHJcblx0XHR9LFxyXG5cdFx0c2V0OiBmdW5jdGlvbiggZWxlbSApIHtcclxuXHRcdFx0dmFyIHBhcmVudCA9IGVsZW0ucGFyZW50Tm9kZTtcclxuXHRcdFx0aWYgKCBwYXJlbnQgKSB7XHJcblx0XHRcdFx0cGFyZW50LnNlbGVjdGVkSW5kZXg7XHJcblxyXG5cdFx0XHRcdGlmICggcGFyZW50LnBhcmVudE5vZGUgKSB7XHJcblx0XHRcdFx0XHRwYXJlbnQucGFyZW50Tm9kZS5zZWxlY3RlZEluZGV4O1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0fVxyXG5cdFx0fVxyXG5cdH07XHJcbn1cclxuXHJcbmpRdWVyeS5lYWNoKCBbXHJcblx0XCJ0YWJJbmRleFwiLFxyXG5cdFwicmVhZE9ubHlcIixcclxuXHRcIm1heExlbmd0aFwiLFxyXG5cdFwiY2VsbFNwYWNpbmdcIixcclxuXHRcImNlbGxQYWRkaW5nXCIsXHJcblx0XCJyb3dTcGFuXCIsXHJcblx0XCJjb2xTcGFuXCIsXHJcblx0XCJ1c2VNYXBcIixcclxuXHRcImZyYW1lQm9yZGVyXCIsXHJcblx0XCJjb250ZW50RWRpdGFibGVcIlxyXG5dLCBmdW5jdGlvbigpIHtcclxuXHRqUXVlcnkucHJvcEZpeFsgdGhpcy50b0xvd2VyQ2FzZSgpIF0gPSB0aGlzO1xyXG59ICk7XHJcblxyXG5cclxuXHJcblxyXG52YXIgcmNsYXNzID0gL1tcXHRcXHJcXG5cXGZdL2c7XHJcblxyXG5mdW5jdGlvbiBnZXRDbGFzcyggZWxlbSApIHtcclxuXHRyZXR1cm4gZWxlbS5nZXRBdHRyaWJ1dGUgJiYgZWxlbS5nZXRBdHRyaWJ1dGUoIFwiY2xhc3NcIiApIHx8IFwiXCI7XHJcbn1cclxuXHJcbmpRdWVyeS5mbi5leHRlbmQoIHtcclxuXHRhZGRDbGFzczogZnVuY3Rpb24oIHZhbHVlICkge1xyXG5cdFx0dmFyIGNsYXNzZXMsIGVsZW0sIGN1ciwgY3VyVmFsdWUsIGNsYXp6LCBqLCBmaW5hbFZhbHVlLFxyXG5cdFx0XHRpID0gMDtcclxuXHJcblx0XHRpZiAoIGpRdWVyeS5pc0Z1bmN0aW9uKCB2YWx1ZSApICkge1xyXG5cdFx0XHRyZXR1cm4gdGhpcy5lYWNoKCBmdW5jdGlvbiggaiApIHtcclxuXHRcdFx0XHRqUXVlcnkoIHRoaXMgKS5hZGRDbGFzcyggdmFsdWUuY2FsbCggdGhpcywgaiwgZ2V0Q2xhc3MoIHRoaXMgKSApICk7XHJcblx0XHRcdH0gKTtcclxuXHRcdH1cclxuXHJcblx0XHRpZiAoIHR5cGVvZiB2YWx1ZSA9PT0gXCJzdHJpbmdcIiAmJiB2YWx1ZSApIHtcclxuXHRcdFx0Y2xhc3NlcyA9IHZhbHVlLm1hdGNoKCBybm90d2hpdGUgKSB8fCBbXTtcclxuXHJcblx0XHRcdHdoaWxlICggKCBlbGVtID0gdGhpc1sgaSsrIF0gKSApIHtcclxuXHRcdFx0XHRjdXJWYWx1ZSA9IGdldENsYXNzKCBlbGVtICk7XHJcblx0XHRcdFx0Y3VyID0gZWxlbS5ub2RlVHlwZSA9PT0gMSAmJlxyXG5cdFx0XHRcdFx0KCBcIiBcIiArIGN1clZhbHVlICsgXCIgXCIgKS5yZXBsYWNlKCByY2xhc3MsIFwiIFwiICk7XHJcblxyXG5cdFx0XHRcdGlmICggY3VyICkge1xyXG5cdFx0XHRcdFx0aiA9IDA7XHJcblx0XHRcdFx0XHR3aGlsZSAoICggY2xhenogPSBjbGFzc2VzWyBqKysgXSApICkge1xyXG5cdFx0XHRcdFx0XHRpZiAoIGN1ci5pbmRleE9mKCBcIiBcIiArIGNsYXp6ICsgXCIgXCIgKSA8IDAgKSB7XHJcblx0XHRcdFx0XHRcdFx0Y3VyICs9IGNsYXp6ICsgXCIgXCI7XHJcblx0XHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdH1cclxuXHJcblx0XHRcdFx0XHQvLyBPbmx5IGFzc2lnbiBpZiBkaWZmZXJlbnQgdG8gYXZvaWQgdW5uZWVkZWQgcmVuZGVyaW5nLlxyXG5cdFx0XHRcdFx0ZmluYWxWYWx1ZSA9IGpRdWVyeS50cmltKCBjdXIgKTtcclxuXHRcdFx0XHRcdGlmICggY3VyVmFsdWUgIT09IGZpbmFsVmFsdWUgKSB7XHJcblx0XHRcdFx0XHRcdGVsZW0uc2V0QXR0cmlidXRlKCBcImNsYXNzXCIsIGZpbmFsVmFsdWUgKTtcclxuXHRcdFx0XHRcdH1cclxuXHRcdFx0XHR9XHJcblx0XHRcdH1cclxuXHRcdH1cclxuXHJcblx0XHRyZXR1cm4gdGhpcztcclxuXHR9LFxyXG5cclxuXHRyZW1vdmVDbGFzczogZnVuY3Rpb24oIHZhbHVlICkge1xyXG5cdFx0dmFyIGNsYXNzZXMsIGVsZW0sIGN1ciwgY3VyVmFsdWUsIGNsYXp6LCBqLCBmaW5hbFZhbHVlLFxyXG5cdFx0XHRpID0gMDtcclxuXHJcblx0XHRpZiAoIGpRdWVyeS5pc0Z1bmN0aW9uKCB2YWx1ZSApICkge1xyXG5cdFx0XHRyZXR1cm4gdGhpcy5lYWNoKCBmdW5jdGlvbiggaiApIHtcclxuXHRcdFx0XHRqUXVlcnkoIHRoaXMgKS5yZW1vdmVDbGFzcyggdmFsdWUuY2FsbCggdGhpcywgaiwgZ2V0Q2xhc3MoIHRoaXMgKSApICk7XHJcblx0XHRcdH0gKTtcclxuXHRcdH1cclxuXHJcblx0XHRpZiAoICFhcmd1bWVudHMubGVuZ3RoICkge1xyXG5cdFx0XHRyZXR1cm4gdGhpcy5hdHRyKCBcImNsYXNzXCIsIFwiXCIgKTtcclxuXHRcdH1cclxuXHJcblx0XHRpZiAoIHR5cGVvZiB2YWx1ZSA9PT0gXCJzdHJpbmdcIiAmJiB2YWx1ZSApIHtcclxuXHRcdFx0Y2xhc3NlcyA9IHZhbHVlLm1hdGNoKCBybm90d2hpdGUgKSB8fCBbXTtcclxuXHJcblx0XHRcdHdoaWxlICggKCBlbGVtID0gdGhpc1sgaSsrIF0gKSApIHtcclxuXHRcdFx0XHRjdXJWYWx1ZSA9IGdldENsYXNzKCBlbGVtICk7XHJcblxyXG5cdFx0XHRcdC8vIFRoaXMgZXhwcmVzc2lvbiBpcyBoZXJlIGZvciBiZXR0ZXIgY29tcHJlc3NpYmlsaXR5IChzZWUgYWRkQ2xhc3MpXHJcblx0XHRcdFx0Y3VyID0gZWxlbS5ub2RlVHlwZSA9PT0gMSAmJlxyXG5cdFx0XHRcdFx0KCBcIiBcIiArIGN1clZhbHVlICsgXCIgXCIgKS5yZXBsYWNlKCByY2xhc3MsIFwiIFwiICk7XHJcblxyXG5cdFx0XHRcdGlmICggY3VyICkge1xyXG5cdFx0XHRcdFx0aiA9IDA7XHJcblx0XHRcdFx0XHR3aGlsZSAoICggY2xhenogPSBjbGFzc2VzWyBqKysgXSApICkge1xyXG5cclxuXHRcdFx0XHRcdFx0Ly8gUmVtb3ZlICphbGwqIGluc3RhbmNlc1xyXG5cdFx0XHRcdFx0XHR3aGlsZSAoIGN1ci5pbmRleE9mKCBcIiBcIiArIGNsYXp6ICsgXCIgXCIgKSA+IC0xICkge1xyXG5cdFx0XHRcdFx0XHRcdGN1ciA9IGN1ci5yZXBsYWNlKCBcIiBcIiArIGNsYXp6ICsgXCIgXCIsIFwiIFwiICk7XHJcblx0XHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdH1cclxuXHJcblx0XHRcdFx0XHQvLyBPbmx5IGFzc2lnbiBpZiBkaWZmZXJlbnQgdG8gYXZvaWQgdW5uZWVkZWQgcmVuZGVyaW5nLlxyXG5cdFx0XHRcdFx0ZmluYWxWYWx1ZSA9IGpRdWVyeS50cmltKCBjdXIgKTtcclxuXHRcdFx0XHRcdGlmICggY3VyVmFsdWUgIT09IGZpbmFsVmFsdWUgKSB7XHJcblx0XHRcdFx0XHRcdGVsZW0uc2V0QXR0cmlidXRlKCBcImNsYXNzXCIsIGZpbmFsVmFsdWUgKTtcclxuXHRcdFx0XHRcdH1cclxuXHRcdFx0XHR9XHJcblx0XHRcdH1cclxuXHRcdH1cclxuXHJcblx0XHRyZXR1cm4gdGhpcztcclxuXHR9LFxyXG5cclxuXHR0b2dnbGVDbGFzczogZnVuY3Rpb24oIHZhbHVlLCBzdGF0ZVZhbCApIHtcclxuXHRcdHZhciB0eXBlID0gdHlwZW9mIHZhbHVlO1xyXG5cclxuXHRcdGlmICggdHlwZW9mIHN0YXRlVmFsID09PSBcImJvb2xlYW5cIiAmJiB0eXBlID09PSBcInN0cmluZ1wiICkge1xyXG5cdFx0XHRyZXR1cm4gc3RhdGVWYWwgPyB0aGlzLmFkZENsYXNzKCB2YWx1ZSApIDogdGhpcy5yZW1vdmVDbGFzcyggdmFsdWUgKTtcclxuXHRcdH1cclxuXHJcblx0XHRpZiAoIGpRdWVyeS5pc0Z1bmN0aW9uKCB2YWx1ZSApICkge1xyXG5cdFx0XHRyZXR1cm4gdGhpcy5lYWNoKCBmdW5jdGlvbiggaSApIHtcclxuXHRcdFx0XHRqUXVlcnkoIHRoaXMgKS50b2dnbGVDbGFzcyhcclxuXHRcdFx0XHRcdHZhbHVlLmNhbGwoIHRoaXMsIGksIGdldENsYXNzKCB0aGlzICksIHN0YXRlVmFsICksXHJcblx0XHRcdFx0XHRzdGF0ZVZhbFxyXG5cdFx0XHRcdCk7XHJcblx0XHRcdH0gKTtcclxuXHRcdH1cclxuXHJcblx0XHRyZXR1cm4gdGhpcy5lYWNoKCBmdW5jdGlvbigpIHtcclxuXHRcdFx0dmFyIGNsYXNzTmFtZSwgaSwgc2VsZiwgY2xhc3NOYW1lcztcclxuXHJcblx0XHRcdGlmICggdHlwZSA9PT0gXCJzdHJpbmdcIiApIHtcclxuXHJcblx0XHRcdFx0Ly8gVG9nZ2xlIGluZGl2aWR1YWwgY2xhc3MgbmFtZXNcclxuXHRcdFx0XHRpID0gMDtcclxuXHRcdFx0XHRzZWxmID0galF1ZXJ5KCB0aGlzICk7XHJcblx0XHRcdFx0Y2xhc3NOYW1lcyA9IHZhbHVlLm1hdGNoKCBybm90d2hpdGUgKSB8fCBbXTtcclxuXHJcblx0XHRcdFx0d2hpbGUgKCAoIGNsYXNzTmFtZSA9IGNsYXNzTmFtZXNbIGkrKyBdICkgKSB7XHJcblxyXG5cdFx0XHRcdFx0Ly8gQ2hlY2sgZWFjaCBjbGFzc05hbWUgZ2l2ZW4sIHNwYWNlIHNlcGFyYXRlZCBsaXN0XHJcblx0XHRcdFx0XHRpZiAoIHNlbGYuaGFzQ2xhc3MoIGNsYXNzTmFtZSApICkge1xyXG5cdFx0XHRcdFx0XHRzZWxmLnJlbW92ZUNsYXNzKCBjbGFzc05hbWUgKTtcclxuXHRcdFx0XHRcdH0gZWxzZSB7XHJcblx0XHRcdFx0XHRcdHNlbGYuYWRkQ2xhc3MoIGNsYXNzTmFtZSApO1xyXG5cdFx0XHRcdFx0fVxyXG5cdFx0XHRcdH1cclxuXHJcblx0XHRcdC8vIFRvZ2dsZSB3aG9sZSBjbGFzcyBuYW1lXHJcblx0XHRcdH0gZWxzZSBpZiAoIHZhbHVlID09PSB1bmRlZmluZWQgfHwgdHlwZSA9PT0gXCJib29sZWFuXCIgKSB7XHJcblx0XHRcdFx0Y2xhc3NOYW1lID0gZ2V0Q2xhc3MoIHRoaXMgKTtcclxuXHRcdFx0XHRpZiAoIGNsYXNzTmFtZSApIHtcclxuXHJcblx0XHRcdFx0XHQvLyBTdG9yZSBjbGFzc05hbWUgaWYgc2V0XHJcblx0XHRcdFx0XHRkYXRhUHJpdi5zZXQoIHRoaXMsIFwiX19jbGFzc05hbWVfX1wiLCBjbGFzc05hbWUgKTtcclxuXHRcdFx0XHR9XHJcblxyXG5cdFx0XHRcdC8vIElmIHRoZSBlbGVtZW50IGhhcyBhIGNsYXNzIG5hbWUgb3IgaWYgd2UncmUgcGFzc2VkIGBmYWxzZWAsXHJcblx0XHRcdFx0Ly8gdGhlbiByZW1vdmUgdGhlIHdob2xlIGNsYXNzbmFtZSAoaWYgdGhlcmUgd2FzIG9uZSwgdGhlIGFib3ZlIHNhdmVkIGl0KS5cclxuXHRcdFx0XHQvLyBPdGhlcndpc2UgYnJpbmcgYmFjayB3aGF0ZXZlciB3YXMgcHJldmlvdXNseSBzYXZlZCAoaWYgYW55dGhpbmcpLFxyXG5cdFx0XHRcdC8vIGZhbGxpbmcgYmFjayB0byB0aGUgZW1wdHkgc3RyaW5nIGlmIG5vdGhpbmcgd2FzIHN0b3JlZC5cclxuXHRcdFx0XHRpZiAoIHRoaXMuc2V0QXR0cmlidXRlICkge1xyXG5cdFx0XHRcdFx0dGhpcy5zZXRBdHRyaWJ1dGUoIFwiY2xhc3NcIixcclxuXHRcdFx0XHRcdFx0Y2xhc3NOYW1lIHx8IHZhbHVlID09PSBmYWxzZSA/XHJcblx0XHRcdFx0XHRcdFwiXCIgOlxyXG5cdFx0XHRcdFx0XHRkYXRhUHJpdi5nZXQoIHRoaXMsIFwiX19jbGFzc05hbWVfX1wiICkgfHwgXCJcIlxyXG5cdFx0XHRcdFx0KTtcclxuXHRcdFx0XHR9XHJcblx0XHRcdH1cclxuXHRcdH0gKTtcclxuXHR9LFxyXG5cclxuXHRoYXNDbGFzczogZnVuY3Rpb24oIHNlbGVjdG9yICkge1xyXG5cdFx0dmFyIGNsYXNzTmFtZSwgZWxlbSxcclxuXHRcdFx0aSA9IDA7XHJcblxyXG5cdFx0Y2xhc3NOYW1lID0gXCIgXCIgKyBzZWxlY3RvciArIFwiIFwiO1xyXG5cdFx0d2hpbGUgKCAoIGVsZW0gPSB0aGlzWyBpKysgXSApICkge1xyXG5cdFx0XHRpZiAoIGVsZW0ubm9kZVR5cGUgPT09IDEgJiZcclxuXHRcdFx0XHQoIFwiIFwiICsgZ2V0Q2xhc3MoIGVsZW0gKSArIFwiIFwiICkucmVwbGFjZSggcmNsYXNzLCBcIiBcIiApXHJcblx0XHRcdFx0XHQuaW5kZXhPZiggY2xhc3NOYW1lICkgPiAtMVxyXG5cdFx0XHQpIHtcclxuXHRcdFx0XHRyZXR1cm4gdHJ1ZTtcclxuXHRcdFx0fVxyXG5cdFx0fVxyXG5cclxuXHRcdHJldHVybiBmYWxzZTtcclxuXHR9XHJcbn0gKTtcclxuXHJcblxyXG5cclxuXHJcbnZhciBycmV0dXJuID0gL1xcci9nLFxyXG5cdHJzcGFjZXMgPSAvW1xceDIwXFx0XFxyXFxuXFxmXSsvZztcclxuXHJcbmpRdWVyeS5mbi5leHRlbmQoIHtcclxuXHR2YWw6IGZ1bmN0aW9uKCB2YWx1ZSApIHtcclxuXHRcdHZhciBob29rcywgcmV0LCBpc0Z1bmN0aW9uLFxyXG5cdFx0XHRlbGVtID0gdGhpc1sgMCBdO1xyXG5cclxuXHRcdGlmICggIWFyZ3VtZW50cy5sZW5ndGggKSB7XHJcblx0XHRcdGlmICggZWxlbSApIHtcclxuXHRcdFx0XHRob29rcyA9IGpRdWVyeS52YWxIb29rc1sgZWxlbS50eXBlIF0gfHxcclxuXHRcdFx0XHRcdGpRdWVyeS52YWxIb29rc1sgZWxlbS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpIF07XHJcblxyXG5cdFx0XHRcdGlmICggaG9va3MgJiZcclxuXHRcdFx0XHRcdFwiZ2V0XCIgaW4gaG9va3MgJiZcclxuXHRcdFx0XHRcdCggcmV0ID0gaG9va3MuZ2V0KCBlbGVtLCBcInZhbHVlXCIgKSApICE9PSB1bmRlZmluZWRcclxuXHRcdFx0XHQpIHtcclxuXHRcdFx0XHRcdHJldHVybiByZXQ7XHJcblx0XHRcdFx0fVxyXG5cclxuXHRcdFx0XHRyZXQgPSBlbGVtLnZhbHVlO1xyXG5cclxuXHRcdFx0XHRyZXR1cm4gdHlwZW9mIHJldCA9PT0gXCJzdHJpbmdcIiA/XHJcblxyXG5cdFx0XHRcdFx0Ly8gSGFuZGxlIG1vc3QgY29tbW9uIHN0cmluZyBjYXNlc1xyXG5cdFx0XHRcdFx0cmV0LnJlcGxhY2UoIHJyZXR1cm4sIFwiXCIgKSA6XHJcblxyXG5cdFx0XHRcdFx0Ly8gSGFuZGxlIGNhc2VzIHdoZXJlIHZhbHVlIGlzIG51bGwvdW5kZWYgb3IgbnVtYmVyXHJcblx0XHRcdFx0XHRyZXQgPT0gbnVsbCA/IFwiXCIgOiByZXQ7XHJcblx0XHRcdH1cclxuXHJcblx0XHRcdHJldHVybjtcclxuXHRcdH1cclxuXHJcblx0XHRpc0Z1bmN0aW9uID0galF1ZXJ5LmlzRnVuY3Rpb24oIHZhbHVlICk7XHJcblxyXG5cdFx0cmV0dXJuIHRoaXMuZWFjaCggZnVuY3Rpb24oIGkgKSB7XHJcblx0XHRcdHZhciB2YWw7XHJcblxyXG5cdFx0XHRpZiAoIHRoaXMubm9kZVR5cGUgIT09IDEgKSB7XHJcblx0XHRcdFx0cmV0dXJuO1xyXG5cdFx0XHR9XHJcblxyXG5cdFx0XHRpZiAoIGlzRnVuY3Rpb24gKSB7XHJcblx0XHRcdFx0dmFsID0gdmFsdWUuY2FsbCggdGhpcywgaSwgalF1ZXJ5KCB0aGlzICkudmFsKCkgKTtcclxuXHRcdFx0fSBlbHNlIHtcclxuXHRcdFx0XHR2YWwgPSB2YWx1ZTtcclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0Ly8gVHJlYXQgbnVsbC91bmRlZmluZWQgYXMgXCJcIjsgY29udmVydCBudW1iZXJzIHRvIHN0cmluZ1xyXG5cdFx0XHRpZiAoIHZhbCA9PSBudWxsICkge1xyXG5cdFx0XHRcdHZhbCA9IFwiXCI7XHJcblxyXG5cdFx0XHR9IGVsc2UgaWYgKCB0eXBlb2YgdmFsID09PSBcIm51bWJlclwiICkge1xyXG5cdFx0XHRcdHZhbCArPSBcIlwiO1xyXG5cclxuXHRcdFx0fSBlbHNlIGlmICggalF1ZXJ5LmlzQXJyYXkoIHZhbCApICkge1xyXG5cdFx0XHRcdHZhbCA9IGpRdWVyeS5tYXAoIHZhbCwgZnVuY3Rpb24oIHZhbHVlICkge1xyXG5cdFx0XHRcdFx0cmV0dXJuIHZhbHVlID09IG51bGwgPyBcIlwiIDogdmFsdWUgKyBcIlwiO1xyXG5cdFx0XHRcdH0gKTtcclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0aG9va3MgPSBqUXVlcnkudmFsSG9va3NbIHRoaXMudHlwZSBdIHx8IGpRdWVyeS52YWxIb29rc1sgdGhpcy5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpIF07XHJcblxyXG5cdFx0XHQvLyBJZiBzZXQgcmV0dXJucyB1bmRlZmluZWQsIGZhbGwgYmFjayB0byBub3JtYWwgc2V0dGluZ1xyXG5cdFx0XHRpZiAoICFob29rcyB8fCAhKCBcInNldFwiIGluIGhvb2tzICkgfHwgaG9va3Muc2V0KCB0aGlzLCB2YWwsIFwidmFsdWVcIiApID09PSB1bmRlZmluZWQgKSB7XHJcblx0XHRcdFx0dGhpcy52YWx1ZSA9IHZhbDtcclxuXHRcdFx0fVxyXG5cdFx0fSApO1xyXG5cdH1cclxufSApO1xyXG5cclxualF1ZXJ5LmV4dGVuZCgge1xyXG5cdHZhbEhvb2tzOiB7XHJcblx0XHRvcHRpb246IHtcclxuXHRcdFx0Z2V0OiBmdW5jdGlvbiggZWxlbSApIHtcclxuXHJcblx0XHRcdFx0dmFyIHZhbCA9IGpRdWVyeS5maW5kLmF0dHIoIGVsZW0sIFwidmFsdWVcIiApO1xyXG5cdFx0XHRcdHJldHVybiB2YWwgIT0gbnVsbCA/XHJcblx0XHRcdFx0XHR2YWwgOlxyXG5cclxuXHRcdFx0XHRcdC8vIFN1cHBvcnQ6IElFMTAtMTErXHJcblx0XHRcdFx0XHQvLyBvcHRpb24udGV4dCB0aHJvd3MgZXhjZXB0aW9ucyAoIzE0Njg2LCAjMTQ4NTgpXHJcblx0XHRcdFx0XHQvLyBTdHJpcCBhbmQgY29sbGFwc2Ugd2hpdGVzcGFjZVxyXG5cdFx0XHRcdFx0Ly8gaHR0cHM6Ly9odG1sLnNwZWMud2hhdHdnLm9yZy8jc3RyaXAtYW5kLWNvbGxhcHNlLXdoaXRlc3BhY2VcclxuXHRcdFx0XHRcdGpRdWVyeS50cmltKCBqUXVlcnkudGV4dCggZWxlbSApICkucmVwbGFjZSggcnNwYWNlcywgXCIgXCIgKTtcclxuXHRcdFx0fVxyXG5cdFx0fSxcclxuXHRcdHNlbGVjdDoge1xyXG5cdFx0XHRnZXQ6IGZ1bmN0aW9uKCBlbGVtICkge1xyXG5cdFx0XHRcdHZhciB2YWx1ZSwgb3B0aW9uLFxyXG5cdFx0XHRcdFx0b3B0aW9ucyA9IGVsZW0ub3B0aW9ucyxcclxuXHRcdFx0XHRcdGluZGV4ID0gZWxlbS5zZWxlY3RlZEluZGV4LFxyXG5cdFx0XHRcdFx0b25lID0gZWxlbS50eXBlID09PSBcInNlbGVjdC1vbmVcIiB8fCBpbmRleCA8IDAsXHJcblx0XHRcdFx0XHR2YWx1ZXMgPSBvbmUgPyBudWxsIDogW10sXHJcblx0XHRcdFx0XHRtYXggPSBvbmUgPyBpbmRleCArIDEgOiBvcHRpb25zLmxlbmd0aCxcclxuXHRcdFx0XHRcdGkgPSBpbmRleCA8IDAgP1xyXG5cdFx0XHRcdFx0XHRtYXggOlxyXG5cdFx0XHRcdFx0XHRvbmUgPyBpbmRleCA6IDA7XHJcblxyXG5cdFx0XHRcdC8vIExvb3AgdGhyb3VnaCBhbGwgdGhlIHNlbGVjdGVkIG9wdGlvbnNcclxuXHRcdFx0XHRmb3IgKCA7IGkgPCBtYXg7IGkrKyApIHtcclxuXHRcdFx0XHRcdG9wdGlvbiA9IG9wdGlvbnNbIGkgXTtcclxuXHJcblx0XHRcdFx0XHQvLyBJRTgtOSBkb2Vzbid0IHVwZGF0ZSBzZWxlY3RlZCBhZnRlciBmb3JtIHJlc2V0ICgjMjU1MSlcclxuXHRcdFx0XHRcdGlmICggKCBvcHRpb24uc2VsZWN0ZWQgfHwgaSA9PT0gaW5kZXggKSAmJlxyXG5cclxuXHRcdFx0XHRcdFx0XHQvLyBEb24ndCByZXR1cm4gb3B0aW9ucyB0aGF0IGFyZSBkaXNhYmxlZCBvciBpbiBhIGRpc2FibGVkIG9wdGdyb3VwXHJcblx0XHRcdFx0XHRcdFx0KCBzdXBwb3J0Lm9wdERpc2FibGVkID9cclxuXHRcdFx0XHRcdFx0XHRcdCFvcHRpb24uZGlzYWJsZWQgOiBvcHRpb24uZ2V0QXR0cmlidXRlKCBcImRpc2FibGVkXCIgKSA9PT0gbnVsbCApICYmXHJcblx0XHRcdFx0XHRcdFx0KCAhb3B0aW9uLnBhcmVudE5vZGUuZGlzYWJsZWQgfHxcclxuXHRcdFx0XHRcdFx0XHRcdCFqUXVlcnkubm9kZU5hbWUoIG9wdGlvbi5wYXJlbnROb2RlLCBcIm9wdGdyb3VwXCIgKSApICkge1xyXG5cclxuXHRcdFx0XHRcdFx0Ly8gR2V0IHRoZSBzcGVjaWZpYyB2YWx1ZSBmb3IgdGhlIG9wdGlvblxyXG5cdFx0XHRcdFx0XHR2YWx1ZSA9IGpRdWVyeSggb3B0aW9uICkudmFsKCk7XHJcblxyXG5cdFx0XHRcdFx0XHQvLyBXZSBkb24ndCBuZWVkIGFuIGFycmF5IGZvciBvbmUgc2VsZWN0c1xyXG5cdFx0XHRcdFx0XHRpZiAoIG9uZSApIHtcclxuXHRcdFx0XHRcdFx0XHRyZXR1cm4gdmFsdWU7XHJcblx0XHRcdFx0XHRcdH1cclxuXHJcblx0XHRcdFx0XHRcdC8vIE11bHRpLVNlbGVjdHMgcmV0dXJuIGFuIGFycmF5XHJcblx0XHRcdFx0XHRcdHZhbHVlcy5wdXNoKCB2YWx1ZSApO1xyXG5cdFx0XHRcdFx0fVxyXG5cdFx0XHRcdH1cclxuXHJcblx0XHRcdFx0cmV0dXJuIHZhbHVlcztcclxuXHRcdFx0fSxcclxuXHJcblx0XHRcdHNldDogZnVuY3Rpb24oIGVsZW0sIHZhbHVlICkge1xyXG5cdFx0XHRcdHZhciBvcHRpb25TZXQsIG9wdGlvbixcclxuXHRcdFx0XHRcdG9wdGlvbnMgPSBlbGVtLm9wdGlvbnMsXHJcblx0XHRcdFx0XHR2YWx1ZXMgPSBqUXVlcnkubWFrZUFycmF5KCB2YWx1ZSApLFxyXG5cdFx0XHRcdFx0aSA9IG9wdGlvbnMubGVuZ3RoO1xyXG5cclxuXHRcdFx0XHR3aGlsZSAoIGktLSApIHtcclxuXHRcdFx0XHRcdG9wdGlvbiA9IG9wdGlvbnNbIGkgXTtcclxuXHRcdFx0XHRcdGlmICggb3B0aW9uLnNlbGVjdGVkID1cclxuXHRcdFx0XHRcdFx0alF1ZXJ5LmluQXJyYXkoIGpRdWVyeS52YWxIb29rcy5vcHRpb24uZ2V0KCBvcHRpb24gKSwgdmFsdWVzICkgPiAtMVxyXG5cdFx0XHRcdFx0KSB7XHJcblx0XHRcdFx0XHRcdG9wdGlvblNldCA9IHRydWU7XHJcblx0XHRcdFx0XHR9XHJcblx0XHRcdFx0fVxyXG5cclxuXHRcdFx0XHQvLyBGb3JjZSBicm93c2VycyB0byBiZWhhdmUgY29uc2lzdGVudGx5IHdoZW4gbm9uLW1hdGNoaW5nIHZhbHVlIGlzIHNldFxyXG5cdFx0XHRcdGlmICggIW9wdGlvblNldCApIHtcclxuXHRcdFx0XHRcdGVsZW0uc2VsZWN0ZWRJbmRleCA9IC0xO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0XHRyZXR1cm4gdmFsdWVzO1xyXG5cdFx0XHR9XHJcblx0XHR9XHJcblx0fVxyXG59ICk7XHJcblxyXG4vLyBSYWRpb3MgYW5kIGNoZWNrYm94ZXMgZ2V0dGVyL3NldHRlclxyXG5qUXVlcnkuZWFjaCggWyBcInJhZGlvXCIsIFwiY2hlY2tib3hcIiBdLCBmdW5jdGlvbigpIHtcclxuXHRqUXVlcnkudmFsSG9va3NbIHRoaXMgXSA9IHtcclxuXHRcdHNldDogZnVuY3Rpb24oIGVsZW0sIHZhbHVlICkge1xyXG5cdFx0XHRpZiAoIGpRdWVyeS5pc0FycmF5KCB2YWx1ZSApICkge1xyXG5cdFx0XHRcdHJldHVybiAoIGVsZW0uY2hlY2tlZCA9IGpRdWVyeS5pbkFycmF5KCBqUXVlcnkoIGVsZW0gKS52YWwoKSwgdmFsdWUgKSA+IC0xICk7XHJcblx0XHRcdH1cclxuXHRcdH1cclxuXHR9O1xyXG5cdGlmICggIXN1cHBvcnQuY2hlY2tPbiApIHtcclxuXHRcdGpRdWVyeS52YWxIb29rc1sgdGhpcyBdLmdldCA9IGZ1bmN0aW9uKCBlbGVtICkge1xyXG5cdFx0XHRyZXR1cm4gZWxlbS5nZXRBdHRyaWJ1dGUoIFwidmFsdWVcIiApID09PSBudWxsID8gXCJvblwiIDogZWxlbS52YWx1ZTtcclxuXHRcdH07XHJcblx0fVxyXG59ICk7XHJcblxyXG5cclxuXHJcblxyXG4vLyBSZXR1cm4galF1ZXJ5IGZvciBhdHRyaWJ1dGVzLW9ubHkgaW5jbHVzaW9uXHJcblxyXG5cclxudmFyIHJmb2N1c01vcnBoID0gL14oPzpmb2N1c2luZm9jdXN8Zm9jdXNvdXRibHVyKSQvO1xyXG5cclxualF1ZXJ5LmV4dGVuZCggalF1ZXJ5LmV2ZW50LCB7XHJcblxyXG5cdHRyaWdnZXI6IGZ1bmN0aW9uKCBldmVudCwgZGF0YSwgZWxlbSwgb25seUhhbmRsZXJzICkge1xyXG5cclxuXHRcdHZhciBpLCBjdXIsIHRtcCwgYnViYmxlVHlwZSwgb250eXBlLCBoYW5kbGUsIHNwZWNpYWwsXHJcblx0XHRcdGV2ZW50UGF0aCA9IFsgZWxlbSB8fCBkb2N1bWVudCBdLFxyXG5cdFx0XHR0eXBlID0gaGFzT3duLmNhbGwoIGV2ZW50LCBcInR5cGVcIiApID8gZXZlbnQudHlwZSA6IGV2ZW50LFxyXG5cdFx0XHRuYW1lc3BhY2VzID0gaGFzT3duLmNhbGwoIGV2ZW50LCBcIm5hbWVzcGFjZVwiICkgPyBldmVudC5uYW1lc3BhY2Uuc3BsaXQoIFwiLlwiICkgOiBbXTtcclxuXHJcblx0XHRjdXIgPSB0bXAgPSBlbGVtID0gZWxlbSB8fCBkb2N1bWVudDtcclxuXHJcblx0XHQvLyBEb24ndCBkbyBldmVudHMgb24gdGV4dCBhbmQgY29tbWVudCBub2Rlc1xyXG5cdFx0aWYgKCBlbGVtLm5vZGVUeXBlID09PSAzIHx8IGVsZW0ubm9kZVR5cGUgPT09IDggKSB7XHJcblx0XHRcdHJldHVybjtcclxuXHRcdH1cclxuXHJcblx0XHQvLyBmb2N1cy9ibHVyIG1vcnBocyB0byBmb2N1c2luL291dDsgZW5zdXJlIHdlJ3JlIG5vdCBmaXJpbmcgdGhlbSByaWdodCBub3dcclxuXHRcdGlmICggcmZvY3VzTW9ycGgudGVzdCggdHlwZSArIGpRdWVyeS5ldmVudC50cmlnZ2VyZWQgKSApIHtcclxuXHRcdFx0cmV0dXJuO1xyXG5cdFx0fVxyXG5cclxuXHRcdGlmICggdHlwZS5pbmRleE9mKCBcIi5cIiApID4gLTEgKSB7XHJcblxyXG5cdFx0XHQvLyBOYW1lc3BhY2VkIHRyaWdnZXI7IGNyZWF0ZSBhIHJlZ2V4cCB0byBtYXRjaCBldmVudCB0eXBlIGluIGhhbmRsZSgpXHJcblx0XHRcdG5hbWVzcGFjZXMgPSB0eXBlLnNwbGl0KCBcIi5cIiApO1xyXG5cdFx0XHR0eXBlID0gbmFtZXNwYWNlcy5zaGlmdCgpO1xyXG5cdFx0XHRuYW1lc3BhY2VzLnNvcnQoKTtcclxuXHRcdH1cclxuXHRcdG9udHlwZSA9IHR5cGUuaW5kZXhPZiggXCI6XCIgKSA8IDAgJiYgXCJvblwiICsgdHlwZTtcclxuXHJcblx0XHQvLyBDYWxsZXIgY2FuIHBhc3MgaW4gYSBqUXVlcnkuRXZlbnQgb2JqZWN0LCBPYmplY3QsIG9yIGp1c3QgYW4gZXZlbnQgdHlwZSBzdHJpbmdcclxuXHRcdGV2ZW50ID0gZXZlbnRbIGpRdWVyeS5leHBhbmRvIF0gP1xyXG5cdFx0XHRldmVudCA6XHJcblx0XHRcdG5ldyBqUXVlcnkuRXZlbnQoIHR5cGUsIHR5cGVvZiBldmVudCA9PT0gXCJvYmplY3RcIiAmJiBldmVudCApO1xyXG5cclxuXHRcdC8vIFRyaWdnZXIgYml0bWFzazogJiAxIGZvciBuYXRpdmUgaGFuZGxlcnM7ICYgMiBmb3IgalF1ZXJ5IChhbHdheXMgdHJ1ZSlcclxuXHRcdGV2ZW50LmlzVHJpZ2dlciA9IG9ubHlIYW5kbGVycyA/IDIgOiAzO1xyXG5cdFx0ZXZlbnQubmFtZXNwYWNlID0gbmFtZXNwYWNlcy5qb2luKCBcIi5cIiApO1xyXG5cdFx0ZXZlbnQucm5hbWVzcGFjZSA9IGV2ZW50Lm5hbWVzcGFjZSA/XHJcblx0XHRcdG5ldyBSZWdFeHAoIFwiKF58XFxcXC4pXCIgKyBuYW1lc3BhY2VzLmpvaW4oIFwiXFxcXC4oPzouKlxcXFwufClcIiApICsgXCIoXFxcXC58JClcIiApIDpcclxuXHRcdFx0bnVsbDtcclxuXHJcblx0XHQvLyBDbGVhbiB1cCB0aGUgZXZlbnQgaW4gY2FzZSBpdCBpcyBiZWluZyByZXVzZWRcclxuXHRcdGV2ZW50LnJlc3VsdCA9IHVuZGVmaW5lZDtcclxuXHRcdGlmICggIWV2ZW50LnRhcmdldCApIHtcclxuXHRcdFx0ZXZlbnQudGFyZ2V0ID0gZWxlbTtcclxuXHRcdH1cclxuXHJcblx0XHQvLyBDbG9uZSBhbnkgaW5jb21pbmcgZGF0YSBhbmQgcHJlcGVuZCB0aGUgZXZlbnQsIGNyZWF0aW5nIHRoZSBoYW5kbGVyIGFyZyBsaXN0XHJcblx0XHRkYXRhID0gZGF0YSA9PSBudWxsID9cclxuXHRcdFx0WyBldmVudCBdIDpcclxuXHRcdFx0alF1ZXJ5Lm1ha2VBcnJheSggZGF0YSwgWyBldmVudCBdICk7XHJcblxyXG5cdFx0Ly8gQWxsb3cgc3BlY2lhbCBldmVudHMgdG8gZHJhdyBvdXRzaWRlIHRoZSBsaW5lc1xyXG5cdFx0c3BlY2lhbCA9IGpRdWVyeS5ldmVudC5zcGVjaWFsWyB0eXBlIF0gfHwge307XHJcblx0XHRpZiAoICFvbmx5SGFuZGxlcnMgJiYgc3BlY2lhbC50cmlnZ2VyICYmIHNwZWNpYWwudHJpZ2dlci5hcHBseSggZWxlbSwgZGF0YSApID09PSBmYWxzZSApIHtcclxuXHRcdFx0cmV0dXJuO1xyXG5cdFx0fVxyXG5cclxuXHRcdC8vIERldGVybWluZSBldmVudCBwcm9wYWdhdGlvbiBwYXRoIGluIGFkdmFuY2UsIHBlciBXM0MgZXZlbnRzIHNwZWMgKCM5OTUxKVxyXG5cdFx0Ly8gQnViYmxlIHVwIHRvIGRvY3VtZW50LCB0aGVuIHRvIHdpbmRvdzsgd2F0Y2ggZm9yIGEgZ2xvYmFsIG93bmVyRG9jdW1lbnQgdmFyICgjOTcyNClcclxuXHRcdGlmICggIW9ubHlIYW5kbGVycyAmJiAhc3BlY2lhbC5ub0J1YmJsZSAmJiAhalF1ZXJ5LmlzV2luZG93KCBlbGVtICkgKSB7XHJcblxyXG5cdFx0XHRidWJibGVUeXBlID0gc3BlY2lhbC5kZWxlZ2F0ZVR5cGUgfHwgdHlwZTtcclxuXHRcdFx0aWYgKCAhcmZvY3VzTW9ycGgudGVzdCggYnViYmxlVHlwZSArIHR5cGUgKSApIHtcclxuXHRcdFx0XHRjdXIgPSBjdXIucGFyZW50Tm9kZTtcclxuXHRcdFx0fVxyXG5cdFx0XHRmb3IgKCA7IGN1cjsgY3VyID0gY3VyLnBhcmVudE5vZGUgKSB7XHJcblx0XHRcdFx0ZXZlbnRQYXRoLnB1c2goIGN1ciApO1xyXG5cdFx0XHRcdHRtcCA9IGN1cjtcclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0Ly8gT25seSBhZGQgd2luZG93IGlmIHdlIGdvdCB0byBkb2N1bWVudCAoZS5nLiwgbm90IHBsYWluIG9iaiBvciBkZXRhY2hlZCBET00pXHJcblx0XHRcdGlmICggdG1wID09PSAoIGVsZW0ub3duZXJEb2N1bWVudCB8fCBkb2N1bWVudCApICkge1xyXG5cdFx0XHRcdGV2ZW50UGF0aC5wdXNoKCB0bXAuZGVmYXVsdFZpZXcgfHwgdG1wLnBhcmVudFdpbmRvdyB8fCB3aW5kb3cgKTtcclxuXHRcdFx0fVxyXG5cdFx0fVxyXG5cclxuXHRcdC8vIEZpcmUgaGFuZGxlcnMgb24gdGhlIGV2ZW50IHBhdGhcclxuXHRcdGkgPSAwO1xyXG5cdFx0d2hpbGUgKCAoIGN1ciA9IGV2ZW50UGF0aFsgaSsrIF0gKSAmJiAhZXZlbnQuaXNQcm9wYWdhdGlvblN0b3BwZWQoKSApIHtcclxuXHJcblx0XHRcdGV2ZW50LnR5cGUgPSBpID4gMSA/XHJcblx0XHRcdFx0YnViYmxlVHlwZSA6XHJcblx0XHRcdFx0c3BlY2lhbC5iaW5kVHlwZSB8fCB0eXBlO1xyXG5cclxuXHRcdFx0Ly8galF1ZXJ5IGhhbmRsZXJcclxuXHRcdFx0aGFuZGxlID0gKCBkYXRhUHJpdi5nZXQoIGN1ciwgXCJldmVudHNcIiApIHx8IHt9IClbIGV2ZW50LnR5cGUgXSAmJlxyXG5cdFx0XHRcdGRhdGFQcml2LmdldCggY3VyLCBcImhhbmRsZVwiICk7XHJcblx0XHRcdGlmICggaGFuZGxlICkge1xyXG5cdFx0XHRcdGhhbmRsZS5hcHBseSggY3VyLCBkYXRhICk7XHJcblx0XHRcdH1cclxuXHJcblx0XHRcdC8vIE5hdGl2ZSBoYW5kbGVyXHJcblx0XHRcdGhhbmRsZSA9IG9udHlwZSAmJiBjdXJbIG9udHlwZSBdO1xyXG5cdFx0XHRpZiAoIGhhbmRsZSAmJiBoYW5kbGUuYXBwbHkgJiYgYWNjZXB0RGF0YSggY3VyICkgKSB7XHJcblx0XHRcdFx0ZXZlbnQucmVzdWx0ID0gaGFuZGxlLmFwcGx5KCBjdXIsIGRhdGEgKTtcclxuXHRcdFx0XHRpZiAoIGV2ZW50LnJlc3VsdCA9PT0gZmFsc2UgKSB7XHJcblx0XHRcdFx0XHRldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0fVxyXG5cdFx0fVxyXG5cdFx0ZXZlbnQudHlwZSA9IHR5cGU7XHJcblxyXG5cdFx0Ly8gSWYgbm9ib2R5IHByZXZlbnRlZCB0aGUgZGVmYXVsdCBhY3Rpb24sIGRvIGl0IG5vd1xyXG5cdFx0aWYgKCAhb25seUhhbmRsZXJzICYmICFldmVudC5pc0RlZmF1bHRQcmV2ZW50ZWQoKSApIHtcclxuXHJcblx0XHRcdGlmICggKCAhc3BlY2lhbC5fZGVmYXVsdCB8fFxyXG5cdFx0XHRcdHNwZWNpYWwuX2RlZmF1bHQuYXBwbHkoIGV2ZW50UGF0aC5wb3AoKSwgZGF0YSApID09PSBmYWxzZSApICYmXHJcblx0XHRcdFx0YWNjZXB0RGF0YSggZWxlbSApICkge1xyXG5cclxuXHRcdFx0XHQvLyBDYWxsIGEgbmF0aXZlIERPTSBtZXRob2Qgb24gdGhlIHRhcmdldCB3aXRoIHRoZSBzYW1lIG5hbWUgbmFtZSBhcyB0aGUgZXZlbnQuXHJcblx0XHRcdFx0Ly8gRG9uJ3QgZG8gZGVmYXVsdCBhY3Rpb25zIG9uIHdpbmRvdywgdGhhdCdzIHdoZXJlIGdsb2JhbCB2YXJpYWJsZXMgYmUgKCM2MTcwKVxyXG5cdFx0XHRcdGlmICggb250eXBlICYmIGpRdWVyeS5pc0Z1bmN0aW9uKCBlbGVtWyB0eXBlIF0gKSAmJiAhalF1ZXJ5LmlzV2luZG93KCBlbGVtICkgKSB7XHJcblxyXG5cdFx0XHRcdFx0Ly8gRG9uJ3QgcmUtdHJpZ2dlciBhbiBvbkZPTyBldmVudCB3aGVuIHdlIGNhbGwgaXRzIEZPTygpIG1ldGhvZFxyXG5cdFx0XHRcdFx0dG1wID0gZWxlbVsgb250eXBlIF07XHJcblxyXG5cdFx0XHRcdFx0aWYgKCB0bXAgKSB7XHJcblx0XHRcdFx0XHRcdGVsZW1bIG9udHlwZSBdID0gbnVsbDtcclxuXHRcdFx0XHRcdH1cclxuXHJcblx0XHRcdFx0XHQvLyBQcmV2ZW50IHJlLXRyaWdnZXJpbmcgb2YgdGhlIHNhbWUgZXZlbnQsIHNpbmNlIHdlIGFscmVhZHkgYnViYmxlZCBpdCBhYm92ZVxyXG5cdFx0XHRcdFx0alF1ZXJ5LmV2ZW50LnRyaWdnZXJlZCA9IHR5cGU7XHJcblx0XHRcdFx0XHRlbGVtWyB0eXBlIF0oKTtcclxuXHRcdFx0XHRcdGpRdWVyeS5ldmVudC50cmlnZ2VyZWQgPSB1bmRlZmluZWQ7XHJcblxyXG5cdFx0XHRcdFx0aWYgKCB0bXAgKSB7XHJcblx0XHRcdFx0XHRcdGVsZW1bIG9udHlwZSBdID0gdG1wO1xyXG5cdFx0XHRcdFx0fVxyXG5cdFx0XHRcdH1cclxuXHRcdFx0fVxyXG5cdFx0fVxyXG5cclxuXHRcdHJldHVybiBldmVudC5yZXN1bHQ7XHJcblx0fSxcclxuXHJcblx0Ly8gUGlnZ3liYWNrIG9uIGEgZG9ub3IgZXZlbnQgdG8gc2ltdWxhdGUgYSBkaWZmZXJlbnQgb25lXHJcblx0Ly8gVXNlZCBvbmx5IGZvciBgZm9jdXMoaW4gfCBvdXQpYCBldmVudHNcclxuXHRzaW11bGF0ZTogZnVuY3Rpb24oIHR5cGUsIGVsZW0sIGV2ZW50ICkge1xyXG5cdFx0dmFyIGUgPSBqUXVlcnkuZXh0ZW5kKFxyXG5cdFx0XHRuZXcgalF1ZXJ5LkV2ZW50KCksXHJcblx0XHRcdGV2ZW50LFxyXG5cdFx0XHR7XHJcblx0XHRcdFx0dHlwZTogdHlwZSxcclxuXHRcdFx0XHRpc1NpbXVsYXRlZDogdHJ1ZVxyXG5cdFx0XHR9XHJcblx0XHQpO1xyXG5cclxuXHRcdGpRdWVyeS5ldmVudC50cmlnZ2VyKCBlLCBudWxsLCBlbGVtICk7XHJcblx0fVxyXG5cclxufSApO1xyXG5cclxualF1ZXJ5LmZuLmV4dGVuZCgge1xyXG5cclxuXHR0cmlnZ2VyOiBmdW5jdGlvbiggdHlwZSwgZGF0YSApIHtcclxuXHRcdHJldHVybiB0aGlzLmVhY2goIGZ1bmN0aW9uKCkge1xyXG5cdFx0XHRqUXVlcnkuZXZlbnQudHJpZ2dlciggdHlwZSwgZGF0YSwgdGhpcyApO1xyXG5cdFx0fSApO1xyXG5cdH0sXHJcblx0dHJpZ2dlckhhbmRsZXI6IGZ1bmN0aW9uKCB0eXBlLCBkYXRhICkge1xyXG5cdFx0dmFyIGVsZW0gPSB0aGlzWyAwIF07XHJcblx0XHRpZiAoIGVsZW0gKSB7XHJcblx0XHRcdHJldHVybiBqUXVlcnkuZXZlbnQudHJpZ2dlciggdHlwZSwgZGF0YSwgZWxlbSwgdHJ1ZSApO1xyXG5cdFx0fVxyXG5cdH1cclxufSApO1xyXG5cclxuXHJcbmpRdWVyeS5lYWNoKCAoIFwiYmx1ciBmb2N1cyBmb2N1c2luIGZvY3Vzb3V0IGxvYWQgcmVzaXplIHNjcm9sbCB1bmxvYWQgY2xpY2sgZGJsY2xpY2sgXCIgK1xyXG5cdFwibW91c2Vkb3duIG1vdXNldXAgbW91c2Vtb3ZlIG1vdXNlb3ZlciBtb3VzZW91dCBtb3VzZWVudGVyIG1vdXNlbGVhdmUgXCIgK1xyXG5cdFwiY2hhbmdlIHNlbGVjdCBzdWJtaXQga2V5ZG93biBrZXlwcmVzcyBrZXl1cCBlcnJvciBjb250ZXh0bWVudVwiICkuc3BsaXQoIFwiIFwiICksXHJcblx0ZnVuY3Rpb24oIGksIG5hbWUgKSB7XHJcblxyXG5cdC8vIEhhbmRsZSBldmVudCBiaW5kaW5nXHJcblx0alF1ZXJ5LmZuWyBuYW1lIF0gPSBmdW5jdGlvbiggZGF0YSwgZm4gKSB7XHJcblx0XHRyZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA+IDAgP1xyXG5cdFx0XHR0aGlzLm9uKCBuYW1lLCBudWxsLCBkYXRhLCBmbiApIDpcclxuXHRcdFx0dGhpcy50cmlnZ2VyKCBuYW1lICk7XHJcblx0fTtcclxufSApO1xyXG5cclxualF1ZXJ5LmZuLmV4dGVuZCgge1xyXG5cdGhvdmVyOiBmdW5jdGlvbiggZm5PdmVyLCBmbk91dCApIHtcclxuXHRcdHJldHVybiB0aGlzLm1vdXNlZW50ZXIoIGZuT3ZlciApLm1vdXNlbGVhdmUoIGZuT3V0IHx8IGZuT3ZlciApO1xyXG5cdH1cclxufSApO1xyXG5cclxuXHJcblxyXG5cclxuc3VwcG9ydC5mb2N1c2luID0gXCJvbmZvY3VzaW5cIiBpbiB3aW5kb3c7XHJcblxyXG5cclxuLy8gU3VwcG9ydDogRmlyZWZveFxyXG4vLyBGaXJlZm94IGRvZXNuJ3QgaGF2ZSBmb2N1cyhpbiB8IG91dCkgZXZlbnRzXHJcbi8vIFJlbGF0ZWQgdGlja2V0IC0gaHR0cHM6Ly9idWd6aWxsYS5tb3ppbGxhLm9yZy9zaG93X2J1Zy5jZ2k/aWQ9Njg3Nzg3XHJcbi8vXHJcbi8vIFN1cHBvcnQ6IENocm9tZSwgU2FmYXJpXHJcbi8vIGZvY3VzKGluIHwgb3V0KSBldmVudHMgZmlyZSBhZnRlciBmb2N1cyAmIGJsdXIgZXZlbnRzLFxyXG4vLyB3aGljaCBpcyBzcGVjIHZpb2xhdGlvbiAtIGh0dHA6Ly93d3cudzMub3JnL1RSL0RPTS1MZXZlbC0zLUV2ZW50cy8jZXZlbnRzLWZvY3VzZXZlbnQtZXZlbnQtb3JkZXJcclxuLy8gUmVsYXRlZCB0aWNrZXQgLSBodHRwczovL2NvZGUuZ29vZ2xlLmNvbS9wL2Nocm9taXVtL2lzc3Vlcy9kZXRhaWw/aWQ9NDQ5ODU3XHJcbmlmICggIXN1cHBvcnQuZm9jdXNpbiApIHtcclxuXHRqUXVlcnkuZWFjaCggeyBmb2N1czogXCJmb2N1c2luXCIsIGJsdXI6IFwiZm9jdXNvdXRcIiB9LCBmdW5jdGlvbiggb3JpZywgZml4ICkge1xyXG5cclxuXHRcdC8vIEF0dGFjaCBhIHNpbmdsZSBjYXB0dXJpbmcgaGFuZGxlciBvbiB0aGUgZG9jdW1lbnQgd2hpbGUgc29tZW9uZSB3YW50cyBmb2N1c2luL2ZvY3Vzb3V0XHJcblx0XHR2YXIgaGFuZGxlciA9IGZ1bmN0aW9uKCBldmVudCApIHtcclxuXHRcdFx0alF1ZXJ5LmV2ZW50LnNpbXVsYXRlKCBmaXgsIGV2ZW50LnRhcmdldCwgalF1ZXJ5LmV2ZW50LmZpeCggZXZlbnQgKSApO1xyXG5cdFx0fTtcclxuXHJcblx0XHRqUXVlcnkuZXZlbnQuc3BlY2lhbFsgZml4IF0gPSB7XHJcblx0XHRcdHNldHVwOiBmdW5jdGlvbigpIHtcclxuXHRcdFx0XHR2YXIgZG9jID0gdGhpcy5vd25lckRvY3VtZW50IHx8IHRoaXMsXHJcblx0XHRcdFx0XHRhdHRhY2hlcyA9IGRhdGFQcml2LmFjY2VzcyggZG9jLCBmaXggKTtcclxuXHJcblx0XHRcdFx0aWYgKCAhYXR0YWNoZXMgKSB7XHJcblx0XHRcdFx0XHRkb2MuYWRkRXZlbnRMaXN0ZW5lciggb3JpZywgaGFuZGxlciwgdHJ1ZSApO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0XHRkYXRhUHJpdi5hY2Nlc3MoIGRvYywgZml4LCAoIGF0dGFjaGVzIHx8IDAgKSArIDEgKTtcclxuXHRcdFx0fSxcclxuXHRcdFx0dGVhcmRvd246IGZ1bmN0aW9uKCkge1xyXG5cdFx0XHRcdHZhciBkb2MgPSB0aGlzLm93bmVyRG9jdW1lbnQgfHwgdGhpcyxcclxuXHRcdFx0XHRcdGF0dGFjaGVzID0gZGF0YVByaXYuYWNjZXNzKCBkb2MsIGZpeCApIC0gMTtcclxuXHJcblx0XHRcdFx0aWYgKCAhYXR0YWNoZXMgKSB7XHJcblx0XHRcdFx0XHRkb2MucmVtb3ZlRXZlbnRMaXN0ZW5lciggb3JpZywgaGFuZGxlciwgdHJ1ZSApO1xyXG5cdFx0XHRcdFx0ZGF0YVByaXYucmVtb3ZlKCBkb2MsIGZpeCApO1xyXG5cclxuXHRcdFx0XHR9IGVsc2Uge1xyXG5cdFx0XHRcdFx0ZGF0YVByaXYuYWNjZXNzKCBkb2MsIGZpeCwgYXR0YWNoZXMgKTtcclxuXHRcdFx0XHR9XHJcblx0XHRcdH1cclxuXHRcdH07XHJcblx0fSApO1xyXG59XHJcbnZhciBsb2NhdGlvbiA9IHdpbmRvdy5sb2NhdGlvbjtcclxuXHJcbnZhciBub25jZSA9IGpRdWVyeS5ub3coKTtcclxuXHJcbnZhciBycXVlcnkgPSAoIC9cXD8vICk7XHJcblxyXG5cclxuXHJcbi8vIFN1cHBvcnQ6IEFuZHJvaWQgMi4zXHJcbi8vIFdvcmthcm91bmQgZmFpbHVyZSB0byBzdHJpbmctY2FzdCBudWxsIGlucHV0XHJcbmpRdWVyeS5wYXJzZUpTT04gPSBmdW5jdGlvbiggZGF0YSApIHtcclxuXHRyZXR1cm4gSlNPTi5wYXJzZSggZGF0YSArIFwiXCIgKTtcclxufTtcclxuXHJcblxyXG4vLyBDcm9zcy1icm93c2VyIHhtbCBwYXJzaW5nXHJcbmpRdWVyeS5wYXJzZVhNTCA9IGZ1bmN0aW9uKCBkYXRhICkge1xyXG5cdHZhciB4bWw7XHJcblx0aWYgKCAhZGF0YSB8fCB0eXBlb2YgZGF0YSAhPT0gXCJzdHJpbmdcIiApIHtcclxuXHRcdHJldHVybiBudWxsO1xyXG5cdH1cclxuXHJcblx0Ly8gU3VwcG9ydDogSUU5XHJcblx0dHJ5IHtcclxuXHRcdHhtbCA9ICggbmV3IHdpbmRvdy5ET01QYXJzZXIoKSApLnBhcnNlRnJvbVN0cmluZyggZGF0YSwgXCJ0ZXh0L3htbFwiICk7XHJcblx0fSBjYXRjaCAoIGUgKSB7XHJcblx0XHR4bWwgPSB1bmRlZmluZWQ7XHJcblx0fVxyXG5cclxuXHRpZiAoICF4bWwgfHwgeG1sLmdldEVsZW1lbnRzQnlUYWdOYW1lKCBcInBhcnNlcmVycm9yXCIgKS5sZW5ndGggKSB7XHJcblx0XHRqUXVlcnkuZXJyb3IoIFwiSW52YWxpZCBYTUw6IFwiICsgZGF0YSApO1xyXG5cdH1cclxuXHRyZXR1cm4geG1sO1xyXG59O1xyXG5cclxuXHJcbnZhclxyXG5cdHJoYXNoID0gLyMuKiQvLFxyXG5cdHJ0cyA9IC8oWz8mXSlfPVteJl0qLyxcclxuXHRyaGVhZGVycyA9IC9eKC4qPyk6WyBcXHRdKihbXlxcclxcbl0qKSQvbWcsXHJcblxyXG5cdC8vICM3NjUzLCAjODEyNSwgIzgxNTI6IGxvY2FsIHByb3RvY29sIGRldGVjdGlvblxyXG5cdHJsb2NhbFByb3RvY29sID0gL14oPzphYm91dHxhcHB8YXBwLXN0b3JhZ2V8ListZXh0ZW5zaW9ufGZpbGV8cmVzfHdpZGdldCk6JC8sXHJcblx0cm5vQ29udGVudCA9IC9eKD86R0VUfEhFQUQpJC8sXHJcblx0cnByb3RvY29sID0gL15cXC9cXC8vLFxyXG5cclxuXHQvKiBQcmVmaWx0ZXJzXHJcblx0ICogMSkgVGhleSBhcmUgdXNlZnVsIHRvIGludHJvZHVjZSBjdXN0b20gZGF0YVR5cGVzIChzZWUgYWpheC9qc29ucC5qcyBmb3IgYW4gZXhhbXBsZSlcclxuXHQgKiAyKSBUaGVzZSBhcmUgY2FsbGVkOlxyXG5cdCAqICAgIC0gQkVGT1JFIGFza2luZyBmb3IgYSB0cmFuc3BvcnRcclxuXHQgKiAgICAtIEFGVEVSIHBhcmFtIHNlcmlhbGl6YXRpb24gKHMuZGF0YSBpcyBhIHN0cmluZyBpZiBzLnByb2Nlc3NEYXRhIGlzIHRydWUpXHJcblx0ICogMykga2V5IGlzIHRoZSBkYXRhVHlwZVxyXG5cdCAqIDQpIHRoZSBjYXRjaGFsbCBzeW1ib2wgXCIqXCIgY2FuIGJlIHVzZWRcclxuXHQgKiA1KSBleGVjdXRpb24gd2lsbCBzdGFydCB3aXRoIHRyYW5zcG9ydCBkYXRhVHlwZSBhbmQgVEhFTiBjb250aW51ZSBkb3duIHRvIFwiKlwiIGlmIG5lZWRlZFxyXG5cdCAqL1xyXG5cdHByZWZpbHRlcnMgPSB7fSxcclxuXHJcblx0LyogVHJhbnNwb3J0cyBiaW5kaW5nc1xyXG5cdCAqIDEpIGtleSBpcyB0aGUgZGF0YVR5cGVcclxuXHQgKiAyKSB0aGUgY2F0Y2hhbGwgc3ltYm9sIFwiKlwiIGNhbiBiZSB1c2VkXHJcblx0ICogMykgc2VsZWN0aW9uIHdpbGwgc3RhcnQgd2l0aCB0cmFuc3BvcnQgZGF0YVR5cGUgYW5kIFRIRU4gZ28gdG8gXCIqXCIgaWYgbmVlZGVkXHJcblx0ICovXHJcblx0dHJhbnNwb3J0cyA9IHt9LFxyXG5cclxuXHQvLyBBdm9pZCBjb21tZW50LXByb2xvZyBjaGFyIHNlcXVlbmNlICgjMTAwOTgpOyBtdXN0IGFwcGVhc2UgbGludCBhbmQgZXZhZGUgY29tcHJlc3Npb25cclxuXHRhbGxUeXBlcyA9IFwiKi9cIi5jb25jYXQoIFwiKlwiICksXHJcblxyXG5cdC8vIEFuY2hvciB0YWcgZm9yIHBhcnNpbmcgdGhlIGRvY3VtZW50IG9yaWdpblxyXG5cdG9yaWdpbkFuY2hvciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoIFwiYVwiICk7XHJcblx0b3JpZ2luQW5jaG9yLmhyZWYgPSBsb2NhdGlvbi5ocmVmO1xyXG5cclxuLy8gQmFzZSBcImNvbnN0cnVjdG9yXCIgZm9yIGpRdWVyeS5hamF4UHJlZmlsdGVyIGFuZCBqUXVlcnkuYWpheFRyYW5zcG9ydFxyXG5mdW5jdGlvbiBhZGRUb1ByZWZpbHRlcnNPclRyYW5zcG9ydHMoIHN0cnVjdHVyZSApIHtcclxuXHJcblx0Ly8gZGF0YVR5cGVFeHByZXNzaW9uIGlzIG9wdGlvbmFsIGFuZCBkZWZhdWx0cyB0byBcIipcIlxyXG5cdHJldHVybiBmdW5jdGlvbiggZGF0YVR5cGVFeHByZXNzaW9uLCBmdW5jICkge1xyXG5cclxuXHRcdGlmICggdHlwZW9mIGRhdGFUeXBlRXhwcmVzc2lvbiAhPT0gXCJzdHJpbmdcIiApIHtcclxuXHRcdFx0ZnVuYyA9IGRhdGFUeXBlRXhwcmVzc2lvbjtcclxuXHRcdFx0ZGF0YVR5cGVFeHByZXNzaW9uID0gXCIqXCI7XHJcblx0XHR9XHJcblxyXG5cdFx0dmFyIGRhdGFUeXBlLFxyXG5cdFx0XHRpID0gMCxcclxuXHRcdFx0ZGF0YVR5cGVzID0gZGF0YVR5cGVFeHByZXNzaW9uLnRvTG93ZXJDYXNlKCkubWF0Y2goIHJub3R3aGl0ZSApIHx8IFtdO1xyXG5cclxuXHRcdGlmICggalF1ZXJ5LmlzRnVuY3Rpb24oIGZ1bmMgKSApIHtcclxuXHJcblx0XHRcdC8vIEZvciBlYWNoIGRhdGFUeXBlIGluIHRoZSBkYXRhVHlwZUV4cHJlc3Npb25cclxuXHRcdFx0d2hpbGUgKCAoIGRhdGFUeXBlID0gZGF0YVR5cGVzWyBpKysgXSApICkge1xyXG5cclxuXHRcdFx0XHQvLyBQcmVwZW5kIGlmIHJlcXVlc3RlZFxyXG5cdFx0XHRcdGlmICggZGF0YVR5cGVbIDAgXSA9PT0gXCIrXCIgKSB7XHJcblx0XHRcdFx0XHRkYXRhVHlwZSA9IGRhdGFUeXBlLnNsaWNlKCAxICkgfHwgXCIqXCI7XHJcblx0XHRcdFx0XHQoIHN0cnVjdHVyZVsgZGF0YVR5cGUgXSA9IHN0cnVjdHVyZVsgZGF0YVR5cGUgXSB8fCBbXSApLnVuc2hpZnQoIGZ1bmMgKTtcclxuXHJcblx0XHRcdFx0Ly8gT3RoZXJ3aXNlIGFwcGVuZFxyXG5cdFx0XHRcdH0gZWxzZSB7XHJcblx0XHRcdFx0XHQoIHN0cnVjdHVyZVsgZGF0YVR5cGUgXSA9IHN0cnVjdHVyZVsgZGF0YVR5cGUgXSB8fCBbXSApLnB1c2goIGZ1bmMgKTtcclxuXHRcdFx0XHR9XHJcblx0XHRcdH1cclxuXHRcdH1cclxuXHR9O1xyXG59XHJcblxyXG4vLyBCYXNlIGluc3BlY3Rpb24gZnVuY3Rpb24gZm9yIHByZWZpbHRlcnMgYW5kIHRyYW5zcG9ydHNcclxuZnVuY3Rpb24gaW5zcGVjdFByZWZpbHRlcnNPclRyYW5zcG9ydHMoIHN0cnVjdHVyZSwgb3B0aW9ucywgb3JpZ2luYWxPcHRpb25zLCBqcVhIUiApIHtcclxuXHJcblx0dmFyIGluc3BlY3RlZCA9IHt9LFxyXG5cdFx0c2Vla2luZ1RyYW5zcG9ydCA9ICggc3RydWN0dXJlID09PSB0cmFuc3BvcnRzICk7XHJcblxyXG5cdGZ1bmN0aW9uIGluc3BlY3QoIGRhdGFUeXBlICkge1xyXG5cdFx0dmFyIHNlbGVjdGVkO1xyXG5cdFx0aW5zcGVjdGVkWyBkYXRhVHlwZSBdID0gdHJ1ZTtcclxuXHRcdGpRdWVyeS5lYWNoKCBzdHJ1Y3R1cmVbIGRhdGFUeXBlIF0gfHwgW10sIGZ1bmN0aW9uKCBfLCBwcmVmaWx0ZXJPckZhY3RvcnkgKSB7XHJcblx0XHRcdHZhciBkYXRhVHlwZU9yVHJhbnNwb3J0ID0gcHJlZmlsdGVyT3JGYWN0b3J5KCBvcHRpb25zLCBvcmlnaW5hbE9wdGlvbnMsIGpxWEhSICk7XHJcblx0XHRcdGlmICggdHlwZW9mIGRhdGFUeXBlT3JUcmFuc3BvcnQgPT09IFwic3RyaW5nXCIgJiZcclxuXHRcdFx0XHQhc2Vla2luZ1RyYW5zcG9ydCAmJiAhaW5zcGVjdGVkWyBkYXRhVHlwZU9yVHJhbnNwb3J0IF0gKSB7XHJcblxyXG5cdFx0XHRcdG9wdGlvbnMuZGF0YVR5cGVzLnVuc2hpZnQoIGRhdGFUeXBlT3JUcmFuc3BvcnQgKTtcclxuXHRcdFx0XHRpbnNwZWN0KCBkYXRhVHlwZU9yVHJhbnNwb3J0ICk7XHJcblx0XHRcdFx0cmV0dXJuIGZhbHNlO1xyXG5cdFx0XHR9IGVsc2UgaWYgKCBzZWVraW5nVHJhbnNwb3J0ICkge1xyXG5cdFx0XHRcdHJldHVybiAhKCBzZWxlY3RlZCA9IGRhdGFUeXBlT3JUcmFuc3BvcnQgKTtcclxuXHRcdFx0fVxyXG5cdFx0fSApO1xyXG5cdFx0cmV0dXJuIHNlbGVjdGVkO1xyXG5cdH1cclxuXHJcblx0cmV0dXJuIGluc3BlY3QoIG9wdGlvbnMuZGF0YVR5cGVzWyAwIF0gKSB8fCAhaW5zcGVjdGVkWyBcIipcIiBdICYmIGluc3BlY3QoIFwiKlwiICk7XHJcbn1cclxuXHJcbi8vIEEgc3BlY2lhbCBleHRlbmQgZm9yIGFqYXggb3B0aW9uc1xyXG4vLyB0aGF0IHRha2VzIFwiZmxhdFwiIG9wdGlvbnMgKG5vdCB0byBiZSBkZWVwIGV4dGVuZGVkKVxyXG4vLyBGaXhlcyAjOTg4N1xyXG5mdW5jdGlvbiBhamF4RXh0ZW5kKCB0YXJnZXQsIHNyYyApIHtcclxuXHR2YXIga2V5LCBkZWVwLFxyXG5cdFx0ZmxhdE9wdGlvbnMgPSBqUXVlcnkuYWpheFNldHRpbmdzLmZsYXRPcHRpb25zIHx8IHt9O1xyXG5cclxuXHRmb3IgKCBrZXkgaW4gc3JjICkge1xyXG5cdFx0aWYgKCBzcmNbIGtleSBdICE9PSB1bmRlZmluZWQgKSB7XHJcblx0XHRcdCggZmxhdE9wdGlvbnNbIGtleSBdID8gdGFyZ2V0IDogKCBkZWVwIHx8ICggZGVlcCA9IHt9ICkgKSApWyBrZXkgXSA9IHNyY1sga2V5IF07XHJcblx0XHR9XHJcblx0fVxyXG5cdGlmICggZGVlcCApIHtcclxuXHRcdGpRdWVyeS5leHRlbmQoIHRydWUsIHRhcmdldCwgZGVlcCApO1xyXG5cdH1cclxuXHJcblx0cmV0dXJuIHRhcmdldDtcclxufVxyXG5cclxuLyogSGFuZGxlcyByZXNwb25zZXMgdG8gYW4gYWpheCByZXF1ZXN0OlxyXG4gKiAtIGZpbmRzIHRoZSByaWdodCBkYXRhVHlwZSAobWVkaWF0ZXMgYmV0d2VlbiBjb250ZW50LXR5cGUgYW5kIGV4cGVjdGVkIGRhdGFUeXBlKVxyXG4gKiAtIHJldHVybnMgdGhlIGNvcnJlc3BvbmRpbmcgcmVzcG9uc2VcclxuICovXHJcbmZ1bmN0aW9uIGFqYXhIYW5kbGVSZXNwb25zZXMoIHMsIGpxWEhSLCByZXNwb25zZXMgKSB7XHJcblxyXG5cdHZhciBjdCwgdHlwZSwgZmluYWxEYXRhVHlwZSwgZmlyc3REYXRhVHlwZSxcclxuXHRcdGNvbnRlbnRzID0gcy5jb250ZW50cyxcclxuXHRcdGRhdGFUeXBlcyA9IHMuZGF0YVR5cGVzO1xyXG5cclxuXHQvLyBSZW1vdmUgYXV0byBkYXRhVHlwZSBhbmQgZ2V0IGNvbnRlbnQtdHlwZSBpbiB0aGUgcHJvY2Vzc1xyXG5cdHdoaWxlICggZGF0YVR5cGVzWyAwIF0gPT09IFwiKlwiICkge1xyXG5cdFx0ZGF0YVR5cGVzLnNoaWZ0KCk7XHJcblx0XHRpZiAoIGN0ID09PSB1bmRlZmluZWQgKSB7XHJcblx0XHRcdGN0ID0gcy5taW1lVHlwZSB8fCBqcVhIUi5nZXRSZXNwb25zZUhlYWRlciggXCJDb250ZW50LVR5cGVcIiApO1xyXG5cdFx0fVxyXG5cdH1cclxuXHJcblx0Ly8gQ2hlY2sgaWYgd2UncmUgZGVhbGluZyB3aXRoIGEga25vd24gY29udGVudC10eXBlXHJcblx0aWYgKCBjdCApIHtcclxuXHRcdGZvciAoIHR5cGUgaW4gY29udGVudHMgKSB7XHJcblx0XHRcdGlmICggY29udGVudHNbIHR5cGUgXSAmJiBjb250ZW50c1sgdHlwZSBdLnRlc3QoIGN0ICkgKSB7XHJcblx0XHRcdFx0ZGF0YVR5cGVzLnVuc2hpZnQoIHR5cGUgKTtcclxuXHRcdFx0XHRicmVhaztcclxuXHRcdFx0fVxyXG5cdFx0fVxyXG5cdH1cclxuXHJcblx0Ly8gQ2hlY2sgdG8gc2VlIGlmIHdlIGhhdmUgYSByZXNwb25zZSBmb3IgdGhlIGV4cGVjdGVkIGRhdGFUeXBlXHJcblx0aWYgKCBkYXRhVHlwZXNbIDAgXSBpbiByZXNwb25zZXMgKSB7XHJcblx0XHRmaW5hbERhdGFUeXBlID0gZGF0YVR5cGVzWyAwIF07XHJcblx0fSBlbHNlIHtcclxuXHJcblx0XHQvLyBUcnkgY29udmVydGlibGUgZGF0YVR5cGVzXHJcblx0XHRmb3IgKCB0eXBlIGluIHJlc3BvbnNlcyApIHtcclxuXHRcdFx0aWYgKCAhZGF0YVR5cGVzWyAwIF0gfHwgcy5jb252ZXJ0ZXJzWyB0eXBlICsgXCIgXCIgKyBkYXRhVHlwZXNbIDAgXSBdICkge1xyXG5cdFx0XHRcdGZpbmFsRGF0YVR5cGUgPSB0eXBlO1xyXG5cdFx0XHRcdGJyZWFrO1xyXG5cdFx0XHR9XHJcblx0XHRcdGlmICggIWZpcnN0RGF0YVR5cGUgKSB7XHJcblx0XHRcdFx0Zmlyc3REYXRhVHlwZSA9IHR5cGU7XHJcblx0XHRcdH1cclxuXHRcdH1cclxuXHJcblx0XHQvLyBPciBqdXN0IHVzZSBmaXJzdCBvbmVcclxuXHRcdGZpbmFsRGF0YVR5cGUgPSBmaW5hbERhdGFUeXBlIHx8IGZpcnN0RGF0YVR5cGU7XHJcblx0fVxyXG5cclxuXHQvLyBJZiB3ZSBmb3VuZCBhIGRhdGFUeXBlXHJcblx0Ly8gV2UgYWRkIHRoZSBkYXRhVHlwZSB0byB0aGUgbGlzdCBpZiBuZWVkZWRcclxuXHQvLyBhbmQgcmV0dXJuIHRoZSBjb3JyZXNwb25kaW5nIHJlc3BvbnNlXHJcblx0aWYgKCBmaW5hbERhdGFUeXBlICkge1xyXG5cdFx0aWYgKCBmaW5hbERhdGFUeXBlICE9PSBkYXRhVHlwZXNbIDAgXSApIHtcclxuXHRcdFx0ZGF0YVR5cGVzLnVuc2hpZnQoIGZpbmFsRGF0YVR5cGUgKTtcclxuXHRcdH1cclxuXHRcdHJldHVybiByZXNwb25zZXNbIGZpbmFsRGF0YVR5cGUgXTtcclxuXHR9XHJcbn1cclxuXHJcbi8qIENoYWluIGNvbnZlcnNpb25zIGdpdmVuIHRoZSByZXF1ZXN0IGFuZCB0aGUgb3JpZ2luYWwgcmVzcG9uc2VcclxuICogQWxzbyBzZXRzIHRoZSByZXNwb25zZVhYWCBmaWVsZHMgb24gdGhlIGpxWEhSIGluc3RhbmNlXHJcbiAqL1xyXG5mdW5jdGlvbiBhamF4Q29udmVydCggcywgcmVzcG9uc2UsIGpxWEhSLCBpc1N1Y2Nlc3MgKSB7XHJcblx0dmFyIGNvbnYyLCBjdXJyZW50LCBjb252LCB0bXAsIHByZXYsXHJcblx0XHRjb252ZXJ0ZXJzID0ge30sXHJcblxyXG5cdFx0Ly8gV29yayB3aXRoIGEgY29weSBvZiBkYXRhVHlwZXMgaW4gY2FzZSB3ZSBuZWVkIHRvIG1vZGlmeSBpdCBmb3IgY29udmVyc2lvblxyXG5cdFx0ZGF0YVR5cGVzID0gcy5kYXRhVHlwZXMuc2xpY2UoKTtcclxuXHJcblx0Ly8gQ3JlYXRlIGNvbnZlcnRlcnMgbWFwIHdpdGggbG93ZXJjYXNlZCBrZXlzXHJcblx0aWYgKCBkYXRhVHlwZXNbIDEgXSApIHtcclxuXHRcdGZvciAoIGNvbnYgaW4gcy5jb252ZXJ0ZXJzICkge1xyXG5cdFx0XHRjb252ZXJ0ZXJzWyBjb252LnRvTG93ZXJDYXNlKCkgXSA9IHMuY29udmVydGVyc1sgY29udiBdO1xyXG5cdFx0fVxyXG5cdH1cclxuXHJcblx0Y3VycmVudCA9IGRhdGFUeXBlcy5zaGlmdCgpO1xyXG5cclxuXHQvLyBDb252ZXJ0IHRvIGVhY2ggc2VxdWVudGlhbCBkYXRhVHlwZVxyXG5cdHdoaWxlICggY3VycmVudCApIHtcclxuXHJcblx0XHRpZiAoIHMucmVzcG9uc2VGaWVsZHNbIGN1cnJlbnQgXSApIHtcclxuXHRcdFx0anFYSFJbIHMucmVzcG9uc2VGaWVsZHNbIGN1cnJlbnQgXSBdID0gcmVzcG9uc2U7XHJcblx0XHR9XHJcblxyXG5cdFx0Ly8gQXBwbHkgdGhlIGRhdGFGaWx0ZXIgaWYgcHJvdmlkZWRcclxuXHRcdGlmICggIXByZXYgJiYgaXNTdWNjZXNzICYmIHMuZGF0YUZpbHRlciApIHtcclxuXHRcdFx0cmVzcG9uc2UgPSBzLmRhdGFGaWx0ZXIoIHJlc3BvbnNlLCBzLmRhdGFUeXBlICk7XHJcblx0XHR9XHJcblxyXG5cdFx0cHJldiA9IGN1cnJlbnQ7XHJcblx0XHRjdXJyZW50ID0gZGF0YVR5cGVzLnNoaWZ0KCk7XHJcblxyXG5cdFx0aWYgKCBjdXJyZW50ICkge1xyXG5cclxuXHRcdC8vIFRoZXJlJ3Mgb25seSB3b3JrIHRvIGRvIGlmIGN1cnJlbnQgZGF0YVR5cGUgaXMgbm9uLWF1dG9cclxuXHRcdFx0aWYgKCBjdXJyZW50ID09PSBcIipcIiApIHtcclxuXHJcblx0XHRcdFx0Y3VycmVudCA9IHByZXY7XHJcblxyXG5cdFx0XHQvLyBDb252ZXJ0IHJlc3BvbnNlIGlmIHByZXYgZGF0YVR5cGUgaXMgbm9uLWF1dG8gYW5kIGRpZmZlcnMgZnJvbSBjdXJyZW50XHJcblx0XHRcdH0gZWxzZSBpZiAoIHByZXYgIT09IFwiKlwiICYmIHByZXYgIT09IGN1cnJlbnQgKSB7XHJcblxyXG5cdFx0XHRcdC8vIFNlZWsgYSBkaXJlY3QgY29udmVydGVyXHJcblx0XHRcdFx0Y29udiA9IGNvbnZlcnRlcnNbIHByZXYgKyBcIiBcIiArIGN1cnJlbnQgXSB8fCBjb252ZXJ0ZXJzWyBcIiogXCIgKyBjdXJyZW50IF07XHJcblxyXG5cdFx0XHRcdC8vIElmIG5vbmUgZm91bmQsIHNlZWsgYSBwYWlyXHJcblx0XHRcdFx0aWYgKCAhY29udiApIHtcclxuXHRcdFx0XHRcdGZvciAoIGNvbnYyIGluIGNvbnZlcnRlcnMgKSB7XHJcblxyXG5cdFx0XHRcdFx0XHQvLyBJZiBjb252MiBvdXRwdXRzIGN1cnJlbnRcclxuXHRcdFx0XHRcdFx0dG1wID0gY29udjIuc3BsaXQoIFwiIFwiICk7XHJcblx0XHRcdFx0XHRcdGlmICggdG1wWyAxIF0gPT09IGN1cnJlbnQgKSB7XHJcblxyXG5cdFx0XHRcdFx0XHRcdC8vIElmIHByZXYgY2FuIGJlIGNvbnZlcnRlZCB0byBhY2NlcHRlZCBpbnB1dFxyXG5cdFx0XHRcdFx0XHRcdGNvbnYgPSBjb252ZXJ0ZXJzWyBwcmV2ICsgXCIgXCIgKyB0bXBbIDAgXSBdIHx8XHJcblx0XHRcdFx0XHRcdFx0XHRjb252ZXJ0ZXJzWyBcIiogXCIgKyB0bXBbIDAgXSBdO1xyXG5cdFx0XHRcdFx0XHRcdGlmICggY29udiApIHtcclxuXHJcblx0XHRcdFx0XHRcdFx0XHQvLyBDb25kZW5zZSBlcXVpdmFsZW5jZSBjb252ZXJ0ZXJzXHJcblx0XHRcdFx0XHRcdFx0XHRpZiAoIGNvbnYgPT09IHRydWUgKSB7XHJcblx0XHRcdFx0XHRcdFx0XHRcdGNvbnYgPSBjb252ZXJ0ZXJzWyBjb252MiBdO1xyXG5cclxuXHRcdFx0XHRcdFx0XHRcdC8vIE90aGVyd2lzZSwgaW5zZXJ0IHRoZSBpbnRlcm1lZGlhdGUgZGF0YVR5cGVcclxuXHRcdFx0XHRcdFx0XHRcdH0gZWxzZSBpZiAoIGNvbnZlcnRlcnNbIGNvbnYyIF0gIT09IHRydWUgKSB7XHJcblx0XHRcdFx0XHRcdFx0XHRcdGN1cnJlbnQgPSB0bXBbIDAgXTtcclxuXHRcdFx0XHRcdFx0XHRcdFx0ZGF0YVR5cGVzLnVuc2hpZnQoIHRtcFsgMSBdICk7XHJcblx0XHRcdFx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHRcdFx0XHRicmVhaztcclxuXHRcdFx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdH1cclxuXHRcdFx0XHR9XHJcblxyXG5cdFx0XHRcdC8vIEFwcGx5IGNvbnZlcnRlciAoaWYgbm90IGFuIGVxdWl2YWxlbmNlKVxyXG5cdFx0XHRcdGlmICggY29udiAhPT0gdHJ1ZSApIHtcclxuXHJcblx0XHRcdFx0XHQvLyBVbmxlc3MgZXJyb3JzIGFyZSBhbGxvd2VkIHRvIGJ1YmJsZSwgY2F0Y2ggYW5kIHJldHVybiB0aGVtXHJcblx0XHRcdFx0XHRpZiAoIGNvbnYgJiYgcy50aHJvd3MgKSB7XHJcblx0XHRcdFx0XHRcdHJlc3BvbnNlID0gY29udiggcmVzcG9uc2UgKTtcclxuXHRcdFx0XHRcdH0gZWxzZSB7XHJcblx0XHRcdFx0XHRcdHRyeSB7XHJcblx0XHRcdFx0XHRcdFx0cmVzcG9uc2UgPSBjb252KCByZXNwb25zZSApO1xyXG5cdFx0XHRcdFx0XHR9IGNhdGNoICggZSApIHtcclxuXHRcdFx0XHRcdFx0XHRyZXR1cm4ge1xyXG5cdFx0XHRcdFx0XHRcdFx0c3RhdGU6IFwicGFyc2VyZXJyb3JcIixcclxuXHRcdFx0XHRcdFx0XHRcdGVycm9yOiBjb252ID8gZSA6IFwiTm8gY29udmVyc2lvbiBmcm9tIFwiICsgcHJldiArIFwiIHRvIFwiICsgY3VycmVudFxyXG5cdFx0XHRcdFx0XHRcdH07XHJcblx0XHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdH1cclxuXHRcdFx0XHR9XHJcblx0XHRcdH1cclxuXHRcdH1cclxuXHR9XHJcblxyXG5cdHJldHVybiB7IHN0YXRlOiBcInN1Y2Nlc3NcIiwgZGF0YTogcmVzcG9uc2UgfTtcclxufVxyXG5cclxualF1ZXJ5LmV4dGVuZCgge1xyXG5cclxuXHQvLyBDb3VudGVyIGZvciBob2xkaW5nIHRoZSBudW1iZXIgb2YgYWN0aXZlIHF1ZXJpZXNcclxuXHRhY3RpdmU6IDAsXHJcblxyXG5cdC8vIExhc3QtTW9kaWZpZWQgaGVhZGVyIGNhY2hlIGZvciBuZXh0IHJlcXVlc3RcclxuXHRsYXN0TW9kaWZpZWQ6IHt9LFxyXG5cdGV0YWc6IHt9LFxyXG5cclxuXHRhamF4U2V0dGluZ3M6IHtcclxuXHRcdHVybDogbG9jYXRpb24uaHJlZixcclxuXHRcdHR5cGU6IFwiR0VUXCIsXHJcblx0XHRpc0xvY2FsOiBybG9jYWxQcm90b2NvbC50ZXN0KCBsb2NhdGlvbi5wcm90b2NvbCApLFxyXG5cdFx0Z2xvYmFsOiB0cnVlLFxyXG5cdFx0cHJvY2Vzc0RhdGE6IHRydWUsXHJcblx0XHRhc3luYzogdHJ1ZSxcclxuXHRcdGNvbnRlbnRUeXBlOiBcImFwcGxpY2F0aW9uL3gtd3d3LWZvcm0tdXJsZW5jb2RlZDsgY2hhcnNldD1VVEYtOFwiLFxyXG5cdFx0LypcclxuXHRcdHRpbWVvdXQ6IDAsXHJcblx0XHRkYXRhOiBudWxsLFxyXG5cdFx0ZGF0YVR5cGU6IG51bGwsXHJcblx0XHR1c2VybmFtZTogbnVsbCxcclxuXHRcdHBhc3N3b3JkOiBudWxsLFxyXG5cdFx0Y2FjaGU6IG51bGwsXHJcblx0XHR0aHJvd3M6IGZhbHNlLFxyXG5cdFx0dHJhZGl0aW9uYWw6IGZhbHNlLFxyXG5cdFx0aGVhZGVyczoge30sXHJcblx0XHQqL1xyXG5cclxuXHRcdGFjY2VwdHM6IHtcclxuXHRcdFx0XCIqXCI6IGFsbFR5cGVzLFxyXG5cdFx0XHR0ZXh0OiBcInRleHQvcGxhaW5cIixcclxuXHRcdFx0aHRtbDogXCJ0ZXh0L2h0bWxcIixcclxuXHRcdFx0eG1sOiBcImFwcGxpY2F0aW9uL3htbCwgdGV4dC94bWxcIixcclxuXHRcdFx0anNvbjogXCJhcHBsaWNhdGlvbi9qc29uLCB0ZXh0L2phdmFzY3JpcHRcIlxyXG5cdFx0fSxcclxuXHJcblx0XHRjb250ZW50czoge1xyXG5cdFx0XHR4bWw6IC9cXGJ4bWxcXGIvLFxyXG5cdFx0XHRodG1sOiAvXFxiaHRtbC8sXHJcblx0XHRcdGpzb246IC9cXGJqc29uXFxiL1xyXG5cdFx0fSxcclxuXHJcblx0XHRyZXNwb25zZUZpZWxkczoge1xyXG5cdFx0XHR4bWw6IFwicmVzcG9uc2VYTUxcIixcclxuXHRcdFx0dGV4dDogXCJyZXNwb25zZVRleHRcIixcclxuXHRcdFx0anNvbjogXCJyZXNwb25zZUpTT05cIlxyXG5cdFx0fSxcclxuXHJcblx0XHQvLyBEYXRhIGNvbnZlcnRlcnNcclxuXHRcdC8vIEtleXMgc2VwYXJhdGUgc291cmNlIChvciBjYXRjaGFsbCBcIipcIikgYW5kIGRlc3RpbmF0aW9uIHR5cGVzIHdpdGggYSBzaW5nbGUgc3BhY2VcclxuXHRcdGNvbnZlcnRlcnM6IHtcclxuXHJcblx0XHRcdC8vIENvbnZlcnQgYW55dGhpbmcgdG8gdGV4dFxyXG5cdFx0XHRcIiogdGV4dFwiOiBTdHJpbmcsXHJcblxyXG5cdFx0XHQvLyBUZXh0IHRvIGh0bWwgKHRydWUgPSBubyB0cmFuc2Zvcm1hdGlvbilcclxuXHRcdFx0XCJ0ZXh0IGh0bWxcIjogdHJ1ZSxcclxuXHJcblx0XHRcdC8vIEV2YWx1YXRlIHRleHQgYXMgYSBqc29uIGV4cHJlc3Npb25cclxuXHRcdFx0XCJ0ZXh0IGpzb25cIjogalF1ZXJ5LnBhcnNlSlNPTixcclxuXHJcblx0XHRcdC8vIFBhcnNlIHRleHQgYXMgeG1sXHJcblx0XHRcdFwidGV4dCB4bWxcIjogalF1ZXJ5LnBhcnNlWE1MXHJcblx0XHR9LFxyXG5cclxuXHRcdC8vIEZvciBvcHRpb25zIHRoYXQgc2hvdWxkbid0IGJlIGRlZXAgZXh0ZW5kZWQ6XHJcblx0XHQvLyB5b3UgY2FuIGFkZCB5b3VyIG93biBjdXN0b20gb3B0aW9ucyBoZXJlIGlmXHJcblx0XHQvLyBhbmQgd2hlbiB5b3UgY3JlYXRlIG9uZSB0aGF0IHNob3VsZG4ndCBiZVxyXG5cdFx0Ly8gZGVlcCBleHRlbmRlZCAoc2VlIGFqYXhFeHRlbmQpXHJcblx0XHRmbGF0T3B0aW9uczoge1xyXG5cdFx0XHR1cmw6IHRydWUsXHJcblx0XHRcdGNvbnRleHQ6IHRydWVcclxuXHRcdH1cclxuXHR9LFxyXG5cclxuXHQvLyBDcmVhdGVzIGEgZnVsbCBmbGVkZ2VkIHNldHRpbmdzIG9iamVjdCBpbnRvIHRhcmdldFxyXG5cdC8vIHdpdGggYm90aCBhamF4U2V0dGluZ3MgYW5kIHNldHRpbmdzIGZpZWxkcy5cclxuXHQvLyBJZiB0YXJnZXQgaXMgb21pdHRlZCwgd3JpdGVzIGludG8gYWpheFNldHRpbmdzLlxyXG5cdGFqYXhTZXR1cDogZnVuY3Rpb24oIHRhcmdldCwgc2V0dGluZ3MgKSB7XHJcblx0XHRyZXR1cm4gc2V0dGluZ3MgP1xyXG5cclxuXHRcdFx0Ly8gQnVpbGRpbmcgYSBzZXR0aW5ncyBvYmplY3RcclxuXHRcdFx0YWpheEV4dGVuZCggYWpheEV4dGVuZCggdGFyZ2V0LCBqUXVlcnkuYWpheFNldHRpbmdzICksIHNldHRpbmdzICkgOlxyXG5cclxuXHRcdFx0Ly8gRXh0ZW5kaW5nIGFqYXhTZXR0aW5nc1xyXG5cdFx0XHRhamF4RXh0ZW5kKCBqUXVlcnkuYWpheFNldHRpbmdzLCB0YXJnZXQgKTtcclxuXHR9LFxyXG5cclxuXHRhamF4UHJlZmlsdGVyOiBhZGRUb1ByZWZpbHRlcnNPclRyYW5zcG9ydHMoIHByZWZpbHRlcnMgKSxcclxuXHRhamF4VHJhbnNwb3J0OiBhZGRUb1ByZWZpbHRlcnNPclRyYW5zcG9ydHMoIHRyYW5zcG9ydHMgKSxcclxuXHJcblx0Ly8gTWFpbiBtZXRob2RcclxuXHRhamF4OiBmdW5jdGlvbiggdXJsLCBvcHRpb25zICkge1xyXG5cclxuXHRcdC8vIElmIHVybCBpcyBhbiBvYmplY3QsIHNpbXVsYXRlIHByZS0xLjUgc2lnbmF0dXJlXHJcblx0XHRpZiAoIHR5cGVvZiB1cmwgPT09IFwib2JqZWN0XCIgKSB7XHJcblx0XHRcdG9wdGlvbnMgPSB1cmw7XHJcblx0XHRcdHVybCA9IHVuZGVmaW5lZDtcclxuXHRcdH1cclxuXHJcblx0XHQvLyBGb3JjZSBvcHRpb25zIHRvIGJlIGFuIG9iamVjdFxyXG5cdFx0b3B0aW9ucyA9IG9wdGlvbnMgfHwge307XHJcblxyXG5cdFx0dmFyIHRyYW5zcG9ydCxcclxuXHJcblx0XHRcdC8vIFVSTCB3aXRob3V0IGFudGktY2FjaGUgcGFyYW1cclxuXHRcdFx0Y2FjaGVVUkwsXHJcblxyXG5cdFx0XHQvLyBSZXNwb25zZSBoZWFkZXJzXHJcblx0XHRcdHJlc3BvbnNlSGVhZGVyc1N0cmluZyxcclxuXHRcdFx0cmVzcG9uc2VIZWFkZXJzLFxyXG5cclxuXHRcdFx0Ly8gdGltZW91dCBoYW5kbGVcclxuXHRcdFx0dGltZW91dFRpbWVyLFxyXG5cclxuXHRcdFx0Ly8gVXJsIGNsZWFudXAgdmFyXHJcblx0XHRcdHVybEFuY2hvcixcclxuXHJcblx0XHRcdC8vIFRvIGtub3cgaWYgZ2xvYmFsIGV2ZW50cyBhcmUgdG8gYmUgZGlzcGF0Y2hlZFxyXG5cdFx0XHRmaXJlR2xvYmFscyxcclxuXHJcblx0XHRcdC8vIExvb3AgdmFyaWFibGVcclxuXHRcdFx0aSxcclxuXHJcblx0XHRcdC8vIENyZWF0ZSB0aGUgZmluYWwgb3B0aW9ucyBvYmplY3RcclxuXHRcdFx0cyA9IGpRdWVyeS5hamF4U2V0dXAoIHt9LCBvcHRpb25zICksXHJcblxyXG5cdFx0XHQvLyBDYWxsYmFja3MgY29udGV4dFxyXG5cdFx0XHRjYWxsYmFja0NvbnRleHQgPSBzLmNvbnRleHQgfHwgcyxcclxuXHJcblx0XHRcdC8vIENvbnRleHQgZm9yIGdsb2JhbCBldmVudHMgaXMgY2FsbGJhY2tDb250ZXh0IGlmIGl0IGlzIGEgRE9NIG5vZGUgb3IgalF1ZXJ5IGNvbGxlY3Rpb25cclxuXHRcdFx0Z2xvYmFsRXZlbnRDb250ZXh0ID0gcy5jb250ZXh0ICYmXHJcblx0XHRcdFx0KCBjYWxsYmFja0NvbnRleHQubm9kZVR5cGUgfHwgY2FsbGJhY2tDb250ZXh0LmpxdWVyeSApID9cclxuXHRcdFx0XHRcdGpRdWVyeSggY2FsbGJhY2tDb250ZXh0ICkgOlxyXG5cdFx0XHRcdFx0alF1ZXJ5LmV2ZW50LFxyXG5cclxuXHRcdFx0Ly8gRGVmZXJyZWRzXHJcblx0XHRcdGRlZmVycmVkID0galF1ZXJ5LkRlZmVycmVkKCksXHJcblx0XHRcdGNvbXBsZXRlRGVmZXJyZWQgPSBqUXVlcnkuQ2FsbGJhY2tzKCBcIm9uY2UgbWVtb3J5XCIgKSxcclxuXHJcblx0XHRcdC8vIFN0YXR1cy1kZXBlbmRlbnQgY2FsbGJhY2tzXHJcblx0XHRcdHN0YXR1c0NvZGUgPSBzLnN0YXR1c0NvZGUgfHwge30sXHJcblxyXG5cdFx0XHQvLyBIZWFkZXJzICh0aGV5IGFyZSBzZW50IGFsbCBhdCBvbmNlKVxyXG5cdFx0XHRyZXF1ZXN0SGVhZGVycyA9IHt9LFxyXG5cdFx0XHRyZXF1ZXN0SGVhZGVyc05hbWVzID0ge30sXHJcblxyXG5cdFx0XHQvLyBUaGUganFYSFIgc3RhdGVcclxuXHRcdFx0c3RhdGUgPSAwLFxyXG5cclxuXHRcdFx0Ly8gRGVmYXVsdCBhYm9ydCBtZXNzYWdlXHJcblx0XHRcdHN0ckFib3J0ID0gXCJjYW5jZWxlZFwiLFxyXG5cclxuXHRcdFx0Ly8gRmFrZSB4aHJcclxuXHRcdFx0anFYSFIgPSB7XHJcblx0XHRcdFx0cmVhZHlTdGF0ZTogMCxcclxuXHJcblx0XHRcdFx0Ly8gQnVpbGRzIGhlYWRlcnMgaGFzaHRhYmxlIGlmIG5lZWRlZFxyXG5cdFx0XHRcdGdldFJlc3BvbnNlSGVhZGVyOiBmdW5jdGlvbigga2V5ICkge1xyXG5cdFx0XHRcdFx0dmFyIG1hdGNoO1xyXG5cdFx0XHRcdFx0aWYgKCBzdGF0ZSA9PT0gMiApIHtcclxuXHRcdFx0XHRcdFx0aWYgKCAhcmVzcG9uc2VIZWFkZXJzICkge1xyXG5cdFx0XHRcdFx0XHRcdHJlc3BvbnNlSGVhZGVycyA9IHt9O1xyXG5cdFx0XHRcdFx0XHRcdHdoaWxlICggKCBtYXRjaCA9IHJoZWFkZXJzLmV4ZWMoIHJlc3BvbnNlSGVhZGVyc1N0cmluZyApICkgKSB7XHJcblx0XHRcdFx0XHRcdFx0XHRyZXNwb25zZUhlYWRlcnNbIG1hdGNoWyAxIF0udG9Mb3dlckNhc2UoKSBdID0gbWF0Y2hbIDIgXTtcclxuXHRcdFx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdFx0bWF0Y2ggPSByZXNwb25zZUhlYWRlcnNbIGtleS50b0xvd2VyQ2FzZSgpIF07XHJcblx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHRyZXR1cm4gbWF0Y2ggPT0gbnVsbCA/IG51bGwgOiBtYXRjaDtcclxuXHRcdFx0XHR9LFxyXG5cclxuXHRcdFx0XHQvLyBSYXcgc3RyaW5nXHJcblx0XHRcdFx0Z2V0QWxsUmVzcG9uc2VIZWFkZXJzOiBmdW5jdGlvbigpIHtcclxuXHRcdFx0XHRcdHJldHVybiBzdGF0ZSA9PT0gMiA/IHJlc3BvbnNlSGVhZGVyc1N0cmluZyA6IG51bGw7XHJcblx0XHRcdFx0fSxcclxuXHJcblx0XHRcdFx0Ly8gQ2FjaGVzIHRoZSBoZWFkZXJcclxuXHRcdFx0XHRzZXRSZXF1ZXN0SGVhZGVyOiBmdW5jdGlvbiggbmFtZSwgdmFsdWUgKSB7XHJcblx0XHRcdFx0XHR2YXIgbG5hbWUgPSBuYW1lLnRvTG93ZXJDYXNlKCk7XHJcblx0XHRcdFx0XHRpZiAoICFzdGF0ZSApIHtcclxuXHRcdFx0XHRcdFx0bmFtZSA9IHJlcXVlc3RIZWFkZXJzTmFtZXNbIGxuYW1lIF0gPSByZXF1ZXN0SGVhZGVyc05hbWVzWyBsbmFtZSBdIHx8IG5hbWU7XHJcblx0XHRcdFx0XHRcdHJlcXVlc3RIZWFkZXJzWyBuYW1lIF0gPSB2YWx1ZTtcclxuXHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdHJldHVybiB0aGlzO1xyXG5cdFx0XHRcdH0sXHJcblxyXG5cdFx0XHRcdC8vIE92ZXJyaWRlcyByZXNwb25zZSBjb250ZW50LXR5cGUgaGVhZGVyXHJcblx0XHRcdFx0b3ZlcnJpZGVNaW1lVHlwZTogZnVuY3Rpb24oIHR5cGUgKSB7XHJcblx0XHRcdFx0XHRpZiAoICFzdGF0ZSApIHtcclxuXHRcdFx0XHRcdFx0cy5taW1lVHlwZSA9IHR5cGU7XHJcblx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHRyZXR1cm4gdGhpcztcclxuXHRcdFx0XHR9LFxyXG5cclxuXHRcdFx0XHQvLyBTdGF0dXMtZGVwZW5kZW50IGNhbGxiYWNrc1xyXG5cdFx0XHRcdHN0YXR1c0NvZGU6IGZ1bmN0aW9uKCBtYXAgKSB7XHJcblx0XHRcdFx0XHR2YXIgY29kZTtcclxuXHRcdFx0XHRcdGlmICggbWFwICkge1xyXG5cdFx0XHRcdFx0XHRpZiAoIHN0YXRlIDwgMiApIHtcclxuXHRcdFx0XHRcdFx0XHRmb3IgKCBjb2RlIGluIG1hcCApIHtcclxuXHJcblx0XHRcdFx0XHRcdFx0XHQvLyBMYXp5LWFkZCB0aGUgbmV3IGNhbGxiYWNrIGluIGEgd2F5IHRoYXQgcHJlc2VydmVzIG9sZCBvbmVzXHJcblx0XHRcdFx0XHRcdFx0XHRzdGF0dXNDb2RlWyBjb2RlIF0gPSBbIHN0YXR1c0NvZGVbIGNvZGUgXSwgbWFwWyBjb2RlIF0gXTtcclxuXHRcdFx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHRcdH0gZWxzZSB7XHJcblxyXG5cdFx0XHRcdFx0XHRcdC8vIEV4ZWN1dGUgdGhlIGFwcHJvcHJpYXRlIGNhbGxiYWNrc1xyXG5cdFx0XHRcdFx0XHRcdGpxWEhSLmFsd2F5cyggbWFwWyBqcVhIUi5zdGF0dXMgXSApO1xyXG5cdFx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHRyZXR1cm4gdGhpcztcclxuXHRcdFx0XHR9LFxyXG5cclxuXHRcdFx0XHQvLyBDYW5jZWwgdGhlIHJlcXVlc3RcclxuXHRcdFx0XHRhYm9ydDogZnVuY3Rpb24oIHN0YXR1c1RleHQgKSB7XHJcblx0XHRcdFx0XHR2YXIgZmluYWxUZXh0ID0gc3RhdHVzVGV4dCB8fCBzdHJBYm9ydDtcclxuXHRcdFx0XHRcdGlmICggdHJhbnNwb3J0ICkge1xyXG5cdFx0XHRcdFx0XHR0cmFuc3BvcnQuYWJvcnQoIGZpbmFsVGV4dCApO1xyXG5cdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0ZG9uZSggMCwgZmluYWxUZXh0ICk7XHJcblx0XHRcdFx0XHRyZXR1cm4gdGhpcztcclxuXHRcdFx0XHR9XHJcblx0XHRcdH07XHJcblxyXG5cdFx0Ly8gQXR0YWNoIGRlZmVycmVkc1xyXG5cdFx0ZGVmZXJyZWQucHJvbWlzZSgganFYSFIgKS5jb21wbGV0ZSA9IGNvbXBsZXRlRGVmZXJyZWQuYWRkO1xyXG5cdFx0anFYSFIuc3VjY2VzcyA9IGpxWEhSLmRvbmU7XHJcblx0XHRqcVhIUi5lcnJvciA9IGpxWEhSLmZhaWw7XHJcblxyXG5cdFx0Ly8gUmVtb3ZlIGhhc2ggY2hhcmFjdGVyICgjNzUzMTogYW5kIHN0cmluZyBwcm9tb3Rpb24pXHJcblx0XHQvLyBBZGQgcHJvdG9jb2wgaWYgbm90IHByb3ZpZGVkIChwcmVmaWx0ZXJzIG1pZ2h0IGV4cGVjdCBpdClcclxuXHRcdC8vIEhhbmRsZSBmYWxzeSB1cmwgaW4gdGhlIHNldHRpbmdzIG9iamVjdCAoIzEwMDkzOiBjb25zaXN0ZW5jeSB3aXRoIG9sZCBzaWduYXR1cmUpXHJcblx0XHQvLyBXZSBhbHNvIHVzZSB0aGUgdXJsIHBhcmFtZXRlciBpZiBhdmFpbGFibGVcclxuXHRcdHMudXJsID0gKCAoIHVybCB8fCBzLnVybCB8fCBsb2NhdGlvbi5ocmVmICkgKyBcIlwiICkucmVwbGFjZSggcmhhc2gsIFwiXCIgKVxyXG5cdFx0XHQucmVwbGFjZSggcnByb3RvY29sLCBsb2NhdGlvbi5wcm90b2NvbCArIFwiLy9cIiApO1xyXG5cclxuXHRcdC8vIEFsaWFzIG1ldGhvZCBvcHRpb24gdG8gdHlwZSBhcyBwZXIgdGlja2V0ICMxMjAwNFxyXG5cdFx0cy50eXBlID0gb3B0aW9ucy5tZXRob2QgfHwgb3B0aW9ucy50eXBlIHx8IHMubWV0aG9kIHx8IHMudHlwZTtcclxuXHJcblx0XHQvLyBFeHRyYWN0IGRhdGFUeXBlcyBsaXN0XHJcblx0XHRzLmRhdGFUeXBlcyA9IGpRdWVyeS50cmltKCBzLmRhdGFUeXBlIHx8IFwiKlwiICkudG9Mb3dlckNhc2UoKS5tYXRjaCggcm5vdHdoaXRlICkgfHwgWyBcIlwiIF07XHJcblxyXG5cdFx0Ly8gQSBjcm9zcy1kb21haW4gcmVxdWVzdCBpcyBpbiBvcmRlciB3aGVuIHRoZSBvcmlnaW4gZG9lc24ndCBtYXRjaCB0aGUgY3VycmVudCBvcmlnaW4uXHJcblx0XHRpZiAoIHMuY3Jvc3NEb21haW4gPT0gbnVsbCApIHtcclxuXHRcdFx0dXJsQW5jaG9yID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCggXCJhXCIgKTtcclxuXHJcblx0XHRcdC8vIFN1cHBvcnQ6IElFOC0xMStcclxuXHRcdFx0Ly8gSUUgdGhyb3dzIGV4Y2VwdGlvbiBpZiB1cmwgaXMgbWFsZm9ybWVkLCBlLmcuIGh0dHA6Ly9leGFtcGxlLmNvbTo4MHgvXHJcblx0XHRcdHRyeSB7XHJcblx0XHRcdFx0dXJsQW5jaG9yLmhyZWYgPSBzLnVybDtcclxuXHJcblx0XHRcdFx0Ly8gU3VwcG9ydDogSUU4LTExK1xyXG5cdFx0XHRcdC8vIEFuY2hvcidzIGhvc3QgcHJvcGVydHkgaXNuJ3QgY29ycmVjdGx5IHNldCB3aGVuIHMudXJsIGlzIHJlbGF0aXZlXHJcblx0XHRcdFx0dXJsQW5jaG9yLmhyZWYgPSB1cmxBbmNob3IuaHJlZjtcclxuXHRcdFx0XHRzLmNyb3NzRG9tYWluID0gb3JpZ2luQW5jaG9yLnByb3RvY29sICsgXCIvL1wiICsgb3JpZ2luQW5jaG9yLmhvc3QgIT09XHJcblx0XHRcdFx0XHR1cmxBbmNob3IucHJvdG9jb2wgKyBcIi8vXCIgKyB1cmxBbmNob3IuaG9zdDtcclxuXHRcdFx0fSBjYXRjaCAoIGUgKSB7XHJcblxyXG5cdFx0XHRcdC8vIElmIHRoZXJlIGlzIGFuIGVycm9yIHBhcnNpbmcgdGhlIFVSTCwgYXNzdW1lIGl0IGlzIGNyb3NzRG9tYWluLFxyXG5cdFx0XHRcdC8vIGl0IGNhbiBiZSByZWplY3RlZCBieSB0aGUgdHJhbnNwb3J0IGlmIGl0IGlzIGludmFsaWRcclxuXHRcdFx0XHRzLmNyb3NzRG9tYWluID0gdHJ1ZTtcclxuXHRcdFx0fVxyXG5cdFx0fVxyXG5cclxuXHRcdC8vIENvbnZlcnQgZGF0YSBpZiBub3QgYWxyZWFkeSBhIHN0cmluZ1xyXG5cdFx0aWYgKCBzLmRhdGEgJiYgcy5wcm9jZXNzRGF0YSAmJiB0eXBlb2Ygcy5kYXRhICE9PSBcInN0cmluZ1wiICkge1xyXG5cdFx0XHRzLmRhdGEgPSBqUXVlcnkucGFyYW0oIHMuZGF0YSwgcy50cmFkaXRpb25hbCApO1xyXG5cdFx0fVxyXG5cclxuXHRcdC8vIEFwcGx5IHByZWZpbHRlcnNcclxuXHRcdGluc3BlY3RQcmVmaWx0ZXJzT3JUcmFuc3BvcnRzKCBwcmVmaWx0ZXJzLCBzLCBvcHRpb25zLCBqcVhIUiApO1xyXG5cclxuXHRcdC8vIElmIHJlcXVlc3Qgd2FzIGFib3J0ZWQgaW5zaWRlIGEgcHJlZmlsdGVyLCBzdG9wIHRoZXJlXHJcblx0XHRpZiAoIHN0YXRlID09PSAyICkge1xyXG5cdFx0XHRyZXR1cm4ganFYSFI7XHJcblx0XHR9XHJcblxyXG5cdFx0Ly8gV2UgY2FuIGZpcmUgZ2xvYmFsIGV2ZW50cyBhcyBvZiBub3cgaWYgYXNrZWQgdG9cclxuXHRcdC8vIERvbid0IGZpcmUgZXZlbnRzIGlmIGpRdWVyeS5ldmVudCBpcyB1bmRlZmluZWQgaW4gYW4gQU1ELXVzYWdlIHNjZW5hcmlvICgjMTUxMTgpXHJcblx0XHRmaXJlR2xvYmFscyA9IGpRdWVyeS5ldmVudCAmJiBzLmdsb2JhbDtcclxuXHJcblx0XHQvLyBXYXRjaCBmb3IgYSBuZXcgc2V0IG9mIHJlcXVlc3RzXHJcblx0XHRpZiAoIGZpcmVHbG9iYWxzICYmIGpRdWVyeS5hY3RpdmUrKyA9PT0gMCApIHtcclxuXHRcdFx0alF1ZXJ5LmV2ZW50LnRyaWdnZXIoIFwiYWpheFN0YXJ0XCIgKTtcclxuXHRcdH1cclxuXHJcblx0XHQvLyBVcHBlcmNhc2UgdGhlIHR5cGVcclxuXHRcdHMudHlwZSA9IHMudHlwZS50b1VwcGVyQ2FzZSgpO1xyXG5cclxuXHRcdC8vIERldGVybWluZSBpZiByZXF1ZXN0IGhhcyBjb250ZW50XHJcblx0XHRzLmhhc0NvbnRlbnQgPSAhcm5vQ29udGVudC50ZXN0KCBzLnR5cGUgKTtcclxuXHJcblx0XHQvLyBTYXZlIHRoZSBVUkwgaW4gY2FzZSB3ZSdyZSB0b3lpbmcgd2l0aCB0aGUgSWYtTW9kaWZpZWQtU2luY2VcclxuXHRcdC8vIGFuZC9vciBJZi1Ob25lLU1hdGNoIGhlYWRlciBsYXRlciBvblxyXG5cdFx0Y2FjaGVVUkwgPSBzLnVybDtcclxuXHJcblx0XHQvLyBNb3JlIG9wdGlvbnMgaGFuZGxpbmcgZm9yIHJlcXVlc3RzIHdpdGggbm8gY29udGVudFxyXG5cdFx0aWYgKCAhcy5oYXNDb250ZW50ICkge1xyXG5cclxuXHRcdFx0Ly8gSWYgZGF0YSBpcyBhdmFpbGFibGUsIGFwcGVuZCBkYXRhIHRvIHVybFxyXG5cdFx0XHRpZiAoIHMuZGF0YSApIHtcclxuXHRcdFx0XHRjYWNoZVVSTCA9ICggcy51cmwgKz0gKCBycXVlcnkudGVzdCggY2FjaGVVUkwgKSA/IFwiJlwiIDogXCI/XCIgKSArIHMuZGF0YSApO1xyXG5cclxuXHRcdFx0XHQvLyAjOTY4MjogcmVtb3ZlIGRhdGEgc28gdGhhdCBpdCdzIG5vdCB1c2VkIGluIGFuIGV2ZW50dWFsIHJldHJ5XHJcblx0XHRcdFx0ZGVsZXRlIHMuZGF0YTtcclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0Ly8gQWRkIGFudGktY2FjaGUgaW4gdXJsIGlmIG5lZWRlZFxyXG5cdFx0XHRpZiAoIHMuY2FjaGUgPT09IGZhbHNlICkge1xyXG5cdFx0XHRcdHMudXJsID0gcnRzLnRlc3QoIGNhY2hlVVJMICkgP1xyXG5cclxuXHRcdFx0XHRcdC8vIElmIHRoZXJlIGlzIGFscmVhZHkgYSAnXycgcGFyYW1ldGVyLCBzZXQgaXRzIHZhbHVlXHJcblx0XHRcdFx0XHRjYWNoZVVSTC5yZXBsYWNlKCBydHMsIFwiJDFfPVwiICsgbm9uY2UrKyApIDpcclxuXHJcblx0XHRcdFx0XHQvLyBPdGhlcndpc2UgYWRkIG9uZSB0byB0aGUgZW5kXHJcblx0XHRcdFx0XHRjYWNoZVVSTCArICggcnF1ZXJ5LnRlc3QoIGNhY2hlVVJMICkgPyBcIiZcIiA6IFwiP1wiICkgKyBcIl89XCIgKyBub25jZSsrO1xyXG5cdFx0XHR9XHJcblx0XHR9XHJcblxyXG5cdFx0Ly8gU2V0IHRoZSBJZi1Nb2RpZmllZC1TaW5jZSBhbmQvb3IgSWYtTm9uZS1NYXRjaCBoZWFkZXIsIGlmIGluIGlmTW9kaWZpZWQgbW9kZS5cclxuXHRcdGlmICggcy5pZk1vZGlmaWVkICkge1xyXG5cdFx0XHRpZiAoIGpRdWVyeS5sYXN0TW9kaWZpZWRbIGNhY2hlVVJMIF0gKSB7XHJcblx0XHRcdFx0anFYSFIuc2V0UmVxdWVzdEhlYWRlciggXCJJZi1Nb2RpZmllZC1TaW5jZVwiLCBqUXVlcnkubGFzdE1vZGlmaWVkWyBjYWNoZVVSTCBdICk7XHJcblx0XHRcdH1cclxuXHRcdFx0aWYgKCBqUXVlcnkuZXRhZ1sgY2FjaGVVUkwgXSApIHtcclxuXHRcdFx0XHRqcVhIUi5zZXRSZXF1ZXN0SGVhZGVyKCBcIklmLU5vbmUtTWF0Y2hcIiwgalF1ZXJ5LmV0YWdbIGNhY2hlVVJMIF0gKTtcclxuXHRcdFx0fVxyXG5cdFx0fVxyXG5cclxuXHRcdC8vIFNldCB0aGUgY29ycmVjdCBoZWFkZXIsIGlmIGRhdGEgaXMgYmVpbmcgc2VudFxyXG5cdFx0aWYgKCBzLmRhdGEgJiYgcy5oYXNDb250ZW50ICYmIHMuY29udGVudFR5cGUgIT09IGZhbHNlIHx8IG9wdGlvbnMuY29udGVudFR5cGUgKSB7XHJcblx0XHRcdGpxWEhSLnNldFJlcXVlc3RIZWFkZXIoIFwiQ29udGVudC1UeXBlXCIsIHMuY29udGVudFR5cGUgKTtcclxuXHRcdH1cclxuXHJcblx0XHQvLyBTZXQgdGhlIEFjY2VwdHMgaGVhZGVyIGZvciB0aGUgc2VydmVyLCBkZXBlbmRpbmcgb24gdGhlIGRhdGFUeXBlXHJcblx0XHRqcVhIUi5zZXRSZXF1ZXN0SGVhZGVyKFxyXG5cdFx0XHRcIkFjY2VwdFwiLFxyXG5cdFx0XHRzLmRhdGFUeXBlc1sgMCBdICYmIHMuYWNjZXB0c1sgcy5kYXRhVHlwZXNbIDAgXSBdID9cclxuXHRcdFx0XHRzLmFjY2VwdHNbIHMuZGF0YVR5cGVzWyAwIF0gXSArXHJcblx0XHRcdFx0XHQoIHMuZGF0YVR5cGVzWyAwIF0gIT09IFwiKlwiID8gXCIsIFwiICsgYWxsVHlwZXMgKyBcIjsgcT0wLjAxXCIgOiBcIlwiICkgOlxyXG5cdFx0XHRcdHMuYWNjZXB0c1sgXCIqXCIgXVxyXG5cdFx0KTtcclxuXHJcblx0XHQvLyBDaGVjayBmb3IgaGVhZGVycyBvcHRpb25cclxuXHRcdGZvciAoIGkgaW4gcy5oZWFkZXJzICkge1xyXG5cdFx0XHRqcVhIUi5zZXRSZXF1ZXN0SGVhZGVyKCBpLCBzLmhlYWRlcnNbIGkgXSApO1xyXG5cdFx0fVxyXG5cclxuXHRcdC8vIEFsbG93IGN1c3RvbSBoZWFkZXJzL21pbWV0eXBlcyBhbmQgZWFybHkgYWJvcnRcclxuXHRcdGlmICggcy5iZWZvcmVTZW5kICYmXHJcblx0XHRcdCggcy5iZWZvcmVTZW5kLmNhbGwoIGNhbGxiYWNrQ29udGV4dCwganFYSFIsIHMgKSA9PT0gZmFsc2UgfHwgc3RhdGUgPT09IDIgKSApIHtcclxuXHJcblx0XHRcdC8vIEFib3J0IGlmIG5vdCBkb25lIGFscmVhZHkgYW5kIHJldHVyblxyXG5cdFx0XHRyZXR1cm4ganFYSFIuYWJvcnQoKTtcclxuXHRcdH1cclxuXHJcblx0XHQvLyBBYm9ydGluZyBpcyBubyBsb25nZXIgYSBjYW5jZWxsYXRpb25cclxuXHRcdHN0ckFib3J0ID0gXCJhYm9ydFwiO1xyXG5cclxuXHRcdC8vIEluc3RhbGwgY2FsbGJhY2tzIG9uIGRlZmVycmVkc1xyXG5cdFx0Zm9yICggaSBpbiB7IHN1Y2Nlc3M6IDEsIGVycm9yOiAxLCBjb21wbGV0ZTogMSB9ICkge1xyXG5cdFx0XHRqcVhIUlsgaSBdKCBzWyBpIF0gKTtcclxuXHRcdH1cclxuXHJcblx0XHQvLyBHZXQgdHJhbnNwb3J0XHJcblx0XHR0cmFuc3BvcnQgPSBpbnNwZWN0UHJlZmlsdGVyc09yVHJhbnNwb3J0cyggdHJhbnNwb3J0cywgcywgb3B0aW9ucywganFYSFIgKTtcclxuXHJcblx0XHQvLyBJZiBubyB0cmFuc3BvcnQsIHdlIGF1dG8tYWJvcnRcclxuXHRcdGlmICggIXRyYW5zcG9ydCApIHtcclxuXHRcdFx0ZG9uZSggLTEsIFwiTm8gVHJhbnNwb3J0XCIgKTtcclxuXHRcdH0gZWxzZSB7XHJcblx0XHRcdGpxWEhSLnJlYWR5U3RhdGUgPSAxO1xyXG5cclxuXHRcdFx0Ly8gU2VuZCBnbG9iYWwgZXZlbnRcclxuXHRcdFx0aWYgKCBmaXJlR2xvYmFscyApIHtcclxuXHRcdFx0XHRnbG9iYWxFdmVudENvbnRleHQudHJpZ2dlciggXCJhamF4U2VuZFwiLCBbIGpxWEhSLCBzIF0gKTtcclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0Ly8gSWYgcmVxdWVzdCB3YXMgYWJvcnRlZCBpbnNpZGUgYWpheFNlbmQsIHN0b3AgdGhlcmVcclxuXHRcdFx0aWYgKCBzdGF0ZSA9PT0gMiApIHtcclxuXHRcdFx0XHRyZXR1cm4ganFYSFI7XHJcblx0XHRcdH1cclxuXHJcblx0XHRcdC8vIFRpbWVvdXRcclxuXHRcdFx0aWYgKCBzLmFzeW5jICYmIHMudGltZW91dCA+IDAgKSB7XHJcblx0XHRcdFx0dGltZW91dFRpbWVyID0gd2luZG93LnNldFRpbWVvdXQoIGZ1bmN0aW9uKCkge1xyXG5cdFx0XHRcdFx0anFYSFIuYWJvcnQoIFwidGltZW91dFwiICk7XHJcblx0XHRcdFx0fSwgcy50aW1lb3V0ICk7XHJcblx0XHRcdH1cclxuXHJcblx0XHRcdHRyeSB7XHJcblx0XHRcdFx0c3RhdGUgPSAxO1xyXG5cdFx0XHRcdHRyYW5zcG9ydC5zZW5kKCByZXF1ZXN0SGVhZGVycywgZG9uZSApO1xyXG5cdFx0XHR9IGNhdGNoICggZSApIHtcclxuXHJcblx0XHRcdFx0Ly8gUHJvcGFnYXRlIGV4Y2VwdGlvbiBhcyBlcnJvciBpZiBub3QgZG9uZVxyXG5cdFx0XHRcdGlmICggc3RhdGUgPCAyICkge1xyXG5cdFx0XHRcdFx0ZG9uZSggLTEsIGUgKTtcclxuXHJcblx0XHRcdFx0Ly8gU2ltcGx5IHJldGhyb3cgb3RoZXJ3aXNlXHJcblx0XHRcdFx0fSBlbHNlIHtcclxuXHRcdFx0XHRcdHRocm93IGU7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9XHJcblx0XHR9XHJcblxyXG5cdFx0Ly8gQ2FsbGJhY2sgZm9yIHdoZW4gZXZlcnl0aGluZyBpcyBkb25lXHJcblx0XHRmdW5jdGlvbiBkb25lKCBzdGF0dXMsIG5hdGl2ZVN0YXR1c1RleHQsIHJlc3BvbnNlcywgaGVhZGVycyApIHtcclxuXHRcdFx0dmFyIGlzU3VjY2Vzcywgc3VjY2VzcywgZXJyb3IsIHJlc3BvbnNlLCBtb2RpZmllZCxcclxuXHRcdFx0XHRzdGF0dXNUZXh0ID0gbmF0aXZlU3RhdHVzVGV4dDtcclxuXHJcblx0XHRcdC8vIENhbGxlZCBvbmNlXHJcblx0XHRcdGlmICggc3RhdGUgPT09IDIgKSB7XHJcblx0XHRcdFx0cmV0dXJuO1xyXG5cdFx0XHR9XHJcblxyXG5cdFx0XHQvLyBTdGF0ZSBpcyBcImRvbmVcIiBub3dcclxuXHRcdFx0c3RhdGUgPSAyO1xyXG5cclxuXHRcdFx0Ly8gQ2xlYXIgdGltZW91dCBpZiBpdCBleGlzdHNcclxuXHRcdFx0aWYgKCB0aW1lb3V0VGltZXIgKSB7XHJcblx0XHRcdFx0d2luZG93LmNsZWFyVGltZW91dCggdGltZW91dFRpbWVyICk7XHJcblx0XHRcdH1cclxuXHJcblx0XHRcdC8vIERlcmVmZXJlbmNlIHRyYW5zcG9ydCBmb3IgZWFybHkgZ2FyYmFnZSBjb2xsZWN0aW9uXHJcblx0XHRcdC8vIChubyBtYXR0ZXIgaG93IGxvbmcgdGhlIGpxWEhSIG9iamVjdCB3aWxsIGJlIHVzZWQpXHJcblx0XHRcdHRyYW5zcG9ydCA9IHVuZGVmaW5lZDtcclxuXHJcblx0XHRcdC8vIENhY2hlIHJlc3BvbnNlIGhlYWRlcnNcclxuXHRcdFx0cmVzcG9uc2VIZWFkZXJzU3RyaW5nID0gaGVhZGVycyB8fCBcIlwiO1xyXG5cclxuXHRcdFx0Ly8gU2V0IHJlYWR5U3RhdGVcclxuXHRcdFx0anFYSFIucmVhZHlTdGF0ZSA9IHN0YXR1cyA+IDAgPyA0IDogMDtcclxuXHJcblx0XHRcdC8vIERldGVybWluZSBpZiBzdWNjZXNzZnVsXHJcblx0XHRcdGlzU3VjY2VzcyA9IHN0YXR1cyA+PSAyMDAgJiYgc3RhdHVzIDwgMzAwIHx8IHN0YXR1cyA9PT0gMzA0O1xyXG5cclxuXHRcdFx0Ly8gR2V0IHJlc3BvbnNlIGRhdGFcclxuXHRcdFx0aWYgKCByZXNwb25zZXMgKSB7XHJcblx0XHRcdFx0cmVzcG9uc2UgPSBhamF4SGFuZGxlUmVzcG9uc2VzKCBzLCBqcVhIUiwgcmVzcG9uc2VzICk7XHJcblx0XHRcdH1cclxuXHJcblx0XHRcdC8vIENvbnZlcnQgbm8gbWF0dGVyIHdoYXQgKHRoYXQgd2F5IHJlc3BvbnNlWFhYIGZpZWxkcyBhcmUgYWx3YXlzIHNldClcclxuXHRcdFx0cmVzcG9uc2UgPSBhamF4Q29udmVydCggcywgcmVzcG9uc2UsIGpxWEhSLCBpc1N1Y2Nlc3MgKTtcclxuXHJcblx0XHRcdC8vIElmIHN1Y2Nlc3NmdWwsIGhhbmRsZSB0eXBlIGNoYWluaW5nXHJcblx0XHRcdGlmICggaXNTdWNjZXNzICkge1xyXG5cclxuXHRcdFx0XHQvLyBTZXQgdGhlIElmLU1vZGlmaWVkLVNpbmNlIGFuZC9vciBJZi1Ob25lLU1hdGNoIGhlYWRlciwgaWYgaW4gaWZNb2RpZmllZCBtb2RlLlxyXG5cdFx0XHRcdGlmICggcy5pZk1vZGlmaWVkICkge1xyXG5cdFx0XHRcdFx0bW9kaWZpZWQgPSBqcVhIUi5nZXRSZXNwb25zZUhlYWRlciggXCJMYXN0LU1vZGlmaWVkXCIgKTtcclxuXHRcdFx0XHRcdGlmICggbW9kaWZpZWQgKSB7XHJcblx0XHRcdFx0XHRcdGpRdWVyeS5sYXN0TW9kaWZpZWRbIGNhY2hlVVJMIF0gPSBtb2RpZmllZDtcclxuXHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdG1vZGlmaWVkID0ganFYSFIuZ2V0UmVzcG9uc2VIZWFkZXIoIFwiZXRhZ1wiICk7XHJcblx0XHRcdFx0XHRpZiAoIG1vZGlmaWVkICkge1xyXG5cdFx0XHRcdFx0XHRqUXVlcnkuZXRhZ1sgY2FjaGVVUkwgXSA9IG1vZGlmaWVkO1xyXG5cdFx0XHRcdFx0fVxyXG5cdFx0XHRcdH1cclxuXHJcblx0XHRcdFx0Ly8gaWYgbm8gY29udGVudFxyXG5cdFx0XHRcdGlmICggc3RhdHVzID09PSAyMDQgfHwgcy50eXBlID09PSBcIkhFQURcIiApIHtcclxuXHRcdFx0XHRcdHN0YXR1c1RleHQgPSBcIm5vY29udGVudFwiO1xyXG5cclxuXHRcdFx0XHQvLyBpZiBub3QgbW9kaWZpZWRcclxuXHRcdFx0XHR9IGVsc2UgaWYgKCBzdGF0dXMgPT09IDMwNCApIHtcclxuXHRcdFx0XHRcdHN0YXR1c1RleHQgPSBcIm5vdG1vZGlmaWVkXCI7XHJcblxyXG5cdFx0XHRcdC8vIElmIHdlIGhhdmUgZGF0YSwgbGV0J3MgY29udmVydCBpdFxyXG5cdFx0XHRcdH0gZWxzZSB7XHJcblx0XHRcdFx0XHRzdGF0dXNUZXh0ID0gcmVzcG9uc2Uuc3RhdGU7XHJcblx0XHRcdFx0XHRzdWNjZXNzID0gcmVzcG9uc2UuZGF0YTtcclxuXHRcdFx0XHRcdGVycm9yID0gcmVzcG9uc2UuZXJyb3I7XHJcblx0XHRcdFx0XHRpc1N1Y2Nlc3MgPSAhZXJyb3I7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9IGVsc2Uge1xyXG5cclxuXHRcdFx0XHQvLyBFeHRyYWN0IGVycm9yIGZyb20gc3RhdHVzVGV4dCBhbmQgbm9ybWFsaXplIGZvciBub24tYWJvcnRzXHJcblx0XHRcdFx0ZXJyb3IgPSBzdGF0dXNUZXh0O1xyXG5cdFx0XHRcdGlmICggc3RhdHVzIHx8ICFzdGF0dXNUZXh0ICkge1xyXG5cdFx0XHRcdFx0c3RhdHVzVGV4dCA9IFwiZXJyb3JcIjtcclxuXHRcdFx0XHRcdGlmICggc3RhdHVzIDwgMCApIHtcclxuXHRcdFx0XHRcdFx0c3RhdHVzID0gMDtcclxuXHRcdFx0XHRcdH1cclxuXHRcdFx0XHR9XHJcblx0XHRcdH1cclxuXHJcblx0XHRcdC8vIFNldCBkYXRhIGZvciB0aGUgZmFrZSB4aHIgb2JqZWN0XHJcblx0XHRcdGpxWEhSLnN0YXR1cyA9IHN0YXR1cztcclxuXHRcdFx0anFYSFIuc3RhdHVzVGV4dCA9ICggbmF0aXZlU3RhdHVzVGV4dCB8fCBzdGF0dXNUZXh0ICkgKyBcIlwiO1xyXG5cclxuXHRcdFx0Ly8gU3VjY2Vzcy9FcnJvclxyXG5cdFx0XHRpZiAoIGlzU3VjY2VzcyApIHtcclxuXHRcdFx0XHRkZWZlcnJlZC5yZXNvbHZlV2l0aCggY2FsbGJhY2tDb250ZXh0LCBbIHN1Y2Nlc3MsIHN0YXR1c1RleHQsIGpxWEhSIF0gKTtcclxuXHRcdFx0fSBlbHNlIHtcclxuXHRcdFx0XHRkZWZlcnJlZC5yZWplY3RXaXRoKCBjYWxsYmFja0NvbnRleHQsIFsganFYSFIsIHN0YXR1c1RleHQsIGVycm9yIF0gKTtcclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0Ly8gU3RhdHVzLWRlcGVuZGVudCBjYWxsYmFja3NcclxuXHRcdFx0anFYSFIuc3RhdHVzQ29kZSggc3RhdHVzQ29kZSApO1xyXG5cdFx0XHRzdGF0dXNDb2RlID0gdW5kZWZpbmVkO1xyXG5cclxuXHRcdFx0aWYgKCBmaXJlR2xvYmFscyApIHtcclxuXHRcdFx0XHRnbG9iYWxFdmVudENvbnRleHQudHJpZ2dlciggaXNTdWNjZXNzID8gXCJhamF4U3VjY2Vzc1wiIDogXCJhamF4RXJyb3JcIixcclxuXHRcdFx0XHRcdFsganFYSFIsIHMsIGlzU3VjY2VzcyA/IHN1Y2Nlc3MgOiBlcnJvciBdICk7XHJcblx0XHRcdH1cclxuXHJcblx0XHRcdC8vIENvbXBsZXRlXHJcblx0XHRcdGNvbXBsZXRlRGVmZXJyZWQuZmlyZVdpdGgoIGNhbGxiYWNrQ29udGV4dCwgWyBqcVhIUiwgc3RhdHVzVGV4dCBdICk7XHJcblxyXG5cdFx0XHRpZiAoIGZpcmVHbG9iYWxzICkge1xyXG5cdFx0XHRcdGdsb2JhbEV2ZW50Q29udGV4dC50cmlnZ2VyKCBcImFqYXhDb21wbGV0ZVwiLCBbIGpxWEhSLCBzIF0gKTtcclxuXHJcblx0XHRcdFx0Ly8gSGFuZGxlIHRoZSBnbG9iYWwgQUpBWCBjb3VudGVyXHJcblx0XHRcdFx0aWYgKCAhKCAtLWpRdWVyeS5hY3RpdmUgKSApIHtcclxuXHRcdFx0XHRcdGpRdWVyeS5ldmVudC50cmlnZ2VyKCBcImFqYXhTdG9wXCIgKTtcclxuXHRcdFx0XHR9XHJcblx0XHRcdH1cclxuXHRcdH1cclxuXHJcblx0XHRyZXR1cm4ganFYSFI7XHJcblx0fSxcclxuXHJcblx0Z2V0SlNPTjogZnVuY3Rpb24oIHVybCwgZGF0YSwgY2FsbGJhY2sgKSB7XHJcblx0XHRyZXR1cm4galF1ZXJ5LmdldCggdXJsLCBkYXRhLCBjYWxsYmFjaywgXCJqc29uXCIgKTtcclxuXHR9LFxyXG5cclxuXHRnZXRTY3JpcHQ6IGZ1bmN0aW9uKCB1cmwsIGNhbGxiYWNrICkge1xyXG5cdFx0cmV0dXJuIGpRdWVyeS5nZXQoIHVybCwgdW5kZWZpbmVkLCBjYWxsYmFjaywgXCJzY3JpcHRcIiApO1xyXG5cdH1cclxufSApO1xyXG5cclxualF1ZXJ5LmVhY2goIFsgXCJnZXRcIiwgXCJwb3N0XCIgXSwgZnVuY3Rpb24oIGksIG1ldGhvZCApIHtcclxuXHRqUXVlcnlbIG1ldGhvZCBdID0gZnVuY3Rpb24oIHVybCwgZGF0YSwgY2FsbGJhY2ssIHR5cGUgKSB7XHJcblxyXG5cdFx0Ly8gU2hpZnQgYXJndW1lbnRzIGlmIGRhdGEgYXJndW1lbnQgd2FzIG9taXR0ZWRcclxuXHRcdGlmICggalF1ZXJ5LmlzRnVuY3Rpb24oIGRhdGEgKSApIHtcclxuXHRcdFx0dHlwZSA9IHR5cGUgfHwgY2FsbGJhY2s7XHJcblx0XHRcdGNhbGxiYWNrID0gZGF0YTtcclxuXHRcdFx0ZGF0YSA9IHVuZGVmaW5lZDtcclxuXHRcdH1cclxuXHJcblx0XHQvLyBUaGUgdXJsIGNhbiBiZSBhbiBvcHRpb25zIG9iamVjdCAod2hpY2ggdGhlbiBtdXN0IGhhdmUgLnVybClcclxuXHRcdHJldHVybiBqUXVlcnkuYWpheCggalF1ZXJ5LmV4dGVuZCgge1xyXG5cdFx0XHR1cmw6IHVybCxcclxuXHRcdFx0dHlwZTogbWV0aG9kLFxyXG5cdFx0XHRkYXRhVHlwZTogdHlwZSxcclxuXHRcdFx0ZGF0YTogZGF0YSxcclxuXHRcdFx0c3VjY2VzczogY2FsbGJhY2tcclxuXHRcdH0sIGpRdWVyeS5pc1BsYWluT2JqZWN0KCB1cmwgKSAmJiB1cmwgKSApO1xyXG5cdH07XHJcbn0gKTtcclxuXHJcblxyXG5qUXVlcnkuX2V2YWxVcmwgPSBmdW5jdGlvbiggdXJsICkge1xyXG5cdHJldHVybiBqUXVlcnkuYWpheCgge1xyXG5cdFx0dXJsOiB1cmwsXHJcblxyXG5cdFx0Ly8gTWFrZSB0aGlzIGV4cGxpY2l0LCBzaW5jZSB1c2VyIGNhbiBvdmVycmlkZSB0aGlzIHRocm91Z2ggYWpheFNldHVwICgjMTEyNjQpXHJcblx0XHR0eXBlOiBcIkdFVFwiLFxyXG5cdFx0ZGF0YVR5cGU6IFwic2NyaXB0XCIsXHJcblx0XHRhc3luYzogZmFsc2UsXHJcblx0XHRnbG9iYWw6IGZhbHNlLFxyXG5cdFx0XCJ0aHJvd3NcIjogdHJ1ZVxyXG5cdH0gKTtcclxufTtcclxuXHJcblxyXG5qUXVlcnkuZm4uZXh0ZW5kKCB7XHJcblx0d3JhcEFsbDogZnVuY3Rpb24oIGh0bWwgKSB7XHJcblx0XHR2YXIgd3JhcDtcclxuXHJcblx0XHRpZiAoIGpRdWVyeS5pc0Z1bmN0aW9uKCBodG1sICkgKSB7XHJcblx0XHRcdHJldHVybiB0aGlzLmVhY2goIGZ1bmN0aW9uKCBpICkge1xyXG5cdFx0XHRcdGpRdWVyeSggdGhpcyApLndyYXBBbGwoIGh0bWwuY2FsbCggdGhpcywgaSApICk7XHJcblx0XHRcdH0gKTtcclxuXHRcdH1cclxuXHJcblx0XHRpZiAoIHRoaXNbIDAgXSApIHtcclxuXHJcblx0XHRcdC8vIFRoZSBlbGVtZW50cyB0byB3cmFwIHRoZSB0YXJnZXQgYXJvdW5kXHJcblx0XHRcdHdyYXAgPSBqUXVlcnkoIGh0bWwsIHRoaXNbIDAgXS5vd25lckRvY3VtZW50ICkuZXEoIDAgKS5jbG9uZSggdHJ1ZSApO1xyXG5cclxuXHRcdFx0aWYgKCB0aGlzWyAwIF0ucGFyZW50Tm9kZSApIHtcclxuXHRcdFx0XHR3cmFwLmluc2VydEJlZm9yZSggdGhpc1sgMCBdICk7XHJcblx0XHRcdH1cclxuXHJcblx0XHRcdHdyYXAubWFwKCBmdW5jdGlvbigpIHtcclxuXHRcdFx0XHR2YXIgZWxlbSA9IHRoaXM7XHJcblxyXG5cdFx0XHRcdHdoaWxlICggZWxlbS5maXJzdEVsZW1lbnRDaGlsZCApIHtcclxuXHRcdFx0XHRcdGVsZW0gPSBlbGVtLmZpcnN0RWxlbWVudENoaWxkO1xyXG5cdFx0XHRcdH1cclxuXHJcblx0XHRcdFx0cmV0dXJuIGVsZW07XHJcblx0XHRcdH0gKS5hcHBlbmQoIHRoaXMgKTtcclxuXHRcdH1cclxuXHJcblx0XHRyZXR1cm4gdGhpcztcclxuXHR9LFxyXG5cclxuXHR3cmFwSW5uZXI6IGZ1bmN0aW9uKCBodG1sICkge1xyXG5cdFx0aWYgKCBqUXVlcnkuaXNGdW5jdGlvbiggaHRtbCApICkge1xyXG5cdFx0XHRyZXR1cm4gdGhpcy5lYWNoKCBmdW5jdGlvbiggaSApIHtcclxuXHRcdFx0XHRqUXVlcnkoIHRoaXMgKS53cmFwSW5uZXIoIGh0bWwuY2FsbCggdGhpcywgaSApICk7XHJcblx0XHRcdH0gKTtcclxuXHRcdH1cclxuXHJcblx0XHRyZXR1cm4gdGhpcy5lYWNoKCBmdW5jdGlvbigpIHtcclxuXHRcdFx0dmFyIHNlbGYgPSBqUXVlcnkoIHRoaXMgKSxcclxuXHRcdFx0XHRjb250ZW50cyA9IHNlbGYuY29udGVudHMoKTtcclxuXHJcblx0XHRcdGlmICggY29udGVudHMubGVuZ3RoICkge1xyXG5cdFx0XHRcdGNvbnRlbnRzLndyYXBBbGwoIGh0bWwgKTtcclxuXHJcblx0XHRcdH0gZWxzZSB7XHJcblx0XHRcdFx0c2VsZi5hcHBlbmQoIGh0bWwgKTtcclxuXHRcdFx0fVxyXG5cdFx0fSApO1xyXG5cdH0sXHJcblxyXG5cdHdyYXA6IGZ1bmN0aW9uKCBodG1sICkge1xyXG5cdFx0dmFyIGlzRnVuY3Rpb24gPSBqUXVlcnkuaXNGdW5jdGlvbiggaHRtbCApO1xyXG5cclxuXHRcdHJldHVybiB0aGlzLmVhY2goIGZ1bmN0aW9uKCBpICkge1xyXG5cdFx0XHRqUXVlcnkoIHRoaXMgKS53cmFwQWxsKCBpc0Z1bmN0aW9uID8gaHRtbC5jYWxsKCB0aGlzLCBpICkgOiBodG1sICk7XHJcblx0XHR9ICk7XHJcblx0fSxcclxuXHJcblx0dW53cmFwOiBmdW5jdGlvbigpIHtcclxuXHRcdHJldHVybiB0aGlzLnBhcmVudCgpLmVhY2goIGZ1bmN0aW9uKCkge1xyXG5cdFx0XHRpZiAoICFqUXVlcnkubm9kZU5hbWUoIHRoaXMsIFwiYm9keVwiICkgKSB7XHJcblx0XHRcdFx0alF1ZXJ5KCB0aGlzICkucmVwbGFjZVdpdGgoIHRoaXMuY2hpbGROb2RlcyApO1xyXG5cdFx0XHR9XHJcblx0XHR9ICkuZW5kKCk7XHJcblx0fVxyXG59ICk7XHJcblxyXG5cclxualF1ZXJ5LmV4cHIuZmlsdGVycy5oaWRkZW4gPSBmdW5jdGlvbiggZWxlbSApIHtcclxuXHRyZXR1cm4gIWpRdWVyeS5leHByLmZpbHRlcnMudmlzaWJsZSggZWxlbSApO1xyXG59O1xyXG5qUXVlcnkuZXhwci5maWx0ZXJzLnZpc2libGUgPSBmdW5jdGlvbiggZWxlbSApIHtcclxuXHJcblx0Ly8gU3VwcG9ydDogT3BlcmEgPD0gMTIuMTJcclxuXHQvLyBPcGVyYSByZXBvcnRzIG9mZnNldFdpZHRocyBhbmQgb2Zmc2V0SGVpZ2h0cyBsZXNzIHRoYW4gemVybyBvbiBzb21lIGVsZW1lbnRzXHJcblx0Ly8gVXNlIE9SIGluc3RlYWQgb2YgQU5EIGFzIHRoZSBlbGVtZW50IGlzIG5vdCB2aXNpYmxlIGlmIGVpdGhlciBpcyB0cnVlXHJcblx0Ly8gU2VlIHRpY2tldHMgIzEwNDA2IGFuZCAjMTMxMzJcclxuXHRyZXR1cm4gZWxlbS5vZmZzZXRXaWR0aCA+IDAgfHwgZWxlbS5vZmZzZXRIZWlnaHQgPiAwIHx8IGVsZW0uZ2V0Q2xpZW50UmVjdHMoKS5sZW5ndGggPiAwO1xyXG59O1xyXG5cclxuXHJcblxyXG5cclxudmFyIHIyMCA9IC8lMjAvZyxcclxuXHRyYnJhY2tldCA9IC9cXFtcXF0kLyxcclxuXHRyQ1JMRiA9IC9cXHI/XFxuL2csXHJcblx0cnN1Ym1pdHRlclR5cGVzID0gL14oPzpzdWJtaXR8YnV0dG9ufGltYWdlfHJlc2V0fGZpbGUpJC9pLFxyXG5cdHJzdWJtaXR0YWJsZSA9IC9eKD86aW5wdXR8c2VsZWN0fHRleHRhcmVhfGtleWdlbikvaTtcclxuXHJcbmZ1bmN0aW9uIGJ1aWxkUGFyYW1zKCBwcmVmaXgsIG9iaiwgdHJhZGl0aW9uYWwsIGFkZCApIHtcclxuXHR2YXIgbmFtZTtcclxuXHJcblx0aWYgKCBqUXVlcnkuaXNBcnJheSggb2JqICkgKSB7XHJcblxyXG5cdFx0Ly8gU2VyaWFsaXplIGFycmF5IGl0ZW0uXHJcblx0XHRqUXVlcnkuZWFjaCggb2JqLCBmdW5jdGlvbiggaSwgdiApIHtcclxuXHRcdFx0aWYgKCB0cmFkaXRpb25hbCB8fCByYnJhY2tldC50ZXN0KCBwcmVmaXggKSApIHtcclxuXHJcblx0XHRcdFx0Ly8gVHJlYXQgZWFjaCBhcnJheSBpdGVtIGFzIGEgc2NhbGFyLlxyXG5cdFx0XHRcdGFkZCggcHJlZml4LCB2ICk7XHJcblxyXG5cdFx0XHR9IGVsc2Uge1xyXG5cclxuXHRcdFx0XHQvLyBJdGVtIGlzIG5vbi1zY2FsYXIgKGFycmF5IG9yIG9iamVjdCksIGVuY29kZSBpdHMgbnVtZXJpYyBpbmRleC5cclxuXHRcdFx0XHRidWlsZFBhcmFtcyhcclxuXHRcdFx0XHRcdHByZWZpeCArIFwiW1wiICsgKCB0eXBlb2YgdiA9PT0gXCJvYmplY3RcIiAmJiB2ICE9IG51bGwgPyBpIDogXCJcIiApICsgXCJdXCIsXHJcblx0XHRcdFx0XHR2LFxyXG5cdFx0XHRcdFx0dHJhZGl0aW9uYWwsXHJcblx0XHRcdFx0XHRhZGRcclxuXHRcdFx0XHQpO1xyXG5cdFx0XHR9XHJcblx0XHR9ICk7XHJcblxyXG5cdH0gZWxzZSBpZiAoICF0cmFkaXRpb25hbCAmJiBqUXVlcnkudHlwZSggb2JqICkgPT09IFwib2JqZWN0XCIgKSB7XHJcblxyXG5cdFx0Ly8gU2VyaWFsaXplIG9iamVjdCBpdGVtLlxyXG5cdFx0Zm9yICggbmFtZSBpbiBvYmogKSB7XHJcblx0XHRcdGJ1aWxkUGFyYW1zKCBwcmVmaXggKyBcIltcIiArIG5hbWUgKyBcIl1cIiwgb2JqWyBuYW1lIF0sIHRyYWRpdGlvbmFsLCBhZGQgKTtcclxuXHRcdH1cclxuXHJcblx0fSBlbHNlIHtcclxuXHJcblx0XHQvLyBTZXJpYWxpemUgc2NhbGFyIGl0ZW0uXHJcblx0XHRhZGQoIHByZWZpeCwgb2JqICk7XHJcblx0fVxyXG59XHJcblxyXG4vLyBTZXJpYWxpemUgYW4gYXJyYXkgb2YgZm9ybSBlbGVtZW50cyBvciBhIHNldCBvZlxyXG4vLyBrZXkvdmFsdWVzIGludG8gYSBxdWVyeSBzdHJpbmdcclxualF1ZXJ5LnBhcmFtID0gZnVuY3Rpb24oIGEsIHRyYWRpdGlvbmFsICkge1xyXG5cdHZhciBwcmVmaXgsXHJcblx0XHRzID0gW10sXHJcblx0XHRhZGQgPSBmdW5jdGlvbigga2V5LCB2YWx1ZSApIHtcclxuXHJcblx0XHRcdC8vIElmIHZhbHVlIGlzIGEgZnVuY3Rpb24sIGludm9rZSBpdCBhbmQgcmV0dXJuIGl0cyB2YWx1ZVxyXG5cdFx0XHR2YWx1ZSA9IGpRdWVyeS5pc0Z1bmN0aW9uKCB2YWx1ZSApID8gdmFsdWUoKSA6ICggdmFsdWUgPT0gbnVsbCA/IFwiXCIgOiB2YWx1ZSApO1xyXG5cdFx0XHRzWyBzLmxlbmd0aCBdID0gZW5jb2RlVVJJQ29tcG9uZW50KCBrZXkgKSArIFwiPVwiICsgZW5jb2RlVVJJQ29tcG9uZW50KCB2YWx1ZSApO1xyXG5cdFx0fTtcclxuXHJcblx0Ly8gU2V0IHRyYWRpdGlvbmFsIHRvIHRydWUgZm9yIGpRdWVyeSA8PSAxLjMuMiBiZWhhdmlvci5cclxuXHRpZiAoIHRyYWRpdGlvbmFsID09PSB1bmRlZmluZWQgKSB7XHJcblx0XHR0cmFkaXRpb25hbCA9IGpRdWVyeS5hamF4U2V0dGluZ3MgJiYgalF1ZXJ5LmFqYXhTZXR0aW5ncy50cmFkaXRpb25hbDtcclxuXHR9XHJcblxyXG5cdC8vIElmIGFuIGFycmF5IHdhcyBwYXNzZWQgaW4sIGFzc3VtZSB0aGF0IGl0IGlzIGFuIGFycmF5IG9mIGZvcm0gZWxlbWVudHMuXHJcblx0aWYgKCBqUXVlcnkuaXNBcnJheSggYSApIHx8ICggYS5qcXVlcnkgJiYgIWpRdWVyeS5pc1BsYWluT2JqZWN0KCBhICkgKSApIHtcclxuXHJcblx0XHQvLyBTZXJpYWxpemUgdGhlIGZvcm0gZWxlbWVudHNcclxuXHRcdGpRdWVyeS5lYWNoKCBhLCBmdW5jdGlvbigpIHtcclxuXHRcdFx0YWRkKCB0aGlzLm5hbWUsIHRoaXMudmFsdWUgKTtcclxuXHRcdH0gKTtcclxuXHJcblx0fSBlbHNlIHtcclxuXHJcblx0XHQvLyBJZiB0cmFkaXRpb25hbCwgZW5jb2RlIHRoZSBcIm9sZFwiIHdheSAodGhlIHdheSAxLjMuMiBvciBvbGRlclxyXG5cdFx0Ly8gZGlkIGl0KSwgb3RoZXJ3aXNlIGVuY29kZSBwYXJhbXMgcmVjdXJzaXZlbHkuXHJcblx0XHRmb3IgKCBwcmVmaXggaW4gYSApIHtcclxuXHRcdFx0YnVpbGRQYXJhbXMoIHByZWZpeCwgYVsgcHJlZml4IF0sIHRyYWRpdGlvbmFsLCBhZGQgKTtcclxuXHRcdH1cclxuXHR9XHJcblxyXG5cdC8vIFJldHVybiB0aGUgcmVzdWx0aW5nIHNlcmlhbGl6YXRpb25cclxuXHRyZXR1cm4gcy5qb2luKCBcIiZcIiApLnJlcGxhY2UoIHIyMCwgXCIrXCIgKTtcclxufTtcclxuXHJcbmpRdWVyeS5mbi5leHRlbmQoIHtcclxuXHRzZXJpYWxpemU6IGZ1bmN0aW9uKCkge1xyXG5cdFx0cmV0dXJuIGpRdWVyeS5wYXJhbSggdGhpcy5zZXJpYWxpemVBcnJheSgpICk7XHJcblx0fSxcclxuXHRzZXJpYWxpemVBcnJheTogZnVuY3Rpb24oKSB7XHJcblx0XHRyZXR1cm4gdGhpcy5tYXAoIGZ1bmN0aW9uKCkge1xyXG5cclxuXHRcdFx0Ly8gQ2FuIGFkZCBwcm9wSG9vayBmb3IgXCJlbGVtZW50c1wiIHRvIGZpbHRlciBvciBhZGQgZm9ybSBlbGVtZW50c1xyXG5cdFx0XHR2YXIgZWxlbWVudHMgPSBqUXVlcnkucHJvcCggdGhpcywgXCJlbGVtZW50c1wiICk7XHJcblx0XHRcdHJldHVybiBlbGVtZW50cyA/IGpRdWVyeS5tYWtlQXJyYXkoIGVsZW1lbnRzICkgOiB0aGlzO1xyXG5cdFx0fSApXHJcblx0XHQuZmlsdGVyKCBmdW5jdGlvbigpIHtcclxuXHRcdFx0dmFyIHR5cGUgPSB0aGlzLnR5cGU7XHJcblxyXG5cdFx0XHQvLyBVc2UgLmlzKCBcIjpkaXNhYmxlZFwiICkgc28gdGhhdCBmaWVsZHNldFtkaXNhYmxlZF0gd29ya3NcclxuXHRcdFx0cmV0dXJuIHRoaXMubmFtZSAmJiAhalF1ZXJ5KCB0aGlzICkuaXMoIFwiOmRpc2FibGVkXCIgKSAmJlxyXG5cdFx0XHRcdHJzdWJtaXR0YWJsZS50ZXN0KCB0aGlzLm5vZGVOYW1lICkgJiYgIXJzdWJtaXR0ZXJUeXBlcy50ZXN0KCB0eXBlICkgJiZcclxuXHRcdFx0XHQoIHRoaXMuY2hlY2tlZCB8fCAhcmNoZWNrYWJsZVR5cGUudGVzdCggdHlwZSApICk7XHJcblx0XHR9IClcclxuXHRcdC5tYXAoIGZ1bmN0aW9uKCBpLCBlbGVtICkge1xyXG5cdFx0XHR2YXIgdmFsID0galF1ZXJ5KCB0aGlzICkudmFsKCk7XHJcblxyXG5cdFx0XHRyZXR1cm4gdmFsID09IG51bGwgP1xyXG5cdFx0XHRcdG51bGwgOlxyXG5cdFx0XHRcdGpRdWVyeS5pc0FycmF5KCB2YWwgKSA/XHJcblx0XHRcdFx0XHRqUXVlcnkubWFwKCB2YWwsIGZ1bmN0aW9uKCB2YWwgKSB7XHJcblx0XHRcdFx0XHRcdHJldHVybiB7IG5hbWU6IGVsZW0ubmFtZSwgdmFsdWU6IHZhbC5yZXBsYWNlKCByQ1JMRiwgXCJcXHJcXG5cIiApIH07XHJcblx0XHRcdFx0XHR9ICkgOlxyXG5cdFx0XHRcdFx0eyBuYW1lOiBlbGVtLm5hbWUsIHZhbHVlOiB2YWwucmVwbGFjZSggckNSTEYsIFwiXFxyXFxuXCIgKSB9O1xyXG5cdFx0fSApLmdldCgpO1xyXG5cdH1cclxufSApO1xyXG5cclxuXHJcbmpRdWVyeS5hamF4U2V0dGluZ3MueGhyID0gZnVuY3Rpb24oKSB7XHJcblx0dHJ5IHtcclxuXHRcdHJldHVybiBuZXcgd2luZG93LlhNTEh0dHBSZXF1ZXN0KCk7XHJcblx0fSBjYXRjaCAoIGUgKSB7fVxyXG59O1xyXG5cclxudmFyIHhoclN1Y2Nlc3NTdGF0dXMgPSB7XHJcblxyXG5cdFx0Ly8gRmlsZSBwcm90b2NvbCBhbHdheXMgeWllbGRzIHN0YXR1cyBjb2RlIDAsIGFzc3VtZSAyMDBcclxuXHRcdDA6IDIwMCxcclxuXHJcblx0XHQvLyBTdXBwb3J0OiBJRTlcclxuXHRcdC8vICMxNDUwOiBzb21ldGltZXMgSUUgcmV0dXJucyAxMjIzIHdoZW4gaXQgc2hvdWxkIGJlIDIwNFxyXG5cdFx0MTIyMzogMjA0XHJcblx0fSxcclxuXHR4aHJTdXBwb3J0ZWQgPSBqUXVlcnkuYWpheFNldHRpbmdzLnhocigpO1xyXG5cclxuc3VwcG9ydC5jb3JzID0gISF4aHJTdXBwb3J0ZWQgJiYgKCBcIndpdGhDcmVkZW50aWFsc1wiIGluIHhoclN1cHBvcnRlZCApO1xyXG5zdXBwb3J0LmFqYXggPSB4aHJTdXBwb3J0ZWQgPSAhIXhoclN1cHBvcnRlZDtcclxuXHJcbmpRdWVyeS5hamF4VHJhbnNwb3J0KCBmdW5jdGlvbiggb3B0aW9ucyApIHtcclxuXHR2YXIgY2FsbGJhY2ssIGVycm9yQ2FsbGJhY2s7XHJcblxyXG5cdC8vIENyb3NzIGRvbWFpbiBvbmx5IGFsbG93ZWQgaWYgc3VwcG9ydGVkIHRocm91Z2ggWE1MSHR0cFJlcXVlc3RcclxuXHRpZiAoIHN1cHBvcnQuY29ycyB8fCB4aHJTdXBwb3J0ZWQgJiYgIW9wdGlvbnMuY3Jvc3NEb21haW4gKSB7XHJcblx0XHRyZXR1cm4ge1xyXG5cdFx0XHRzZW5kOiBmdW5jdGlvbiggaGVhZGVycywgY29tcGxldGUgKSB7XHJcblx0XHRcdFx0dmFyIGksXHJcblx0XHRcdFx0XHR4aHIgPSBvcHRpb25zLnhocigpO1xyXG5cclxuXHRcdFx0XHR4aHIub3BlbihcclxuXHRcdFx0XHRcdG9wdGlvbnMudHlwZSxcclxuXHRcdFx0XHRcdG9wdGlvbnMudXJsLFxyXG5cdFx0XHRcdFx0b3B0aW9ucy5hc3luYyxcclxuXHRcdFx0XHRcdG9wdGlvbnMudXNlcm5hbWUsXHJcblx0XHRcdFx0XHRvcHRpb25zLnBhc3N3b3JkXHJcblx0XHRcdFx0KTtcclxuXHJcblx0XHRcdFx0Ly8gQXBwbHkgY3VzdG9tIGZpZWxkcyBpZiBwcm92aWRlZFxyXG5cdFx0XHRcdGlmICggb3B0aW9ucy54aHJGaWVsZHMgKSB7XHJcblx0XHRcdFx0XHRmb3IgKCBpIGluIG9wdGlvbnMueGhyRmllbGRzICkge1xyXG5cdFx0XHRcdFx0XHR4aHJbIGkgXSA9IG9wdGlvbnMueGhyRmllbGRzWyBpIF07XHJcblx0XHRcdFx0XHR9XHJcblx0XHRcdFx0fVxyXG5cclxuXHRcdFx0XHQvLyBPdmVycmlkZSBtaW1lIHR5cGUgaWYgbmVlZGVkXHJcblx0XHRcdFx0aWYgKCBvcHRpb25zLm1pbWVUeXBlICYmIHhoci5vdmVycmlkZU1pbWVUeXBlICkge1xyXG5cdFx0XHRcdFx0eGhyLm92ZXJyaWRlTWltZVR5cGUoIG9wdGlvbnMubWltZVR5cGUgKTtcclxuXHRcdFx0XHR9XHJcblxyXG5cdFx0XHRcdC8vIFgtUmVxdWVzdGVkLVdpdGggaGVhZGVyXHJcblx0XHRcdFx0Ly8gRm9yIGNyb3NzLWRvbWFpbiByZXF1ZXN0cywgc2VlaW5nIGFzIGNvbmRpdGlvbnMgZm9yIGEgcHJlZmxpZ2h0IGFyZVxyXG5cdFx0XHRcdC8vIGFraW4gdG8gYSBqaWdzYXcgcHV6emxlLCB3ZSBzaW1wbHkgbmV2ZXIgc2V0IGl0IHRvIGJlIHN1cmUuXHJcblx0XHRcdFx0Ly8gKGl0IGNhbiBhbHdheXMgYmUgc2V0IG9uIGEgcGVyLXJlcXVlc3QgYmFzaXMgb3IgZXZlbiB1c2luZyBhamF4U2V0dXApXHJcblx0XHRcdFx0Ly8gRm9yIHNhbWUtZG9tYWluIHJlcXVlc3RzLCB3b24ndCBjaGFuZ2UgaGVhZGVyIGlmIGFscmVhZHkgcHJvdmlkZWQuXHJcblx0XHRcdFx0aWYgKCAhb3B0aW9ucy5jcm9zc0RvbWFpbiAmJiAhaGVhZGVyc1sgXCJYLVJlcXVlc3RlZC1XaXRoXCIgXSApIHtcclxuXHRcdFx0XHRcdGhlYWRlcnNbIFwiWC1SZXF1ZXN0ZWQtV2l0aFwiIF0gPSBcIlhNTEh0dHBSZXF1ZXN0XCI7XHJcblx0XHRcdFx0fVxyXG5cclxuXHRcdFx0XHQvLyBTZXQgaGVhZGVyc1xyXG5cdFx0XHRcdGZvciAoIGkgaW4gaGVhZGVycyApIHtcclxuXHRcdFx0XHRcdHhoci5zZXRSZXF1ZXN0SGVhZGVyKCBpLCBoZWFkZXJzWyBpIF0gKTtcclxuXHRcdFx0XHR9XHJcblxyXG5cdFx0XHRcdC8vIENhbGxiYWNrXHJcblx0XHRcdFx0Y2FsbGJhY2sgPSBmdW5jdGlvbiggdHlwZSApIHtcclxuXHRcdFx0XHRcdHJldHVybiBmdW5jdGlvbigpIHtcclxuXHRcdFx0XHRcdFx0aWYgKCBjYWxsYmFjayApIHtcclxuXHRcdFx0XHRcdFx0XHRjYWxsYmFjayA9IGVycm9yQ2FsbGJhY2sgPSB4aHIub25sb2FkID1cclxuXHRcdFx0XHRcdFx0XHRcdHhoci5vbmVycm9yID0geGhyLm9uYWJvcnQgPSB4aHIub25yZWFkeXN0YXRlY2hhbmdlID0gbnVsbDtcclxuXHJcblx0XHRcdFx0XHRcdFx0aWYgKCB0eXBlID09PSBcImFib3J0XCIgKSB7XHJcblx0XHRcdFx0XHRcdFx0XHR4aHIuYWJvcnQoKTtcclxuXHRcdFx0XHRcdFx0XHR9IGVsc2UgaWYgKCB0eXBlID09PSBcImVycm9yXCIgKSB7XHJcblxyXG5cdFx0XHRcdFx0XHRcdFx0Ly8gU3VwcG9ydDogSUU5XHJcblx0XHRcdFx0XHRcdFx0XHQvLyBPbiBhIG1hbnVhbCBuYXRpdmUgYWJvcnQsIElFOSB0aHJvd3NcclxuXHRcdFx0XHRcdFx0XHRcdC8vIGVycm9ycyBvbiBhbnkgcHJvcGVydHkgYWNjZXNzIHRoYXQgaXMgbm90IHJlYWR5U3RhdGVcclxuXHRcdFx0XHRcdFx0XHRcdGlmICggdHlwZW9mIHhoci5zdGF0dXMgIT09IFwibnVtYmVyXCIgKSB7XHJcblx0XHRcdFx0XHRcdFx0XHRcdGNvbXBsZXRlKCAwLCBcImVycm9yXCIgKTtcclxuXHRcdFx0XHRcdFx0XHRcdH0gZWxzZSB7XHJcblx0XHRcdFx0XHRcdFx0XHRcdGNvbXBsZXRlKFxyXG5cclxuXHRcdFx0XHRcdFx0XHRcdFx0XHQvLyBGaWxlOiBwcm90b2NvbCBhbHdheXMgeWllbGRzIHN0YXR1cyAwOyBzZWUgIzg2MDUsICMxNDIwN1xyXG5cdFx0XHRcdFx0XHRcdFx0XHRcdHhoci5zdGF0dXMsXHJcblx0XHRcdFx0XHRcdFx0XHRcdFx0eGhyLnN0YXR1c1RleHRcclxuXHRcdFx0XHRcdFx0XHRcdFx0KTtcclxuXHRcdFx0XHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdFx0XHR9IGVsc2Uge1xyXG5cdFx0XHRcdFx0XHRcdFx0Y29tcGxldGUoXHJcblx0XHRcdFx0XHRcdFx0XHRcdHhoclN1Y2Nlc3NTdGF0dXNbIHhoci5zdGF0dXMgXSB8fCB4aHIuc3RhdHVzLFxyXG5cdFx0XHRcdFx0XHRcdFx0XHR4aHIuc3RhdHVzVGV4dCxcclxuXHJcblx0XHRcdFx0XHRcdFx0XHRcdC8vIFN1cHBvcnQ6IElFOSBvbmx5XHJcblx0XHRcdFx0XHRcdFx0XHRcdC8vIElFOSBoYXMgbm8gWEhSMiBidXQgdGhyb3dzIG9uIGJpbmFyeSAodHJhYy0xMTQyNilcclxuXHRcdFx0XHRcdFx0XHRcdFx0Ly8gRm9yIFhIUjIgbm9uLXRleHQsIGxldCB0aGUgY2FsbGVyIGhhbmRsZSBpdCAoZ2gtMjQ5OClcclxuXHRcdFx0XHRcdFx0XHRcdFx0KCB4aHIucmVzcG9uc2VUeXBlIHx8IFwidGV4dFwiICkgIT09IFwidGV4dFwiICB8fFxyXG5cdFx0XHRcdFx0XHRcdFx0XHR0eXBlb2YgeGhyLnJlc3BvbnNlVGV4dCAhPT0gXCJzdHJpbmdcIiA/XHJcblx0XHRcdFx0XHRcdFx0XHRcdFx0eyBiaW5hcnk6IHhoci5yZXNwb25zZSB9IDpcclxuXHRcdFx0XHRcdFx0XHRcdFx0XHR7IHRleHQ6IHhoci5yZXNwb25zZVRleHQgfSxcclxuXHRcdFx0XHRcdFx0XHRcdFx0eGhyLmdldEFsbFJlc3BvbnNlSGVhZGVycygpXHJcblx0XHRcdFx0XHRcdFx0XHQpO1xyXG5cdFx0XHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0fTtcclxuXHRcdFx0XHR9O1xyXG5cclxuXHRcdFx0XHQvLyBMaXN0ZW4gdG8gZXZlbnRzXHJcblx0XHRcdFx0eGhyLm9ubG9hZCA9IGNhbGxiYWNrKCk7XHJcblx0XHRcdFx0ZXJyb3JDYWxsYmFjayA9IHhoci5vbmVycm9yID0gY2FsbGJhY2soIFwiZXJyb3JcIiApO1xyXG5cclxuXHRcdFx0XHQvLyBTdXBwb3J0OiBJRTlcclxuXHRcdFx0XHQvLyBVc2Ugb25yZWFkeXN0YXRlY2hhbmdlIHRvIHJlcGxhY2Ugb25hYm9ydFxyXG5cdFx0XHRcdC8vIHRvIGhhbmRsZSB1bmNhdWdodCBhYm9ydHNcclxuXHRcdFx0XHRpZiAoIHhoci5vbmFib3J0ICE9PSB1bmRlZmluZWQgKSB7XHJcblx0XHRcdFx0XHR4aHIub25hYm9ydCA9IGVycm9yQ2FsbGJhY2s7XHJcblx0XHRcdFx0fSBlbHNlIHtcclxuXHRcdFx0XHRcdHhoci5vbnJlYWR5c3RhdGVjaGFuZ2UgPSBmdW5jdGlvbigpIHtcclxuXHJcblx0XHRcdFx0XHRcdC8vIENoZWNrIHJlYWR5U3RhdGUgYmVmb3JlIHRpbWVvdXQgYXMgaXQgY2hhbmdlc1xyXG5cdFx0XHRcdFx0XHRpZiAoIHhoci5yZWFkeVN0YXRlID09PSA0ICkge1xyXG5cclxuXHRcdFx0XHRcdFx0XHQvLyBBbGxvdyBvbmVycm9yIHRvIGJlIGNhbGxlZCBmaXJzdCxcclxuXHRcdFx0XHRcdFx0XHQvLyBidXQgdGhhdCB3aWxsIG5vdCBoYW5kbGUgYSBuYXRpdmUgYWJvcnRcclxuXHRcdFx0XHRcdFx0XHQvLyBBbHNvLCBzYXZlIGVycm9yQ2FsbGJhY2sgdG8gYSB2YXJpYWJsZVxyXG5cdFx0XHRcdFx0XHRcdC8vIGFzIHhoci5vbmVycm9yIGNhbm5vdCBiZSBhY2Nlc3NlZFxyXG5cdFx0XHRcdFx0XHRcdHdpbmRvdy5zZXRUaW1lb3V0KCBmdW5jdGlvbigpIHtcclxuXHRcdFx0XHRcdFx0XHRcdGlmICggY2FsbGJhY2sgKSB7XHJcblx0XHRcdFx0XHRcdFx0XHRcdGVycm9yQ2FsbGJhY2soKTtcclxuXHRcdFx0XHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdFx0XHR9ICk7XHJcblx0XHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdH07XHJcblx0XHRcdFx0fVxyXG5cclxuXHRcdFx0XHQvLyBDcmVhdGUgdGhlIGFib3J0IGNhbGxiYWNrXHJcblx0XHRcdFx0Y2FsbGJhY2sgPSBjYWxsYmFjayggXCJhYm9ydFwiICk7XHJcblxyXG5cdFx0XHRcdHRyeSB7XHJcblxyXG5cdFx0XHRcdFx0Ly8gRG8gc2VuZCB0aGUgcmVxdWVzdCAodGhpcyBtYXkgcmFpc2UgYW4gZXhjZXB0aW9uKVxyXG5cdFx0XHRcdFx0eGhyLnNlbmQoIG9wdGlvbnMuaGFzQ29udGVudCAmJiBvcHRpb25zLmRhdGEgfHwgbnVsbCApO1xyXG5cdFx0XHRcdH0gY2F0Y2ggKCBlICkge1xyXG5cclxuXHRcdFx0XHRcdC8vICMxNDY4MzogT25seSByZXRocm93IGlmIHRoaXMgaGFzbid0IGJlZW4gbm90aWZpZWQgYXMgYW4gZXJyb3IgeWV0XHJcblx0XHRcdFx0XHRpZiAoIGNhbGxiYWNrICkge1xyXG5cdFx0XHRcdFx0XHR0aHJvdyBlO1xyXG5cdFx0XHRcdFx0fVxyXG5cdFx0XHRcdH1cclxuXHRcdFx0fSxcclxuXHJcblx0XHRcdGFib3J0OiBmdW5jdGlvbigpIHtcclxuXHRcdFx0XHRpZiAoIGNhbGxiYWNrICkge1xyXG5cdFx0XHRcdFx0Y2FsbGJhY2soKTtcclxuXHRcdFx0XHR9XHJcblx0XHRcdH1cclxuXHRcdH07XHJcblx0fVxyXG59ICk7XHJcblxyXG5cclxuXHJcblxyXG4vLyBJbnN0YWxsIHNjcmlwdCBkYXRhVHlwZVxyXG5qUXVlcnkuYWpheFNldHVwKCB7XHJcblx0YWNjZXB0czoge1xyXG5cdFx0c2NyaXB0OiBcInRleHQvamF2YXNjcmlwdCwgYXBwbGljYXRpb24vamF2YXNjcmlwdCwgXCIgK1xyXG5cdFx0XHRcImFwcGxpY2F0aW9uL2VjbWFzY3JpcHQsIGFwcGxpY2F0aW9uL3gtZWNtYXNjcmlwdFwiXHJcblx0fSxcclxuXHRjb250ZW50czoge1xyXG5cdFx0c2NyaXB0OiAvXFxiKD86amF2YXxlY21hKXNjcmlwdFxcYi9cclxuXHR9LFxyXG5cdGNvbnZlcnRlcnM6IHtcclxuXHRcdFwidGV4dCBzY3JpcHRcIjogZnVuY3Rpb24oIHRleHQgKSB7XHJcblx0XHRcdGpRdWVyeS5nbG9iYWxFdmFsKCB0ZXh0ICk7XHJcblx0XHRcdHJldHVybiB0ZXh0O1xyXG5cdFx0fVxyXG5cdH1cclxufSApO1xyXG5cclxuLy8gSGFuZGxlIGNhY2hlJ3Mgc3BlY2lhbCBjYXNlIGFuZCBjcm9zc0RvbWFpblxyXG5qUXVlcnkuYWpheFByZWZpbHRlciggXCJzY3JpcHRcIiwgZnVuY3Rpb24oIHMgKSB7XHJcblx0aWYgKCBzLmNhY2hlID09PSB1bmRlZmluZWQgKSB7XHJcblx0XHRzLmNhY2hlID0gZmFsc2U7XHJcblx0fVxyXG5cdGlmICggcy5jcm9zc0RvbWFpbiApIHtcclxuXHRcdHMudHlwZSA9IFwiR0VUXCI7XHJcblx0fVxyXG59ICk7XHJcblxyXG4vLyBCaW5kIHNjcmlwdCB0YWcgaGFjayB0cmFuc3BvcnRcclxualF1ZXJ5LmFqYXhUcmFuc3BvcnQoIFwic2NyaXB0XCIsIGZ1bmN0aW9uKCBzICkge1xyXG5cclxuXHQvLyBUaGlzIHRyYW5zcG9ydCBvbmx5IGRlYWxzIHdpdGggY3Jvc3MgZG9tYWluIHJlcXVlc3RzXHJcblx0aWYgKCBzLmNyb3NzRG9tYWluICkge1xyXG5cdFx0dmFyIHNjcmlwdCwgY2FsbGJhY2s7XHJcblx0XHRyZXR1cm4ge1xyXG5cdFx0XHRzZW5kOiBmdW5jdGlvbiggXywgY29tcGxldGUgKSB7XHJcblx0XHRcdFx0c2NyaXB0ID0galF1ZXJ5KCBcIjxzY3JpcHQ+XCIgKS5wcm9wKCB7XHJcblx0XHRcdFx0XHRjaGFyc2V0OiBzLnNjcmlwdENoYXJzZXQsXHJcblx0XHRcdFx0XHRzcmM6IHMudXJsXHJcblx0XHRcdFx0fSApLm9uKFxyXG5cdFx0XHRcdFx0XCJsb2FkIGVycm9yXCIsXHJcblx0XHRcdFx0XHRjYWxsYmFjayA9IGZ1bmN0aW9uKCBldnQgKSB7XHJcblx0XHRcdFx0XHRcdHNjcmlwdC5yZW1vdmUoKTtcclxuXHRcdFx0XHRcdFx0Y2FsbGJhY2sgPSBudWxsO1xyXG5cdFx0XHRcdFx0XHRpZiAoIGV2dCApIHtcclxuXHRcdFx0XHRcdFx0XHRjb21wbGV0ZSggZXZ0LnR5cGUgPT09IFwiZXJyb3JcIiA/IDQwNCA6IDIwMCwgZXZ0LnR5cGUgKTtcclxuXHRcdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0fVxyXG5cdFx0XHRcdCk7XHJcblxyXG5cdFx0XHRcdC8vIFVzZSBuYXRpdmUgRE9NIG1hbmlwdWxhdGlvbiB0byBhdm9pZCBvdXIgZG9tTWFuaXAgQUpBWCB0cmlja2VyeVxyXG5cdFx0XHRcdGRvY3VtZW50LmhlYWQuYXBwZW5kQ2hpbGQoIHNjcmlwdFsgMCBdICk7XHJcblx0XHRcdH0sXHJcblx0XHRcdGFib3J0OiBmdW5jdGlvbigpIHtcclxuXHRcdFx0XHRpZiAoIGNhbGxiYWNrICkge1xyXG5cdFx0XHRcdFx0Y2FsbGJhY2soKTtcclxuXHRcdFx0XHR9XHJcblx0XHRcdH1cclxuXHRcdH07XHJcblx0fVxyXG59ICk7XHJcblxyXG5cclxuXHJcblxyXG52YXIgb2xkQ2FsbGJhY2tzID0gW10sXHJcblx0cmpzb25wID0gLyg9KVxcPyg/PSZ8JCl8XFw/XFw/LztcclxuXHJcbi8vIERlZmF1bHQganNvbnAgc2V0dGluZ3NcclxualF1ZXJ5LmFqYXhTZXR1cCgge1xyXG5cdGpzb25wOiBcImNhbGxiYWNrXCIsXHJcblx0anNvbnBDYWxsYmFjazogZnVuY3Rpb24oKSB7XHJcblx0XHR2YXIgY2FsbGJhY2sgPSBvbGRDYWxsYmFja3MucG9wKCkgfHwgKCBqUXVlcnkuZXhwYW5kbyArIFwiX1wiICsgKCBub25jZSsrICkgKTtcclxuXHRcdHRoaXNbIGNhbGxiYWNrIF0gPSB0cnVlO1xyXG5cdFx0cmV0dXJuIGNhbGxiYWNrO1xyXG5cdH1cclxufSApO1xyXG5cclxuLy8gRGV0ZWN0LCBub3JtYWxpemUgb3B0aW9ucyBhbmQgaW5zdGFsbCBjYWxsYmFja3MgZm9yIGpzb25wIHJlcXVlc3RzXHJcbmpRdWVyeS5hamF4UHJlZmlsdGVyKCBcImpzb24ganNvbnBcIiwgZnVuY3Rpb24oIHMsIG9yaWdpbmFsU2V0dGluZ3MsIGpxWEhSICkge1xyXG5cclxuXHR2YXIgY2FsbGJhY2tOYW1lLCBvdmVyd3JpdHRlbiwgcmVzcG9uc2VDb250YWluZXIsXHJcblx0XHRqc29uUHJvcCA9IHMuanNvbnAgIT09IGZhbHNlICYmICggcmpzb25wLnRlc3QoIHMudXJsICkgP1xyXG5cdFx0XHRcInVybFwiIDpcclxuXHRcdFx0dHlwZW9mIHMuZGF0YSA9PT0gXCJzdHJpbmdcIiAmJlxyXG5cdFx0XHRcdCggcy5jb250ZW50VHlwZSB8fCBcIlwiIClcclxuXHRcdFx0XHRcdC5pbmRleE9mKCBcImFwcGxpY2F0aW9uL3gtd3d3LWZvcm0tdXJsZW5jb2RlZFwiICkgPT09IDAgJiZcclxuXHRcdFx0XHRyanNvbnAudGVzdCggcy5kYXRhICkgJiYgXCJkYXRhXCJcclxuXHRcdCk7XHJcblxyXG5cdC8vIEhhbmRsZSBpZmYgdGhlIGV4cGVjdGVkIGRhdGEgdHlwZSBpcyBcImpzb25wXCIgb3Igd2UgaGF2ZSBhIHBhcmFtZXRlciB0byBzZXRcclxuXHRpZiAoIGpzb25Qcm9wIHx8IHMuZGF0YVR5cGVzWyAwIF0gPT09IFwianNvbnBcIiApIHtcclxuXHJcblx0XHQvLyBHZXQgY2FsbGJhY2sgbmFtZSwgcmVtZW1iZXJpbmcgcHJlZXhpc3RpbmcgdmFsdWUgYXNzb2NpYXRlZCB3aXRoIGl0XHJcblx0XHRjYWxsYmFja05hbWUgPSBzLmpzb25wQ2FsbGJhY2sgPSBqUXVlcnkuaXNGdW5jdGlvbiggcy5qc29ucENhbGxiYWNrICkgP1xyXG5cdFx0XHRzLmpzb25wQ2FsbGJhY2soKSA6XHJcblx0XHRcdHMuanNvbnBDYWxsYmFjaztcclxuXHJcblx0XHQvLyBJbnNlcnQgY2FsbGJhY2sgaW50byB1cmwgb3IgZm9ybSBkYXRhXHJcblx0XHRpZiAoIGpzb25Qcm9wICkge1xyXG5cdFx0XHRzWyBqc29uUHJvcCBdID0gc1sganNvblByb3AgXS5yZXBsYWNlKCByanNvbnAsIFwiJDFcIiArIGNhbGxiYWNrTmFtZSApO1xyXG5cdFx0fSBlbHNlIGlmICggcy5qc29ucCAhPT0gZmFsc2UgKSB7XHJcblx0XHRcdHMudXJsICs9ICggcnF1ZXJ5LnRlc3QoIHMudXJsICkgPyBcIiZcIiA6IFwiP1wiICkgKyBzLmpzb25wICsgXCI9XCIgKyBjYWxsYmFja05hbWU7XHJcblx0XHR9XHJcblxyXG5cdFx0Ly8gVXNlIGRhdGEgY29udmVydGVyIHRvIHJldHJpZXZlIGpzb24gYWZ0ZXIgc2NyaXB0IGV4ZWN1dGlvblxyXG5cdFx0cy5jb252ZXJ0ZXJzWyBcInNjcmlwdCBqc29uXCIgXSA9IGZ1bmN0aW9uKCkge1xyXG5cdFx0XHRpZiAoICFyZXNwb25zZUNvbnRhaW5lciApIHtcclxuXHRcdFx0XHRqUXVlcnkuZXJyb3IoIGNhbGxiYWNrTmFtZSArIFwiIHdhcyBub3QgY2FsbGVkXCIgKTtcclxuXHRcdFx0fVxyXG5cdFx0XHRyZXR1cm4gcmVzcG9uc2VDb250YWluZXJbIDAgXTtcclxuXHRcdH07XHJcblxyXG5cdFx0Ly8gRm9yY2UganNvbiBkYXRhVHlwZVxyXG5cdFx0cy5kYXRhVHlwZXNbIDAgXSA9IFwianNvblwiO1xyXG5cclxuXHRcdC8vIEluc3RhbGwgY2FsbGJhY2tcclxuXHRcdG92ZXJ3cml0dGVuID0gd2luZG93WyBjYWxsYmFja05hbWUgXTtcclxuXHRcdHdpbmRvd1sgY2FsbGJhY2tOYW1lIF0gPSBmdW5jdGlvbigpIHtcclxuXHRcdFx0cmVzcG9uc2VDb250YWluZXIgPSBhcmd1bWVudHM7XHJcblx0XHR9O1xyXG5cclxuXHRcdC8vIENsZWFuLXVwIGZ1bmN0aW9uIChmaXJlcyBhZnRlciBjb252ZXJ0ZXJzKVxyXG5cdFx0anFYSFIuYWx3YXlzKCBmdW5jdGlvbigpIHtcclxuXHJcblx0XHRcdC8vIElmIHByZXZpb3VzIHZhbHVlIGRpZG4ndCBleGlzdCAtIHJlbW92ZSBpdFxyXG5cdFx0XHRpZiAoIG92ZXJ3cml0dGVuID09PSB1bmRlZmluZWQgKSB7XHJcblx0XHRcdFx0alF1ZXJ5KCB3aW5kb3cgKS5yZW1vdmVQcm9wKCBjYWxsYmFja05hbWUgKTtcclxuXHJcblx0XHRcdC8vIE90aGVyd2lzZSByZXN0b3JlIHByZWV4aXN0aW5nIHZhbHVlXHJcblx0XHRcdH0gZWxzZSB7XHJcblx0XHRcdFx0d2luZG93WyBjYWxsYmFja05hbWUgXSA9IG92ZXJ3cml0dGVuO1xyXG5cdFx0XHR9XHJcblxyXG5cdFx0XHQvLyBTYXZlIGJhY2sgYXMgZnJlZVxyXG5cdFx0XHRpZiAoIHNbIGNhbGxiYWNrTmFtZSBdICkge1xyXG5cclxuXHRcdFx0XHQvLyBNYWtlIHN1cmUgdGhhdCByZS11c2luZyB0aGUgb3B0aW9ucyBkb2Vzbid0IHNjcmV3IHRoaW5ncyBhcm91bmRcclxuXHRcdFx0XHRzLmpzb25wQ2FsbGJhY2sgPSBvcmlnaW5hbFNldHRpbmdzLmpzb25wQ2FsbGJhY2s7XHJcblxyXG5cdFx0XHRcdC8vIFNhdmUgdGhlIGNhbGxiYWNrIG5hbWUgZm9yIGZ1dHVyZSB1c2VcclxuXHRcdFx0XHRvbGRDYWxsYmFja3MucHVzaCggY2FsbGJhY2tOYW1lICk7XHJcblx0XHRcdH1cclxuXHJcblx0XHRcdC8vIENhbGwgaWYgaXQgd2FzIGEgZnVuY3Rpb24gYW5kIHdlIGhhdmUgYSByZXNwb25zZVxyXG5cdFx0XHRpZiAoIHJlc3BvbnNlQ29udGFpbmVyICYmIGpRdWVyeS5pc0Z1bmN0aW9uKCBvdmVyd3JpdHRlbiApICkge1xyXG5cdFx0XHRcdG92ZXJ3cml0dGVuKCByZXNwb25zZUNvbnRhaW5lclsgMCBdICk7XHJcblx0XHRcdH1cclxuXHJcblx0XHRcdHJlc3BvbnNlQ29udGFpbmVyID0gb3ZlcndyaXR0ZW4gPSB1bmRlZmluZWQ7XHJcblx0XHR9ICk7XHJcblxyXG5cdFx0Ly8gRGVsZWdhdGUgdG8gc2NyaXB0XHJcblx0XHRyZXR1cm4gXCJzY3JpcHRcIjtcclxuXHR9XHJcbn0gKTtcclxuXHJcblxyXG5cclxuXHJcbi8vIEFyZ3VtZW50IFwiZGF0YVwiIHNob3VsZCBiZSBzdHJpbmcgb2YgaHRtbFxyXG4vLyBjb250ZXh0IChvcHRpb25hbCk6IElmIHNwZWNpZmllZCwgdGhlIGZyYWdtZW50IHdpbGwgYmUgY3JlYXRlZCBpbiB0aGlzIGNvbnRleHQsXHJcbi8vIGRlZmF1bHRzIHRvIGRvY3VtZW50XHJcbi8vIGtlZXBTY3JpcHRzIChvcHRpb25hbCk6IElmIHRydWUsIHdpbGwgaW5jbHVkZSBzY3JpcHRzIHBhc3NlZCBpbiB0aGUgaHRtbCBzdHJpbmdcclxualF1ZXJ5LnBhcnNlSFRNTCA9IGZ1bmN0aW9uKCBkYXRhLCBjb250ZXh0LCBrZWVwU2NyaXB0cyApIHtcclxuXHRpZiAoICFkYXRhIHx8IHR5cGVvZiBkYXRhICE9PSBcInN0cmluZ1wiICkge1xyXG5cdFx0cmV0dXJuIG51bGw7XHJcblx0fVxyXG5cdGlmICggdHlwZW9mIGNvbnRleHQgPT09IFwiYm9vbGVhblwiICkge1xyXG5cdFx0a2VlcFNjcmlwdHMgPSBjb250ZXh0O1xyXG5cdFx0Y29udGV4dCA9IGZhbHNlO1xyXG5cdH1cclxuXHRjb250ZXh0ID0gY29udGV4dCB8fCBkb2N1bWVudDtcclxuXHJcblx0dmFyIHBhcnNlZCA9IHJzaW5nbGVUYWcuZXhlYyggZGF0YSApLFxyXG5cdFx0c2NyaXB0cyA9ICFrZWVwU2NyaXB0cyAmJiBbXTtcclxuXHJcblx0Ly8gU2luZ2xlIHRhZ1xyXG5cdGlmICggcGFyc2VkICkge1xyXG5cdFx0cmV0dXJuIFsgY29udGV4dC5jcmVhdGVFbGVtZW50KCBwYXJzZWRbIDEgXSApIF07XHJcblx0fVxyXG5cclxuXHRwYXJzZWQgPSBidWlsZEZyYWdtZW50KCBbIGRhdGEgXSwgY29udGV4dCwgc2NyaXB0cyApO1xyXG5cclxuXHRpZiAoIHNjcmlwdHMgJiYgc2NyaXB0cy5sZW5ndGggKSB7XHJcblx0XHRqUXVlcnkoIHNjcmlwdHMgKS5yZW1vdmUoKTtcclxuXHR9XHJcblxyXG5cdHJldHVybiBqUXVlcnkubWVyZ2UoIFtdLCBwYXJzZWQuY2hpbGROb2RlcyApO1xyXG59O1xyXG5cclxuXHJcbi8vIEtlZXAgYSBjb3B5IG9mIHRoZSBvbGQgbG9hZCBtZXRob2RcclxudmFyIF9sb2FkID0galF1ZXJ5LmZuLmxvYWQ7XHJcblxyXG4vKipcclxuICogTG9hZCBhIHVybCBpbnRvIGEgcGFnZVxyXG4gKi9cclxualF1ZXJ5LmZuLmxvYWQgPSBmdW5jdGlvbiggdXJsLCBwYXJhbXMsIGNhbGxiYWNrICkge1xyXG5cdGlmICggdHlwZW9mIHVybCAhPT0gXCJzdHJpbmdcIiAmJiBfbG9hZCApIHtcclxuXHRcdHJldHVybiBfbG9hZC5hcHBseSggdGhpcywgYXJndW1lbnRzICk7XHJcblx0fVxyXG5cclxuXHR2YXIgc2VsZWN0b3IsIHR5cGUsIHJlc3BvbnNlLFxyXG5cdFx0c2VsZiA9IHRoaXMsXHJcblx0XHRvZmYgPSB1cmwuaW5kZXhPZiggXCIgXCIgKTtcclxuXHJcblx0aWYgKCBvZmYgPiAtMSApIHtcclxuXHRcdHNlbGVjdG9yID0galF1ZXJ5LnRyaW0oIHVybC5zbGljZSggb2ZmICkgKTtcclxuXHRcdHVybCA9IHVybC5zbGljZSggMCwgb2ZmICk7XHJcblx0fVxyXG5cclxuXHQvLyBJZiBpdCdzIGEgZnVuY3Rpb25cclxuXHRpZiAoIGpRdWVyeS5pc0Z1bmN0aW9uKCBwYXJhbXMgKSApIHtcclxuXHJcblx0XHQvLyBXZSBhc3N1bWUgdGhhdCBpdCdzIHRoZSBjYWxsYmFja1xyXG5cdFx0Y2FsbGJhY2sgPSBwYXJhbXM7XHJcblx0XHRwYXJhbXMgPSB1bmRlZmluZWQ7XHJcblxyXG5cdC8vIE90aGVyd2lzZSwgYnVpbGQgYSBwYXJhbSBzdHJpbmdcclxuXHR9IGVsc2UgaWYgKCBwYXJhbXMgJiYgdHlwZW9mIHBhcmFtcyA9PT0gXCJvYmplY3RcIiApIHtcclxuXHRcdHR5cGUgPSBcIlBPU1RcIjtcclxuXHR9XHJcblxyXG5cdC8vIElmIHdlIGhhdmUgZWxlbWVudHMgdG8gbW9kaWZ5LCBtYWtlIHRoZSByZXF1ZXN0XHJcblx0aWYgKCBzZWxmLmxlbmd0aCA+IDAgKSB7XHJcblx0XHRqUXVlcnkuYWpheCgge1xyXG5cdFx0XHR1cmw6IHVybCxcclxuXHJcblx0XHRcdC8vIElmIFwidHlwZVwiIHZhcmlhYmxlIGlzIHVuZGVmaW5lZCwgdGhlbiBcIkdFVFwiIG1ldGhvZCB3aWxsIGJlIHVzZWQuXHJcblx0XHRcdC8vIE1ha2UgdmFsdWUgb2YgdGhpcyBmaWVsZCBleHBsaWNpdCBzaW5jZVxyXG5cdFx0XHQvLyB1c2VyIGNhbiBvdmVycmlkZSBpdCB0aHJvdWdoIGFqYXhTZXR1cCBtZXRob2RcclxuXHRcdFx0dHlwZTogdHlwZSB8fCBcIkdFVFwiLFxyXG5cdFx0XHRkYXRhVHlwZTogXCJodG1sXCIsXHJcblx0XHRcdGRhdGE6IHBhcmFtc1xyXG5cdFx0fSApLmRvbmUoIGZ1bmN0aW9uKCByZXNwb25zZVRleHQgKSB7XHJcblxyXG5cdFx0XHQvLyBTYXZlIHJlc3BvbnNlIGZvciB1c2UgaW4gY29tcGxldGUgY2FsbGJhY2tcclxuXHRcdFx0cmVzcG9uc2UgPSBhcmd1bWVudHM7XHJcblxyXG5cdFx0XHRzZWxmLmh0bWwoIHNlbGVjdG9yID9cclxuXHJcblx0XHRcdFx0Ly8gSWYgYSBzZWxlY3RvciB3YXMgc3BlY2lmaWVkLCBsb2NhdGUgdGhlIHJpZ2h0IGVsZW1lbnRzIGluIGEgZHVtbXkgZGl2XHJcblx0XHRcdFx0Ly8gRXhjbHVkZSBzY3JpcHRzIHRvIGF2b2lkIElFICdQZXJtaXNzaW9uIERlbmllZCcgZXJyb3JzXHJcblx0XHRcdFx0alF1ZXJ5KCBcIjxkaXY+XCIgKS5hcHBlbmQoIGpRdWVyeS5wYXJzZUhUTUwoIHJlc3BvbnNlVGV4dCApICkuZmluZCggc2VsZWN0b3IgKSA6XHJcblxyXG5cdFx0XHRcdC8vIE90aGVyd2lzZSB1c2UgdGhlIGZ1bGwgcmVzdWx0XHJcblx0XHRcdFx0cmVzcG9uc2VUZXh0ICk7XHJcblxyXG5cdFx0Ly8gSWYgdGhlIHJlcXVlc3Qgc3VjY2VlZHMsIHRoaXMgZnVuY3Rpb24gZ2V0cyBcImRhdGFcIiwgXCJzdGF0dXNcIiwgXCJqcVhIUlwiXHJcblx0XHQvLyBidXQgdGhleSBhcmUgaWdub3JlZCBiZWNhdXNlIHJlc3BvbnNlIHdhcyBzZXQgYWJvdmUuXHJcblx0XHQvLyBJZiBpdCBmYWlscywgdGhpcyBmdW5jdGlvbiBnZXRzIFwianFYSFJcIiwgXCJzdGF0dXNcIiwgXCJlcnJvclwiXHJcblx0XHR9ICkuYWx3YXlzKCBjYWxsYmFjayAmJiBmdW5jdGlvbigganFYSFIsIHN0YXR1cyApIHtcclxuXHRcdFx0c2VsZi5lYWNoKCBmdW5jdGlvbigpIHtcclxuXHRcdFx0XHRjYWxsYmFjay5hcHBseSggdGhpcywgcmVzcG9uc2UgfHwgWyBqcVhIUi5yZXNwb25zZVRleHQsIHN0YXR1cywganFYSFIgXSApO1xyXG5cdFx0XHR9ICk7XHJcblx0XHR9ICk7XHJcblx0fVxyXG5cclxuXHRyZXR1cm4gdGhpcztcclxufTtcclxuXHJcblxyXG5cclxuXHJcbi8vIEF0dGFjaCBhIGJ1bmNoIG9mIGZ1bmN0aW9ucyBmb3IgaGFuZGxpbmcgY29tbW9uIEFKQVggZXZlbnRzXHJcbmpRdWVyeS5lYWNoKCBbXHJcblx0XCJhamF4U3RhcnRcIixcclxuXHRcImFqYXhTdG9wXCIsXHJcblx0XCJhamF4Q29tcGxldGVcIixcclxuXHRcImFqYXhFcnJvclwiLFxyXG5cdFwiYWpheFN1Y2Nlc3NcIixcclxuXHRcImFqYXhTZW5kXCJcclxuXSwgZnVuY3Rpb24oIGksIHR5cGUgKSB7XHJcblx0alF1ZXJ5LmZuWyB0eXBlIF0gPSBmdW5jdGlvbiggZm4gKSB7XHJcblx0XHRyZXR1cm4gdGhpcy5vbiggdHlwZSwgZm4gKTtcclxuXHR9O1xyXG59ICk7XHJcblxyXG5cclxuXHJcblxyXG5qUXVlcnkuZXhwci5maWx0ZXJzLmFuaW1hdGVkID0gZnVuY3Rpb24oIGVsZW0gKSB7XHJcblx0cmV0dXJuIGpRdWVyeS5ncmVwKCBqUXVlcnkudGltZXJzLCBmdW5jdGlvbiggZm4gKSB7XHJcblx0XHRyZXR1cm4gZWxlbSA9PT0gZm4uZWxlbTtcclxuXHR9ICkubGVuZ3RoO1xyXG59O1xyXG5cclxuXHJcblxyXG5cclxuLyoqXHJcbiAqIEdldHMgYSB3aW5kb3cgZnJvbSBhbiBlbGVtZW50XHJcbiAqL1xyXG5mdW5jdGlvbiBnZXRXaW5kb3coIGVsZW0gKSB7XHJcblx0cmV0dXJuIGpRdWVyeS5pc1dpbmRvdyggZWxlbSApID8gZWxlbSA6IGVsZW0ubm9kZVR5cGUgPT09IDkgJiYgZWxlbS5kZWZhdWx0VmlldztcclxufVxyXG5cclxualF1ZXJ5Lm9mZnNldCA9IHtcclxuXHRzZXRPZmZzZXQ6IGZ1bmN0aW9uKCBlbGVtLCBvcHRpb25zLCBpICkge1xyXG5cdFx0dmFyIGN1clBvc2l0aW9uLCBjdXJMZWZ0LCBjdXJDU1NUb3AsIGN1clRvcCwgY3VyT2Zmc2V0LCBjdXJDU1NMZWZ0LCBjYWxjdWxhdGVQb3NpdGlvbixcclxuXHRcdFx0cG9zaXRpb24gPSBqUXVlcnkuY3NzKCBlbGVtLCBcInBvc2l0aW9uXCIgKSxcclxuXHRcdFx0Y3VyRWxlbSA9IGpRdWVyeSggZWxlbSApLFxyXG5cdFx0XHRwcm9wcyA9IHt9O1xyXG5cclxuXHRcdC8vIFNldCBwb3NpdGlvbiBmaXJzdCwgaW4tY2FzZSB0b3AvbGVmdCBhcmUgc2V0IGV2ZW4gb24gc3RhdGljIGVsZW1cclxuXHRcdGlmICggcG9zaXRpb24gPT09IFwic3RhdGljXCIgKSB7XHJcblx0XHRcdGVsZW0uc3R5bGUucG9zaXRpb24gPSBcInJlbGF0aXZlXCI7XHJcblx0XHR9XHJcblxyXG5cdFx0Y3VyT2Zmc2V0ID0gY3VyRWxlbS5vZmZzZXQoKTtcclxuXHRcdGN1ckNTU1RvcCA9IGpRdWVyeS5jc3MoIGVsZW0sIFwidG9wXCIgKTtcclxuXHRcdGN1ckNTU0xlZnQgPSBqUXVlcnkuY3NzKCBlbGVtLCBcImxlZnRcIiApO1xyXG5cdFx0Y2FsY3VsYXRlUG9zaXRpb24gPSAoIHBvc2l0aW9uID09PSBcImFic29sdXRlXCIgfHwgcG9zaXRpb24gPT09IFwiZml4ZWRcIiApICYmXHJcblx0XHRcdCggY3VyQ1NTVG9wICsgY3VyQ1NTTGVmdCApLmluZGV4T2YoIFwiYXV0b1wiICkgPiAtMTtcclxuXHJcblx0XHQvLyBOZWVkIHRvIGJlIGFibGUgdG8gY2FsY3VsYXRlIHBvc2l0aW9uIGlmIGVpdGhlclxyXG5cdFx0Ly8gdG9wIG9yIGxlZnQgaXMgYXV0byBhbmQgcG9zaXRpb24gaXMgZWl0aGVyIGFic29sdXRlIG9yIGZpeGVkXHJcblx0XHRpZiAoIGNhbGN1bGF0ZVBvc2l0aW9uICkge1xyXG5cdFx0XHRjdXJQb3NpdGlvbiA9IGN1ckVsZW0ucG9zaXRpb24oKTtcclxuXHRcdFx0Y3VyVG9wID0gY3VyUG9zaXRpb24udG9wO1xyXG5cdFx0XHRjdXJMZWZ0ID0gY3VyUG9zaXRpb24ubGVmdDtcclxuXHJcblx0XHR9IGVsc2Uge1xyXG5cdFx0XHRjdXJUb3AgPSBwYXJzZUZsb2F0KCBjdXJDU1NUb3AgKSB8fCAwO1xyXG5cdFx0XHRjdXJMZWZ0ID0gcGFyc2VGbG9hdCggY3VyQ1NTTGVmdCApIHx8IDA7XHJcblx0XHR9XHJcblxyXG5cdFx0aWYgKCBqUXVlcnkuaXNGdW5jdGlvbiggb3B0aW9ucyApICkge1xyXG5cclxuXHRcdFx0Ly8gVXNlIGpRdWVyeS5leHRlbmQgaGVyZSB0byBhbGxvdyBtb2RpZmljYXRpb24gb2YgY29vcmRpbmF0ZXMgYXJndW1lbnQgKGdoLTE4NDgpXHJcblx0XHRcdG9wdGlvbnMgPSBvcHRpb25zLmNhbGwoIGVsZW0sIGksIGpRdWVyeS5leHRlbmQoIHt9LCBjdXJPZmZzZXQgKSApO1xyXG5cdFx0fVxyXG5cclxuXHRcdGlmICggb3B0aW9ucy50b3AgIT0gbnVsbCApIHtcclxuXHRcdFx0cHJvcHMudG9wID0gKCBvcHRpb25zLnRvcCAtIGN1ck9mZnNldC50b3AgKSArIGN1clRvcDtcclxuXHRcdH1cclxuXHRcdGlmICggb3B0aW9ucy5sZWZ0ICE9IG51bGwgKSB7XHJcblx0XHRcdHByb3BzLmxlZnQgPSAoIG9wdGlvbnMubGVmdCAtIGN1ck9mZnNldC5sZWZ0ICkgKyBjdXJMZWZ0O1xyXG5cdFx0fVxyXG5cclxuXHRcdGlmICggXCJ1c2luZ1wiIGluIG9wdGlvbnMgKSB7XHJcblx0XHRcdG9wdGlvbnMudXNpbmcuY2FsbCggZWxlbSwgcHJvcHMgKTtcclxuXHJcblx0XHR9IGVsc2Uge1xyXG5cdFx0XHRjdXJFbGVtLmNzcyggcHJvcHMgKTtcclxuXHRcdH1cclxuXHR9XHJcbn07XHJcblxyXG5qUXVlcnkuZm4uZXh0ZW5kKCB7XHJcblx0b2Zmc2V0OiBmdW5jdGlvbiggb3B0aW9ucyApIHtcclxuXHRcdGlmICggYXJndW1lbnRzLmxlbmd0aCApIHtcclxuXHRcdFx0cmV0dXJuIG9wdGlvbnMgPT09IHVuZGVmaW5lZCA/XHJcblx0XHRcdFx0dGhpcyA6XHJcblx0XHRcdFx0dGhpcy5lYWNoKCBmdW5jdGlvbiggaSApIHtcclxuXHRcdFx0XHRcdGpRdWVyeS5vZmZzZXQuc2V0T2Zmc2V0KCB0aGlzLCBvcHRpb25zLCBpICk7XHJcblx0XHRcdFx0fSApO1xyXG5cdFx0fVxyXG5cclxuXHRcdHZhciBkb2NFbGVtLCB3aW4sXHJcblx0XHRcdGVsZW0gPSB0aGlzWyAwIF0sXHJcblx0XHRcdGJveCA9IHsgdG9wOiAwLCBsZWZ0OiAwIH0sXHJcblx0XHRcdGRvYyA9IGVsZW0gJiYgZWxlbS5vd25lckRvY3VtZW50O1xyXG5cclxuXHRcdGlmICggIWRvYyApIHtcclxuXHRcdFx0cmV0dXJuO1xyXG5cdFx0fVxyXG5cclxuXHRcdGRvY0VsZW0gPSBkb2MuZG9jdW1lbnRFbGVtZW50O1xyXG5cclxuXHRcdC8vIE1ha2Ugc3VyZSBpdCdzIG5vdCBhIGRpc2Nvbm5lY3RlZCBET00gbm9kZVxyXG5cdFx0aWYgKCAhalF1ZXJ5LmNvbnRhaW5zKCBkb2NFbGVtLCBlbGVtICkgKSB7XHJcblx0XHRcdHJldHVybiBib3g7XHJcblx0XHR9XHJcblxyXG5cdFx0Ym94ID0gZWxlbS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcclxuXHRcdHdpbiA9IGdldFdpbmRvdyggZG9jICk7XHJcblx0XHRyZXR1cm4ge1xyXG5cdFx0XHR0b3A6IGJveC50b3AgKyB3aW4ucGFnZVlPZmZzZXQgLSBkb2NFbGVtLmNsaWVudFRvcCxcclxuXHRcdFx0bGVmdDogYm94LmxlZnQgKyB3aW4ucGFnZVhPZmZzZXQgLSBkb2NFbGVtLmNsaWVudExlZnRcclxuXHRcdH07XHJcblx0fSxcclxuXHJcblx0cG9zaXRpb246IGZ1bmN0aW9uKCkge1xyXG5cdFx0aWYgKCAhdGhpc1sgMCBdICkge1xyXG5cdFx0XHRyZXR1cm47XHJcblx0XHR9XHJcblxyXG5cdFx0dmFyIG9mZnNldFBhcmVudCwgb2Zmc2V0LFxyXG5cdFx0XHRlbGVtID0gdGhpc1sgMCBdLFxyXG5cdFx0XHRwYXJlbnRPZmZzZXQgPSB7IHRvcDogMCwgbGVmdDogMCB9O1xyXG5cclxuXHRcdC8vIEZpeGVkIGVsZW1lbnRzIGFyZSBvZmZzZXQgZnJvbSB3aW5kb3cgKHBhcmVudE9mZnNldCA9IHt0b3A6MCwgbGVmdDogMH0sXHJcblx0XHQvLyBiZWNhdXNlIGl0IGlzIGl0cyBvbmx5IG9mZnNldCBwYXJlbnRcclxuXHRcdGlmICggalF1ZXJ5LmNzcyggZWxlbSwgXCJwb3NpdGlvblwiICkgPT09IFwiZml4ZWRcIiApIHtcclxuXHJcblx0XHRcdC8vIEFzc3VtZSBnZXRCb3VuZGluZ0NsaWVudFJlY3QgaXMgdGhlcmUgd2hlbiBjb21wdXRlZCBwb3NpdGlvbiBpcyBmaXhlZFxyXG5cdFx0XHRvZmZzZXQgPSBlbGVtLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xyXG5cclxuXHRcdH0gZWxzZSB7XHJcblxyXG5cdFx0XHQvLyBHZXQgKnJlYWwqIG9mZnNldFBhcmVudFxyXG5cdFx0XHRvZmZzZXRQYXJlbnQgPSB0aGlzLm9mZnNldFBhcmVudCgpO1xyXG5cclxuXHRcdFx0Ly8gR2V0IGNvcnJlY3Qgb2Zmc2V0c1xyXG5cdFx0XHRvZmZzZXQgPSB0aGlzLm9mZnNldCgpO1xyXG5cdFx0XHRpZiAoICFqUXVlcnkubm9kZU5hbWUoIG9mZnNldFBhcmVudFsgMCBdLCBcImh0bWxcIiApICkge1xyXG5cdFx0XHRcdHBhcmVudE9mZnNldCA9IG9mZnNldFBhcmVudC5vZmZzZXQoKTtcclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0Ly8gQWRkIG9mZnNldFBhcmVudCBib3JkZXJzXHJcblx0XHRcdHBhcmVudE9mZnNldC50b3AgKz0galF1ZXJ5LmNzcyggb2Zmc2V0UGFyZW50WyAwIF0sIFwiYm9yZGVyVG9wV2lkdGhcIiwgdHJ1ZSApO1xyXG5cdFx0XHRwYXJlbnRPZmZzZXQubGVmdCArPSBqUXVlcnkuY3NzKCBvZmZzZXRQYXJlbnRbIDAgXSwgXCJib3JkZXJMZWZ0V2lkdGhcIiwgdHJ1ZSApO1xyXG5cdFx0fVxyXG5cclxuXHRcdC8vIFN1YnRyYWN0IHBhcmVudCBvZmZzZXRzIGFuZCBlbGVtZW50IG1hcmdpbnNcclxuXHRcdHJldHVybiB7XHJcblx0XHRcdHRvcDogb2Zmc2V0LnRvcCAtIHBhcmVudE9mZnNldC50b3AgLSBqUXVlcnkuY3NzKCBlbGVtLCBcIm1hcmdpblRvcFwiLCB0cnVlICksXHJcblx0XHRcdGxlZnQ6IG9mZnNldC5sZWZ0IC0gcGFyZW50T2Zmc2V0LmxlZnQgLSBqUXVlcnkuY3NzKCBlbGVtLCBcIm1hcmdpbkxlZnRcIiwgdHJ1ZSApXHJcblx0XHR9O1xyXG5cdH0sXHJcblxyXG5cdC8vIFRoaXMgbWV0aG9kIHdpbGwgcmV0dXJuIGRvY3VtZW50RWxlbWVudCBpbiB0aGUgZm9sbG93aW5nIGNhc2VzOlxyXG5cdC8vIDEpIEZvciB0aGUgZWxlbWVudCBpbnNpZGUgdGhlIGlmcmFtZSB3aXRob3V0IG9mZnNldFBhcmVudCwgdGhpcyBtZXRob2Qgd2lsbCByZXR1cm5cclxuXHQvLyAgICBkb2N1bWVudEVsZW1lbnQgb2YgdGhlIHBhcmVudCB3aW5kb3dcclxuXHQvLyAyKSBGb3IgdGhlIGhpZGRlbiBvciBkZXRhY2hlZCBlbGVtZW50XHJcblx0Ly8gMykgRm9yIGJvZHkgb3IgaHRtbCBlbGVtZW50LCBpLmUuIGluIGNhc2Ugb2YgdGhlIGh0bWwgbm9kZSAtIGl0IHdpbGwgcmV0dXJuIGl0c2VsZlxyXG5cdC8vXHJcblx0Ly8gYnV0IHRob3NlIGV4Y2VwdGlvbnMgd2VyZSBuZXZlciBwcmVzZW50ZWQgYXMgYSByZWFsIGxpZmUgdXNlLWNhc2VzXHJcblx0Ly8gYW5kIG1pZ2h0IGJlIGNvbnNpZGVyZWQgYXMgbW9yZSBwcmVmZXJhYmxlIHJlc3VsdHMuXHJcblx0Ly9cclxuXHQvLyBUaGlzIGxvZ2ljLCBob3dldmVyLCBpcyBub3QgZ3VhcmFudGVlZCBhbmQgY2FuIGNoYW5nZSBhdCBhbnkgcG9pbnQgaW4gdGhlIGZ1dHVyZVxyXG5cdG9mZnNldFBhcmVudDogZnVuY3Rpb24oKSB7XHJcblx0XHRyZXR1cm4gdGhpcy5tYXAoIGZ1bmN0aW9uKCkge1xyXG5cdFx0XHR2YXIgb2Zmc2V0UGFyZW50ID0gdGhpcy5vZmZzZXRQYXJlbnQ7XHJcblxyXG5cdFx0XHR3aGlsZSAoIG9mZnNldFBhcmVudCAmJiBqUXVlcnkuY3NzKCBvZmZzZXRQYXJlbnQsIFwicG9zaXRpb25cIiApID09PSBcInN0YXRpY1wiICkge1xyXG5cdFx0XHRcdG9mZnNldFBhcmVudCA9IG9mZnNldFBhcmVudC5vZmZzZXRQYXJlbnQ7XHJcblx0XHRcdH1cclxuXHJcblx0XHRcdHJldHVybiBvZmZzZXRQYXJlbnQgfHwgZG9jdW1lbnRFbGVtZW50O1xyXG5cdFx0fSApO1xyXG5cdH1cclxufSApO1xyXG5cclxuLy8gQ3JlYXRlIHNjcm9sbExlZnQgYW5kIHNjcm9sbFRvcCBtZXRob2RzXHJcbmpRdWVyeS5lYWNoKCB7IHNjcm9sbExlZnQ6IFwicGFnZVhPZmZzZXRcIiwgc2Nyb2xsVG9wOiBcInBhZ2VZT2Zmc2V0XCIgfSwgZnVuY3Rpb24oIG1ldGhvZCwgcHJvcCApIHtcclxuXHR2YXIgdG9wID0gXCJwYWdlWU9mZnNldFwiID09PSBwcm9wO1xyXG5cclxuXHRqUXVlcnkuZm5bIG1ldGhvZCBdID0gZnVuY3Rpb24oIHZhbCApIHtcclxuXHRcdHJldHVybiBhY2Nlc3MoIHRoaXMsIGZ1bmN0aW9uKCBlbGVtLCBtZXRob2QsIHZhbCApIHtcclxuXHRcdFx0dmFyIHdpbiA9IGdldFdpbmRvdyggZWxlbSApO1xyXG5cclxuXHRcdFx0aWYgKCB2YWwgPT09IHVuZGVmaW5lZCApIHtcclxuXHRcdFx0XHRyZXR1cm4gd2luID8gd2luWyBwcm9wIF0gOiBlbGVtWyBtZXRob2QgXTtcclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0aWYgKCB3aW4gKSB7XHJcblx0XHRcdFx0d2luLnNjcm9sbFRvKFxyXG5cdFx0XHRcdFx0IXRvcCA/IHZhbCA6IHdpbi5wYWdlWE9mZnNldCxcclxuXHRcdFx0XHRcdHRvcCA/IHZhbCA6IHdpbi5wYWdlWU9mZnNldFxyXG5cdFx0XHRcdCk7XHJcblxyXG5cdFx0XHR9IGVsc2Uge1xyXG5cdFx0XHRcdGVsZW1bIG1ldGhvZCBdID0gdmFsO1xyXG5cdFx0XHR9XHJcblx0XHR9LCBtZXRob2QsIHZhbCwgYXJndW1lbnRzLmxlbmd0aCApO1xyXG5cdH07XHJcbn0gKTtcclxuXHJcbi8vIFN1cHBvcnQ6IFNhZmFyaTw3LTgrLCBDaHJvbWU8MzctNDQrXHJcbi8vIEFkZCB0aGUgdG9wL2xlZnQgY3NzSG9va3MgdXNpbmcgalF1ZXJ5LmZuLnBvc2l0aW9uXHJcbi8vIFdlYmtpdCBidWc6IGh0dHBzOi8vYnVncy53ZWJraXQub3JnL3Nob3dfYnVnLmNnaT9pZD0yOTA4NFxyXG4vLyBCbGluayBidWc6IGh0dHBzOi8vY29kZS5nb29nbGUuY29tL3AvY2hyb21pdW0vaXNzdWVzL2RldGFpbD9pZD0yMjkyODBcclxuLy8gZ2V0Q29tcHV0ZWRTdHlsZSByZXR1cm5zIHBlcmNlbnQgd2hlbiBzcGVjaWZpZWQgZm9yIHRvcC9sZWZ0L2JvdHRvbS9yaWdodDtcclxuLy8gcmF0aGVyIHRoYW4gbWFrZSB0aGUgY3NzIG1vZHVsZSBkZXBlbmQgb24gdGhlIG9mZnNldCBtb2R1bGUsIGp1c3QgY2hlY2sgZm9yIGl0IGhlcmVcclxualF1ZXJ5LmVhY2goIFsgXCJ0b3BcIiwgXCJsZWZ0XCIgXSwgZnVuY3Rpb24oIGksIHByb3AgKSB7XHJcblx0alF1ZXJ5LmNzc0hvb2tzWyBwcm9wIF0gPSBhZGRHZXRIb29rSWYoIHN1cHBvcnQucGl4ZWxQb3NpdGlvbixcclxuXHRcdGZ1bmN0aW9uKCBlbGVtLCBjb21wdXRlZCApIHtcclxuXHRcdFx0aWYgKCBjb21wdXRlZCApIHtcclxuXHRcdFx0XHRjb21wdXRlZCA9IGN1ckNTUyggZWxlbSwgcHJvcCApO1xyXG5cclxuXHRcdFx0XHQvLyBJZiBjdXJDU1MgcmV0dXJucyBwZXJjZW50YWdlLCBmYWxsYmFjayB0byBvZmZzZXRcclxuXHRcdFx0XHRyZXR1cm4gcm51bW5vbnB4LnRlc3QoIGNvbXB1dGVkICkgP1xyXG5cdFx0XHRcdFx0alF1ZXJ5KCBlbGVtICkucG9zaXRpb24oKVsgcHJvcCBdICsgXCJweFwiIDpcclxuXHRcdFx0XHRcdGNvbXB1dGVkO1xyXG5cdFx0XHR9XHJcblx0XHR9XHJcblx0KTtcclxufSApO1xyXG5cclxuXHJcbi8vIENyZWF0ZSBpbm5lckhlaWdodCwgaW5uZXJXaWR0aCwgaGVpZ2h0LCB3aWR0aCwgb3V0ZXJIZWlnaHQgYW5kIG91dGVyV2lkdGggbWV0aG9kc1xyXG5qUXVlcnkuZWFjaCggeyBIZWlnaHQ6IFwiaGVpZ2h0XCIsIFdpZHRoOiBcIndpZHRoXCIgfSwgZnVuY3Rpb24oIG5hbWUsIHR5cGUgKSB7XHJcblx0alF1ZXJ5LmVhY2goIHsgcGFkZGluZzogXCJpbm5lclwiICsgbmFtZSwgY29udGVudDogdHlwZSwgXCJcIjogXCJvdXRlclwiICsgbmFtZSB9LFxyXG5cdFx0ZnVuY3Rpb24oIGRlZmF1bHRFeHRyYSwgZnVuY05hbWUgKSB7XHJcblxyXG5cdFx0Ly8gTWFyZ2luIGlzIG9ubHkgZm9yIG91dGVySGVpZ2h0LCBvdXRlcldpZHRoXHJcblx0XHRqUXVlcnkuZm5bIGZ1bmNOYW1lIF0gPSBmdW5jdGlvbiggbWFyZ2luLCB2YWx1ZSApIHtcclxuXHRcdFx0dmFyIGNoYWluYWJsZSA9IGFyZ3VtZW50cy5sZW5ndGggJiYgKCBkZWZhdWx0RXh0cmEgfHwgdHlwZW9mIG1hcmdpbiAhPT0gXCJib29sZWFuXCIgKSxcclxuXHRcdFx0XHRleHRyYSA9IGRlZmF1bHRFeHRyYSB8fCAoIG1hcmdpbiA9PT0gdHJ1ZSB8fCB2YWx1ZSA9PT0gdHJ1ZSA/IFwibWFyZ2luXCIgOiBcImJvcmRlclwiICk7XHJcblxyXG5cdFx0XHRyZXR1cm4gYWNjZXNzKCB0aGlzLCBmdW5jdGlvbiggZWxlbSwgdHlwZSwgdmFsdWUgKSB7XHJcblx0XHRcdFx0dmFyIGRvYztcclxuXHJcblx0XHRcdFx0aWYgKCBqUXVlcnkuaXNXaW5kb3coIGVsZW0gKSApIHtcclxuXHJcblx0XHRcdFx0XHQvLyBBcyBvZiA1LzgvMjAxMiB0aGlzIHdpbGwgeWllbGQgaW5jb3JyZWN0IHJlc3VsdHMgZm9yIE1vYmlsZSBTYWZhcmksIGJ1dCB0aGVyZVxyXG5cdFx0XHRcdFx0Ly8gaXNuJ3QgYSB3aG9sZSBsb3Qgd2UgY2FuIGRvLiBTZWUgcHVsbCByZXF1ZXN0IGF0IHRoaXMgVVJMIGZvciBkaXNjdXNzaW9uOlxyXG5cdFx0XHRcdFx0Ly8gaHR0cHM6Ly9naXRodWIuY29tL2pxdWVyeS9qcXVlcnkvcHVsbC83NjRcclxuXHRcdFx0XHRcdHJldHVybiBlbGVtLmRvY3VtZW50LmRvY3VtZW50RWxlbWVudFsgXCJjbGllbnRcIiArIG5hbWUgXTtcclxuXHRcdFx0XHR9XHJcblxyXG5cdFx0XHRcdC8vIEdldCBkb2N1bWVudCB3aWR0aCBvciBoZWlnaHRcclxuXHRcdFx0XHRpZiAoIGVsZW0ubm9kZVR5cGUgPT09IDkgKSB7XHJcblx0XHRcdFx0XHRkb2MgPSBlbGVtLmRvY3VtZW50RWxlbWVudDtcclxuXHJcblx0XHRcdFx0XHQvLyBFaXRoZXIgc2Nyb2xsW1dpZHRoL0hlaWdodF0gb3Igb2Zmc2V0W1dpZHRoL0hlaWdodF0gb3IgY2xpZW50W1dpZHRoL0hlaWdodF0sXHJcblx0XHRcdFx0XHQvLyB3aGljaGV2ZXIgaXMgZ3JlYXRlc3RcclxuXHRcdFx0XHRcdHJldHVybiBNYXRoLm1heChcclxuXHRcdFx0XHRcdFx0ZWxlbS5ib2R5WyBcInNjcm9sbFwiICsgbmFtZSBdLCBkb2NbIFwic2Nyb2xsXCIgKyBuYW1lIF0sXHJcblx0XHRcdFx0XHRcdGVsZW0uYm9keVsgXCJvZmZzZXRcIiArIG5hbWUgXSwgZG9jWyBcIm9mZnNldFwiICsgbmFtZSBdLFxyXG5cdFx0XHRcdFx0XHRkb2NbIFwiY2xpZW50XCIgKyBuYW1lIF1cclxuXHRcdFx0XHRcdCk7XHJcblx0XHRcdFx0fVxyXG5cclxuXHRcdFx0XHRyZXR1cm4gdmFsdWUgPT09IHVuZGVmaW5lZCA/XHJcblxyXG5cdFx0XHRcdFx0Ly8gR2V0IHdpZHRoIG9yIGhlaWdodCBvbiB0aGUgZWxlbWVudCwgcmVxdWVzdGluZyBidXQgbm90IGZvcmNpbmcgcGFyc2VGbG9hdFxyXG5cdFx0XHRcdFx0alF1ZXJ5LmNzcyggZWxlbSwgdHlwZSwgZXh0cmEgKSA6XHJcblxyXG5cdFx0XHRcdFx0Ly8gU2V0IHdpZHRoIG9yIGhlaWdodCBvbiB0aGUgZWxlbWVudFxyXG5cdFx0XHRcdFx0alF1ZXJ5LnN0eWxlKCBlbGVtLCB0eXBlLCB2YWx1ZSwgZXh0cmEgKTtcclxuXHRcdFx0fSwgdHlwZSwgY2hhaW5hYmxlID8gbWFyZ2luIDogdW5kZWZpbmVkLCBjaGFpbmFibGUsIG51bGwgKTtcclxuXHRcdH07XHJcblx0fSApO1xyXG59ICk7XHJcblxyXG5cclxualF1ZXJ5LmZuLmV4dGVuZCgge1xyXG5cclxuXHRiaW5kOiBmdW5jdGlvbiggdHlwZXMsIGRhdGEsIGZuICkge1xyXG5cdFx0cmV0dXJuIHRoaXMub24oIHR5cGVzLCBudWxsLCBkYXRhLCBmbiApO1xyXG5cdH0sXHJcblx0dW5iaW5kOiBmdW5jdGlvbiggdHlwZXMsIGZuICkge1xyXG5cdFx0cmV0dXJuIHRoaXMub2ZmKCB0eXBlcywgbnVsbCwgZm4gKTtcclxuXHR9LFxyXG5cclxuXHRkZWxlZ2F0ZTogZnVuY3Rpb24oIHNlbGVjdG9yLCB0eXBlcywgZGF0YSwgZm4gKSB7XHJcblx0XHRyZXR1cm4gdGhpcy5vbiggdHlwZXMsIHNlbGVjdG9yLCBkYXRhLCBmbiApO1xyXG5cdH0sXHJcblx0dW5kZWxlZ2F0ZTogZnVuY3Rpb24oIHNlbGVjdG9yLCB0eXBlcywgZm4gKSB7XHJcblxyXG5cdFx0Ly8gKCBuYW1lc3BhY2UgKSBvciAoIHNlbGVjdG9yLCB0eXBlcyBbLCBmbl0gKVxyXG5cdFx0cmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPT09IDEgP1xyXG5cdFx0XHR0aGlzLm9mZiggc2VsZWN0b3IsIFwiKipcIiApIDpcclxuXHRcdFx0dGhpcy5vZmYoIHR5cGVzLCBzZWxlY3RvciB8fCBcIioqXCIsIGZuICk7XHJcblx0fSxcclxuXHRzaXplOiBmdW5jdGlvbigpIHtcclxuXHRcdHJldHVybiB0aGlzLmxlbmd0aDtcclxuXHR9XHJcbn0gKTtcclxuXHJcbmpRdWVyeS5mbi5hbmRTZWxmID0galF1ZXJ5LmZuLmFkZEJhY2s7XHJcblxyXG5cclxuXHJcblxyXG4vLyBSZWdpc3RlciBhcyBhIG5hbWVkIEFNRCBtb2R1bGUsIHNpbmNlIGpRdWVyeSBjYW4gYmUgY29uY2F0ZW5hdGVkIHdpdGggb3RoZXJcclxuLy8gZmlsZXMgdGhhdCBtYXkgdXNlIGRlZmluZSwgYnV0IG5vdCB2aWEgYSBwcm9wZXIgY29uY2F0ZW5hdGlvbiBzY3JpcHQgdGhhdFxyXG4vLyB1bmRlcnN0YW5kcyBhbm9ueW1vdXMgQU1EIG1vZHVsZXMuIEEgbmFtZWQgQU1EIGlzIHNhZmVzdCBhbmQgbW9zdCByb2J1c3RcclxuLy8gd2F5IHRvIHJlZ2lzdGVyLiBMb3dlcmNhc2UganF1ZXJ5IGlzIHVzZWQgYmVjYXVzZSBBTUQgbW9kdWxlIG5hbWVzIGFyZVxyXG4vLyBkZXJpdmVkIGZyb20gZmlsZSBuYW1lcywgYW5kIGpRdWVyeSBpcyBub3JtYWxseSBkZWxpdmVyZWQgaW4gYSBsb3dlcmNhc2VcclxuLy8gZmlsZSBuYW1lLiBEbyB0aGlzIGFmdGVyIGNyZWF0aW5nIHRoZSBnbG9iYWwgc28gdGhhdCBpZiBhbiBBTUQgbW9kdWxlIHdhbnRzXHJcbi8vIHRvIGNhbGwgbm9Db25mbGljdCB0byBoaWRlIHRoaXMgdmVyc2lvbiBvZiBqUXVlcnksIGl0IHdpbGwgd29yay5cclxuXHJcbi8vIE5vdGUgdGhhdCBmb3IgbWF4aW11bSBwb3J0YWJpbGl0eSwgbGlicmFyaWVzIHRoYXQgYXJlIG5vdCBqUXVlcnkgc2hvdWxkXHJcbi8vIGRlY2xhcmUgdGhlbXNlbHZlcyBhcyBhbm9ueW1vdXMgbW9kdWxlcywgYW5kIGF2b2lkIHNldHRpbmcgYSBnbG9iYWwgaWYgYW5cclxuLy8gQU1EIGxvYWRlciBpcyBwcmVzZW50LiBqUXVlcnkgaXMgYSBzcGVjaWFsIGNhc2UuIEZvciBtb3JlIGluZm9ybWF0aW9uLCBzZWVcclxuLy8gaHR0cHM6Ly9naXRodWIuY29tL2pyYnVya2UvcmVxdWlyZWpzL3dpa2kvVXBkYXRpbmctZXhpc3RpbmctbGlicmFyaWVzI3dpa2ktYW5vblxyXG5cclxuaWYgKCB0eXBlb2YgZGVmaW5lID09PSBcImZ1bmN0aW9uXCIgJiYgZGVmaW5lLmFtZCApIHtcclxuXHRkZWZpbmUoIFwianF1ZXJ5XCIsIFtdLCBmdW5jdGlvbigpIHtcclxuXHRcdHJldHVybiBqUXVlcnk7XHJcblx0fSApO1xyXG59XHJcblxyXG5cclxuXHJcbnZhclxyXG5cclxuXHQvLyBNYXAgb3ZlciBqUXVlcnkgaW4gY2FzZSBvZiBvdmVyd3JpdGVcclxuXHRfalF1ZXJ5ID0gd2luZG93LmpRdWVyeSxcclxuXHJcblx0Ly8gTWFwIG92ZXIgdGhlICQgaW4gY2FzZSBvZiBvdmVyd3JpdGVcclxuXHRfJCA9IHdpbmRvdy4kO1xyXG5cclxualF1ZXJ5Lm5vQ29uZmxpY3QgPSBmdW5jdGlvbiggZGVlcCApIHtcclxuXHRpZiAoIHdpbmRvdy4kID09PSBqUXVlcnkgKSB7XHJcblx0XHR3aW5kb3cuJCA9IF8kO1xyXG5cdH1cclxuXHJcblx0aWYgKCBkZWVwICYmIHdpbmRvdy5qUXVlcnkgPT09IGpRdWVyeSApIHtcclxuXHRcdHdpbmRvdy5qUXVlcnkgPSBfalF1ZXJ5O1xyXG5cdH1cclxuXHJcblx0cmV0dXJuIGpRdWVyeTtcclxufTtcclxuXHJcbi8vIEV4cG9zZSBqUXVlcnkgYW5kICQgaWRlbnRpZmllcnMsIGV2ZW4gaW4gQU1EXHJcbi8vICgjNzEwMiNjb21tZW50OjEwLCBodHRwczovL2dpdGh1Yi5jb20vanF1ZXJ5L2pxdWVyeS9wdWxsLzU1NylcclxuLy8gYW5kIENvbW1vbkpTIGZvciBicm93c2VyIGVtdWxhdG9ycyAoIzEzNTY2KVxyXG5pZiAoICFub0dsb2JhbCApIHtcclxuXHR3aW5kb3cualF1ZXJ5ID0gd2luZG93LiQgPSBqUXVlcnk7XHJcbn1cclxuXHJcbnJldHVybiBqUXVlcnk7XHJcbn0pKTtcclxuKGZ1bmN0aW9uIChmYWN0b3J5KSB7XHJcblxyXG4gICAgaWYgKCB0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQgKSB7XHJcblxyXG4gICAgICAgIC8vIEFNRC4gUmVnaXN0ZXIgYXMgYW4gYW5vbnltb3VzIG1vZHVsZS5cclxuICAgICAgICBkZWZpbmUoW10sIGZhY3RvcnkpO1xyXG5cclxuICAgIH0gZWxzZSBpZiAoIHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0JyApIHtcclxuXHJcbiAgICAgICAgLy8gTm9kZS9Db21tb25KU1xyXG4gICAgICAgIG1vZHVsZS5leHBvcnRzID0gZmFjdG9yeSgpO1xyXG5cclxuICAgIH0gZWxzZSB7XHJcblxyXG4gICAgICAgIC8vIEJyb3dzZXIgZ2xvYmFsc1xyXG4gICAgICAgIHdpbmRvdy53TnVtYiA9IGZhY3RvcnkoKTtcclxuICAgIH1cclxuXHJcbn0oZnVuY3Rpb24oKXtcclxuXHJcblx0J3VzZSBzdHJpY3QnO1xyXG5cclxudmFyIEZvcm1hdE9wdGlvbnMgPSBbXHJcblx0J2RlY2ltYWxzJyxcclxuXHQndGhvdXNhbmQnLFxyXG5cdCdtYXJrJyxcclxuXHQncHJlZml4JyxcclxuXHQnc3VmZml4JyxcclxuXHQnZW5jb2RlcicsXHJcblx0J2RlY29kZXInLFxyXG5cdCduZWdhdGl2ZUJlZm9yZScsXHJcblx0J25lZ2F0aXZlJyxcclxuXHQnZWRpdCcsXHJcblx0J3VuZG8nXHJcbl07XHJcblxyXG4vLyBHZW5lcmFsXHJcblxyXG5cdC8vIFJldmVyc2UgYSBzdHJpbmdcclxuXHRmdW5jdGlvbiBzdHJSZXZlcnNlICggYSApIHtcclxuXHRcdHJldHVybiBhLnNwbGl0KCcnKS5yZXZlcnNlKCkuam9pbignJyk7XHJcblx0fVxyXG5cclxuXHQvLyBDaGVjayBpZiBhIHN0cmluZyBzdGFydHMgd2l0aCBhIHNwZWNpZmllZCBwcmVmaXguXHJcblx0ZnVuY3Rpb24gc3RyU3RhcnRzV2l0aCAoIGlucHV0LCBtYXRjaCApIHtcclxuXHRcdHJldHVybiBpbnB1dC5zdWJzdHJpbmcoMCwgbWF0Y2gubGVuZ3RoKSA9PT0gbWF0Y2g7XHJcblx0fVxyXG5cclxuXHQvLyBDaGVjayBpcyBhIHN0cmluZyBlbmRzIGluIGEgc3BlY2lmaWVkIHN1ZmZpeC5cclxuXHRmdW5jdGlvbiBzdHJFbmRzV2l0aCAoIGlucHV0LCBtYXRjaCApIHtcclxuXHRcdHJldHVybiBpbnB1dC5zbGljZSgtMSAqIG1hdGNoLmxlbmd0aCkgPT09IG1hdGNoO1xyXG5cdH1cclxuXHJcblx0Ly8gVGhyb3cgYW4gZXJyb3IgaWYgZm9ybWF0dGluZyBvcHRpb25zIGFyZSBpbmNvbXBhdGlibGUuXHJcblx0ZnVuY3Rpb24gdGhyb3dFcXVhbEVycm9yKCBGLCBhLCBiICkge1xyXG5cdFx0aWYgKCAoRlthXSB8fCBGW2JdKSAmJiAoRlthXSA9PT0gRltiXSkgKSB7XHJcblx0XHRcdHRocm93IG5ldyBFcnJvcihhKTtcclxuXHRcdH1cclxuXHR9XHJcblxyXG5cdC8vIENoZWNrIGlmIGEgbnVtYmVyIGlzIGZpbml0ZSBhbmQgbm90IE5hTlxyXG5cdGZ1bmN0aW9uIGlzVmFsaWROdW1iZXIgKCBpbnB1dCApIHtcclxuXHRcdHJldHVybiB0eXBlb2YgaW5wdXQgPT09ICdudW1iZXInICYmIGlzRmluaXRlKCBpbnB1dCApO1xyXG5cdH1cclxuXHJcblx0Ly8gUHJvdmlkZSByb3VuZGluZy1hY2N1cmF0ZSB0b0ZpeGVkIG1ldGhvZC5cclxuXHQvLyBCb3Jyb3dlZDogaHR0cDovL3N0YWNrb3ZlcmZsb3cuY29tL2EvMjEzMjMzMzAvNzc1MjY1XHJcblx0ZnVuY3Rpb24gdG9GaXhlZCAoIHZhbHVlLCBleHAgKSB7XHJcblx0XHR2YWx1ZSA9IHZhbHVlLnRvU3RyaW5nKCkuc3BsaXQoJ2UnKTtcclxuXHRcdHZhbHVlID0gTWF0aC5yb3VuZCgrKHZhbHVlWzBdICsgJ2UnICsgKHZhbHVlWzFdID8gKCt2YWx1ZVsxXSArIGV4cCkgOiBleHApKSk7XHJcblx0XHR2YWx1ZSA9IHZhbHVlLnRvU3RyaW5nKCkuc3BsaXQoJ2UnKTtcclxuXHRcdHJldHVybiAoKyh2YWx1ZVswXSArICdlJyArICh2YWx1ZVsxXSA/ICgrdmFsdWVbMV0gLSBleHApIDogLWV4cCkpKS50b0ZpeGVkKGV4cCk7XHJcblx0fVxyXG5cclxuXHJcbi8vIEZvcm1hdHRpbmdcclxuXHJcblx0Ly8gQWNjZXB0IGEgbnVtYmVyIGFzIGlucHV0LCBvdXRwdXQgZm9ybWF0dGVkIHN0cmluZy5cclxuXHRmdW5jdGlvbiBmb3JtYXRUbyAoIGRlY2ltYWxzLCB0aG91c2FuZCwgbWFyaywgcHJlZml4LCBzdWZmaXgsIGVuY29kZXIsIGRlY29kZXIsIG5lZ2F0aXZlQmVmb3JlLCBuZWdhdGl2ZSwgZWRpdCwgdW5kbywgaW5wdXQgKSB7XHJcblxyXG5cdFx0dmFyIG9yaWdpbmFsSW5wdXQgPSBpbnB1dCwgaW5wdXRJc05lZ2F0aXZlLCBpbnB1dFBpZWNlcywgaW5wdXRCYXNlLCBpbnB1dERlY2ltYWxzID0gJycsIG91dHB1dCA9ICcnO1xyXG5cclxuXHRcdC8vIEFwcGx5IHVzZXIgZW5jb2RlciB0byB0aGUgaW5wdXQuXHJcblx0XHQvLyBFeHBlY3RlZCBvdXRjb21lOiBudW1iZXIuXHJcblx0XHRpZiAoIGVuY29kZXIgKSB7XHJcblx0XHRcdGlucHV0ID0gZW5jb2RlcihpbnB1dCk7XHJcblx0XHR9XHJcblxyXG5cdFx0Ly8gU3RvcCBpZiBubyB2YWxpZCBudW1iZXIgd2FzIHByb3ZpZGVkLCB0aGUgbnVtYmVyIGlzIGluZmluaXRlIG9yIE5hTi5cclxuXHRcdGlmICggIWlzVmFsaWROdW1iZXIoaW5wdXQpICkge1xyXG5cdFx0XHRyZXR1cm4gZmFsc2U7XHJcblx0XHR9XHJcblxyXG5cdFx0Ly8gUm91bmRpbmcgYXdheSBkZWNpbWFscyBtaWdodCBjYXVzZSBhIHZhbHVlIG9mIC0wXHJcblx0XHQvLyB3aGVuIHVzaW5nIHZlcnkgc21hbGwgcmFuZ2VzLiBSZW1vdmUgdGhvc2UgY2FzZXMuXHJcblx0XHRpZiAoIGRlY2ltYWxzICE9PSBmYWxzZSAmJiBwYXJzZUZsb2F0KGlucHV0LnRvRml4ZWQoZGVjaW1hbHMpKSA9PT0gMCApIHtcclxuXHRcdFx0aW5wdXQgPSAwO1xyXG5cdFx0fVxyXG5cclxuXHRcdC8vIEZvcm1hdHRpbmcgaXMgZG9uZSBvbiBhYnNvbHV0ZSBudW1iZXJzLFxyXG5cdFx0Ly8gZGVjb3JhdGVkIGJ5IGFuIG9wdGlvbmFsIG5lZ2F0aXZlIHN5bWJvbC5cclxuXHRcdGlmICggaW5wdXQgPCAwICkge1xyXG5cdFx0XHRpbnB1dElzTmVnYXRpdmUgPSB0cnVlO1xyXG5cdFx0XHRpbnB1dCA9IE1hdGguYWJzKGlucHV0KTtcclxuXHRcdH1cclxuXHJcblx0XHQvLyBSZWR1Y2UgdGhlIG51bWJlciBvZiBkZWNpbWFscyB0byB0aGUgc3BlY2lmaWVkIG9wdGlvbi5cclxuXHRcdGlmICggZGVjaW1hbHMgIT09IGZhbHNlICkge1xyXG5cdFx0XHRpbnB1dCA9IHRvRml4ZWQoIGlucHV0LCBkZWNpbWFscyApO1xyXG5cdFx0fVxyXG5cclxuXHRcdC8vIFRyYW5zZm9ybSB0aGUgbnVtYmVyIGludG8gYSBzdHJpbmcsIHNvIGl0IGNhbiBiZSBzcGxpdC5cclxuXHRcdGlucHV0ID0gaW5wdXQudG9TdHJpbmcoKTtcclxuXHJcblx0XHQvLyBCcmVhayB0aGUgbnVtYmVyIG9uIHRoZSBkZWNpbWFsIHNlcGFyYXRvci5cclxuXHRcdGlmICggaW5wdXQuaW5kZXhPZignLicpICE9PSAtMSApIHtcclxuXHRcdFx0aW5wdXRQaWVjZXMgPSBpbnB1dC5zcGxpdCgnLicpO1xyXG5cclxuXHRcdFx0aW5wdXRCYXNlID0gaW5wdXRQaWVjZXNbMF07XHJcblxyXG5cdFx0XHRpZiAoIG1hcmsgKSB7XHJcblx0XHRcdFx0aW5wdXREZWNpbWFscyA9IG1hcmsgKyBpbnB1dFBpZWNlc1sxXTtcclxuXHRcdFx0fVxyXG5cclxuXHRcdH0gZWxzZSB7XHJcblxyXG5cdFx0Ly8gSWYgaXQgaXNuJ3Qgc3BsaXQsIHRoZSBlbnRpcmUgbnVtYmVyIHdpbGwgZG8uXHJcblx0XHRcdGlucHV0QmFzZSA9IGlucHV0O1xyXG5cdFx0fVxyXG5cclxuXHRcdC8vIEdyb3VwIG51bWJlcnMgaW4gc2V0cyBvZiB0aHJlZS5cclxuXHRcdGlmICggdGhvdXNhbmQgKSB7XHJcblx0XHRcdGlucHV0QmFzZSA9IHN0clJldmVyc2UoaW5wdXRCYXNlKS5tYXRjaCgvLnsxLDN9L2cpO1xyXG5cdFx0XHRpbnB1dEJhc2UgPSBzdHJSZXZlcnNlKGlucHV0QmFzZS5qb2luKCBzdHJSZXZlcnNlKCB0aG91c2FuZCApICkpO1xyXG5cdFx0fVxyXG5cclxuXHRcdC8vIElmIHRoZSBudW1iZXIgaXMgbmVnYXRpdmUsIHByZWZpeCB3aXRoIG5lZ2F0aW9uIHN5bWJvbC5cclxuXHRcdGlmICggaW5wdXRJc05lZ2F0aXZlICYmIG5lZ2F0aXZlQmVmb3JlICkge1xyXG5cdFx0XHRvdXRwdXQgKz0gbmVnYXRpdmVCZWZvcmU7XHJcblx0XHR9XHJcblxyXG5cdFx0Ly8gUHJlZml4IHRoZSBudW1iZXJcclxuXHRcdGlmICggcHJlZml4ICkge1xyXG5cdFx0XHRvdXRwdXQgKz0gcHJlZml4O1xyXG5cdFx0fVxyXG5cclxuXHRcdC8vIE5vcm1hbCBuZWdhdGl2ZSBvcHRpb24gY29tZXMgYWZ0ZXIgdGhlIHByZWZpeC4gRGVmYXVsdHMgdG8gJy0nLlxyXG5cdFx0aWYgKCBpbnB1dElzTmVnYXRpdmUgJiYgbmVnYXRpdmUgKSB7XHJcblx0XHRcdG91dHB1dCArPSBuZWdhdGl2ZTtcclxuXHRcdH1cclxuXHJcblx0XHQvLyBBcHBlbmQgdGhlIGFjdHVhbCBudW1iZXIuXHJcblx0XHRvdXRwdXQgKz0gaW5wdXRCYXNlO1xyXG5cdFx0b3V0cHV0ICs9IGlucHV0RGVjaW1hbHM7XHJcblxyXG5cdFx0Ly8gQXBwbHkgdGhlIHN1ZmZpeC5cclxuXHRcdGlmICggc3VmZml4ICkge1xyXG5cdFx0XHRvdXRwdXQgKz0gc3VmZml4O1xyXG5cdFx0fVxyXG5cclxuXHRcdC8vIFJ1biB0aGUgb3V0cHV0IHRocm91Z2ggYSB1c2VyLXNwZWNpZmllZCBwb3N0LWZvcm1hdHRlci5cclxuXHRcdGlmICggZWRpdCApIHtcclxuXHRcdFx0b3V0cHV0ID0gZWRpdCAoIG91dHB1dCwgb3JpZ2luYWxJbnB1dCApO1xyXG5cdFx0fVxyXG5cclxuXHRcdC8vIEFsbCBkb25lLlxyXG5cdFx0cmV0dXJuIG91dHB1dDtcclxuXHR9XHJcblxyXG5cdC8vIEFjY2VwdCBhIHN0aW5nIGFzIGlucHV0LCBvdXRwdXQgZGVjb2RlZCBudW1iZXIuXHJcblx0ZnVuY3Rpb24gZm9ybWF0RnJvbSAoIGRlY2ltYWxzLCB0aG91c2FuZCwgbWFyaywgcHJlZml4LCBzdWZmaXgsIGVuY29kZXIsIGRlY29kZXIsIG5lZ2F0aXZlQmVmb3JlLCBuZWdhdGl2ZSwgZWRpdCwgdW5kbywgaW5wdXQgKSB7XHJcblxyXG5cdFx0dmFyIG9yaWdpbmFsSW5wdXQgPSBpbnB1dCwgaW5wdXRJc05lZ2F0aXZlLCBvdXRwdXQgPSAnJztcclxuXHJcblx0XHQvLyBVc2VyIGRlZmluZWQgcHJlLWRlY29kZXIuIFJlc3VsdCBtdXN0IGJlIGEgbm9uIGVtcHR5IHN0cmluZy5cclxuXHRcdGlmICggdW5kbyApIHtcclxuXHRcdFx0aW5wdXQgPSB1bmRvKGlucHV0KTtcclxuXHRcdH1cclxuXHJcblx0XHQvLyBUZXN0IHRoZSBpbnB1dC4gQ2FuJ3QgYmUgZW1wdHkuXHJcblx0XHRpZiAoICFpbnB1dCB8fCB0eXBlb2YgaW5wdXQgIT09ICdzdHJpbmcnICkge1xyXG5cdFx0XHRyZXR1cm4gZmFsc2U7XHJcblx0XHR9XHJcblxyXG5cdFx0Ly8gSWYgdGhlIHN0cmluZyBzdGFydHMgd2l0aCB0aGUgbmVnYXRpdmVCZWZvcmUgdmFsdWU6IHJlbW92ZSBpdC5cclxuXHRcdC8vIFJlbWVtYmVyIGlzIHdhcyB0aGVyZSwgdGhlIG51bWJlciBpcyBuZWdhdGl2ZS5cclxuXHRcdGlmICggbmVnYXRpdmVCZWZvcmUgJiYgc3RyU3RhcnRzV2l0aChpbnB1dCwgbmVnYXRpdmVCZWZvcmUpICkge1xyXG5cdFx0XHRpbnB1dCA9IGlucHV0LnJlcGxhY2UobmVnYXRpdmVCZWZvcmUsICcnKTtcclxuXHRcdFx0aW5wdXRJc05lZ2F0aXZlID0gdHJ1ZTtcclxuXHRcdH1cclxuXHJcblx0XHQvLyBSZXBlYXQgdGhlIHNhbWUgcHJvY2VkdXJlIGZvciB0aGUgcHJlZml4LlxyXG5cdFx0aWYgKCBwcmVmaXggJiYgc3RyU3RhcnRzV2l0aChpbnB1dCwgcHJlZml4KSApIHtcclxuXHRcdFx0aW5wdXQgPSBpbnB1dC5yZXBsYWNlKHByZWZpeCwgJycpO1xyXG5cdFx0fVxyXG5cclxuXHRcdC8vIEFuZCBhZ2FpbiBmb3IgbmVnYXRpdmUuXHJcblx0XHRpZiAoIG5lZ2F0aXZlICYmIHN0clN0YXJ0c1dpdGgoaW5wdXQsIG5lZ2F0aXZlKSApIHtcclxuXHRcdFx0aW5wdXQgPSBpbnB1dC5yZXBsYWNlKG5lZ2F0aXZlLCAnJyk7XHJcblx0XHRcdGlucHV0SXNOZWdhdGl2ZSA9IHRydWU7XHJcblx0XHR9XHJcblxyXG5cdFx0Ly8gUmVtb3ZlIHRoZSBzdWZmaXguXHJcblx0XHQvLyBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9KYXZhU2NyaXB0L1JlZmVyZW5jZS9HbG9iYWxfT2JqZWN0cy9TdHJpbmcvc2xpY2VcclxuXHRcdGlmICggc3VmZml4ICYmIHN0ckVuZHNXaXRoKGlucHV0LCBzdWZmaXgpICkge1xyXG5cdFx0XHRpbnB1dCA9IGlucHV0LnNsaWNlKDAsIC0xICogc3VmZml4Lmxlbmd0aCk7XHJcblx0XHR9XHJcblxyXG5cdFx0Ly8gUmVtb3ZlIHRoZSB0aG91c2FuZCBncm91cGluZy5cclxuXHRcdGlmICggdGhvdXNhbmQgKSB7XHJcblx0XHRcdGlucHV0ID0gaW5wdXQuc3BsaXQodGhvdXNhbmQpLmpvaW4oJycpO1xyXG5cdFx0fVxyXG5cclxuXHRcdC8vIFNldCB0aGUgZGVjaW1hbCBzZXBhcmF0b3IgYmFjayB0byBwZXJpb2QuXHJcblx0XHRpZiAoIG1hcmsgKSB7XHJcblx0XHRcdGlucHV0ID0gaW5wdXQucmVwbGFjZShtYXJrLCAnLicpO1xyXG5cdFx0fVxyXG5cclxuXHRcdC8vIFByZXBlbmQgdGhlIG5lZ2F0aXZlIHN5bWJvbC5cclxuXHRcdGlmICggaW5wdXRJc05lZ2F0aXZlICkge1xyXG5cdFx0XHRvdXRwdXQgKz0gJy0nO1xyXG5cdFx0fVxyXG5cclxuXHRcdC8vIEFkZCB0aGUgbnVtYmVyXHJcblx0XHRvdXRwdXQgKz0gaW5wdXQ7XHJcblxyXG5cdFx0Ly8gVHJpbSBhbGwgbm9uLW51bWVyaWMgY2hhcmFjdGVycyAoYWxsb3cgJy4nIGFuZCAnLScpO1xyXG5cdFx0b3V0cHV0ID0gb3V0cHV0LnJlcGxhY2UoL1teMC05XFwuXFwtLl0vZywgJycpO1xyXG5cclxuXHRcdC8vIFRoZSB2YWx1ZSBjb250YWlucyBubyBwYXJzZS1hYmxlIG51bWJlci5cclxuXHRcdGlmICggb3V0cHV0ID09PSAnJyApIHtcclxuXHRcdFx0cmV0dXJuIGZhbHNlO1xyXG5cdFx0fVxyXG5cclxuXHRcdC8vIENvdmVydCB0byBudW1iZXIuXHJcblx0XHRvdXRwdXQgPSBOdW1iZXIob3V0cHV0KTtcclxuXHJcblx0XHQvLyBSdW4gdGhlIHVzZXItc3BlY2lmaWVkIHBvc3QtZGVjb2Rlci5cclxuXHRcdGlmICggZGVjb2RlciApIHtcclxuXHRcdFx0b3V0cHV0ID0gZGVjb2RlcihvdXRwdXQpO1xyXG5cdFx0fVxyXG5cclxuXHRcdC8vIENoZWNrIGlzIHRoZSBvdXRwdXQgaXMgdmFsaWQsIG90aGVyd2lzZTogcmV0dXJuIGZhbHNlLlxyXG5cdFx0aWYgKCAhaXNWYWxpZE51bWJlcihvdXRwdXQpICkge1xyXG5cdFx0XHRyZXR1cm4gZmFsc2U7XHJcblx0XHR9XHJcblxyXG5cdFx0cmV0dXJuIG91dHB1dDtcclxuXHR9XHJcblxyXG5cclxuLy8gRnJhbWV3b3JrXHJcblxyXG5cdC8vIFZhbGlkYXRlIGZvcm1hdHRpbmcgb3B0aW9uc1xyXG5cdGZ1bmN0aW9uIHZhbGlkYXRlICggaW5wdXRPcHRpb25zICkge1xyXG5cclxuXHRcdHZhciBpLCBvcHRpb25OYW1lLCBvcHRpb25WYWx1ZSxcclxuXHRcdFx0ZmlsdGVyZWRPcHRpb25zID0ge307XHJcblxyXG5cdFx0aWYgKCBpbnB1dE9wdGlvbnNbJ3N1ZmZpeCddID09PSB1bmRlZmluZWQgKSB7XHJcblx0XHRcdGlucHV0T3B0aW9uc1snc3VmZml4J10gPSBpbnB1dE9wdGlvbnNbJ3Bvc3RmaXgnXTtcclxuXHRcdH1cclxuXHJcblx0XHRmb3IgKCBpID0gMDsgaSA8IEZvcm1hdE9wdGlvbnMubGVuZ3RoOyBpKz0xICkge1xyXG5cclxuXHRcdFx0b3B0aW9uTmFtZSA9IEZvcm1hdE9wdGlvbnNbaV07XHJcblx0XHRcdG9wdGlvblZhbHVlID0gaW5wdXRPcHRpb25zW29wdGlvbk5hbWVdO1xyXG5cclxuXHRcdFx0aWYgKCBvcHRpb25WYWx1ZSA9PT0gdW5kZWZpbmVkICkge1xyXG5cclxuXHRcdFx0XHQvLyBPbmx5IGRlZmF1bHQgaWYgbmVnYXRpdmVCZWZvcmUgaXNuJ3Qgc2V0LlxyXG5cdFx0XHRcdGlmICggb3B0aW9uTmFtZSA9PT0gJ25lZ2F0aXZlJyAmJiAhZmlsdGVyZWRPcHRpb25zLm5lZ2F0aXZlQmVmb3JlICkge1xyXG5cdFx0XHRcdFx0ZmlsdGVyZWRPcHRpb25zW29wdGlvbk5hbWVdID0gJy0nO1xyXG5cdFx0XHRcdC8vIERvbid0IHNldCBhIGRlZmF1bHQgZm9yIG1hcmsgd2hlbiAndGhvdXNhbmQnIGlzIHNldC5cclxuXHRcdFx0XHR9IGVsc2UgaWYgKCBvcHRpb25OYW1lID09PSAnbWFyaycgJiYgZmlsdGVyZWRPcHRpb25zLnRob3VzYW5kICE9PSAnLicgKSB7XHJcblx0XHRcdFx0XHRmaWx0ZXJlZE9wdGlvbnNbb3B0aW9uTmFtZV0gPSAnLic7XHJcblx0XHRcdFx0fSBlbHNlIHtcclxuXHRcdFx0XHRcdGZpbHRlcmVkT3B0aW9uc1tvcHRpb25OYW1lXSA9IGZhbHNlO1xyXG5cdFx0XHRcdH1cclxuXHJcblx0XHRcdC8vIEZsb2F0aW5nIHBvaW50cyBpbiBKUyBhcmUgc3RhYmxlIHVwIHRvIDcgZGVjaW1hbHMuXHJcblx0XHRcdH0gZWxzZSBpZiAoIG9wdGlvbk5hbWUgPT09ICdkZWNpbWFscycgKSB7XHJcblx0XHRcdFx0aWYgKCBvcHRpb25WYWx1ZSA+PSAwICYmIG9wdGlvblZhbHVlIDwgOCApIHtcclxuXHRcdFx0XHRcdGZpbHRlcmVkT3B0aW9uc1tvcHRpb25OYW1lXSA9IG9wdGlvblZhbHVlO1xyXG5cdFx0XHRcdH0gZWxzZSB7XHJcblx0XHRcdFx0XHR0aHJvdyBuZXcgRXJyb3Iob3B0aW9uTmFtZSk7XHJcblx0XHRcdFx0fVxyXG5cclxuXHRcdFx0Ly8gVGhlc2Ugb3B0aW9ucywgd2hlbiBwcm92aWRlZCwgbXVzdCBiZSBmdW5jdGlvbnMuXHJcblx0XHRcdH0gZWxzZSBpZiAoIG9wdGlvbk5hbWUgPT09ICdlbmNvZGVyJyB8fCBvcHRpb25OYW1lID09PSAnZGVjb2RlcicgfHwgb3B0aW9uTmFtZSA9PT0gJ2VkaXQnIHx8IG9wdGlvbk5hbWUgPT09ICd1bmRvJyApIHtcclxuXHRcdFx0XHRpZiAoIHR5cGVvZiBvcHRpb25WYWx1ZSA9PT0gJ2Z1bmN0aW9uJyApIHtcclxuXHRcdFx0XHRcdGZpbHRlcmVkT3B0aW9uc1tvcHRpb25OYW1lXSA9IG9wdGlvblZhbHVlO1xyXG5cdFx0XHRcdH0gZWxzZSB7XHJcblx0XHRcdFx0XHR0aHJvdyBuZXcgRXJyb3Iob3B0aW9uTmFtZSk7XHJcblx0XHRcdFx0fVxyXG5cclxuXHRcdFx0Ly8gT3RoZXIgb3B0aW9ucyBhcmUgc3RyaW5ncy5cclxuXHRcdFx0fSBlbHNlIHtcclxuXHJcblx0XHRcdFx0aWYgKCB0eXBlb2Ygb3B0aW9uVmFsdWUgPT09ICdzdHJpbmcnICkge1xyXG5cdFx0XHRcdFx0ZmlsdGVyZWRPcHRpb25zW29wdGlvbk5hbWVdID0gb3B0aW9uVmFsdWU7XHJcblx0XHRcdFx0fSBlbHNlIHtcclxuXHRcdFx0XHRcdHRocm93IG5ldyBFcnJvcihvcHRpb25OYW1lKTtcclxuXHRcdFx0XHR9XHJcblx0XHRcdH1cclxuXHRcdH1cclxuXHJcblx0XHQvLyBTb21lIHZhbHVlcyBjYW4ndCBiZSBleHRyYWN0ZWQgZnJvbSBhXHJcblx0XHQvLyBzdHJpbmcgaWYgY2VydGFpbiBjb21iaW5hdGlvbnMgYXJlIHByZXNlbnQuXHJcblx0XHR0aHJvd0VxdWFsRXJyb3IoZmlsdGVyZWRPcHRpb25zLCAnbWFyaycsICd0aG91c2FuZCcpO1xyXG5cdFx0dGhyb3dFcXVhbEVycm9yKGZpbHRlcmVkT3B0aW9ucywgJ3ByZWZpeCcsICduZWdhdGl2ZScpO1xyXG5cdFx0dGhyb3dFcXVhbEVycm9yKGZpbHRlcmVkT3B0aW9ucywgJ3ByZWZpeCcsICduZWdhdGl2ZUJlZm9yZScpO1xyXG5cclxuXHRcdHJldHVybiBmaWx0ZXJlZE9wdGlvbnM7XHJcblx0fVxyXG5cclxuXHQvLyBQYXNzIGFsbCBvcHRpb25zIGFzIGZ1bmN0aW9uIGFyZ3VtZW50c1xyXG5cdGZ1bmN0aW9uIHBhc3NBbGwgKCBvcHRpb25zLCBtZXRob2QsIGlucHV0ICkge1xyXG5cdFx0dmFyIGksIGFyZ3MgPSBbXTtcclxuXHJcblx0XHQvLyBBZGQgYWxsIG9wdGlvbnMgaW4gb3JkZXIgb2YgRm9ybWF0T3B0aW9uc1xyXG5cdFx0Zm9yICggaSA9IDA7IGkgPCBGb3JtYXRPcHRpb25zLmxlbmd0aDsgaSs9MSApIHtcclxuXHRcdFx0YXJncy5wdXNoKG9wdGlvbnNbRm9ybWF0T3B0aW9uc1tpXV0pO1xyXG5cdFx0fVxyXG5cclxuXHRcdC8vIEFwcGVuZCB0aGUgaW5wdXQsIHRoZW4gY2FsbCB0aGUgbWV0aG9kLCBwcmVzZW50aW5nIGFsbFxyXG5cdFx0Ly8gb3B0aW9ucyBhcyBhcmd1bWVudHMuXHJcblx0XHRhcmdzLnB1c2goaW5wdXQpO1xyXG5cdFx0cmV0dXJuIG1ldGhvZC5hcHBseSgnJywgYXJncyk7XHJcblx0fVxyXG5cclxuXHRmdW5jdGlvbiB3TnVtYiAoIG9wdGlvbnMgKSB7XHJcblxyXG5cdFx0aWYgKCAhKHRoaXMgaW5zdGFuY2VvZiB3TnVtYikgKSB7XHJcblx0XHRcdHJldHVybiBuZXcgd051bWIgKCBvcHRpb25zICk7XHJcblx0XHR9XHJcblxyXG5cdFx0aWYgKCB0eXBlb2Ygb3B0aW9ucyAhPT0gXCJvYmplY3RcIiApIHtcclxuXHRcdFx0cmV0dXJuO1xyXG5cdFx0fVxyXG5cclxuXHRcdG9wdGlvbnMgPSB2YWxpZGF0ZShvcHRpb25zKTtcclxuXHJcblx0XHQvLyBDYWxsICdmb3JtYXRUbycgd2l0aCBwcm9wZXIgYXJndW1lbnRzLlxyXG5cdFx0dGhpcy50byA9IGZ1bmN0aW9uICggaW5wdXQgKSB7XHJcblx0XHRcdHJldHVybiBwYXNzQWxsKG9wdGlvbnMsIGZvcm1hdFRvLCBpbnB1dCk7XHJcblx0XHR9O1xyXG5cclxuXHRcdC8vIENhbGwgJ2Zvcm1hdEZyb20nIHdpdGggcHJvcGVyIGFyZ3VtZW50cy5cclxuXHRcdHRoaXMuZnJvbSA9IGZ1bmN0aW9uICggaW5wdXQgKSB7XHJcblx0XHRcdHJldHVybiBwYXNzQWxsKG9wdGlvbnMsIGZvcm1hdEZyb20sIGlucHV0KTtcclxuXHRcdH07XHJcblx0fVxyXG5cclxuXHRyZXR1cm4gd051bWI7XHJcblxyXG59KSk7XHJcbi8qISBub3Vpc2xpZGVyIC0gMTIuMS4wIC0gMTAvMjUvMjAxOCAqL1xyXG4hZnVuY3Rpb24odCl7XCJmdW5jdGlvblwiPT10eXBlb2YgZGVmaW5lJiZkZWZpbmUuYW1kP2RlZmluZShbXSx0KTpcIm9iamVjdFwiPT10eXBlb2YgZXhwb3J0cz9tb2R1bGUuZXhwb3J0cz10KCk6d2luZG93Lm5vVWlTbGlkZXI9dCgpfShmdW5jdGlvbigpe1widXNlIHN0cmljdFwiO3ZhciBldD1cIjEyLjEuMFwiO2Z1bmN0aW9uIHModCl7cmV0dXJuIG51bGwhPXR9ZnVuY3Rpb24gcnQodCl7dC5wcmV2ZW50RGVmYXVsdCgpfWZ1bmN0aW9uIGkodCl7cmV0dXJuXCJudW1iZXJcIj09dHlwZW9mIHQmJiFpc05hTih0KSYmaXNGaW5pdGUodCl9ZnVuY3Rpb24gbnQodCxlLHIpezA8ciYmKGF0KHQsZSksc2V0VGltZW91dChmdW5jdGlvbigpe3N0KHQsZSl9LHIpKX1mdW5jdGlvbiBpdCh0KXtyZXR1cm4gTWF0aC5tYXgoTWF0aC5taW4odCwxMDApLDApfWZ1bmN0aW9uIG90KHQpe3JldHVybiBBcnJheS5pc0FycmF5KHQpP3Q6W3RdfWZ1bmN0aW9uIGUodCl7dmFyIGU9KHQ9U3RyaW5nKHQpKS5zcGxpdChcIi5cIik7cmV0dXJuIDE8ZS5sZW5ndGg/ZVsxXS5sZW5ndGg6MH1mdW5jdGlvbiBhdCh0LGUpe3QuY2xhc3NMaXN0P3QuY2xhc3NMaXN0LmFkZChlKTp0LmNsYXNzTmFtZSs9XCIgXCIrZX1mdW5jdGlvbiBzdCh0LGUpe3QuY2xhc3NMaXN0P3QuY2xhc3NMaXN0LnJlbW92ZShlKTp0LmNsYXNzTmFtZT10LmNsYXNzTmFtZS5yZXBsYWNlKG5ldyBSZWdFeHAoXCIoXnxcXFxcYilcIitlLnNwbGl0KFwiIFwiKS5qb2luKFwifFwiKStcIihcXFxcYnwkKVwiLFwiZ2lcIiksXCIgXCIpfWZ1bmN0aW9uIGx0KHQpe3ZhciBlPXZvaWQgMCE9PXdpbmRvdy5wYWdlWE9mZnNldCxyPVwiQ1NTMUNvbXBhdFwiPT09KHQuY29tcGF0TW9kZXx8XCJcIik7cmV0dXJue3g6ZT93aW5kb3cucGFnZVhPZmZzZXQ6cj90LmRvY3VtZW50RWxlbWVudC5zY3JvbGxMZWZ0OnQuYm9keS5zY3JvbGxMZWZ0LHk6ZT93aW5kb3cucGFnZVlPZmZzZXQ6cj90LmRvY3VtZW50RWxlbWVudC5zY3JvbGxUb3A6dC5ib2R5LnNjcm9sbFRvcH19ZnVuY3Rpb24gYyh0LGUpe3JldHVybiAxMDAvKGUtdCl9ZnVuY3Rpb24gcCh0LGUpe3JldHVybiAxMDAqZS8odFsxXS10WzBdKX1mdW5jdGlvbiBmKHQsZSl7Zm9yKHZhciByPTE7dD49ZVtyXTspcis9MTtyZXR1cm4gcn1mdW5jdGlvbiByKHQsZSxyKXtpZihyPj10LnNsaWNlKC0xKVswXSlyZXR1cm4gMTAwO3ZhciBuLGksbz1mKHIsdCksYT10W28tMV0scz10W29dLGw9ZVtvLTFdLHU9ZVtvXTtyZXR1cm4gbCsoaT1yLHAobj1bYSxzXSxuWzBdPDA/aStNYXRoLmFicyhuWzBdKTppLW5bMF0pL2MobCx1KSl9ZnVuY3Rpb24gbih0LGUscixuKXtpZigxMDA9PT1uKXJldHVybiBuO3ZhciBpLG8sYT1mKG4sdCkscz10W2EtMV0sbD10W2FdO3JldHVybiByPyhsLXMpLzI8bi1zP2w6czplW2EtMV0/dFthLTFdKyhpPW4tdFthLTFdLG89ZVthLTFdLE1hdGgucm91bmQoaS9vKSpvKTpufWZ1bmN0aW9uIG8odCxlLHIpe3ZhciBuO2lmKFwibnVtYmVyXCI9PXR5cGVvZiBlJiYoZT1bZV0pLCFBcnJheS5pc0FycmF5KGUpKXRocm93IG5ldyBFcnJvcihcIm5vVWlTbGlkZXIgKFwiK2V0K1wiKTogJ3JhbmdlJyBjb250YWlucyBpbnZhbGlkIHZhbHVlLlwiKTtpZighaShuPVwibWluXCI9PT10PzA6XCJtYXhcIj09PXQ/MTAwOnBhcnNlRmxvYXQodCkpfHwhaShlWzBdKSl0aHJvdyBuZXcgRXJyb3IoXCJub1VpU2xpZGVyIChcIitldCtcIik6ICdyYW5nZScgdmFsdWUgaXNuJ3QgbnVtZXJpYy5cIik7ci54UGN0LnB1c2gobiksci54VmFsLnB1c2goZVswXSksbj9yLnhTdGVwcy5wdXNoKCFpc05hTihlWzFdKSYmZVsxXSk6aXNOYU4oZVsxXSl8fChyLnhTdGVwc1swXT1lWzFdKSxyLnhIaWdoZXN0Q29tcGxldGVTdGVwLnB1c2goMCl9ZnVuY3Rpb24gYSh0LGUscil7aWYoIWUpcmV0dXJuITA7ci54U3RlcHNbdF09cChbci54VmFsW3RdLHIueFZhbFt0KzFdXSxlKS9jKHIueFBjdFt0XSxyLnhQY3RbdCsxXSk7dmFyIG49KHIueFZhbFt0KzFdLXIueFZhbFt0XSkvci54TnVtU3RlcHNbdF0saT1NYXRoLmNlaWwoTnVtYmVyKG4udG9GaXhlZCgzKSktMSksbz1yLnhWYWxbdF0rci54TnVtU3RlcHNbdF0qaTtyLnhIaWdoZXN0Q29tcGxldGVTdGVwW3RdPW99ZnVuY3Rpb24gbCh0LGUscil7dmFyIG47dGhpcy54UGN0PVtdLHRoaXMueFZhbD1bXSx0aGlzLnhTdGVwcz1bcnx8ITFdLHRoaXMueE51bVN0ZXBzPVshMV0sdGhpcy54SGlnaGVzdENvbXBsZXRlU3RlcD1bXSx0aGlzLnNuYXA9ZTt2YXIgaT1bXTtmb3IobiBpbiB0KXQuaGFzT3duUHJvcGVydHkobikmJmkucHVzaChbdFtuXSxuXSk7Zm9yKGkubGVuZ3RoJiZcIm9iamVjdFwiPT10eXBlb2YgaVswXVswXT9pLnNvcnQoZnVuY3Rpb24odCxlKXtyZXR1cm4gdFswXVswXS1lWzBdWzBdfSk6aS5zb3J0KGZ1bmN0aW9uKHQsZSl7cmV0dXJuIHRbMF0tZVswXX0pLG49MDtuPGkubGVuZ3RoO24rKylvKGlbbl1bMV0saVtuXVswXSx0aGlzKTtmb3IodGhpcy54TnVtU3RlcHM9dGhpcy54U3RlcHMuc2xpY2UoMCksbj0wO248dGhpcy54TnVtU3RlcHMubGVuZ3RoO24rKylhKG4sdGhpcy54TnVtU3RlcHNbbl0sdGhpcyl9bC5wcm90b3R5cGUuZ2V0TWFyZ2luPWZ1bmN0aW9uKHQpe3ZhciBlPXRoaXMueE51bVN0ZXBzWzBdO2lmKGUmJnQvZSUxIT0wKXRocm93IG5ldyBFcnJvcihcIm5vVWlTbGlkZXIgKFwiK2V0K1wiKTogJ2xpbWl0JywgJ21hcmdpbicgYW5kICdwYWRkaW5nJyBtdXN0IGJlIGRpdmlzaWJsZSBieSBzdGVwLlwiKTtyZXR1cm4gMj09PXRoaXMueFBjdC5sZW5ndGgmJnAodGhpcy54VmFsLHQpfSxsLnByb3RvdHlwZS50b1N0ZXBwaW5nPWZ1bmN0aW9uKHQpe3JldHVybiB0PXIodGhpcy54VmFsLHRoaXMueFBjdCx0KX0sbC5wcm90b3R5cGUuZnJvbVN0ZXBwaW5nPWZ1bmN0aW9uKHQpe3JldHVybiBmdW5jdGlvbih0LGUscil7aWYoMTAwPD1yKXJldHVybiB0LnNsaWNlKC0xKVswXTt2YXIgbixpPWYocixlKSxvPXRbaS0xXSxhPXRbaV0scz1lW2ktMV0sbD1lW2ldO3JldHVybiBuPVtvLGFdLChyLXMpKmMocyxsKSooblsxXS1uWzBdKS8xMDArblswXX0odGhpcy54VmFsLHRoaXMueFBjdCx0KX0sbC5wcm90b3R5cGUuZ2V0U3RlcD1mdW5jdGlvbih0KXtyZXR1cm4gdD1uKHRoaXMueFBjdCx0aGlzLnhTdGVwcyx0aGlzLnNuYXAsdCl9LGwucHJvdG90eXBlLmdldE5lYXJieVN0ZXBzPWZ1bmN0aW9uKHQpe3ZhciBlPWYodCx0aGlzLnhQY3QpO3JldHVybntzdGVwQmVmb3JlOntzdGFydFZhbHVlOnRoaXMueFZhbFtlLTJdLHN0ZXA6dGhpcy54TnVtU3RlcHNbZS0yXSxoaWdoZXN0U3RlcDp0aGlzLnhIaWdoZXN0Q29tcGxldGVTdGVwW2UtMl19LHRoaXNTdGVwOntzdGFydFZhbHVlOnRoaXMueFZhbFtlLTFdLHN0ZXA6dGhpcy54TnVtU3RlcHNbZS0xXSxoaWdoZXN0U3RlcDp0aGlzLnhIaWdoZXN0Q29tcGxldGVTdGVwW2UtMV19LHN0ZXBBZnRlcjp7c3RhcnRWYWx1ZTp0aGlzLnhWYWxbZV0sc3RlcDp0aGlzLnhOdW1TdGVwc1tlXSxoaWdoZXN0U3RlcDp0aGlzLnhIaWdoZXN0Q29tcGxldGVTdGVwW2VdfX19LGwucHJvdG90eXBlLmNvdW50U3RlcERlY2ltYWxzPWZ1bmN0aW9uKCl7dmFyIHQ9dGhpcy54TnVtU3RlcHMubWFwKGUpO3JldHVybiBNYXRoLm1heC5hcHBseShudWxsLHQpfSxsLnByb3RvdHlwZS5jb252ZXJ0PWZ1bmN0aW9uKHQpe3JldHVybiB0aGlzLmdldFN0ZXAodGhpcy50b1N0ZXBwaW5nKHQpKX07dmFyIHU9e3RvOmZ1bmN0aW9uKHQpe3JldHVybiB2b2lkIDAhPT10JiZ0LnRvRml4ZWQoMil9LGZyb206TnVtYmVyfTtmdW5jdGlvbiBkKHQpe2lmKFwib2JqZWN0XCI9PXR5cGVvZihlPXQpJiZcImZ1bmN0aW9uXCI9PXR5cGVvZiBlLnRvJiZcImZ1bmN0aW9uXCI9PXR5cGVvZiBlLmZyb20pcmV0dXJuITA7dmFyIGU7dGhyb3cgbmV3IEVycm9yKFwibm9VaVNsaWRlciAoXCIrZXQrXCIpOiAnZm9ybWF0JyByZXF1aXJlcyAndG8nIGFuZCAnZnJvbScgbWV0aG9kcy5cIil9ZnVuY3Rpb24gaCh0LGUpe2lmKCFpKGUpKXRocm93IG5ldyBFcnJvcihcIm5vVWlTbGlkZXIgKFwiK2V0K1wiKTogJ3N0ZXAnIGlzIG5vdCBudW1lcmljLlwiKTt0LnNpbmdsZVN0ZXA9ZX1mdW5jdGlvbiBtKHQsZSl7aWYoXCJvYmplY3RcIiE9dHlwZW9mIGV8fEFycmF5LmlzQXJyYXkoZSkpdGhyb3cgbmV3IEVycm9yKFwibm9VaVNsaWRlciAoXCIrZXQrXCIpOiAncmFuZ2UnIGlzIG5vdCBhbiBvYmplY3QuXCIpO2lmKHZvaWQgMD09PWUubWlufHx2b2lkIDA9PT1lLm1heCl0aHJvdyBuZXcgRXJyb3IoXCJub1VpU2xpZGVyIChcIitldCtcIik6IE1pc3NpbmcgJ21pbicgb3IgJ21heCcgaW4gJ3JhbmdlJy5cIik7aWYoZS5taW49PT1lLm1heCl0aHJvdyBuZXcgRXJyb3IoXCJub1VpU2xpZGVyIChcIitldCtcIik6ICdyYW5nZScgJ21pbicgYW5kICdtYXgnIGNhbm5vdCBiZSBlcXVhbC5cIik7dC5zcGVjdHJ1bT1uZXcgbChlLHQuc25hcCx0LnNpbmdsZVN0ZXApfWZ1bmN0aW9uIGcodCxlKXtpZihlPW90KGUpLCFBcnJheS5pc0FycmF5KGUpfHwhZS5sZW5ndGgpdGhyb3cgbmV3IEVycm9yKFwibm9VaVNsaWRlciAoXCIrZXQrXCIpOiAnc3RhcnQnIG9wdGlvbiBpcyBpbmNvcnJlY3QuXCIpO3QuaGFuZGxlcz1lLmxlbmd0aCx0LnN0YXJ0PWV9ZnVuY3Rpb24gdih0LGUpe2lmKFwiYm9vbGVhblwiIT10eXBlb2YodC5zbmFwPWUpKXRocm93IG5ldyBFcnJvcihcIm5vVWlTbGlkZXIgKFwiK2V0K1wiKTogJ3NuYXAnIG9wdGlvbiBtdXN0IGJlIGEgYm9vbGVhbi5cIil9ZnVuY3Rpb24gYih0LGUpe2lmKFwiYm9vbGVhblwiIT10eXBlb2YodC5hbmltYXRlPWUpKXRocm93IG5ldyBFcnJvcihcIm5vVWlTbGlkZXIgKFwiK2V0K1wiKTogJ2FuaW1hdGUnIG9wdGlvbiBtdXN0IGJlIGEgYm9vbGVhbi5cIil9ZnVuY3Rpb24gUyh0LGUpe2lmKFwibnVtYmVyXCIhPXR5cGVvZih0LmFuaW1hdGlvbkR1cmF0aW9uPWUpKXRocm93IG5ldyBFcnJvcihcIm5vVWlTbGlkZXIgKFwiK2V0K1wiKTogJ2FuaW1hdGlvbkR1cmF0aW9uJyBvcHRpb24gbXVzdCBiZSBhIG51bWJlci5cIil9ZnVuY3Rpb24gdyh0LGUpe3ZhciByLG49WyExXTtpZihcImxvd2VyXCI9PT1lP2U9WyEwLCExXTpcInVwcGVyXCI9PT1lJiYoZT1bITEsITBdKSwhMD09PWV8fCExPT09ZSl7Zm9yKHI9MTtyPHQuaGFuZGxlcztyKyspbi5wdXNoKGUpO24ucHVzaCghMSl9ZWxzZXtpZighQXJyYXkuaXNBcnJheShlKXx8IWUubGVuZ3RofHxlLmxlbmd0aCE9PXQuaGFuZGxlcysxKXRocm93IG5ldyBFcnJvcihcIm5vVWlTbGlkZXIgKFwiK2V0K1wiKTogJ2Nvbm5lY3QnIG9wdGlvbiBkb2Vzbid0IG1hdGNoIGhhbmRsZSBjb3VudC5cIik7bj1lfXQuY29ubmVjdD1ufWZ1bmN0aW9uIHgodCxlKXtzd2l0Y2goZSl7Y2FzZVwiaG9yaXpvbnRhbFwiOnQub3J0PTA7YnJlYWs7Y2FzZVwidmVydGljYWxcIjp0Lm9ydD0xO2JyZWFrO2RlZmF1bHQ6dGhyb3cgbmV3IEVycm9yKFwibm9VaVNsaWRlciAoXCIrZXQrXCIpOiAnb3JpZW50YXRpb24nIG9wdGlvbiBpcyBpbnZhbGlkLlwiKX19ZnVuY3Rpb24geSh0LGUpe2lmKCFpKGUpKXRocm93IG5ldyBFcnJvcihcIm5vVWlTbGlkZXIgKFwiK2V0K1wiKTogJ21hcmdpbicgb3B0aW9uIG11c3QgYmUgbnVtZXJpYy5cIik7aWYoMCE9PWUmJih0Lm1hcmdpbj10LnNwZWN0cnVtLmdldE1hcmdpbihlKSwhdC5tYXJnaW4pKXRocm93IG5ldyBFcnJvcihcIm5vVWlTbGlkZXIgKFwiK2V0K1wiKTogJ21hcmdpbicgb3B0aW9uIGlzIG9ubHkgc3VwcG9ydGVkIG9uIGxpbmVhciBzbGlkZXJzLlwiKX1mdW5jdGlvbiBFKHQsZSl7aWYoIWkoZSkpdGhyb3cgbmV3IEVycm9yKFwibm9VaVNsaWRlciAoXCIrZXQrXCIpOiAnbGltaXQnIG9wdGlvbiBtdXN0IGJlIG51bWVyaWMuXCIpO2lmKHQubGltaXQ9dC5zcGVjdHJ1bS5nZXRNYXJnaW4oZSksIXQubGltaXR8fHQuaGFuZGxlczwyKXRocm93IG5ldyBFcnJvcihcIm5vVWlTbGlkZXIgKFwiK2V0K1wiKTogJ2xpbWl0JyBvcHRpb24gaXMgb25seSBzdXBwb3J0ZWQgb24gbGluZWFyIHNsaWRlcnMgd2l0aCAyIG9yIG1vcmUgaGFuZGxlcy5cIil9ZnVuY3Rpb24gQyh0LGUpe2lmKCFpKGUpJiYhQXJyYXkuaXNBcnJheShlKSl0aHJvdyBuZXcgRXJyb3IoXCJub1VpU2xpZGVyIChcIitldCtcIik6ICdwYWRkaW5nJyBvcHRpb24gbXVzdCBiZSBudW1lcmljIG9yIGFycmF5IG9mIGV4YWN0bHkgMiBudW1iZXJzLlwiKTtpZihBcnJheS5pc0FycmF5KGUpJiYyIT09ZS5sZW5ndGgmJiFpKGVbMF0pJiYhaShlWzFdKSl0aHJvdyBuZXcgRXJyb3IoXCJub1VpU2xpZGVyIChcIitldCtcIik6ICdwYWRkaW5nJyBvcHRpb24gbXVzdCBiZSBudW1lcmljIG9yIGFycmF5IG9mIGV4YWN0bHkgMiBudW1iZXJzLlwiKTtpZigwIT09ZSl7aWYoQXJyYXkuaXNBcnJheShlKXx8KGU9W2UsZV0pLCEodC5wYWRkaW5nPVt0LnNwZWN0cnVtLmdldE1hcmdpbihlWzBdKSx0LnNwZWN0cnVtLmdldE1hcmdpbihlWzFdKV0pPT09dC5wYWRkaW5nWzBdfHwhMT09PXQucGFkZGluZ1sxXSl0aHJvdyBuZXcgRXJyb3IoXCJub1VpU2xpZGVyIChcIitldCtcIik6ICdwYWRkaW5nJyBvcHRpb24gaXMgb25seSBzdXBwb3J0ZWQgb24gbGluZWFyIHNsaWRlcnMuXCIpO2lmKHQucGFkZGluZ1swXTwwfHx0LnBhZGRpbmdbMV08MCl0aHJvdyBuZXcgRXJyb3IoXCJub1VpU2xpZGVyIChcIitldCtcIik6ICdwYWRkaW5nJyBvcHRpb24gbXVzdCBiZSBhIHBvc2l0aXZlIG51bWJlcihzKS5cIik7aWYoMTAwPD10LnBhZGRpbmdbMF0rdC5wYWRkaW5nWzFdKXRocm93IG5ldyBFcnJvcihcIm5vVWlTbGlkZXIgKFwiK2V0K1wiKTogJ3BhZGRpbmcnIG9wdGlvbiBtdXN0IG5vdCBleGNlZWQgMTAwJSBvZiB0aGUgcmFuZ2UuXCIpfX1mdW5jdGlvbiBOKHQsZSl7c3dpdGNoKGUpe2Nhc2VcImx0clwiOnQuZGlyPTA7YnJlYWs7Y2FzZVwicnRsXCI6dC5kaXI9MTticmVhaztkZWZhdWx0OnRocm93IG5ldyBFcnJvcihcIm5vVWlTbGlkZXIgKFwiK2V0K1wiKTogJ2RpcmVjdGlvbicgb3B0aW9uIHdhcyBub3QgcmVjb2duaXplZC5cIil9fWZ1bmN0aW9uIFUodCxlKXtpZihcInN0cmluZ1wiIT10eXBlb2YgZSl0aHJvdyBuZXcgRXJyb3IoXCJub1VpU2xpZGVyIChcIitldCtcIik6ICdiZWhhdmlvdXInIG11c3QgYmUgYSBzdHJpbmcgY29udGFpbmluZyBvcHRpb25zLlwiKTt2YXIgcj0wPD1lLmluZGV4T2YoXCJ0YXBcIiksbj0wPD1lLmluZGV4T2YoXCJkcmFnXCIpLGk9MDw9ZS5pbmRleE9mKFwiZml4ZWRcIiksbz0wPD1lLmluZGV4T2YoXCJzbmFwXCIpLGE9MDw9ZS5pbmRleE9mKFwiaG92ZXJcIikscz0wPD1lLmluZGV4T2YoXCJ1bmNvbnN0cmFpbmVkXCIpO2lmKGkpe2lmKDIhPT10LmhhbmRsZXMpdGhyb3cgbmV3IEVycm9yKFwibm9VaVNsaWRlciAoXCIrZXQrXCIpOiAnZml4ZWQnIGJlaGF2aW91ciBtdXN0IGJlIHVzZWQgd2l0aCAyIGhhbmRsZXNcIik7eSh0LHQuc3RhcnRbMV0tdC5zdGFydFswXSl9aWYocyYmKHQubWFyZ2lufHx0LmxpbWl0KSl0aHJvdyBuZXcgRXJyb3IoXCJub1VpU2xpZGVyIChcIitldCtcIik6ICd1bmNvbnN0cmFpbmVkJyBiZWhhdmlvdXIgY2Fubm90IGJlIHVzZWQgd2l0aCBtYXJnaW4gb3IgbGltaXRcIik7dC5ldmVudHM9e3RhcDpyfHxvLGRyYWc6bixmaXhlZDppLHNuYXA6byxob3ZlcjphLHVuY29uc3RyYWluZWQ6c319ZnVuY3Rpb24gayh0LGUpe2lmKCExIT09ZSlpZighMD09PWUpe3QudG9vbHRpcHM9W107Zm9yKHZhciByPTA7cjx0LmhhbmRsZXM7cisrKXQudG9vbHRpcHMucHVzaCghMCl9ZWxzZXtpZih0LnRvb2x0aXBzPW90KGUpLHQudG9vbHRpcHMubGVuZ3RoIT09dC5oYW5kbGVzKXRocm93IG5ldyBFcnJvcihcIm5vVWlTbGlkZXIgKFwiK2V0K1wiKTogbXVzdCBwYXNzIGEgZm9ybWF0dGVyIGZvciBhbGwgaGFuZGxlcy5cIik7dC50b29sdGlwcy5mb3JFYWNoKGZ1bmN0aW9uKHQpe2lmKFwiYm9vbGVhblwiIT10eXBlb2YgdCYmKFwib2JqZWN0XCIhPXR5cGVvZiB0fHxcImZ1bmN0aW9uXCIhPXR5cGVvZiB0LnRvKSl0aHJvdyBuZXcgRXJyb3IoXCJub1VpU2xpZGVyIChcIitldCtcIik6ICd0b29sdGlwcycgbXVzdCBiZSBwYXNzZWQgYSBmb3JtYXR0ZXIgb3IgJ2ZhbHNlJy5cIil9KX19ZnVuY3Rpb24gUCh0LGUpe2QodC5hcmlhRm9ybWF0PWUpfWZ1bmN0aW9uIEEodCxlKXtkKHQuZm9ybWF0PWUpfWZ1bmN0aW9uIE0odCxlKXtpZihcImJvb2xlYW5cIiE9dHlwZW9mKHQua2V5Ym9hcmRTdXBwb3J0PWUpKXRocm93IG5ldyBFcnJvcihcIm5vVWlTbGlkZXIgKFwiK2V0K1wiKTogJ2tleWJvYXJkU3VwcG9ydCcgb3B0aW9uIG11c3QgYmUgYSBib29sZWFuLlwiKX1mdW5jdGlvbiBWKHQsZSl7dC5kb2N1bWVudEVsZW1lbnQ9ZX1mdW5jdGlvbiBPKHQsZSl7aWYoXCJzdHJpbmdcIiE9dHlwZW9mIGUmJiExIT09ZSl0aHJvdyBuZXcgRXJyb3IoXCJub1VpU2xpZGVyIChcIitldCtcIik6ICdjc3NQcmVmaXgnIG11c3QgYmUgYSBzdHJpbmcgb3IgYGZhbHNlYC5cIik7dC5jc3NQcmVmaXg9ZX1mdW5jdGlvbiBMKHQsZSl7aWYoXCJvYmplY3RcIiE9dHlwZW9mIGUpdGhyb3cgbmV3IEVycm9yKFwibm9VaVNsaWRlciAoXCIrZXQrXCIpOiAnY3NzQ2xhc3NlcycgbXVzdCBiZSBhbiBvYmplY3QuXCIpO2lmKFwic3RyaW5nXCI9PXR5cGVvZiB0LmNzc1ByZWZpeClmb3IodmFyIHIgaW4gdC5jc3NDbGFzc2VzPXt9LGUpZS5oYXNPd25Qcm9wZXJ0eShyKSYmKHQuY3NzQ2xhc3Nlc1tyXT10LmNzc1ByZWZpeCtlW3JdKTtlbHNlIHQuY3NzQ2xhc3Nlcz1lfWZ1bmN0aW9uIHV0KGUpe3ZhciByPXttYXJnaW46MCxsaW1pdDowLHBhZGRpbmc6MCxhbmltYXRlOiEwLGFuaW1hdGlvbkR1cmF0aW9uOjMwMCxhcmlhRm9ybWF0OnUsZm9ybWF0OnV9LG49e3N0ZXA6e3I6ITEsdDpofSxzdGFydDp7cjohMCx0Omd9LGNvbm5lY3Q6e3I6ITAsdDp3fSxkaXJlY3Rpb246e3I6ITAsdDpOfSxzbmFwOntyOiExLHQ6dn0sYW5pbWF0ZTp7cjohMSx0OmJ9LGFuaW1hdGlvbkR1cmF0aW9uOntyOiExLHQ6U30scmFuZ2U6e3I6ITAsdDptfSxvcmllbnRhdGlvbjp7cjohMSx0Onh9LG1hcmdpbjp7cjohMSx0Onl9LGxpbWl0OntyOiExLHQ6RX0scGFkZGluZzp7cjohMSx0OkN9LGJlaGF2aW91cjp7cjohMCx0OlV9LGFyaWFGb3JtYXQ6e3I6ITEsdDpQfSxmb3JtYXQ6e3I6ITEsdDpBfSx0b29sdGlwczp7cjohMSx0Omt9LGtleWJvYXJkU3VwcG9ydDp7cjohMCx0Ok19LGRvY3VtZW50RWxlbWVudDp7cjohMSx0OlZ9LGNzc1ByZWZpeDp7cjohMCx0Ok99LGNzc0NsYXNzZXM6e3I6ITAsdDpMfX0saT17Y29ubmVjdDohMSxkaXJlY3Rpb246XCJsdHJcIixiZWhhdmlvdXI6XCJ0YXBcIixvcmllbnRhdGlvbjpcImhvcml6b250YWxcIixrZXlib2FyZFN1cHBvcnQ6ITAsY3NzUHJlZml4Olwibm9VaS1cIixjc3NDbGFzc2VzOnt0YXJnZXQ6XCJ0YXJnZXRcIixiYXNlOlwiYmFzZVwiLG9yaWdpbjpcIm9yaWdpblwiLGhhbmRsZTpcImhhbmRsZVwiLGhhbmRsZUxvd2VyOlwiaGFuZGxlLWxvd2VyXCIsaGFuZGxlVXBwZXI6XCJoYW5kbGUtdXBwZXJcIixob3Jpem9udGFsOlwiaG9yaXpvbnRhbFwiLHZlcnRpY2FsOlwidmVydGljYWxcIixiYWNrZ3JvdW5kOlwiYmFja2dyb3VuZFwiLGNvbm5lY3Q6XCJjb25uZWN0XCIsY29ubmVjdHM6XCJjb25uZWN0c1wiLGx0cjpcImx0clwiLHJ0bDpcInJ0bFwiLGRyYWdnYWJsZTpcImRyYWdnYWJsZVwiLGRyYWc6XCJzdGF0ZS1kcmFnXCIsdGFwOlwic3RhdGUtdGFwXCIsYWN0aXZlOlwiYWN0aXZlXCIsdG9vbHRpcDpcInRvb2x0aXBcIixwaXBzOlwicGlwc1wiLHBpcHNIb3Jpem9udGFsOlwicGlwcy1ob3Jpem9udGFsXCIscGlwc1ZlcnRpY2FsOlwicGlwcy12ZXJ0aWNhbFwiLG1hcmtlcjpcIm1hcmtlclwiLG1hcmtlckhvcml6b250YWw6XCJtYXJrZXItaG9yaXpvbnRhbFwiLG1hcmtlclZlcnRpY2FsOlwibWFya2VyLXZlcnRpY2FsXCIsbWFya2VyTm9ybWFsOlwibWFya2VyLW5vcm1hbFwiLG1hcmtlckxhcmdlOlwibWFya2VyLWxhcmdlXCIsbWFya2VyU3ViOlwibWFya2VyLXN1YlwiLHZhbHVlOlwidmFsdWVcIix2YWx1ZUhvcml6b250YWw6XCJ2YWx1ZS1ob3Jpem9udGFsXCIsdmFsdWVWZXJ0aWNhbDpcInZhbHVlLXZlcnRpY2FsXCIsdmFsdWVOb3JtYWw6XCJ2YWx1ZS1ub3JtYWxcIix2YWx1ZUxhcmdlOlwidmFsdWUtbGFyZ2VcIix2YWx1ZVN1YjpcInZhbHVlLXN1YlwifX07ZS5mb3JtYXQmJiFlLmFyaWFGb3JtYXQmJihlLmFyaWFGb3JtYXQ9ZS5mb3JtYXQpLE9iamVjdC5rZXlzKG4pLmZvckVhY2goZnVuY3Rpb24odCl7aWYoIXMoZVt0XSkmJnZvaWQgMD09PWlbdF0pe2lmKG5bdF0ucil0aHJvdyBuZXcgRXJyb3IoXCJub1VpU2xpZGVyIChcIitldCtcIik6ICdcIit0K1wiJyBpcyByZXF1aXJlZC5cIik7cmV0dXJuITB9blt0XS50KHIscyhlW3RdKT9lW3RdOmlbdF0pfSksci5waXBzPWUucGlwczt2YXIgdD1kb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpLG89dm9pZCAwIT09dC5zdHlsZS5tc1RyYW5zZm9ybSxhPXZvaWQgMCE9PXQuc3R5bGUudHJhbnNmb3JtO3IudHJhbnNmb3JtUnVsZT1hP1widHJhbnNmb3JtXCI6bz9cIm1zVHJhbnNmb3JtXCI6XCJ3ZWJraXRUcmFuc2Zvcm1cIjtyZXR1cm4gci5zdHlsZT1bW1wibGVmdFwiLFwidG9wXCJdLFtcInJpZ2h0XCIsXCJib3R0b21cIl1dW3IuZGlyXVtyLm9ydF0scn1mdW5jdGlvbiB6KHQsZixvKXt2YXIgbCx1LHMsYSxjLGUscCxpLGQ9d2luZG93Lm5hdmlnYXRvci5wb2ludGVyRW5hYmxlZD97c3RhcnQ6XCJwb2ludGVyZG93blwiLG1vdmU6XCJwb2ludGVybW92ZVwiLGVuZDpcInBvaW50ZXJ1cFwifTp3aW5kb3cubmF2aWdhdG9yLm1zUG9pbnRlckVuYWJsZWQ/e3N0YXJ0OlwiTVNQb2ludGVyRG93blwiLG1vdmU6XCJNU1BvaW50ZXJNb3ZlXCIsZW5kOlwiTVNQb2ludGVyVXBcIn06e3N0YXJ0OlwibW91c2Vkb3duIHRvdWNoc3RhcnRcIixtb3ZlOlwibW91c2Vtb3ZlIHRvdWNobW92ZVwiLGVuZDpcIm1vdXNldXAgdG91Y2hlbmRcIn0saD13aW5kb3cuQ1NTJiZDU1Muc3VwcG9ydHMmJkNTUy5zdXBwb3J0cyhcInRvdWNoLWFjdGlvblwiLFwibm9uZVwiKSYmZnVuY3Rpb24oKXt2YXIgdD0hMTt0cnl7dmFyIGU9T2JqZWN0LmRlZmluZVByb3BlcnR5KHt9LFwicGFzc2l2ZVwiLHtnZXQ6ZnVuY3Rpb24oKXt0PSEwfX0pO3dpbmRvdy5hZGRFdmVudExpc3RlbmVyKFwidGVzdFwiLG51bGwsZSl9Y2F0Y2godCl7fXJldHVybiB0fSgpLHk9dCxtPVtdLGc9W10sdj0wLEU9Zi5zcGVjdHJ1bSxiPVtdLFM9e30sdz10Lm93bmVyRG9jdW1lbnQseD1mLmRvY3VtZW50RWxlbWVudHx8dy5kb2N1bWVudEVsZW1lbnQsQz13LmJvZHksTj0tMSxVPTAsaz0xLFA9MixBPVwicnRsXCI9PT13LmRpcnx8MT09PWYub3J0PzA6MTAwO2Z1bmN0aW9uIE0odCxlKXt2YXIgcj13LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7cmV0dXJuIGUmJmF0KHIsZSksdC5hcHBlbmRDaGlsZChyKSxyfWZ1bmN0aW9uIFYodCxlKXtyZXR1cm4hIWUmJk0odCxmLmNzc0NsYXNzZXMuY29ubmVjdCl9ZnVuY3Rpb24gcih0LGUpe3JldHVybiEhZi50b29sdGlwc1tlXSYmTSh0LmZpcnN0Q2hpbGQsZi5jc3NDbGFzc2VzLnRvb2x0aXApfWZ1bmN0aW9uIE8oZSxpLG8pe3ZhciBhPXcuY3JlYXRlRWxlbWVudChcImRpdlwiKSxzPVtdO3NbVV09Zi5jc3NDbGFzc2VzLnZhbHVlTm9ybWFsLHNba109Zi5jc3NDbGFzc2VzLnZhbHVlTGFyZ2Usc1tQXT1mLmNzc0NsYXNzZXMudmFsdWVTdWI7dmFyIGw9W107bFtVXT1mLmNzc0NsYXNzZXMubWFya2VyTm9ybWFsLGxba109Zi5jc3NDbGFzc2VzLm1hcmtlckxhcmdlLGxbUF09Zi5jc3NDbGFzc2VzLm1hcmtlclN1Yjt2YXIgdT1bZi5jc3NDbGFzc2VzLnZhbHVlSG9yaXpvbnRhbCxmLmNzc0NsYXNzZXMudmFsdWVWZXJ0aWNhbF0sYz1bZi5jc3NDbGFzc2VzLm1hcmtlckhvcml6b250YWwsZi5jc3NDbGFzc2VzLm1hcmtlclZlcnRpY2FsXTtmdW5jdGlvbiBwKHQsZSl7dmFyIHI9ZT09PWYuY3NzQ2xhc3Nlcy52YWx1ZSxuPXI/czpsO3JldHVybiBlK1wiIFwiKyhyP3U6YylbZi5vcnRdK1wiIFwiK25bdF19cmV0dXJuIGF0KGEsZi5jc3NDbGFzc2VzLnBpcHMpLGF0KGEsMD09PWYub3J0P2YuY3NzQ2xhc3Nlcy5waXBzSG9yaXpvbnRhbDpmLmNzc0NsYXNzZXMucGlwc1ZlcnRpY2FsKSxPYmplY3Qua2V5cyhlKS5mb3JFYWNoKGZ1bmN0aW9uKHQpeyFmdW5jdGlvbih0LGUscil7aWYoKHI9aT9pKGUscik6cikhPT1OKXt2YXIgbj1NKGEsITEpO24uY2xhc3NOYW1lPXAocixmLmNzc0NsYXNzZXMubWFya2VyKSxuLnN0eWxlW2Yuc3R5bGVdPXQrXCIlXCIsVTxyJiYoKG49TShhLCExKSkuY2xhc3NOYW1lPXAocixmLmNzc0NsYXNzZXMudmFsdWUpLG4uc2V0QXR0cmlidXRlKFwiZGF0YS12YWx1ZVwiLGUpLG4uc3R5bGVbZi5zdHlsZV09dCtcIiVcIixuLmlubmVySFRNTD1vLnRvKGUpKX19KHQsZVt0XVswXSxlW3RdWzFdKX0pLGF9ZnVuY3Rpb24gTCgpe3ZhciB0O2MmJigodD1jKS5wYXJlbnRFbGVtZW50LnJlbW92ZUNoaWxkKHQpLGM9bnVsbCl9ZnVuY3Rpb24geih0KXtMKCk7dmFyIG0sZyx2LGIsZSxyLFMsdyx4LG49dC5tb2RlLGk9dC5kZW5zaXR5fHwxLG89dC5maWx0ZXJ8fCExLGE9ZnVuY3Rpb24odCxlLHIpe2lmKFwicmFuZ2VcIj09PXR8fFwic3RlcHNcIj09PXQpcmV0dXJuIEUueFZhbDtpZihcImNvdW50XCI9PT10KXtpZihlPDIpdGhyb3cgbmV3IEVycm9yKFwibm9VaVNsaWRlciAoXCIrZXQrXCIpOiAndmFsdWVzJyAoPj0gMikgcmVxdWlyZWQgZm9yIG1vZGUgJ2NvdW50Jy5cIik7dmFyIG49ZS0xLGk9MTAwL247Zm9yKGU9W107bi0tOyllW25dPW4qaTtlLnB1c2goMTAwKSx0PVwicG9zaXRpb25zXCJ9cmV0dXJuXCJwb3NpdGlvbnNcIj09PXQ/ZS5tYXAoZnVuY3Rpb24odCl7cmV0dXJuIEUuZnJvbVN0ZXBwaW5nKHI/RS5nZXRTdGVwKHQpOnQpfSk6XCJ2YWx1ZXNcIj09PXQ/cj9lLm1hcChmdW5jdGlvbih0KXtyZXR1cm4gRS5mcm9tU3RlcHBpbmcoRS5nZXRTdGVwKEUudG9TdGVwcGluZyh0KSkpfSk6ZTp2b2lkIDB9KG4sdC52YWx1ZXN8fCExLHQuc3RlcHBlZHx8ITEpLHM9KG09aSxnPW4sdj1hLGI9e30sZT1FLnhWYWxbMF0scj1FLnhWYWxbRS54VmFsLmxlbmd0aC0xXSx3PVM9ITEseD0wLCh2PXYuc2xpY2UoKS5zb3J0KGZ1bmN0aW9uKHQsZSl7cmV0dXJuIHQtZX0pLmZpbHRlcihmdW5jdGlvbih0KXtyZXR1cm4hdGhpc1t0XSYmKHRoaXNbdF09ITApfSx7fSkpWzBdIT09ZSYmKHYudW5zaGlmdChlKSxTPSEwKSx2W3YubGVuZ3RoLTFdIT09ciYmKHYucHVzaChyKSx3PSEwKSx2LmZvckVhY2goZnVuY3Rpb24odCxlKXt2YXIgcixuLGksbyxhLHMsbCx1LGMscCxmPXQsZD12W2UrMV0saD1cInN0ZXBzXCI9PT1nO2lmKGgmJihyPUUueE51bVN0ZXBzW2VdKSxyfHwocj1kLWYpLCExIT09ZiYmdm9pZCAwIT09ZClmb3Iocj1NYXRoLm1heChyLDFlLTcpLG49ZjtuPD1kO249KG4rcikudG9GaXhlZCg3KS8xKXtmb3IodT0oYT0obz1FLnRvU3RlcHBpbmcobikpLXgpL20scD1hLyhjPU1hdGgucm91bmQodSkpLGk9MTtpPD1jO2krPTEpYlsocz14K2kqcCkudG9GaXhlZCg1KV09W0UuZnJvbVN0ZXBwaW5nKHMpLDBdO2w9LTE8di5pbmRleE9mKG4pP2s6aD9QOlUsIWUmJlMmJihsPTApLG49PT1kJiZ3fHwoYltvLnRvRml4ZWQoNSldPVtuLGxdKSx4PW99fSksYiksbD10LmZvcm1hdHx8e3RvOk1hdGgucm91bmR9O3JldHVybiBjPXkuYXBwZW5kQ2hpbGQoTyhzLG8sbCkpfWZ1bmN0aW9uIGooKXt2YXIgdD1sLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLGU9XCJvZmZzZXRcIitbXCJXaWR0aFwiLFwiSGVpZ2h0XCJdW2Yub3J0XTtyZXR1cm4gMD09PWYub3J0P3Qud2lkdGh8fGxbZV06dC5oZWlnaHR8fGxbZV19ZnVuY3Rpb24gRihuLGksbyxhKXt2YXIgZT1mdW5jdGlvbih0KXtyZXR1cm4hISh0PWZ1bmN0aW9uKHQsZSxyKXt2YXIgbixpLG89MD09PXQudHlwZS5pbmRleE9mKFwidG91Y2hcIiksYT0wPT09dC50eXBlLmluZGV4T2YoXCJtb3VzZVwiKSxzPTA9PT10LnR5cGUuaW5kZXhPZihcInBvaW50ZXJcIik7MD09PXQudHlwZS5pbmRleE9mKFwiTVNQb2ludGVyXCIpJiYocz0hMCk7aWYobyl7dmFyIGw9ZnVuY3Rpb24odCl7cmV0dXJuIHQudGFyZ2V0PT09cnx8ci5jb250YWlucyh0LnRhcmdldCl9O2lmKFwidG91Y2hzdGFydFwiPT09dC50eXBlKXt2YXIgdT1BcnJheS5wcm90b3R5cGUuZmlsdGVyLmNhbGwodC50b3VjaGVzLGwpO2lmKDE8dS5sZW5ndGgpcmV0dXJuITE7bj11WzBdLnBhZ2VYLGk9dVswXS5wYWdlWX1lbHNle3ZhciBjPUFycmF5LnByb3RvdHlwZS5maW5kLmNhbGwodC5jaGFuZ2VkVG91Y2hlcyxsKTtpZighYylyZXR1cm4hMTtuPWMucGFnZVgsaT1jLnBhZ2VZfX1lPWV8fGx0KHcpLChhfHxzKSYmKG49dC5jbGllbnRYK2UueCxpPXQuY2xpZW50WStlLnkpO3JldHVybiB0LnBhZ2VPZmZzZXQ9ZSx0LnBvaW50cz1bbixpXSx0LmN1cnNvcj1hfHxzLHR9KHQsYS5wYWdlT2Zmc2V0LGEudGFyZ2V0fHxpKSkmJighKHkuaGFzQXR0cmlidXRlKFwiZGlzYWJsZWRcIikmJiFhLmRvTm90UmVqZWN0KSYmKGU9eSxyPWYuY3NzQ2xhc3Nlcy50YXAsISgoZS5jbGFzc0xpc3Q/ZS5jbGFzc0xpc3QuY29udGFpbnMocik6bmV3IFJlZ0V4cChcIlxcXFxiXCIrcitcIlxcXFxiXCIpLnRlc3QoZS5jbGFzc05hbWUpKSYmIWEuZG9Ob3RSZWplY3QpJiYoIShuPT09ZC5zdGFydCYmdm9pZCAwIT09dC5idXR0b25zJiYxPHQuYnV0dG9ucykmJigoIWEuaG92ZXJ8fCF0LmJ1dHRvbnMpJiYoaHx8dC5wcmV2ZW50RGVmYXVsdCgpLHQuY2FsY1BvaW50PXQucG9pbnRzW2Yub3J0XSx2b2lkIG8odCxhKSkpKSkpO3ZhciBlLHJ9LHI9W107cmV0dXJuIG4uc3BsaXQoXCIgXCIpLmZvckVhY2goZnVuY3Rpb24odCl7aS5hZGRFdmVudExpc3RlbmVyKHQsZSwhIWgmJntwYXNzaXZlOiEwfSksci5wdXNoKFt0LGVdKX0pLHJ9ZnVuY3Rpb24gSCh0KXt2YXIgZSxyLG4saSxvLGEscz0xMDAqKHQtKGU9bCxyPWYub3J0LG49ZS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKSxpPWUub3duZXJEb2N1bWVudCxvPWkuZG9jdW1lbnRFbGVtZW50LGE9bHQoaSksL3dlYmtpdC4qQ2hyb21lLipNb2JpbGUvaS50ZXN0KG5hdmlnYXRvci51c2VyQWdlbnQpJiYoYS54PTApLHI/bi50b3ArYS55LW8uY2xpZW50VG9wOm4ubGVmdCthLngtby5jbGllbnRMZWZ0KSkvaigpO3JldHVybiBzPWl0KHMpLGYuZGlyPzEwMC1zOnN9ZnVuY3Rpb24gRCh0LGUpe1wibW91c2VvdXRcIj09PXQudHlwZSYmXCJIVE1MXCI9PT10LnRhcmdldC5ub2RlTmFtZSYmbnVsbD09PXQucmVsYXRlZFRhcmdldCYmUih0LGUpfWZ1bmN0aW9uIFQodCxlKXtpZigtMT09PW5hdmlnYXRvci5hcHBWZXJzaW9uLmluZGV4T2YoXCJNU0lFIDlcIikmJjA9PT10LmJ1dHRvbnMmJjAhPT1lLmJ1dHRvbnNQcm9wZXJ0eSlyZXR1cm4gUih0LGUpO3ZhciByPShmLmRpcj8tMToxKSoodC5jYWxjUG9pbnQtZS5zdGFydENhbGNQb2ludCk7JCgwPHIsMTAwKnIvZS5iYXNlU2l6ZSxlLmxvY2F0aW9ucyxlLmhhbmRsZU51bWJlcnMpfWZ1bmN0aW9uIFIodCxlKXtlLmhhbmRsZSYmKHN0KGUuaGFuZGxlLGYuY3NzQ2xhc3Nlcy5hY3RpdmUpLHYtPTEpLGUubGlzdGVuZXJzLmZvckVhY2goZnVuY3Rpb24odCl7eC5yZW1vdmVFdmVudExpc3RlbmVyKHRbMF0sdFsxXSl9KSwwPT09diYmKHN0KHksZi5jc3NDbGFzc2VzLmRyYWcpLEooKSx0LmN1cnNvciYmKEMuc3R5bGUuY3Vyc29yPVwiXCIsQy5yZW1vdmVFdmVudExpc3RlbmVyKFwic2VsZWN0c3RhcnRcIixydCkpKSxlLmhhbmRsZU51bWJlcnMuZm9yRWFjaChmdW5jdGlvbih0KXtZKFwiY2hhbmdlXCIsdCksWShcInNldFwiLHQpLFkoXCJlbmRcIix0KX0pfWZ1bmN0aW9uIHEodCxlKXt2YXIgcjtpZigxPT09ZS5oYW5kbGVOdW1iZXJzLmxlbmd0aCl7dmFyIG49dVtlLmhhbmRsZU51bWJlcnNbMF1dO2lmKG4uaGFzQXR0cmlidXRlKFwiZGlzYWJsZWRcIikpcmV0dXJuITE7cj1uLmNoaWxkcmVuWzBdLHYrPTEsYXQocixmLmNzc0NsYXNzZXMuYWN0aXZlKX10LnN0b3BQcm9wYWdhdGlvbigpO3ZhciBpPVtdLG89RihkLm1vdmUseCxULHt0YXJnZXQ6dC50YXJnZXQsaGFuZGxlOnIsbGlzdGVuZXJzOmksc3RhcnRDYWxjUG9pbnQ6dC5jYWxjUG9pbnQsYmFzZVNpemU6aigpLHBhZ2VPZmZzZXQ6dC5wYWdlT2Zmc2V0LGhhbmRsZU51bWJlcnM6ZS5oYW5kbGVOdW1iZXJzLGJ1dHRvbnNQcm9wZXJ0eTp0LmJ1dHRvbnMsbG9jYXRpb25zOm0uc2xpY2UoKX0pLGE9RihkLmVuZCx4LFIse3RhcmdldDp0LnRhcmdldCxoYW5kbGU6cixsaXN0ZW5lcnM6aSxkb05vdFJlamVjdDohMCxoYW5kbGVOdW1iZXJzOmUuaGFuZGxlTnVtYmVyc30pLHM9RihcIm1vdXNlb3V0XCIseCxELHt0YXJnZXQ6dC50YXJnZXQsaGFuZGxlOnIsbGlzdGVuZXJzOmksZG9Ob3RSZWplY3Q6ITAsaGFuZGxlTnVtYmVyczplLmhhbmRsZU51bWJlcnN9KTtpLnB1c2guYXBwbHkoaSxvLmNvbmNhdChhLHMpKSx0LmN1cnNvciYmKEMuc3R5bGUuY3Vyc29yPWdldENvbXB1dGVkU3R5bGUodC50YXJnZXQpLmN1cnNvciwxPHUubGVuZ3RoJiZhdCh5LGYuY3NzQ2xhc3Nlcy5kcmFnKSxDLmFkZEV2ZW50TGlzdGVuZXIoXCJzZWxlY3RzdGFydFwiLHJ0LCExKSksZS5oYW5kbGVOdW1iZXJzLmZvckVhY2goZnVuY3Rpb24odCl7WShcInN0YXJ0XCIsdCl9KX1mdW5jdGlvbiBuKHQpe3Quc3RvcFByb3BhZ2F0aW9uKCk7dmFyIG4saSxvLGU9SCh0LmNhbGNQb2ludCkscj0obj1lLG89IShpPTEwMCksdS5mb3JFYWNoKGZ1bmN0aW9uKHQsZSl7aWYoIXQuaGFzQXR0cmlidXRlKFwiZGlzYWJsZWRcIikpe3ZhciByPU1hdGguYWJzKG1bZV0tbik7KHI8aXx8MTAwPT09ciYmMTAwPT09aSkmJihvPWUsaT1yKX19KSxvKTtpZighMT09PXIpcmV0dXJuITE7Zi5ldmVudHMuc25hcHx8bnQoeSxmLmNzc0NsYXNzZXMudGFwLGYuYW5pbWF0aW9uRHVyYXRpb24pLEsocixlLCEwLCEwKSxKKCksWShcInNsaWRlXCIsciwhMCksWShcInVwZGF0ZVwiLHIsITApLFkoXCJjaGFuZ2VcIixyLCEwKSxZKFwic2V0XCIsciwhMCksZi5ldmVudHMuc25hcCYmcSh0LHtoYW5kbGVOdW1iZXJzOltyXX0pfWZ1bmN0aW9uIEIodCl7dmFyIGU9SCh0LmNhbGNQb2ludCkscj1FLmdldFN0ZXAoZSksbj1FLmZyb21TdGVwcGluZyhyKTtPYmplY3Qua2V5cyhTKS5mb3JFYWNoKGZ1bmN0aW9uKHQpe1wiaG92ZXJcIj09PXQuc3BsaXQoXCIuXCIpWzBdJiZTW3RdLmZvckVhY2goZnVuY3Rpb24odCl7dC5jYWxsKGEsbil9KX0pfWZ1bmN0aW9uIFgodCxlKXtTW3RdPVNbdF18fFtdLFNbdF0ucHVzaChlKSxcInVwZGF0ZVwiPT09dC5zcGxpdChcIi5cIilbMF0mJnUuZm9yRWFjaChmdW5jdGlvbih0LGUpe1koXCJ1cGRhdGVcIixlKX0pfWZ1bmN0aW9uIFkocixuLGkpe09iamVjdC5rZXlzKFMpLmZvckVhY2goZnVuY3Rpb24odCl7dmFyIGU9dC5zcGxpdChcIi5cIilbMF07cj09PWUmJlNbdF0uZm9yRWFjaChmdW5jdGlvbih0KXt0LmNhbGwoYSxiLm1hcChmLmZvcm1hdC50byksbixiLnNsaWNlKCksaXx8ITEsbS5zbGljZSgpKX0pfSl9ZnVuY3Rpb24gXyh0KXtyZXR1cm4gdCtcIiVcIn1mdW5jdGlvbiBJKHQsZSxyLG4saSxvKXtyZXR1cm4gMTx1Lmxlbmd0aCYmIWYuZXZlbnRzLnVuY29uc3RyYWluZWQmJihuJiYwPGUmJihyPU1hdGgubWF4KHIsdFtlLTFdK2YubWFyZ2luKSksaSYmZTx1Lmxlbmd0aC0xJiYocj1NYXRoLm1pbihyLHRbZSsxXS1mLm1hcmdpbikpKSwxPHUubGVuZ3RoJiZmLmxpbWl0JiYobiYmMDxlJiYocj1NYXRoLm1pbihyLHRbZS0xXStmLmxpbWl0KSksaSYmZTx1Lmxlbmd0aC0xJiYocj1NYXRoLm1heChyLHRbZSsxXS1mLmxpbWl0KSkpLGYucGFkZGluZyYmKDA9PT1lJiYocj1NYXRoLm1heChyLGYucGFkZGluZ1swXSkpLGU9PT11Lmxlbmd0aC0xJiYocj1NYXRoLm1pbihyLDEwMC1mLnBhZGRpbmdbMV0pKSksISgocj1pdChyPUUuZ2V0U3RlcChyKSkpPT09dFtlXSYmIW8pJiZyfWZ1bmN0aW9uIFcodCxlKXt2YXIgcj1mLm9ydDtyZXR1cm4ocj9lOnQpK1wiLCBcIisocj90OmUpfWZ1bmN0aW9uICQodCxuLHIsZSl7dmFyIGk9ci5zbGljZSgpLG89WyF0LHRdLGE9W3QsIXRdO2U9ZS5zbGljZSgpLHQmJmUucmV2ZXJzZSgpLDE8ZS5sZW5ndGg/ZS5mb3JFYWNoKGZ1bmN0aW9uKHQsZSl7dmFyIHI9SShpLHQsaVt0XStuLG9bZV0sYVtlXSwhMSk7ITE9PT1yP249MDoobj1yLWlbdF0saVt0XT1yKX0pOm89YT1bITBdO3ZhciBzPSExO2UuZm9yRWFjaChmdW5jdGlvbih0LGUpe3M9Syh0LHJbdF0rbixvW2VdLGFbZV0pfHxzfSkscyYmZS5mb3JFYWNoKGZ1bmN0aW9uKHQpe1koXCJ1cGRhdGVcIix0KSxZKFwic2xpZGVcIix0KX0pfWZ1bmN0aW9uIEcodCxlKXtyZXR1cm4gZi5kaXI/MTAwLXQtZTp0fWZ1bmN0aW9uIEooKXtnLmZvckVhY2goZnVuY3Rpb24odCl7dmFyIGU9NTA8bVt0XT8tMToxLHI9MysodS5sZW5ndGgrZSp0KTt1W3RdLnN0eWxlLnpJbmRleD1yfSl9ZnVuY3Rpb24gSyh0LGUscixuKXtyZXR1cm4hMSE9PShlPUkobSx0LGUscixuLCExKSkmJihmdW5jdGlvbih0LGUpe21bdF09ZSxiW3RdPUUuZnJvbVN0ZXBwaW5nKGUpO3ZhciByPVwidHJhbnNsYXRlKFwiK1coXyhHKGUsMCktQSksXCIwXCIpK1wiKVwiO3VbdF0uc3R5bGVbZi50cmFuc2Zvcm1SdWxlXT1yLFEodCksUSh0KzEpfSh0LGUpLCEwKX1mdW5jdGlvbiBRKHQpe2lmKHNbdF0pe3ZhciBlPTAscj0xMDA7MCE9PXQmJihlPW1bdC0xXSksdCE9PXMubGVuZ3RoLTEmJihyPW1bdF0pO3ZhciBuPXItZSxpPVwidHJhbnNsYXRlKFwiK1coXyhHKGUsbikpLFwiMFwiKStcIilcIixvPVwic2NhbGUoXCIrVyhuLzEwMCxcIjFcIikrXCIpXCI7c1t0XS5zdHlsZVtmLnRyYW5zZm9ybVJ1bGVdPWkrXCIgXCIrb319ZnVuY3Rpb24gWih0LGUpe3ZhciBuPW90KHQpLHI9dm9pZCAwPT09bVswXTtlPXZvaWQgMD09PWV8fCEhZSxmLmFuaW1hdGUmJiFyJiZudCh5LGYuY3NzQ2xhc3Nlcy50YXAsZi5hbmltYXRpb25EdXJhdGlvbiksZy5mb3JFYWNoKGZ1bmN0aW9uKHQpe3ZhciBlLHI7Syh0LChlPW5bdF0scj10LG51bGw9PT1lfHwhMT09PWV8fHZvaWQgMD09PWU/bVtyXTooXCJudW1iZXJcIj09dHlwZW9mIGUmJihlPVN0cmluZyhlKSksZT1mLmZvcm1hdC5mcm9tKGUpLCExPT09KGU9RS50b1N0ZXBwaW5nKGUpKXx8aXNOYU4oZSk/bVtyXTplKSksITAsITEpfSksZy5mb3JFYWNoKGZ1bmN0aW9uKHQpe0sodCxtW3RdLCEwLCEwKX0pLEooKSxnLmZvckVhY2goZnVuY3Rpb24odCl7WShcInVwZGF0ZVwiLHQpLG51bGwhPT1uW3RdJiZlJiZZKFwic2V0XCIsdCl9KX1mdW5jdGlvbiB0dCgpe3ZhciB0PWIubWFwKGYuZm9ybWF0LnRvKTtyZXR1cm4gMT09PXQubGVuZ3RoP3RbMF06dH1yZXR1cm4gYXQoZT15LGYuY3NzQ2xhc3Nlcy50YXJnZXQpLDA9PT1mLmRpcj9hdChlLGYuY3NzQ2xhc3Nlcy5sdHIpOmF0KGUsZi5jc3NDbGFzc2VzLnJ0bCksMD09PWYub3J0P2F0KGUsZi5jc3NDbGFzc2VzLmhvcml6b250YWwpOmF0KGUsZi5jc3NDbGFzc2VzLnZlcnRpY2FsKSxsPU0oZSxmLmNzc0NsYXNzZXMuYmFzZSksZnVuY3Rpb24odCxlKXt2YXIgcixuLGksbz1NKGUsZi5jc3NDbGFzc2VzLmNvbm5lY3RzKTt1PVtdLChzPVtdKS5wdXNoKFYobyx0WzBdKSk7Zm9yKHZhciBhPTA7YTxmLmhhbmRsZXM7YSsrKXUucHVzaCgocj1hLGk9dm9pZCAwLG49TShlLGYuY3NzQ2xhc3Nlcy5vcmlnaW4pLChpPU0obixmLmNzc0NsYXNzZXMuaGFuZGxlKSkuc2V0QXR0cmlidXRlKFwiZGF0YS1oYW5kbGVcIixyKSxmLmtleWJvYXJkU3VwcG9ydCYmaS5zZXRBdHRyaWJ1dGUoXCJ0YWJpbmRleFwiLFwiMFwiKSxpLnNldEF0dHJpYnV0ZShcInJvbGVcIixcInNsaWRlclwiKSxpLnNldEF0dHJpYnV0ZShcImFyaWEtb3JpZW50YXRpb25cIixmLm9ydD9cInZlcnRpY2FsXCI6XCJob3Jpem9udGFsXCIpLDA9PT1yP2F0KGksZi5jc3NDbGFzc2VzLmhhbmRsZUxvd2VyKTpyPT09Zi5oYW5kbGVzLTEmJmF0KGksZi5jc3NDbGFzc2VzLmhhbmRsZVVwcGVyKSxuKSksZ1thXT1hLHMucHVzaChWKG8sdFthKzFdKSl9KGYuY29ubmVjdCxsKSwocD1mLmV2ZW50cykuZml4ZWR8fHUuZm9yRWFjaChmdW5jdGlvbih0LGUpe0YoZC5zdGFydCx0LmNoaWxkcmVuWzBdLHEse2hhbmRsZU51bWJlcnM6W2VdfSl9KSxwLnRhcCYmRihkLnN0YXJ0LGwsbix7fSkscC5ob3ZlciYmRihkLm1vdmUsbCxCLHtob3ZlcjohMH0pLHAuZHJhZyYmcy5mb3JFYWNoKGZ1bmN0aW9uKHQsZSl7aWYoITEhPT10JiYwIT09ZSYmZSE9PXMubGVuZ3RoLTEpe3ZhciByPXVbZS0xXSxuPXVbZV0saT1bdF07YXQodCxmLmNzc0NsYXNzZXMuZHJhZ2dhYmxlKSxwLmZpeGVkJiYoaS5wdXNoKHIuY2hpbGRyZW5bMF0pLGkucHVzaChuLmNoaWxkcmVuWzBdKSksaS5mb3JFYWNoKGZ1bmN0aW9uKHQpe0YoZC5zdGFydCx0LHEse2hhbmRsZXM6W3Isbl0saGFuZGxlTnVtYmVyczpbZS0xLGVdfSl9KX19KSxaKGYuc3RhcnQpLGE9e2Rlc3Ryb3k6ZnVuY3Rpb24oKXtmb3IodmFyIHQgaW4gZi5jc3NDbGFzc2VzKWYuY3NzQ2xhc3Nlcy5oYXNPd25Qcm9wZXJ0eSh0KSYmc3QoeSxmLmNzc0NsYXNzZXNbdF0pO2Zvcig7eS5maXJzdENoaWxkOyl5LnJlbW92ZUNoaWxkKHkuZmlyc3RDaGlsZCk7ZGVsZXRlIHkubm9VaVNsaWRlcn0sc3RlcHM6ZnVuY3Rpb24oKXtyZXR1cm4gbS5tYXAoZnVuY3Rpb24odCxlKXt2YXIgcj1FLmdldE5lYXJieVN0ZXBzKHQpLG49YltlXSxpPXIudGhpc1N0ZXAuc3RlcCxvPW51bGw7ITEhPT1pJiZuK2k+ci5zdGVwQWZ0ZXIuc3RhcnRWYWx1ZSYmKGk9ci5zdGVwQWZ0ZXIuc3RhcnRWYWx1ZS1uKSxvPW4+ci50aGlzU3RlcC5zdGFydFZhbHVlP3IudGhpc1N0ZXAuc3RlcDohMSE9PXIuc3RlcEJlZm9yZS5zdGVwJiZuLXIuc3RlcEJlZm9yZS5oaWdoZXN0U3RlcCwxMDA9PT10P2k9bnVsbDowPT09dCYmKG89bnVsbCk7dmFyIGE9RS5jb3VudFN0ZXBEZWNpbWFscygpO3JldHVybiBudWxsIT09aSYmITEhPT1pJiYoaT1OdW1iZXIoaS50b0ZpeGVkKGEpKSksbnVsbCE9PW8mJiExIT09byYmKG89TnVtYmVyKG8udG9GaXhlZChhKSkpLFtvLGldfSl9LG9uOlgsb2ZmOmZ1bmN0aW9uKHQpe3ZhciBuPXQmJnQuc3BsaXQoXCIuXCIpWzBdLGk9biYmdC5zdWJzdHJpbmcobi5sZW5ndGgpO09iamVjdC5rZXlzKFMpLmZvckVhY2goZnVuY3Rpb24odCl7dmFyIGU9dC5zcGxpdChcIi5cIilbMF0scj10LnN1YnN0cmluZyhlLmxlbmd0aCk7biYmbiE9PWV8fGkmJmkhPT1yfHxkZWxldGUgU1t0XX0pfSxnZXQ6dHQsc2V0Olosc2V0SGFuZGxlOmZ1bmN0aW9uKHQsZSxyKXt2YXIgbj1bXTtpZighKDA8PSh0PU51bWJlcih0KSkmJnQ8Zy5sZW5ndGgpKXRocm93IG5ldyBFcnJvcihcIm5vVWlTbGlkZXIgKFwiK2V0K1wiKTogaW52YWxpZCBoYW5kbGUgbnVtYmVyLCBnb3Q6IFwiK3QpO2Zvcih2YXIgaT0wO2k8Zy5sZW5ndGg7aSsrKW5baV09bnVsbDtuW3RdPWUsWihuLHIpfSxyZXNldDpmdW5jdGlvbih0KXtaKGYuc3RhcnQsdCl9LF9fbW92ZUhhbmRsZXM6ZnVuY3Rpb24odCxlLHIpeyQodCxlLG0scil9LG9wdGlvbnM6byx1cGRhdGVPcHRpb25zOmZ1bmN0aW9uKGUsdCl7dmFyIHI9dHQoKSxuPVtcIm1hcmdpblwiLFwibGltaXRcIixcInBhZGRpbmdcIixcInJhbmdlXCIsXCJhbmltYXRlXCIsXCJzbmFwXCIsXCJzdGVwXCIsXCJmb3JtYXRcIl07bi5mb3JFYWNoKGZ1bmN0aW9uKHQpe3ZvaWQgMCE9PWVbdF0mJihvW3RdPWVbdF0pfSk7dmFyIGk9dXQobyk7bi5mb3JFYWNoKGZ1bmN0aW9uKHQpe3ZvaWQgMCE9PWVbdF0mJihmW3RdPWlbdF0pfSksRT1pLnNwZWN0cnVtLGYubWFyZ2luPWkubWFyZ2luLGYubGltaXQ9aS5saW1pdCxmLnBhZGRpbmc9aS5wYWRkaW5nLGYucGlwcyYmeihmLnBpcHMpLG09W10sWihlLnN0YXJ0fHxyLHQpfSx0YXJnZXQ6eSxyZW1vdmVQaXBzOkwscGlwczp6fSxmLnBpcHMmJnooZi5waXBzKSxmLnRvb2x0aXBzJiYoaT11Lm1hcChyKSxYKFwidXBkYXRlXCIsZnVuY3Rpb24odCxlLHIpe2lmKGlbZV0pe3ZhciBuPXRbZV07ITAhPT1mLnRvb2x0aXBzW2VdJiYobj1mLnRvb2x0aXBzW2VdLnRvKHJbZV0pKSxpW2VdLmlubmVySFRNTD1ufX0pKSxYKFwidXBkYXRlXCIsZnVuY3Rpb24odCxlLGEscixzKXtnLmZvckVhY2goZnVuY3Rpb24odCl7dmFyIGU9dVt0XSxyPUkobSx0LDAsITAsITAsITApLG49SShtLHQsMTAwLCEwLCEwLCEwKSxpPXNbdF0sbz1mLmFyaWFGb3JtYXQudG8oYVt0XSk7cj1FLmZyb21TdGVwcGluZyhyKS50b0ZpeGVkKDEpLG49RS5mcm9tU3RlcHBpbmcobikudG9GaXhlZCgxKSxpPUUuZnJvbVN0ZXBwaW5nKGkpLnRvRml4ZWQoMSksZS5jaGlsZHJlblswXS5zZXRBdHRyaWJ1dGUoXCJhcmlhLXZhbHVlbWluXCIsciksZS5jaGlsZHJlblswXS5zZXRBdHRyaWJ1dGUoXCJhcmlhLXZhbHVlbWF4XCIsbiksZS5jaGlsZHJlblswXS5zZXRBdHRyaWJ1dGUoXCJhcmlhLXZhbHVlbm93XCIsaSksZS5jaGlsZHJlblswXS5zZXRBdHRyaWJ1dGUoXCJhcmlhLXZhbHVldGV4dFwiLG8pfSl9KSxhfXJldHVybntfX3NwZWN0cnVtOmwsdmVyc2lvbjpldCxjcmVhdGU6ZnVuY3Rpb24odCxlKXtpZighdHx8IXQubm9kZU5hbWUpdGhyb3cgbmV3IEVycm9yKFwibm9VaVNsaWRlciAoXCIrZXQrXCIpOiBjcmVhdGUgcmVxdWlyZXMgYSBzaW5nbGUgZWxlbWVudCwgZ290OiBcIit0KTtpZih0Lm5vVWlTbGlkZXIpdGhyb3cgbmV3IEVycm9yKFwibm9VaVNsaWRlciAoXCIrZXQrXCIpOiBTbGlkZXIgd2FzIGFscmVhZHkgaW5pdGlhbGl6ZWQuXCIpO3ZhciByPXoodCx1dChlKSxlKTtyZXR1cm4gdC5ub1VpU2xpZGVyPXJ9fX0pO1xyXG4vKiFcclxuKiBzbGljay5qc1xyXG4qIHYxLjAuMSAtIDIwMTMtMTItMjBcclxuKiBodHRwczovL2dpdGh1Yi5jb20vc2hhc2hhbmttZWh0YS9zbGljay5qc1xyXG4qIChjKSBTaGFzaGFuayBNZWh0YTsgTUlUIExpY2Vuc2VcclxuKi9cclxuIWZ1bmN0aW9uKGEpe1widXNlIHN0cmljdFwiO2EuZm4uZXhpc3RzPWZ1bmN0aW9uKCl7cmV0dXJuIDAhPT10aGlzLmxlbmd0aH07dmFyIGI9ZnVuY3Rpb24oYSxiKXt0aGlzLm9wdGlvbnM9e3NvdXJjZTp2b2lkIDAsc3RhcnQ6dm9pZCAwLGVuZDp2b2lkIDAsa2V5Q29udHJvbDohMCxjb250ZW50OnZvaWQgMCx0aGVtZTp7Y29udGFpbmVyOmEsY29udGVudDpcIi5zbGljay1jb250ZW50XCIsY3VycmVudE5vOlwiLmN1cnJlbnQtbm9cIix0b3RhbE5vOlwiLnRvdGFsXCIsbmV4dDpcIi5uZXh0XCIscHJldjpcIi5wcmV2XCJ9fTtmb3IodmFyIGMgaW4gdGhpcy5vcHRpb25zKXRoaXMub3B0aW9ucy5oYXNPd25Qcm9wZXJ0eShjKSYmXCJ0aGVtZVwiIT09YyYmKHRoaXMub3B0aW9uc1tjXT12b2lkIDAhPT1iW2NdP2JbY106dGhpcy5vcHRpb25zW2NdKTtpZih2b2lkIDAhPT1iLnRoZW1lKWZvcih2YXIgZCBpbiB0aGlzLm9wdGlvbnMudGhlbWUpdGhpcy5vcHRpb25zLnRoZW1lLmhhc093blByb3BlcnR5KGQpJiYodGhpcy5vcHRpb25zLnRoZW1lW2RdPXZvaWQgMCE9PWIudGhlbWVbZF0/Yi50aGVtZVtkXTp0aGlzLm9wdGlvbnMudGhlbWVbZF0pO3RoaXMub3B0aW9ucy5jb250ZW50PXRoaXMub3B0aW9ucy50aGVtZS5jb250YWluZXIrXCIgXCIrdGhpcy5vcHRpb25zLnRoZW1lLmNvbnRlbnQsdGhpcy5zdGF0ZT17Y3VycmVudDp0aGlzLm9wdGlvbnMuc3RhcnQtMSxzdGFydDp0aGlzLm9wdGlvbnMuc3RhcnQsZW5kOnRoaXMub3B0aW9ucy5lbmQsc2xpZGU6e2N1cnJlbnQ6MCxkaWZmZXJlbmNlOnRoaXMub3B0aW9ucy5zdGFydC0xLHRvdGFsOnRoaXMub3B0aW9ucy5lbmQtdGhpcy5vcHRpb25zLnN0YXJ0KzEsbWF4SGl0OjB9fSx0aGlzLmluaXQuYXBwbHkodGhpcyl9LGM9Yi5wcm90b3R5cGU7Yy5ob29rcz17bmV4dDpmdW5jdGlvbigpe3ZhciBhPXRoaXM7aWYoYS5zdGF0ZS5zbGlkZS5jdXJyZW50PGEuc3RhdGUuc2xpZGUudG90YWwpe3ZhciBiPSsrYS5zdGF0ZS5zbGlkZS5jdXJyZW50K2Euc3RhdGUuc2xpZGUuZGlmZmVyZW5jZTthLmhvb2tzLnNldFNsaWRlLmFwcGx5KHRoaXMsW2JdKX19LHByZXY6ZnVuY3Rpb24oKXt2YXIgYT10aGlzO2lmKGEuc3RhdGUuc2xpZGUuY3VycmVudD4xKXt2YXIgYj0tLWEuc3RhdGUuc2xpZGUuY3VycmVudCthLnN0YXRlLnNsaWRlLmRpZmZlcmVuY2U7YS5ob29rcy5zZXRTbGlkZS5hcHBseSh0aGlzLFtiXSl9fSxzZXRTbGlkZTpmdW5jdGlvbihiKXt2YXIgYz10aGlzLGQ9Yy5ob29rcy5zbGlkZVN0YXR1cy5hcHBseShjLFtiXSk7cmV0dXJuIGMuc3RhdGUuc2xpZGUuY3VycmVudD1iLWMuc3RhdGUuc2xpZGUuZGlmZmVyZW5jZSwxPT09Yy5zdGF0ZS5zbGlkZS5jdXJyZW50JiZhKGMub3B0aW9ucy50aGVtZS5jb250YWluZXIpLmFuaW1hdGUoe29wYWNpdHk6XCIxXCJ9LDUwMCksYShjLm9wdGlvbnMudGhlbWUuY29udGFpbmVyK1wiIC5za2lwXCIrYy5vcHRpb25zLnRoZW1lLmN1cnJlbnRObykuaXMoXCI6aW5wdXRcIik/YShjLm9wdGlvbnMudGhlbWUuY29udGFpbmVyK1wiIFwiK2Mub3B0aW9ucy50aGVtZS5jdXJyZW50Tm8pLnZhbChjLnN0YXRlLnNsaWRlLmN1cnJlbnQpOihhKGMub3B0aW9ucy50aGVtZS5jb250YWluZXIrXCIgLnNraXBcIikudmFsKGMuc3RhdGUuc2xpZGUuY3VycmVudCksYShjLm9wdGlvbnMudGhlbWUuY29udGFpbmVyK1wiIFwiK2Mub3B0aW9ucy50aGVtZS5jdXJyZW50Tm8pLmh0bWwoYy5zdGF0ZS5zbGlkZS5jdXJyZW50KSksMT09PWQ/KGEoYy5vcHRpb25zLmNvbnRlbnQrXCIgaW1nLmN1cnJlbnRcIikucmVtb3ZlQ2xhc3MoXCJjdXJyZW50XCIpLmFkZENsYXNzKFwiY2FjaGVkLXNsaWRlXCIpLmhpZGUoKSxhKGMub3B0aW9ucy5jb250ZW50K1wiIGltZ1tkYXRhLXNsaWRlPVwiK2IrXCJdXCIpLnJlbW92ZUNsYXNzKFwiY2FjaGVkLXNsaWRlXCIpLmFkZENsYXNzKFwiY3VycmVudFwiKS5zaG93KCksYy5zdGF0ZS5jdXJyZW50PWIsYShjLm9wdGlvbnMudGhlbWUuY29udGFpbmVyK1wiIC5sZW5ndGhcIikud2lkdGgoMTAwKmMuc3RhdGUuc2xpZGUuY3VycmVudC9jLnN0YXRlLnNsaWRlLnRvdGFsK1wiJVwiKSxjLmhvb2tzLmdldFNsaWRlLmFwcGx5KGMsW2IrMV0pLHZvaWQgMCk6KDI9PT1kP2MuaG9va3Muc2xpZGVTd2l0Y2guYXBwbHkodGhpcyxbYl0pOjA9PT1kJiYoYShjLm9wdGlvbnMuY29udGVudCtcIiBpbWcubG9hZGluZ1wiKS5vZmYoXCJsb2FkLnNsaWRlU3dpdGNoXCIpLnJlbW92ZSgpLGMuaG9va3MuZ2V0U2xpZGUuYXBwbHkoYyxbYl0pLGMuaG9va3Muc2xpZGVTd2l0Y2guYXBwbHkodGhpcyxbYl0pKSx2b2lkIDApfSxnZXRTbGlkZTpmdW5jdGlvbihiKXt2YXIgYz10aGlzOzA9PT1jLmhvb2tzLnNsaWRlU3RhdHVzLmFwcGx5KHRoaXMsW2JdKSYmYjw9Yy5zdGF0ZS5lbmQmJihhKGMub3B0aW9ucy5jb250ZW50KS5hcHBlbmQoJzxpbWcgc3JjPVwiJytjLmhvb2tzLmltYWdlUGF0aC5hcHBseShjLFtiXSkrJ1wiIGRhdGEtc2xpZGU9JytiKycgY2xhc3M9XCJsb2FkaW5nXCI+JyksYShjLm9wdGlvbnMuY29udGVudCtcIiBpbWcubG9hZGluZ1wiKS5oaWRlKCksYShjLm9wdGlvbnMuY29udGVudCtcIiBpbWcubG9hZGluZ1wiKS5sb2FkKGZ1bmN0aW9uKCl7YSh0aGlzKS5yZW1vdmVDbGFzcyhcImxvYWRpbmdcIikuYWRkQ2xhc3MoXCJjYWNoZWQtc2xpZGVcIil9KSl9LHNsaWRlU3dpdGNoOmZ1bmN0aW9uKGIpe3ZhciBjPXRoaXM7YShjLm9wdGlvbnMuY29udGVudCtcIiBpbWdbZGF0YS1zbGlkZT1cIitiK1wiXVwiKS5vbihcImxvYWQuc2xpZGVTd2l0Y2hcIixmdW5jdGlvbigpe2EoYy5vcHRpb25zLmNvbnRlbnQrXCIgaW1nLmN1cnJlbnRcIikucmVtb3ZlQ2xhc3MoXCJjdXJyZW50XCIpLmFkZENsYXNzKFwiY2FjaGVkLXNsaWRlXCIpLmhpZGUoKSxhKHRoaXMpLnJlbW92ZUNsYXNzKFwiY2FjaGVkLXNsaWRlXCIpLmFkZENsYXNzKFwiY3VycmVudFwiKS5zaG93KCksYy5zdGF0ZS5jdXJyZW50PWIsYShjLm9wdGlvbnMudGhlbWUuY29udGFpbmVyK1wiIC5sZW5ndGhcIikud2lkdGgoMTAwKihiKzEpL2Muc3RhdGUuc2xpZGUudG90YWwrXCIlXCIpLGMuaG9va3MuZ2V0U2xpZGUuYXBwbHkoYyxbYisxXSl9KX0sc2xpZGVTdGF0dXM6ZnVuY3Rpb24oYil7dmFyIGM9dGhpcyxkPWMub3B0aW9ucy5jb250ZW50K1wiIGltZ1tkYXRhLXNsaWRlPVwiK2IrXCJdXCI7cmV0dXJuIGEoZCkuZXhpc3RzKCk/YShkKS5oYXNDbGFzcyhcImxvYWRpbmdcIik/MjoxOjB9LGltYWdlUGF0aDpmdW5jdGlvbihhKXt2YXIgYj10aGlzLm9wdGlvbnMuc291cmNlLnNwbGl0KFwiKlwiKTtyZXR1cm4gYlswXSthK2JbMV19LHNraXA6ZnVuY3Rpb24oYil7aWYoYS5pc051bWVyaWMoYikpe3ZhciBjPXRoaXMsZD1wYXJzZUludChiKStjLnN0YXRlLnNsaWRlLmRpZmZlcmVuY2U7Yy5ob29rcy5nZXRTbGlkZS5hcHBseShjLFtkXSksYy5ob29rcy5zZXRTbGlkZS5hcHBseShjLFtkXSl9fX0sYy5pbml0PWZ1bmN0aW9uKCl7dmFyIGI9dGhpczthKGIub3B0aW9ucy50aGVtZS5jb250YWluZXIpLmNzcyhcIm9wYWNpdHlcIixcIjBcIiksXCJzdHJpbmdcIj09dHlwZW9mIGIub3B0aW9ucy5zb3VyY2UmJmIuaG9va3MubmV4dC5hcHBseShiKSxhKGIub3B0aW9ucy50aGVtZS5jb250YWluZXIrXCIgXCIrYi5vcHRpb25zLnRoZW1lLm5leHQpLmNsaWNrKGZ1bmN0aW9uKGEpe2EucHJldmVudERlZmF1bHQoKSxiLmhvb2tzLm5leHQuYXBwbHkoYil9KSxhKGIub3B0aW9ucy50aGVtZS5jb250YWluZXIrXCIgXCIrYi5vcHRpb25zLnRoZW1lLnByZXYpLmNsaWNrKGZ1bmN0aW9uKGEpe2EucHJldmVudERlZmF1bHQoKSxiLmhvb2tzLnByZXYuYXBwbHkoYil9KSxhKGIub3B0aW9ucy50aGVtZS5jb250YWluZXIrXCIgXCIrYi5vcHRpb25zLnRoZW1lLnRvdGFsTm8pLmh0bWwoYi5zdGF0ZS5lbmQtYi5zdGF0ZS5zdGFydCsxKSxiLm9wdGlvbnMua2V5Q29udHJvbCYmYShkb2N1bWVudCkua2V5dXAoZnVuY3Rpb24oYyl7MzkhPT1jLmtleUNvZGV8fGEoXCJpbnB1dDpmb2N1c1wiKS5leGlzdHMoKXx8Yi5ob29rcy5uZXh0LmFwcGx5KGIpLDM3IT09Yy5rZXlDb2RlfHxhKFwiaW5wdXQ6Zm9jdXNcIikuZXhpc3RzKCl8fGIuaG9va3MucHJldi5hcHBseShiKX0pLGEoYi5vcHRpb25zLnRoZW1lLmNvbnRhaW5lcitcIiAuc2tpcFwiKS5rZXlwcmVzcyhmdW5jdGlvbihjKXsxMz09PWMua2V5Q29kZSYmKGIuaG9va3Muc2tpcC5hcHBseShiLFthKHRoaXMpLnZhbCgpXSksYSh0aGlzKS5ibHVyKCkpfSl9LHdpbmRvdy5TbGljaz1iLGIubmV4dD1mdW5jdGlvbihhKXthLmNvbnN0cnVjdG9yPT09YiYmYS5ob29rcy5uZXh0LmFwcGx5KGEpfSxiLnByZXY9ZnVuY3Rpb24oYSl7YS5jb25zdHJ1Y3Rvcj09PWImJmEuaG9va3MucHJldi5hcHBseShhKX0sYi5za2lwPWZ1bmN0aW9uKGEsYyl7YS5jb25zdHJ1Y3Rvcj09PWImJmEuaG9va3Muc2tpcC5hcHBseShhLFtjXSl9fShqUXVlcnksd2luZG93KTtcclxuLyogIGpRdWVyeSBOaWNlIFNlbGVjdCAtIHYxLjBcclxuICAgIGh0dHBzOi8vZ2l0aHViLmNvbS9oZXJuYW5zYXJ0b3Jpby9qcXVlcnktbmljZS1zZWxlY3RcclxuICAgIE1hZGUgYnkgSGVybsOhbiBTYXJ0b3JpbyAgKi9cclxuIWZ1bmN0aW9uKGUpe2UuZm4ubmljZVNlbGVjdD1mdW5jdGlvbih0KXtmdW5jdGlvbiBzKHQpe3QuYWZ0ZXIoZShcIjxkaXY+PC9kaXY+XCIpLmFkZENsYXNzKFwibmljZS1zZWxlY3RcIikuYWRkQ2xhc3ModC5hdHRyKFwiY2xhc3NcIil8fFwiXCIpLmFkZENsYXNzKHQuYXR0cihcImRpc2FibGVkXCIpP1wiZGlzYWJsZWRcIjpcIlwiKS5hdHRyKFwidGFiaW5kZXhcIix0LmF0dHIoXCJkaXNhYmxlZFwiKT9udWxsOlwiMFwiKS5odG1sKCc8c3BhbiBjbGFzcz1cImN1cnJlbnRcIj48L3NwYW4+PHVsIGNsYXNzPVwibGlzdFwiPjwvdWw+JykpO3ZhciBzPXQubmV4dCgpLG49dC5maW5kKFwib3B0aW9uXCIpLGk9dC5maW5kKFwib3B0aW9uOnNlbGVjdGVkXCIpO3MuZmluZChcIi5jdXJyZW50XCIpLmh0bWwoaS5kYXRhKFwiZGlzcGxheVwiKXx8aS50ZXh0KCkpLG4uZWFjaChmdW5jdGlvbih0KXt2YXIgbj1lKHRoaXMpLGk9bi5kYXRhKFwiZGlzcGxheVwiKTtzLmZpbmQoXCJ1bFwiKS5hcHBlbmQoZShcIjxsaT48L2xpPlwiKS5hdHRyKFwiZGF0YS12YWx1ZVwiLG4udmFsKCkpLmF0dHIoXCJkYXRhLWRpc3BsYXlcIixpfHxudWxsKS5hZGRDbGFzcyhcIm9wdGlvblwiKyhuLmlzKFwiOnNlbGVjdGVkXCIpP1wiIHNlbGVjdGVkXCI6XCJcIikrKG4uaXMoXCI6ZGlzYWJsZWRcIik/XCIgZGlzYWJsZWRcIjpcIlwiKSkuaHRtbChuLnRleHQoKSkpfSl9aWYoXCJzdHJpbmdcIj09dHlwZW9mIHQpcmV0dXJuXCJ1cGRhdGVcIj09dD90aGlzLmVhY2goZnVuY3Rpb24oKXt2YXIgdD1lKHRoaXMpLG49ZSh0aGlzKS5uZXh0KFwiLm5pY2Utc2VsZWN0XCIpLGk9bi5oYXNDbGFzcyhcIm9wZW5cIik7bi5sZW5ndGgmJihuLnJlbW92ZSgpLHModCksaSYmdC5uZXh0KCkudHJpZ2dlcihcImNsaWNrXCIpKX0pOlwiZGVzdHJveVwiPT10Pyh0aGlzLmVhY2goZnVuY3Rpb24oKXt2YXIgdD1lKHRoaXMpLHM9ZSh0aGlzKS5uZXh0KFwiLm5pY2Utc2VsZWN0XCIpO3MubGVuZ3RoJiYocy5yZW1vdmUoKSx0LmNzcyhcImRpc3BsYXlcIixcIlwiKSl9KSwwPT1lKFwiLm5pY2Utc2VsZWN0XCIpLmxlbmd0aCYmZShkb2N1bWVudCkub2ZmKFwiLm5pY2Vfc2VsZWN0XCIpKTpjb25zb2xlLmxvZygnTWV0aG9kIFwiJyt0KydcIiBkb2VzIG5vdCBleGlzdC4nKSx0aGlzO3RoaXMuaGlkZSgpLHRoaXMuZWFjaChmdW5jdGlvbigpe3ZhciB0PWUodGhpcyk7dC5uZXh0KCkuaGFzQ2xhc3MoXCJuaWNlLXNlbGVjdFwiKXx8cyh0KX0pLGUoZG9jdW1lbnQpLm9mZihcIi5uaWNlX3NlbGVjdFwiKSxlKGRvY3VtZW50KS5vbihcImNsaWNrLm5pY2Vfc2VsZWN0XCIsXCIubmljZS1zZWxlY3RcIixmdW5jdGlvbih0KXt2YXIgcz1lKHRoaXMpO2UoXCIubmljZS1zZWxlY3RcIikubm90KHMpLnJlbW92ZUNsYXNzKFwib3BlblwiKSxzLnRvZ2dsZUNsYXNzKFwib3BlblwiKSxzLmhhc0NsYXNzKFwib3BlblwiKT8ocy5maW5kKFwiLm9wdGlvblwiKSxzLmZpbmQoXCIuZm9jdXNcIikucmVtb3ZlQ2xhc3MoXCJmb2N1c1wiKSxzLmZpbmQoXCIuc2VsZWN0ZWRcIikuYWRkQ2xhc3MoXCJmb2N1c1wiKSk6cy5mb2N1cygpfSksZShkb2N1bWVudCkub24oXCJjbGljay5uaWNlX3NlbGVjdFwiLGZ1bmN0aW9uKHQpezA9PT1lKHQudGFyZ2V0KS5jbG9zZXN0KFwiLm5pY2Utc2VsZWN0XCIpLmxlbmd0aCYmZShcIi5uaWNlLXNlbGVjdFwiKS5yZW1vdmVDbGFzcyhcIm9wZW5cIikuZmluZChcIi5vcHRpb25cIil9KSxlKGRvY3VtZW50KS5vbihcImNsaWNrLm5pY2Vfc2VsZWN0XCIsXCIubmljZS1zZWxlY3QgLm9wdGlvbjpub3QoLmRpc2FibGVkKVwiLGZ1bmN0aW9uKHQpe3ZhciBzPWUodGhpcyksbj1zLmNsb3Nlc3QoXCIubmljZS1zZWxlY3RcIik7bi5maW5kKFwiLnNlbGVjdGVkXCIpLnJlbW92ZUNsYXNzKFwic2VsZWN0ZWRcIikscy5hZGRDbGFzcyhcInNlbGVjdGVkXCIpO3ZhciBpPXMuZGF0YShcImRpc3BsYXlcIil8fHMudGV4dCgpO24uZmluZChcIi5jdXJyZW50XCIpLnRleHQoaSksbi5wcmV2KFwic2VsZWN0XCIpLnZhbChzLmRhdGEoXCJ2YWx1ZVwiKSkudHJpZ2dlcihcImNoYW5nZVwiKX0pLGUoZG9jdW1lbnQpLm9uKFwia2V5ZG93bi5uaWNlX3NlbGVjdFwiLFwiLm5pY2Utc2VsZWN0XCIsZnVuY3Rpb24odCl7dmFyIHM9ZSh0aGlzKSxuPWUocy5maW5kKFwiLmZvY3VzXCIpfHxzLmZpbmQoXCIubGlzdCAub3B0aW9uLnNlbGVjdGVkXCIpKTtpZigzMj09dC5rZXlDb2RlfHwxMz09dC5rZXlDb2RlKXJldHVybiBzLmhhc0NsYXNzKFwib3BlblwiKT9uLnRyaWdnZXIoXCJjbGlja1wiKTpzLnRyaWdnZXIoXCJjbGlja1wiKSwhMTtpZig0MD09dC5rZXlDb2RlKXtpZihzLmhhc0NsYXNzKFwib3BlblwiKSl7dmFyIGk9bi5uZXh0QWxsKFwiLm9wdGlvbjpub3QoLmRpc2FibGVkKVwiKS5maXJzdCgpO2kubGVuZ3RoPjAmJihzLmZpbmQoXCIuZm9jdXNcIikucmVtb3ZlQ2xhc3MoXCJmb2N1c1wiKSxpLmFkZENsYXNzKFwiZm9jdXNcIikpfWVsc2Ugcy50cmlnZ2VyKFwiY2xpY2tcIik7cmV0dXJuITF9aWYoMzg9PXQua2V5Q29kZSl7aWYocy5oYXNDbGFzcyhcIm9wZW5cIikpe3ZhciBsPW4ucHJldkFsbChcIi5vcHRpb246bm90KC5kaXNhYmxlZClcIikuZmlyc3QoKTtsLmxlbmd0aD4wJiYocy5maW5kKFwiLmZvY3VzXCIpLnJlbW92ZUNsYXNzKFwiZm9jdXNcIiksbC5hZGRDbGFzcyhcImZvY3VzXCIpKX1lbHNlIHMudHJpZ2dlcihcImNsaWNrXCIpO3JldHVybiExfWlmKDI3PT10LmtleUNvZGUpcy5oYXNDbGFzcyhcIm9wZW5cIikmJnMudHJpZ2dlcihcImNsaWNrXCIpO2Vsc2UgaWYoOT09dC5rZXlDb2RlJiZzLmhhc0NsYXNzKFwib3BlblwiKSlyZXR1cm4hMX0pO3ZhciBuPWRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJhXCIpLnN0eWxlO3JldHVybiBuLmNzc1RleHQ9XCJwb2ludGVyLWV2ZW50czphdXRvXCIsXCJhdXRvXCIhPT1uLnBvaW50ZXJFdmVudHMmJmUoXCJodG1sXCIpLmFkZENsYXNzKFwibm8tY3NzcG9pbnRlcmV2ZW50c1wiKSx0aGlzfX0oalF1ZXJ5KTtcclxuXHJcblxyXG5cclxuXHJcbiQoZnVuY3Rpb24oKSB7XHJcblxyXG5cdGlmICgkKHdpbmRvdykud2lkdGgoKSA8IDEyODApIHtcclxuICAgXHRcdCQoJy5tX2hlYWRlcl90b3BfZ3InKS5hcHBlbmRUbygnLmdyQWRyZXNfbW9iJyk7XHJcblx0XHQkKCcubV9oZWFkZXJfdG9wX2FkcmVzcycpLmFwcGVuZFRvKCcuZ3JBZHJlc19tb2InKTtcclxuXHRcdCQoJy5tX2hlYWRlcl9jZW50ZXJfbG9nbycpLmFwcGVuZFRvKCcubW9iX2xvZ190ZXh0Jyk7XHJcblx0XHQkKCcubV9oZWFkZXJfY2VudGVyX2xvZ290ZXh0JykuYXBwZW5kVG8oJy5tb2JfbG9nX3RleHQnKTtcclxuXHRcdCQoJy5tX2hlYWRlcl9jZW50ZXJfdGVsJykuYXBwZW5kVG8oJy5tb2JfdGVsX3NlYXJjaCcpO1xyXG5cdFx0JCgnLm1faGVhZGVyX2NlbnRlcl9zZWFyY2gnKS5hcHBlbmRUbygnLm1vYl90ZWxfc2VhcmNoJyk7XHJcblx0fVxyXG59KTtcclxuLypcclxuICAgICBfIF8gICAgICBfICAgICAgIF9cclxuIF9fX3wgKF8pIF9fX3wgfCBfXyAgKF8pX19fXHJcbi8gX198IHwgfC8gX198IHwvIC8gIHwgLyBfX3xcclxuXFxfXyBcXCB8IHwgKF9ffCAgIDwgXyB8IFxcX18gXFxcclxufF9fXy9ffF98XFxfX198X3xcXF8oXykvIHxfX18vXHJcbiAgICAgICAgICAgICAgICAgICB8X18vXHJcblxyXG4gVmVyc2lvbjogMS45LjBcclxuICBBdXRob3I6IEtlbiBXaGVlbGVyXHJcbiBXZWJzaXRlOiBodHRwOi8va2Vud2hlZWxlci5naXRodWIuaW9cclxuICAgIERvY3M6IGh0dHA6Ly9rZW53aGVlbGVyLmdpdGh1Yi5pby9zbGlja1xyXG4gICAgUmVwbzogaHR0cDovL2dpdGh1Yi5jb20va2Vud2hlZWxlci9zbGlja1xyXG4gIElzc3VlczogaHR0cDovL2dpdGh1Yi5jb20va2Vud2hlZWxlci9zbGljay9pc3N1ZXNcclxuXHJcbiAqL1xyXG4oZnVuY3Rpb24oaSl7XCJ1c2Ugc3RyaWN0XCI7XCJmdW5jdGlvblwiPT10eXBlb2YgZGVmaW5lJiZkZWZpbmUuYW1kP2RlZmluZShbXCJqcXVlcnlcIl0saSk6XCJ1bmRlZmluZWRcIiE9dHlwZW9mIGV4cG9ydHM/bW9kdWxlLmV4cG9ydHM9aShyZXF1aXJlKFwianF1ZXJ5XCIpKTppKGpRdWVyeSl9KShmdW5jdGlvbihpKXtcInVzZSBzdHJpY3RcIjt2YXIgZT13aW5kb3cuU2xpY2t8fHt9O2U9ZnVuY3Rpb24oKXtmdW5jdGlvbiBlKGUsbyl7dmFyIHMsbj10aGlzO24uZGVmYXVsdHM9e2FjY2Vzc2liaWxpdHk6ITAsYWRhcHRpdmVIZWlnaHQ6ITEsYXBwZW5kQXJyb3dzOmkoZSksYXBwZW5kRG90czppKGUpLGFycm93czohMCxhc05hdkZvcjpudWxsLHByZXZBcnJvdzonPGJ1dHRvbiBjbGFzcz1cInNsaWNrLXByZXZcIiBhcmlhLWxhYmVsPVwiUHJldmlvdXNcIiB0eXBlPVwiYnV0dG9uXCI+UHJldmlvdXM8L2J1dHRvbj4nLG5leHRBcnJvdzonPGJ1dHRvbiBjbGFzcz1cInNsaWNrLW5leHRcIiBhcmlhLWxhYmVsPVwiTmV4dFwiIHR5cGU9XCJidXR0b25cIj5OZXh0PC9idXR0b24+JyxhdXRvcGxheTohMSxhdXRvcGxheVNwZWVkOjNlMyxjZW50ZXJNb2RlOiExLGNlbnRlclBhZGRpbmc6XCI1MHB4XCIsY3NzRWFzZTpcImVhc2VcIixjdXN0b21QYWdpbmc6ZnVuY3Rpb24oZSx0KXtyZXR1cm4gaSgnPGJ1dHRvbiB0eXBlPVwiYnV0dG9uXCIgLz4nKS50ZXh0KHQrMSl9LGRvdHM6ITEsZG90c0NsYXNzOlwic2xpY2stZG90c1wiLGRyYWdnYWJsZTohMCxlYXNpbmc6XCJsaW5lYXJcIixlZGdlRnJpY3Rpb246LjM1LGZhZGU6ITEsZm9jdXNPblNlbGVjdDohMSxmb2N1c09uQ2hhbmdlOiExLGluZmluaXRlOiEwLGluaXRpYWxTbGlkZTowLGxhenlMb2FkOlwib25kZW1hbmRcIixtb2JpbGVGaXJzdDohMSxwYXVzZU9uSG92ZXI6ITAscGF1c2VPbkZvY3VzOiEwLHBhdXNlT25Eb3RzSG92ZXI6ITEscmVzcG9uZFRvOlwid2luZG93XCIscmVzcG9uc2l2ZTpudWxsLHJvd3M6MSxydGw6ITEsc2xpZGU6XCJcIixzbGlkZXNQZXJSb3c6MSxzbGlkZXNUb1Nob3c6MSxzbGlkZXNUb1Njcm9sbDoxLHNwZWVkOjUwMCxzd2lwZTohMCxzd2lwZVRvU2xpZGU6ITEsdG91Y2hNb3ZlOiEwLHRvdWNoVGhyZXNob2xkOjUsdXNlQ1NTOiEwLHVzZVRyYW5zZm9ybTohMCx2YXJpYWJsZVdpZHRoOiExLHZlcnRpY2FsOiExLHZlcnRpY2FsU3dpcGluZzohMSx3YWl0Rm9yQW5pbWF0ZTohMCx6SW5kZXg6MWUzfSxuLmluaXRpYWxzPXthbmltYXRpbmc6ITEsZHJhZ2dpbmc6ITEsYXV0b1BsYXlUaW1lcjpudWxsLGN1cnJlbnREaXJlY3Rpb246MCxjdXJyZW50TGVmdDpudWxsLGN1cnJlbnRTbGlkZTowLGRpcmVjdGlvbjoxLCRkb3RzOm51bGwsbGlzdFdpZHRoOm51bGwsbGlzdEhlaWdodDpudWxsLGxvYWRJbmRleDowLCRuZXh0QXJyb3c6bnVsbCwkcHJldkFycm93Om51bGwsc2Nyb2xsaW5nOiExLHNsaWRlQ291bnQ6bnVsbCxzbGlkZVdpZHRoOm51bGwsJHNsaWRlVHJhY2s6bnVsbCwkc2xpZGVzOm51bGwsc2xpZGluZzohMSxzbGlkZU9mZnNldDowLHN3aXBlTGVmdDpudWxsLHN3aXBpbmc6ITEsJGxpc3Q6bnVsbCx0b3VjaE9iamVjdDp7fSx0cmFuc2Zvcm1zRW5hYmxlZDohMSx1bnNsaWNrZWQ6ITF9LGkuZXh0ZW5kKG4sbi5pbml0aWFscyksbi5hY3RpdmVCcmVha3BvaW50PW51bGwsbi5hbmltVHlwZT1udWxsLG4uYW5pbVByb3A9bnVsbCxuLmJyZWFrcG9pbnRzPVtdLG4uYnJlYWtwb2ludFNldHRpbmdzPVtdLG4uY3NzVHJhbnNpdGlvbnM9ITEsbi5mb2N1c3NlZD0hMSxuLmludGVycnVwdGVkPSExLG4uaGlkZGVuPVwiaGlkZGVuXCIsbi5wYXVzZWQ9ITAsbi5wb3NpdGlvblByb3A9bnVsbCxuLnJlc3BvbmRUbz1udWxsLG4ucm93Q291bnQ9MSxuLnNob3VsZENsaWNrPSEwLG4uJHNsaWRlcj1pKGUpLG4uJHNsaWRlc0NhY2hlPW51bGwsbi50cmFuc2Zvcm1UeXBlPW51bGwsbi50cmFuc2l0aW9uVHlwZT1udWxsLG4udmlzaWJpbGl0eUNoYW5nZT1cInZpc2liaWxpdHljaGFuZ2VcIixuLndpbmRvd1dpZHRoPTAsbi53aW5kb3dUaW1lcj1udWxsLHM9aShlKS5kYXRhKFwic2xpY2tcIil8fHt9LG4ub3B0aW9ucz1pLmV4dGVuZCh7fSxuLmRlZmF1bHRzLG8scyksbi5jdXJyZW50U2xpZGU9bi5vcHRpb25zLmluaXRpYWxTbGlkZSxuLm9yaWdpbmFsU2V0dGluZ3M9bi5vcHRpb25zLFwidW5kZWZpbmVkXCIhPXR5cGVvZiBkb2N1bWVudC5tb3pIaWRkZW4/KG4uaGlkZGVuPVwibW96SGlkZGVuXCIsbi52aXNpYmlsaXR5Q2hhbmdlPVwibW96dmlzaWJpbGl0eWNoYW5nZVwiKTpcInVuZGVmaW5lZFwiIT10eXBlb2YgZG9jdW1lbnQud2Via2l0SGlkZGVuJiYobi5oaWRkZW49XCJ3ZWJraXRIaWRkZW5cIixuLnZpc2liaWxpdHlDaGFuZ2U9XCJ3ZWJraXR2aXNpYmlsaXR5Y2hhbmdlXCIpLG4uYXV0b1BsYXk9aS5wcm94eShuLmF1dG9QbGF5LG4pLG4uYXV0b1BsYXlDbGVhcj1pLnByb3h5KG4uYXV0b1BsYXlDbGVhcixuKSxuLmF1dG9QbGF5SXRlcmF0b3I9aS5wcm94eShuLmF1dG9QbGF5SXRlcmF0b3Isbiksbi5jaGFuZ2VTbGlkZT1pLnByb3h5KG4uY2hhbmdlU2xpZGUsbiksbi5jbGlja0hhbmRsZXI9aS5wcm94eShuLmNsaWNrSGFuZGxlcixuKSxuLnNlbGVjdEhhbmRsZXI9aS5wcm94eShuLnNlbGVjdEhhbmRsZXIsbiksbi5zZXRQb3NpdGlvbj1pLnByb3h5KG4uc2V0UG9zaXRpb24sbiksbi5zd2lwZUhhbmRsZXI9aS5wcm94eShuLnN3aXBlSGFuZGxlcixuKSxuLmRyYWdIYW5kbGVyPWkucHJveHkobi5kcmFnSGFuZGxlcixuKSxuLmtleUhhbmRsZXI9aS5wcm94eShuLmtleUhhbmRsZXIsbiksbi5pbnN0YW5jZVVpZD10Kyssbi5odG1sRXhwcj0vXig/OlxccyooPFtcXHdcXFddKz4pW14+XSopJC8sbi5yZWdpc3RlckJyZWFrcG9pbnRzKCksbi5pbml0KCEwKX12YXIgdD0wO3JldHVybiBlfSgpLGUucHJvdG90eXBlLmFjdGl2YXRlQURBPWZ1bmN0aW9uKCl7dmFyIGk9dGhpcztpLiRzbGlkZVRyYWNrLmZpbmQoXCIuc2xpY2stYWN0aXZlXCIpLmF0dHIoe1wiYXJpYS1oaWRkZW5cIjpcImZhbHNlXCJ9KS5maW5kKFwiYSwgaW5wdXQsIGJ1dHRvbiwgc2VsZWN0XCIpLmF0dHIoe3RhYmluZGV4OlwiMFwifSl9LGUucHJvdG90eXBlLmFkZFNsaWRlPWUucHJvdG90eXBlLnNsaWNrQWRkPWZ1bmN0aW9uKGUsdCxvKXt2YXIgcz10aGlzO2lmKFwiYm9vbGVhblwiPT10eXBlb2YgdClvPXQsdD1udWxsO2Vsc2UgaWYodDwwfHx0Pj1zLnNsaWRlQ291bnQpcmV0dXJuITE7cy51bmxvYWQoKSxcIm51bWJlclwiPT10eXBlb2YgdD8wPT09dCYmMD09PXMuJHNsaWRlcy5sZW5ndGg/aShlKS5hcHBlbmRUbyhzLiRzbGlkZVRyYWNrKTpvP2koZSkuaW5zZXJ0QmVmb3JlKHMuJHNsaWRlcy5lcSh0KSk6aShlKS5pbnNlcnRBZnRlcihzLiRzbGlkZXMuZXEodCkpOm89PT0hMD9pKGUpLnByZXBlbmRUbyhzLiRzbGlkZVRyYWNrKTppKGUpLmFwcGVuZFRvKHMuJHNsaWRlVHJhY2spLHMuJHNsaWRlcz1zLiRzbGlkZVRyYWNrLmNoaWxkcmVuKHRoaXMub3B0aW9ucy5zbGlkZSkscy4kc2xpZGVUcmFjay5jaGlsZHJlbih0aGlzLm9wdGlvbnMuc2xpZGUpLmRldGFjaCgpLHMuJHNsaWRlVHJhY2suYXBwZW5kKHMuJHNsaWRlcykscy4kc2xpZGVzLmVhY2goZnVuY3Rpb24oZSx0KXtpKHQpLmF0dHIoXCJkYXRhLXNsaWNrLWluZGV4XCIsZSl9KSxzLiRzbGlkZXNDYWNoZT1zLiRzbGlkZXMscy5yZWluaXQoKX0sZS5wcm90b3R5cGUuYW5pbWF0ZUhlaWdodD1mdW5jdGlvbigpe3ZhciBpPXRoaXM7aWYoMT09PWkub3B0aW9ucy5zbGlkZXNUb1Nob3cmJmkub3B0aW9ucy5hZGFwdGl2ZUhlaWdodD09PSEwJiZpLm9wdGlvbnMudmVydGljYWw9PT0hMSl7dmFyIGU9aS4kc2xpZGVzLmVxKGkuY3VycmVudFNsaWRlKS5vdXRlckhlaWdodCghMCk7aS4kbGlzdC5hbmltYXRlKHtoZWlnaHQ6ZX0saS5vcHRpb25zLnNwZWVkKX19LGUucHJvdG90eXBlLmFuaW1hdGVTbGlkZT1mdW5jdGlvbihlLHQpe3ZhciBvPXt9LHM9dGhpcztzLmFuaW1hdGVIZWlnaHQoKSxzLm9wdGlvbnMucnRsPT09ITAmJnMub3B0aW9ucy52ZXJ0aWNhbD09PSExJiYoZT0tZSkscy50cmFuc2Zvcm1zRW5hYmxlZD09PSExP3Mub3B0aW9ucy52ZXJ0aWNhbD09PSExP3MuJHNsaWRlVHJhY2suYW5pbWF0ZSh7bGVmdDplfSxzLm9wdGlvbnMuc3BlZWQscy5vcHRpb25zLmVhc2luZyx0KTpzLiRzbGlkZVRyYWNrLmFuaW1hdGUoe3RvcDplfSxzLm9wdGlvbnMuc3BlZWQscy5vcHRpb25zLmVhc2luZyx0KTpzLmNzc1RyYW5zaXRpb25zPT09ITE/KHMub3B0aW9ucy5ydGw9PT0hMCYmKHMuY3VycmVudExlZnQ9LXMuY3VycmVudExlZnQpLGkoe2FuaW1TdGFydDpzLmN1cnJlbnRMZWZ0fSkuYW5pbWF0ZSh7YW5pbVN0YXJ0OmV9LHtkdXJhdGlvbjpzLm9wdGlvbnMuc3BlZWQsZWFzaW5nOnMub3B0aW9ucy5lYXNpbmcsc3RlcDpmdW5jdGlvbihpKXtpPU1hdGguY2VpbChpKSxzLm9wdGlvbnMudmVydGljYWw9PT0hMT8ob1tzLmFuaW1UeXBlXT1cInRyYW5zbGF0ZShcIitpK1wicHgsIDBweClcIixzLiRzbGlkZVRyYWNrLmNzcyhvKSk6KG9bcy5hbmltVHlwZV09XCJ0cmFuc2xhdGUoMHB4LFwiK2krXCJweClcIixzLiRzbGlkZVRyYWNrLmNzcyhvKSl9LGNvbXBsZXRlOmZ1bmN0aW9uKCl7dCYmdC5jYWxsKCl9fSkpOihzLmFwcGx5VHJhbnNpdGlvbigpLGU9TWF0aC5jZWlsKGUpLHMub3B0aW9ucy52ZXJ0aWNhbD09PSExP29bcy5hbmltVHlwZV09XCJ0cmFuc2xhdGUzZChcIitlK1wicHgsIDBweCwgMHB4KVwiOm9bcy5hbmltVHlwZV09XCJ0cmFuc2xhdGUzZCgwcHgsXCIrZStcInB4LCAwcHgpXCIscy4kc2xpZGVUcmFjay5jc3MobyksdCYmc2V0VGltZW91dChmdW5jdGlvbigpe3MuZGlzYWJsZVRyYW5zaXRpb24oKSx0LmNhbGwoKX0scy5vcHRpb25zLnNwZWVkKSl9LGUucHJvdG90eXBlLmdldE5hdlRhcmdldD1mdW5jdGlvbigpe3ZhciBlPXRoaXMsdD1lLm9wdGlvbnMuYXNOYXZGb3I7cmV0dXJuIHQmJm51bGwhPT10JiYodD1pKHQpLm5vdChlLiRzbGlkZXIpKSx0fSxlLnByb3RvdHlwZS5hc05hdkZvcj1mdW5jdGlvbihlKXt2YXIgdD10aGlzLG89dC5nZXROYXZUYXJnZXQoKTtudWxsIT09byYmXCJvYmplY3RcIj09dHlwZW9mIG8mJm8uZWFjaChmdW5jdGlvbigpe3ZhciB0PWkodGhpcykuc2xpY2soXCJnZXRTbGlja1wiKTt0LnVuc2xpY2tlZHx8dC5zbGlkZUhhbmRsZXIoZSwhMCl9KX0sZS5wcm90b3R5cGUuYXBwbHlUcmFuc2l0aW9uPWZ1bmN0aW9uKGkpe3ZhciBlPXRoaXMsdD17fTtlLm9wdGlvbnMuZmFkZT09PSExP3RbZS50cmFuc2l0aW9uVHlwZV09ZS50cmFuc2Zvcm1UeXBlK1wiIFwiK2Uub3B0aW9ucy5zcGVlZCtcIm1zIFwiK2Uub3B0aW9ucy5jc3NFYXNlOnRbZS50cmFuc2l0aW9uVHlwZV09XCJvcGFjaXR5IFwiK2Uub3B0aW9ucy5zcGVlZCtcIm1zIFwiK2Uub3B0aW9ucy5jc3NFYXNlLGUub3B0aW9ucy5mYWRlPT09ITE/ZS4kc2xpZGVUcmFjay5jc3ModCk6ZS4kc2xpZGVzLmVxKGkpLmNzcyh0KX0sZS5wcm90b3R5cGUuYXV0b1BsYXk9ZnVuY3Rpb24oKXt2YXIgaT10aGlzO2kuYXV0b1BsYXlDbGVhcigpLGkuc2xpZGVDb3VudD5pLm9wdGlvbnMuc2xpZGVzVG9TaG93JiYoaS5hdXRvUGxheVRpbWVyPXNldEludGVydmFsKGkuYXV0b1BsYXlJdGVyYXRvcixpLm9wdGlvbnMuYXV0b3BsYXlTcGVlZCkpfSxlLnByb3RvdHlwZS5hdXRvUGxheUNsZWFyPWZ1bmN0aW9uKCl7dmFyIGk9dGhpcztpLmF1dG9QbGF5VGltZXImJmNsZWFySW50ZXJ2YWwoaS5hdXRvUGxheVRpbWVyKX0sZS5wcm90b3R5cGUuYXV0b1BsYXlJdGVyYXRvcj1mdW5jdGlvbigpe3ZhciBpPXRoaXMsZT1pLmN1cnJlbnRTbGlkZStpLm9wdGlvbnMuc2xpZGVzVG9TY3JvbGw7aS5wYXVzZWR8fGkuaW50ZXJydXB0ZWR8fGkuZm9jdXNzZWR8fChpLm9wdGlvbnMuaW5maW5pdGU9PT0hMSYmKDE9PT1pLmRpcmVjdGlvbiYmaS5jdXJyZW50U2xpZGUrMT09PWkuc2xpZGVDb3VudC0xP2kuZGlyZWN0aW9uPTA6MD09PWkuZGlyZWN0aW9uJiYoZT1pLmN1cnJlbnRTbGlkZS1pLm9wdGlvbnMuc2xpZGVzVG9TY3JvbGwsaS5jdXJyZW50U2xpZGUtMT09PTAmJihpLmRpcmVjdGlvbj0xKSkpLGkuc2xpZGVIYW5kbGVyKGUpKX0sZS5wcm90b3R5cGUuYnVpbGRBcnJvd3M9ZnVuY3Rpb24oKXt2YXIgZT10aGlzO2Uub3B0aW9ucy5hcnJvd3M9PT0hMCYmKGUuJHByZXZBcnJvdz1pKGUub3B0aW9ucy5wcmV2QXJyb3cpLmFkZENsYXNzKFwic2xpY2stYXJyb3dcIiksZS4kbmV4dEFycm93PWkoZS5vcHRpb25zLm5leHRBcnJvdykuYWRkQ2xhc3MoXCJzbGljay1hcnJvd1wiKSxlLnNsaWRlQ291bnQ+ZS5vcHRpb25zLnNsaWRlc1RvU2hvdz8oZS4kcHJldkFycm93LnJlbW92ZUNsYXNzKFwic2xpY2staGlkZGVuXCIpLnJlbW92ZUF0dHIoXCJhcmlhLWhpZGRlbiB0YWJpbmRleFwiKSxlLiRuZXh0QXJyb3cucmVtb3ZlQ2xhc3MoXCJzbGljay1oaWRkZW5cIikucmVtb3ZlQXR0cihcImFyaWEtaGlkZGVuIHRhYmluZGV4XCIpLGUuaHRtbEV4cHIudGVzdChlLm9wdGlvbnMucHJldkFycm93KSYmZS4kcHJldkFycm93LnByZXBlbmRUbyhlLm9wdGlvbnMuYXBwZW5kQXJyb3dzKSxlLmh0bWxFeHByLnRlc3QoZS5vcHRpb25zLm5leHRBcnJvdykmJmUuJG5leHRBcnJvdy5hcHBlbmRUbyhlLm9wdGlvbnMuYXBwZW5kQXJyb3dzKSxlLm9wdGlvbnMuaW5maW5pdGUhPT0hMCYmZS4kcHJldkFycm93LmFkZENsYXNzKFwic2xpY2stZGlzYWJsZWRcIikuYXR0cihcImFyaWEtZGlzYWJsZWRcIixcInRydWVcIikpOmUuJHByZXZBcnJvdy5hZGQoZS4kbmV4dEFycm93KS5hZGRDbGFzcyhcInNsaWNrLWhpZGRlblwiKS5hdHRyKHtcImFyaWEtZGlzYWJsZWRcIjpcInRydWVcIix0YWJpbmRleDpcIi0xXCJ9KSl9LGUucHJvdG90eXBlLmJ1aWxkRG90cz1mdW5jdGlvbigpe3ZhciBlLHQsbz10aGlzO2lmKG8ub3B0aW9ucy5kb3RzPT09ITAmJm8uc2xpZGVDb3VudD5vLm9wdGlvbnMuc2xpZGVzVG9TaG93KXtmb3Ioby4kc2xpZGVyLmFkZENsYXNzKFwic2xpY2stZG90dGVkXCIpLHQ9aShcIjx1bCAvPlwiKS5hZGRDbGFzcyhvLm9wdGlvbnMuZG90c0NsYXNzKSxlPTA7ZTw9by5nZXREb3RDb3VudCgpO2UrPTEpdC5hcHBlbmQoaShcIjxsaSAvPlwiKS5hcHBlbmQoby5vcHRpb25zLmN1c3RvbVBhZ2luZy5jYWxsKHRoaXMsbyxlKSkpO28uJGRvdHM9dC5hcHBlbmRUbyhvLm9wdGlvbnMuYXBwZW5kRG90cyksby4kZG90cy5maW5kKFwibGlcIikuZmlyc3QoKS5hZGRDbGFzcyhcInNsaWNrLWFjdGl2ZVwiKX19LGUucHJvdG90eXBlLmJ1aWxkT3V0PWZ1bmN0aW9uKCl7dmFyIGU9dGhpcztlLiRzbGlkZXM9ZS4kc2xpZGVyLmNoaWxkcmVuKGUub3B0aW9ucy5zbGlkZStcIjpub3QoLnNsaWNrLWNsb25lZClcIikuYWRkQ2xhc3MoXCJzbGljay1zbGlkZVwiKSxlLnNsaWRlQ291bnQ9ZS4kc2xpZGVzLmxlbmd0aCxlLiRzbGlkZXMuZWFjaChmdW5jdGlvbihlLHQpe2kodCkuYXR0cihcImRhdGEtc2xpY2staW5kZXhcIixlKS5kYXRhKFwib3JpZ2luYWxTdHlsaW5nXCIsaSh0KS5hdHRyKFwic3R5bGVcIil8fFwiXCIpfSksZS4kc2xpZGVyLmFkZENsYXNzKFwic2xpY2stc2xpZGVyXCIpLGUuJHNsaWRlVHJhY2s9MD09PWUuc2xpZGVDb3VudD9pKCc8ZGl2IGNsYXNzPVwic2xpY2stdHJhY2tcIi8+JykuYXBwZW5kVG8oZS4kc2xpZGVyKTplLiRzbGlkZXMud3JhcEFsbCgnPGRpdiBjbGFzcz1cInNsaWNrLXRyYWNrXCIvPicpLnBhcmVudCgpLGUuJGxpc3Q9ZS4kc2xpZGVUcmFjay53cmFwKCc8ZGl2IGNsYXNzPVwic2xpY2stbGlzdFwiLz4nKS5wYXJlbnQoKSxlLiRzbGlkZVRyYWNrLmNzcyhcIm9wYWNpdHlcIiwwKSxlLm9wdGlvbnMuY2VudGVyTW9kZSE9PSEwJiZlLm9wdGlvbnMuc3dpcGVUb1NsaWRlIT09ITB8fChlLm9wdGlvbnMuc2xpZGVzVG9TY3JvbGw9MSksaShcImltZ1tkYXRhLWxhenldXCIsZS4kc2xpZGVyKS5ub3QoXCJbc3JjXVwiKS5hZGRDbGFzcyhcInNsaWNrLWxvYWRpbmdcIiksZS5zZXR1cEluZmluaXRlKCksZS5idWlsZEFycm93cygpLGUuYnVpbGREb3RzKCksZS51cGRhdGVEb3RzKCksZS5zZXRTbGlkZUNsYXNzZXMoXCJudW1iZXJcIj09dHlwZW9mIGUuY3VycmVudFNsaWRlP2UuY3VycmVudFNsaWRlOjApLGUub3B0aW9ucy5kcmFnZ2FibGU9PT0hMCYmZS4kbGlzdC5hZGRDbGFzcyhcImRyYWdnYWJsZVwiKX0sZS5wcm90b3R5cGUuYnVpbGRSb3dzPWZ1bmN0aW9uKCl7dmFyIGksZSx0LG8scyxuLHIsbD10aGlzO2lmKG89ZG9jdW1lbnQuY3JlYXRlRG9jdW1lbnRGcmFnbWVudCgpLG49bC4kc2xpZGVyLmNoaWxkcmVuKCksbC5vcHRpb25zLnJvd3M+MCl7Zm9yKHI9bC5vcHRpb25zLnNsaWRlc1BlclJvdypsLm9wdGlvbnMucm93cyxzPU1hdGguY2VpbChuLmxlbmd0aC9yKSxpPTA7aTxzO2krKyl7dmFyIGQ9ZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtmb3IoZT0wO2U8bC5vcHRpb25zLnJvd3M7ZSsrKXt2YXIgYT1kb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO2Zvcih0PTA7dDxsLm9wdGlvbnMuc2xpZGVzUGVyUm93O3QrKyl7dmFyIGM9aSpyKyhlKmwub3B0aW9ucy5zbGlkZXNQZXJSb3crdCk7bi5nZXQoYykmJmEuYXBwZW5kQ2hpbGQobi5nZXQoYykpfWQuYXBwZW5kQ2hpbGQoYSl9by5hcHBlbmRDaGlsZChkKX1sLiRzbGlkZXIuZW1wdHkoKS5hcHBlbmQobyksbC4kc2xpZGVyLmNoaWxkcmVuKCkuY2hpbGRyZW4oKS5jaGlsZHJlbigpLmNzcyh7d2lkdGg6MTAwL2wub3B0aW9ucy5zbGlkZXNQZXJSb3crXCIlXCIsZGlzcGxheTpcImlubGluZS1ibG9ja1wifSl9fSxlLnByb3RvdHlwZS5jaGVja1Jlc3BvbnNpdmU9ZnVuY3Rpb24oZSx0KXt2YXIgbyxzLG4scj10aGlzLGw9ITEsZD1yLiRzbGlkZXIud2lkdGgoKSxhPXdpbmRvdy5pbm5lcldpZHRofHxpKHdpbmRvdykud2lkdGgoKTtpZihcIndpbmRvd1wiPT09ci5yZXNwb25kVG8/bj1hOlwic2xpZGVyXCI9PT1yLnJlc3BvbmRUbz9uPWQ6XCJtaW5cIj09PXIucmVzcG9uZFRvJiYobj1NYXRoLm1pbihhLGQpKSxyLm9wdGlvbnMucmVzcG9uc2l2ZSYmci5vcHRpb25zLnJlc3BvbnNpdmUubGVuZ3RoJiZudWxsIT09ci5vcHRpb25zLnJlc3BvbnNpdmUpe3M9bnVsbDtmb3IobyBpbiByLmJyZWFrcG9pbnRzKXIuYnJlYWtwb2ludHMuaGFzT3duUHJvcGVydHkobykmJihyLm9yaWdpbmFsU2V0dGluZ3MubW9iaWxlRmlyc3Q9PT0hMT9uPHIuYnJlYWtwb2ludHNbb10mJihzPXIuYnJlYWtwb2ludHNbb10pOm4+ci5icmVha3BvaW50c1tvXSYmKHM9ci5icmVha3BvaW50c1tvXSkpO251bGwhPT1zP251bGwhPT1yLmFjdGl2ZUJyZWFrcG9pbnQ/KHMhPT1yLmFjdGl2ZUJyZWFrcG9pbnR8fHQpJiYoci5hY3RpdmVCcmVha3BvaW50PXMsXCJ1bnNsaWNrXCI9PT1yLmJyZWFrcG9pbnRTZXR0aW5nc1tzXT9yLnVuc2xpY2socyk6KHIub3B0aW9ucz1pLmV4dGVuZCh7fSxyLm9yaWdpbmFsU2V0dGluZ3Msci5icmVha3BvaW50U2V0dGluZ3Nbc10pLGU9PT0hMCYmKHIuY3VycmVudFNsaWRlPXIub3B0aW9ucy5pbml0aWFsU2xpZGUpLHIucmVmcmVzaChlKSksbD1zKTooci5hY3RpdmVCcmVha3BvaW50PXMsXCJ1bnNsaWNrXCI9PT1yLmJyZWFrcG9pbnRTZXR0aW5nc1tzXT9yLnVuc2xpY2socyk6KHIub3B0aW9ucz1pLmV4dGVuZCh7fSxyLm9yaWdpbmFsU2V0dGluZ3Msci5icmVha3BvaW50U2V0dGluZ3Nbc10pLGU9PT0hMCYmKHIuY3VycmVudFNsaWRlPXIub3B0aW9ucy5pbml0aWFsU2xpZGUpLHIucmVmcmVzaChlKSksbD1zKTpudWxsIT09ci5hY3RpdmVCcmVha3BvaW50JiYoci5hY3RpdmVCcmVha3BvaW50PW51bGwsci5vcHRpb25zPXIub3JpZ2luYWxTZXR0aW5ncyxlPT09ITAmJihyLmN1cnJlbnRTbGlkZT1yLm9wdGlvbnMuaW5pdGlhbFNsaWRlKSxyLnJlZnJlc2goZSksbD1zKSxlfHxsPT09ITF8fHIuJHNsaWRlci50cmlnZ2VyKFwiYnJlYWtwb2ludFwiLFtyLGxdKX19LGUucHJvdG90eXBlLmNoYW5nZVNsaWRlPWZ1bmN0aW9uKGUsdCl7dmFyIG8scyxuLHI9dGhpcyxsPWkoZS5jdXJyZW50VGFyZ2V0KTtzd2l0Y2gobC5pcyhcImFcIikmJmUucHJldmVudERlZmF1bHQoKSxsLmlzKFwibGlcIil8fChsPWwuY2xvc2VzdChcImxpXCIpKSxuPXIuc2xpZGVDb3VudCVyLm9wdGlvbnMuc2xpZGVzVG9TY3JvbGwhPT0wLG89bj8wOihyLnNsaWRlQ291bnQtci5jdXJyZW50U2xpZGUpJXIub3B0aW9ucy5zbGlkZXNUb1Njcm9sbCxlLmRhdGEubWVzc2FnZSl7Y2FzZVwicHJldmlvdXNcIjpzPTA9PT1vP3Iub3B0aW9ucy5zbGlkZXNUb1Njcm9sbDpyLm9wdGlvbnMuc2xpZGVzVG9TaG93LW8sci5zbGlkZUNvdW50PnIub3B0aW9ucy5zbGlkZXNUb1Nob3cmJnIuc2xpZGVIYW5kbGVyKHIuY3VycmVudFNsaWRlLXMsITEsdCk7YnJlYWs7Y2FzZVwibmV4dFwiOnM9MD09PW8/ci5vcHRpb25zLnNsaWRlc1RvU2Nyb2xsOm8sci5zbGlkZUNvdW50PnIub3B0aW9ucy5zbGlkZXNUb1Nob3cmJnIuc2xpZGVIYW5kbGVyKHIuY3VycmVudFNsaWRlK3MsITEsdCk7YnJlYWs7Y2FzZVwiaW5kZXhcIjp2YXIgZD0wPT09ZS5kYXRhLmluZGV4PzA6ZS5kYXRhLmluZGV4fHxsLmluZGV4KCkqci5vcHRpb25zLnNsaWRlc1RvU2Nyb2xsO3Iuc2xpZGVIYW5kbGVyKHIuY2hlY2tOYXZpZ2FibGUoZCksITEsdCksbC5jaGlsZHJlbigpLnRyaWdnZXIoXCJmb2N1c1wiKTticmVhaztkZWZhdWx0OnJldHVybn19LGUucHJvdG90eXBlLmNoZWNrTmF2aWdhYmxlPWZ1bmN0aW9uKGkpe3ZhciBlLHQsbz10aGlzO2lmKGU9by5nZXROYXZpZ2FibGVJbmRleGVzKCksdD0wLGk+ZVtlLmxlbmd0aC0xXSlpPWVbZS5sZW5ndGgtMV07ZWxzZSBmb3IodmFyIHMgaW4gZSl7aWYoaTxlW3NdKXtpPXQ7YnJlYWt9dD1lW3NdfXJldHVybiBpfSxlLnByb3RvdHlwZS5jbGVhblVwRXZlbnRzPWZ1bmN0aW9uKCl7dmFyIGU9dGhpcztlLm9wdGlvbnMuZG90cyYmbnVsbCE9PWUuJGRvdHMmJihpKFwibGlcIixlLiRkb3RzKS5vZmYoXCJjbGljay5zbGlja1wiLGUuY2hhbmdlU2xpZGUpLm9mZihcIm1vdXNlZW50ZXIuc2xpY2tcIixpLnByb3h5KGUuaW50ZXJydXB0LGUsITApKS5vZmYoXCJtb3VzZWxlYXZlLnNsaWNrXCIsaS5wcm94eShlLmludGVycnVwdCxlLCExKSksZS5vcHRpb25zLmFjY2Vzc2liaWxpdHk9PT0hMCYmZS4kZG90cy5vZmYoXCJrZXlkb3duLnNsaWNrXCIsZS5rZXlIYW5kbGVyKSksZS4kc2xpZGVyLm9mZihcImZvY3VzLnNsaWNrIGJsdXIuc2xpY2tcIiksZS5vcHRpb25zLmFycm93cz09PSEwJiZlLnNsaWRlQ291bnQ+ZS5vcHRpb25zLnNsaWRlc1RvU2hvdyYmKGUuJHByZXZBcnJvdyYmZS4kcHJldkFycm93Lm9mZihcImNsaWNrLnNsaWNrXCIsZS5jaGFuZ2VTbGlkZSksZS4kbmV4dEFycm93JiZlLiRuZXh0QXJyb3cub2ZmKFwiY2xpY2suc2xpY2tcIixlLmNoYW5nZVNsaWRlKSxlLm9wdGlvbnMuYWNjZXNzaWJpbGl0eT09PSEwJiYoZS4kcHJldkFycm93JiZlLiRwcmV2QXJyb3cub2ZmKFwia2V5ZG93bi5zbGlja1wiLGUua2V5SGFuZGxlciksZS4kbmV4dEFycm93JiZlLiRuZXh0QXJyb3cub2ZmKFwia2V5ZG93bi5zbGlja1wiLGUua2V5SGFuZGxlcikpKSxlLiRsaXN0Lm9mZihcInRvdWNoc3RhcnQuc2xpY2sgbW91c2Vkb3duLnNsaWNrXCIsZS5zd2lwZUhhbmRsZXIpLGUuJGxpc3Qub2ZmKFwidG91Y2htb3ZlLnNsaWNrIG1vdXNlbW92ZS5zbGlja1wiLGUuc3dpcGVIYW5kbGVyKSxlLiRsaXN0Lm9mZihcInRvdWNoZW5kLnNsaWNrIG1vdXNldXAuc2xpY2tcIixlLnN3aXBlSGFuZGxlciksZS4kbGlzdC5vZmYoXCJ0b3VjaGNhbmNlbC5zbGljayBtb3VzZWxlYXZlLnNsaWNrXCIsZS5zd2lwZUhhbmRsZXIpLGUuJGxpc3Qub2ZmKFwiY2xpY2suc2xpY2tcIixlLmNsaWNrSGFuZGxlciksaShkb2N1bWVudCkub2ZmKGUudmlzaWJpbGl0eUNoYW5nZSxlLnZpc2liaWxpdHkpLGUuY2xlYW5VcFNsaWRlRXZlbnRzKCksZS5vcHRpb25zLmFjY2Vzc2liaWxpdHk9PT0hMCYmZS4kbGlzdC5vZmYoXCJrZXlkb3duLnNsaWNrXCIsZS5rZXlIYW5kbGVyKSxlLm9wdGlvbnMuZm9jdXNPblNlbGVjdD09PSEwJiZpKGUuJHNsaWRlVHJhY2spLmNoaWxkcmVuKCkub2ZmKFwiY2xpY2suc2xpY2tcIixlLnNlbGVjdEhhbmRsZXIpLGkod2luZG93KS5vZmYoXCJvcmllbnRhdGlvbmNoYW5nZS5zbGljay5zbGljay1cIitlLmluc3RhbmNlVWlkLGUub3JpZW50YXRpb25DaGFuZ2UpLGkod2luZG93KS5vZmYoXCJyZXNpemUuc2xpY2suc2xpY2stXCIrZS5pbnN0YW5jZVVpZCxlLnJlc2l6ZSksaShcIltkcmFnZ2FibGUhPXRydWVdXCIsZS4kc2xpZGVUcmFjaykub2ZmKFwiZHJhZ3N0YXJ0XCIsZS5wcmV2ZW50RGVmYXVsdCksaSh3aW5kb3cpLm9mZihcImxvYWQuc2xpY2suc2xpY2stXCIrZS5pbnN0YW5jZVVpZCxlLnNldFBvc2l0aW9uKX0sZS5wcm90b3R5cGUuY2xlYW5VcFNsaWRlRXZlbnRzPWZ1bmN0aW9uKCl7dmFyIGU9dGhpcztlLiRsaXN0Lm9mZihcIm1vdXNlZW50ZXIuc2xpY2tcIixpLnByb3h5KGUuaW50ZXJydXB0LGUsITApKSxlLiRsaXN0Lm9mZihcIm1vdXNlbGVhdmUuc2xpY2tcIixpLnByb3h5KGUuaW50ZXJydXB0LGUsITEpKX0sZS5wcm90b3R5cGUuY2xlYW5VcFJvd3M9ZnVuY3Rpb24oKXt2YXIgaSxlPXRoaXM7ZS5vcHRpb25zLnJvd3M+MCYmKGk9ZS4kc2xpZGVzLmNoaWxkcmVuKCkuY2hpbGRyZW4oKSxpLnJlbW92ZUF0dHIoXCJzdHlsZVwiKSxlLiRzbGlkZXIuZW1wdHkoKS5hcHBlbmQoaSkpfSxlLnByb3RvdHlwZS5jbGlja0hhbmRsZXI9ZnVuY3Rpb24oaSl7dmFyIGU9dGhpcztlLnNob3VsZENsaWNrPT09ITEmJihpLnN0b3BJbW1lZGlhdGVQcm9wYWdhdGlvbigpLGkuc3RvcFByb3BhZ2F0aW9uKCksaS5wcmV2ZW50RGVmYXVsdCgpKX0sZS5wcm90b3R5cGUuZGVzdHJveT1mdW5jdGlvbihlKXt2YXIgdD10aGlzO3QuYXV0b1BsYXlDbGVhcigpLHQudG91Y2hPYmplY3Q9e30sdC5jbGVhblVwRXZlbnRzKCksaShcIi5zbGljay1jbG9uZWRcIix0LiRzbGlkZXIpLmRldGFjaCgpLHQuJGRvdHMmJnQuJGRvdHMucmVtb3ZlKCksdC4kcHJldkFycm93JiZ0LiRwcmV2QXJyb3cubGVuZ3RoJiYodC4kcHJldkFycm93LnJlbW92ZUNsYXNzKFwic2xpY2stZGlzYWJsZWQgc2xpY2stYXJyb3cgc2xpY2staGlkZGVuXCIpLnJlbW92ZUF0dHIoXCJhcmlhLWhpZGRlbiBhcmlhLWRpc2FibGVkIHRhYmluZGV4XCIpLmNzcyhcImRpc3BsYXlcIixcIlwiKSx0Lmh0bWxFeHByLnRlc3QodC5vcHRpb25zLnByZXZBcnJvdykmJnQuJHByZXZBcnJvdy5yZW1vdmUoKSksdC4kbmV4dEFycm93JiZ0LiRuZXh0QXJyb3cubGVuZ3RoJiYodC4kbmV4dEFycm93LnJlbW92ZUNsYXNzKFwic2xpY2stZGlzYWJsZWQgc2xpY2stYXJyb3cgc2xpY2staGlkZGVuXCIpLnJlbW92ZUF0dHIoXCJhcmlhLWhpZGRlbiBhcmlhLWRpc2FibGVkIHRhYmluZGV4XCIpLmNzcyhcImRpc3BsYXlcIixcIlwiKSx0Lmh0bWxFeHByLnRlc3QodC5vcHRpb25zLm5leHRBcnJvdykmJnQuJG5leHRBcnJvdy5yZW1vdmUoKSksdC4kc2xpZGVzJiYodC4kc2xpZGVzLnJlbW92ZUNsYXNzKFwic2xpY2stc2xpZGUgc2xpY2stYWN0aXZlIHNsaWNrLWNlbnRlciBzbGljay12aXNpYmxlIHNsaWNrLWN1cnJlbnRcIikucmVtb3ZlQXR0cihcImFyaWEtaGlkZGVuXCIpLnJlbW92ZUF0dHIoXCJkYXRhLXNsaWNrLWluZGV4XCIpLmVhY2goZnVuY3Rpb24oKXtpKHRoaXMpLmF0dHIoXCJzdHlsZVwiLGkodGhpcykuZGF0YShcIm9yaWdpbmFsU3R5bGluZ1wiKSl9KSx0LiRzbGlkZVRyYWNrLmNoaWxkcmVuKHRoaXMub3B0aW9ucy5zbGlkZSkuZGV0YWNoKCksdC4kc2xpZGVUcmFjay5kZXRhY2goKSx0LiRsaXN0LmRldGFjaCgpLHQuJHNsaWRlci5hcHBlbmQodC4kc2xpZGVzKSksdC5jbGVhblVwUm93cygpLHQuJHNsaWRlci5yZW1vdmVDbGFzcyhcInNsaWNrLXNsaWRlclwiKSx0LiRzbGlkZXIucmVtb3ZlQ2xhc3MoXCJzbGljay1pbml0aWFsaXplZFwiKSx0LiRzbGlkZXIucmVtb3ZlQ2xhc3MoXCJzbGljay1kb3R0ZWRcIiksdC51bnNsaWNrZWQ9ITAsZXx8dC4kc2xpZGVyLnRyaWdnZXIoXCJkZXN0cm95XCIsW3RdKX0sZS5wcm90b3R5cGUuZGlzYWJsZVRyYW5zaXRpb249ZnVuY3Rpb24oaSl7dmFyIGU9dGhpcyx0PXt9O3RbZS50cmFuc2l0aW9uVHlwZV09XCJcIixlLm9wdGlvbnMuZmFkZT09PSExP2UuJHNsaWRlVHJhY2suY3NzKHQpOmUuJHNsaWRlcy5lcShpKS5jc3ModCl9LGUucHJvdG90eXBlLmZhZGVTbGlkZT1mdW5jdGlvbihpLGUpe3ZhciB0PXRoaXM7dC5jc3NUcmFuc2l0aW9ucz09PSExPyh0LiRzbGlkZXMuZXEoaSkuY3NzKHt6SW5kZXg6dC5vcHRpb25zLnpJbmRleH0pLHQuJHNsaWRlcy5lcShpKS5hbmltYXRlKHtvcGFjaXR5OjF9LHQub3B0aW9ucy5zcGVlZCx0Lm9wdGlvbnMuZWFzaW5nLGUpKToodC5hcHBseVRyYW5zaXRpb24oaSksdC4kc2xpZGVzLmVxKGkpLmNzcyh7b3BhY2l0eToxLHpJbmRleDp0Lm9wdGlvbnMuekluZGV4fSksZSYmc2V0VGltZW91dChmdW5jdGlvbigpe3QuZGlzYWJsZVRyYW5zaXRpb24oaSksZS5jYWxsKCl9LHQub3B0aW9ucy5zcGVlZCkpfSxlLnByb3RvdHlwZS5mYWRlU2xpZGVPdXQ9ZnVuY3Rpb24oaSl7dmFyIGU9dGhpcztlLmNzc1RyYW5zaXRpb25zPT09ITE/ZS4kc2xpZGVzLmVxKGkpLmFuaW1hdGUoe29wYWNpdHk6MCx6SW5kZXg6ZS5vcHRpb25zLnpJbmRleC0yfSxlLm9wdGlvbnMuc3BlZWQsZS5vcHRpb25zLmVhc2luZyk6KGUuYXBwbHlUcmFuc2l0aW9uKGkpLGUuJHNsaWRlcy5lcShpKS5jc3Moe29wYWNpdHk6MCx6SW5kZXg6ZS5vcHRpb25zLnpJbmRleC0yfSkpfSxlLnByb3RvdHlwZS5maWx0ZXJTbGlkZXM9ZS5wcm90b3R5cGUuc2xpY2tGaWx0ZXI9ZnVuY3Rpb24oaSl7dmFyIGU9dGhpcztudWxsIT09aSYmKGUuJHNsaWRlc0NhY2hlPWUuJHNsaWRlcyxlLnVubG9hZCgpLGUuJHNsaWRlVHJhY2suY2hpbGRyZW4odGhpcy5vcHRpb25zLnNsaWRlKS5kZXRhY2goKSxlLiRzbGlkZXNDYWNoZS5maWx0ZXIoaSkuYXBwZW5kVG8oZS4kc2xpZGVUcmFjayksZS5yZWluaXQoKSl9LGUucHJvdG90eXBlLmZvY3VzSGFuZGxlcj1mdW5jdGlvbigpe3ZhciBlPXRoaXM7ZS4kc2xpZGVyLm9mZihcImZvY3VzLnNsaWNrIGJsdXIuc2xpY2tcIikub24oXCJmb2N1cy5zbGlja1wiLFwiKlwiLGZ1bmN0aW9uKHQpe3ZhciBvPWkodGhpcyk7c2V0VGltZW91dChmdW5jdGlvbigpe2Uub3B0aW9ucy5wYXVzZU9uRm9jdXMmJm8uaXMoXCI6Zm9jdXNcIikmJihlLmZvY3Vzc2VkPSEwLGUuYXV0b1BsYXkoKSl9LDApfSkub24oXCJibHVyLnNsaWNrXCIsXCIqXCIsZnVuY3Rpb24odCl7aSh0aGlzKTtlLm9wdGlvbnMucGF1c2VPbkZvY3VzJiYoZS5mb2N1c3NlZD0hMSxlLmF1dG9QbGF5KCkpfSl9LGUucHJvdG90eXBlLmdldEN1cnJlbnQ9ZS5wcm90b3R5cGUuc2xpY2tDdXJyZW50U2xpZGU9ZnVuY3Rpb24oKXt2YXIgaT10aGlzO3JldHVybiBpLmN1cnJlbnRTbGlkZX0sZS5wcm90b3R5cGUuZ2V0RG90Q291bnQ9ZnVuY3Rpb24oKXt2YXIgaT10aGlzLGU9MCx0PTAsbz0wO2lmKGkub3B0aW9ucy5pbmZpbml0ZT09PSEwKWlmKGkuc2xpZGVDb3VudDw9aS5vcHRpb25zLnNsaWRlc1RvU2hvdykrK287ZWxzZSBmb3IoO2U8aS5zbGlkZUNvdW50OykrK28sZT10K2kub3B0aW9ucy5zbGlkZXNUb1Njcm9sbCx0Kz1pLm9wdGlvbnMuc2xpZGVzVG9TY3JvbGw8PWkub3B0aW9ucy5zbGlkZXNUb1Nob3c/aS5vcHRpb25zLnNsaWRlc1RvU2Nyb2xsOmkub3B0aW9ucy5zbGlkZXNUb1Nob3c7ZWxzZSBpZihpLm9wdGlvbnMuY2VudGVyTW9kZT09PSEwKW89aS5zbGlkZUNvdW50O2Vsc2UgaWYoaS5vcHRpb25zLmFzTmF2Rm9yKWZvcig7ZTxpLnNsaWRlQ291bnQ7KSsrbyxlPXQraS5vcHRpb25zLnNsaWRlc1RvU2Nyb2xsLHQrPWkub3B0aW9ucy5zbGlkZXNUb1Njcm9sbDw9aS5vcHRpb25zLnNsaWRlc1RvU2hvdz9pLm9wdGlvbnMuc2xpZGVzVG9TY3JvbGw6aS5vcHRpb25zLnNsaWRlc1RvU2hvdztlbHNlIG89MStNYXRoLmNlaWwoKGkuc2xpZGVDb3VudC1pLm9wdGlvbnMuc2xpZGVzVG9TaG93KS9pLm9wdGlvbnMuc2xpZGVzVG9TY3JvbGwpO3JldHVybiBvLTF9LGUucHJvdG90eXBlLmdldExlZnQ9ZnVuY3Rpb24oaSl7dmFyIGUsdCxvLHMsbj10aGlzLHI9MDtyZXR1cm4gbi5zbGlkZU9mZnNldD0wLHQ9bi4kc2xpZGVzLmZpcnN0KCkub3V0ZXJIZWlnaHQoITApLG4ub3B0aW9ucy5pbmZpbml0ZT09PSEwPyhuLnNsaWRlQ291bnQ+bi5vcHRpb25zLnNsaWRlc1RvU2hvdyYmKG4uc2xpZGVPZmZzZXQ9bi5zbGlkZVdpZHRoKm4ub3B0aW9ucy5zbGlkZXNUb1Nob3cqLTEscz0tMSxuLm9wdGlvbnMudmVydGljYWw9PT0hMCYmbi5vcHRpb25zLmNlbnRlck1vZGU9PT0hMCYmKDI9PT1uLm9wdGlvbnMuc2xpZGVzVG9TaG93P3M9LTEuNToxPT09bi5vcHRpb25zLnNsaWRlc1RvU2hvdyYmKHM9LTIpKSxyPXQqbi5vcHRpb25zLnNsaWRlc1RvU2hvdypzKSxuLnNsaWRlQ291bnQlbi5vcHRpb25zLnNsaWRlc1RvU2Nyb2xsIT09MCYmaStuLm9wdGlvbnMuc2xpZGVzVG9TY3JvbGw+bi5zbGlkZUNvdW50JiZuLnNsaWRlQ291bnQ+bi5vcHRpb25zLnNsaWRlc1RvU2hvdyYmKGk+bi5zbGlkZUNvdW50PyhuLnNsaWRlT2Zmc2V0PShuLm9wdGlvbnMuc2xpZGVzVG9TaG93LShpLW4uc2xpZGVDb3VudCkpKm4uc2xpZGVXaWR0aCotMSxyPShuLm9wdGlvbnMuc2xpZGVzVG9TaG93LShpLW4uc2xpZGVDb3VudCkpKnQqLTEpOihuLnNsaWRlT2Zmc2V0PW4uc2xpZGVDb3VudCVuLm9wdGlvbnMuc2xpZGVzVG9TY3JvbGwqbi5zbGlkZVdpZHRoKi0xLHI9bi5zbGlkZUNvdW50JW4ub3B0aW9ucy5zbGlkZXNUb1Njcm9sbCp0Ki0xKSkpOmkrbi5vcHRpb25zLnNsaWRlc1RvU2hvdz5uLnNsaWRlQ291bnQmJihuLnNsaWRlT2Zmc2V0PShpK24ub3B0aW9ucy5zbGlkZXNUb1Nob3ctbi5zbGlkZUNvdW50KSpuLnNsaWRlV2lkdGgscj0oaStuLm9wdGlvbnMuc2xpZGVzVG9TaG93LW4uc2xpZGVDb3VudCkqdCksbi5zbGlkZUNvdW50PD1uLm9wdGlvbnMuc2xpZGVzVG9TaG93JiYobi5zbGlkZU9mZnNldD0wLHI9MCksbi5vcHRpb25zLmNlbnRlck1vZGU9PT0hMCYmbi5zbGlkZUNvdW50PD1uLm9wdGlvbnMuc2xpZGVzVG9TaG93P24uc2xpZGVPZmZzZXQ9bi5zbGlkZVdpZHRoKk1hdGguZmxvb3Iobi5vcHRpb25zLnNsaWRlc1RvU2hvdykvMi1uLnNsaWRlV2lkdGgqbi5zbGlkZUNvdW50LzI6bi5vcHRpb25zLmNlbnRlck1vZGU9PT0hMCYmbi5vcHRpb25zLmluZmluaXRlPT09ITA/bi5zbGlkZU9mZnNldCs9bi5zbGlkZVdpZHRoKk1hdGguZmxvb3Iobi5vcHRpb25zLnNsaWRlc1RvU2hvdy8yKS1uLnNsaWRlV2lkdGg6bi5vcHRpb25zLmNlbnRlck1vZGU9PT0hMCYmKG4uc2xpZGVPZmZzZXQ9MCxuLnNsaWRlT2Zmc2V0Kz1uLnNsaWRlV2lkdGgqTWF0aC5mbG9vcihuLm9wdGlvbnMuc2xpZGVzVG9TaG93LzIpKSxlPW4ub3B0aW9ucy52ZXJ0aWNhbD09PSExP2kqbi5zbGlkZVdpZHRoKi0xK24uc2xpZGVPZmZzZXQ6aSp0Ki0xK3Isbi5vcHRpb25zLnZhcmlhYmxlV2lkdGg9PT0hMCYmKG89bi5zbGlkZUNvdW50PD1uLm9wdGlvbnMuc2xpZGVzVG9TaG93fHxuLm9wdGlvbnMuaW5maW5pdGU9PT0hMT9uLiRzbGlkZVRyYWNrLmNoaWxkcmVuKFwiLnNsaWNrLXNsaWRlXCIpLmVxKGkpOm4uJHNsaWRlVHJhY2suY2hpbGRyZW4oXCIuc2xpY2stc2xpZGVcIikuZXEoaStuLm9wdGlvbnMuc2xpZGVzVG9TaG93KSxlPW4ub3B0aW9ucy5ydGw9PT0hMD9vWzBdPyhuLiRzbGlkZVRyYWNrLndpZHRoKCktb1swXS5vZmZzZXRMZWZ0LW8ud2lkdGgoKSkqLTE6MDpvWzBdP29bMF0ub2Zmc2V0TGVmdCotMTowLG4ub3B0aW9ucy5jZW50ZXJNb2RlPT09ITAmJihvPW4uc2xpZGVDb3VudDw9bi5vcHRpb25zLnNsaWRlc1RvU2hvd3x8bi5vcHRpb25zLmluZmluaXRlPT09ITE/bi4kc2xpZGVUcmFjay5jaGlsZHJlbihcIi5zbGljay1zbGlkZVwiKS5lcShpKTpuLiRzbGlkZVRyYWNrLmNoaWxkcmVuKFwiLnNsaWNrLXNsaWRlXCIpLmVxKGkrbi5vcHRpb25zLnNsaWRlc1RvU2hvdysxKSxlPW4ub3B0aW9ucy5ydGw9PT0hMD9vWzBdPyhuLiRzbGlkZVRyYWNrLndpZHRoKCktb1swXS5vZmZzZXRMZWZ0LW8ud2lkdGgoKSkqLTE6MDpvWzBdP29bMF0ub2Zmc2V0TGVmdCotMTowLGUrPShuLiRsaXN0LndpZHRoKCktby5vdXRlcldpZHRoKCkpLzIpKSxlfSxlLnByb3RvdHlwZS5nZXRPcHRpb249ZS5wcm90b3R5cGUuc2xpY2tHZXRPcHRpb249ZnVuY3Rpb24oaSl7dmFyIGU9dGhpcztyZXR1cm4gZS5vcHRpb25zW2ldfSxlLnByb3RvdHlwZS5nZXROYXZpZ2FibGVJbmRleGVzPWZ1bmN0aW9uKCl7dmFyIGksZT10aGlzLHQ9MCxvPTAscz1bXTtmb3IoZS5vcHRpb25zLmluZmluaXRlPT09ITE/aT1lLnNsaWRlQ291bnQ6KHQ9ZS5vcHRpb25zLnNsaWRlc1RvU2Nyb2xsKi0xLG89ZS5vcHRpb25zLnNsaWRlc1RvU2Nyb2xsKi0xLGk9MiplLnNsaWRlQ291bnQpO3Q8aTspcy5wdXNoKHQpLHQ9bytlLm9wdGlvbnMuc2xpZGVzVG9TY3JvbGwsbys9ZS5vcHRpb25zLnNsaWRlc1RvU2Nyb2xsPD1lLm9wdGlvbnMuc2xpZGVzVG9TaG93P2Uub3B0aW9ucy5zbGlkZXNUb1Njcm9sbDplLm9wdGlvbnMuc2xpZGVzVG9TaG93O3JldHVybiBzfSxlLnByb3RvdHlwZS5nZXRTbGljaz1mdW5jdGlvbigpe3JldHVybiB0aGlzfSxlLnByb3RvdHlwZS5nZXRTbGlkZUNvdW50PWZ1bmN0aW9uKCl7dmFyIGUsdCxvLHMsbj10aGlzO3JldHVybiBzPW4ub3B0aW9ucy5jZW50ZXJNb2RlPT09ITA/TWF0aC5mbG9vcihuLiRsaXN0LndpZHRoKCkvMik6MCxvPW4uc3dpcGVMZWZ0Ki0xK3Msbi5vcHRpb25zLnN3aXBlVG9TbGlkZT09PSEwPyhuLiRzbGlkZVRyYWNrLmZpbmQoXCIuc2xpY2stc2xpZGVcIikuZWFjaChmdW5jdGlvbihlLHMpe3ZhciByLGwsZDtpZihyPWkocykub3V0ZXJXaWR0aCgpLGw9cy5vZmZzZXRMZWZ0LG4ub3B0aW9ucy5jZW50ZXJNb2RlIT09ITAmJihsKz1yLzIpLGQ9bCtyLG88ZClyZXR1cm4gdD1zLCExfSksZT1NYXRoLmFicyhpKHQpLmF0dHIoXCJkYXRhLXNsaWNrLWluZGV4XCIpLW4uY3VycmVudFNsaWRlKXx8MSk6bi5vcHRpb25zLnNsaWRlc1RvU2Nyb2xsfSxlLnByb3RvdHlwZS5nb1RvPWUucHJvdG90eXBlLnNsaWNrR29Ubz1mdW5jdGlvbihpLGUpe3ZhciB0PXRoaXM7dC5jaGFuZ2VTbGlkZSh7ZGF0YTp7bWVzc2FnZTpcImluZGV4XCIsaW5kZXg6cGFyc2VJbnQoaSl9fSxlKX0sZS5wcm90b3R5cGUuaW5pdD1mdW5jdGlvbihlKXt2YXIgdD10aGlzO2kodC4kc2xpZGVyKS5oYXNDbGFzcyhcInNsaWNrLWluaXRpYWxpemVkXCIpfHwoaSh0LiRzbGlkZXIpLmFkZENsYXNzKFwic2xpY2staW5pdGlhbGl6ZWRcIiksdC5idWlsZFJvd3MoKSx0LmJ1aWxkT3V0KCksdC5zZXRQcm9wcygpLHQuc3RhcnRMb2FkKCksdC5sb2FkU2xpZGVyKCksdC5pbml0aWFsaXplRXZlbnRzKCksdC51cGRhdGVBcnJvd3MoKSx0LnVwZGF0ZURvdHMoKSx0LmNoZWNrUmVzcG9uc2l2ZSghMCksdC5mb2N1c0hhbmRsZXIoKSksZSYmdC4kc2xpZGVyLnRyaWdnZXIoXCJpbml0XCIsW3RdKSx0Lm9wdGlvbnMuYWNjZXNzaWJpbGl0eT09PSEwJiZ0LmluaXRBREEoKSx0Lm9wdGlvbnMuYXV0b3BsYXkmJih0LnBhdXNlZD0hMSx0LmF1dG9QbGF5KCkpfSxlLnByb3RvdHlwZS5pbml0QURBPWZ1bmN0aW9uKCl7dmFyIGU9dGhpcyx0PU1hdGguY2VpbChlLnNsaWRlQ291bnQvZS5vcHRpb25zLnNsaWRlc1RvU2hvdyksbz1lLmdldE5hdmlnYWJsZUluZGV4ZXMoKS5maWx0ZXIoZnVuY3Rpb24oaSl7cmV0dXJuIGk+PTAmJmk8ZS5zbGlkZUNvdW50fSk7ZS4kc2xpZGVzLmFkZChlLiRzbGlkZVRyYWNrLmZpbmQoXCIuc2xpY2stY2xvbmVkXCIpKS5hdHRyKHtcImFyaWEtaGlkZGVuXCI6XCJ0cnVlXCIsdGFiaW5kZXg6XCItMVwifSkuZmluZChcImEsIGlucHV0LCBidXR0b24sIHNlbGVjdFwiKS5hdHRyKHt0YWJpbmRleDpcIi0xXCJ9KSxudWxsIT09ZS4kZG90cyYmKGUuJHNsaWRlcy5ub3QoZS4kc2xpZGVUcmFjay5maW5kKFwiLnNsaWNrLWNsb25lZFwiKSkuZWFjaChmdW5jdGlvbih0KXt2YXIgcz1vLmluZGV4T2YodCk7aWYoaSh0aGlzKS5hdHRyKHtyb2xlOlwidGFicGFuZWxcIixpZDpcInNsaWNrLXNsaWRlXCIrZS5pbnN0YW5jZVVpZCt0LHRhYmluZGV4Oi0xfSkscyE9PS0xKXt2YXIgbj1cInNsaWNrLXNsaWRlLWNvbnRyb2xcIitlLmluc3RhbmNlVWlkK3M7aShcIiNcIituKS5sZW5ndGgmJmkodGhpcykuYXR0cih7XCJhcmlhLWRlc2NyaWJlZGJ5XCI6bn0pfX0pLGUuJGRvdHMuYXR0cihcInJvbGVcIixcInRhYmxpc3RcIikuZmluZChcImxpXCIpLmVhY2goZnVuY3Rpb24ocyl7dmFyIG49b1tzXTtpKHRoaXMpLmF0dHIoe3JvbGU6XCJwcmVzZW50YXRpb25cIn0pLGkodGhpcykuZmluZChcImJ1dHRvblwiKS5maXJzdCgpLmF0dHIoe3JvbGU6XCJ0YWJcIixpZDpcInNsaWNrLXNsaWRlLWNvbnRyb2xcIitlLmluc3RhbmNlVWlkK3MsXCJhcmlhLWNvbnRyb2xzXCI6XCJzbGljay1zbGlkZVwiK2UuaW5zdGFuY2VVaWQrbixcImFyaWEtbGFiZWxcIjpzKzErXCIgb2YgXCIrdCxcImFyaWEtc2VsZWN0ZWRcIjpudWxsLHRhYmluZGV4OlwiLTFcIn0pfSkuZXEoZS5jdXJyZW50U2xpZGUpLmZpbmQoXCJidXR0b25cIikuYXR0cih7XCJhcmlhLXNlbGVjdGVkXCI6XCJ0cnVlXCIsdGFiaW5kZXg6XCIwXCJ9KS5lbmQoKSk7Zm9yKHZhciBzPWUuY3VycmVudFNsaWRlLG49cytlLm9wdGlvbnMuc2xpZGVzVG9TaG93O3M8bjtzKyspZS5vcHRpb25zLmZvY3VzT25DaGFuZ2U/ZS4kc2xpZGVzLmVxKHMpLmF0dHIoe3RhYmluZGV4OlwiMFwifSk6ZS4kc2xpZGVzLmVxKHMpLnJlbW92ZUF0dHIoXCJ0YWJpbmRleFwiKTtlLmFjdGl2YXRlQURBKCl9LGUucHJvdG90eXBlLmluaXRBcnJvd0V2ZW50cz1mdW5jdGlvbigpe3ZhciBpPXRoaXM7aS5vcHRpb25zLmFycm93cz09PSEwJiZpLnNsaWRlQ291bnQ+aS5vcHRpb25zLnNsaWRlc1RvU2hvdyYmKGkuJHByZXZBcnJvdy5vZmYoXCJjbGljay5zbGlja1wiKS5vbihcImNsaWNrLnNsaWNrXCIse21lc3NhZ2U6XCJwcmV2aW91c1wifSxpLmNoYW5nZVNsaWRlKSxpLiRuZXh0QXJyb3cub2ZmKFwiY2xpY2suc2xpY2tcIikub24oXCJjbGljay5zbGlja1wiLHttZXNzYWdlOlwibmV4dFwifSxpLmNoYW5nZVNsaWRlKSxpLm9wdGlvbnMuYWNjZXNzaWJpbGl0eT09PSEwJiYoaS4kcHJldkFycm93Lm9uKFwia2V5ZG93bi5zbGlja1wiLGkua2V5SGFuZGxlciksaS4kbmV4dEFycm93Lm9uKFwia2V5ZG93bi5zbGlja1wiLGkua2V5SGFuZGxlcikpKX0sZS5wcm90b3R5cGUuaW5pdERvdEV2ZW50cz1mdW5jdGlvbigpe3ZhciBlPXRoaXM7ZS5vcHRpb25zLmRvdHM9PT0hMCYmZS5zbGlkZUNvdW50PmUub3B0aW9ucy5zbGlkZXNUb1Nob3cmJihpKFwibGlcIixlLiRkb3RzKS5vbihcImNsaWNrLnNsaWNrXCIse21lc3NhZ2U6XCJpbmRleFwifSxlLmNoYW5nZVNsaWRlKSxlLm9wdGlvbnMuYWNjZXNzaWJpbGl0eT09PSEwJiZlLiRkb3RzLm9uKFwia2V5ZG93bi5zbGlja1wiLGUua2V5SGFuZGxlcikpLGUub3B0aW9ucy5kb3RzPT09ITAmJmUub3B0aW9ucy5wYXVzZU9uRG90c0hvdmVyPT09ITAmJmUuc2xpZGVDb3VudD5lLm9wdGlvbnMuc2xpZGVzVG9TaG93JiZpKFwibGlcIixlLiRkb3RzKS5vbihcIm1vdXNlZW50ZXIuc2xpY2tcIixpLnByb3h5KGUuaW50ZXJydXB0LGUsITApKS5vbihcIm1vdXNlbGVhdmUuc2xpY2tcIixpLnByb3h5KGUuaW50ZXJydXB0LGUsITEpKX0sZS5wcm90b3R5cGUuaW5pdFNsaWRlRXZlbnRzPWZ1bmN0aW9uKCl7dmFyIGU9dGhpcztlLm9wdGlvbnMucGF1c2VPbkhvdmVyJiYoZS4kbGlzdC5vbihcIm1vdXNlZW50ZXIuc2xpY2tcIixpLnByb3h5KGUuaW50ZXJydXB0LGUsITApKSxlLiRsaXN0Lm9uKFwibW91c2VsZWF2ZS5zbGlja1wiLGkucHJveHkoZS5pbnRlcnJ1cHQsZSwhMSkpKX0sZS5wcm90b3R5cGUuaW5pdGlhbGl6ZUV2ZW50cz1mdW5jdGlvbigpe3ZhciBlPXRoaXM7ZS5pbml0QXJyb3dFdmVudHMoKSxlLmluaXREb3RFdmVudHMoKSxlLmluaXRTbGlkZUV2ZW50cygpLGUuJGxpc3Qub24oXCJ0b3VjaHN0YXJ0LnNsaWNrIG1vdXNlZG93bi5zbGlja1wiLHthY3Rpb246XCJzdGFydFwifSxlLnN3aXBlSGFuZGxlciksZS4kbGlzdC5vbihcInRvdWNobW92ZS5zbGljayBtb3VzZW1vdmUuc2xpY2tcIix7YWN0aW9uOlwibW92ZVwifSxlLnN3aXBlSGFuZGxlciksZS4kbGlzdC5vbihcInRvdWNoZW5kLnNsaWNrIG1vdXNldXAuc2xpY2tcIix7YWN0aW9uOlwiZW5kXCJ9LGUuc3dpcGVIYW5kbGVyKSxlLiRsaXN0Lm9uKFwidG91Y2hjYW5jZWwuc2xpY2sgbW91c2VsZWF2ZS5zbGlja1wiLHthY3Rpb246XCJlbmRcIn0sZS5zd2lwZUhhbmRsZXIpLGUuJGxpc3Qub24oXCJjbGljay5zbGlja1wiLGUuY2xpY2tIYW5kbGVyKSxpKGRvY3VtZW50KS5vbihlLnZpc2liaWxpdHlDaGFuZ2UsaS5wcm94eShlLnZpc2liaWxpdHksZSkpLGUub3B0aW9ucy5hY2Nlc3NpYmlsaXR5PT09ITAmJmUuJGxpc3Qub24oXCJrZXlkb3duLnNsaWNrXCIsZS5rZXlIYW5kbGVyKSxlLm9wdGlvbnMuZm9jdXNPblNlbGVjdD09PSEwJiZpKGUuJHNsaWRlVHJhY2spLmNoaWxkcmVuKCkub24oXCJjbGljay5zbGlja1wiLGUuc2VsZWN0SGFuZGxlciksaSh3aW5kb3cpLm9uKFwib3JpZW50YXRpb25jaGFuZ2Uuc2xpY2suc2xpY2stXCIrZS5pbnN0YW5jZVVpZCxpLnByb3h5KGUub3JpZW50YXRpb25DaGFuZ2UsZSkpLGkod2luZG93KS5vbihcInJlc2l6ZS5zbGljay5zbGljay1cIitlLmluc3RhbmNlVWlkLGkucHJveHkoZS5yZXNpemUsZSkpLGkoXCJbZHJhZ2dhYmxlIT10cnVlXVwiLGUuJHNsaWRlVHJhY2spLm9uKFwiZHJhZ3N0YXJ0XCIsZS5wcmV2ZW50RGVmYXVsdCksaSh3aW5kb3cpLm9uKFwibG9hZC5zbGljay5zbGljay1cIitlLmluc3RhbmNlVWlkLGUuc2V0UG9zaXRpb24pLGkoZS5zZXRQb3NpdGlvbil9LGUucHJvdG90eXBlLmluaXRVST1mdW5jdGlvbigpe3ZhciBpPXRoaXM7aS5vcHRpb25zLmFycm93cz09PSEwJiZpLnNsaWRlQ291bnQ+aS5vcHRpb25zLnNsaWRlc1RvU2hvdyYmKGkuJHByZXZBcnJvdy5zaG93KCksaS4kbmV4dEFycm93LnNob3coKSksaS5vcHRpb25zLmRvdHM9PT0hMCYmaS5zbGlkZUNvdW50Pmkub3B0aW9ucy5zbGlkZXNUb1Nob3cmJmkuJGRvdHMuc2hvdygpfSxlLnByb3RvdHlwZS5rZXlIYW5kbGVyPWZ1bmN0aW9uKGkpe3ZhciBlPXRoaXM7aS50YXJnZXQudGFnTmFtZS5tYXRjaChcIlRFWFRBUkVBfElOUFVUfFNFTEVDVFwiKXx8KDM3PT09aS5rZXlDb2RlJiZlLm9wdGlvbnMuYWNjZXNzaWJpbGl0eT09PSEwP2UuY2hhbmdlU2xpZGUoe2RhdGE6e21lc3NhZ2U6ZS5vcHRpb25zLnJ0bD09PSEwP1wibmV4dFwiOlwicHJldmlvdXNcIn19KTozOT09PWkua2V5Q29kZSYmZS5vcHRpb25zLmFjY2Vzc2liaWxpdHk9PT0hMCYmZS5jaGFuZ2VTbGlkZSh7ZGF0YTp7bWVzc2FnZTplLm9wdGlvbnMucnRsPT09ITA/XCJwcmV2aW91c1wiOlwibmV4dFwifX0pKX0sZS5wcm90b3R5cGUubGF6eUxvYWQ9ZnVuY3Rpb24oKXtmdW5jdGlvbiBlKGUpe2koXCJpbWdbZGF0YS1sYXp5XVwiLGUpLmVhY2goZnVuY3Rpb24oKXt2YXIgZT1pKHRoaXMpLHQ9aSh0aGlzKS5hdHRyKFwiZGF0YS1sYXp5XCIpLG89aSh0aGlzKS5hdHRyKFwiZGF0YS1zcmNzZXRcIikscz1pKHRoaXMpLmF0dHIoXCJkYXRhLXNpemVzXCIpfHxyLiRzbGlkZXIuYXR0cihcImRhdGEtc2l6ZXNcIiksbj1kb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiaW1nXCIpO24ub25sb2FkPWZ1bmN0aW9uKCl7ZS5hbmltYXRlKHtvcGFjaXR5OjB9LDEwMCxmdW5jdGlvbigpe28mJihlLmF0dHIoXCJzcmNzZXRcIixvKSxzJiZlLmF0dHIoXCJzaXplc1wiLHMpKSxlLmF0dHIoXCJzcmNcIix0KS5hbmltYXRlKHtvcGFjaXR5OjF9LDIwMCxmdW5jdGlvbigpe2UucmVtb3ZlQXR0cihcImRhdGEtbGF6eSBkYXRhLXNyY3NldCBkYXRhLXNpemVzXCIpLnJlbW92ZUNsYXNzKFwic2xpY2stbG9hZGluZ1wiKX0pLHIuJHNsaWRlci50cmlnZ2VyKFwibGF6eUxvYWRlZFwiLFtyLGUsdF0pfSl9LG4ub25lcnJvcj1mdW5jdGlvbigpe2UucmVtb3ZlQXR0cihcImRhdGEtbGF6eVwiKS5yZW1vdmVDbGFzcyhcInNsaWNrLWxvYWRpbmdcIikuYWRkQ2xhc3MoXCJzbGljay1sYXp5bG9hZC1lcnJvclwiKSxyLiRzbGlkZXIudHJpZ2dlcihcImxhenlMb2FkRXJyb3JcIixbcixlLHRdKX0sbi5zcmM9dH0pfXZhciB0LG8scyxuLHI9dGhpcztpZihyLm9wdGlvbnMuY2VudGVyTW9kZT09PSEwP3Iub3B0aW9ucy5pbmZpbml0ZT09PSEwPyhzPXIuY3VycmVudFNsaWRlKyhyLm9wdGlvbnMuc2xpZGVzVG9TaG93LzIrMSksbj1zK3Iub3B0aW9ucy5zbGlkZXNUb1Nob3crMik6KHM9TWF0aC5tYXgoMCxyLmN1cnJlbnRTbGlkZS0oci5vcHRpb25zLnNsaWRlc1RvU2hvdy8yKzEpKSxuPTIrKHIub3B0aW9ucy5zbGlkZXNUb1Nob3cvMisxKStyLmN1cnJlbnRTbGlkZSk6KHM9ci5vcHRpb25zLmluZmluaXRlP3Iub3B0aW9ucy5zbGlkZXNUb1Nob3crci5jdXJyZW50U2xpZGU6ci5jdXJyZW50U2xpZGUsbj1NYXRoLmNlaWwocytyLm9wdGlvbnMuc2xpZGVzVG9TaG93KSxyLm9wdGlvbnMuZmFkZT09PSEwJiYocz4wJiZzLS0sbjw9ci5zbGlkZUNvdW50JiZuKyspKSx0PXIuJHNsaWRlci5maW5kKFwiLnNsaWNrLXNsaWRlXCIpLnNsaWNlKHMsbiksXCJhbnRpY2lwYXRlZFwiPT09ci5vcHRpb25zLmxhenlMb2FkKWZvcih2YXIgbD1zLTEsZD1uLGE9ci4kc2xpZGVyLmZpbmQoXCIuc2xpY2stc2xpZGVcIiksYz0wO2M8ci5vcHRpb25zLnNsaWRlc1RvU2Nyb2xsO2MrKylsPDAmJihsPXIuc2xpZGVDb3VudC0xKSx0PXQuYWRkKGEuZXEobCkpLHQ9dC5hZGQoYS5lcShkKSksbC0tLGQrKztlKHQpLHIuc2xpZGVDb3VudDw9ci5vcHRpb25zLnNsaWRlc1RvU2hvdz8obz1yLiRzbGlkZXIuZmluZChcIi5zbGljay1zbGlkZVwiKSxlKG8pKTpyLmN1cnJlbnRTbGlkZT49ci5zbGlkZUNvdW50LXIub3B0aW9ucy5zbGlkZXNUb1Nob3c/KG89ci4kc2xpZGVyLmZpbmQoXCIuc2xpY2stY2xvbmVkXCIpLnNsaWNlKDAsci5vcHRpb25zLnNsaWRlc1RvU2hvdyksZShvKSk6MD09PXIuY3VycmVudFNsaWRlJiYobz1yLiRzbGlkZXIuZmluZChcIi5zbGljay1jbG9uZWRcIikuc2xpY2Uoci5vcHRpb25zLnNsaWRlc1RvU2hvdyotMSksZShvKSl9LGUucHJvdG90eXBlLmxvYWRTbGlkZXI9ZnVuY3Rpb24oKXt2YXIgaT10aGlzO2kuc2V0UG9zaXRpb24oKSxpLiRzbGlkZVRyYWNrLmNzcyh7b3BhY2l0eToxfSksaS4kc2xpZGVyLnJlbW92ZUNsYXNzKFwic2xpY2stbG9hZGluZ1wiKSxpLmluaXRVSSgpLFwicHJvZ3Jlc3NpdmVcIj09PWkub3B0aW9ucy5sYXp5TG9hZCYmaS5wcm9ncmVzc2l2ZUxhenlMb2FkKCl9LGUucHJvdG90eXBlLm5leHQ9ZS5wcm90b3R5cGUuc2xpY2tOZXh0PWZ1bmN0aW9uKCl7dmFyIGk9dGhpcztpLmNoYW5nZVNsaWRlKHtkYXRhOnttZXNzYWdlOlwibmV4dFwifX0pfSxlLnByb3RvdHlwZS5vcmllbnRhdGlvbkNoYW5nZT1mdW5jdGlvbigpe3ZhciBpPXRoaXM7aS5jaGVja1Jlc3BvbnNpdmUoKSxpLnNldFBvc2l0aW9uKCl9LGUucHJvdG90eXBlLnBhdXNlPWUucHJvdG90eXBlLnNsaWNrUGF1c2U9ZnVuY3Rpb24oKXt2YXIgaT10aGlzO2kuYXV0b1BsYXlDbGVhcigpLGkucGF1c2VkPSEwfSxlLnByb3RvdHlwZS5wbGF5PWUucHJvdG90eXBlLnNsaWNrUGxheT1mdW5jdGlvbigpe3ZhciBpPXRoaXM7aS5hdXRvUGxheSgpLGkub3B0aW9ucy5hdXRvcGxheT0hMCxpLnBhdXNlZD0hMSxpLmZvY3Vzc2VkPSExLGkuaW50ZXJydXB0ZWQ9ITF9LGUucHJvdG90eXBlLnBvc3RTbGlkZT1mdW5jdGlvbihlKXt2YXIgdD10aGlzO2lmKCF0LnVuc2xpY2tlZCYmKHQuJHNsaWRlci50cmlnZ2VyKFwiYWZ0ZXJDaGFuZ2VcIixbdCxlXSksdC5hbmltYXRpbmc9ITEsdC5zbGlkZUNvdW50PnQub3B0aW9ucy5zbGlkZXNUb1Nob3cmJnQuc2V0UG9zaXRpb24oKSx0LnN3aXBlTGVmdD1udWxsLHQub3B0aW9ucy5hdXRvcGxheSYmdC5hdXRvUGxheSgpLHQub3B0aW9ucy5hY2Nlc3NpYmlsaXR5PT09ITAmJih0LmluaXRBREEoKSx0Lm9wdGlvbnMuZm9jdXNPbkNoYW5nZSkpKXt2YXIgbz1pKHQuJHNsaWRlcy5nZXQodC5jdXJyZW50U2xpZGUpKTtvLmF0dHIoXCJ0YWJpbmRleFwiLDApLmZvY3VzKCl9fSxlLnByb3RvdHlwZS5wcmV2PWUucHJvdG90eXBlLnNsaWNrUHJldj1mdW5jdGlvbigpe3ZhciBpPXRoaXM7aS5jaGFuZ2VTbGlkZSh7ZGF0YTp7bWVzc2FnZTpcInByZXZpb3VzXCJ9fSl9LGUucHJvdG90eXBlLnByZXZlbnREZWZhdWx0PWZ1bmN0aW9uKGkpe2kucHJldmVudERlZmF1bHQoKX0sZS5wcm90b3R5cGUucHJvZ3Jlc3NpdmVMYXp5TG9hZD1mdW5jdGlvbihlKXtlPWV8fDE7dmFyIHQsbyxzLG4scixsPXRoaXMsZD1pKFwiaW1nW2RhdGEtbGF6eV1cIixsLiRzbGlkZXIpO2QubGVuZ3RoPyh0PWQuZmlyc3QoKSxvPXQuYXR0cihcImRhdGEtbGF6eVwiKSxzPXQuYXR0cihcImRhdGEtc3Jjc2V0XCIpLG49dC5hdHRyKFwiZGF0YS1zaXplc1wiKXx8bC4kc2xpZGVyLmF0dHIoXCJkYXRhLXNpemVzXCIpLHI9ZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImltZ1wiKSxyLm9ubG9hZD1mdW5jdGlvbigpe3MmJih0LmF0dHIoXCJzcmNzZXRcIixzKSxuJiZ0LmF0dHIoXCJzaXplc1wiLG4pKSx0LmF0dHIoXCJzcmNcIixvKS5yZW1vdmVBdHRyKFwiZGF0YS1sYXp5IGRhdGEtc3Jjc2V0IGRhdGEtc2l6ZXNcIikucmVtb3ZlQ2xhc3MoXCJzbGljay1sb2FkaW5nXCIpLGwub3B0aW9ucy5hZGFwdGl2ZUhlaWdodD09PSEwJiZsLnNldFBvc2l0aW9uKCksbC4kc2xpZGVyLnRyaWdnZXIoXCJsYXp5TG9hZGVkXCIsW2wsdCxvXSksbC5wcm9ncmVzc2l2ZUxhenlMb2FkKCl9LHIub25lcnJvcj1mdW5jdGlvbigpe2U8Mz9zZXRUaW1lb3V0KGZ1bmN0aW9uKCl7bC5wcm9ncmVzc2l2ZUxhenlMb2FkKGUrMSl9LDUwMCk6KHQucmVtb3ZlQXR0cihcImRhdGEtbGF6eVwiKS5yZW1vdmVDbGFzcyhcInNsaWNrLWxvYWRpbmdcIikuYWRkQ2xhc3MoXCJzbGljay1sYXp5bG9hZC1lcnJvclwiKSxsLiRzbGlkZXIudHJpZ2dlcihcImxhenlMb2FkRXJyb3JcIixbbCx0LG9dKSxsLnByb2dyZXNzaXZlTGF6eUxvYWQoKSl9LHIuc3JjPW8pOmwuJHNsaWRlci50cmlnZ2VyKFwiYWxsSW1hZ2VzTG9hZGVkXCIsW2xdKX0sZS5wcm90b3R5cGUucmVmcmVzaD1mdW5jdGlvbihlKXt2YXIgdCxvLHM9dGhpcztvPXMuc2xpZGVDb3VudC1zLm9wdGlvbnMuc2xpZGVzVG9TaG93LCFzLm9wdGlvbnMuaW5maW5pdGUmJnMuY3VycmVudFNsaWRlPm8mJihzLmN1cnJlbnRTbGlkZT1vKSxzLnNsaWRlQ291bnQ8PXMub3B0aW9ucy5zbGlkZXNUb1Nob3cmJihzLmN1cnJlbnRTbGlkZT0wKSx0PXMuY3VycmVudFNsaWRlLHMuZGVzdHJveSghMCksaS5leHRlbmQocyxzLmluaXRpYWxzLHtjdXJyZW50U2xpZGU6dH0pLHMuaW5pdCgpLGV8fHMuY2hhbmdlU2xpZGUoe2RhdGE6e21lc3NhZ2U6XCJpbmRleFwiLGluZGV4OnR9fSwhMSl9LGUucHJvdG90eXBlLnJlZ2lzdGVyQnJlYWtwb2ludHM9ZnVuY3Rpb24oKXt2YXIgZSx0LG8scz10aGlzLG49cy5vcHRpb25zLnJlc3BvbnNpdmV8fG51bGw7aWYoXCJhcnJheVwiPT09aS50eXBlKG4pJiZuLmxlbmd0aCl7cy5yZXNwb25kVG89cy5vcHRpb25zLnJlc3BvbmRUb3x8XCJ3aW5kb3dcIjtmb3IoZSBpbiBuKWlmKG89cy5icmVha3BvaW50cy5sZW5ndGgtMSxuLmhhc093blByb3BlcnR5KGUpKXtmb3IodD1uW2VdLmJyZWFrcG9pbnQ7bz49MDspcy5icmVha3BvaW50c1tvXSYmcy5icmVha3BvaW50c1tvXT09PXQmJnMuYnJlYWtwb2ludHMuc3BsaWNlKG8sMSksby0tO3MuYnJlYWtwb2ludHMucHVzaCh0KSxzLmJyZWFrcG9pbnRTZXR0aW5nc1t0XT1uW2VdLnNldHRpbmdzfXMuYnJlYWtwb2ludHMuc29ydChmdW5jdGlvbihpLGUpe3JldHVybiBzLm9wdGlvbnMubW9iaWxlRmlyc3Q/aS1lOmUtaX0pfX0sZS5wcm90b3R5cGUucmVpbml0PWZ1bmN0aW9uKCl7dmFyIGU9dGhpcztlLiRzbGlkZXM9ZS4kc2xpZGVUcmFjay5jaGlsZHJlbihlLm9wdGlvbnMuc2xpZGUpLmFkZENsYXNzKFwic2xpY2stc2xpZGVcIiksZS5zbGlkZUNvdW50PWUuJHNsaWRlcy5sZW5ndGgsZS5jdXJyZW50U2xpZGU+PWUuc2xpZGVDb3VudCYmMCE9PWUuY3VycmVudFNsaWRlJiYoZS5jdXJyZW50U2xpZGU9ZS5jdXJyZW50U2xpZGUtZS5vcHRpb25zLnNsaWRlc1RvU2Nyb2xsKSxlLnNsaWRlQ291bnQ8PWUub3B0aW9ucy5zbGlkZXNUb1Nob3cmJihlLmN1cnJlbnRTbGlkZT0wKSxlLnJlZ2lzdGVyQnJlYWtwb2ludHMoKSxlLnNldFByb3BzKCksZS5zZXR1cEluZmluaXRlKCksZS5idWlsZEFycm93cygpLGUudXBkYXRlQXJyb3dzKCksZS5pbml0QXJyb3dFdmVudHMoKSxlLmJ1aWxkRG90cygpLGUudXBkYXRlRG90cygpLGUuaW5pdERvdEV2ZW50cygpLGUuY2xlYW5VcFNsaWRlRXZlbnRzKCksZS5pbml0U2xpZGVFdmVudHMoKSxlLmNoZWNrUmVzcG9uc2l2ZSghMSwhMCksZS5vcHRpb25zLmZvY3VzT25TZWxlY3Q9PT0hMCYmaShlLiRzbGlkZVRyYWNrKS5jaGlsZHJlbigpLm9uKFwiY2xpY2suc2xpY2tcIixlLnNlbGVjdEhhbmRsZXIpLGUuc2V0U2xpZGVDbGFzc2VzKFwibnVtYmVyXCI9PXR5cGVvZiBlLmN1cnJlbnRTbGlkZT9lLmN1cnJlbnRTbGlkZTowKSxlLnNldFBvc2l0aW9uKCksZS5mb2N1c0hhbmRsZXIoKSxlLnBhdXNlZD0hZS5vcHRpb25zLmF1dG9wbGF5LGUuYXV0b1BsYXkoKSxlLiRzbGlkZXIudHJpZ2dlcihcInJlSW5pdFwiLFtlXSl9LGUucHJvdG90eXBlLnJlc2l6ZT1mdW5jdGlvbigpe3ZhciBlPXRoaXM7aSh3aW5kb3cpLndpZHRoKCkhPT1lLndpbmRvd1dpZHRoJiYoY2xlYXJUaW1lb3V0KGUud2luZG93RGVsYXkpLGUud2luZG93RGVsYXk9d2luZG93LnNldFRpbWVvdXQoZnVuY3Rpb24oKXtlLndpbmRvd1dpZHRoPWkod2luZG93KS53aWR0aCgpLGUuY2hlY2tSZXNwb25zaXZlKCksZS51bnNsaWNrZWR8fGUuc2V0UG9zaXRpb24oKX0sNTApKX0sZS5wcm90b3R5cGUucmVtb3ZlU2xpZGU9ZS5wcm90b3R5cGUuc2xpY2tSZW1vdmU9ZnVuY3Rpb24oaSxlLHQpe3ZhciBvPXRoaXM7cmV0dXJuXCJib29sZWFuXCI9PXR5cGVvZiBpPyhlPWksaT1lPT09ITA/MDpvLnNsaWRlQ291bnQtMSk6aT1lPT09ITA/LS1pOmksIShvLnNsaWRlQ291bnQ8MXx8aTwwfHxpPm8uc2xpZGVDb3VudC0xKSYmKG8udW5sb2FkKCksdD09PSEwP28uJHNsaWRlVHJhY2suY2hpbGRyZW4oKS5yZW1vdmUoKTpvLiRzbGlkZVRyYWNrLmNoaWxkcmVuKHRoaXMub3B0aW9ucy5zbGlkZSkuZXEoaSkucmVtb3ZlKCksby4kc2xpZGVzPW8uJHNsaWRlVHJhY2suY2hpbGRyZW4odGhpcy5vcHRpb25zLnNsaWRlKSxvLiRzbGlkZVRyYWNrLmNoaWxkcmVuKHRoaXMub3B0aW9ucy5zbGlkZSkuZGV0YWNoKCksby4kc2xpZGVUcmFjay5hcHBlbmQoby4kc2xpZGVzKSxvLiRzbGlkZXNDYWNoZT1vLiRzbGlkZXMsdm9pZCBvLnJlaW5pdCgpKX0sZS5wcm90b3R5cGUuc2V0Q1NTPWZ1bmN0aW9uKGkpe3ZhciBlLHQsbz10aGlzLHM9e307by5vcHRpb25zLnJ0bD09PSEwJiYoaT0taSksZT1cImxlZnRcIj09by5wb3NpdGlvblByb3A/TWF0aC5jZWlsKGkpK1wicHhcIjpcIjBweFwiLHQ9XCJ0b3BcIj09by5wb3NpdGlvblByb3A/TWF0aC5jZWlsKGkpK1wicHhcIjpcIjBweFwiLHNbby5wb3NpdGlvblByb3BdPWksby50cmFuc2Zvcm1zRW5hYmxlZD09PSExP28uJHNsaWRlVHJhY2suY3NzKHMpOihzPXt9LG8uY3NzVHJhbnNpdGlvbnM9PT0hMT8oc1tvLmFuaW1UeXBlXT1cInRyYW5zbGF0ZShcIitlK1wiLCBcIit0K1wiKVwiLG8uJHNsaWRlVHJhY2suY3NzKHMpKTooc1tvLmFuaW1UeXBlXT1cInRyYW5zbGF0ZTNkKFwiK2UrXCIsIFwiK3QrXCIsIDBweClcIixvLiRzbGlkZVRyYWNrLmNzcyhzKSkpfSxlLnByb3RvdHlwZS5zZXREaW1lbnNpb25zPWZ1bmN0aW9uKCl7dmFyIGk9dGhpcztpLm9wdGlvbnMudmVydGljYWw9PT0hMT9pLm9wdGlvbnMuY2VudGVyTW9kZT09PSEwJiZpLiRsaXN0LmNzcyh7cGFkZGluZzpcIjBweCBcIitpLm9wdGlvbnMuY2VudGVyUGFkZGluZ30pOihpLiRsaXN0LmhlaWdodChpLiRzbGlkZXMuZmlyc3QoKS5vdXRlckhlaWdodCghMCkqaS5vcHRpb25zLnNsaWRlc1RvU2hvdyksaS5vcHRpb25zLmNlbnRlck1vZGU9PT0hMCYmaS4kbGlzdC5jc3Moe3BhZGRpbmc6aS5vcHRpb25zLmNlbnRlclBhZGRpbmcrXCIgMHB4XCJ9KSksaS5saXN0V2lkdGg9aS4kbGlzdC53aWR0aCgpLGkubGlzdEhlaWdodD1pLiRsaXN0LmhlaWdodCgpLGkub3B0aW9ucy52ZXJ0aWNhbD09PSExJiZpLm9wdGlvbnMudmFyaWFibGVXaWR0aD09PSExPyhpLnNsaWRlV2lkdGg9TWF0aC5jZWlsKGkubGlzdFdpZHRoL2kub3B0aW9ucy5zbGlkZXNUb1Nob3cpLGkuJHNsaWRlVHJhY2sud2lkdGgoTWF0aC5jZWlsKGkuc2xpZGVXaWR0aCppLiRzbGlkZVRyYWNrLmNoaWxkcmVuKFwiLnNsaWNrLXNsaWRlXCIpLmxlbmd0aCkpKTppLm9wdGlvbnMudmFyaWFibGVXaWR0aD09PSEwP2kuJHNsaWRlVHJhY2sud2lkdGgoNWUzKmkuc2xpZGVDb3VudCk6KGkuc2xpZGVXaWR0aD1NYXRoLmNlaWwoaS5saXN0V2lkdGgpLGkuJHNsaWRlVHJhY2suaGVpZ2h0KE1hdGguY2VpbChpLiRzbGlkZXMuZmlyc3QoKS5vdXRlckhlaWdodCghMCkqaS4kc2xpZGVUcmFjay5jaGlsZHJlbihcIi5zbGljay1zbGlkZVwiKS5sZW5ndGgpKSk7dmFyIGU9aS4kc2xpZGVzLmZpcnN0KCkub3V0ZXJXaWR0aCghMCktaS4kc2xpZGVzLmZpcnN0KCkud2lkdGgoKTtpLm9wdGlvbnMudmFyaWFibGVXaWR0aD09PSExJiZpLiRzbGlkZVRyYWNrLmNoaWxkcmVuKFwiLnNsaWNrLXNsaWRlXCIpLndpZHRoKGkuc2xpZGVXaWR0aC1lKX0sZS5wcm90b3R5cGUuc2V0RmFkZT1mdW5jdGlvbigpe3ZhciBlLHQ9dGhpczt0LiRzbGlkZXMuZWFjaChmdW5jdGlvbihvLHMpe2U9dC5zbGlkZVdpZHRoKm8qLTEsdC5vcHRpb25zLnJ0bD09PSEwP2kocykuY3NzKHtwb3NpdGlvbjpcInJlbGF0aXZlXCIscmlnaHQ6ZSx0b3A6MCx6SW5kZXg6dC5vcHRpb25zLnpJbmRleC0yLG9wYWNpdHk6MH0pOmkocykuY3NzKHtwb3NpdGlvbjpcInJlbGF0aXZlXCIsbGVmdDplLHRvcDowLHpJbmRleDp0Lm9wdGlvbnMuekluZGV4LTIsb3BhY2l0eTowfSl9KSx0LiRzbGlkZXMuZXEodC5jdXJyZW50U2xpZGUpLmNzcyh7ekluZGV4OnQub3B0aW9ucy56SW5kZXgtMSxvcGFjaXR5OjF9KX0sZS5wcm90b3R5cGUuc2V0SGVpZ2h0PWZ1bmN0aW9uKCl7dmFyIGk9dGhpcztpZigxPT09aS5vcHRpb25zLnNsaWRlc1RvU2hvdyYmaS5vcHRpb25zLmFkYXB0aXZlSGVpZ2h0PT09ITAmJmkub3B0aW9ucy52ZXJ0aWNhbD09PSExKXt2YXIgZT1pLiRzbGlkZXMuZXEoaS5jdXJyZW50U2xpZGUpLm91dGVySGVpZ2h0KCEwKTtpLiRsaXN0LmNzcyhcImhlaWdodFwiLGUpfX0sZS5wcm90b3R5cGUuc2V0T3B0aW9uPWUucHJvdG90eXBlLnNsaWNrU2V0T3B0aW9uPWZ1bmN0aW9uKCl7dmFyIGUsdCxvLHMsbixyPXRoaXMsbD0hMTtpZihcIm9iamVjdFwiPT09aS50eXBlKGFyZ3VtZW50c1swXSk/KG89YXJndW1lbnRzWzBdLGw9YXJndW1lbnRzWzFdLG49XCJtdWx0aXBsZVwiKTpcInN0cmluZ1wiPT09aS50eXBlKGFyZ3VtZW50c1swXSkmJihvPWFyZ3VtZW50c1swXSxzPWFyZ3VtZW50c1sxXSxsPWFyZ3VtZW50c1syXSxcInJlc3BvbnNpdmVcIj09PWFyZ3VtZW50c1swXSYmXCJhcnJheVwiPT09aS50eXBlKGFyZ3VtZW50c1sxXSk/bj1cInJlc3BvbnNpdmVcIjpcInVuZGVmaW5lZFwiIT10eXBlb2YgYXJndW1lbnRzWzFdJiYobj1cInNpbmdsZVwiKSksXCJzaW5nbGVcIj09PW4pci5vcHRpb25zW29dPXM7ZWxzZSBpZihcIm11bHRpcGxlXCI9PT1uKWkuZWFjaChvLGZ1bmN0aW9uKGksZSl7ci5vcHRpb25zW2ldPWV9KTtlbHNlIGlmKFwicmVzcG9uc2l2ZVwiPT09bilmb3IodCBpbiBzKWlmKFwiYXJyYXlcIiE9PWkudHlwZShyLm9wdGlvbnMucmVzcG9uc2l2ZSkpci5vcHRpb25zLnJlc3BvbnNpdmU9W3NbdF1dO2Vsc2V7Zm9yKGU9ci5vcHRpb25zLnJlc3BvbnNpdmUubGVuZ3RoLTE7ZT49MDspci5vcHRpb25zLnJlc3BvbnNpdmVbZV0uYnJlYWtwb2ludD09PXNbdF0uYnJlYWtwb2ludCYmci5vcHRpb25zLnJlc3BvbnNpdmUuc3BsaWNlKGUsMSksZS0tO3Iub3B0aW9ucy5yZXNwb25zaXZlLnB1c2goc1t0XSl9bCYmKHIudW5sb2FkKCksci5yZWluaXQoKSl9LGUucHJvdG90eXBlLnNldFBvc2l0aW9uPWZ1bmN0aW9uKCl7dmFyIGk9dGhpcztpLnNldERpbWVuc2lvbnMoKSxpLnNldEhlaWdodCgpLGkub3B0aW9ucy5mYWRlPT09ITE/aS5zZXRDU1MoaS5nZXRMZWZ0KGkuY3VycmVudFNsaWRlKSk6aS5zZXRGYWRlKCksaS4kc2xpZGVyLnRyaWdnZXIoXCJzZXRQb3NpdGlvblwiLFtpXSl9LGUucHJvdG90eXBlLnNldFByb3BzPWZ1bmN0aW9uKCl7dmFyIGk9dGhpcyxlPWRvY3VtZW50LmJvZHkuc3R5bGU7aS5wb3NpdGlvblByb3A9aS5vcHRpb25zLnZlcnRpY2FsPT09ITA/XCJ0b3BcIjpcImxlZnRcIixcclxuXCJ0b3BcIj09PWkucG9zaXRpb25Qcm9wP2kuJHNsaWRlci5hZGRDbGFzcyhcInNsaWNrLXZlcnRpY2FsXCIpOmkuJHNsaWRlci5yZW1vdmVDbGFzcyhcInNsaWNrLXZlcnRpY2FsXCIpLHZvaWQgMD09PWUuV2Via2l0VHJhbnNpdGlvbiYmdm9pZCAwPT09ZS5Nb3pUcmFuc2l0aW9uJiZ2b2lkIDA9PT1lLm1zVHJhbnNpdGlvbnx8aS5vcHRpb25zLnVzZUNTUz09PSEwJiYoaS5jc3NUcmFuc2l0aW9ucz0hMCksaS5vcHRpb25zLmZhZGUmJihcIm51bWJlclwiPT10eXBlb2YgaS5vcHRpb25zLnpJbmRleD9pLm9wdGlvbnMuekluZGV4PDMmJihpLm9wdGlvbnMuekluZGV4PTMpOmkub3B0aW9ucy56SW5kZXg9aS5kZWZhdWx0cy56SW5kZXgpLHZvaWQgMCE9PWUuT1RyYW5zZm9ybSYmKGkuYW5pbVR5cGU9XCJPVHJhbnNmb3JtXCIsaS50cmFuc2Zvcm1UeXBlPVwiLW8tdHJhbnNmb3JtXCIsaS50cmFuc2l0aW9uVHlwZT1cIk9UcmFuc2l0aW9uXCIsdm9pZCAwPT09ZS5wZXJzcGVjdGl2ZVByb3BlcnR5JiZ2b2lkIDA9PT1lLndlYmtpdFBlcnNwZWN0aXZlJiYoaS5hbmltVHlwZT0hMSkpLHZvaWQgMCE9PWUuTW96VHJhbnNmb3JtJiYoaS5hbmltVHlwZT1cIk1velRyYW5zZm9ybVwiLGkudHJhbnNmb3JtVHlwZT1cIi1tb3otdHJhbnNmb3JtXCIsaS50cmFuc2l0aW9uVHlwZT1cIk1velRyYW5zaXRpb25cIix2b2lkIDA9PT1lLnBlcnNwZWN0aXZlUHJvcGVydHkmJnZvaWQgMD09PWUuTW96UGVyc3BlY3RpdmUmJihpLmFuaW1UeXBlPSExKSksdm9pZCAwIT09ZS53ZWJraXRUcmFuc2Zvcm0mJihpLmFuaW1UeXBlPVwid2Via2l0VHJhbnNmb3JtXCIsaS50cmFuc2Zvcm1UeXBlPVwiLXdlYmtpdC10cmFuc2Zvcm1cIixpLnRyYW5zaXRpb25UeXBlPVwid2Via2l0VHJhbnNpdGlvblwiLHZvaWQgMD09PWUucGVyc3BlY3RpdmVQcm9wZXJ0eSYmdm9pZCAwPT09ZS53ZWJraXRQZXJzcGVjdGl2ZSYmKGkuYW5pbVR5cGU9ITEpKSx2b2lkIDAhPT1lLm1zVHJhbnNmb3JtJiYoaS5hbmltVHlwZT1cIm1zVHJhbnNmb3JtXCIsaS50cmFuc2Zvcm1UeXBlPVwiLW1zLXRyYW5zZm9ybVwiLGkudHJhbnNpdGlvblR5cGU9XCJtc1RyYW5zaXRpb25cIix2b2lkIDA9PT1lLm1zVHJhbnNmb3JtJiYoaS5hbmltVHlwZT0hMSkpLHZvaWQgMCE9PWUudHJhbnNmb3JtJiZpLmFuaW1UeXBlIT09ITEmJihpLmFuaW1UeXBlPVwidHJhbnNmb3JtXCIsaS50cmFuc2Zvcm1UeXBlPVwidHJhbnNmb3JtXCIsaS50cmFuc2l0aW9uVHlwZT1cInRyYW5zaXRpb25cIiksaS50cmFuc2Zvcm1zRW5hYmxlZD1pLm9wdGlvbnMudXNlVHJhbnNmb3JtJiZudWxsIT09aS5hbmltVHlwZSYmaS5hbmltVHlwZSE9PSExfSxlLnByb3RvdHlwZS5zZXRTbGlkZUNsYXNzZXM9ZnVuY3Rpb24oaSl7dmFyIGUsdCxvLHMsbj10aGlzO2lmKHQ9bi4kc2xpZGVyLmZpbmQoXCIuc2xpY2stc2xpZGVcIikucmVtb3ZlQ2xhc3MoXCJzbGljay1hY3RpdmUgc2xpY2stY2VudGVyIHNsaWNrLWN1cnJlbnRcIikuYXR0cihcImFyaWEtaGlkZGVuXCIsXCJ0cnVlXCIpLG4uJHNsaWRlcy5lcShpKS5hZGRDbGFzcyhcInNsaWNrLWN1cnJlbnRcIiksbi5vcHRpb25zLmNlbnRlck1vZGU9PT0hMCl7dmFyIHI9bi5vcHRpb25zLnNsaWRlc1RvU2hvdyUyPT09MD8xOjA7ZT1NYXRoLmZsb29yKG4ub3B0aW9ucy5zbGlkZXNUb1Nob3cvMiksbi5vcHRpb25zLmluZmluaXRlPT09ITAmJihpPj1lJiZpPD1uLnNsaWRlQ291bnQtMS1lP24uJHNsaWRlcy5zbGljZShpLWUrcixpK2UrMSkuYWRkQ2xhc3MoXCJzbGljay1hY3RpdmVcIikuYXR0cihcImFyaWEtaGlkZGVuXCIsXCJmYWxzZVwiKToobz1uLm9wdGlvbnMuc2xpZGVzVG9TaG93K2ksdC5zbGljZShvLWUrMStyLG8rZSsyKS5hZGRDbGFzcyhcInNsaWNrLWFjdGl2ZVwiKS5hdHRyKFwiYXJpYS1oaWRkZW5cIixcImZhbHNlXCIpKSwwPT09aT90LmVxKHQubGVuZ3RoLTEtbi5vcHRpb25zLnNsaWRlc1RvU2hvdykuYWRkQ2xhc3MoXCJzbGljay1jZW50ZXJcIik6aT09PW4uc2xpZGVDb3VudC0xJiZ0LmVxKG4ub3B0aW9ucy5zbGlkZXNUb1Nob3cpLmFkZENsYXNzKFwic2xpY2stY2VudGVyXCIpKSxuLiRzbGlkZXMuZXEoaSkuYWRkQ2xhc3MoXCJzbGljay1jZW50ZXJcIil9ZWxzZSBpPj0wJiZpPD1uLnNsaWRlQ291bnQtbi5vcHRpb25zLnNsaWRlc1RvU2hvdz9uLiRzbGlkZXMuc2xpY2UoaSxpK24ub3B0aW9ucy5zbGlkZXNUb1Nob3cpLmFkZENsYXNzKFwic2xpY2stYWN0aXZlXCIpLmF0dHIoXCJhcmlhLWhpZGRlblwiLFwiZmFsc2VcIik6dC5sZW5ndGg8PW4ub3B0aW9ucy5zbGlkZXNUb1Nob3c/dC5hZGRDbGFzcyhcInNsaWNrLWFjdGl2ZVwiKS5hdHRyKFwiYXJpYS1oaWRkZW5cIixcImZhbHNlXCIpOihzPW4uc2xpZGVDb3VudCVuLm9wdGlvbnMuc2xpZGVzVG9TaG93LG89bi5vcHRpb25zLmluZmluaXRlPT09ITA/bi5vcHRpb25zLnNsaWRlc1RvU2hvdytpOmksbi5vcHRpb25zLnNsaWRlc1RvU2hvdz09bi5vcHRpb25zLnNsaWRlc1RvU2Nyb2xsJiZuLnNsaWRlQ291bnQtaTxuLm9wdGlvbnMuc2xpZGVzVG9TaG93P3Quc2xpY2Uoby0obi5vcHRpb25zLnNsaWRlc1RvU2hvdy1zKSxvK3MpLmFkZENsYXNzKFwic2xpY2stYWN0aXZlXCIpLmF0dHIoXCJhcmlhLWhpZGRlblwiLFwiZmFsc2VcIik6dC5zbGljZShvLG8rbi5vcHRpb25zLnNsaWRlc1RvU2hvdykuYWRkQ2xhc3MoXCJzbGljay1hY3RpdmVcIikuYXR0cihcImFyaWEtaGlkZGVuXCIsXCJmYWxzZVwiKSk7XCJvbmRlbWFuZFwiIT09bi5vcHRpb25zLmxhenlMb2FkJiZcImFudGljaXBhdGVkXCIhPT1uLm9wdGlvbnMubGF6eUxvYWR8fG4ubGF6eUxvYWQoKX0sZS5wcm90b3R5cGUuc2V0dXBJbmZpbml0ZT1mdW5jdGlvbigpe3ZhciBlLHQsbyxzPXRoaXM7aWYocy5vcHRpb25zLmZhZGU9PT0hMCYmKHMub3B0aW9ucy5jZW50ZXJNb2RlPSExKSxzLm9wdGlvbnMuaW5maW5pdGU9PT0hMCYmcy5vcHRpb25zLmZhZGU9PT0hMSYmKHQ9bnVsbCxzLnNsaWRlQ291bnQ+cy5vcHRpb25zLnNsaWRlc1RvU2hvdykpe2ZvcihvPXMub3B0aW9ucy5jZW50ZXJNb2RlPT09ITA/cy5vcHRpb25zLnNsaWRlc1RvU2hvdysxOnMub3B0aW9ucy5zbGlkZXNUb1Nob3csZT1zLnNsaWRlQ291bnQ7ZT5zLnNsaWRlQ291bnQtbztlLT0xKXQ9ZS0xLGkocy4kc2xpZGVzW3RdKS5jbG9uZSghMCkuYXR0cihcImlkXCIsXCJcIikuYXR0cihcImRhdGEtc2xpY2staW5kZXhcIix0LXMuc2xpZGVDb3VudCkucHJlcGVuZFRvKHMuJHNsaWRlVHJhY2spLmFkZENsYXNzKFwic2xpY2stY2xvbmVkXCIpO2ZvcihlPTA7ZTxvK3Muc2xpZGVDb3VudDtlKz0xKXQ9ZSxpKHMuJHNsaWRlc1t0XSkuY2xvbmUoITApLmF0dHIoXCJpZFwiLFwiXCIpLmF0dHIoXCJkYXRhLXNsaWNrLWluZGV4XCIsdCtzLnNsaWRlQ291bnQpLmFwcGVuZFRvKHMuJHNsaWRlVHJhY2spLmFkZENsYXNzKFwic2xpY2stY2xvbmVkXCIpO3MuJHNsaWRlVHJhY2suZmluZChcIi5zbGljay1jbG9uZWRcIikuZmluZChcIltpZF1cIikuZWFjaChmdW5jdGlvbigpe2kodGhpcykuYXR0cihcImlkXCIsXCJcIil9KX19LGUucHJvdG90eXBlLmludGVycnVwdD1mdW5jdGlvbihpKXt2YXIgZT10aGlzO2l8fGUuYXV0b1BsYXkoKSxlLmludGVycnVwdGVkPWl9LGUucHJvdG90eXBlLnNlbGVjdEhhbmRsZXI9ZnVuY3Rpb24oZSl7dmFyIHQ9dGhpcyxvPWkoZS50YXJnZXQpLmlzKFwiLnNsaWNrLXNsaWRlXCIpP2koZS50YXJnZXQpOmkoZS50YXJnZXQpLnBhcmVudHMoXCIuc2xpY2stc2xpZGVcIikscz1wYXJzZUludChvLmF0dHIoXCJkYXRhLXNsaWNrLWluZGV4XCIpKTtyZXR1cm4gc3x8KHM9MCksdC5zbGlkZUNvdW50PD10Lm9wdGlvbnMuc2xpZGVzVG9TaG93P3ZvaWQgdC5zbGlkZUhhbmRsZXIocywhMSwhMCk6dm9pZCB0LnNsaWRlSGFuZGxlcihzKX0sZS5wcm90b3R5cGUuc2xpZGVIYW5kbGVyPWZ1bmN0aW9uKGksZSx0KXt2YXIgbyxzLG4scixsLGQ9bnVsbCxhPXRoaXM7aWYoZT1lfHwhMSwhKGEuYW5pbWF0aW5nPT09ITAmJmEub3B0aW9ucy53YWl0Rm9yQW5pbWF0ZT09PSEwfHxhLm9wdGlvbnMuZmFkZT09PSEwJiZhLmN1cnJlbnRTbGlkZT09PWkpKXJldHVybiBlPT09ITEmJmEuYXNOYXZGb3IoaSksbz1pLGQ9YS5nZXRMZWZ0KG8pLHI9YS5nZXRMZWZ0KGEuY3VycmVudFNsaWRlKSxhLmN1cnJlbnRMZWZ0PW51bGw9PT1hLnN3aXBlTGVmdD9yOmEuc3dpcGVMZWZ0LGEub3B0aW9ucy5pbmZpbml0ZT09PSExJiZhLm9wdGlvbnMuY2VudGVyTW9kZT09PSExJiYoaTwwfHxpPmEuZ2V0RG90Q291bnQoKSphLm9wdGlvbnMuc2xpZGVzVG9TY3JvbGwpP3ZvaWQoYS5vcHRpb25zLmZhZGU9PT0hMSYmKG89YS5jdXJyZW50U2xpZGUsdCE9PSEwJiZhLnNsaWRlQ291bnQ+YS5vcHRpb25zLnNsaWRlc1RvU2hvdz9hLmFuaW1hdGVTbGlkZShyLGZ1bmN0aW9uKCl7YS5wb3N0U2xpZGUobyl9KTphLnBvc3RTbGlkZShvKSkpOmEub3B0aW9ucy5pbmZpbml0ZT09PSExJiZhLm9wdGlvbnMuY2VudGVyTW9kZT09PSEwJiYoaTwwfHxpPmEuc2xpZGVDb3VudC1hLm9wdGlvbnMuc2xpZGVzVG9TY3JvbGwpP3ZvaWQoYS5vcHRpb25zLmZhZGU9PT0hMSYmKG89YS5jdXJyZW50U2xpZGUsdCE9PSEwJiZhLnNsaWRlQ291bnQ+YS5vcHRpb25zLnNsaWRlc1RvU2hvdz9hLmFuaW1hdGVTbGlkZShyLGZ1bmN0aW9uKCl7YS5wb3N0U2xpZGUobyl9KTphLnBvc3RTbGlkZShvKSkpOihhLm9wdGlvbnMuYXV0b3BsYXkmJmNsZWFySW50ZXJ2YWwoYS5hdXRvUGxheVRpbWVyKSxzPW88MD9hLnNsaWRlQ291bnQlYS5vcHRpb25zLnNsaWRlc1RvU2Nyb2xsIT09MD9hLnNsaWRlQ291bnQtYS5zbGlkZUNvdW50JWEub3B0aW9ucy5zbGlkZXNUb1Njcm9sbDphLnNsaWRlQ291bnQrbzpvPj1hLnNsaWRlQ291bnQ/YS5zbGlkZUNvdW50JWEub3B0aW9ucy5zbGlkZXNUb1Njcm9sbCE9PTA/MDpvLWEuc2xpZGVDb3VudDpvLGEuYW5pbWF0aW5nPSEwLGEuJHNsaWRlci50cmlnZ2VyKFwiYmVmb3JlQ2hhbmdlXCIsW2EsYS5jdXJyZW50U2xpZGUsc10pLG49YS5jdXJyZW50U2xpZGUsYS5jdXJyZW50U2xpZGU9cyxhLnNldFNsaWRlQ2xhc3NlcyhhLmN1cnJlbnRTbGlkZSksYS5vcHRpb25zLmFzTmF2Rm9yJiYobD1hLmdldE5hdlRhcmdldCgpLGw9bC5zbGljayhcImdldFNsaWNrXCIpLGwuc2xpZGVDb3VudDw9bC5vcHRpb25zLnNsaWRlc1RvU2hvdyYmbC5zZXRTbGlkZUNsYXNzZXMoYS5jdXJyZW50U2xpZGUpKSxhLnVwZGF0ZURvdHMoKSxhLnVwZGF0ZUFycm93cygpLGEub3B0aW9ucy5mYWRlPT09ITA/KHQhPT0hMD8oYS5mYWRlU2xpZGVPdXQobiksYS5mYWRlU2xpZGUocyxmdW5jdGlvbigpe2EucG9zdFNsaWRlKHMpfSkpOmEucG9zdFNsaWRlKHMpLHZvaWQgYS5hbmltYXRlSGVpZ2h0KCkpOnZvaWQodCE9PSEwJiZhLnNsaWRlQ291bnQ+YS5vcHRpb25zLnNsaWRlc1RvU2hvdz9hLmFuaW1hdGVTbGlkZShkLGZ1bmN0aW9uKCl7YS5wb3N0U2xpZGUocyl9KTphLnBvc3RTbGlkZShzKSkpfSxlLnByb3RvdHlwZS5zdGFydExvYWQ9ZnVuY3Rpb24oKXt2YXIgaT10aGlzO2kub3B0aW9ucy5hcnJvd3M9PT0hMCYmaS5zbGlkZUNvdW50Pmkub3B0aW9ucy5zbGlkZXNUb1Nob3cmJihpLiRwcmV2QXJyb3cuaGlkZSgpLGkuJG5leHRBcnJvdy5oaWRlKCkpLGkub3B0aW9ucy5kb3RzPT09ITAmJmkuc2xpZGVDb3VudD5pLm9wdGlvbnMuc2xpZGVzVG9TaG93JiZpLiRkb3RzLmhpZGUoKSxpLiRzbGlkZXIuYWRkQ2xhc3MoXCJzbGljay1sb2FkaW5nXCIpfSxlLnByb3RvdHlwZS5zd2lwZURpcmVjdGlvbj1mdW5jdGlvbigpe3ZhciBpLGUsdCxvLHM9dGhpcztyZXR1cm4gaT1zLnRvdWNoT2JqZWN0LnN0YXJ0WC1zLnRvdWNoT2JqZWN0LmN1clgsZT1zLnRvdWNoT2JqZWN0LnN0YXJ0WS1zLnRvdWNoT2JqZWN0LmN1clksdD1NYXRoLmF0YW4yKGUsaSksbz1NYXRoLnJvdW5kKDE4MCp0L01hdGguUEkpLG88MCYmKG89MzYwLU1hdGguYWJzKG8pKSxvPD00NSYmbz49MD9zLm9wdGlvbnMucnRsPT09ITE/XCJsZWZ0XCI6XCJyaWdodFwiOm88PTM2MCYmbz49MzE1P3Mub3B0aW9ucy5ydGw9PT0hMT9cImxlZnRcIjpcInJpZ2h0XCI6bz49MTM1JiZvPD0yMjU/cy5vcHRpb25zLnJ0bD09PSExP1wicmlnaHRcIjpcImxlZnRcIjpzLm9wdGlvbnMudmVydGljYWxTd2lwaW5nPT09ITA/bz49MzUmJm88PTEzNT9cImRvd25cIjpcInVwXCI6XCJ2ZXJ0aWNhbFwifSxlLnByb3RvdHlwZS5zd2lwZUVuZD1mdW5jdGlvbihpKXt2YXIgZSx0LG89dGhpcztpZihvLmRyYWdnaW5nPSExLG8uc3dpcGluZz0hMSxvLnNjcm9sbGluZylyZXR1cm4gby5zY3JvbGxpbmc9ITEsITE7aWYoby5pbnRlcnJ1cHRlZD0hMSxvLnNob3VsZENsaWNrPSEoby50b3VjaE9iamVjdC5zd2lwZUxlbmd0aD4xMCksdm9pZCAwPT09by50b3VjaE9iamVjdC5jdXJYKXJldHVybiExO2lmKG8udG91Y2hPYmplY3QuZWRnZUhpdD09PSEwJiZvLiRzbGlkZXIudHJpZ2dlcihcImVkZ2VcIixbbyxvLnN3aXBlRGlyZWN0aW9uKCldKSxvLnRvdWNoT2JqZWN0LnN3aXBlTGVuZ3RoPj1vLnRvdWNoT2JqZWN0Lm1pblN3aXBlKXtzd2l0Y2godD1vLnN3aXBlRGlyZWN0aW9uKCkpe2Nhc2VcImxlZnRcIjpjYXNlXCJkb3duXCI6ZT1vLm9wdGlvbnMuc3dpcGVUb1NsaWRlP28uY2hlY2tOYXZpZ2FibGUoby5jdXJyZW50U2xpZGUrby5nZXRTbGlkZUNvdW50KCkpOm8uY3VycmVudFNsaWRlK28uZ2V0U2xpZGVDb3VudCgpLG8uY3VycmVudERpcmVjdGlvbj0wO2JyZWFrO2Nhc2VcInJpZ2h0XCI6Y2FzZVwidXBcIjplPW8ub3B0aW9ucy5zd2lwZVRvU2xpZGU/by5jaGVja05hdmlnYWJsZShvLmN1cnJlbnRTbGlkZS1vLmdldFNsaWRlQ291bnQoKSk6by5jdXJyZW50U2xpZGUtby5nZXRTbGlkZUNvdW50KCksby5jdXJyZW50RGlyZWN0aW9uPTF9XCJ2ZXJ0aWNhbFwiIT10JiYoby5zbGlkZUhhbmRsZXIoZSksby50b3VjaE9iamVjdD17fSxvLiRzbGlkZXIudHJpZ2dlcihcInN3aXBlXCIsW28sdF0pKX1lbHNlIG8udG91Y2hPYmplY3Quc3RhcnRYIT09by50b3VjaE9iamVjdC5jdXJYJiYoby5zbGlkZUhhbmRsZXIoby5jdXJyZW50U2xpZGUpLG8udG91Y2hPYmplY3Q9e30pfSxlLnByb3RvdHlwZS5zd2lwZUhhbmRsZXI9ZnVuY3Rpb24oaSl7dmFyIGU9dGhpcztpZighKGUub3B0aW9ucy5zd2lwZT09PSExfHxcIm9udG91Y2hlbmRcImluIGRvY3VtZW50JiZlLm9wdGlvbnMuc3dpcGU9PT0hMXx8ZS5vcHRpb25zLmRyYWdnYWJsZT09PSExJiZpLnR5cGUuaW5kZXhPZihcIm1vdXNlXCIpIT09LTEpKXN3aXRjaChlLnRvdWNoT2JqZWN0LmZpbmdlckNvdW50PWkub3JpZ2luYWxFdmVudCYmdm9pZCAwIT09aS5vcmlnaW5hbEV2ZW50LnRvdWNoZXM/aS5vcmlnaW5hbEV2ZW50LnRvdWNoZXMubGVuZ3RoOjEsZS50b3VjaE9iamVjdC5taW5Td2lwZT1lLmxpc3RXaWR0aC9lLm9wdGlvbnMudG91Y2hUaHJlc2hvbGQsZS5vcHRpb25zLnZlcnRpY2FsU3dpcGluZz09PSEwJiYoZS50b3VjaE9iamVjdC5taW5Td2lwZT1lLmxpc3RIZWlnaHQvZS5vcHRpb25zLnRvdWNoVGhyZXNob2xkKSxpLmRhdGEuYWN0aW9uKXtjYXNlXCJzdGFydFwiOmUuc3dpcGVTdGFydChpKTticmVhaztjYXNlXCJtb3ZlXCI6ZS5zd2lwZU1vdmUoaSk7YnJlYWs7Y2FzZVwiZW5kXCI6ZS5zd2lwZUVuZChpKX19LGUucHJvdG90eXBlLnN3aXBlTW92ZT1mdW5jdGlvbihpKXt2YXIgZSx0LG8scyxuLHIsbD10aGlzO3JldHVybiBuPXZvaWQgMCE9PWkub3JpZ2luYWxFdmVudD9pLm9yaWdpbmFsRXZlbnQudG91Y2hlczpudWxsLCEoIWwuZHJhZ2dpbmd8fGwuc2Nyb2xsaW5nfHxuJiYxIT09bi5sZW5ndGgpJiYoZT1sLmdldExlZnQobC5jdXJyZW50U2xpZGUpLGwudG91Y2hPYmplY3QuY3VyWD12b2lkIDAhPT1uP25bMF0ucGFnZVg6aS5jbGllbnRYLGwudG91Y2hPYmplY3QuY3VyWT12b2lkIDAhPT1uP25bMF0ucGFnZVk6aS5jbGllbnRZLGwudG91Y2hPYmplY3Quc3dpcGVMZW5ndGg9TWF0aC5yb3VuZChNYXRoLnNxcnQoTWF0aC5wb3cobC50b3VjaE9iamVjdC5jdXJYLWwudG91Y2hPYmplY3Quc3RhcnRYLDIpKSkscj1NYXRoLnJvdW5kKE1hdGguc3FydChNYXRoLnBvdyhsLnRvdWNoT2JqZWN0LmN1clktbC50b3VjaE9iamVjdC5zdGFydFksMikpKSwhbC5vcHRpb25zLnZlcnRpY2FsU3dpcGluZyYmIWwuc3dpcGluZyYmcj40PyhsLnNjcm9sbGluZz0hMCwhMSk6KGwub3B0aW9ucy52ZXJ0aWNhbFN3aXBpbmc9PT0hMCYmKGwudG91Y2hPYmplY3Quc3dpcGVMZW5ndGg9ciksdD1sLnN3aXBlRGlyZWN0aW9uKCksdm9pZCAwIT09aS5vcmlnaW5hbEV2ZW50JiZsLnRvdWNoT2JqZWN0LnN3aXBlTGVuZ3RoPjQmJihsLnN3aXBpbmc9ITAsaS5wcmV2ZW50RGVmYXVsdCgpKSxzPShsLm9wdGlvbnMucnRsPT09ITE/MTotMSkqKGwudG91Y2hPYmplY3QuY3VyWD5sLnRvdWNoT2JqZWN0LnN0YXJ0WD8xOi0xKSxsLm9wdGlvbnMudmVydGljYWxTd2lwaW5nPT09ITAmJihzPWwudG91Y2hPYmplY3QuY3VyWT5sLnRvdWNoT2JqZWN0LnN0YXJ0WT8xOi0xKSxvPWwudG91Y2hPYmplY3Quc3dpcGVMZW5ndGgsbC50b3VjaE9iamVjdC5lZGdlSGl0PSExLGwub3B0aW9ucy5pbmZpbml0ZT09PSExJiYoMD09PWwuY3VycmVudFNsaWRlJiZcInJpZ2h0XCI9PT10fHxsLmN1cnJlbnRTbGlkZT49bC5nZXREb3RDb3VudCgpJiZcImxlZnRcIj09PXQpJiYobz1sLnRvdWNoT2JqZWN0LnN3aXBlTGVuZ3RoKmwub3B0aW9ucy5lZGdlRnJpY3Rpb24sbC50b3VjaE9iamVjdC5lZGdlSGl0PSEwKSxsLm9wdGlvbnMudmVydGljYWw9PT0hMT9sLnN3aXBlTGVmdD1lK28qczpsLnN3aXBlTGVmdD1lK28qKGwuJGxpc3QuaGVpZ2h0KCkvbC5saXN0V2lkdGgpKnMsbC5vcHRpb25zLnZlcnRpY2FsU3dpcGluZz09PSEwJiYobC5zd2lwZUxlZnQ9ZStvKnMpLGwub3B0aW9ucy5mYWRlIT09ITAmJmwub3B0aW9ucy50b3VjaE1vdmUhPT0hMSYmKGwuYW5pbWF0aW5nPT09ITA/KGwuc3dpcGVMZWZ0PW51bGwsITEpOnZvaWQgbC5zZXRDU1MobC5zd2lwZUxlZnQpKSkpfSxlLnByb3RvdHlwZS5zd2lwZVN0YXJ0PWZ1bmN0aW9uKGkpe3ZhciBlLHQ9dGhpcztyZXR1cm4gdC5pbnRlcnJ1cHRlZD0hMCwxIT09dC50b3VjaE9iamVjdC5maW5nZXJDb3VudHx8dC5zbGlkZUNvdW50PD10Lm9wdGlvbnMuc2xpZGVzVG9TaG93Pyh0LnRvdWNoT2JqZWN0PXt9LCExKToodm9pZCAwIT09aS5vcmlnaW5hbEV2ZW50JiZ2b2lkIDAhPT1pLm9yaWdpbmFsRXZlbnQudG91Y2hlcyYmKGU9aS5vcmlnaW5hbEV2ZW50LnRvdWNoZXNbMF0pLHQudG91Y2hPYmplY3Quc3RhcnRYPXQudG91Y2hPYmplY3QuY3VyWD12b2lkIDAhPT1lP2UucGFnZVg6aS5jbGllbnRYLHQudG91Y2hPYmplY3Quc3RhcnRZPXQudG91Y2hPYmplY3QuY3VyWT12b2lkIDAhPT1lP2UucGFnZVk6aS5jbGllbnRZLHZvaWQodC5kcmFnZ2luZz0hMCkpfSxlLnByb3RvdHlwZS51bmZpbHRlclNsaWRlcz1lLnByb3RvdHlwZS5zbGlja1VuZmlsdGVyPWZ1bmN0aW9uKCl7dmFyIGk9dGhpcztudWxsIT09aS4kc2xpZGVzQ2FjaGUmJihpLnVubG9hZCgpLGkuJHNsaWRlVHJhY2suY2hpbGRyZW4odGhpcy5vcHRpb25zLnNsaWRlKS5kZXRhY2goKSxpLiRzbGlkZXNDYWNoZS5hcHBlbmRUbyhpLiRzbGlkZVRyYWNrKSxpLnJlaW5pdCgpKX0sZS5wcm90b3R5cGUudW5sb2FkPWZ1bmN0aW9uKCl7dmFyIGU9dGhpcztpKFwiLnNsaWNrLWNsb25lZFwiLGUuJHNsaWRlcikucmVtb3ZlKCksZS4kZG90cyYmZS4kZG90cy5yZW1vdmUoKSxlLiRwcmV2QXJyb3cmJmUuaHRtbEV4cHIudGVzdChlLm9wdGlvbnMucHJldkFycm93KSYmZS4kcHJldkFycm93LnJlbW92ZSgpLGUuJG5leHRBcnJvdyYmZS5odG1sRXhwci50ZXN0KGUub3B0aW9ucy5uZXh0QXJyb3cpJiZlLiRuZXh0QXJyb3cucmVtb3ZlKCksZS4kc2xpZGVzLnJlbW92ZUNsYXNzKFwic2xpY2stc2xpZGUgc2xpY2stYWN0aXZlIHNsaWNrLXZpc2libGUgc2xpY2stY3VycmVudFwiKS5hdHRyKFwiYXJpYS1oaWRkZW5cIixcInRydWVcIikuY3NzKFwid2lkdGhcIixcIlwiKX0sZS5wcm90b3R5cGUudW5zbGljaz1mdW5jdGlvbihpKXt2YXIgZT10aGlzO2UuJHNsaWRlci50cmlnZ2VyKFwidW5zbGlja1wiLFtlLGldKSxlLmRlc3Ryb3koKX0sZS5wcm90b3R5cGUudXBkYXRlQXJyb3dzPWZ1bmN0aW9uKCl7dmFyIGksZT10aGlzO2k9TWF0aC5mbG9vcihlLm9wdGlvbnMuc2xpZGVzVG9TaG93LzIpLGUub3B0aW9ucy5hcnJvd3M9PT0hMCYmZS5zbGlkZUNvdW50PmUub3B0aW9ucy5zbGlkZXNUb1Nob3cmJiFlLm9wdGlvbnMuaW5maW5pdGUmJihlLiRwcmV2QXJyb3cucmVtb3ZlQ2xhc3MoXCJzbGljay1kaXNhYmxlZFwiKS5hdHRyKFwiYXJpYS1kaXNhYmxlZFwiLFwiZmFsc2VcIiksZS4kbmV4dEFycm93LnJlbW92ZUNsYXNzKFwic2xpY2stZGlzYWJsZWRcIikuYXR0cihcImFyaWEtZGlzYWJsZWRcIixcImZhbHNlXCIpLDA9PT1lLmN1cnJlbnRTbGlkZT8oZS4kcHJldkFycm93LmFkZENsYXNzKFwic2xpY2stZGlzYWJsZWRcIikuYXR0cihcImFyaWEtZGlzYWJsZWRcIixcInRydWVcIiksZS4kbmV4dEFycm93LnJlbW92ZUNsYXNzKFwic2xpY2stZGlzYWJsZWRcIikuYXR0cihcImFyaWEtZGlzYWJsZWRcIixcImZhbHNlXCIpKTplLmN1cnJlbnRTbGlkZT49ZS5zbGlkZUNvdW50LWUub3B0aW9ucy5zbGlkZXNUb1Nob3cmJmUub3B0aW9ucy5jZW50ZXJNb2RlPT09ITE/KGUuJG5leHRBcnJvdy5hZGRDbGFzcyhcInNsaWNrLWRpc2FibGVkXCIpLmF0dHIoXCJhcmlhLWRpc2FibGVkXCIsXCJ0cnVlXCIpLGUuJHByZXZBcnJvdy5yZW1vdmVDbGFzcyhcInNsaWNrLWRpc2FibGVkXCIpLmF0dHIoXCJhcmlhLWRpc2FibGVkXCIsXCJmYWxzZVwiKSk6ZS5jdXJyZW50U2xpZGU+PWUuc2xpZGVDb3VudC0xJiZlLm9wdGlvbnMuY2VudGVyTW9kZT09PSEwJiYoZS4kbmV4dEFycm93LmFkZENsYXNzKFwic2xpY2stZGlzYWJsZWRcIikuYXR0cihcImFyaWEtZGlzYWJsZWRcIixcInRydWVcIiksZS4kcHJldkFycm93LnJlbW92ZUNsYXNzKFwic2xpY2stZGlzYWJsZWRcIikuYXR0cihcImFyaWEtZGlzYWJsZWRcIixcImZhbHNlXCIpKSl9LGUucHJvdG90eXBlLnVwZGF0ZURvdHM9ZnVuY3Rpb24oKXt2YXIgaT10aGlzO251bGwhPT1pLiRkb3RzJiYoaS4kZG90cy5maW5kKFwibGlcIikucmVtb3ZlQ2xhc3MoXCJzbGljay1hY3RpdmVcIikuZW5kKCksaS4kZG90cy5maW5kKFwibGlcIikuZXEoTWF0aC5mbG9vcihpLmN1cnJlbnRTbGlkZS9pLm9wdGlvbnMuc2xpZGVzVG9TY3JvbGwpKS5hZGRDbGFzcyhcInNsaWNrLWFjdGl2ZVwiKSl9LGUucHJvdG90eXBlLnZpc2liaWxpdHk9ZnVuY3Rpb24oKXt2YXIgaT10aGlzO2kub3B0aW9ucy5hdXRvcGxheSYmKGRvY3VtZW50W2kuaGlkZGVuXT9pLmludGVycnVwdGVkPSEwOmkuaW50ZXJydXB0ZWQ9ITEpfSxpLmZuLnNsaWNrPWZ1bmN0aW9uKCl7dmFyIGksdCxvPXRoaXMscz1hcmd1bWVudHNbMF0sbj1BcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChhcmd1bWVudHMsMSkscj1vLmxlbmd0aDtmb3IoaT0wO2k8cjtpKyspaWYoXCJvYmplY3RcIj09dHlwZW9mIHN8fFwidW5kZWZpbmVkXCI9PXR5cGVvZiBzP29baV0uc2xpY2s9bmV3IGUob1tpXSxzKTp0PW9baV0uc2xpY2tbc10uYXBwbHkob1tpXS5zbGljayxuKSxcInVuZGVmaW5lZFwiIT10eXBlb2YgdClyZXR1cm4gdDtyZXR1cm4gb319KTtcclxuJChkb2N1bWVudCkucmVhZHkoZnVuY3Rpb24gKCkge1xyXG4gICAgJCgnLnNsaWRlcl9jb250YWluZXInKS5zbGljayh7XHJcbiAgICAgICAgZG90czogdHJ1ZSxcclxuICAgICAgICBpbmZpbml0ZTogdHJ1ZSxcclxuICAgICAgICBhcnJvd3M6IHRydWUsXHJcbiAgICAgICAgc3BlZWQ6IDEwMDAsXHJcbiAgICAgICAgc2xpZGVzVG9TaG93OiAxXHJcbiAgICB9KVxyXG59KTtcclxuXHJcblxyXG4kKGRvY3VtZW50KS5yZWFkeShmdW5jdGlvbiAoKSB7XHJcbiAgICAkKCcuc2xpZGVyX3Byb2R1Y3QnKS5zbGljayh7XHJcbiAgICAgICAgZG90czogdHJ1ZSxcclxuICAgICAgICBpbmZpbml0ZTogZmFsc2UsXHJcbiAgICAgICAgYXJyb3dzOiB0cnVlLFxyXG4gICAgICAgIHNwZWVkOiAxMDAwLFxyXG4gICAgICAgIHNsaWRlc1RvU2hvdzogNSxcclxuICAgICAgICBzbGlkZXNUb1Njcm9sbDogNSxcclxuICAgICAgICByZXNwb25zaXZlOiBbe1xyXG4gICAgICAgICAgICAgICAgYnJlYWtwb2ludDogMTI4MCxcclxuICAgICAgICAgICAgICAgIHNldHRpbmdzOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgc2xpZGVzVG9TaG93OiAzLFxyXG4gICAgICAgICAgICAgICAgICAgIHNsaWRlc1RvU2Nyb2xsOiAzLFxyXG4gICAgICAgICAgICAgICAgICAgIGluZmluaXRlOiB0cnVlLFxyXG4gICAgICAgICAgICAgICAgICAgIGRvdHM6IHRydWUsXHJcbiAgICAgICAgICAgICAgICAgICAgaW5maW5pdGU6IGZhbHNlLFxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICBicmVha3BvaW50OiA3NjcsXHJcbiAgICAgICAgICAgICAgICBzZXR0aW5nczoge1xyXG4gICAgICAgICAgICAgICAgICAgIHNsaWRlc1RvU2hvdzogMSxcclxuICAgICAgICAgICAgICAgICAgICBzbGlkZXNUb1Njcm9sbDogMSxcclxuICAgICAgICAgICAgICAgICAgICBpbmZpbml0ZTogdHJ1ZSxcclxuICAgICAgICAgICAgICAgICAgICBkb3RzOiB0cnVlLFxyXG4gICAgICAgICAgICAgICAgICAgIGluZmluaXRlOiBmYWxzZSxcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIF1cclxuICAgIH0pO1xyXG59KTtcclxuXHJcbiQoZG9jdW1lbnQpLnJlYWR5KGZ1bmN0aW9uICgpIHtcclxuICAgICQoJy5zbGlkZXJfcHJvZHVjdF9oaXRzJykuc2xpY2soe1xyXG4gICAgICAgIGRvdHM6IHRydWUsXHJcbiAgICAgICAgaW5maW5pdGU6IGZhbHNlLFxyXG4gICAgICAgIGFycm93czogdHJ1ZSxcclxuICAgICAgICBzcGVlZDogMTAwMCxcclxuICAgICAgICBzbGlkZXNUb1Nob3c6IDUsXHJcbiAgICAgICAgc2xpZGVzVG9TY3JvbGw6IDUsXHJcbiAgICAgICAgcmVzcG9uc2l2ZTogW3tcclxuICAgICAgICAgICAgYnJlYWtwb2ludDogMTI4MCxcclxuICAgICAgICAgICAgc2V0dGluZ3M6IHtcclxuICAgICAgICAgICAgICAgIHNsaWRlc1RvU2hvdzogMyxcclxuICAgICAgICAgICAgICAgIHNsaWRlc1RvU2Nyb2xsOiAzLFxyXG4gICAgICAgICAgICAgICAgaW5maW5pdGU6IHRydWUsXHJcbiAgICAgICAgICAgICAgICBkb3RzOiB0cnVlLFxyXG4gICAgICAgICAgICAgICAgaW5maW5pdGU6IGZhbHNlLFxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSwge1xyXG4gICAgICAgICAgICBicmVha3BvaW50OiA3NjcsXHJcbiAgICAgICAgICAgIHNldHRpbmdzOiB7XHJcbiAgICAgICAgICAgICAgICBzbGlkZXNUb1Nob3c6IDEsXHJcbiAgICAgICAgICAgICAgICBzbGlkZXNUb1Njcm9sbDogMSxcclxuICAgICAgICAgICAgICAgIGluZmluaXRlOiB0cnVlLFxyXG4gICAgICAgICAgICAgICAgZG90czogdHJ1ZSxcclxuICAgICAgICAgICAgICAgIGluZmluaXRlOiBmYWxzZSxcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1dXHJcbiAgICB9KVxyXG4gICAgJCgnLnNsaWRlcl9mZWVkYmFjaycpLnNsaWNrKHtcclxuICAgICAgICBkb3RzOiB0cnVlLFxyXG4gICAgICAgIGluZmluaXRlOiBmYWxzZSxcclxuICAgICAgICBhcnJvd3M6IHRydWUsXHJcbiAgICAgICAgc3BlZWQ6IDEwMDAsXHJcbiAgICAgICAgc2xpZGVzVG9TaG93OiAyLFxyXG4gICAgICAgIHNsaWRlc1RvU2Nyb2xsOiAyLFxyXG4gICAgICAgIHJlc3BvbnNpdmU6IFt7XHJcbiAgICAgICAgICAgIGJyZWFrcG9pbnQ6IDEyODAsXHJcbiAgICAgICAgICAgIHNldHRpbmdzOiB7XHJcbiAgICAgICAgICAgICAgICBzbGlkZXNUb1Nob3c6IDEsXHJcbiAgICAgICAgICAgICAgICBzbGlkZXNUb1Njcm9sbDogMSxcclxuICAgICAgICAgICAgICAgIGluZmluaXRlOiB0cnVlLFxyXG4gICAgICAgICAgICAgICAgZG90czogdHJ1ZSxcclxuICAgICAgICAgICAgICAgIGluZmluaXRlOiBmYWxzZSxcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0sIHtcclxuICAgICAgICAgICAgYnJlYWtwb2ludDogNzY3LFxyXG4gICAgICAgICAgICBzZXR0aW5nczoge1xyXG4gICAgICAgICAgICAgICAgc2xpZGVzVG9TaG93OiAxLFxyXG4gICAgICAgICAgICAgICAgc2xpZGVzVG9TY3JvbGw6IDEsXHJcbiAgICAgICAgICAgICAgICBpbmZpbml0ZTogdHJ1ZSxcclxuICAgICAgICAgICAgICAgIGRvdHM6IHRydWUsXHJcbiAgICAgICAgICAgICAgICBpbmZpbml0ZTogZmFsc2UsXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XVxyXG4gICAgfSlcclxuICAgICQoJy5zbGlkZXItZm9yJykuc2xpY2soe1xyXG4gICAgICAgIHNsaWRlc1RvU2hvdzogMSxcclxuICAgICAgICBzbGlkZXNUb1Njcm9sbDogMSxcclxuICAgICAgICBkb3RzOiB0cnVlLFxyXG4gICAgICAgIGFycm93czogdHJ1ZSxcclxuICAgICAgICBmYWRlOiB0cnVlLFxyXG4gICAgICAgIGFzTmF2Rm9yOiAnLnNsaWRlci1uYXYnXHJcbiAgICB9KTtcclxuICAgICQoJy5zbGlkZXItbmF2Jykuc2xpY2soe1xyXG4gICAgICAgIHNsaWRlc1RvU2hvdzogNCxcclxuICAgICAgICBzbGlkZXNUb1Njcm9sbDogMSxcclxuICAgICAgICB2ZXJ0aWNhbDogdHJ1ZSxcclxuICAgICAgICBkb3RzOiBmYWxzZSxcclxuICAgICAgICBhcnJvd3M6IGZhbHNlLFxyXG4gICAgICAgIHZlcnRpY2FsU3dpcGluZzogdHJ1ZSxcclxuICAgICAgICBhc05hdkZvcjogJy5zbGlkZXItZm9yJyxcclxuICAgICAgICBmb2N1c09uU2VsZWN0OiB0cnVlXHJcbiAgICB9KTtcclxufSk7XHJcbndpbmRvdy5vbmxvYWQgPSBmdW5jdGlvbiAoKSB7XHJcbiAgdmFyIHZhbHVlU2l6ZVBvcHVsYXJlID0gMDtcclxuICB2YXIgSG92ZXJEb3duID0gZG9jdW1lbnQuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZShcImhvdmVyX2Rvd25cIik7XHJcbiAgdmFyIEhlYWRlclRvcExhbmcgPSBkb2N1bWVudC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lKFwibV9oZWFkZXJfdG9wX2xhbmdcIilbMF07XHJcbiAgdmFyIEFycm93Q2xpY2sgPSBkb2N1bWVudC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lKFwiYXJyb3dfY2xpY2tcIik7XHJcbiAgdmFyIFNsaWRlclByb2R1Y3RBcnJvdyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoXHJcbiAgICBcIi5zbGlkZXJfcHJvZHVjdCAuc2xpY2stYXJyb3dcIlxyXG4gICk7XHJcbiAgdmFyIFNsaWRlclByb2R1Y3RIaXRzQXJyb3cgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKFxyXG4gICAgXCIuc2xpZGVyX3Byb2R1Y3RfaGl0cyAuc2xpY2stYXJyb3dcIlxyXG4gICk7XHJcbiAgdmFyIFNsaWRlclByb2R1Y3RIaXRzQXJyb3cgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKFxyXG4gICAgXCIuc2xpZGVyX3Byb2R1Y3RfaGl0cyAuc2xpY2stYXJyb3dcIlxyXG4gICk7XHJcbiAgdmFyIFNsaWRlckZlZWRiYWNrQXJyb3cgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKFxyXG4gICAgXCIuc2xpZGVyX2ZlZWRiYWNrIC5zbGljay1hcnJvd1wiXHJcbiAgKTtcclxuICB2YXIgU2l6ZSA9IGRvY3VtZW50LmdldEVsZW1lbnRzQnlDbGFzc05hbWUoXCJzaXplXCIpO1xyXG4gIHZhciBTaXplVXAgPSBkb2N1bWVudC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lKFwic2l6ZV91cFwiKTtcclxuXHJcbiAgdmFyIFNsaWRlclByb2R1Y3REb3RzID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbChcclxuICAgIFwiLnNsaWRlcl9wcm9kdWN0IC5zbGljay1kb3RzIGxpXCJcclxuICApO1xyXG4gIHZhciBTbGlkZXJQcm9kdWN0SGl0c0RvdHMgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKFxyXG4gICAgXCIuc2xpZGVyX3Byb2R1Y3RfaGl0cyAuc2xpY2stZG90cyBsaVwiXHJcbiAgKTtcclxuICB2YXIgU2xpZGVyRmVlZGJhY2tEb3RzID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbChcclxuICAgIFwiLnNsaWRlcl9mZWVkYmFjayAuc2xpY2stZG90cyBsaVwiXHJcbiAgKTtcclxuICBmb3IgKHZhciBpID0gMDsgaSA8IFNsaWRlclByb2R1Y3RBcnJvdy5sZW5ndGg7IGkrKykge1xyXG4gICAgQXJyb3dDbGlja1swXS5hcHBlbmRDaGlsZChTbGlkZXJQcm9kdWN0QXJyb3dbaV0pO1xyXG4gIH1cclxuICBpZiAoU2xpZGVyUHJvZHVjdERvdHMubGVuZ3RoID09IDApIHtcclxuICAgIFNsaWRlclByb2R1Y3REb3RzID0gbnVsbDtcclxuICB9IGVsc2Uge1xyXG4gICAgU2l6ZVswXS5pbm5lckhUTUwgPSBTbGlkZXJQcm9kdWN0RG90cy5sZW5ndGg7XHJcbiAgICBTbGlkZXJQcm9kdWN0QXJyb3dbMV0uYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsIGZ1bmN0aW9uICgpIHtcclxuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBTbGlkZXJQcm9kdWN0RG90cy5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgIGlmIChTbGlkZXJQcm9kdWN0RG90c1tpXS5jbGFzc0xpc3QubGVuZ3RoID09IDEpIHtcclxuICAgICAgICAgIFNpemVVcFswXS5pbm5lckhUTUwgPSBTbGlkZXJQcm9kdWN0RG90c1tpXS5jaGlsZHJlblswXS5pbm5lckhUTUw7XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcbiAgICB9KTtcclxuICAgIFNsaWRlclByb2R1Y3RBcnJvd1swXS5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgZnVuY3Rpb24gKCkge1xyXG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IFNsaWRlclByb2R1Y3REb3RzLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgaWYgKFNsaWRlclByb2R1Y3REb3RzW2ldLmNsYXNzTGlzdC5sZW5ndGggPT0gMSkge1xyXG4gICAgICAgICAgU2l6ZVVwWzBdLmlubmVySFRNTCA9IFNsaWRlclByb2R1Y3REb3RzW2ldLmNoaWxkcmVuWzBdLmlubmVySFRNTDtcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuICAgIH0pO1xyXG5cclxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgU2xpZGVyUHJvZHVjdEhpdHNBcnJvdy5sZW5ndGg7IGkrKykge1xyXG4gICAgICBBcnJvd0NsaWNrWzFdLmFwcGVuZENoaWxkKFNsaWRlclByb2R1Y3RIaXRzQXJyb3dbaV0pO1xyXG4gICAgfVxyXG4gICAgU2l6ZVsxXS5pbm5lckhUTUwgPSBTbGlkZXJQcm9kdWN0SGl0c0RvdHMubGVuZ3RoO1xyXG4gICAgU2xpZGVyUHJvZHVjdEhpdHNBcnJvd1sxXS5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgZnVuY3Rpb24gKCkge1xyXG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IFNsaWRlclByb2R1Y3RIaXRzRG90cy5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgIGlmIChTbGlkZXJQcm9kdWN0SGl0c0RvdHNbaV0uY2xhc3NMaXN0Lmxlbmd0aCA9PSAxKSB7XHJcbiAgICAgICAgICBTaXplVXBbMV0uaW5uZXJIVE1MID0gU2xpZGVyUHJvZHVjdEhpdHNEb3RzW2ldLmNoaWxkcmVuWzBdLmlubmVySFRNTDtcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuICAgIH0pO1xyXG4gICAgU2xpZGVyUHJvZHVjdEhpdHNBcnJvd1swXS5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgZnVuY3Rpb24gKCkge1xyXG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IFNsaWRlclByb2R1Y3RIaXRzRG90cy5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgIGlmIChTbGlkZXJQcm9kdWN0SGl0c0RvdHNbaV0uY2xhc3NMaXN0Lmxlbmd0aCA9PSAxKSB7XHJcbiAgICAgICAgICBTaXplVXBbMV0uaW5uZXJIVE1MID0gU2xpZGVyUHJvZHVjdEhpdHNEb3RzW2ldLmNoaWxkcmVuWzBdLmlubmVySFRNTDtcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuICAgIH0pO1xyXG5cclxuICB9XHJcblxyXG5cclxuICB2YXIgRmVlZGJhY2tJdGVtcyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoXCJmb3JtLmZlZWRiYWNrX2l0ZW1zIC5jbGlja19hc3Nlc3NtZW50PmRpdlwiKTtcclxuICBpZiAoRmVlZGJhY2tJdGVtcykge1xyXG4gICAgdmFyIGNvdW50ZXJzID0ge1xyXG4gICAgICBjb3VudDogMFxyXG4gICAgfTtcclxuXHJcbiAgICBmdW5jdGlvbiBGZWVkYmFja0dyYXlTdmcoZSkge1xyXG5cclxuICAgICAgaWYgKGUuY3VycmVudFRhcmdldC5jbGFzc0xpc3QubGVuZ3RoID09PSAwKSB7XHJcbiAgICAgICAgZS5jdXJyZW50VGFyZ2V0LmNsYXNzTGlzdC5hZGQoXCJhY3RpdmVcIik7XHJcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBGZWVkYmFja0l0ZW1zLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICBpZiAoRmVlZGJhY2tJdGVtc1tpXS5jbGFzc0xpc3QubGVuZ3RoID09PSAxKSB7XHJcbiAgICAgICAgICAgIGNvdW50ZXJzLmNvdW50ID0gaTtcclxuICAgICAgICAgICAgZm9yICh2YXIgaiA9IDA7IGogPCBjb3VudGVycy5jb3VudDsgaisrKSB7XHJcbiAgICAgICAgICAgICAgRmVlZGJhY2tJdGVtc1tqXS5jbGFzc0xpc3QuYWRkKFwiYWN0aXZlXCIpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgIGUuY3VycmVudFRhcmdldC5jbGFzc0xpc3QucmVtb3ZlKFwiYWN0aXZlXCIpO1xyXG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgRmVlZGJhY2tJdGVtcy5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgaWYgKEZlZWRiYWNrSXRlbXNbaV0uY2xhc3NMaXN0Lmxlbmd0aCA9PT0gMCkge1xyXG4gICAgICAgICAgICBjb3VudGVycy5jb3VudCA9IGk7XHJcbiAgICAgICAgICAgIGZvciAodmFyIGogPSBjb3VudGVycy5jb3VudDsgaiA8IEZlZWRiYWNrSXRlbXMubGVuZ3RoOyBqKyspIHtcclxuICAgICAgICAgICAgICBlLmN1cnJlbnRUYXJnZXQuY2xhc3NMaXN0LmFkZChcImFjdGl2ZVwiKTtcclxuICAgICAgICAgICAgICBGZWVkYmFja0l0ZW1zW2pdLmNsYXNzTGlzdC5yZW1vdmUoXCJhY3RpdmVcIik7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBGZWVkYmFja0l0ZW1zLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgaWYgKEZlZWRiYWNrSXRlbXNbaV0uY2xhc3NMaXN0Lmxlbmd0aCA9PT0gMSkge1xyXG4gICAgICAgICAgdmFsdWVTaXplUG9wdWxhcmUgPSBpICsgMTtcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuICAgICAgYWxlcnQodmFsdWVTaXplUG9wdWxhcmUpO1xyXG4gICAgfVxyXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBGZWVkYmFja0l0ZW1zLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgIEZlZWRiYWNrSXRlbXNbaV0uYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsIEZlZWRiYWNrR3JheVN2ZywgZmFsc2UpXHJcbiAgICB9XHJcblxyXG5cclxuXHJcbiAgfVxyXG5cclxuICB2YXIgVGFiU3Byb2R1Y3QgPSBkb2N1bWVudC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lKFwidGFic19wcm9kdWN0XCIpWzBdO1xyXG5cclxuICBUYWJTcHJvZHVjdC5vbm1vdXNlb3ZlciA9IGZ1bmN0aW9uIChldmVudCkge1xyXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBUYWJTcHJvZHVjdC5jaGlsZHJlbi5sZW5ndGg7IGkrKykge1xyXG4gICAgICBUYWJTcHJvZHVjdC5jaGlsZHJlbltpXS5jbGFzc0xpc3QucmVtb3ZlKFwiYWN0aXZlXCIpO1xyXG4gICAgfVxyXG4gICAgdmFyIHRhcmdldCA9IGV2ZW50LnRhcmdldDtcclxuXHJcbiAgICBpZiAodGFyZ2V0Lm5vZGVOYW1lID09PSBcIkxJXCIpIHtcclxuXHJcbiAgICAgIHRhcmdldC5jbGFzc0xpc3QuYWRkKFwiYWN0aXZlXCIpO1xyXG4gICAgfSBlbHNlIGlmICh0YXJnZXQubm9kZU5hbWUgPT09IFwiQVwiKSB7XHJcbiAgICAgIHRhcmdldC5wYXJlbnROb2RlLmNsYXNzTGlzdC5hZGQoXCJhY3RpdmVcIik7XHJcbiAgICB9XHJcbiAgfTtcclxuXHJcbiAgVGFiU3Byb2R1Y3Qub25tb3VzZW91dCA9IGZ1bmN0aW9uIChldmVudCkge1xyXG4gICAgdmFyIHRhcmdldCA9IGV2ZW50LnRhcmdldDtcclxuICAgIGlmICh0YXJnZXQubm9kZU5hbWUgPT09IFwiTElcIikge1xyXG4gICAgICB0YXJnZXQuY2xhc3NMaXN0LnJlbW92ZShcImFjdGl2ZVwiKTtcclxuICAgIH1lbHNlIGlmICh0YXJnZXQubm9kZU5hbWUgPT09IFwiQVwiKSB7XHJcbiAgICAgIHRhcmdldC5wYXJlbnROb2RlLmNsYXNzTGlzdC5yZW1vdmUoXCJhY3RpdmVcIik7XHJcbiAgICB9XHJcbiAgfTtcclxuXHJcbiAgaWYgKFNsaWRlckZlZWRiYWNrRG90cy5sZW5ndGggPT09IDApIHtcclxuICAgIFNsaWRlckZlZWRiYWNrRG90cyA9IG51bGw7XHJcbiAgfSBlbHNlIHtcclxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgU2xpZGVyRmVlZGJhY2tBcnJvdy5sZW5ndGg7IGkrKykge1xyXG4gICAgICBBcnJvd0NsaWNrWzBdLmFwcGVuZENoaWxkKFNsaWRlckZlZWRiYWNrQXJyb3dbaV0pO1xyXG4gICAgfVxyXG4gICAgU2l6ZVswXS5pbm5lckhUTUwgPSBTbGlkZXJGZWVkYmFja0RvdHMubGVuZ3RoO1xyXG4gICAgU2xpZGVyRmVlZGJhY2tBcnJvd1sxXS5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgZnVuY3Rpb24gKCkge1xyXG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IFNsaWRlckZlZWRiYWNrRG90cy5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgIGlmIChTbGlkZXJGZWVkYmFja0RvdHNbaV0uY2xhc3NMaXN0Lmxlbmd0aCA9PSAxKSB7XHJcbiAgICAgICAgICBTaXplVXBbMF0uaW5uZXJIVE1MID0gU2xpZGVyRmVlZGJhY2tEb3RzW2ldLmNoaWxkcmVuWzBdLmlubmVySFRNTDtcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuICAgIH0pO1xyXG4gICAgU2xpZGVyRmVlZGJhY2tBcnJvd1swXS5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgZnVuY3Rpb24gKCkge1xyXG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IFNsaWRlckZlZWRiYWNrRG90cy5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgIGlmIChTbGlkZXJGZWVkYmFja0RvdHNbaV0uY2xhc3NMaXN0Lmxlbmd0aCA9PSAxKSB7XHJcbiAgICAgICAgICBTaXplVXBbMF0uaW5uZXJIVE1MID0gU2xpZGVyRmVlZGJhY2tEb3RzW2ldLmNoaWxkcmVuWzBdLmlubmVySFRNTDtcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuICAgIH0pO1xyXG4gIH1cclxuXHJcbiAgdmFyIENhdGFsb2dQcm9kdWN0QWxsID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbChcIi5jYXRhbG9nX2l0ZW1zICAuaXRlbV9wcm9kdWN0IFwiKTtcclxuICBmb3IgKHZhciBpID0gMDsgaSA8IENhdGFsb2dQcm9kdWN0QWxsLmxlbmd0aDsgaSsrKSB7XHJcbiAgICB2YXIgY3JlYXRlRWxlbWVudFR3byA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7XHJcbiAgICBDYXRhbG9nUHJvZHVjdEFsbFtpXS5wYXJlbnROb2RlLmFwcGVuZENoaWxkKGNyZWF0ZUVsZW1lbnRUd28pO1xyXG4gICAgY3JlYXRlRWxlbWVudFR3by5jbGFzc0xpc3QuYWRkKFwicHJvZHVjdF9zaXplXCIpO1xyXG4gICAgY3JlYXRlRWxlbWVudFR3by5hcHBlbmRDaGlsZChDYXRhbG9nUHJvZHVjdEFsbFtpXSk7XHJcbiAgfVxyXG5cclxuICBmdW5jdGlvbiBNb3VzZShlKSB7XHJcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IENhdGFsb2dQcm9kdWN0QWxsLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgIENhdGFsb2dQcm9kdWN0QWxsW2ldLnN0eWxlLnpJbmRleCA9IFwiMVwiO1xyXG4gICAgfVxyXG4gICAgZS5jdXJyZW50VGFyZ2V0LnN0eWxlLnpJbmRleCA9IFwiMTRcIjtcclxuICB9XHJcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBDYXRhbG9nUHJvZHVjdEFsbC5sZW5ndGg7IGkrKykge1xyXG4gICAgQ2F0YWxvZ1Byb2R1Y3RBbGxbaV0uYWRkRXZlbnRMaXN0ZW5lcihcIm1vdXNlb3ZlclwiLCBNb3VzZSwgZmFsc2UpO1xyXG4gIH1cclxuXHJcblxyXG5cclxuXHJcblxyXG5cclxuXHJcblxyXG4gIHZhciBidXR0b25fY2F0YWxvZyA9IGRvY3VtZW50LmdldEVsZW1lbnRzQnlDbGFzc05hbWUoXCJidXR0b25fY2F0YWxvZ1wiKVswXTtcclxuICB2YXIgRGV2aWNlID0gZG9jdW1lbnQuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZShcImRldmljZV9jb250YWluZXJcIilbMF07XHJcbiAgaWYgKGJ1dHRvbl9jYXRhbG9nKSB7XHJcbiAgICBidXR0b25fY2F0YWxvZy5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgZnVuY3Rpb24gKCkge1xyXG4gICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcclxuICAgICAgICBEZXZpY2UuY2xhc3NMaXN0LnJlbW92ZShcImFjdGl2ZS1zY2FsZVwiKTtcclxuICAgICAgfSwgNTAwKTtcclxuICAgICAgaWYgKERldmljZS5jbGFzc0xpc3QubGVuZ3RoID09PSAyKSB7XHJcbiAgICAgICAgRGV2aWNlLmNsYXNzTGlzdC5hZGQoXCJhY3RpdmVcIik7XHJcbiAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgRGV2aWNlLmNsYXNzTGlzdC5yZW1vdmUoXCJhY3RpdmVcIik7XHJcbiAgICAgICAgRGV2aWNlLmNsYXNzTGlzdC5hZGQoXCJhY3RpdmUtc2NhbGVcIik7XHJcbiAgICAgIH1cclxuICAgIH0pO1xyXG5cclxuICAgIGZ1bmN0aW9uIGFkZENsaWNrKGUpIHtcclxuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBIZWFkZXJUb3BMYW5nLmNoaWxkcmVuLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgSGVhZGVyVG9wTGFuZy5jaGlsZHJlbltpXS5jbGFzc0xpc3QucmVtb3ZlKFwiYWN0aXZlXCIpO1xyXG4gICAgICB9XHJcbiAgICAgIGUudGFyZ2V0LmNsYXNzTGlzdC5hZGQoXCJhY3RpdmVcIik7XHJcbiAgICB9XHJcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IEhlYWRlclRvcExhbmcuY2hpbGRyZW4ubGVuZ3RoOyBpKyspIHtcclxuICAgICAgSGVhZGVyVG9wTGFuZy5jaGlsZHJlbltpXS5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgYWRkQ2xpY2ssIGZhbHNlKTtcclxuICAgIH1cclxuICB9XHJcbiAgaWYgKHdpbmRvdy5pbm5lcldpZHRoIDw9IDc2Nykge1xyXG4gICAgdmFyIGxpbmtob3ZlciA9IGRvY3VtZW50LmdldEVsZW1lbnRzQnlDbGFzc05hbWUoXCJsaW5rX2hvdmVyXCIpO1xyXG4gICAgdmFyIGhhbWJ1cmdlciA9IGRvY3VtZW50LmdldEVsZW1lbnRzQnlDbGFzc05hbWUoXCJoYW1idXJnZXJcIik7XHJcbiAgICB2YXIgTW9kYWxIZWFkZXJNZW51ID0gZG9jdW1lbnQuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZShcclxuICAgICAgXCJtb2RhbF9oZWFkZXJfbWVudVwiXHJcbiAgICApWzBdO1xyXG4gICAgdmFyIE1vZGFsSGVhZGVyVG9wID0gZG9jdW1lbnQuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZShcIm1vZGFsX2hlYWRlcl90b3BcIilbMF07XHJcbiAgICB2YXIgTW9iUm93RWxlbWVudCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoXHJcbiAgICAgIFwiLmNvbnRlbnRfZm9vdGVyIC5tb2Jfcm93XCJcclxuICAgIClbMF07XHJcbiAgICB2YXIgTW9iQWRhcHRpdmUgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKFxyXG4gICAgICBcIi5jb250ZW50X2Zvb3Rlcj5kaXY6bGFzdC1jaGlsZFwiXHJcbiAgICApWzBdO1xyXG4gICAgdmFyIE1vYlRlbFNlYXJjaCA9IGRvY3VtZW50LmdldEVsZW1lbnRzQnlDbGFzc05hbWUoXCJtb2JfdGVsX3NlYXJjaFwiKVswXTtcclxuICAgIHZhciBNb2JpbGVIZWFkZXJUb3AgPSBkb2N1bWVudC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lKFxyXG4gICAgICBcIm1vYmlsZV9oZWFkZXJfdG9wXCJcclxuICAgIClbMF07XHJcblxyXG4gICAgTW9iUm93RWxlbWVudC5jaGlsZHJlblswXS5hcHBlbmRDaGlsZChNb2JBZGFwdGl2ZS5sYXN0RWxlbWVudENoaWxkKTtcclxuICAgIE1vYmlsZUhlYWRlclRvcC5hcHBlbmRDaGlsZChNb2JUZWxTZWFyY2gpO1xyXG4gICAgTW9kYWxIZWFkZXJUb3AuYXBwZW5kQ2hpbGQoSGVhZGVyVG9wTGFuZyk7XHJcblxyXG4gICAgZnVuY3Rpb24gbWVudShlKSB7XHJcbiAgICAgIGlmIChcclxuICAgICAgICBlLmN1cnJlbnRUYXJnZXQuY2xhc3NMaXN0W2UuY3VycmVudFRhcmdldC5jbGFzc0xpc3QubGVuZ3RoIC0gMV0gPT09XHJcbiAgICAgICAgXCJhY3RpdmVcIlxyXG4gICAgICApIHtcclxuICAgICAgICBlLmN1cnJlbnRUYXJnZXQuY2xhc3NMaXN0LnJlbW92ZShcImFjdGl2ZVwiKTtcclxuICAgICAgICBNb2RhbEhlYWRlck1lbnUuY2xhc3NMaXN0LnJlbW92ZShcImFjdGl2ZVwiKTtcclxuICAgICAgICBoYW1idXJnZXJbMV0uY2xhc3NMaXN0LnJlbW92ZShcImFjdGl2ZVwiKTtcclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICBlLmN1cnJlbnRUYXJnZXQuY2xhc3NMaXN0LmFkZChcImFjdGl2ZVwiKTtcclxuICAgICAgICBoYW1idXJnZXJbMF0uY2xhc3NMaXN0LmFkZChcImFjdGl2ZVwiKTtcclxuICAgICAgICBNb2RhbEhlYWRlck1lbnUuY2xhc3NMaXN0LmFkZChcImFjdGl2ZVwiKTtcclxuICAgICAgfVxyXG4gICAgfVxyXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBoYW1idXJnZXIubGVuZ3RoOyBpKyspIHtcclxuICAgICAgaGFtYnVyZ2VyW2ldLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCBtZW51LCBmYWxzZSk7XHJcbiAgICB9XHJcblxyXG4gICAgdmFyIG1hc3NpdmVUd28gPSBbXTtcclxuICAgIHZhciBkZXZpY2VMaSA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwiZGV2aWNlXCIpO1xyXG4gICAgZm9yICh2YXIgayA9IDA7IGsgPCBIb3ZlckRvd24ubGVuZ3RoOyBrKyspIHtcclxuICAgICAgdmFyIGNyZWF0ZUVsZW0gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xyXG4gICAgICBkZXZpY2VMaS5jaGlsZHJlbltrXS5hcHBlbmRDaGlsZChjcmVhdGVFbGVtKTtcclxuICAgICAgY3JlYXRlRWxlbS5jbGFzc0xpc3QuYWRkKFwiZHJvcF9kb3duXCIpO1xyXG4gICAgICBjcmVhdGVFbGVtLmFwcGVuZENoaWxkKGxpbmtob3ZlcltrXSk7XHJcbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgSG92ZXJEb3duW2tdLmNoaWxkcmVuLmxlbmd0aCAtIDE7IGkrKykge1xyXG4gICAgICAgIGZvciAoXHJcbiAgICAgICAgICB2YXIgaiA9IDA7IGogPCBIb3ZlckRvd25ba10uY2hpbGRyZW5baV0uY2hpbGRyZW5bMF0uY2hpbGRyZW4ubGVuZ3RoOyBqKytcclxuICAgICAgICApIHtcclxuICAgICAgICAgIG1hc3NpdmVUd28ucHVzaChIb3ZlckRvd25ba10uY2hpbGRyZW5baV0uY2hpbGRyZW5bMF0uY2hpbGRyZW5bal0pO1xyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG5cclxuICAgICAgSG92ZXJEb3duW2tdLmNoaWxkcmVuWzBdLmNoaWxkcmVuWzBdLmlubmVySFRNTCA9IFwiXCI7XHJcbiAgICAgIGNvdW50QWRhcHRpdmUgPSAxO1xyXG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IG1hc3NpdmVUd28ubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICBIb3ZlckRvd25ba10uY2hpbGRyZW5bMF0uY2hpbGRyZW5bMF0uYXBwZW5kQ2hpbGQobWFzc2l2ZVR3b1tpXSk7XHJcbiAgICAgIH1cclxuICAgICAgbWFzc2l2ZVR3byA9IFtdO1xyXG4gICAgfVxyXG4gICAgdmFyIERyb3BEb3duID0gZG9jdW1lbnQuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZShcImRyb3BfZG93blwiKTtcclxuXHJcbiAgICBmdW5jdGlvbiBkcm9wRG93bihlKSB7XHJcbiAgICAgIGlmIChlLmN1cnJlbnRUYXJnZXQuY2xhc3NMaXN0W2UuY3VycmVudFRhcmdldC5jbGFzc0xpc3QubGVuZ3RoIC0gMV0gPT09IFwiYWN0aXZlXCIpIHtcclxuICAgICAgICBlLmN1cnJlbnRUYXJnZXQuY2xhc3NMaXN0LnJlbW92ZShcImFjdGl2ZVwiKTtcclxuICAgICAgICBlLmN1cnJlbnRUYXJnZXQucGFyZW50Tm9kZS5jaGlsZHJlblswXS5jbGFzc0xpc3QucmVtb3ZlKFwiYWN0aXZlXCIpO1xyXG5cclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICBlLmN1cnJlbnRUYXJnZXQucGFyZW50Tm9kZS5jaGlsZHJlblswXS5jbGFzc0xpc3QuYWRkKFwiYWN0aXZlXCIpO1xyXG4gICAgICAgIGUuY3VycmVudFRhcmdldC5jbGFzc0xpc3QuYWRkKFwiYWN0aXZlXCIpO1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IERyb3BEb3duLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgIERyb3BEb3duW2ldLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCBkcm9wRG93biwgZmFsc2UpO1xyXG4gICAgfVxyXG4gIH0gZWxzZSBpZiAod2luZG93LmlubmVyV2lkdGggPD0gMTI4MCkge1xyXG4gICAgdmFyIG1hc3NpdmUgPSBbXTtcclxuICAgIHZhciBjb3VudCA9IDA7XHJcblxyXG4gICAgZm9yICh2YXIgayA9IDA7IGsgPCBIb3ZlckRvd24ubGVuZ3RoOyBrKyspIHtcclxuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBIb3ZlckRvd25ba10uY2hpbGRyZW4ubGVuZ3RoIC0gMTsgaSsrKSB7XHJcbiAgICAgICAgZm9yIChcclxuICAgICAgICAgIHZhciBqID0gMDsgaiA8IEhvdmVyRG93bltrXS5jaGlsZHJlbltpXS5jaGlsZHJlblswXS5jaGlsZHJlbi5sZW5ndGg7IGorK1xyXG4gICAgICAgICkge1xyXG4gICAgICAgICAgbWFzc2l2ZS5wdXNoKEhvdmVyRG93bltrXS5jaGlsZHJlbltpXS5jaGlsZHJlblswXS5jaGlsZHJlbltqXSk7XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcblxyXG4gICAgICBmb3IgKHZhciBqID0gMDsgaiA8IEhvdmVyRG93bltrXS5jaGlsZHJlbi5sZW5ndGggLSAzOyBqKyspIHtcclxuICAgICAgICBIb3ZlckRvd25ba10uY2hpbGRyZW5bal0uY2hpbGRyZW5bMF0uaW5uZXJIVE1MID0gXCJcIjtcclxuICAgICAgICBjb3VudCA9IDE7XHJcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBtYXNzaXZlLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICBpZiAoaSA8IG1hc3NpdmUubGVuZ3RoIC8gMikge1xyXG4gICAgICAgICAgICBIb3ZlckRvd25ba10uY2hpbGRyZW5bal0uY2hpbGRyZW5bMF0uYXBwZW5kQ2hpbGQobWFzc2l2ZVtpXSk7XHJcbiAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICBIb3ZlckRvd25ba10uY2hpbGRyZW5bY291bnRdLmNoaWxkcmVuWzBdLmFwcGVuZENoaWxkKG1hc3NpdmVbaV0pO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG4gICAgICBtYXNzaXZlID0gW107XHJcbiAgICB9XHJcbiAgfVxyXG4gIGlmICh3aW5kb3cuaW5uZXJXaWR0aCA8PSAxMjgwKSB7XHJcbiAgICB2YXIgRmlsdGVyc1Byb2R1Y3RDb250YWluZXIgPSBkb2N1bWVudC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lKFwiZmlsdGVyc19wcm9kdWN0X2NvbnRhaW5lclwiKVswXTtcclxuICAgIHZhciBCYW5uZXIgPSBkb2N1bWVudC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lKFwiYmFubmVyXCIpWzBdO1xyXG4gICAgaWYgKEZpbHRlcnNQcm9kdWN0Q29udGFpbmVyKSB7XHJcbiAgICAgIEZpbHRlcnNQcm9kdWN0Q29udGFpbmVyLmFwcGVuZENoaWxkKEJhbm5lcik7XHJcbiAgICB9XHJcbiAgfVxyXG4gIGlmICh3aW5kb3cuaW5uZXJXaWR0aCA8PSA3NjcpIHtcclxuICAgIHZhciBCdXR0b25DbG9zZSA9IGRvY3VtZW50LmdldEVsZW1lbnRzQnlDbGFzc05hbWUoXCJidXR0b25fY2xvc2VcIilbMF07XHJcbiAgICB2YXIgVGV4dENvbnRhaW5lciA9IGRvY3VtZW50LmdldEVsZW1lbnRzQnlDbGFzc05hbWUoJ3RleHRfY29udGFpbmVyJylbMF07XHJcbiAgICB2YXIgSXRlbXNPbmxpbmVTdG9yZSA9IGRvY3VtZW50LmdldEVsZW1lbnRzQnlDbGFzc05hbWUoXCJpdGVtc19vbmxpbmVfc3RvcmVcIilbMV07XHJcbiAgICBUZXh0Q29udGFpbmVyLmFwcGVuZENoaWxkKEl0ZW1zT25saW5lU3RvcmUuY2hpbGRyZW5bMF0pO1xyXG4gICAgdmFyIEZpbHRlclByb2R1Y3QgPSBkb2N1bWVudC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lKFwiZmlsdGVyX3Byb2R1Y3RcIilbMF07XHJcbiAgICB2YXIgUG9wVXBNb2JpbGVGaWx0ZXIgPSBkb2N1bWVudC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lKFwicG9wX3VwX21vYmlsZV9maWx0ZXJcIilbMF07XHJcbiAgICBQb3BVcE1vYmlsZUZpbHRlci5hcHBlbmRDaGlsZChGaWx0ZXJQcm9kdWN0KTtcclxuICAgIHZhciBGaWx0ZXJNb2JpbGUgPSBkb2N1bWVudC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lKFwiZmlsdGVyX21vYmlsZVwiKVswXTtcclxuICAgIEZpbHRlck1vYmlsZS5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgZnVuY3Rpb24gKCkge1xyXG4gICAgICBQb3BVcE1vYmlsZUZpbHRlci5jbGFzc0xpc3QuYWRkKFwiYWN0aXZlXCIpO1xyXG4gICAgICBCdXR0b25DbG9zZS5jbGFzc0xpc3QuYWRkKFwiYWN0aXZlXCIpO1xyXG4gICAgICBCdXR0b25DbG9zZS5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIFBvcFVwTW9iaWxlRmlsdGVyLmNsYXNzTGlzdC5yZW1vdmUoXCJhY3RpdmVcIik7XHJcbiAgICAgICAgQnV0dG9uQ2xvc2UuY2xhc3NMaXN0LnJlbW92ZShcImFjdGl2ZVwiKTtcclxuICAgICAgfSlcclxuICAgIH0pO1xyXG4gIH1cclxufTtcclxuJChkb2N1bWVudCkucmVhZHkoZnVuY3Rpb24gKCkge1xyXG5cclxuICAgIHZhciBrZXlwcmVzc1NsaWRlciA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdpbnB1dC1yYW5nZS1jb250YWluZXInKTtcclxuXHJcbiAgICB2YXIgaW5wdXQwID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ21pbl9yYW5nZScpO1xyXG4gICAgdmFyIGlucHV0MSA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdtYXhfcmFuZ2UnKTtcclxuICAgIHZhciBpbnB1dHMgPSBbaW5wdXQwLCBpbnB1dDFdO1xyXG5cclxuICAgIGlmIChrZXlwcmVzc1NsaWRlcikge1xyXG4gICAgICAgIG5vVWlTbGlkZXIuY3JlYXRlKGtleXByZXNzU2xpZGVyLCB7XHJcbiAgICAgICAgICAgIHN0YXJ0OiBbNjAwLCAxNDAwMF0sXHJcbiAgICAgICAgICAgIGNvbm5lY3Q6IHRydWUsXHJcbiAgICAgICAgICAgIHRvb2x0aXBzOiBbdHJ1ZSwgd051bWIoe1xyXG4gICAgICAgICAgICAgICAgZGVjaW1hbHM6IDFcclxuICAgICAgICAgICAgfSldLFxyXG4gICAgICAgICAgICByYW5nZToge1xyXG4gICAgICAgICAgICAgICAgJ21pbic6IFswLCAxMDBdLFxyXG4gICAgICAgICAgICAgICAgJ21heCc6IFsxNTAwMCwgMTAwXVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgdmFyIGxlZnRBcnJvdyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoXCIubm9VaS1oYW5kbGUubm9VaS1oYW5kbGUtdXBwZXJcIilbMF07XHJcbiAgICAgICAgdmFyIHJpZ2h0QXJyb3cgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKFwiLm5vVWktaGFuZGxlLm5vVWktaGFuZGxlLWxvd2VyXCIpWzBdO1xyXG4gICAgICAgIHZhciBhcnJvdyA9IFtsZWZ0QXJyb3csIHJpZ2h0QXJyb3ddO1xyXG5cclxuICAgICAgICBmdW5jdGlvbiBjbGlja1BveihlKSB7XHJcbiAgICAgICAgICAgIGtleXByZXNzU2xpZGVyLm5vVWlTbGlkZXIub24oJ3VwZGF0ZScsIGZ1bmN0aW9uICh2YWx1ZXMsIGhhbmRsZSkge1xyXG4gICAgICAgICAgICAgICAgaW5wdXRzW2hhbmRsZV0udmFsdWUgPSB2YWx1ZXNbaGFuZGxlXTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgaW5wdXRzLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgIGlucHV0c1tpXS5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgY2xpY2tQb3osIGZhbHNlKTtcclxuICAgICAgICAgICAgYXJyb3dbaV0uYWRkRXZlbnRMaXN0ZW5lcihcIm1vdXNlZG93blwiLCBjbGlja1BveiwgZmFsc2UpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaW5wdXRzLmZvckVhY2goZnVuY3Rpb24gKGlucHV0LCBoYW5kbGUpIHtcclxuXHJcbiAgICAgICAgICAgIGlucHV0LmFkZEV2ZW50TGlzdGVuZXIoJ2NoYW5nZScsIGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgIGtleXByZXNzU2xpZGVyLm5vVWlTbGlkZXIuc2V0SGFuZGxlKGhhbmRsZSwgdGhpcy52YWx1ZSk7XHJcbiAgICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICAgICAgaW5wdXQuYWRkRXZlbnRMaXN0ZW5lcigna2V5ZG93bicsIGZ1bmN0aW9uIChlKSB7XHJcblxyXG4gICAgICAgICAgICAgICAgdmFyIHZhbHVlcyA9IGtleXByZXNzU2xpZGVyLm5vVWlTbGlkZXIuZ2V0KCk7XHJcbiAgICAgICAgICAgICAgICB2YXIgdmFsdWUgPSBOdW1iZXIodmFsdWVzW2hhbmRsZV0pO1xyXG5cclxuICAgICAgICAgICAgICAgIC8vIFtbaGFuZGxlMF9kb3duLCBoYW5kbGUwX3VwXSwgW2hhbmRsZTFfZG93biwgaGFuZGxlMV91cF1dXHJcbiAgICAgICAgICAgICAgICB2YXIgc3RlcHMgPSBrZXlwcmVzc1NsaWRlci5ub1VpU2xpZGVyLnN0ZXBzKCk7XHJcblxyXG4gICAgICAgICAgICAgICAgLy8gW2Rvd24sIHVwXVxyXG4gICAgICAgICAgICAgICAgdmFyIHN0ZXAgPSBzdGVwc1toYW5kbGVdO1xyXG5cclxuICAgICAgICAgICAgICAgIHZhciBwb3NpdGlvbjtcclxuXHJcbiAgICAgICAgICAgICAgICAvLyAxMyBpcyBlbnRlcixcclxuICAgICAgICAgICAgICAgIC8vIDM4IGlzIGtleSB1cCxcclxuICAgICAgICAgICAgICAgIC8vIDQwIGlzIGtleSBkb3duLlxyXG4gICAgICAgICAgICAgICAgc3dpdGNoIChlLndoaWNoKSB7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMTM6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGtleXByZXNzU2xpZGVyLm5vVWlTbGlkZXIuc2V0SGFuZGxlKGhhbmRsZSwgdGhpcy52YWx1ZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBjYXNlIDM4OlxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gR2V0IHN0ZXAgdG8gZ28gaW5jcmVhc2Ugc2xpZGVyIHZhbHVlICh1cClcclxuICAgICAgICAgICAgICAgICAgICAgICAgcG9zaXRpb24gPSBzdGVwWzFdO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gZmFsc2UgPSBubyBzdGVwIGlzIHNldFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAocG9zaXRpb24gPT09IGZhbHNlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwb3NpdGlvbiA9IDE7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIG51bGwgPSBlZGdlIG9mIHNsaWRlclxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAocG9zaXRpb24gIT09IG51bGwpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGtleXByZXNzU2xpZGVyLm5vVWlTbGlkZXIuc2V0SGFuZGxlKGhhbmRsZSwgdmFsdWUgKyBwb3NpdGlvbik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBjYXNlIDQwOlxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgcG9zaXRpb24gPSBzdGVwWzBdO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHBvc2l0aW9uID09PSBmYWxzZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcG9zaXRpb24gPSAxO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAocG9zaXRpb24gIT09IG51bGwpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGtleXByZXNzU2xpZGVyLm5vVWlTbGlkZXIuc2V0SGFuZGxlKGhhbmRsZSwgdmFsdWUgLSBwb3NpdGlvbik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9KTtcclxuICAgIH1cclxuICAgICQoZG9jdW1lbnQpLnJlYWR5KGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAkKCdzZWxlY3QnKS5uaWNlU2VsZWN0KCk7XHJcbiAgICB9KTtcclxufSk7Il19
